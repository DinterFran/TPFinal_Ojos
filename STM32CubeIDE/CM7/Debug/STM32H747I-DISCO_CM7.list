
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025fb4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003bec  08026258  08026258  00027258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00000446  08029e44  08029e44  0002ae44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  0802a28c  0802a28c  0002b28c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 0021b790  90000000  90000000  0002d000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000030  9021b790  9021b790  00248790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  0802a2a4  0802a2a4  002487c0  2**0
                  CONTENTS
  8 .ARM          00000008  0802a2a4  0802a2a4  0002b2a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  0802a2ac  0802a2ac  002487c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   0000001c  0802a2ac  0802a2ac  0002b2ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  0802a2c8  0802a2c8  0002b2c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000013c  24000000  0802a2d0  0002c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_ScratchbufferA 00000100  24000140  0802a40c  0002c140  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 14 TouchGFX_ScratchbufferB 00000100  24000240  0802a50c  0002c240  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 15 .bss          00026df8  24000340  0802a60c  0002c340  2**2
                  ALLOC
 16 ._user_heap_stack 00002000  24027138  0802a60c  0002d138  2**0
                  ALLOC
 17 .ARM.attributes 0000002e  00000000  00000000  002487c0  2**0
                  CONTENTS, READONLY
 18 BufferSection 00232800  d0000000  d0000000  00249000  2**2
                  ALLOC
 19 .debug_info   0010a0f8  00000000  00000000  002487ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 0001afe8  00000000  00000000  003528e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00004078  00000000  00000000  0036d8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 00005001  00000000  00000000  00371948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  000560d9  00000000  00000000  00376949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line   00079f38  00000000  00000000  003cca22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_str    001e8c2d  00000000  00000000  0044695a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000c2  00000000  00000000  0062f587  2**0
                  CONTENTS, READONLY
 27 .debug_frame  0000b35c  00000000  00000000  0062f64c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_loclists 00027e4c  00000000  00000000  0063a9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_line_str 0000006f  00000000  00000000  006627f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000340 	.word	0x24000340
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802623c 	.word	0x0802623c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000344 	.word	0x24000344
 80002dc:	0802623c 	.word	0x0802623c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80006f8:	4901      	ldr	r1, [pc, #4]	@ (8000700 <vApplicationIdleHook+0x8>)
 80006fa:	2000      	movs	r0, #0
 80006fc:	f00f b9c0 	b.w	800fa80 <vTaskSetApplicationTaskTag>
 8000700:	08002375 	.word	0x08002375

08000704 <MAX7219_CS_Enable>:
void MAX7219_ClearAll(void);
void MAX7219_ResetAll(void);
void MAX7219_LightSingleLed(uint8_t matrix_index, uint8_t row, uint8_t bit_position);

void MAX7219_CS_Enable(void) {
    HAL_GPIO_WritePin(MAX7219_CS_GPIO_Port, MAX7219_CS_Pin, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800070a:	4801      	ldr	r0, [pc, #4]	@ (8000710 <MAX7219_CS_Enable+0xc>)
 800070c:	f009 bac6 	b.w	8009c9c <HAL_GPIO_WritePin>
 8000710:	58022400 	.word	0x58022400

08000714 <MAX7219_CS_Disable>:
}

void MAX7219_CS_Disable(void) {
    HAL_GPIO_WritePin(MAX7219_CS_GPIO_Port, MAX7219_CS_Pin, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800071a:	4801      	ldr	r0, [pc, #4]	@ (8000720 <MAX7219_CS_Disable+0xc>)
 800071c:	f009 babe 	b.w	8009c9c <HAL_GPIO_WritePin>
 8000720:	58022400 	.word	0x58022400

08000724 <MatrizLedSelect>:
// Funciona
void MatrizLedSelect(uint8_t num_mx, uint8_t row, uint8_t column){
	// arreglo para darle valores a las matrices


	if(num_mx >= NUM_MATRICES || row >= NUM_FILAS || column >= 8){
 8000724:	2803      	cmp	r0, #3
void MatrizLedSelect(uint8_t num_mx, uint8_t row, uint8_t column){
 8000726:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if(num_mx >= NUM_MATRICES || row >= NUM_FILAS || column >= 8){
 800072a:	d84b      	bhi.n	80007c4 <MatrizLedSelect+0xa0>
 800072c:	ea41 0302 	orr.w	r3, r1, r2
 8000730:	2b07      	cmp	r3, #7
 8000732:	d847      	bhi.n	80007c4 <MatrizLedSelect+0xa0>
		// evitar valores erroneos
		return;
	}
	//primero completo los datos de las filas
	uint8_t current_row = row * 2 - 1;
 8000734:	0049      	lsls	r1, r1, #1
 8000736:	4c29      	ldr	r4, [pc, #164]	@ (80007dc <MatrizLedSelect+0xb8>)
 8000738:	2600      	movs	r6, #0
 800073a:	3901      	subs	r1, #1
 800073c:	4627      	mov	r7, r4
 800073e:	b2c9      	uxtb	r1, r1
		for(uint8_t fila = 0; fila < NUM_FILAS ; fila++){

			if(matriz != num_mx){
				matrix_pattern[matriz][fila] = 0x00;
			} else {
				if( (fila == current_row) || (fila == (current_row-1))){
 8000740:	f101 38ff 	add.w	r8, r1, #4294967295
void MatrizLedSelect(uint8_t num_mx, uint8_t row, uint8_t column){
 8000744:	46bc      	mov	ip, r7
 8000746:	2500      	movs	r5, #0
			if(matriz != num_mx){
 8000748:	fa5f fe86 	uxtb.w	lr, r6
 800074c:	4570      	cmp	r0, lr
 800074e:	d140      	bne.n	80007d2 <MatrizLedSelect+0xae>
				if( (fila == current_row) || (fila == (current_row-1))){
 8000750:	b2eb      	uxtb	r3, r5
 8000752:	428b      	cmp	r3, r1
 8000754:	d001      	beq.n	800075a <MatrizLedSelect+0x36>
 8000756:	45a8      	cmp	r8, r5
 8000758:	d13b      	bne.n	80007d2 <MatrizLedSelect+0xae>
					switch (column) {
 800075a:	2a03      	cmp	r2, #3
 800075c:	d839      	bhi.n	80007d2 <MatrizLedSelect+0xae>
 800075e:	e8df f002 	tbb	[pc, r2]
 8000762:	023a      	.short	0x023a
 8000764:	3634      	.short	0x3634
 8000766:	230c      	movs	r3, #12
		for(uint8_t fila = 0; fila < NUM_FILAS ; fila++){
 8000768:	3501      	adds	r5, #1
				matrix_pattern[matriz][fila] = 0x00;
 800076a:	f80c 3b01 	strb.w	r3, [ip], #1
		for(uint8_t fila = 0; fila < NUM_FILAS ; fila++){
 800076e:	2d08      	cmp	r5, #8
 8000770:	d1ec      	bne.n	800074c <MatrizLedSelect+0x28>
	for (uint8_t matriz = 0 ; matriz < NUM_MATRICES; matriz++){
 8000772:	3601      	adds	r6, #1
 8000774:	3708      	adds	r7, #8
 8000776:	2e04      	cmp	r6, #4
 8000778:	d1e4      	bne.n	8000744 <MatrizLedSelect+0x20>
 800077a:	2501      	movs	r5, #1
        	spi_packet[posicion_spi] = fila;
        	spi_packet[posicion_spi + 1] = matrix_pattern[matriz][fila-1];
        }

		MAX7219_CS_Enable();
		HAL_SPI_Transmit(&hspi5, spi_packet, sizeof(spi_packet), 100);
 800077c:	4e18      	ldr	r6, [pc, #96]	@ (80007e0 <MatrizLedSelect+0xbc>)
        	spi_packet[posicion_spi + 1] = matrix_pattern[matriz][fila-1];
 800077e:	f814 2b01 	ldrb.w	r2, [r4], #1
 8000782:	b2eb      	uxtb	r3, r5
	for(uint8_t fila = 1; fila <= NUM_FILAS ; fila++){
 8000784:	3501      	adds	r5, #1
        	spi_packet[posicion_spi + 1] = matrix_pattern[matriz][fila-1];
 8000786:	f88d 2007 	strb.w	r2, [sp, #7]
 800078a:	79e2      	ldrb	r2, [r4, #7]
        	spi_packet[posicion_spi] = fila;
 800078c:	f88d 3006 	strb.w	r3, [sp, #6]
 8000790:	f88d 3004 	strb.w	r3, [sp, #4]
        	spi_packet[posicion_spi + 1] = matrix_pattern[matriz][fila-1];
 8000794:	f88d 2005 	strb.w	r2, [sp, #5]
        	spi_packet[posicion_spi] = fila;
 8000798:	f88d 3002 	strb.w	r3, [sp, #2]
        	spi_packet[posicion_spi + 1] = matrix_pattern[matriz][fila-1];
 800079c:	7be2      	ldrb	r2, [r4, #15]
        	spi_packet[posicion_spi] = fila;
 800079e:	f88d 3000 	strb.w	r3, [sp]
        	spi_packet[posicion_spi + 1] = matrix_pattern[matriz][fila-1];
 80007a2:	7de3      	ldrb	r3, [r4, #23]
 80007a4:	f88d 2003 	strb.w	r2, [sp, #3]
 80007a8:	f88d 3001 	strb.w	r3, [sp, #1]
		MAX7219_CS_Enable();
 80007ac:	f7ff ffaa 	bl	8000704 <MAX7219_CS_Enable>
		HAL_SPI_Transmit(&hspi5, spi_packet, sizeof(spi_packet), 100);
 80007b0:	2364      	movs	r3, #100	@ 0x64
 80007b2:	2208      	movs	r2, #8
 80007b4:	4669      	mov	r1, sp
 80007b6:	4630      	mov	r0, r6
 80007b8:	f00d f88c 	bl	800d8d4 <HAL_SPI_Transmit>
		MAX7219_CS_Disable();
 80007bc:	f7ff ffaa 	bl	8000714 <MAX7219_CS_Disable>
	for(uint8_t fila = 1; fila <= NUM_FILAS ; fila++){
 80007c0:	2d09      	cmp	r5, #9
 80007c2:	d1dc      	bne.n	800077e <MatrizLedSelect+0x5a>
	}

}
 80007c4:	b002      	add	sp, #8
 80007c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					        break;
 80007ca:	2330      	movs	r3, #48	@ 0x30
 80007cc:	e7cc      	b.n	8000768 <MatrizLedSelect+0x44>
					        break;
 80007ce:	23c0      	movs	r3, #192	@ 0xc0
 80007d0:	e7ca      	b.n	8000768 <MatrizLedSelect+0x44>
 80007d2:	2300      	movs	r3, #0
 80007d4:	e7c8      	b.n	8000768 <MatrizLedSelect+0x44>
					switch (column) {
 80007d6:	2303      	movs	r3, #3
 80007d8:	e7c6      	b.n	8000768 <MatrizLedSelect+0x44>
 80007da:	bf00      	nop
 80007dc:	2400035c 	.word	0x2400035c
 80007e0:	240003e8 	.word	0x240003e8

080007e4 <MAX7219_ClearAll>:




void MAX7219_ClearAll(void) {
 80007e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    for (uint8_t fila = 1; fila <= 8; fila++) {
 80007e6:	2401      	movs	r4, #1
        // y el último par es para la matriz más cercana al micro.
        for (int i = 0; i < NUM_MATRICES; i++) {
            //int index = (NUM_MATRICES - 1) - i;  // índice invertido

            tx[i * 2]     = fila;   // Dirección fila (1 a 8)
            tx[i * 2 + 1] = 0x00;   // Apagar todos los LEDs en esa fila
 80007e8:	2500      	movs	r5, #0
        }

        MAX7219_CS_Enable();
        HAL_SPI_Transmit(&hspi5, tx, sizeof(tx), 500);
 80007ea:	4e11      	ldr	r6, [pc, #68]	@ (8000830 <MAX7219_ClearAll+0x4c>)
            tx[i * 2]     = fila;   // Dirección fila (1 a 8)
 80007ec:	f88d 4000 	strb.w	r4, [sp]
 80007f0:	f88d 4002 	strb.w	r4, [sp, #2]
 80007f4:	f88d 4004 	strb.w	r4, [sp, #4]
 80007f8:	f88d 4006 	strb.w	r4, [sp, #6]
    for (uint8_t fila = 1; fila <= 8; fila++) {
 80007fc:	3401      	adds	r4, #1
            tx[i * 2 + 1] = 0x00;   // Apagar todos los LEDs en esa fila
 80007fe:	f88d 5001 	strb.w	r5, [sp, #1]
    for (uint8_t fila = 1; fila <= 8; fila++) {
 8000802:	b2e4      	uxtb	r4, r4
            tx[i * 2 + 1] = 0x00;   // Apagar todos los LEDs en esa fila
 8000804:	f88d 5003 	strb.w	r5, [sp, #3]
 8000808:	f88d 5005 	strb.w	r5, [sp, #5]
 800080c:	f88d 5007 	strb.w	r5, [sp, #7]
        MAX7219_CS_Enable();
 8000810:	f7ff ff78 	bl	8000704 <MAX7219_CS_Enable>
        HAL_SPI_Transmit(&hspi5, tx, sizeof(tx), 500);
 8000814:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000818:	2208      	movs	r2, #8
 800081a:	4669      	mov	r1, sp
 800081c:	4630      	mov	r0, r6
 800081e:	f00d f859 	bl	800d8d4 <HAL_SPI_Transmit>
        MAX7219_CS_Disable();
 8000822:	f7ff ff77 	bl	8000714 <MAX7219_CS_Disable>
    for (uint8_t fila = 1; fila <= 8; fila++) {
 8000826:	2c09      	cmp	r4, #9
 8000828:	d1e0      	bne.n	80007ec <MAX7219_ClearAll+0x8>
    }
}
 800082a:	b002      	add	sp, #8
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	bf00      	nop
 8000830:	240003e8 	.word	0x240003e8

08000834 <MAX7219_SendToAll>:


HAL_StatusTypeDef MAX7219_SendToAll(uint8_t address, uint8_t data, uint8_t pos) {
 8000834:	b513      	push	{r0, r1, r4, lr}
    uint8_t tx[NUM_MATRICES * 2];

    for (int i = 0; i < NUM_MATRICES; i++) {
        if (i == pos) {
 8000836:	2a00      	cmp	r2, #0
 8000838:	d037      	beq.n	80008aa <MAX7219_SendToAll+0x76>
 800083a:	2300      	movs	r3, #0
 800083c:	461c      	mov	r4, r3
 800083e:	2a01      	cmp	r2, #1
            tx[i * 2]     = address;
 8000840:	f88d 3000 	strb.w	r3, [sp]
            tx[i * 2 + 1] = data;
 8000844:	f88d 4001 	strb.w	r4, [sp, #1]
        if (i == pos) {
 8000848:	bf13      	iteet	ne
 800084a:	2300      	movne	r3, #0
 800084c:	4603      	moveq	r3, r0
 800084e:	460c      	moveq	r4, r1
 8000850:	461c      	movne	r4, r3
 8000852:	2a02      	cmp	r2, #2
            tx[i * 2]     = address;
 8000854:	f88d 3002 	strb.w	r3, [sp, #2]
        if (i == pos) {
 8000858:	bf14      	ite	ne
 800085a:	2300      	movne	r3, #0
 800085c:	4603      	moveq	r3, r0
            tx[i * 2 + 1] = data;
 800085e:	f88d 4003 	strb.w	r4, [sp, #3]
        if (i == pos) {
 8000862:	bf0c      	ite	eq
 8000864:	460c      	moveq	r4, r1
 8000866:	461c      	movne	r4, r3
 8000868:	2a03      	cmp	r2, #3
            tx[i * 2]     = address;
 800086a:	f88d 3004 	strb.w	r3, [sp, #4]
        if (i == pos) {
 800086e:	bf18      	it	ne
 8000870:	2000      	movne	r0, #0
            tx[i * 2 + 1] = data;
 8000872:	f88d 4005 	strb.w	r4, [sp, #5]
        if (i == pos) {
 8000876:	bf18      	it	ne
 8000878:	4601      	movne	r1, r0
            tx[i * 2]     = address;
 800087a:	f88d 0006 	strb.w	r0, [sp, #6]
            tx[i * 2 + 1] = data;
 800087e:	f88d 1007 	strb.w	r1, [sp, #7]
            tx[i * 2]     = 0x00;  // No-op (no hace nada)
            tx[i * 2 + 1] = 0x00;
        }
    }

    MAX7219_CS_Enable();
 8000882:	f7ff ff3f 	bl	8000704 <MAX7219_CS_Enable>
    HAL_Delay(1);
 8000886:	2001      	movs	r0, #1
 8000888:	f008 f9fe 	bl	8008c88 <HAL_Delay>
    HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi5, tx, NUM_MATRICES * 2, 100);
 800088c:	2364      	movs	r3, #100	@ 0x64
 800088e:	2208      	movs	r2, #8
 8000890:	4669      	mov	r1, sp
 8000892:	4807      	ldr	r0, [pc, #28]	@ (80008b0 <MAX7219_SendToAll+0x7c>)
 8000894:	f00d f81e 	bl	800d8d4 <HAL_SPI_Transmit>
 8000898:	4604      	mov	r4, r0
    HAL_Delay(1);
 800089a:	2001      	movs	r0, #1
 800089c:	f008 f9f4 	bl	8008c88 <HAL_Delay>
    MAX7219_CS_Disable();
 80008a0:	f7ff ff38 	bl	8000714 <MAX7219_CS_Disable>

    return ret;
}
 80008a4:	4620      	mov	r0, r4
 80008a6:	b002      	add	sp, #8
 80008a8:	bd10      	pop	{r4, pc}
        if (i == pos) {
 80008aa:	4603      	mov	r3, r0
 80008ac:	460c      	mov	r4, r1
 80008ae:	e7c6      	b.n	800083e <MAX7219_SendToAll+0xa>
 80008b0:	240003e8 	.word	0x240003e8

080008b4 <MAX7219_ResetAll>:
void MAX7219_ResetAll(void) {
 80008b4:	b538      	push	{r3, r4, r5, lr}
 80008b6:	2500      	movs	r5, #0
 80008b8:	b2ec      	uxtb	r4, r5
    for (uint8_t i = 0; i < NUM_MATRICES; i++) {
        MAX7219_SendToAll(0x0F, 0x00, i);  // Display test off
 80008ba:	2100      	movs	r1, #0
 80008bc:	200f      	movs	r0, #15
    for (uint8_t i = 0; i < NUM_MATRICES; i++) {
 80008be:	3501      	adds	r5, #1
        MAX7219_SendToAll(0x0F, 0x00, i);  // Display test off
 80008c0:	4622      	mov	r2, r4
 80008c2:	f7ff ffb7 	bl	8000834 <MAX7219_SendToAll>
        MAX7219_SendToAll(0x09, 0x00, i);  // Decode mode off
 80008c6:	4622      	mov	r2, r4
 80008c8:	2100      	movs	r1, #0
 80008ca:	2009      	movs	r0, #9
 80008cc:	f7ff ffb2 	bl	8000834 <MAX7219_SendToAll>
        MAX7219_SendToAll(0x0B, 0x07, i);  // Scan limit = 8
 80008d0:	4622      	mov	r2, r4
 80008d2:	2107      	movs	r1, #7
 80008d4:	200b      	movs	r0, #11
 80008d6:	f7ff ffad 	bl	8000834 <MAX7219_SendToAll>
        MAX7219_SendToAll(0x0C, 0x01, i);  // Normal operation
 80008da:	4622      	mov	r2, r4
 80008dc:	2101      	movs	r1, #1
 80008de:	200c      	movs	r0, #12
 80008e0:	f7ff ffa8 	bl	8000834 <MAX7219_SendToAll>
        MAX7219_SendToAll(0x0A, 0x08, i);  // Medium intensity
 80008e4:	4622      	mov	r2, r4
 80008e6:	2108      	movs	r1, #8
 80008e8:	200a      	movs	r0, #10
 80008ea:	f7ff ffa3 	bl	8000834 <MAX7219_SendToAll>
    for (uint8_t i = 0; i < NUM_MATRICES; i++) {
 80008ee:	2d04      	cmp	r5, #4
 80008f0:	d1e2      	bne.n	80008b8 <MAX7219_ResetAll+0x4>
    }
}
 80008f2:	bd38      	pop	{r3, r4, r5, pc}

080008f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008f6:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f8:	224c      	movs	r2, #76	@ 0x4c
 80008fa:	2100      	movs	r1, #0
 80008fc:	a809      	add	r0, sp, #36	@ 0x24
 80008fe:	f024 ff07 	bl	8025710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000902:	2220      	movs	r2, #32
 8000904:	2100      	movs	r1, #0
 8000906:	a801      	add	r0, sp, #4
 8000908:	f024 ff02 	bl	8025710 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800090c:	2004      	movs	r0, #4
 800090e:	f00b f849 	bl	800b9a4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000912:	2300      	movs	r3, #0
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	4b26      	ldr	r3, [pc, #152]	@ (80009b0 <SystemClock_Config+0xbc>)
 8000918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800091a:	f022 0201 	bic.w	r2, r2, #1
 800091e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	9300      	str	r3, [sp, #0]
 8000928:	4b22      	ldr	r3, [pc, #136]	@ (80009b4 <SystemClock_Config+0xc0>)
 800092a:	699a      	ldr	r2, [r3, #24]
 800092c:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000930:	619a      	str	r2, [r3, #24]
 8000932:	699a      	ldr	r2, [r3, #24]
 8000934:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000938:	9200      	str	r2, [sp, #0]
 800093a:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800093c:	699a      	ldr	r2, [r3, #24]
 800093e:	0491      	lsls	r1, r2, #18
 8000940:	d5fc      	bpl.n	800093c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000942:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000946:	2703      	movs	r7, #3
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000948:	2540      	movs	r5, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 5;
  RCC_OscInitStruct.PLL.PLLN = 160;
 800094a:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800094e:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000950:	a809      	add	r0, sp, #36	@ 0x24
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000952:	9418      	str	r4, [sp, #96]	@ 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000954:	e9cd 7309 	strd	r7, r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000958:	2301      	movs	r3, #1
 800095a:	e9cd 350c 	strd	r3, r5, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 160;
 800095e:	23a0      	movs	r3, #160	@ 0xa0
 8000960:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000964:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000966:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800096a:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800096e:	e9cd 6319 	strd	r6, r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000972:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000974:	f00b fb16 	bl	800bfa4 <HAL_RCC_OscConfig>
 8000978:	b108      	cbz	r0, 800097e <SystemClock_Config+0x8a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800097c:	e7fe      	b.n	800097c <SystemClock_Config+0x88>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097e:	233f      	movs	r3, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000980:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000982:	e9cd 3701 	strd	r3, r7, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000986:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800098a:	e9cd 0603 	strd	r0, r6, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800098e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000990:	e9cd 5505 	strd	r5, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000994:	e9cd 3507 	strd	r3, r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000998:	f00b fea0 	bl	800c6dc <HAL_RCC_ClockConfig>
 800099c:	4601      	mov	r1, r0
 800099e:	b108      	cbz	r0, 80009a4 <SystemClock_Config+0xb0>
 80009a0:	b672      	cpsid	i
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <SystemClock_Config+0xae>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80009a4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80009a8:	f00b fda8 	bl	800c4fc <HAL_RCC_MCOConfig>
}
 80009ac:	b01d      	add	sp, #116	@ 0x74
 80009ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009b0:	58000400 	.word	0x58000400
 80009b4:	58024800 	.word	0x58024800

080009b8 <main>:
{
 80009b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009bc:	b0bd      	sub	sp, #244	@ 0xf4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80009be:	2210      	movs	r2, #16
 80009c0:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80009c2:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80009c4:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80009c6:	2504      	movs	r5, #4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80009c8:	f024 fea2 	bl	8025710 <memset>
  HAL_MPU_Disable();
 80009cc:	f008 f9d8 	bl	8008d80 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80009d0:	f04f 4110 	mov.w	r1, #2415919104	@ 0x90000000
 80009d4:	4bbe      	ldr	r3, [pc, #760]	@ (8000cd0 <main+0x318>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009d6:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80009d8:	f8ad 40bc 	strh.w	r4, [sp, #188]	@ 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80009dc:	9432      	str	r4, [sp, #200]	@ 0xc8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80009de:	e9cd 1330 	strd	r1, r3, [sp, #192]	@ 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009e2:	f008 f9eb 	bl	8008dbc <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 80009e6:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009e8:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80009ea:	f88d 40bd 	strb.w	r4, [sp, #189]	@ 0xbd
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 80009ee:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009f2:	f008 f9e3 	bl	8008dbc <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80009f6:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009f8:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80009fa:	f88d 40ca 	strb.w	r4, [sp, #202]	@ 0xca
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80009fe:	f88d 30bd 	strb.w	r3, [sp, #189]	@ 0xbd
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000a02:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000a06:	9330      	str	r3, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8000a08:	2318      	movs	r3, #24
 8000a0a:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a0e:	f008 f9d5 	bl	8008dbc <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000a12:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a14:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000a16:	f88d 30bd 	strb.w	r3, [sp, #189]	@ 0xbd
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000a1a:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000a1e:	9330      	str	r3, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000a20:	2312      	movs	r3, #18
 8000a22:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	f88d 30c8 	strb.w	r3, [sp, #200]	@ 0xc8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a2c:	f008 f9c6 	bl	8008dbc <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000a30:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a34:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000a36:	f88d 50bd 	strb.w	r5, [sp, #189]	@ 0xbd
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000a3a:	9330      	str	r3, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000a3c:	2311      	movs	r3, #17
 8000a3e:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a42:	f008 f9bb 	bl	8008dbc <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000a46:	2305      	movs	r3, #5
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a48:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a4a:	f88d 40c8 	strb.w	r4, [sp, #200]	@ 0xc8
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000a4e:	f88d 30bd 	strb.w	r3, [sp, #189]	@ 0xbd
  MPU_InitStruct.BaseAddress = 0x10040000;
 8000a52:	4ba0      	ldr	r3, [pc, #640]	@ (8000cd4 <main+0x31c>)
 8000a54:	9330      	str	r3, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000a56:	230e      	movs	r3, #14
 8000a58:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a5c:	f008 f9ae 	bl	8008dbc <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a60:	4628      	mov	r0, r5
 8000a62:	f008 f99b 	bl	8008d9c <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a66:	4b9c      	ldr	r3, [pc, #624]	@ (8000cd8 <main+0x320>)
 8000a68:	695a      	ldr	r2, [r3, #20]
 8000a6a:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 8000a6e:	d111      	bne.n	8000a94 <main+0xdc>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a74:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a78:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a80:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000a84:	695a      	ldr	r2, [r3, #20]
 8000a86:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000a8a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a90:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a94:	4a90      	ldr	r2, [pc, #576]	@ (8000cd8 <main+0x320>)
 8000a96:	6953      	ldr	r3, [r2, #20]
 8000a98:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8000a9c:	d123      	bne.n	8000ae6 <main+0x12e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000a9e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000aa2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000aa6:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000aaa:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000aae:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ab2:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000ab6:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ab8:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000abc:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000abe:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000ac2:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ac4:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 8000ac8:	d2f9      	bcs.n	8000abe <main+0x106>
    } while(sets-- != 0U);
 8000aca:	3b20      	subs	r3, #32
 8000acc:	f113 0f20 	cmn.w	r3, #32
 8000ad0:	d1f2      	bne.n	8000ab8 <main+0x100>
 8000ad2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000ad6:	6953      	ldr	r3, [r2, #20]
 8000ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000adc:	6153      	str	r3, [r2, #20]
 8000ade:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ae2:	f3bf 8f6f 	isb	sy
  timeout = 0xFFFF;
 8000ae6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000aea:	4d7c      	ldr	r5, [pc, #496]	@ (8000cdc <main+0x324>)
 8000aec:	682c      	ldr	r4, [r5, #0]
 8000aee:	f414 4400 	ands.w	r4, r4, #32768	@ 0x8000
 8000af2:	f000 8338 	beq.w	8001166 <main+0x7ae>
 8000af6:	3b01      	subs	r3, #1
 8000af8:	d2f8      	bcs.n	8000aec <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 8000afa:	b672      	cpsid	i
  while (1)
 8000afc:	e7fe      	b.n	8000afc <main+0x144>
 8000afe:	b672      	cpsid	i
 8000b00:	e7fe      	b.n	8000b00 <main+0x148>
  hqspi.Instance = QUADSPI;
 8000b02:	4877      	ldr	r0, [pc, #476]	@ (8000ce0 <main+0x328>)
 8000b04:	4a77      	ldr	r2, [pc, #476]	@ (8000ce4 <main+0x32c>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000b06:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000b08:	f8c0 9020 	str.w	r9, [r0, #32]
  hqspi.Init.ClockPrescaler = 3;
 8000b0c:	e9c0 2600 	strd	r2, r6, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000b10:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000b14:	e9c0 5304 	strd	r5, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000b18:	f00b f864 	bl	800bbe4 <HAL_QSPI_Init>
 8000b1c:	b108      	cbz	r0, 8000b22 <main+0x16a>
 8000b1e:	b672      	cpsid	i
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <main+0x168>
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000b22:	f240 1303 	movw	r3, #259	@ 0x103
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000b26:	a92f      	add	r1, sp, #188	@ 0xbc
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8000b28:	f88d 90be 	strb.w	r9, [sp, #190]	@ 0xbe
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000b2c:	f8ad 30bc 	strh.w	r3, [sp, #188]	@ 0xbc
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000b30:	f007 fc06 	bl	8008340 <BSP_QSPI_Init>
 8000b34:	b108      	cbz	r0, 8000b3a <main+0x182>
 8000b36:	b672      	cpsid	i
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <main+0x180>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000b3a:	f007 fbad 	bl	8008298 <BSP_QSPI_EnableMemoryMappedMode>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	b108      	cbz	r0, 8000b46 <main+0x18e>
 8000b42:	b672      	cpsid	i
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <main+0x18c>
  hdma2d.Instance = DMA2D;
 8000b46:	4868      	ldr	r0, [pc, #416]	@ (8000ce8 <main+0x330>)
  hdma2d.Init.Mode = DMA2D_R2M;
 8000b48:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000b4c:	4f67      	ldr	r7, [pc, #412]	@ (8000cec <main+0x334>)
  hdma2d.Init.OutputOffset = 0;
 8000b4e:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000b52:	e9c0 7200 	strd	r7, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000b56:	f008 f9be 	bl	8008ed6 <HAL_DMA2D_Init>
 8000b5a:	4607      	mov	r7, r0
 8000b5c:	b108      	cbz	r0, 8000b62 <main+0x1aa>
 8000b5e:	b672      	cpsid	i
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <main+0x1a8>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 8000b62:	4602      	mov	r2, r0
 8000b64:	4641      	mov	r1, r8
 8000b66:	4862      	ldr	r0, [pc, #392]	@ (8000cf0 <main+0x338>)
 8000b68:	f009 f898 	bl	8009c9c <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 8000b6c:	2014      	movs	r0, #20
 8000b6e:	f008 f88b 	bl	8008c88 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 8000b72:	4641      	mov	r1, r8
 8000b74:	462a      	mov	r2, r5
 8000b76:	485e      	ldr	r0, [pc, #376]	@ (8000cf0 <main+0x338>)
 8000b78:	f009 f890 	bl	8009c9c <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 8000b7c:	200a      	movs	r0, #10
 8000b7e:	f008 f883 	bl	8008c88 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000b82:	2224      	movs	r2, #36	@ 0x24
 8000b84:	4639      	mov	r1, r7
 8000b86:	a819      	add	r0, sp, #100	@ 0x64
 8000b88:	f024 fdc2 	bl	8025710 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000b8c:	2218      	movs	r2, #24
 8000b8e:	4639      	mov	r1, r7
 8000b90:	a813      	add	r0, sp, #76	@ 0x4c
 8000b92:	f024 fdbd 	bl	8025710 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 8000b96:	2234      	movs	r2, #52	@ 0x34
 8000b98:	4639      	mov	r1, r7
 8000b9a:	a82f      	add	r0, sp, #188	@ 0xbc
 8000b9c:	f024 fdb8 	bl	8025710 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000ba0:	4639      	mov	r1, r7
 8000ba2:	222c      	movs	r2, #44	@ 0x2c
 8000ba4:	a822      	add	r0, sp, #136	@ 0x88
 8000ba6:	f024 fdb3 	bl	8025710 <memset>
  hdsi.Instance = DSI;
 8000baa:	f8df 8148 	ldr.w	r8, [pc, #328]	@ 8000cf4 <main+0x33c>
 8000bae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000bb2:	a910      	add	r1, sp, #64	@ 0x40
 8000bb4:	4640      	mov	r0, r8
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000bb6:	9512      	str	r5, [sp, #72]	@ 0x48
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000bb8:	e9c8 3700 	strd	r3, r7, [r8]
  PLLInit.PLLNDIV = 119;
 8000bbc:	2377      	movs	r3, #119	@ 0x77
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000bbe:	e9c8 4502 	strd	r4, r5, [r8, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV3;
 8000bc2:	e9cd 3610 	strd	r3, r6, [sp, #64]	@ 0x40
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000bc6:	f008 fad3 	bl	8009170 <HAL_DSI_Init>
 8000bca:	b108      	cbz	r0, 8000bd0 <main+0x218>
 8000bcc:	b672      	cpsid	i
  while (1)
 8000bce:	e7fe      	b.n	8000bce <main+0x216>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000bd0:	e9cd 5019 	strd	r5, r0, [sp, #100]	@ 0x64
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000bd4:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000bd8:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000bdc:	e9cd 001f 	strd	r0, r0, [sp, #124]	@ 0x7c
  HostTimeouts.BTATimeout = 0;
 8000be0:	9021      	str	r0, [sp, #132]	@ 0x84
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000be2:	a919      	add	r1, sp, #100	@ 0x64
 8000be4:	4640      	mov	r0, r8
 8000be6:	f008 fd2f 	bl	8009648 <HAL_DSI_ConfigHostTimeouts>
 8000bea:	b108      	cbz	r0, 8000bf0 <main+0x238>
 8000bec:	b672      	cpsid	i
  while (1)
 8000bee:	e7fe      	b.n	8000bee <main+0x236>
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000bf0:	2321      	movs	r3, #33	@ 0x21
 8000bf2:	251c      	movs	r5, #28
  PhyTimings.DataLaneLP2HSTime = 25;
 8000bf4:	260f      	movs	r6, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000bf6:	a913      	add	r1, sp, #76	@ 0x4c
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000bf8:	e9cd 5313 	strd	r5, r3, [sp, #76]	@ 0x4c
  PhyTimings.DataLaneLP2HSTime = 25;
 8000bfc:	2319      	movs	r3, #25
  PhyTimings.StopWaitTime = 0;
 8000bfe:	e9cd 0017 	strd	r0, r0, [sp, #92]	@ 0x5c
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000c02:	4640      	mov	r0, r8
  PhyTimings.DataLaneLP2HSTime = 25;
 8000c04:	e9cd 6315 	strd	r6, r3, [sp, #84]	@ 0x54
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000c08:	f008 fce1 	bl	80095ce <HAL_DSI_ConfigPhyTimer>
 8000c0c:	b108      	cbz	r0, 8000c12 <main+0x25a>
 8000c0e:	b672      	cpsid	i
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <main+0x258>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000c12:	2104      	movs	r1, #4
 8000c14:	4837      	ldr	r0, [pc, #220]	@ (8000cf4 <main+0x33c>)
 8000c16:	f008 fcc9 	bl	80095ac <HAL_DSI_ConfigFlowControl>
 8000c1a:	b108      	cbz	r0, 8000c20 <main+0x268>
 8000c1c:	b672      	cpsid	i
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <main+0x266>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000c20:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000c24:	4833      	ldr	r0, [pc, #204]	@ (8000cf4 <main+0x33c>)
 8000c26:	f008 fe98 	bl	800995a <HAL_DSI_SetLowPowerRXFilter>
 8000c2a:	4601      	mov	r1, r0
 8000c2c:	b108      	cbz	r0, 8000c32 <main+0x27a>
 8000c2e:	b672      	cpsid	i
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <main+0x278>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000c32:	4830      	ldr	r0, [pc, #192]	@ (8000cf4 <main+0x33c>)
 8000c34:	f008 fa39 	bl	80090aa <HAL_DSI_ConfigErrorMonitor>
 8000c38:	b108      	cbz	r0, 8000c3e <main+0x286>
 8000c3a:	b672      	cpsid	i
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <main+0x284>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000c3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c42:	f44f 7a80 	mov.w	sl, #256	@ 0x100
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000c46:	f44f 6b80 	mov.w	fp, #1024	@ 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000c4a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000c4e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000c52:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000c56:	f44f 2400 	mov.w	r4, #524288	@ 0x80000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000c5a:	f04f 0802 	mov.w	r8, #2
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000c5e:	e9cd a32f 	strd	sl, r3, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000c62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000c66:	f8cd 80ec 	str.w	r8, [sp, #236]	@ 0xec
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000c6a:	e9cd b331 	strd	fp, r3, [sp, #196]	@ 0xc4
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000c6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c72:	e9cd 2333 	strd	r2, r3, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000c76:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c7a:	e9cd 1335 	strd	r1, r3, [sp, #212]	@ 0xd4
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000c7e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000c82:	a92f      	add	r1, sp, #188	@ 0xbc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000c84:	e9cd 0337 	strd	r0, r3, [sp, #220]	@ 0xdc
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000c88:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000c8c:	4819      	ldr	r0, [pc, #100]	@ (8000cf4 <main+0x33c>)
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000c8e:	e9cd 4339 	strd	r4, r3, [sp, #228]	@ 0xe4
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000c92:	f008 fc57 	bl	8009544 <HAL_DSI_ConfigCommand>
 8000c96:	b108      	cbz	r0, 8000c9c <main+0x2e4>
 8000c98:	b672      	cpsid	i
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <main+0x2e2>
  CmdCfg.CommandSize = 400;
 8000c9c:	2305      	movs	r3, #5
 8000c9e:	f44f 77c8 	mov.w	r7, #400	@ 0x190
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000ca2:	2601      	movs	r6, #1
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000ca4:	a922      	add	r1, sp, #136	@ 0x88
  CmdCfg.VirtualChannelID = 0;
 8000ca6:	9022      	str	r0, [sp, #136]	@ 0x88
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000ca8:	9029      	str	r0, [sp, #164]	@ 0xa4
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000caa:	962c      	str	r6, [sp, #176]	@ 0xb0
  CmdCfg.CommandSize = 400;
 8000cac:	e9cd 3723 	strd	r3, r7, [sp, #140]	@ 0x8c
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000cb0:	2310      	movs	r3, #16
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000cb2:	e9cd 3025 	strd	r3, r0, [sp, #148]	@ 0x94
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000cb6:	2380      	movs	r3, #128	@ 0x80
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000cb8:	e9cd 0027 	strd	r0, r0, [sp, #156]	@ 0x9c
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000cbc:	e9cd 302a 	strd	r3, r0, [sp, #168]	@ 0xa8
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000cc0:	480c      	ldr	r0, [pc, #48]	@ (8000cf4 <main+0x33c>)
 8000cc2:	f008 fbcd 	bl	8009460 <HAL_DSI_ConfigAdaptedCommandMode>
 8000cc6:	4601      	mov	r1, r0
 8000cc8:	b1b0      	cbz	r0, 8000cf8 <main+0x340>
 8000cca:	b672      	cpsid	i
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <main+0x314>
 8000cce:	bf00      	nop
 8000cd0:	0300001b 	.word	0x0300001b
 8000cd4:	10040000 	.word	0x10040000
 8000cd8:	e000ed00 	.word	0xe000ed00
 8000cdc:	58024400 	.word	0x58024400
 8000ce0:	24000470 	.word	0x24000470
 8000ce4:	52005000 	.word	0x52005000
 8000ce8:	240006b0 	.word	0x240006b0
 8000cec:	52001000 	.word	0x52001000
 8000cf0:	58021800 	.word	0x58021800
 8000cf4:	24000694 	.word	0x24000694
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000cf8:	487a      	ldr	r0, [pc, #488]	@ (8000ee4 <main+0x52c>)
 8000cfa:	f008 fba0 	bl	800943e <HAL_DSI_SetGenericVCID>
 8000cfe:	4604      	mov	r4, r0
 8000d00:	b108      	cbz	r0, 8000d06 <main+0x34e>
 8000d02:	b672      	cpsid	i
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <main+0x34c>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000d06:	2234      	movs	r2, #52	@ 0x34
 8000d08:	4601      	mov	r1, r0
 8000d0a:	a822      	add	r0, sp, #136	@ 0x88
  hltdc.Instance = LTDC;
 8000d0c:	4d76      	ldr	r5, [pc, #472]	@ (8000ee8 <main+0x530>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000d0e:	f024 fcff 	bl	8025710 <memset>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000d12:	f8df e220 	ldr.w	lr, [pc, #544]	@ 8000f34 <main+0x57c>
 8000d16:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  hltdc.Init.AccumulatedVBP = 2;
 8000d1a:	f8c5 8020 	str.w	r8, [r5, #32]
  hltdc.Init.TotalHeigh = 483;
 8000d1e:	f240 1993 	movw	r9, #403	@ 0x193
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000d22:	4628      	mov	r0, r5
  hltdc.Init.Backcolor.Blue = 0;
 8000d24:	86ac      	strh	r4, [r5, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 8000d26:	f885 4036 	strb.w	r4, [r5, #54]	@ 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000d2a:	e9c5 e300 	strd	lr, r3, [r5]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000d2e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  hltdc.Init.AccumulatedHBP = 2;
 8000d32:	e9c5 4806 	strd	r4, r8, [r5, #24]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000d36:	e9c5 3402 	strd	r3, r4, [r5, #8]
  hltdc.Init.AccumulatedActiveH = 482;
 8000d3a:	f44f 78c9 	mov.w	r8, #402	@ 0x192
 8000d3e:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
 8000d42:	e9c5 8309 	strd	r8, r3, [r5, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 483;
 8000d46:	f240 13e3 	movw	r3, #483	@ 0x1e3
  hltdc.Init.HorizontalSync = 0;
 8000d4a:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hltdc.Init.TotalHeigh = 483;
 8000d4e:	e9c5 930b 	strd	r9, r3, [r5, #44]	@ 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000d52:	f00a fb0f 	bl	800b374 <HAL_LTDC_Init>
 8000d56:	4602      	mov	r2, r0
 8000d58:	b108      	cbz	r0, 8000d5e <main+0x3a6>
 8000d5a:	b672      	cpsid	i
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <main+0x3a4>
  pLayerCfg.Alpha = 255;
 8000d5e:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000d60:	f44f 6cc0 	mov.w	ip, #1536	@ 0x600
  pLayerCfg.WindowY1 = 480;
 8000d64:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
  pLayerCfg.WindowY0 = 0;
 8000d68:	9024      	str	r0, [sp, #144]	@ 0x90
  pLayerCfg.Backcolor.Blue = 0;
 8000d6a:	f8ad 00b8 	strh.w	r0, [sp, #184]	@ 0xb8
  pLayerCfg.Backcolor.Red = 0;
 8000d6e:	f88d 00ba 	strb.w	r0, [sp, #186]	@ 0xba
  pLayerCfg.ImageHeight = 480;
 8000d72:	932d      	str	r3, [sp, #180]	@ 0xb4
  pLayerCfg.Alpha0 = 0;
 8000d74:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000d78:	2107      	movs	r1, #7
 8000d7a:	e9cd c129 	strd	ip, r1, [sp, #164]	@ 0xa4
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000d7e:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
  pLayerCfg.WindowX1 = 400;
 8000d82:	e9cd 0722 	strd	r0, r7, [sp, #136]	@ 0x88
  pLayerCfg.ImageWidth = 400;
 8000d86:	e9cd 172b 	strd	r1, r7, [sp, #172]	@ 0xac
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d8a:	4628      	mov	r0, r5
 8000d8c:	a922      	add	r1, sp, #136	@ 0x88
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000d8e:	e9cd 3625 	strd	r3, r6, [sp, #148]	@ 0x94
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d92:	f00a fba4 	bl	800b4de <HAL_LTDC_ConfigLayer>
 8000d96:	4604      	mov	r4, r0
 8000d98:	b108      	cbz	r0, 8000d9e <main+0x3e6>
 8000d9a:	b672      	cpsid	i
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <main+0x3e4>
  __HAL_LTDC_DISABLE(&hltdc);
 8000d9e:	682a      	ldr	r2, [r5, #0]
  HAL_DSI_Start(&hdsi);
 8000da0:	4850      	ldr	r0, [pc, #320]	@ (8000ee4 <main+0x52c>)
  __HAL_LTDC_DISABLE(&hltdc);
 8000da2:	6993      	ldr	r3, [r2, #24]
 8000da4:	f023 0301 	bic.w	r3, r3, #1
 8000da8:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8000daa:	f008 fcb3 	bl	8009714 <HAL_DSI_Start>
  IOCtx.Address     = 0;
 8000dae:	494f      	ldr	r1, [pc, #316]	@ (8000eec <main+0x534>)
  IOCtx.GetTick     = BSP_GetTick;
 8000db0:	4b4f      	ldr	r3, [pc, #316]	@ (8000ef0 <main+0x538>)
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000db2:	4850      	ldr	r0, [pc, #320]	@ (8000ef4 <main+0x53c>)
  IOCtx.GetTick     = BSP_GetTick;
 8000db4:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000db6:	4b50      	ldr	r3, [pc, #320]	@ (8000ef8 <main+0x540>)
  IOCtx.Address     = 0;
 8000db8:	800c      	strh	r4, [r1, #0]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000dba:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 8000dbc:	4b4f      	ldr	r3, [pc, #316]	@ (8000efc <main+0x544>)
 8000dbe:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000dc0:	f007 f862 	bl	8007e88 <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8000dc4:	4632      	mov	r2, r6
 8000dc6:	4621      	mov	r1, r4
 8000dc8:	484a      	ldr	r0, [pc, #296]	@ (8000ef4 <main+0x53c>)
 8000dca:	f006 fccd 	bl	8007768 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000dce:	2328      	movs	r3, #40	@ 0x28
 8000dd0:	2215      	movs	r2, #21
 8000dd2:	4621      	mov	r1, r4
 8000dd4:	4843      	ldr	r0, [pc, #268]	@ (8000ee4 <main+0x52c>)
 8000dd6:	9400      	str	r4, [sp, #0]
 8000dd8:	f008 fccf 	bl	800977a <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000ddc:	a92f      	add	r1, sp, #188	@ 0xbc
 8000dde:	4841      	ldr	r0, [pc, #260]	@ (8000ee4 <main+0x52c>)
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000de0:	9439      	str	r4, [sp, #228]	@ 0xe4
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000de2:	e9cd 442f 	strd	r4, r4, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000de6:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000dea:	e9cd 4433 	strd	r4, r4, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000dee:	e9cd 4435 	strd	r4, r4, [sp, #212]	@ 0xd4
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000df2:	e9cd 4437 	strd	r4, r4, [sp, #220]	@ 0xdc
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000df6:	f008 fba5 	bl	8009544 <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8000dfa:	4622      	mov	r2, r4
 8000dfc:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000e00:	4628      	mov	r0, r5
 8000e02:	f00a fb99 	bl	800b538 <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8000e06:	682a      	ldr	r2, [r5, #0]
  hcrc.Instance = CRC;
 8000e08:	483d      	ldr	r0, [pc, #244]	@ (8000f00 <main+0x548>)
  __HAL_LTDC_ENABLE(&hltdc);
 8000e0a:	6993      	ldr	r3, [r2, #24]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000e0c:	8084      	strh	r4, [r0, #4]
  __HAL_LTDC_ENABLE(&hltdc);
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	6193      	str	r3, [r2, #24]
  hcrc.Instance = CRC;
 8000e14:	4b3b      	ldr	r3, [pc, #236]	@ (8000f04 <main+0x54c>)
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000e16:	6206      	str	r6, [r0, #32]
  hcrc.Instance = CRC;
 8000e18:	6003      	str	r3, [r0, #0]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000e1a:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e1e:	f007 fff9 	bl	8008e14 <HAL_CRC_Init>
 8000e22:	b108      	cbz	r0, 8000e28 <main+0x470>
 8000e24:	b672      	cpsid	i
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <main+0x46e>
  hjpeg.Instance = JPEG;
 8000e28:	4837      	ldr	r0, [pc, #220]	@ (8000f08 <main+0x550>)
 8000e2a:	4b38      	ldr	r3, [pc, #224]	@ (8000f0c <main+0x554>)
 8000e2c:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000e2e:	f009 fc8f 	bl	800a750 <HAL_JPEG_Init>
 8000e32:	b108      	cbz	r0, 8000e38 <main+0x480>
 8000e34:	b672      	cpsid	i
  while (1)
 8000e36:	e7fe      	b.n	8000e36 <main+0x47e>
  hspi5.Instance = SPI5;
 8000e38:	4835      	ldr	r0, [pc, #212]	@ (8000f10 <main+0x558>)
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000e3a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e3e:	4a35      	ldr	r2, [pc, #212]	@ (8000f14 <main+0x55c>)
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e40:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e44:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000e48:	e9c0 2300 	strd	r2, r3, [r0]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e4c:	2307      	movs	r3, #7
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e4e:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e52:	e9c0 1302 	strd	r1, r3, [r0, #8]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e56:	e9c0 4206 	strd	r4, r2, [r0, #24]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e5a:	2300      	movs	r3, #0
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e5c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e60:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e64:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi5.Init.CRCPolynomial = 0x0;
 8000e68:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e6c:	e9c0 230d 	strd	r2, r3, [r0, #52]	@ 0x34
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e70:	e9c0 330f 	strd	r3, r3, [r0, #60]	@ 0x3c
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e74:	e9c0 3311 	strd	r3, r3, [r0, #68]	@ 0x44
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e78:	e9c0 3313 	strd	r3, r3, [r0, #76]	@ 0x4c
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e7c:	e9c0 3315 	strd	r3, r3, [r0, #84]	@ 0x54
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000e80:	f00c fc84 	bl	800d78c <HAL_SPI_Init>
 8000e84:	4604      	mov	r4, r0
 8000e86:	b108      	cbz	r0, 8000e8c <main+0x4d4>
 8000e88:	b672      	cpsid	i
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <main+0x4d2>
  MX_TouchGFX_Init();
 8000e8c:	f000 fe1e 	bl	8001acc <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8000e90:	f000 fe1b 	bl	8001aca <MX_TouchGFX_PreOSInit>
  HAL_GPIO_WritePin(MAX7219_CS_GPIO_Port, MAX7219_CS_Pin, GPIO_PIN_SET);  // CS desactivado por defecto
 8000e94:	2201      	movs	r2, #1
 8000e96:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e9a:	481f      	ldr	r0, [pc, #124]	@ (8000f18 <main+0x560>)
 8000e9c:	f008 fefe 	bl	8009c9c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000ea0:	2064      	movs	r0, #100	@ 0x64
 8000ea2:	f007 fef1 	bl	8008c88 <HAL_Delay>
  MAX7219_ResetAll();  // Inicializa todas las matrices
 8000ea6:	f7ff fd05 	bl	80008b4 <MAX7219_ResetAll>
  HAL_Delay(50);
 8000eaa:	2032      	movs	r0, #50	@ 0x32
 8000eac:	f007 feec 	bl	8008c88 <HAL_Delay>
  HAL_Delay(2000);
 8000eb0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000eb4:	f007 fee8 	bl	8008c88 <HAL_Delay>
  MAX7219_ClearAll();
 8000eb8:	f7ff fc94 	bl	80007e4 <MAX7219_ClearAll>
  osKernelInitialize();
 8000ebc:	f00d f886 	bl	800dfcc <osKernelInitialize>
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000ec0:	4a16      	ldr	r2, [pc, #88]	@ (8000f1c <main+0x564>)
 8000ec2:	4621      	mov	r1, r4
 8000ec4:	4816      	ldr	r0, [pc, #88]	@ (8000f20 <main+0x568>)
 8000ec6:	f00d f8ad 	bl	800e024 <osThreadNew>
 8000eca:	4b16      	ldr	r3, [pc, #88]	@ (8000f24 <main+0x56c>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000ecc:	4a16      	ldr	r2, [pc, #88]	@ (8000f28 <main+0x570>)
 8000ece:	4621      	mov	r1, r4
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000ed0:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000ed2:	4816      	ldr	r0, [pc, #88]	@ (8000f2c <main+0x574>)
 8000ed4:	f00d f8a6 	bl	800e024 <osThreadNew>
 8000ed8:	4b15      	ldr	r3, [pc, #84]	@ (8000f30 <main+0x578>)
 8000eda:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000edc:	f00d f888 	bl	800dff0 <osKernelStart>
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <main+0x528>
 8000ee2:	bf00      	nop
 8000ee4:	24000694 	.word	0x24000694
 8000ee8:	240004bc 	.word	0x240004bc
 8000eec:	2400037c 	.word	0x2400037c
 8000ef0:	08008269 	.word	0x08008269
 8000ef4:	2400038c 	.word	0x2400038c
 8000ef8:	08002075 	.word	0x08002075
 8000efc:	080020ad 	.word	0x080020ad
 8000f00:	24000718 	.word	0x24000718
 8000f04:	58024c00 	.word	0x58024c00
 8000f08:	2400063c 	.word	0x2400063c
 8000f0c:	52003000 	.word	0x52003000
 8000f10:	240003e8 	.word	0x240003e8
 8000f14:	40015000 	.word	0x40015000
 8000f18:	58022400 	.word	0x58022400
 8000f1c:	080262d4 	.word	0x080262d4
 8000f20:	08001adb 	.word	0x08001adb
 8000f24:	240003b0 	.word	0x240003b0
 8000f28:	080262b0 	.word	0x080262b0
 8000f2c:	08003c15 	.word	0x08003c15
 8000f30:	240003ac 	.word	0x240003ac
 8000f34:	50001000 	.word	0x50001000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	2214      	movs	r2, #20
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	a82f      	add	r0, sp, #188	@ 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3e:	2501      	movs	r5, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f024 fbe6 	bl	8025710 <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f44:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|GPIO_PIN_11|FRAME_RATE_Pin|RENDER_TIME_Pin
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f641 3108 	movw	r1, #6920	@ 0x1b08
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|GPIO_PIN_11|FRAME_RATE_Pin|RENDER_TIME_Pin
 8000f52:	4896      	ldr	r0, [pc, #600]	@ (80011ac <main+0x7f4>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f54:	f04f 0b00 	mov.w	fp, #0
 8000f58:	2603      	movs	r6, #3
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f5a:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2702      	movs	r7, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f60:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	f44f 7980 	mov.w	r9, #256	@ 0x100
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000f68:	f04f 0808 	mov.w	r8, #8
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f6c:	f44f 6a00 	mov.w	sl, #2048	@ 0x800
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f74:	9305      	str	r3, [sp, #20]
 8000f76:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f78:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000f7c:	f043 0302 	orr.w	r3, r3, #2
 8000f80:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000f84:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000f88:	f003 0302 	and.w	r3, r3, #2
 8000f8c:	9306      	str	r3, [sp, #24]
 8000f8e:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f90:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000f94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f98:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000f9c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fa4:	9307      	str	r3, [sp, #28]
 8000fa6:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fa8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000fac:	f043 0310 	orr.w	r3, r3, #16
 8000fb0:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000fb4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000fb8:	f003 0310 	and.w	r3, r3, #16
 8000fbc:	9308      	str	r3, [sp, #32]
 8000fbe:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fc0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000fc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fc8:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000fcc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8000fd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000fdc:	f043 0304 	orr.w	r3, r3, #4
 8000fe0:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000fe4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000fe8:	f003 0304 	and.w	r3, r3, #4
 8000fec:	930a      	str	r3, [sp, #40]	@ 0x28
 8000fee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000ff0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000ff4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ff8:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000ffc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001000:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001004:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001006:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001008:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800100c:	f043 0308 	orr.w	r3, r3, #8
 8001010:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001014:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001018:	f003 0308 	and.w	r3, r3, #8
 800101c:	930c      	str	r3, [sp, #48]	@ 0x30
 800101e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001020:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800102c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	930d      	str	r3, [sp, #52]	@ 0x34
 8001036:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001038:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800103c:	f043 0320 	orr.w	r3, r3, #32
 8001040:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001044:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001048:	f003 0320 	and.w	r3, r3, #32
 800104c:	930e      	str	r3, [sp, #56]	@ 0x38
 800104e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001050:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001054:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001058:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800105c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001060:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001064:	930f      	str	r3, [sp, #60]	@ 0x3c
 8001066:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|GPIO_PIN_11|FRAME_RATE_Pin|RENDER_TIME_Pin
 8001068:	f008 fe18 	bl	8009c9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	2108      	movs	r1, #8
 8001070:	484f      	ldr	r0, [pc, #316]	@ (80011b0 <main+0x7f8>)
 8001072:	f008 fe13 	bl	8009c9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800107c:	484d      	ldr	r0, [pc, #308]	@ (80011b4 <main+0x7fc>)
 800107e:	f008 fe0d 	bl	8009c9c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001082:	f241 3308 	movw	r3, #4872	@ 0x1308
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001086:	a92f      	add	r1, sp, #188	@ 0xbc
 8001088:	4848      	ldr	r0, [pc, #288]	@ (80011ac <main+0x7f4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108a:	e9cd 352f 	strd	r3, r5, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108e:	e9cd b631 	strd	fp, r6, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001092:	f008 fc79 	bl	8009988 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001096:	a92f      	add	r1, sp, #188	@ 0xbc
 8001098:	4847      	ldr	r0, [pc, #284]	@ (80011b8 <main+0x800>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800109a:	f8cd b0cc 	str.w	fp, [sp, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	e9cd 972f 	strd	r9, r7, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	e9cd bb31 	strd	fp, fp, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a6:	f008 fc6f 	bl	8009988 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 80010aa:	a92f      	add	r1, sp, #188	@ 0xbc
 80010ac:	4840      	ldr	r0, [pc, #256]	@ (80011b0 <main+0x7f8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ae:	e9cd 852f 	strd	r8, r5, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b2:	e9cd 5631 	strd	r5, r6, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 80010b6:	f008 fc67 	bl	8009988 <HAL_GPIO_Init>
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80010ba:	a92f      	add	r1, sp, #188	@ 0xbc
 80010bc:	483d      	ldr	r0, [pc, #244]	@ (80011b4 <main+0x7fc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010be:	e9cd 952f 	strd	r9, r5, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c2:	e9cd b631 	strd	fp, r6, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80010c6:	f008 fc5f 	bl	8009988 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80010ca:	a92f      	add	r1, sp, #188	@ 0xbc
 80010cc:	4837      	ldr	r0, [pc, #220]	@ (80011ac <main+0x7f4>)
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80010ce:	f04f 0940 	mov.w	r9, #64	@ 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d2:	e9cd a52f 	strd	sl, r5, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	e9cd bb31 	strd	fp, fp, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80010da:	f008 fc55 	bl	8009988 <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
 80010de:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 80010e2:	465a      	mov	r2, fp
 80010e4:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
 80010e6:	432b      	orrs	r3, r5
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 80010e8:	207a      	movs	r0, #122	@ 0x7a
  __HAL_RCC_MDMA_CLK_ENABLE();
 80010ea:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 80010ee:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80010f2:	2404      	movs	r4, #4
  __HAL_RCC_MDMA_CLK_ENABLE();
 80010f4:	402b      	ands	r3, r5
 80010f6:	9304      	str	r3, [sp, #16]
 80010f8:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 80010fa:	f007 fdef 	bl	8008cdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 80010fe:	207a      	movs	r0, #122	@ 0x7a
 8001100:	f007 fe1e 	bl	8008d40 <HAL_NVIC_EnableIRQ>
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8001104:	4a2d      	ldr	r2, [pc, #180]	@ (80011bc <main+0x804>)
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001106:	482e      	ldr	r0, [pc, #184]	@ (80011c0 <main+0x808>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001108:	a92f      	add	r1, sp, #188	@ 0xbc
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 800110a:	6813      	ldr	r3, [r2, #0]
 800110c:	f023 0301 	bic.w	r3, r3, #1
 8001110:	6013      	str	r3, [r2, #0]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001112:	4b2c      	ldr	r3, [pc, #176]	@ (80011c4 <main+0x80c>)
  SdramTiming.LoadToActiveDelay = 2;
 8001114:	972f      	str	r7, [sp, #188]	@ 0xbc
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8001116:	6085      	str	r5, [r0, #8]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001118:	e9c0 3500 	strd	r3, r5, [r0]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800111c:	2320      	movs	r3, #32
 800111e:	e9c0 4303 	strd	r4, r3, [r0, #12]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001122:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001126:	e9c0 9305 	strd	r9, r3, [r0, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800112a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800112e:	e9c0 3b09 	strd	r3, fp, [r0, #36]	@ 0x24
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001132:	2307      	movs	r3, #7
  SdramTiming.RCDDelay = 2;
 8001134:	e9cd 7734 	strd	r7, r7, [sp, #208]	@ 0xd0
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001138:	e9c0 ba07 	strd	fp, sl, [r0, #28]
  SdramTiming.SelfRefreshTime = 4;
 800113c:	e9cd 3430 	strd	r3, r4, [sp, #192]	@ 0xc0
  SdramTiming.WriteRecoveryTime = 3;
 8001140:	e9cd 3632 	strd	r3, r6, [sp, #200]	@ 0xc8
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001144:	f00c fa5e 	bl	800d604 <HAL_SDRAM_Init>
 8001148:	4607      	mov	r7, r0
 800114a:	2800      	cmp	r0, #0
 800114c:	f47f acd7 	bne.w	8000afe <main+0x146>
  BSP_SDRAM_DeInit(0);
 8001150:	f007 fab0 	bl	80086b4 <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8001154:	4638      	mov	r0, r7
 8001156:	f007 fafb 	bl	8008750 <BSP_SDRAM_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2800      	cmp	r0, #0
 800115e:	f43f acd0 	beq.w	8000b02 <main+0x14a>
 8001162:	b672      	cpsid	i
  while (1)
 8001164:	e7fe      	b.n	8001164 <main+0x7ac>
  HAL_Init();
 8001166:	f007 fd4f 	bl	8008c08 <HAL_Init>
  SystemClock_Config();
 800116a:	f7ff fbc3 	bl	80008f4 <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 800116e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 8001172:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8001174:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001178:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 800117c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8001180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001184:	9303      	str	r3, [sp, #12]
 8001186:	9b03      	ldr	r3, [sp, #12]
HAL_HSEM_FastTake(HSEM_ID_0);
 8001188:	f008 fd96 	bl	8009cb8 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 800118c:	4621      	mov	r1, r4
 800118e:	4620      	mov	r0, r4
 8001190:	f008 fda0 	bl	8009cd4 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001194:	4c0c      	ldr	r4, [pc, #48]	@ (80011c8 <main+0x810>)
timeout = 0xFFFF;
 8001196:	f64f 73ff 	movw	r3, #65535	@ 0xffff
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800119a:	6822      	ldr	r2, [r4, #0]
 800119c:	0412      	lsls	r2, r2, #16
 800119e:	f53f aecb 	bmi.w	8000f38 <main+0x580>
 80011a2:	3b01      	subs	r3, #1
 80011a4:	d2f9      	bcs.n	800119a <main+0x7e2>
 80011a6:	b672      	cpsid	i
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <main+0x7f0>
 80011aa:	bf00      	nop
 80011ac:	58022400 	.word	0x58022400
 80011b0:	58021800 	.word	0x58021800
 80011b4:	58021400 	.word	0x58021400
 80011b8:	58020000 	.word	0x58020000
 80011bc:	52004000 	.word	0x52004000
 80011c0:	240003b4 	.word	0x240003b4
 80011c4:	52004140 	.word	0x52004140
 80011c8:	58024400 	.word	0x58024400

080011cc <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 80011cc:	6802      	ldr	r2, [r0, #0]
 80011ce:	4b03      	ldr	r3, [pc, #12]	@ (80011dc <HAL_TIM_PeriodElapsedCallback+0x10>)
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d101      	bne.n	80011d8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80011d4:	f007 bd46 	b.w	8008c64 <HAL_IncTick>
}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40001000 	.word	0x40001000

080011e0 <Error_Handler>:
 80011e0:	b672      	cpsid	i
  while (1)
 80011e2:	e7fe      	b.n	80011e2 <Error_Handler+0x2>

080011e4 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001210 <HAL_MspInit+0x2c>)
{
 80011e6:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011e8:	210f      	movs	r1, #15
 80011ea:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ee:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 80011f2:	f042 0202 	orr.w	r2, r2, #2
 80011f6:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011fa:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001208:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800120a:	f007 bd67 	b.w	8008cdc <HAL_NVIC_SetPriority>
 800120e:	bf00      	nop
 8001210:	58024400 	.word	0x58024400

08001214 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001214:	6802      	ldr	r2, [r0, #0]
{
 8001216:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001218:	4b09      	ldr	r3, [pc, #36]	@ (8001240 <HAL_CRC_MspInit+0x2c>)
 800121a:	429a      	cmp	r2, r3
 800121c:	d10d      	bne.n	800123a <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800121e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001222:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001226:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800122a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800122e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001232:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001236:	9301      	str	r3, [sp, #4]
 8001238:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 800123a:	b002      	add	sp, #8
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	58024c00 	.word	0x58024c00

08001244 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8001244:	4b0f      	ldr	r3, [pc, #60]	@ (8001284 <HAL_DMA2D_MspInit+0x40>)
{
 8001246:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8001248:	6802      	ldr	r2, [r0, #0]
 800124a:	429a      	cmp	r2, r3
 800124c:	d117      	bne.n	800127e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800124e:	4b0e      	ldr	r3, [pc, #56]	@ (8001288 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001250:	2107      	movs	r1, #7
 8001252:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001254:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001258:	f042 0210 	orr.w	r2, r2, #16
 800125c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001260:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001262:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001266:	f003 0310 	and.w	r3, r3, #16
 800126a:	9301      	str	r3, [sp, #4]
 800126c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 800126e:	f007 fd35 	bl	8008cdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001272:	205a      	movs	r0, #90	@ 0x5a

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001274:	b003      	add	sp, #12
 8001276:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800127a:	f007 bd61 	b.w	8008d40 <HAL_NVIC_EnableIRQ>
}
 800127e:	b003      	add	sp, #12
 8001280:	f85d fb04 	ldr.w	pc, [sp], #4
 8001284:	52001000 	.word	0x52001000
 8001288:	58024400 	.word	0x58024400

0800128c <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 800128c:	b510      	push	{r4, lr}
 800128e:	b0ba      	sub	sp, #232	@ 0xe8
 8001290:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001292:	2214      	movs	r2, #20
 8001294:	2100      	movs	r1, #0
 8001296:	a803      	add	r0, sp, #12
 8001298:	f024 fa3a 	bl	8025710 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800129c:	22c8      	movs	r2, #200	@ 0xc8
 800129e:	2100      	movs	r1, #0
 80012a0:	a808      	add	r0, sp, #32
 80012a2:	f024 fa35 	bl	8025710 <memset>
  if(hdsi->Instance==DSI)
 80012a6:	6823      	ldr	r3, [r4, #0]
 80012a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012ac:	d138      	bne.n	8001320 <HAL_DSI_MspInit+0x94>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 80012ae:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80012b2:	2300      	movs	r3, #0
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b4:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 80012b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ba:	f00b fc95 	bl	800cbe8 <HAL_RCCEx_PeriphCLKConfig>
 80012be:	b108      	cbz	r0, 80012c4 <HAL_DSI_MspInit+0x38>
    {
      Error_Handler();
 80012c0:	f7ff ff8e 	bl	80011e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80012c4:	4b17      	ldr	r3, [pc, #92]	@ (8001324 <HAL_DSI_MspInit+0x98>)
    DSI_D0N     ------> DSIHOST_D0N
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80012c8:	a903      	add	r1, sp, #12
 80012ca:	4817      	ldr	r0, [pc, #92]	@ (8001328 <HAL_DSI_MspInit+0x9c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 80012cc:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80012d0:	f042 0210 	orr.w	r2, r2, #16
 80012d4:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 80012d8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80012dc:	f002 0210 	and.w	r2, r2, #16
 80012e0:	9201      	str	r2, [sp, #4]
 80012e2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80012e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80012ec:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80012f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012fa:	9302      	str	r3, [sp, #8]
 80012fc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001304:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800130a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800130c:	f008 fb3c 	bl	8009988 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8001310:	207b      	movs	r0, #123	@ 0x7b
 8001312:	4622      	mov	r2, r4
 8001314:	2107      	movs	r1, #7
 8001316:	f007 fce1 	bl	8008cdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 800131a:	207b      	movs	r0, #123	@ 0x7b
 800131c:	f007 fd10 	bl	8008d40 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DSI_MspInit 1 */

  }

}
 8001320:	b03a      	add	sp, #232	@ 0xe8
 8001322:	bd10      	pop	{r4, pc}
 8001324:	58024400 	.word	0x58024400
 8001328:	58022400 	.word	0x58022400

0800132c <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 800132c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hjpeg->Instance==JPEG)
 800132e:	4b3c      	ldr	r3, [pc, #240]	@ (8001420 <HAL_JPEG_MspInit+0xf4>)
{
 8001330:	4605      	mov	r5, r0
  if(hjpeg->Instance==JPEG)
 8001332:	6802      	ldr	r2, [r0, #0]
 8001334:	429a      	cmp	r2, r3
 8001336:	d170      	bne.n	800141a <HAL_JPEG_MspInit+0xee>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001338:	4b3a      	ldr	r3, [pc, #232]	@ (8001424 <HAL_JPEG_MspInit+0xf8>)
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 800133a:	2102      	movs	r1, #2
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
 800133c:	4c3a      	ldr	r4, [pc, #232]	@ (8001428 <HAL_JPEG_MspInit+0xfc>)
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 800133e:	f04f 7e00 	mov.w	lr, #33554432	@ 0x2000000
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001342:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8001346:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 8001434 <HAL_JPEG_MspInit+0x108>
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 800134a:	4620      	mov	r0, r4
    __HAL_RCC_JPEG_CLK_ENABLE();
 800134c:	f042 0220 	orr.w	r2, r2, #32
 8001350:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 8001354:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001356:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800135a:	f003 0320 	and.w	r3, r3, #32
 800135e:	9301      	str	r3, [sp, #4]
 8001360:	9b01      	ldr	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8001362:	2311      	movs	r3, #17
 8001364:	e9c4 c300 	strd	ip, r3, [r4]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 8001368:	2300      	movs	r3, #0
 800136a:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 800136e:	e9c4 3207 	strd	r3, r2, [r4, #28]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8001372:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001374:	6123      	str	r3, [r4, #16]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 8001376:	e9c4 1305 	strd	r1, r3, [r4, #20]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 800137a:	e9c4 e209 	strd	lr, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 800137e:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8001382:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 8001386:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 800138a:	e9c4 120b 	strd	r1, r2, [r4, #44]	@ 0x2c
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 800138e:	f00a f93e 	bl	800b60e <HAL_MDMA_Init>
 8001392:	b108      	cbz	r0, 8001398 <HAL_JPEG_MspInit+0x6c>
    {
      Error_Handler();
 8001394:	f7ff ff24 	bl	80011e0 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 8001398:	2200      	movs	r2, #0
 800139a:	4823      	ldr	r0, [pc, #140]	@ (8001428 <HAL_JPEG_MspInit+0xfc>)
 800139c:	4611      	mov	r1, r2
 800139e:	f00a f9c4 	bl	800b72a <HAL_MDMA_ConfigPostRequestMask>
 80013a2:	b108      	cbz	r0, 80013a8 <HAL_JPEG_MspInit+0x7c>
    {
      Error_Handler();
 80013a4:	f7ff ff1c 	bl	80011e0 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 80013a8:	632c      	str	r4, [r5, #48]	@ 0x30

    /* JPEG_OUTFIFO_TH Init */
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 80013aa:	2313      	movs	r3, #19
 80013ac:	4a1f      	ldr	r2, [pc, #124]	@ (800142c <HAL_JPEG_MspInit+0x100>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80013ae:	2108      	movs	r1, #8
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 80013b0:	6425      	str	r5, [r4, #64]	@ 0x40
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 80013b2:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
 80013b6:	4c1e      	ldr	r4, [pc, #120]	@ (8001430 <HAL_JPEG_MspInit+0x104>)
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 80013b8:	e9c4 2300 	strd	r2, r3, [r4]
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
 80013bc:	2300      	movs	r3, #0
 80013be:	22c0      	movs	r2, #192	@ 0xc0
 80013c0:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80013c4:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 80013c6:	6223      	str	r3, [r4, #32]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80013c8:	e9c4 1206 	strd	r1, r2, [r4, #24]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80013cc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
 80013d0:	e9c4 1209 	strd	r1, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 80013d4:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 80013d8:	e9c4 020b 	strd	r0, r2, [r4, #44]	@ 0x2c
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 80013dc:	4620      	mov	r0, r4
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 80013de:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
 80013e2:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 80013e6:	f00a f912 	bl	800b60e <HAL_MDMA_Init>
 80013ea:	b108      	cbz	r0, 80013f0 <HAL_JPEG_MspInit+0xc4>
    {
      Error_Handler();
 80013ec:	f7ff fef8 	bl	80011e0 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
 80013f0:	2200      	movs	r2, #0
 80013f2:	480f      	ldr	r0, [pc, #60]	@ (8001430 <HAL_JPEG_MspInit+0x104>)
 80013f4:	4611      	mov	r1, r2
 80013f6:	f00a f998 	bl	800b72a <HAL_MDMA_ConfigPostRequestMask>
 80013fa:	b108      	cbz	r0, 8001400 <HAL_JPEG_MspInit+0xd4>
    {
      Error_Handler();
 80013fc:	f7ff fef0 	bl	80011e0 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 8001400:	636c      	str	r4, [r5, #52]	@ 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	2105      	movs	r1, #5
 8001406:	2079      	movs	r0, #121	@ 0x79
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 8001408:	6425      	str	r5, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 800140a:	f007 fc67 	bl	8008cdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 800140e:	2079      	movs	r0, #121	@ 0x79

  /* USER CODE END JPEG_MspInit 1 */

  }

}
 8001410:	b003      	add	sp, #12
 8001412:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001416:	f007 bc93 	b.w	8008d40 <HAL_NVIC_EnableIRQ>
}
 800141a:	b003      	add	sp, #12
 800141c:	bd30      	pop	{r4, r5, pc}
 800141e:	bf00      	nop
 8001420:	52003000 	.word	0x52003000
 8001424:	58024400 	.word	0x58024400
 8001428:	240005d0 	.word	0x240005d0
 800142c:	520001c0 	.word	0x520001c0
 8001430:	24000564 	.word	0x24000564
 8001434:	52000200 	.word	0x52000200

08001438 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001438:	b510      	push	{r4, lr}
 800143a:	b0b4      	sub	sp, #208	@ 0xd0
 800143c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800143e:	22c8      	movs	r2, #200	@ 0xc8
 8001440:	2100      	movs	r1, #0
 8001442:	a802      	add	r0, sp, #8
 8001444:	f024 f964 	bl	8025710 <memset>
  if(hltdc->Instance==LTDC)
 8001448:	6822      	ldr	r2, [r4, #0]
 800144a:	4b18      	ldr	r3, [pc, #96]	@ (80014ac <HAL_LTDC_MspInit+0x74>)
 800144c:	429a      	cmp	r2, r3
 800144e:	d12b      	bne.n	80014a8 <HAL_LTDC_MspInit+0x70>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001450:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001454:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3M = 5;
    PeriphClkInitStruct.PLL3.PLL3N = 161;
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 21;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8001456:	2115      	movs	r1, #21
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001458:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800145a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 800145e:	23a1      	movs	r3, #161	@ 0xa1
 8001460:	2205      	movs	r2, #5
 8001462:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001466:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001468:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 800146c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001470:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001474:	f00b fbb8 	bl	800cbe8 <HAL_RCCEx_PeriphCLKConfig>
 8001478:	b108      	cbz	r0, 800147e <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 800147a:	f7ff feb1 	bl	80011e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800147e:	4b0c      	ldr	r3, [pc, #48]	@ (80014b0 <HAL_LTDC_MspInit+0x78>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001480:	2058      	movs	r0, #88	@ 0x58
 8001482:	2107      	movs	r1, #7
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001484:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001488:	f042 0208 	orr.w	r2, r2, #8
 800148c:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001490:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001492:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	9301      	str	r3, [sp, #4]
 800149c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 800149e:	f007 fc1d 	bl	8008cdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80014a2:	2058      	movs	r0, #88	@ 0x58
 80014a4:	f007 fc4c 	bl	8008d40 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80014a8:	b034      	add	sp, #208	@ 0xd0
 80014aa:	bd10      	pop	{r4, pc}
 80014ac:	50001000 	.word	0x50001000
 80014b0:	58024400 	.word	0x58024400

080014b4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80014b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014b6:	b0bf      	sub	sp, #252	@ 0xfc
 80014b8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ba:	2214      	movs	r2, #20
 80014bc:	2100      	movs	r1, #0
 80014be:	a807      	add	r0, sp, #28
 80014c0:	f024 f926 	bl	8025710 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014c4:	22c8      	movs	r2, #200	@ 0xc8
 80014c6:	2100      	movs	r1, #0
 80014c8:	a80c      	add	r0, sp, #48	@ 0x30
 80014ca:	f024 f921 	bl	8025710 <memset>
  if(hqspi->Instance==QUADSPI)
 80014ce:	6822      	ldr	r2, [r4, #0]
 80014d0:	4b53      	ldr	r3, [pc, #332]	@ (8001620 <HAL_QSPI_MspInit+0x16c>)
 80014d2:	429a      	cmp	r2, r3
 80014d4:	f040 80a1 	bne.w	800161a <HAL_QSPI_MspInit+0x166>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80014d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014dc:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014de:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80014e0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014e4:	f00b fb80 	bl	800cbe8 <HAL_RCCEx_PeriphCLKConfig>
 80014e8:	b108      	cbz	r0, 80014ee <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 80014ea:	f7ff fe79 	bl	80011e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80014ee:	4b4d      	ldr	r3, [pc, #308]	@ (8001624 <HAL_QSPI_MspInit+0x170>)
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80014f4:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 80014f6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014fa:	a907      	add	r1, sp, #28
 80014fc:	484a      	ldr	r0, [pc, #296]	@ (8001628 <HAL_QSPI_MspInit+0x174>)

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80014fe:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001500:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001504:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8001508:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800150c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001510:	9201      	str	r2, [sp, #4]
 8001512:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001514:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001518:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800151c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001520:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001524:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001528:	9202      	str	r2, [sp, #8]
 800152a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800152c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001530:	f042 0220 	orr.w	r2, r2, #32
 8001534:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001538:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800153c:	f002 0220 	and.w	r2, r2, #32
 8001540:	9203      	str	r2, [sp, #12]
 8001542:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001544:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001548:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800154c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001550:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001554:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001558:	9204      	str	r2, [sp, #16]
 800155a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800155c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001560:	f042 0202 	orr.w	r2, r2, #2
 8001564:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001568:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800156c:	f002 0202 	and.w	r2, r2, #2
 8001570:	9205      	str	r2, [sp, #20]
 8001572:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001574:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001578:	f042 0208 	orr.w	r2, r2, #8
 800157c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	9306      	str	r3, [sp, #24]
 800158a:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8001590:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001594:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001598:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800159a:	f008 f9f5 	bl	8009988 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800159e:	2340      	movs	r3, #64	@ 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015a0:	a907      	add	r1, sp, #28
 80015a2:	4821      	ldr	r0, [pc, #132]	@ (8001628 <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80015a4:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015ae:	f008 f9eb 	bl	8009988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015b2:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015b4:	a907      	add	r1, sp, #28
 80015b6:	481d      	ldr	r0, [pc, #116]	@ (800162c <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80015b8:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015c2:	f008 f9e1 	bl	8009988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015ca:	a907      	add	r1, sp, #28
 80015cc:	4817      	ldr	r0, [pc, #92]	@ (800162c <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80015ce:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015d8:	f008 f9d6 	bl	8009988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015dc:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015de:	a907      	add	r1, sp, #28
 80015e0:	4813      	ldr	r0, [pc, #76]	@ (8001630 <HAL_QSPI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80015e2:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e8:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015ec:	f008 f9cc 	bl	8009988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015f0:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f2:	a907      	add	r1, sp, #28
 80015f4:	480f      	ldr	r0, [pc, #60]	@ (8001634 <HAL_QSPI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80015f6:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fc:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001600:	f008 f9c2 	bl	8009988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001604:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001608:	a907      	add	r1, sp, #28
 800160a:	480b      	ldr	r0, [pc, #44]	@ (8001638 <HAL_QSPI_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800160c:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001612:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001616:	f008 f9b7 	bl	8009988 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 800161a:	b03f      	add	sp, #252	@ 0xfc
 800161c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800161e:	bf00      	nop
 8001620:	52005000 	.word	0x52005000
 8001624:	58024400 	.word	0x58024400
 8001628:	58021800 	.word	0x58021800
 800162c:	58021400 	.word	0x58021400
 8001630:	58021c00 	.word	0x58021c00
 8001634:	58020400 	.word	0x58020400
 8001638:	58020c00 	.word	0x58020c00

0800163c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800163c:	b570      	push	{r4, r5, r6, lr}
 800163e:	b0ba      	sub	sp, #232	@ 0xe8
 8001640:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001642:	2214      	movs	r2, #20
 8001644:	2100      	movs	r1, #0
 8001646:	a803      	add	r0, sp, #12
 8001648:	f024 f862 	bl	8025710 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800164c:	22c8      	movs	r2, #200	@ 0xc8
 800164e:	2100      	movs	r1, #0
 8001650:	a808      	add	r0, sp, #32
 8001652:	f024 f85d 	bl	8025710 <memset>
  if(hspi->Instance==SPI5)
 8001656:	6822      	ldr	r2, [r4, #0]
 8001658:	4b26      	ldr	r3, [pc, #152]	@ (80016f4 <HAL_SPI_MspInit+0xb8>)
 800165a:	429a      	cmp	r2, r3
 800165c:	d147      	bne.n	80016ee <HAL_SPI_MspInit+0xb2>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 800165e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001662:	2300      	movs	r3, #0
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001664:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8001666:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800166a:	f00b fabd 	bl	800cbe8 <HAL_RCCEx_PeriphCLKConfig>
 800166e:	b108      	cbz	r0, 8001674 <HAL_SPI_MspInit+0x38>
    {
      Error_Handler();
 8001670:	f7ff fdb6 	bl	80011e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001674:	4b20      	ldr	r3, [pc, #128]	@ (80016f8 <HAL_SPI_MspInit+0xbc>)
    /**SPI5 GPIO Configuration
    PK0     ------> SPI5_SCK
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800167a:	2505      	movs	r5, #5
    __HAL_RCC_SPI5_CLK_ENABLE();
 800167c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001680:	a903      	add	r1, sp, #12
 8001682:	481e      	ldr	r0, [pc, #120]	@ (80016fc <HAL_SPI_MspInit+0xc0>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001684:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001688:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 800168c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001690:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001694:	9200      	str	r2, [sp, #0]
 8001696:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001698:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800169c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80016a0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80016a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80016a8:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 80016ac:	9201      	str	r2, [sp, #4]
 80016ae:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80016b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80016b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016b8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80016bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80016c0:	9507      	str	r5, [sp, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80016c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016c6:	9302      	str	r3, [sp, #8]
 80016c8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2301      	movs	r3, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	e9cd 3603 	strd	r3, r6, [sp, #12]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80016d4:	f008 f958 	bl	8009988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80016dc:	a903      	add	r1, sp, #12
 80016de:	4808      	ldr	r0, [pc, #32]	@ (8001700 <HAL_SPI_MspInit+0xc4>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80016e0:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80016ea:	f008 f94d 	bl	8009988 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80016ee:	b03a      	add	sp, #232	@ 0xe8
 80016f0:	bd70      	pop	{r4, r5, r6, pc}
 80016f2:	bf00      	nop
 80016f4:	40015000 	.word	0x40015000
 80016f8:	58024400 	.word	0x58024400
 80016fc:	58022800 	.word	0x58022800
 8001700:	58022400 	.word	0x58022400

08001704 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001706:	b0b9      	sub	sp, #228	@ 0xe4
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001708:	2100      	movs	r1, #0
 800170a:	2214      	movs	r2, #20
 800170c:	a801      	add	r0, sp, #4
 800170e:	f023 ffff 	bl	8025710 <memset>
  if (FMC_Initialized) {
 8001712:	4b3f      	ldr	r3, [pc, #252]	@ (8001810 <HAL_SDRAM_MspInit+0x10c>)
 8001714:	6819      	ldr	r1, [r3, #0]
 8001716:	2900      	cmp	r1, #0
 8001718:	d177      	bne.n	800180a <HAL_SDRAM_MspInit+0x106>
  FMC_Initialized = 1;
 800171a:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800171c:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 800171e:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001720:	22c0      	movs	r2, #192	@ 0xc0
 8001722:	f023 fff5 	bl	8025710 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001726:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800172a:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800172c:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800172e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001732:	f00b fa59 	bl	800cbe8 <HAL_RCCEx_PeriphCLKConfig>
 8001736:	b108      	cbz	r0, 800173c <HAL_SDRAM_MspInit+0x38>
      Error_Handler();
 8001738:	f7ff fd52 	bl	80011e0 <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 800173c:	4b35      	ldr	r3, [pc, #212]	@ (8001814 <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001740:	2600      	movs	r6, #0
 8001742:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8001744:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001748:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800174a:	a901      	add	r1, sp, #4
 800174c:	4832      	ldr	r0, [pc, #200]	@ (8001818 <HAL_SDRAM_MspInit+0x114>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800174e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001752:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8001756:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800175a:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 800175c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001768:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001770:	f008 f90a 	bl	8009988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001774:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001776:	a901      	add	r1, sp, #4
 8001778:	4828      	ldr	r0, [pc, #160]	@ (800181c <HAL_SDRAM_MspInit+0x118>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800177a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001780:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001784:	f008 f900 	bl	8009988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001788:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800178c:	a901      	add	r1, sp, #4
 800178e:	4824      	ldr	r0, [pc, #144]	@ (8001820 <HAL_SDRAM_MspInit+0x11c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001790:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001796:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800179a:	f008 f8f5 	bl	8009988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800179e:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017a2:	a901      	add	r1, sp, #4
 80017a4:	481f      	ldr	r0, [pc, #124]	@ (8001824 <HAL_SDRAM_MspInit+0x120>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017a6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a8:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ac:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017b0:	f008 f8ea 	bl	8009988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80017b4:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017b8:	a901      	add	r1, sp, #4
 80017ba:	481b      	ldr	r0, [pc, #108]	@ (8001828 <HAL_SDRAM_MspInit+0x124>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017bc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c2:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017c6:	f008 f8df 	bl	8009988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80017ca:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ce:	a901      	add	r1, sp, #4
 80017d0:	4816      	ldr	r0, [pc, #88]	@ (800182c <HAL_SDRAM_MspInit+0x128>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017d2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d8:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017dc:	f008 f8d4 	bl	8009988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80017e0:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017e4:	a901      	add	r1, sp, #4
 80017e6:	4812      	ldr	r0, [pc, #72]	@ (8001830 <HAL_SDRAM_MspInit+0x12c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017e8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ee:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017f2:	f008 f8c9 	bl	8009988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017f6:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f8:	a901      	add	r1, sp, #4
 80017fa:	480e      	ldr	r0, [pc, #56]	@ (8001834 <HAL_SDRAM_MspInit+0x130>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017fc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001802:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001806:	f008 f8bf 	bl	8009988 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800180a:	b039      	add	sp, #228	@ 0xe4
 800180c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800180e:	bf00      	nop
 8001810:	24000740 	.word	0x24000740
 8001814:	58024400 	.word	0x58024400
 8001818:	58022000 	.word	0x58022000
 800181c:	58020400 	.word	0x58020400
 8001820:	58021000 	.word	0x58021000
 8001824:	58021c00 	.word	0x58021c00
 8001828:	58021800 	.word	0x58021800
 800182c:	58020c00 	.word	0x58020c00
 8001830:	58021400 	.word	0x58021400
 8001834:	58020800 	.word	0x58020800

08001838 <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 8001838:	4b1a      	ldr	r3, [pc, #104]	@ (80018a4 <HAL_SDRAM_MspDeInit+0x6c>)
 800183a:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 800183c:	b510      	push	{r4, lr}
  if (FMC_DeInitialized) {
 800183e:	bb82      	cbnz	r2, 80018a2 <HAL_SDRAM_MspDeInit+0x6a>
  __HAL_RCC_FMC_CLK_DISABLE();
 8001840:	4a19      	ldr	r2, [pc, #100]	@ (80018a8 <HAL_SDRAM_MspDeInit+0x70>)
  FMC_DeInitialized = 1;
 8001842:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001844:	f240 61ff 	movw	r1, #1791	@ 0x6ff
 8001848:	4818      	ldr	r0, [pc, #96]	@ (80018ac <HAL_SDRAM_MspDeInit+0x74>)
  FMC_DeInitialized = 1;
 800184a:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 800184c:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
 8001850:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001854:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001858:	f008 f97e 	bl	8009b58 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_5|GPIO_PIN_6);
 800185c:	2160      	movs	r1, #96	@ 0x60
 800185e:	4814      	ldr	r0, [pc, #80]	@ (80018b0 <HAL_SDRAM_MspDeInit+0x78>)
 8001860:	f008 f97a 	bl	8009b58 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001864:	f64f 7183 	movw	r1, #65411	@ 0xff83
 8001868:	4812      	ldr	r0, [pc, #72]	@ (80018b4 <HAL_SDRAM_MspDeInit+0x7c>)
 800186a:	f008 f975 	bl	8009b58 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800186e:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8001872:	4811      	ldr	r0, [pc, #68]	@ (80018b8 <HAL_SDRAM_MspDeInit+0x80>)
 8001874:	f008 f970 	bl	8009b58 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001878:	f248 1133 	movw	r1, #33075	@ 0x8133
 800187c:	480f      	ldr	r0, [pc, #60]	@ (80018bc <HAL_SDRAM_MspDeInit+0x84>)
 800187e:	f008 f96b 	bl	8009b58 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001882:	f24c 7103 	movw	r1, #50947	@ 0xc703
 8001886:	480e      	ldr	r0, [pc, #56]	@ (80018c0 <HAL_SDRAM_MspDeInit+0x88>)
 8001888:	f008 f966 	bl	8009b58 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 800188c:	f64f 013f 	movw	r1, #63551	@ 0xf83f
 8001890:	480c      	ldr	r0, [pc, #48]	@ (80018c4 <HAL_SDRAM_MspDeInit+0x8c>)
 8001892:	f008 f961 	bl	8009b58 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8001896:	4621      	mov	r1, r4
 8001898:	480b      	ldr	r0, [pc, #44]	@ (80018c8 <HAL_SDRAM_MspDeInit+0x90>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 800189a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 800189e:	f008 b95b 	b.w	8009b58 <HAL_GPIO_DeInit>
}
 80018a2:	bd10      	pop	{r4, pc}
 80018a4:	2400073c 	.word	0x2400073c
 80018a8:	58024400 	.word	0x58024400
 80018ac:	58022000 	.word	0x58022000
 80018b0:	58020400 	.word	0x58020400
 80018b4:	58021000 	.word	0x58021000
 80018b8:	58021c00 	.word	0x58021c00
 80018bc:	58021800 	.word	0x58021800
 80018c0:	58020c00 	.word	0x58020c00
 80018c4:	58021400 	.word	0x58021400
 80018c8:	58020800 	.word	0x58020800

080018cc <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018cc:	280f      	cmp	r0, #15
{
 80018ce:	b510      	push	{r4, lr}
 80018d0:	4604      	mov	r4, r0
 80018d2:	b08a      	sub	sp, #40	@ 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d4:	d902      	bls.n	80018dc <HAL_InitTick+0x10>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
     uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 80018d6:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 80018d8:	b00a      	add	sp, #40	@ 0x28
 80018da:	bd10      	pop	{r4, pc}
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80018dc:	4601      	mov	r1, r0
 80018de:	2200      	movs	r2, #0
 80018e0:	2036      	movs	r0, #54	@ 0x36
 80018e2:	f007 f9fb 	bl	8008cdc <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018e6:	2036      	movs	r0, #54	@ 0x36
 80018e8:	f007 fa2a 	bl	8008d40 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80018ec:	4b18      	ldr	r3, [pc, #96]	@ (8001950 <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018ee:	4669      	mov	r1, sp
 80018f0:	a802      	add	r0, sp, #8
     uwTickPrio = TickPriority;
 80018f2:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 80018f4:	4b17      	ldr	r3, [pc, #92]	@ (8001954 <HAL_InitTick+0x88>)
 80018f6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80018fa:	f042 0210 	orr.w	r2, r2, #16
 80018fe:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8001902:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001906:	f003 0310 	and.w	r3, r3, #16
 800190a:	9301      	str	r3, [sp, #4]
 800190c:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800190e:	f00b f851 	bl	800c9b4 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001912:	9b07      	ldr	r3, [sp, #28]
 8001914:	b9c3      	cbnz	r3, 8001948 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001916:	f00b f829 	bl	800c96c <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 800191a:	4c0f      	ldr	r4, [pc, #60]	@ (8001958 <HAL_InitTick+0x8c>)
 800191c:	4b0f      	ldr	r3, [pc, #60]	@ (800195c <HAL_InitTick+0x90>)
 800191e:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001920:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001924:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001926:	4b0e      	ldr	r3, [pc, #56]	@ (8001960 <HAL_InitTick+0x94>)
 8001928:	fbb0 f0f3 	udiv	r0, r0, r3
 800192c:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 800192e:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 8001930:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001932:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001934:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001936:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001938:	f00c fa6e 	bl	800de18 <HAL_TIM_Base_Init>
 800193c:	2800      	cmp	r0, #0
 800193e:	d1ca      	bne.n	80018d6 <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 8001940:	4620      	mov	r0, r4
 8001942:	f00c f91d 	bl	800db80 <HAL_TIM_Base_Start_IT>
 8001946:	e7c7      	b.n	80018d8 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001948:	f00b f810 	bl	800c96c <HAL_RCC_GetPCLK1Freq>
 800194c:	0040      	lsls	r0, r0, #1
 800194e:	e7e4      	b.n	800191a <HAL_InitTick+0x4e>
 8001950:	24000074 	.word	0x24000074
 8001954:	58024400 	.word	0x58024400
 8001958:	24000744 	.word	0x24000744
 800195c:	40001000 	.word	0x40001000
 8001960:	000f4240 	.word	0x000f4240

08001964 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001964:	e7fe      	b.n	8001964 <NMI_Handler>

08001966 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001966:	e7fe      	b.n	8001966 <HardFault_Handler>

08001968 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001968:	e7fe      	b.n	8001968 <MemManage_Handler>

0800196a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800196a:	e7fe      	b.n	800196a <BusFault_Handler>

0800196c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800196c:	e7fe      	b.n	800196c <UsageFault_Handler>

0800196e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800196e:	4770      	bx	lr

08001970 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001970:	4801      	ldr	r0, [pc, #4]	@ (8001978 <TIM6_DAC_IRQHandler+0x8>)
 8001972:	f00c b947 	b.w	800dc04 <HAL_TIM_IRQHandler>
 8001976:	bf00      	nop
 8001978:	24000744 	.word	0x24000744

0800197c <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800197c:	4801      	ldr	r0, [pc, #4]	@ (8001984 <LTDC_IRQHandler+0x8>)
 800197e:	f009 bd51 	b.w	800b424 <HAL_LTDC_IRQHandler>
 8001982:	bf00      	nop
 8001984:	240004bc 	.word	0x240004bc

08001988 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001988:	4801      	ldr	r0, [pc, #4]	@ (8001990 <DMA2D_IRQHandler+0x8>)
 800198a:	f007 bae3 	b.w	8008f54 <HAL_DMA2D_IRQHandler>
 800198e:	bf00      	nop
 8001990:	240006b0 	.word	0x240006b0

08001994 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8001994:	4801      	ldr	r0, [pc, #4]	@ (800199c <JPEG_IRQHandler+0x8>)
 8001996:	f009 bc13 	b.w	800b1c0 <HAL_JPEG_IRQHandler>
 800199a:	bf00      	nop
 800199c:	2400063c 	.word	0x2400063c

080019a0 <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 80019a0:	4804      	ldr	r0, [pc, #16]	@ (80019b4 <MDMA_IRQHandler+0x14>)
{
 80019a2:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 80019a4:	f009 ff46 	bl	800b834 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 80019a8:	4803      	ldr	r0, [pc, #12]	@ (80019b8 <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 80019aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 80019ae:	f009 bf41 	b.w	800b834 <HAL_MDMA_IRQHandler>
 80019b2:	bf00      	nop
 80019b4:	24000564 	.word	0x24000564
 80019b8:	240005d0 	.word	0x240005d0

080019bc <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 80019bc:	4801      	ldr	r0, [pc, #4]	@ (80019c4 <DSI_IRQHandler+0x8>)
 80019be:	f007 bccc 	b.w	800935a <HAL_DSI_IRQHandler>
 80019c2:	bf00      	nop
 80019c4:	24000694 	.word	0x24000694

080019c8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80019c8:	2001      	movs	r0, #1
 80019ca:	4770      	bx	lr

080019cc <_kill>:

int _kill(int pid, int sig)
{
 80019cc:	b508      	push	{r3, lr}
	errno = EINVAL;
 80019ce:	f023 ff53 	bl	8025878 <__errno>
 80019d2:	2316      	movs	r3, #22
 80019d4:	6003      	str	r3, [r0, #0]
	return -1;
}
 80019d6:	f04f 30ff 	mov.w	r0, #4294967295
 80019da:	bd08      	pop	{r3, pc}

080019dc <_exit>:

void _exit (int status)
{
 80019dc:	b508      	push	{r3, lr}
	errno = EINVAL;
 80019de:	f023 ff4b 	bl	8025878 <__errno>
 80019e2:	2316      	movs	r3, #22
 80019e4:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80019e6:	e7fe      	b.n	80019e6 <_exit+0xa>

080019e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019e8:	b570      	push	{r4, r5, r6, lr}
 80019ea:	460d      	mov	r5, r1
 80019ec:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ee:	460e      	mov	r6, r1
 80019f0:	1b73      	subs	r3, r6, r5
 80019f2:	429c      	cmp	r4, r3
 80019f4:	dc01      	bgt.n	80019fa <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80019f6:	4620      	mov	r0, r4
 80019f8:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80019fa:	f3af 8000 	nop.w
 80019fe:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a02:	e7f5      	b.n	80019f0 <_read+0x8>

08001a04 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a04:	b570      	push	{r4, r5, r6, lr}
 8001a06:	460d      	mov	r5, r1
 8001a08:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0a:	460e      	mov	r6, r1
 8001a0c:	1b73      	subs	r3, r6, r5
 8001a0e:	429c      	cmp	r4, r3
 8001a10:	dc01      	bgt.n	8001a16 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001a12:	4620      	mov	r0, r4
 8001a14:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001a16:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001a1a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1e:	e7f5      	b.n	8001a0c <_write+0x8>

08001a20 <_close>:

int _close(int file)
{
	return -1;
}
 8001a20:	f04f 30ff 	mov.w	r0, #4294967295
 8001a24:	4770      	bx	lr

08001a26 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001a26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 8001a2a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001a2c:	604b      	str	r3, [r1, #4]
}
 8001a2e:	4770      	bx	lr

08001a30 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001a30:	2001      	movs	r0, #1
 8001a32:	4770      	bx	lr

08001a34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001a34:	2000      	movs	r0, #0
 8001a36:	4770      	bx	lr

08001a38 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a38:	4a0b      	ldr	r2, [pc, #44]	@ (8001a68 <_sbrk+0x30>)
{
 8001a3a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001a3c:	6811      	ldr	r1, [r2, #0]
{
 8001a3e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001a40:	b909      	cbnz	r1, 8001a46 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001a42:	490a      	ldr	r1, [pc, #40]	@ (8001a6c <_sbrk+0x34>)
 8001a44:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a46:	6810      	ldr	r0, [r2, #0]
 8001a48:	4909      	ldr	r1, [pc, #36]	@ (8001a70 <_sbrk+0x38>)
 8001a4a:	4c0a      	ldr	r4, [pc, #40]	@ (8001a74 <_sbrk+0x3c>)
 8001a4c:	4403      	add	r3, r0
 8001a4e:	1b09      	subs	r1, r1, r4
 8001a50:	428b      	cmp	r3, r1
 8001a52:	d906      	bls.n	8001a62 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001a54:	f023 ff10 	bl	8025878 <__errno>
 8001a58:	230c      	movs	r3, #12
 8001a5a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001a5c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001a60:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001a62:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001a64:	e7fc      	b.n	8001a60 <_sbrk+0x28>
 8001a66:	bf00      	nop
 8001a68:	24000790 	.word	0x24000790
 8001a6c:	24027138 	.word	0x24027138
 8001a70:	24080000 	.word	0x24080000
 8001a74:	00001000 	.word	0x00001000

08001a78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ab0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a7c:	f007 f854 	bl	8008b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a80:	480c      	ldr	r0, [pc, #48]	@ (8001ab4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a82:	490d      	ldr	r1, [pc, #52]	@ (8001ab8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a84:	4a0d      	ldr	r2, [pc, #52]	@ (8001abc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a88:	e002      	b.n	8001a90 <LoopCopyDataInit>

08001a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a8e:	3304      	adds	r3, #4

08001a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a94:	d3f9      	bcc.n	8001a8a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a96:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a98:	4c0a      	ldr	r4, [pc, #40]	@ (8001ac4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a9c:	e001      	b.n	8001aa2 <LoopFillZerobss>

08001a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa0:	3204      	adds	r2, #4

08001aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa4:	d3fb      	bcc.n	8001a9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aa6:	f023 feed 	bl	8025884 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aaa:	f7fe ff85 	bl	80009b8 <main>
  bx  lr
 8001aae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ab0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ab4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ab8:	2400013c 	.word	0x2400013c
  ldr r2, =_sidata
 8001abc:	0802a2d0 	.word	0x0802a2d0
  ldr r2, =_sbss
 8001ac0:	24000340 	.word	0x24000340
  ldr r4, =_ebss
 8001ac4:	24027138 	.word	0x24027138

08001ac8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ac8:	e7fe      	b.n	8001ac8 <ADC3_IRQHandler>

08001aca <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8001aca:	4770      	bx	lr

08001acc <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001acc:	b508      	push	{r3, lr}
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 8001ace:	f001 fd17 	bl	8003500 <touchgfx_components_init>
    touchgfx_init();
}
 8001ad2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    touchgfx_init();
 8001ad6:	f001 bc99 	b.w	800340c <touchgfx_init>

08001ada <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 8001ada:	f001 bd13 	b.w	8003504 <touchgfx_taskEntry>

08001ade <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8001ade:	6840      	ldr	r0, [r0, #4]
    }
 8001ae0:	4770      	bx	lr

08001ae2 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8001ae2:	6041      	str	r1, [r0, #4]
    }
 8001ae4:	4770      	bx	lr

08001ae6 <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001ae6:	1a52      	subs	r2, r2, r1
 8001ae8:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 8001aec:	fbb2 f0f3 	udiv	r0, r2, r3
 8001af0:	4770      	bx	lr
	...

08001af4 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 8001af4:	4b02      	ldr	r3, [pc, #8]	@ (8001b00 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0xc>)
 8001af6:	68c0      	ldr	r0, [r0, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001afc:	4358      	muls	r0, r3
 8001afe:	4770      	bx	lr
 8001b00:	24000794 	.word	0x24000794

08001b04 <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 8001b04:	4770      	bx	lr
	...

08001b08 <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 8001b08:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8001b84 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
    tim.Instance = TIM2;
 8001b0c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
{
 8001b10:	4605      	mov	r5, r0
    tim.Init.Period = 0xFFFFFFFF;
 8001b12:	f04f 30ff 	mov.w	r0, #4294967295
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b16:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b22:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	9301      	str	r3, [sp, #4]
 8001b2c:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 8001b2e:	4b16      	ldr	r3, [pc, #88]	@ (8001b88 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001b30:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b32:	2100      	movs	r1, #0
    tim.Init.Period = 0xFFFFFFFF;
 8001b34:	60d8      	str	r0, [r3, #12]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b36:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b38:	6099      	str	r1, [r3, #8]
    tim.Init.Prescaler = 0;
 8001b3a:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 8001b40:	69d3      	ldr	r3, [r2, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b42:	2210      	movs	r2, #16
 8001b44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b48:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001b4c:	fab2 f282 	clz	r2, r2
 8001b50:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 8001b52:	4a0e      	ldr	r2, [pc, #56]	@ (8001b8c <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 8001b54:	5cd3      	ldrb	r3, [r2, r3]
 8001b56:	b983      	cbnz	r3, 8001b7a <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x72>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 8001b58:	f00a fee6 	bl	800c928 <HAL_RCC_GetHCLKFreq>
 8001b5c:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 8001b5e:	f00a fd1b 	bl	800c598 <HAL_RCC_GetSysClockFreq>
 8001b62:	fbb0 f0f4 	udiv	r0, r0, r4
 8001b66:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 8001b68:	4807      	ldr	r0, [pc, #28]	@ (8001b88 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001b6a:	f00c f955 	bl	800de18 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 8001b6e:	4806      	ldr	r0, [pc, #24]	@ (8001b88 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
}
 8001b70:	b003      	add	sp, #12
 8001b72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_TIM_Base_Start(&tim);
 8001b76:	f00b bfc9 	b.w	800db0c <HAL_TIM_Base_Start>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8001b7a:	f00a fef7 	bl	800c96c <HAL_RCC_GetPCLK1Freq>
 8001b7e:	0044      	lsls	r4, r0, #1
 8001b80:	e7ed      	b.n	8001b5e <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x56>
 8001b82:	bf00      	nop
 8001b84:	58024400 	.word	0x58024400
 8001b88:	24000794 	.word	0x24000794
 8001b8c:	08028d68 	.word	0x08028d68

08001b90 <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 8001b90:	b510      	push	{r4, lr}
 8001b92:	4604      	mov	r4, r0
 8001b94:	2110      	movs	r1, #16
 8001b96:	f022 ffa8 	bl	8024aea <_ZdlPvj>
 8001b9a:	4620      	mov	r0, r4
 8001b9c:	bd10      	pop	{r4, pc}

08001b9e <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 8001b9e:	b538      	push	{r3, r4, r5, lr}
    if (active) //idle task sched out
    {
        uint32_t current_cc = cc_in;
        cc_consumed += getCPUCycles() - current_cc;
 8001ba0:	6803      	ldr	r3, [r0, #0]
{
 8001ba2:	4604      	mov	r4, r0
        cc_consumed += getCPUCycles() - current_cc;
 8001ba4:	691b      	ldr	r3, [r3, #16]
    if (active) //idle task sched out
 8001ba6:	b131      	cbz	r1, 8001bb6 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
        uint32_t current_cc = cc_in;
 8001ba8:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 8001baa:	4798      	blx	r3
 8001bac:	6863      	ldr	r3, [r4, #4]
 8001bae:	1b5b      	subs	r3, r3, r5
 8001bb0:	4403      	add	r3, r0
 8001bb2:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001bb4:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 8001bb6:	4798      	blx	r3
 8001bb8:	60a0      	str	r0, [r4, #8]
}
 8001bba:	e7fb      	b.n	8001bb4 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

08001bbc <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001bbc:	4770      	bx	lr
	...

08001bc0 <_ZN20STM32TouchController11sampleTouchERlS0_>:

    assert(bsp_ts_initialized);
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bec <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 8001bc4:	460f      	mov	r7, r1
 8001bc6:	4616      	mov	r6, r2
    if (bsp_ts_initialized)
 8001bc8:	781d      	ldrb	r5, [r3, #0]
 8001bca:	b915      	cbnz	r5, 8001bd2 <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = TS_State.TouchX;
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
 8001bcc:	2500      	movs	r5, #0
}
 8001bce:	4628      	mov	r0, r5
 8001bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BSP_TS_GetState(0, &TS_State);
 8001bd2:	4c07      	ldr	r4, [pc, #28]	@ (8001bf0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	4621      	mov	r1, r4
 8001bd8:	f006 ff4a 	bl	8008a70 <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 8001bdc:	6823      	ldr	r3, [r4, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f4      	beq.n	8001bcc <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = TS_State.TouchX;
 8001be2:	6863      	ldr	r3, [r4, #4]
 8001be4:	603b      	str	r3, [r7, #0]
            y = TS_State.TouchY;
 8001be6:	68a3      	ldr	r3, [r4, #8]
 8001be8:	6033      	str	r3, [r6, #0]
            return true;
 8001bea:	e7f0      	b.n	8001bce <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8001bec:	240007f0 	.word	0x240007f0
 8001bf0:	240007e0 	.word	0x240007e0

08001bf4 <_ZN20STM32TouchControllerD0Ev>:
 8001bf4:	b510      	push	{r4, lr}
 8001bf6:	4604      	mov	r4, r0
 8001bf8:	2104      	movs	r1, #4
 8001bfa:	f022 ff76 	bl	8024aea <_ZdlPvj>
 8001bfe:	4620      	mov	r0, r4
 8001c00:	bd10      	pop	{r4, pc}
	...

08001c04 <_ZN20STM32TouchController4initEv>:
{
 8001c04:	b508      	push	{r3, lr}
    hTS->Width = 800;
 8001c06:	4b0e      	ldr	r3, [pc, #56]	@ (8001c40 <_ZN20STM32TouchController4initEv+0x3c>)
    hTS->Height = 480;
 8001c08:	f44f 7248 	mov.w	r2, #800	@ 0x320
    hTS->Accuracy = 0;
 8001c0c:	2000      	movs	r0, #0
    hTS->Width = 800;
 8001c0e:	6819      	ldr	r1, [r3, #0]
    hTS->Height = 480;
 8001c10:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001c14:	e9c1 2300 	strd	r2, r3, [r1]
    hTS->Accuracy = 0;
 8001c18:	230c      	movs	r3, #12
 8001c1a:	e9c1 3002 	strd	r3, r0, [r1, #8]
    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 8001c1e:	f006 fe97 	bl	8008950 <BSP_TS_Init>
 8001c22:	4b08      	ldr	r3, [pc, #32]	@ (8001c44 <_ZN20STM32TouchController4initEv+0x40>)
 8001c24:	b910      	cbnz	r0, 8001c2c <_ZN20STM32TouchController4initEv+0x28>
        bsp_ts_initialized = true;
 8001c26:	2201      	movs	r2, #1
 8001c28:	701a      	strb	r2, [r3, #0]
}
 8001c2a:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1fb      	bne.n	8001c2a <_ZN20STM32TouchController4initEv+0x26>
 8001c32:	4b05      	ldr	r3, [pc, #20]	@ (8001c48 <_ZN20STM32TouchController4initEv+0x44>)
 8001c34:	212e      	movs	r1, #46	@ 0x2e
 8001c36:	4a05      	ldr	r2, [pc, #20]	@ (8001c4c <_ZN20STM32TouchController4initEv+0x48>)
 8001c38:	4805      	ldr	r0, [pc, #20]	@ (8001c50 <_ZN20STM32TouchController4initEv+0x4c>)
 8001c3a:	f023 facd 	bl	80251d8 <__assert_func>
 8001c3e:	bf00      	nop
 8001c40:	240007ec 	.word	0x240007ec
 8001c44:	240007f0 	.word	0x240007f0
 8001c48:	08026320 	.word	0x08026320
 8001c4c:	08026333 	.word	0x08026333
 8001c50:	0802635d 	.word	0x0802635d

08001c54 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001c54:	2803      	cmp	r0, #3
 8001c56:	d825      	bhi.n	8001ca4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 8001c58:	e8df f000 	tbb	[pc, r0]
 8001c5c:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001c60:	4b11      	ldr	r3, [pc, #68]	@ (8001ca8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001c62:	2108      	movs	r1, #8
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	fab2 f282 	clz	r2, r2
 8001c6a:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001c6c:	480f      	ldr	r0, [pc, #60]	@ (8001cac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001c6e:	f008 b815 	b.w	8009c9c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001c72:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001c74:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	fab2 f282 	clz	r2, r2
 8001c7e:	0952      	lsrs	r2, r2, #5
 8001c80:	e7f4      	b.n	8001c6c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001c82:	4b09      	ldr	r3, [pc, #36]	@ (8001ca8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001c84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	fab2 f282 	clz	r2, r2
 8001c8e:	0952      	lsrs	r2, r2, #5
 8001c90:	e7ec      	b.n	8001c6c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001c92:	4b05      	ldr	r3, [pc, #20]	@ (8001ca8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001c94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c98:	4805      	ldr	r0, [pc, #20]	@ (8001cb0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001c9a:	68da      	ldr	r2, [r3, #12]
 8001c9c:	fab2 f282 	clz	r2, r2
 8001ca0:	0952      	lsrs	r2, r2, #5
 8001ca2:	e7e4      	b.n	8001c6e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	240007f4 	.word	0x240007f4
 8001cac:	58022400 	.word	0x58022400
 8001cb0:	58021400 	.word	0x58021400

08001cb4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001cb4:	2803      	cmp	r0, #3
 8001cb6:	d825      	bhi.n	8001d04 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 8001cb8:	e8df f000 	tbb	[pc, r0]
 8001cbc:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001cc0:	4b11      	ldr	r3, [pc, #68]	@ (8001d08 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001cc2:	2108      	movs	r1, #8
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	3a00      	subs	r2, #0
 8001cc8:	bf18      	it	ne
 8001cca:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001ccc:	480f      	ldr	r0, [pc, #60]	@ (8001d0c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001cce:	f007 bfe5 	b.w	8009c9c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d08 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001cd4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	3a00      	subs	r2, #0
 8001cdc:	bf18      	it	ne
 8001cde:	2201      	movne	r2, #1
 8001ce0:	e7f4      	b.n	8001ccc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8001ce2:	4b09      	ldr	r3, [pc, #36]	@ (8001d08 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001ce4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	3a00      	subs	r2, #0
 8001cec:	bf18      	it	ne
 8001cee:	2201      	movne	r2, #1
 8001cf0:	e7ec      	b.n	8001ccc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001cf2:	4b05      	ldr	r3, [pc, #20]	@ (8001d08 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001cf4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cf8:	4805      	ldr	r0, [pc, #20]	@ (8001d10 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8001cfa:	68da      	ldr	r2, [r3, #12]
 8001cfc:	3a00      	subs	r2, #0
 8001cfe:	bf18      	it	ne
 8001d00:	2201      	movne	r2, #1
 8001d02:	e7e4      	b.n	8001cce <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	240007f4 	.word	0x240007f4
 8001d0c:	58022400 	.word	0x58022400
 8001d10:	58021400 	.word	0x58021400

08001d14 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001d14:	2803      	cmp	r0, #3
 8001d16:	d811      	bhi.n	8001d3c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 8001d18:	e8df f000 	tbb	[pc, r0]
 8001d1c:	0c090602 	.word	0x0c090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001d20:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001d22:	4807      	ldr	r0, [pc, #28]	@ (8001d40 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001d24:	f007 bfbf 	b.w	8009ca6 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001d28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d2c:	e7f9      	b.n	8001d22 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001d2e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d32:	e7f6      	b.n	8001d22 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001d34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d38:	4802      	ldr	r0, [pc, #8]	@ (8001d44 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8001d3a:	e7f3      	b.n	8001d24 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	58022400 	.word	0x58022400
 8001d44:	58021400 	.word	0x58021400

08001d48 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001d48:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001d4a:	2803      	cmp	r0, #3
 8001d4c:	d815      	bhi.n	8001d7a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 8001d4e:	e8df f000 	tbb	[pc, r0]
 8001d52:	0a02      	.short	0x0a02
 8001d54:	100d      	.short	0x100d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001d56:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001d58:	4809      	ldr	r0, [pc, #36]	@ (8001d80 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001d5a:	f007 ff99 	bl	8009c90 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8001d5e:	1e43      	subs	r3, r0, #1
 8001d60:	4258      	negs	r0, r3
 8001d62:	4158      	adcs	r0, r3
 8001d64:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001d66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d6a:	e7f5      	b.n	8001d58 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001d6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d70:	e7f2      	b.n	8001d58 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001d72:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d76:	4803      	ldr	r0, [pc, #12]	@ (8001d84 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001d78:	e7ef      	b.n	8001d5a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	e7ef      	b.n	8001d5e <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001d7e:	bf00      	nop
 8001d80:	58022400 	.word	0x58022400
 8001d84:	58021400 	.word	0x58021400

08001d88 <_ZN8touchgfx4GPIO4initEv>:
{
 8001d88:	b570      	push	{r4, r5, r6, lr}
 8001d8a:	4d08      	ldr	r5, [pc, #32]	@ (8001dac <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001d8c:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001d8e:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001d90:	b2e0      	uxtb	r0, r4
 8001d92:	f7ff ffd9 	bl	8001d48 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001d96:	b118      	cbz	r0, 8001da0 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001d98:	682b      	ldr	r3, [r5, #0]
 8001d9a:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001d9c:	bf18      	it	ne
 8001d9e:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001da0:	3401      	adds	r4, #1
 8001da2:	3504      	adds	r5, #4
 8001da4:	2c05      	cmp	r4, #5
 8001da6:	d1f3      	bne.n	8001d90 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001da8:	bd70      	pop	{r4, r5, r6, pc}
 8001daa:	bf00      	nop
 8001dac:	240007f4 	.word	0x240007f4

08001db0 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001db0:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001db2:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8001db6:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 8001dba:	4770      	bx	lr

08001dbc <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	4770      	bx	lr

08001dc0 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001dc0:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001dc2:	3900      	subs	r1, #0
 8001dc4:	4b02      	ldr	r3, [pc, #8]	@ (8001dd0 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001dc6:	bf18      	it	ne
 8001dc8:	2101      	movne	r1, #1
 8001dca:	7019      	strb	r1, [r3, #0]
    }
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	24026417 	.word	0x24026417

08001dd4 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	4770      	bx	lr

08001dd8 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001dd8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001dda:	b10b      	cbz	r3, 8001de0 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001ddc:	4608      	mov	r0, r1
 8001dde:	4718      	bx	r3
        }
    }
 8001de0:	4770      	bx	lr

08001de2 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001de2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001de6:	4770      	bx	lr

08001de8 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001de8:	6840      	ldr	r0, [r0, #4]
 8001dea:	6803      	ldr	r3, [r0, #0]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	4718      	bx	r3

08001df0 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8001df0:	4b01      	ldr	r3, [pc, #4]	@ (8001df8 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8001df2:	6818      	ldr	r0, [r3, #0]
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	24000818 	.word	0x24000818

08001dfc <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001dfc:	4770      	bx	lr

08001dfe <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001dfe:	f001 bc7e 	b.w	80036fe <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08001e02 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 8001e02:	f001 bc0d 	b.w	8003620 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001e06 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8001e06:	f001 bddf 	b.w	80039c8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001e0a <_ZN11TouchGFXHAL17disableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 8001e0a:	f001 bdd1 	b.w	80039b0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
	...

08001e10 <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 8001e10:	b510      	push	{r4, lr}
 8001e12:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8001e14:	f001 fd94 	bl	8003940 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8001e18:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 8001e1c:	b113      	cbz	r3, 8001e24 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8001e1e:	4b02      	ldr	r3, [pc, #8]	@ (8001e28 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	701a      	strb	r2, [r3, #0]
    }
}
 8001e24:	bd10      	pop	{r4, pc}
 8001e26:	bf00      	nop
 8001e28:	2400000c 	.word	0x2400000c

08001e2c <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001e2c:	f001 bc00 	b.w	8003630 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001e30 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001e30:	b510      	push	{r4, lr}
 8001e32:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001e34:	f00f fde2 	bl	80119fc <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001e38:	6823      	ldr	r3, [r4, #0]
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 8001e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001e44:	4718      	bx	r3

08001e46 <_ZN20TouchGFXGeneratedHAL17unlockFrameBufferEv>:
     * @brief Unlocks the framebuffer.
     *
     * This specialization is marks DMA2D as un-reserved by the framwork.
     * @see HAL::unlockFrameBuffer
     */
    virtual void unlockFrameBuffer()
 8001e46:	b510      	push	{r4, lr}
 8001e48:	4604      	mov	r4, r0
    {
        HAL::unlockFrameBuffer();
 8001e4a:	f00f f96d 	bl	8011128 <_ZN8touchgfx3HAL17unlockFrameBufferEv>
        dma.start();
 8001e4e:	6860      	ldr	r0, [r4, #4]
 8001e50:	6803      	ldr	r3, [r0, #0]
    }
 8001e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dma.start();
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	4718      	bx	r3

08001e5a <_ZN11TouchGFXHAL16flushFrameBufferEv>:
        HAL::flushFrameBuffer();
 8001e5a:	f00f b83b 	b.w	8010ed4 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001e5e <_ZN11TouchGFXHALD0Ev>:
 8001e5e:	b510      	push	{r4, lr}
 8001e60:	4604      	mov	r4, r0
 8001e62:	217c      	movs	r1, #124	@ 0x7c
 8001e64:	f022 fe41 	bl	8024aea <_ZdlPvj>
 8001e68:	4620      	mov	r0, r4
 8001e6a:	bd10      	pop	{r4, pc}

08001e6c <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 8001e6c:	4b02      	ldr	r3, [pc, #8]	@ (8001e78 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 8001e72:	f00f b86b 	b.w	8010f4c <_ZN8touchgfx3HAL10beginFrameEv>
 8001e76:	bf00      	nop
 8001e78:	2400000c 	.word	0x2400000c

08001e7c <_ZN11TouchGFXHAL10initializeEv>:
{
 8001e7c:	b538      	push	{r3, r4, r5, lr}
 8001e7e:	4604      	mov	r4, r0
    mcuInstr.init();
 8001e80:	4d06      	ldr	r5, [pc, #24]	@ (8001e9c <_ZN11TouchGFXHAL10initializeEv+0x20>)
    TouchGFXGeneratedHAL::initialize();
 8001e82:	f001 fbfd 	bl	8003680 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8001e86:	2300      	movs	r3, #0
    mcuInstr.init();
 8001e88:	4628      	mov	r0, r5
 8001e8a:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
 8001e8e:	f7ff fe3b 	bl	8001b08 <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        updateMCULoad = enabled;
 8001e92:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001e94:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001e96:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
}
 8001e9a:	bd38      	pop	{r3, r4, r5, pc}
 8001e9c:	24000808 	.word	0x24000808

08001ea0 <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8001ea0:	6803      	ldr	r3, [r0, #0]
{
 8001ea2:	4604      	mov	r4, r0
 8001ea4:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8001ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001eaa:	4798      	blx	r3
    enableInterrupts();
 8001eac:	6823      	ldr	r3, [r4, #0]
 8001eae:	4620      	mov	r0, r4
 8001eb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001eb2:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8001eb4:	f000 ff5c 	bl	8002d70 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001eb8:	6823      	ldr	r3, [r4, #0]
 8001eba:	4620      	mov	r0, r4
 8001ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ebe:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	2329      	movs	r3, #41	@ 0x29
 8001ec4:	2215      	movs	r2, #21
 8001ec6:	4805      	ldr	r0, [pc, #20]	@ (8001edc <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 8001ec8:	9100      	str	r1, [sp, #0]
 8001eca:	f007 fc56 	bl	800977a <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8001ece:	f000 ff4f 	bl	8002d70 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001ed2:	6823      	ldr	r3, [r4, #0]
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed8:	4798      	blx	r3
    for (;;)
 8001eda:	e7f8      	b.n	8001ece <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 8001edc:	24000694 	.word	0x24000694

08001ee0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001ee0:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8001ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8001f1c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001ee6:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001ee8:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 8001eec:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001eee:	428c      	cmp	r4, r1
 8001ef0:	d009      	beq.n	8001f06 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001ef2:	b93a      	cbnz	r2, 8001f04 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001ef4:	490a      	ldr	r1, [pc, #40]	@ (8001f20 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001ef6:	4a0b      	ldr	r2, [pc, #44]	@ (8001f24 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001ef8:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001efa:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001efc:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001efe:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001f00:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001f02:	701a      	strb	r2, [r3, #0]
        }
    }
 8001f04:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001f06:	2a00      	cmp	r2, #0
 8001f08:	d0fc      	beq.n	8001f04 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001f0a:	4a06      	ldr	r2, [pc, #24]	@ (8001f24 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001f0c:	4904      	ldr	r1, [pc, #16]	@ (8001f20 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001f0e:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001f10:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001f12:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001f14:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001f16:	2200      	movs	r2, #0
 8001f18:	e7f3      	b.n	8001f02 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001f1a:	bf00      	nop
 8001f1c:	24026410 	.word	0x24026410
 8001f20:	2402640e 	.word	0x2402640e
 8001f24:	2402640c 	.word	0x2402640c

08001f28 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001f28:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001f2a:	4b09      	ldr	r3, [pc, #36]	@ (8001f50 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001f2c:	881b      	ldrh	r3, [r3, #0]
 8001f2e:	428b      	cmp	r3, r1
 8001f30:	d803      	bhi.n	8001f3a <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001f32:	4b08      	ldr	r3, [pc, #32]	@ (8001f54 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d905      	bls.n	8001f46 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001f3a:	4b07      	ldr	r3, [pc, #28]	@ (8001f58 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001f3c:	219e      	movs	r1, #158	@ 0x9e
 8001f3e:	4a07      	ldr	r2, [pc, #28]	@ (8001f5c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001f40:	4807      	ldr	r0, [pc, #28]	@ (8001f60 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001f42:	f023 f949 	bl	80251d8 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001f46:	4b07      	ldr	r3, [pc, #28]	@ (8001f64 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001f48:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001f4a:	4b07      	ldr	r3, [pc, #28]	@ (8001f68 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001f4c:	801a      	strh	r2, [r3, #0]
    }
 8001f4e:	bd08      	pop	{r3, pc}
 8001f50:	2402640c 	.word	0x2402640c
 8001f54:	2402640e 	.word	0x2402640e
 8001f58:	080263c8 	.word	0x080263c8
 8001f5c:	0802642b 	.word	0x0802642b
 8001f60:	0802646e 	.word	0x0802646e
 8001f64:	24026412 	.word	0x24026412
 8001f68:	24026414 	.word	0x24026414

08001f6c <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8001f6c:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 8001f6e:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 8001f72:	b118      	cbz	r0, 8001f7c <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8001f74:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8001f76:	6803      	ldr	r3, [r0, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4718      	bx	r3
    }
 8001f7c:	4770      	bx	lr
	...

08001f80 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8001f80:	b570      	push	{r4, r5, r6, lr}
 8001f82:	460d      	mov	r5, r1
 8001f84:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8001f86:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb4 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8001f88:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001f8a:	b935      	cbnz	r5, 8001f9a <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8001f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb8 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 8001f8e:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8001f92:	4a0a      	ldr	r2, [pc, #40]	@ (8001fbc <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8001f94:	480a      	ldr	r0, [pc, #40]	@ (8001fc0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8001f96:	f023 f91f 	bl	80251d8 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001f9a:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001f9e:	3a00      	subs	r2, #0
 8001fa0:	4b08      	ldr	r3, [pc, #32]	@ (8001fc4 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 8001fa2:	bf18      	it	ne
 8001fa4:	2201      	movne	r2, #1
 8001fa6:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001fa8:	6803      	ldr	r3, [r0, #0]
}
 8001faa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fb2:	4718      	bx	r3
 8001fb4:	24000818 	.word	0x24000818
 8001fb8:	080264c1 	.word	0x080264c1
 8001fbc:	080264f9 	.word	0x080264f9
 8001fc0:	0802646e 	.word	0x0802646e
 8001fc4:	24026416 	.word	0x24026416

08001fc8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lcdRef(display),
 8001fc8:	e9c0 1201 	strd	r1, r2, [r0, #4]
          touchController(touchCtrl),
 8001fcc:	60c3      	str	r3, [r0, #12]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8001fce:	f44f 7280 	mov.w	r2, #256	@ 0x100
          mcuInstrumentation(0),
 8001fd2:	2300      	movs	r3, #0
          auxiliaryLCD(0),
 8001fd4:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
          touchSampleRate(1),
 8001fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8002050 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x88>)
              startY(0),
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
 8001fda:	8503      	strh	r3, [r0, #40]	@ 0x28
              inProgress(false)
 8001fdc:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001fe0:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8001fe2:	8603      	strh	r3, [r0, #48]	@ 0x30
          useAuxiliaryLCD(false),
 8001fe4:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
          lastY(0),
 8001fe8:	6643      	str	r3, [r0, #100]	@ 0x64
          updateMCULoad(0),
 8001fea:	f880 3070 	strb.w	r3, [r0, #112]	@ 0x70
          cc_begin(0),
 8001fee:	6743      	str	r3, [r0, #116]	@ 0x74
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001ff0:	b570      	push	{r4, r5, r6, lr}
          vSyncCompensationEnabled(false),
 8001ff2:	e9c0 231a 	strd	r2, r3, [r0, #104]	@ 0x68
                           height)
 8001ff6:	f8bd 5010 	ldrh.w	r5, [sp, #16]
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001ffa:	4a16      	ldr	r2, [pc, #88]	@ (8002054 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001ffc:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 8002000:	3520      	adds	r5, #32
          buttonController(0),
 8002002:	e9c0 3304 	strd	r3, r3, [r0, #16]
            : startX(0),
 8002006:	e9c0 3306 	strd	r3, r3, [r0, #24]
              tickCount(0),
 800200a:	e9c0 3308 	strd	r3, r3, [r0, #32]
          frameBuffer0(0),
 800200e:	e9c0 330e 	strd	r3, r3, [r0, #56]	@ 0x38
          frameBuffer2(0),
 8002012:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8002016:	e9c0 3314 	strd	r3, r3, [r0, #80]	@ 0x50
          lastX(0),
 800201a:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
          requestedOrientation(ORIENTATION_LANDSCAPE),
 800201e:	6782      	str	r2, [r0, #120]	@ 0x78
 8002020:	b2ad      	uxth	r5, r5
        instance = this;
 8002022:	4a0d      	ldr	r2, [pc, #52]	@ (8002058 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002024:	42b5      	cmp	r5, r6
        instance = this;
 8002026:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002028:	4a0c      	ldr	r2, [pc, #48]	@ (800205c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 800202a:	8015      	strh	r5, [r2, #0]
 800202c:	4a0c      	ldr	r2, [pc, #48]	@ (8002060 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
 800202e:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002030:	bf28      	it	cs
 8002032:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002034:	4a0b      	ldr	r2, [pc, #44]	@ (8002064 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002036:	bf38      	it	cc
 8002038:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800203a:	8016      	strh	r6, [r2, #0]
 800203c:	4a0a      	ldr	r2, [pc, #40]	@ (8002068 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800203e:	f880 5034 	strb.w	r5, [r0, #52]	@ 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002042:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8002044:	4a09      	ldr	r2, [pc, #36]	@ (800206c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 8002046:	7013      	strb	r3, [r2, #0]
 8002048:	4b09      	ldr	r3, [pc, #36]	@ (8002070 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
 800204a:	6003      	str	r3, [r0, #0]
}
 800204c:	bd70      	pop	{r4, r5, r6, pc}
 800204e:	bf00      	nop
 8002050:	01000001 	.word	0x01000001
 8002054:	01010000 	.word	0x01010000
 8002058:	24026418 	.word	0x24026418
 800205c:	2402640c 	.word	0x2402640c
 8002060:	24026412 	.word	0x24026412
 8002064:	2402640e 	.word	0x2402640e
 8002068:	24026414 	.word	0x24026414
 800206c:	24026410 	.word	0x24026410
 8002070:	08026550 	.word	0x08026550

08002074 <DSI_IO_Write>:
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 8002074:	2b01      	cmp	r3, #1
    {
 8002076:	b513      	push	{r0, r1, r4, lr}
        if (Size <= 1U)
 8002078:	d80e      	bhi.n	8002098 <DSI_IO_Write+0x24>
        {
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 800207a:	5cd3      	ldrb	r3, [r2, r3]
 800207c:	2215      	movs	r2, #21
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	460b      	mov	r3, r1
 8002082:	4601      	mov	r1, r0
 8002084:	4808      	ldr	r0, [pc, #32]	@ (80020a8 <DSI_IO_Write+0x34>)
 8002086:	f007 fb78 	bl	800977a <HAL_DSI_ShortWrite>
 800208a:	b118      	cbz	r0, 8002094 <DSI_IO_Write+0x20>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 800208c:	f06f 0007 	mvn.w	r0, #7
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 8002090:	b002      	add	sp, #8
 8002092:	bd10      	pop	{r4, pc}
        int32_t ret = BSP_ERROR_NONE;
 8002094:	2000      	movs	r0, #0
 8002096:	e7fb      	b.n	8002090 <DSI_IO_Write+0x1c>
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8002098:	e9cd 1200 	strd	r1, r2, [sp]
 800209c:	4601      	mov	r1, r0
 800209e:	2239      	movs	r2, #57	@ 0x39
 80020a0:	4801      	ldr	r0, [pc, #4]	@ (80020a8 <DSI_IO_Write+0x34>)
 80020a2:	f007 fb7b 	bl	800979c <HAL_DSI_LongWrite>
 80020a6:	e7f0      	b.n	800208a <DSI_IO_Write+0x16>
 80020a8:	24000694 	.word	0x24000694

080020ac <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 80020ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 80020ae:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80020b2:	2106      	movs	r1, #6
 80020b4:	9100      	str	r1, [sp, #0]
 80020b6:	4601      	mov	r1, r0
 80020b8:	4805      	ldr	r0, [pc, #20]	@ (80020d0 <DSI_IO_Read+0x24>)
 80020ba:	f007 fbcf 	bl	800985c <HAL_DSI_Read>
        int32_t ret = BSP_ERROR_NONE;
 80020be:	2800      	cmp	r0, #0
        {
            ret = BSP_ERROR_BUS_FAILURE;
        }

        return ret;
    }
 80020c0:	bf14      	ite	ne
 80020c2:	f06f 0007 	mvnne.w	r0, #7
 80020c6:	2000      	moveq	r0, #0
 80020c8:	b005      	add	sp, #20
 80020ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80020ce:	bf00      	nop
 80020d0:	24000694 	.word	0x24000694

080020d4 <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 80020d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        uint8_t ScanLineParams[2];
        uint16_t scanline = 500;

        ScanLineParams[0] = scanline >> 8;
 80020d6:	f24f 4301 	movw	r3, #62465	@ 0xf401
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 80020da:	4c0b      	ldr	r4, [pc, #44]	@ (8002108 <LCD_ReqTear+0x34>)
 80020dc:	2239      	movs	r2, #57	@ 0x39
 80020de:	2100      	movs	r1, #0
        ScanLineParams[0] = scanline >> 8;
 80020e0:	f8ad 300c 	strh.w	r3, [sp, #12]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 80020e4:	ab03      	add	r3, sp, #12
 80020e6:	4620      	mov	r0, r4
 80020e8:	9301      	str	r3, [sp, #4]
 80020ea:	2344      	movs	r3, #68	@ 0x44
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	2302      	movs	r3, #2
 80020f0:	f007 fb54 	bl	800979c <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 80020f4:	2100      	movs	r1, #0
 80020f6:	2335      	movs	r3, #53	@ 0x35
 80020f8:	2215      	movs	r2, #21
 80020fa:	4620      	mov	r0, r4
 80020fc:	9100      	str	r1, [sp, #0]
 80020fe:	f007 fb3c 	bl	800977a <HAL_DSI_ShortWrite>
    }
 8002102:	b004      	add	sp, #16
 8002104:	bd10      	pop	{r4, pc}
 8002106:	bf00      	nop
 8002108:	24000694 	.word	0x24000694

0800210c <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 800210c:	b508      	push	{r3, lr}
    LCD_ReqTear();
 800210e:	f7ff ffe1 	bl	80020d4 <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8002112:	4b0c      	ldr	r3, [pc, #48]	@ (8002144 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 8002114:	2202      	movs	r2, #2
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 800211c:	2201      	movs	r2, #1
 800211e:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 8002122:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8002126:	f042 0201 	orr.w	r2, r2, #1
 800212a:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 800212e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8002132:	f042 0202 	orr.w	r2, r2, #2
 8002136:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 800213a:	2203      	movs	r2, #3
 800213c:	4b02      	ldr	r3, [pc, #8]	@ (8002148 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 800213e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002140:	bd08      	pop	{r3, pc}
 8002142:	bf00      	nop
 8002144:	24000694 	.word	0x24000694
 8002148:	50001000 	.word	0x50001000

0800214c <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 800214c:	4b07      	ldr	r3, [pc, #28]	@ (800216c <LCD_ReqEnable+0x20>)
    {
 800214e:	b507      	push	{r0, r1, r2, lr}
        if (!firstRefreshRequested)
 8002150:	7819      	ldrb	r1, [r3, #0]
 8002152:	b939      	cbnz	r1, 8002164 <LCD_ReqEnable+0x18>
        {
            firstRefreshRequested = true;
 8002154:	2201      	movs	r2, #1

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 8002156:	4806      	ldr	r0, [pc, #24]	@ (8002170 <LCD_ReqEnable+0x24>)
            firstRefreshRequested = true;
 8002158:	701a      	strb	r2, [r3, #0]
            HAL_DSI_ShortWrite(&(hdsi),
 800215a:	2329      	movs	r3, #41	@ 0x29
 800215c:	2215      	movs	r2, #21
 800215e:	9100      	str	r1, [sp, #0]
 8002160:	f007 fb0b 	bl	800977a <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 8002164:	b003      	add	sp, #12
 8002166:	f85d fb04 	ldr.w	pc, [sp], #4
 800216a:	bf00      	nop
 800216c:	24000804 	.word	0x24000804
 8002170:	24000694 	.word	0x24000694

08002174 <LCD_SetUpdateRegionLeft>:
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8002174:	4b06      	ldr	r3, [pc, #24]	@ (8002190 <LCD_SetUpdateRegionLeft+0x1c>)
    {
 8002176:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8002178:	9301      	str	r3, [sp, #4]
 800217a:	232a      	movs	r3, #42	@ 0x2a
 800217c:	2239      	movs	r2, #57	@ 0x39
 800217e:	2100      	movs	r1, #0
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	2304      	movs	r3, #4
 8002184:	4803      	ldr	r0, [pc, #12]	@ (8002194 <LCD_SetUpdateRegionLeft+0x20>)
 8002186:	f007 fb09 	bl	800979c <HAL_DSI_LongWrite>
    }
 800218a:	b003      	add	sp, #12
 800218c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002190:	24000008 	.word	0x24000008
 8002194:	24000694 	.word	0x24000694

08002198 <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8002198:	4b06      	ldr	r3, [pc, #24]	@ (80021b4 <LCD_SetUpdateRegionRight+0x1c>)
    {
 800219a:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 800219c:	9301      	str	r3, [sp, #4]
 800219e:	232a      	movs	r3, #42	@ 0x2a
 80021a0:	2239      	movs	r2, #57	@ 0x39
 80021a2:	2100      	movs	r1, #0
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	2304      	movs	r3, #4
 80021a8:	4803      	ldr	r0, [pc, #12]	@ (80021b8 <LCD_SetUpdateRegionRight+0x20>)
 80021aa:	f007 faf7 	bl	800979c <HAL_DSI_LongWrite>
    }
 80021ae:	b003      	add	sp, #12
 80021b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80021b4:	24000004 	.word	0x24000004
 80021b8:	24000694 	.word	0x24000694

080021bc <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 80021bc:	b538      	push	{r3, r4, r5, lr}
        return instance;
 80021be:	4d14      	ldr	r5, [pc, #80]	@ (8002210 <HAL_DSI_TearingEffectCallback+0x54>)
 80021c0:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 80021c2:	2000      	movs	r0, #0
 80021c4:	f7ff fd46 	bl	8001c54 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80021c8:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 80021ca:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 80021ce:	3301      	adds	r3, #1
 80021d0:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 80021d4:	f000 fdc0 	bl	8002d58 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 80021d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002214 <HAL_DSI_TearingEffectCallback+0x58>)
        lockDMAToPorch = enableLock;
 80021da:	682a      	ldr	r2, [r5, #0]
 80021dc:	7819      	ldrb	r1, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	f882 104a 	strb.w	r1, [r2, #74]	@ 0x4a
 80021e4:	b173      	cbz	r3, 8002204 <HAL_DSI_TearingEffectCallback+0x48>
 80021e6:	4d0c      	ldr	r5, [pc, #48]	@ (8002218 <HAL_DSI_TearingEffectCallback+0x5c>)
 80021e8:	782b      	ldrb	r3, [r5, #0]
 80021ea:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80021ee:	b94b      	cbnz	r3, 8002204 <HAL_DSI_TearingEffectCallback+0x48>
        {

            // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
            updateRegion = 0;
 80021f0:	4b0a      	ldr	r3, [pc, #40]	@ (800221c <HAL_DSI_TearingEffectCallback+0x60>)
 80021f2:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 80021f4:	f7ff ffbe 	bl	8002174 <LCD_SetUpdateRegionLeft>

            // Transfer a quarter screen of pixel data.
            HAL_DSI_Refresh(hdsi);
 80021f8:	4620      	mov	r0, r4
 80021fa:	f007 faae 	bl	800975a <HAL_DSI_Refresh>
            displayRefreshing = true;
 80021fe:	2301      	movs	r3, #1
 8002200:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8002202:	bd38      	pop	{r3, r4, r5, pc}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8002204:	2000      	movs	r0, #0
    }
 8002206:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 800220a:	f7ff bd53 	b.w	8001cb4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800220e:	bf00      	nop
 8002210:	24026418 	.word	0x24026418
 8002214:	2400000c 	.word	0x2400000c
 8002218:	24000820 	.word	0x24000820
 800221c:	2400081c 	.word	0x2400081c

08002220 <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
 8002220:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (displayRefreshing)
 8002224:	4e48      	ldr	r6, [pc, #288]	@ (8002348 <HAL_DSI_EndOfRefreshCallback+0x128>)
    {
 8002226:	b085      	sub	sp, #20
 8002228:	4604      	mov	r4, r0
        if (displayRefreshing)
 800222a:	7833      	ldrb	r3, [r6, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 8088 	beq.w	8002342 <HAL_DSI_EndOfRefreshCallback+0x122>
        {
            if (updateRegion == 0)
 8002232:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 800236c <HAL_DSI_EndOfRefreshCallback+0x14c>
 8002236:	f8df 8138 	ldr.w	r8, [pc, #312]	@ 8002370 <HAL_DSI_EndOfRefreshCallback+0x150>
 800223a:	f8d9 5000 	ldr.w	r5, [r9]
 800223e:	4f43      	ldr	r7, [pc, #268]	@ (800234c <HAL_DSI_EndOfRefreshCallback+0x12c>)
 8002240:	2d00      	cmp	r5, #0
 8002242:	d13e      	bne.n	80022c2 <HAL_DSI_EndOfRefreshCallback+0xa2>
            {
                HAL_Delay(1);
 8002244:	2001      	movs	r0, #1
                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
                uint16_t ADJUSTED_WIDTH = 432; //64-byte aligned width
                uint16_t REAL_WIDTH = 400; //we only actually have this amount of pixels on display
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8002246:	4e42      	ldr	r6, [pc, #264]	@ (8002350 <HAL_DSI_EndOfRefreshCallback+0x130>)
                HAL_Delay(1);
 8002248:	f006 fd1e 	bl	8008c88 <HAL_Delay>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800224c:	6823      	ldr	r3, [r4, #0]
 800224e:	9500      	str	r5, [sp, #0]
 8002250:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8002254:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002256:	f022 0208 	bic.w	r2, r2, #8
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 800225a:	f500 6096 	add.w	r0, r0, #1200	@ 0x4b0
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800225e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8002262:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8002266:	f002 0208 	and.w	r2, r2, #8
 800226a:	9200      	str	r2, [sp, #0]
 800226c:	9a00      	ldr	r2, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 800226e:	f8d8 2000 	ldr.w	r2, [r8]
 8002272:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8002276:	4837      	ldr	r0, [pc, #220]	@ (8002354 <HAL_DSI_EndOfRefreshCallback+0x134>)
 8002278:	6106      	str	r6, [r0, #16]
                LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 800227a:	4e37      	ldr	r6, [pc, #220]	@ (8002358 <HAL_DSI_EndOfRefreshCallback+0x138>)
 800227c:	6146      	str	r6, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 800227e:	4837      	ldr	r0, [pc, #220]	@ (800235c <HAL_DSI_EndOfRefreshCallback+0x13c>)
 8002280:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = ((832 * 3) << 16) | ((REAL_WIDTH) * 3 + 3);
 8002284:	4836      	ldr	r0, [pc, #216]	@ (8002360 <HAL_DSI_EndOfRefreshCallback+0x140>)
 8002286:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 800228a:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 800228c:	f041 0101 	orr.w	r1, r1, #1
 8002290:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8002292:	9501      	str	r5, [sp, #4]
 8002294:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8002298:	f042 0208 	orr.w	r2, r2, #8
 800229c:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 80022a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80022a4:	f003 0308 	and.w	r3, r3, #8
 80022a8:	9301      	str	r3, [sp, #4]
 80022aa:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 448-799
 80022ac:	f7ff ff74 	bl	8002198 <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 80022b0:	2301      	movs	r3, #1

                HAL_DSI_Refresh(hdsi);
 80022b2:	4620      	mov	r0, r4
                updateRegion = 1;
 80022b4:	f8c9 3000 	str.w	r3, [r9]
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 80022b8:	b005      	add	sp, #20
 80022ba:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                HAL_DSI_Refresh(hdsi);
 80022be:	f007 ba4c 	b.w	800975a <HAL_DSI_Refresh>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80022c2:	6803      	ldr	r3, [r0, #0]
 80022c4:	2500      	movs	r5, #0
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 80022c6:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80022c8:	9502      	str	r5, [sp, #8]
 80022ca:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 80022ce:	4c25      	ldr	r4, [pc, #148]	@ (8002364 <HAL_DSI_EndOfRefreshCallback+0x144>)
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80022d0:	f022 0208 	bic.w	r2, r2, #8
 80022d4:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 80022d8:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 80022dc:	f002 0208 	and.w	r2, r2, #8
 80022e0:	9202      	str	r2, [sp, #8]
 80022e2:	9a02      	ldr	r2, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 80022e4:	f8d8 2000 	ldr.w	r2, [r8]
 80022e8:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 80022ec:	4819      	ldr	r0, [pc, #100]	@ (8002354 <HAL_DSI_EndOfRefreshCallback+0x134>)
 80022ee:	6104      	str	r4, [r0, #16]
                LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 80022f0:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 80022f4:	6144      	str	r4, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((WIDTH + 2) << 16) | 3;
 80022f6:	4819      	ldr	r0, [pc, #100]	@ (800235c <HAL_DSI_EndOfRefreshCallback+0x13c>)
 80022f8:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = (((832 * 3) << 16) | ((WIDTH * 3) + 3));
 80022fc:	4818      	ldr	r0, [pc, #96]	@ (8002360 <HAL_DSI_EndOfRefreshCallback+0x140>)
 80022fe:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                GPIO::clear(GPIO::VSYNC_FREQ);
 8002302:	4628      	mov	r0, r5
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8002304:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8002306:	f041 0101 	orr.w	r1, r1, #1
 800230a:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800230c:	9503      	str	r5, [sp, #12]
 800230e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8002312:	f042 0208 	orr.w	r2, r2, #8
 8002316:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 800231a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	9303      	str	r3, [sp, #12]
 8002324:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 8002326:	f7ff fcc5 	bl	8001cb4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 800232a:	f7ff ff0f 	bl	800214c <LCD_ReqEnable>
        return instance;
 800232e:	4b0e      	ldr	r3, [pc, #56]	@ (8002368 <HAL_DSI_EndOfRefreshCallback+0x148>)
                displayRefreshing = false;
 8002330:	7035      	strb	r5, [r6, #0]
 8002332:	6818      	ldr	r0, [r3, #0]
                if (HAL::getInstance())
 8002334:	b128      	cbz	r0, 8002342 <HAL_DSI_EndOfRefreshCallback+0x122>
        allowDMATransfers();
 8002336:	6803      	ldr	r3, [r0, #0]
 8002338:	6a1b      	ldr	r3, [r3, #32]
    }
 800233a:	b005      	add	sp, #20
 800233c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002340:	4718      	bx	r3
 8002342:	b005      	add	sp, #20
 8002344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002348:	24000820 	.word	0x24000820
 800234c:	24000818 	.word	0x24000818
 8002350:	01b201e2 	.word	0x01b201e2
 8002354:	50001000 	.word	0x50001000
 8002358:	019201e3 	.word	0x019201e3
 800235c:	01920003 	.word	0x01920003
 8002360:	09c004b3 	.word	0x09c004b3
 8002364:	019201e2 	.word	0x019201e2
 8002368:	24026418 	.word	0x24026418
 800236c:	2400081c 	.word	0x2400081c
 8002370:	240004bc 	.word	0x240004bc

08002374 <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 8002374:	4601      	mov	r1, r0
 8002376:	b508      	push	{r3, lr}
        return instance;
 8002378:	4b03      	ldr	r3, [pc, #12]	@ (8002388 <IdleTaskHook+0x14>)
 800237a:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 800237c:	b101      	cbz	r1, 8002380 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 800237e:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8002380:	f00f fb56 	bl	8011a30 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8002384:	2001      	movs	r0, #1
 8002386:	bd08      	pop	{r3, pc}
 8002388:	24026418 	.word	0x24026418

0800238c <_GLOBAL__sub_I_displayRefreshing>:
        : cc_consumed(0),
 800238c:	4b03      	ldr	r3, [pc, #12]	@ (800239c <_GLOBAL__sub_I_displayRefreshing+0x10>)
 800238e:	2200      	movs	r2, #0
 8002390:	605a      	str	r2, [r3, #4]
          cc_in(0)
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	4a02      	ldr	r2, [pc, #8]	@ (80023a0 <_GLOBAL__sub_I_displayRefreshing+0x14>)
 8002396:	601a      	str	r2, [r3, #0]

}
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	24000808 	.word	0x24000808
 80023a0:	08026300 	.word	0x08026300

080023a4 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 80023a4:	6940      	ldr	r0, [r0, #20]
 80023a6:	4770      	bx	lr

080023a8 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
 80023a8:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 80023ac:	4770      	bx	lr

080023ae <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 80023ae:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80023b0:	b923      	cbnz	r3, 80023bc <_ZN20HardwareMJPEGDecoder8hasVideoEv+0xe>
 80023b2:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 80023b4:	3800      	subs	r0, #0
 80023b6:	bf18      	it	ne
 80023b8:	2001      	movne	r0, #1
 80023ba:	4770      	bx	lr
 80023bc:	2001      	movs	r0, #1
}
 80023be:	4770      	bx	lr

080023c0 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 80023c0:	6880      	ldr	r0, [r0, #8]
 80023c2:	4770      	bx	lr

080023c4 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 80023c4:	4770      	bx	lr

080023c6 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 80023c6:	3004      	adds	r0, #4
{
 80023c8:	b510      	push	{r4, lr}
 80023ca:	460c      	mov	r4, r1
    *data = videoInfo;
 80023cc:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 80023ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80023d2:	bd10      	pop	{r4, pc}

080023d4 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 80023d4:	4770      	bx	lr
	...

080023d8 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 80023d8:	b508      	push	{r3, lr}
    assert(0);
 80023da:	4a03      	ldr	r2, [pc, #12]	@ (80023e8 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 80023dc:	f44f 71e2 	mov.w	r1, #452	@ 0x1c4
 80023e0:	4b02      	ldr	r3, [pc, #8]	@ (80023ec <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 80023e2:	4803      	ldr	r0, [pc, #12]	@ (80023f0 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 80023e4:	f022 fef8 	bl	80251d8 <__assert_func>
 80023e8:	08026620 	.word	0x08026620
 80023ec:	0802886f 	.word	0x0802886f
 80023f0:	0802667b 	.word	0x0802667b

080023f4 <_ZN20HardwareMJPEGDecoderD0Ev>:
 80023f4:	b510      	push	{r4, lr}
 80023f6:	4604      	mov	r4, r0
 80023f8:	2148      	movs	r1, #72	@ 0x48
 80023fa:	f022 fb76 	bl	8024aea <_ZdlPvj>
 80023fe:	4620      	mov	r0, r4
 8002400:	bd10      	pop	{r4, pc}
	...

08002404 <_ZN20HardwareMJPEGDecoderC1Ev>:
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 8002404:	2200      	movs	r2, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8002406:	4b0e      	ldr	r3, [pc, #56]	@ (8002440 <_ZN20HardwareMJPEGDecoderC1Ev+0x3c>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 8002408:	b510      	push	{r4, lr}
    semDecodingDone = SEM_CREATE();
 800240a:	4611      	mov	r1, r2
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 800240c:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 800240e:	6003      	str	r3, [r0, #0]
 8002410:	63c2      	str	r2, [r0, #60]	@ 0x3c
 8002412:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 8002416:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800241a:	e9c0 2207 	strd	r2, r2, [r0, #28]
 800241e:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8002422:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8002426:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
    videoInfo.frame_width = 0;
 800242a:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 800242e:	e9c0 2201 	strd	r2, r2, [r0, #4]
    semDecodingDone = SEM_CREATE();
 8002432:	2001      	movs	r0, #1
 8002434:	f00b feb4 	bl	800e1a0 <osSemaphoreNew>
 8002438:	4b02      	ldr	r3, [pc, #8]	@ (8002444 <_ZN20HardwareMJPEGDecoderC1Ev+0x40>)
 800243a:	6018      	str	r0, [r3, #0]
}
 800243c:	4620      	mov	r0, r4
 800243e:	bd10      	pop	{r4, pc}
 8002440:	080268b0 	.word	0x080268b0
 8002444:	24000840 	.word	0x24000840

08002448 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 8002448:	b410      	push	{r4}
 800244a:	460c      	mov	r4, r1
 800244c:	4611      	mov	r1, r2
 800244e:	461a      	mov	r2, r3
    if (reader != 0)
 8002450:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002452:	b13b      	cbz	r3, 8002464 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 8002454:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002456:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8002458:	1ae4      	subs	r4, r4, r3
        src = (const char*)movieData + offset;
 800245a:	4420      	add	r0, r4
}
 800245c:	f85d 4b04 	ldr.w	r4, [sp], #4
    return strncmp(src, str, num);
 8002460:	f023 b95e 	b.w	8025720 <strncmp>
        src = (const char*)movieData + offset;
 8002464:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8002466:	e7f8      	b.n	800245a <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x12>

08002468 <_ZN20HardwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 8002468:	6b03      	ldr	r3, [r0, #48]	@ 0x30
{
 800246a:	b510      	push	{r4, lr}
    if (reader != 0)
 800246c:	b173      	cbz	r3, 800248c <_ZN20HardwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 800246e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002470:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        const uint32_t index = offset - aviBufferStartOffset;
 8002472:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002474:	1853      	adds	r3, r2, r1
 8002476:	5c52      	ldrb	r2, [r2, r1]
 8002478:	7898      	ldrb	r0, [r3, #2]
 800247a:	785c      	ldrb	r4, [r3, #1]
 800247c:	0400      	lsls	r0, r0, #16
 800247e:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
        val |= d[2] << 16;
 8002482:	4310      	orrs	r0, r2
        val |= d[3] << 24;
 8002484:	78db      	ldrb	r3, [r3, #3]
 8002486:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 800248a:	bd10      	pop	{r4, pc}
        volatile const uint8_t* const d = movieData + offset;
 800248c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800248e:	1853      	adds	r3, r2, r1
        val |= d[0];
 8002490:	5c52      	ldrb	r2, [r2, r1]
        val |= d[1] << 8;
 8002492:	7859      	ldrb	r1, [r3, #1]
        val |= d[2] << 16;
 8002494:	7898      	ldrb	r0, [r3, #2]
 8002496:	0400      	lsls	r0, r0, #16
 8002498:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 800249c:	e7f1      	b.n	8002482 <_ZN20HardwareMJPEGDecoder6getU32Em+0x1a>

0800249e <_ZN20HardwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 800249e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80024a0:	b143      	cbz	r3, 80024b4 <_ZN20HardwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 80024a2:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80024a4:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 80024a6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80024a8:	185a      	adds	r2, r3, r1
 80024aa:	5c58      	ldrb	r0, [r3, r1]
 80024ac:	7852      	ldrb	r2, [r2, #1]
 80024ae:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80024b2:	4770      	bx	lr
        volatile const uint8_t* const d = movieData + offset;
 80024b4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80024b6:	185a      	adds	r2, r3, r1
        val |= d[0];
 80024b8:	5c58      	ldrb	r0, [r3, r1]
        val |= d[1] << 8;
 80024ba:	7853      	ldrb	r3, [r2, #1]
 80024bc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 80024c0:	4770      	bx	lr
	...

080024c4 <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 80024c4:	b570      	push	{r4, r5, r6, lr}
 80024c6:	4604      	mov	r4, r0
    if (reader != 0)
 80024c8:	6b00      	ldr	r0, [r0, #48]	@ 0x30
{
 80024ca:	460d      	mov	r5, r1
 80024cc:	4616      	mov	r6, r2
    if (reader != 0)
 80024ce:	b1d8      	cbz	r0, 8002508 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 80024d0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d208      	bcs.n	80024e8 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80024d6:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 80024d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002510 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 80024da:	219e      	movs	r1, #158	@ 0x9e
 80024dc:	480d      	ldr	r0, [pc, #52]	@ (8002514 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80024de:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            assert(!"Buffer to small");
 80024e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002518 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 80024e4:	f022 fe78 	bl	80251d8 <__assert_func>
        reader->seek(offset);
 80024e8:	6803      	ldr	r3, [r0, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 80024ee:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80024f0:	4632      	mov	r2, r6
 80024f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80024f4:	6803      	ldr	r3, [r0, #0]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	4798      	blx	r3
 80024fa:	b910      	cbnz	r0, 8002502 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 80024fc:	230d      	movs	r3, #13
 80024fe:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return aviBuffer;
 8002502:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        aviBufferStartOffset = offset;
 8002504:	63e5      	str	r5, [r4, #60]	@ 0x3c
}
 8002506:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 8002508:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800250a:	4408      	add	r0, r1
 800250c:	e7fb      	b.n	8002506 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x42>
 800250e:	bf00      	nop
 8002510:	080266e9 	.word	0x080266e9
 8002514:	0802667b 	.word	0x0802667b
 8002518:	080266d6 	.word	0x080266d6

0800251c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 800251c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002520:	6943      	ldr	r3, [r0, #20]
{
 8002522:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002524:	b92b      	cbnz	r3, 8002532 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x16>
 8002526:	4b22      	ldr	r3, [pc, #136]	@ (80025b0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 8002528:	21e4      	movs	r1, #228	@ 0xe4
 800252a:	4a22      	ldr	r2, [pc, #136]	@ (80025b4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 800252c:	4822      	ldr	r0, [pc, #136]	@ (80025b8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 800252e:	f022 fe53 	bl	80251d8 <__assert_func>
    readData(currentMovieOffset, 8);
 8002532:	2208      	movs	r2, #8
 8002534:	6981      	ldr	r1, [r0, #24]
 8002536:	f7ff ffc5 	bl	80024c4 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800253a:	69a1      	ldr	r1, [r4, #24]
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 800253c:	f243 0630 	movw	r6, #12336	@ 0x3030
 8002540:	f246 3764 	movw	r7, #25444	@ 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002544:	3104      	adds	r1, #4
 8002546:	4620      	mov	r0, r4
 8002548:	f7ff ff8e 	bl	8002468 <_ZN20HardwareMJPEGDecoder6getU32Em>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 800254c:	69a3      	ldr	r3, [r4, #24]
 800254e:	4418      	add	r0, r3
 8002550:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002552:	f100 0208 	add.w	r2, r0, #8
 8002556:	429a      	cmp	r2, r3
 8002558:	d306      	bcc.n	8002568 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x4c>
    frameNumber = 1;
 800255a:	2301      	movs	r3, #1
    return false;
 800255c:	2000      	movs	r0, #0
    frameNumber = 1;
 800255e:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; /* start over */
 8002560:	6a23      	ldr	r3, [r4, #32]
 8002562:	61a3      	str	r3, [r4, #24]
}
 8002564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        frameNumber++;
 8002568:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 800256a:	f100 0109 	add.w	r1, r0, #9
        readData(currentMovieOffset, 8);
 800256e:	2208      	movs	r2, #8
 8002570:	4620      	mov	r0, r4
        frameNumber++;
 8002572:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002574:	f021 0101 	bic.w	r1, r1, #1
        frameNumber++;
 8002578:	6163      	str	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 800257a:	61a1      	str	r1, [r4, #24]
        readData(currentMovieOffset, 8);
 800257c:	f7ff ffa2 	bl	80024c4 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 8002580:	f8d4 9018 	ldr.w	r9, [r4, #24]
 8002584:	4620      	mov	r0, r4
 8002586:	4649      	mov	r1, r9
 8002588:	f7ff ff89 	bl	800249e <_ZN20HardwareMJPEGDecoder6getU16Em>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800258c:	f109 0102 	add.w	r1, r9, #2
        uint32_t streamNo  = getU16(currentMovieOffset);
 8002590:	4680      	mov	r8, r0
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002592:	4620      	mov	r0, r4
 8002594:	f7ff ff83 	bl	800249e <_ZN20HardwareMJPEGDecoder6getU16Em>
        chunkSize = getU32(currentMovieOffset + 4);
 8002598:	f109 0104 	add.w	r1, r9, #4
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800259c:	4605      	mov	r5, r0
        chunkSize = getU32(currentMovieOffset + 4);
 800259e:	4620      	mov	r0, r4
 80025a0:	f7ff ff62 	bl	8002468 <_ZN20HardwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80025a4:	45b0      	cmp	r8, r6
 80025a6:	d1d1      	bne.n	800254c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
 80025a8:	42bd      	cmp	r5, r7
 80025aa:	d1cf      	bne.n	800254c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
            return true;
 80025ac:	2001      	movs	r0, #1
 80025ae:	e7d9      	b.n	8002564 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x48>
 80025b0:	0802672b 	.word	0x0802672b
 80025b4:	08026774 	.word	0x08026774
 80025b8:	0802667b 	.word	0x0802667b

080025bc <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 80025bc:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 80025be:	6803      	ldr	r3, [r0, #0]
 80025c0:	bf38      	it	cc
 80025c2:	2101      	movcc	r1, #1
 80025c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
{
 80025c6:	b570      	push	{r4, r5, r6, lr}
 80025c8:	460d      	mov	r5, r1
 80025ca:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 80025cc:	4798      	blx	r3
 80025ce:	42a8      	cmp	r0, r5
 80025d0:	d204      	bcs.n	80025dc <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 80025d2:	6823      	ldr	r3, [r4, #0]
 80025d4:	4620      	mov	r0, r4
 80025d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d8:	4798      	blx	r3
 80025da:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80025dc:	1e6b      	subs	r3, r5, #1
 80025de:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 80025e0:	2210      	movs	r2, #16
 80025e2:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80025e4:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 80025e8:	f106 0108 	add.w	r1, r6, #8
 80025ec:	f7ff ff6a 	bl	80024c4 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 80025f0:	f106 0110 	add.w	r1, r6, #16
 80025f4:	4620      	mov	r0, r4
 80025f6:	f7ff ff37 	bl	8002468 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80025fa:	6a23      	ldr	r3, [r4, #32]
 80025fc:	3b04      	subs	r3, #4
 80025fe:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 8002600:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 8002604:	bd70      	pop	{r4, r5, r6, pc}
	...

08002608 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
    currentMovieOffset = 0;
 8002608:	2100      	movs	r1, #0
    readData(0, 72);
 800260a:	2248      	movs	r2, #72	@ 0x48
{
 800260c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002610:	4604      	mov	r4, r0
    currentMovieOffset = 0;
 8002612:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 8002614:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
    readData(0, 72);
 8002618:	f7ff ff54 	bl	80024c4 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 800261c:	69a6      	ldr	r6, [r4, #24]
 800261e:	2304      	movs	r3, #4
 8002620:	4a63      	ldr	r2, [pc, #396]	@ (80027b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 8002622:	4631      	mov	r1, r6
 8002624:	4620      	mov	r0, r4
 8002626:	f7ff ff0f 	bl	8002448 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800262a:	b148      	cbz	r0, 8002640 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
        lastError = AVI_ERROR_NOT_RIFF;
 800262c:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 800262e:	4a61      	ldr	r2, [pc, #388]	@ (80027b4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002630:	f44f 7196 	mov.w	r1, #300	@ 0x12c
        lastError = AVI_ERROR_NOT_RIFF;
 8002634:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"RIFF header not found");
 8002638:	4b5f      	ldr	r3, [pc, #380]	@ (80027b8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 800263a:	4860      	ldr	r0, [pc, #384]	@ (80027bc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 800263c:	f022 fdcc 	bl	80251d8 <__assert_func>
    currentMovieOffset += 8;
 8002640:	f106 0108 	add.w	r1, r6, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 8002644:	2304      	movs	r3, #4
 8002646:	4a5e      	ldr	r2, [pc, #376]	@ (80027c0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 8002648:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 800264a:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 800264c:	f7ff fefc 	bl	8002448 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002650:	b138      	cbz	r0, 8002662 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x5a>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8002652:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 8002654:	4a57      	ldr	r2, [pc, #348]	@ (80027b4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002656:	f44f 719a 	mov.w	r1, #308	@ 0x134
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 800265a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI header not found");
 800265e:	4b59      	ldr	r3, [pc, #356]	@ (80027c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 8002660:	e7eb      	b.n	800263a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    currentMovieOffset += 4;
 8002662:	f106 010c 	add.w	r1, r6, #12
    if (compare(currentMovieOffset, "LIST", 4))
 8002666:	2304      	movs	r3, #4
 8002668:	4a57      	ldr	r2, [pc, #348]	@ (80027c8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 800266a:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 800266c:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 800266e:	f7ff feeb 	bl	8002448 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002672:	4607      	mov	r7, r0
 8002674:	b138      	cbz	r0, 8002686 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x7e>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8002676:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 8002678:	4a4e      	ldr	r2, [pc, #312]	@ (80027b4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800267a:	f240 113b 	movw	r1, #315	@ 0x13b
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800267e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI LIST not found");
 8002682:	4b52      	ldr	r3, [pc, #328]	@ (80027cc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 8002684:	e7d9      	b.n	800263a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 8002686:	f106 0110 	add.w	r1, r6, #16
 800268a:	4620      	mov	r0, r4
 800268c:	f7ff feec 	bl	8002468 <_ZN20HardwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 8002690:	4605      	mov	r5, r0
 8002692:	b920      	cbnz	r0, 800269e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x96>
 8002694:	4b4e      	ldr	r3, [pc, #312]	@ (80027d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 8002696:	f240 1141 	movw	r1, #321	@ 0x141
 800269a:	4a46      	ldr	r2, [pc, #280]	@ (80027b4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800269c:	e7cd      	b.n	800263a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    uint32_t offset =  currentMovieOffset + 8;
 800269e:	f106 0814 	add.w	r8, r6, #20
    if (compare(offset, "hdrl", 4))
 80026a2:	2304      	movs	r3, #4
 80026a4:	4a4b      	ldr	r2, [pc, #300]	@ (80027d4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 80026a6:	4620      	mov	r0, r4
 80026a8:	4641      	mov	r1, r8
 80026aa:	f7ff fecd 	bl	8002448 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80026ae:	2800      	cmp	r0, #0
 80026b0:	d049      	beq.n	8002746 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 80026b2:	2306      	movs	r3, #6
 80026b4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    if (compare(offset, "avih", 4))
 80026b8:	2304      	movs	r3, #4
 80026ba:	4a47      	ldr	r2, [pc, #284]	@ (80027d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 80026bc:	f106 0118 	add.w	r1, r6, #24
 80026c0:	4620      	mov	r0, r4
 80026c2:	f7ff fec1 	bl	8002448 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80026c6:	2800      	cmp	r0, #0
 80026c8:	d03f      	beq.n	800274a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 80026ca:	2307      	movs	r3, #7
 80026cc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 80026d0:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80026d2:	4f42      	ldr	r7, [pc, #264]	@ (80027dc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 80026d4:	220c      	movs	r2, #12
 80026d6:	4620      	mov	r0, r4
 80026d8:	4629      	mov	r1, r5
 80026da:	f7ff fef3 	bl	80024c4 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80026de:	f105 0608 	add.w	r6, r5, #8
 80026e2:	2304      	movs	r3, #4
 80026e4:	463a      	mov	r2, r7
 80026e6:	4620      	mov	r0, r4
 80026e8:	4631      	mov	r1, r6
 80026ea:	f7ff fead 	bl	8002448 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80026ee:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80026f2:	2800      	cmp	r0, #0
 80026f4:	d048      	beq.n	8002788 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x180>
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d148      	bne.n	800278c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x184>
 80026fa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80026fc:	42ab      	cmp	r3, r5
 80026fe:	d849      	bhi.n	8002794 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 8002700:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002704:	3504      	adds	r5, #4
 8002706:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 8002708:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 800270a:	4629      	mov	r1, r5
 800270c:	f7ff feac 	bl	8002468 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002710:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002712:	4629      	mov	r1, r5
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002714:	6260      	str	r0, [r4, #36]	@ 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002716:	4620      	mov	r0, r4
 8002718:	f7ff fea6 	bl	8002468 <_ZN20HardwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 800271c:	4406      	add	r6, r0
    readData(listOffset, 4);
 800271e:	2204      	movs	r2, #4
 8002720:	4620      	mov	r0, r4
 8002722:	4631      	mov	r1, r6
 8002724:	f7ff fece 	bl	80024c4 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 8002728:	2304      	movs	r3, #4
 800272a:	4a2d      	ldr	r2, [pc, #180]	@ (80027e0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 800272c:	4631      	mov	r1, r6
 800272e:	4620      	mov	r0, r4
 8002730:	f7ff fe8a 	bl	8002448 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002734:	2800      	cmp	r0, #0
 8002736:	d138      	bne.n	80027aa <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; /* next frame number is 1 */
 8002738:	2301      	movs	r3, #1
        indexOffset = listOffset;
 800273a:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; /* next frame number is 1 */
 800273c:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 800273e:	69a3      	ldr	r3, [r4, #24]
 8002740:	6223      	str	r3, [r4, #32]
}
 8002742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 8002746:	2701      	movs	r7, #1
 8002748:	e7b6      	b.n	80026b8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xb0>
    if (foundFrame)
 800274a:	2f00      	cmp	r7, #0
 800274c:	d0c0      	beq.n	80026d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 800274e:	f106 0120 	add.w	r1, r6, #32
 8002752:	4620      	mov	r0, r4
 8002754:	f7ff fe88 	bl	8002468 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002758:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 800275c:	f106 0130 	add.w	r1, r6, #48	@ 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002760:	fbb0 f0f3 	udiv	r0, r0, r3
 8002764:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 8002766:	4620      	mov	r0, r4
 8002768:	f7ff fe7e 	bl	8002468 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 800276c:	f106 0140 	add.w	r1, r6, #64	@ 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 8002770:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 8002772:	4620      	mov	r0, r4
 8002774:	f7ff fe78 	bl	8002468 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 8002778:	f106 0144 	add.w	r1, r6, #68	@ 0x44
        videoInfo.frame_width = getU32(offset + 32);
 800277c:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 800277e:	4620      	mov	r0, r4
 8002780:	f7ff fe72 	bl	8002468 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002784:	6120      	str	r0, [r4, #16]
 8002786:	e7a3      	b.n	80026d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    if (lastError != AVI_NO_ERROR)
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0b9      	beq.n	8002700 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xf8>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 800278c:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800278e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return;
 8002792:	e7d6      	b.n	8002742 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13a>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002794:	1d29      	adds	r1, r5, #4
 8002796:	4620      	mov	r0, r4
 8002798:	f7ff fe66 	bl	8002468 <_ZN20HardwareMJPEGDecoder6getU32Em>
        listOffset += listSize;
 800279c:	1985      	adds	r5, r0, r6
        readData(listOffset, 12);
 800279e:	220c      	movs	r2, #12
 80027a0:	4620      	mov	r0, r4
 80027a2:	4629      	mov	r1, r5
 80027a4:	f7ff fe8e 	bl	80024c4 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 80027a8:	e799      	b.n	80026de <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80027aa:	230b      	movs	r3, #11
 80027ac:	e7ef      	b.n	800278e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x186>
 80027ae:	bf00      	nop
 80027b0:	080267a7 	.word	0x080267a7
 80027b4:	080267c5 	.word	0x080267c5
 80027b8:	080267ac 	.word	0x080267ac
 80027bc:	0802667b 	.word	0x0802667b
 80027c0:	080267f2 	.word	0x080267f2
 80027c4:	080267f7 	.word	0x080267f7
 80027c8:	0802680f 	.word	0x0802680f
 80027cc:	08026814 	.word	0x08026814
 80027d0:	0802682a 	.word	0x0802682a
 80027d4:	08026836 	.word	0x08026836
 80027d8:	0802683b 	.word	0x0802683b
 80027dc:	08026840 	.word	0x08026840
 80027e0:	08026845 	.word	0x08026845

080027e4 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 80027e4:	e9c0 210a 	strd	r2, r1, [r0, #40]	@ 0x28
    reader = 0; /* not using reader */
 80027e8:	2200      	movs	r2, #0
 80027ea:	6302      	str	r2, [r0, #48]	@ 0x30
    readVideoHeader();
 80027ec:	f7ff bf0c 	b.w	8002608 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

080027f0 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 80027f0:	b510      	push	{r4, lr}
    movieData = 0;
 80027f2:	2300      	movs	r3, #0
{
 80027f4:	4604      	mov	r4, r0
 80027f6:	4608      	mov	r0, r1
    movieData = 0;
 80027f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
    movieLength = reader.getDataLength();
 80027fa:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 80027fc:	6321      	str	r1, [r4, #48]	@ 0x30
    movieLength = reader.getDataLength();
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	4798      	blx	r3
 8002802:	62a0      	str	r0, [r4, #40]	@ 0x28
    readVideoHeader();
 8002804:	4620      	mov	r0, r4
}
 8002806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 800280a:	f7ff befd 	b.w	8002608 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
	...

08002810 <JPEG_Decode_DMA>:
     * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
     * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
     * @retval None
     */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
 8002810:	b537      	push	{r0, r1, r2, r4, r5, lr}
        FrameBufferAddress = output;
 8002812:	4c14      	ldr	r4, [pc, #80]	@ (8002864 <JPEG_Decode_DMA+0x54>)
        JPEG_output_is_paused = 0;
        JPEG_OUT_Read_BufferIndex = 0;
        JPEG_OUT_Write_BufferIndex = 0;
 8002814:	4d14      	ldr	r5, [pc, #80]	@ (8002868 <JPEG_Decode_DMA+0x58>)
        FrameBufferAddress = output;
 8002816:	6023      	str	r3, [r4, #0]
        JPEG_output_is_paused = 0;
 8002818:	2400      	movs	r4, #0
 800281a:	4b14      	ldr	r3, [pc, #80]	@ (800286c <JPEG_Decode_DMA+0x5c>)
 800281c:	601c      	str	r4, [r3, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 800281e:	4b14      	ldr	r3, [pc, #80]	@ (8002870 <JPEG_Decode_DMA+0x60>)
 8002820:	601c      	str	r4, [r3, #0]
        JPEG_InputImageIndex = 0;
 8002822:	4b14      	ldr	r3, [pc, #80]	@ (8002874 <JPEG_Decode_DMA+0x64>)
        JPEG_OUT_Write_BufferIndex = 0;
 8002824:	602c      	str	r4, [r5, #0]
        JPEG_InputImageIndex = 0;
 8002826:	601c      	str	r4, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
 8002828:	4b13      	ldr	r3, [pc, #76]	@ (8002878 <JPEG_Decode_DMA+0x68>)
 800282a:	6019      	str	r1, [r3, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
 800282c:	4b13      	ldr	r3, [pc, #76]	@ (800287c <JPEG_Decode_DMA+0x6c>)
 800282e:	601a      	str	r2, [r3, #0]
        MCU_BlockIndex = 0;
 8002830:	4b13      	ldr	r3, [pc, #76]	@ (8002880 <JPEG_Decode_DMA+0x70>)
 8002832:	601c      	str	r4, [r3, #0]

        /* Init buffers */
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
        {
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8002834:	4b13      	ldr	r3, [pc, #76]	@ (8002884 <JPEG_Decode_DMA+0x74>)
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
        }

        /* Do not return from this function until done with decoding all chunks. */
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002836:	682a      	ldr	r2, [r5, #0]
 8002838:	f44f 75c0 	mov.w	r5, #384	@ 0x180
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 800283c:	701c      	strb	r4, [r3, #0]
 800283e:	741c      	strb	r4, [r3, #16]
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
 8002840:	e9c3 4402 	strd	r4, r4, [r3, #8]
 8002844:	e9c3 4406 	strd	r4, r4, [r3, #24]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002848:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800284c:	4a0e      	ldr	r2, [pc, #56]	@ (8002888 <JPEG_Decode_DMA+0x78>)
 800284e:	68d2      	ldr	r2, [r2, #12]
 8002850:	436a      	muls	r2, r5
 8002852:	9200      	str	r2, [sp, #0]
 8002854:	f44f 4250 	mov.w	r2, #53248	@ 0xd000
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f008 f927 	bl	800aaac <HAL_JPEG_Decode_DMA>

        return 0;
    }
 800285e:	4620      	mov	r0, r4
 8002860:	b003      	add	sp, #12
 8002862:	bd30      	pop	{r4, r5, pc}
 8002864:	24009e6c 	.word	0x24009e6c
 8002868:	24009e48 	.word	0x24009e48
 800286c:	24009e58 	.word	0x24009e58
 8002870:	2400083c 	.word	0x2400083c
 8002874:	24009e68 	.word	0x24009e68
 8002878:	24009e60 	.word	0x24009e60
 800287c:	24009e64 	.word	0x24009e64
 8002880:	24000844 	.word	0x24000844
 8002884:	24000010 	.word	0x24000010
 8002888:	24000824 	.word	0x24000824

0800288c <HAL_JPEG_InfoReadyCallback>:
     */
    void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef* hjpeg, JPEG_ConfTypeDef* pInfo)
    {
        uint32_t hMCU, vMCU;

        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 800288c:	684b      	ldr	r3, [r1, #4]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d115      	bne.n	80028be <HAL_JPEG_InfoReadyCallback+0x32>
        {
            if ((pInfo->ImageWidth % 16) != 0)
 8002892:	68cb      	ldr	r3, [r1, #12]
 8002894:	071a      	lsls	r2, r3, #28
            {
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8002896:	bf1e      	ittt	ne
 8002898:	f023 030f 	bicne.w	r3, r3, #15
 800289c:	3310      	addne	r3, #16
 800289e:	60cb      	strne	r3, [r1, #12]
            }

            if ((pInfo->ImageHeight % 16) != 0)
 80028a0:	688b      	ldr	r3, [r1, #8]
 80028a2:	0718      	lsls	r0, r3, #28
            {
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 80028a4:	bf1e      	ittt	ne
 80028a6:	f023 030f 	bicne.w	r3, r3, #15
 80028aa:	3310      	addne	r3, #16
 80028ac:	608b      	strne	r3, [r1, #8]
            }

            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 80028ae:	68cb      	ldr	r3, [r1, #12]
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 80028b0:	688a      	ldr	r2, [r1, #8]
            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 80028b2:	091b      	lsrs	r3, r3, #4
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 80028b4:	0912      	lsrs	r2, r2, #4
            MCU_TotalNb = (hMCU * vMCU);
 80028b6:	4353      	muls	r3, r2
 80028b8:	4a0e      	ldr	r2, [pc, #56]	@ (80028f4 <HAL_JPEG_InfoReadyCallback+0x68>)
 80028ba:	6013      	str	r3, [r2, #0]
 80028bc:	4770      	bx	lr
        }
        else
        {
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d10e      	bne.n	80028e0 <HAL_JPEG_InfoReadyCallback+0x54>
            {
                if ((pInfo->ImageWidth % 16) != 0)
 80028c2:	68cb      	ldr	r3, [r1, #12]
 80028c4:	071a      	lsls	r2, r3, #28
 80028c6:	d003      	beq.n	80028d0 <HAL_JPEG_InfoReadyCallback+0x44>
                {
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 80028c8:	f023 030f 	bic.w	r3, r3, #15
 80028cc:	3310      	adds	r3, #16

            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
            {
                if ((pInfo->ImageWidth % 8) != 0)
                {
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 80028ce:	60cb      	str	r3, [r1, #12]
                }

                if ((pInfo->ImageHeight % 8) != 0)
 80028d0:	688b      	ldr	r3, [r1, #8]
 80028d2:	075a      	lsls	r2, r3, #29
                {
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 80028d4:	bf1e      	ittt	ne
 80028d6:	f023 0307 	bicne.w	r3, r3, #7
 80028da:	3308      	addne	r3, #8
 80028dc:	608b      	strne	r3, [r1, #8]
                }
            }
        }
    }
 80028de:	4770      	bx	lr
            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1fc      	bne.n	80028de <HAL_JPEG_InfoReadyCallback+0x52>
                if ((pInfo->ImageWidth % 8) != 0)
 80028e4:	68cb      	ldr	r3, [r1, #12]
 80028e6:	0758      	lsls	r0, r3, #29
 80028e8:	d0f2      	beq.n	80028d0 <HAL_JPEG_InfoReadyCallback+0x44>
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 80028ea:	f023 0307 	bic.w	r3, r3, #7
 80028ee:	3308      	adds	r3, #8
 80028f0:	e7ed      	b.n	80028ce <HAL_JPEG_InfoReadyCallback+0x42>
 80028f2:	bf00      	nop
 80028f4:	24009e50 	.word	0x24009e50

080028f8 <HAL_JPEG_GetDataCallback>:
     * @retval None
     */
    void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef* hjpeg, uint32_t NbDecodedData)
    {
        /* Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet. */
        JPEG_InputImageIndex += NbDecodedData;
 80028f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002928 <HAL_JPEG_GetDataCallback+0x30>)
 80028fa:	6813      	ldr	r3, [r2, #0]
 80028fc:	440b      	add	r3, r1
    {
 80028fe:	b430      	push	{r4, r5}
        JPEG_InputImageIndex += NbDecodedData;
 8002900:	6013      	str	r3, [r2, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 8002902:	4a0a      	ldr	r2, [pc, #40]	@ (800292c <HAL_JPEG_GetDataCallback+0x34>)
 8002904:	6812      	ldr	r2, [r2, #0]
 8002906:	4293      	cmp	r3, r2
 8002908:	d20c      	bcs.n	8002924 <HAL_JPEG_GetDataCallback+0x2c>
        {
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 800290a:	4c09      	ldr	r4, [pc, #36]	@ (8002930 <HAL_JPEG_GetDataCallback+0x38>)
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 800290c:	1ad2      	subs	r2, r2, r3
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 800290e:	6825      	ldr	r5, [r4, #0]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8002910:	f5b2 4f50 	cmp.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002914:	4429      	add	r1, r5
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8002916:	bf28      	it	cs
 8002918:	f44f 4250 	movcs.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 800291c:	6021      	str	r1, [r4, #0]
        }
    }
 800291e:	bc30      	pop	{r4, r5}
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8002920:	f008 b926 	b.w	800ab70 <HAL_JPEG_ConfigInputBuffer>
    }
 8002924:	bc30      	pop	{r4, r5}
 8002926:	4770      	bx	lr
 8002928:	24009e68 	.word	0x24009e68
 800292c:	24009e64 	.word	0x24009e64
 8002930:	24009e60 	.word	0x24009e60

08002934 <HAL_JPEG_DataReadyCallback>:
     * @param pDataOut: pointer to the output data buffer
     * @param OutDataLength: length of output buffer in bytes
     * @retval None
     */
    void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef* hjpeg, uint8_t* pDataOut, uint32_t OutDataLength)
    {
 8002934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002936:	4c20      	ldr	r4, [pc, #128]	@ (80029b8 <HAL_JPEG_DataReadyCallback+0x84>)
 8002938:	2101      	movs	r1, #1
 800293a:	4d20      	ldr	r5, [pc, #128]	@ (80029bc <HAL_JPEG_DataReadyCallback+0x88>)
    {
 800293c:	4606      	mov	r6, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 800293e:	6823      	ldr	r3, [r4, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
        const uint32_t MCU = MCU_BlockIndex;
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;

        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 8002940:	4f1f      	ldr	r7, [pc, #124]	@ (80029c0 <HAL_JPEG_DataReadyCallback+0x8c>)
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	54e9      	strb	r1, [r5, r3]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 8002946:	6823      	ldr	r3, [r4, #0]
 8002948:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 800294c:	609a      	str	r2, [r3, #8]
        const uint32_t MCU = MCU_BlockIndex;
 800294e:	4b1d      	ldr	r3, [pc, #116]	@ (80029c4 <HAL_JPEG_DataReadyCallback+0x90>)
 8002950:	6819      	ldr	r1, [r3, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;
 8002952:	6822      	ldr	r2, [r4, #0]
 8002954:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 8002958:	60d1      	str	r1, [r2, #12]
        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68f9      	ldr	r1, [r7, #12]
 800295e:	440a      	add	r2, r1
 8002960:	601a      	str	r2, [r3, #0]

        JPEG_OUT_Write_BufferIndex++;
 8002962:	6823      	ldr	r3, [r4, #0]
 8002964:	3301      	adds	r3, #1
 8002966:	6023      	str	r3, [r4, #0]
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002968:	6823      	ldr	r3, [r4, #0]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d901      	bls.n	8002972 <HAL_JPEG_DataReadyCallback+0x3e>
        {
            JPEG_OUT_Write_BufferIndex = 0;
 800296e:	2300      	movs	r3, #0
 8002970:	6023      	str	r3, [r4, #0]
        }

        /* if the other buffer is full, then ui thread might be converting it */
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 8002972:	6823      	ldr	r3, [r4, #0]
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	5ceb      	ldrb	r3, [r5, r3]
 8002978:	b133      	cbz	r3, 8002988 <HAL_JPEG_DataReadyCallback+0x54>
        {
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 800297a:	2102      	movs	r1, #2
 800297c:	4630      	mov	r0, r6
 800297e:	f008 f8c9 	bl	800ab14 <HAL_JPEG_Pause>
            JPEG_output_is_paused = 1;
 8002982:	4b11      	ldr	r3, [pc, #68]	@ (80029c8 <HAL_JPEG_DataReadyCallback+0x94>)
 8002984:	2201      	movs	r2, #1
 8002986:	601a      	str	r2, [r3, #0]
        }
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002988:	6822      	ldr	r2, [r4, #0]
 800298a:	4630      	mov	r0, r6
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	eb05 1502 	add.w	r5, r5, r2, lsl #4
 8002992:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002996:	6869      	ldr	r1, [r5, #4]
 8002998:	435a      	muls	r2, r3
 800299a:	f008 f8ec 	bl	800ab76 <HAL_JPEG_ConfigOutputBuffer>

        /* Signal Hardware Decoding to wake up */
        if (!DMA2D_reference->isDMARunning() && !DMA2D_reference->getReserved())
 800299e:	4b0b      	ldr	r3, [pc, #44]	@ (80029cc <HAL_JPEG_DataReadyCallback+0x98>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	7a1a      	ldrb	r2, [r3, #8]
 80029a4:	b93a      	cbnz	r2, 80029b6 <HAL_JPEG_DataReadyCallback+0x82>
     *
     * @return true if DMA is reserved by rendering, false if not.
     */
    bool getReserved() const
    {
        return isReserved;
 80029a6:	7a9b      	ldrb	r3, [r3, #10]
 80029a8:	b92b      	cbnz	r3, 80029b6 <HAL_JPEG_DataReadyCallback+0x82>
        {
            SEM_POST(semDecodingDone);
 80029aa:	4b09      	ldr	r3, [pc, #36]	@ (80029d0 <HAL_JPEG_DataReadyCallback+0x9c>)
 80029ac:	6818      	ldr	r0, [r3, #0]
        }
    }
 80029ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SEM_POST(semDecodingDone);
 80029b2:	f00b bc6b 	b.w	800e28c <osSemaphoreRelease>
    }
 80029b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029b8:	24009e48 	.word	0x24009e48
 80029bc:	24000010 	.word	0x24000010
 80029c0:	24000824 	.word	0x24000824
 80029c4:	24000844 	.word	0x24000844
 80029c8:	24009e58 	.word	0x24009e58
 80029cc:	24009e4c 	.word	0x24009e4c
 80029d0:	24000840 	.word	0x24000840

080029d4 <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
 80029d4:	b672      	cpsid	i
     * @retval None
     */
    void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef* hjpeg)
    {
        __disable_irq();
        while (1)
 80029d6:	e7fe      	b.n	80029d6 <HAL_JPEG_ErrorCallback+0x2>

080029d8 <HAL_JPEG_DecodeCpltCallback>:
     * @param hjpeg: JPEG handle pointer
     * @retval None
     */
    void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef* hjpeg)
    {
        Jpeg_HWDecodingEnd = 1;
 80029d8:	4b01      	ldr	r3, [pc, #4]	@ (80029e0 <HAL_JPEG_DecodeCpltCallback+0x8>)
 80029da:	2201      	movs	r2, #1
 80029dc:	601a      	str	r2, [r3, #0]
    }
 80029de:	4770      	bx	lr
 80029e0:	24009e5c 	.word	0x24009e5c

080029e4 <JPEG_OutputHandler>:
 * @brief  JPEG Ouput Data BackGround Postprocessing .
 * @param hjpeg: JPEG handle pointer
 * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
 */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg)
{
 80029e4:	b538      	push	{r3, r4, r5, lr}
    /* Decode frame complete */
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 80029e6:	4d16      	ldr	r5, [pc, #88]	@ (8002a40 <JPEG_OutputHandler+0x5c>)
{
 80029e8:	4604      	mov	r4, r0
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 80029ea:	682b      	ldr	r3, [r5, #0]
 80029ec:	b113      	cbz	r3, 80029f4 <JPEG_OutputHandler+0x10>
 80029ee:	4b15      	ldr	r3, [pc, #84]	@ (8002a44 <JPEG_OutputHandler+0x60>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	bb1b      	cbnz	r3, 8002a3c <JPEG_OutputHandler+0x58>
    {
        return 1;
    }

    /* Try to start DMA2D video transfer if next buffer if full */
    if (!DMA2D_reference->isDMARunning() && (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_CopyBufferEnd == 0))
 80029f4:	4b14      	ldr	r3, [pc, #80]	@ (8002a48 <JPEG_OutputHandler+0x64>)
 80029f6:	6818      	ldr	r0, [r3, #0]
 80029f8:	7a03      	ldrb	r3, [r0, #8]
 80029fa:	b963      	cbnz	r3, 8002a16 <JPEG_OutputHandler+0x32>
 80029fc:	4b13      	ldr	r3, [pc, #76]	@ (8002a4c <JPEG_OutputHandler+0x68>)
 80029fe:	4a14      	ldr	r2, [pc, #80]	@ (8002a50 <JPEG_OutputHandler+0x6c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	011b      	lsls	r3, r3, #4
 8002a04:	5cd3      	ldrb	r3, [r2, r3]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d105      	bne.n	8002a16 <JPEG_OutputHandler+0x32>
 8002a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002a44 <JPEG_OutputHandler+0x60>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	b913      	cbnz	r3, 8002a16 <JPEG_OutputHandler+0x32>
    {
        DMA2D_reference->start();
 8002a10:	6803      	ldr	r3, [r0, #0]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	4798      	blx	r3
    }

    /* Start JPEG IP if paused and next buffer is empty */
    if ((JPEG_output_is_paused == 1) && (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && (Jpeg_HWDecodingEnd == 0))
 8002a16:	4a0f      	ldr	r2, [pc, #60]	@ (8002a54 <JPEG_OutputHandler+0x70>)
 8002a18:	6813      	ldr	r3, [r2, #0]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d10c      	bne.n	8002a38 <JPEG_OutputHandler+0x54>
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a58 <JPEG_OutputHandler+0x74>)
 8002a20:	490b      	ldr	r1, [pc, #44]	@ (8002a50 <JPEG_OutputHandler+0x6c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	5ccb      	ldrb	r3, [r1, r3]
 8002a28:	b933      	cbnz	r3, 8002a38 <JPEG_OutputHandler+0x54>
 8002a2a:	682b      	ldr	r3, [r5, #0]
 8002a2c:	b923      	cbnz	r3, 8002a38 <JPEG_OutputHandler+0x54>
    {
        JPEG_output_is_paused = 0;
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002a2e:	2102      	movs	r1, #2
 8002a30:	4620      	mov	r0, r4
        JPEG_output_is_paused = 0;
 8002a32:	6013      	str	r3, [r2, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002a34:	f008 facd 	bl	800afd2 <HAL_JPEG_Resume>
        return 1;
 8002a38:	2002      	movs	r0, #2
    }

    return 2;
}
 8002a3a:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
 8002a3c:	2001      	movs	r0, #1
 8002a3e:	e7fc      	b.n	8002a3a <JPEG_OutputHandler+0x56>
 8002a40:	24009e5c 	.word	0x24009e5c
 8002a44:	24000838 	.word	0x24000838
 8002a48:	24009e4c 	.word	0x24009e4c
 8002a4c:	2400083c 	.word	0x2400083c
 8002a50:	24000010 	.word	0x24000010
 8002a54:	24009e58 	.word	0x24009e58
 8002a58:	24009e48 	.word	0x24009e48

08002a5c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 8002a5c:	b570      	push	{r4, r5, r6, lr}
 8002a5e:	4605      	mov	r5, r0
    if (length == 0)
 8002a60:	2a00      	cmp	r2, #0
 8002a62:	d035      	beq.n	8002ad0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>
    if (outputBuffer) /* only decode if buffers are assigned. */
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d033      	beq.n	8002ad0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>
        JPEG_ConvertorParams.bytes_pr_pixel = 3;
 8002a68:	481a      	ldr	r0, [pc, #104]	@ (8002ad4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>)
 8002a6a:	2403      	movs	r4, #3
 8002a6c:	6104      	str	r4, [r0, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8002a6e:	68ec      	ldr	r4, [r5, #12]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 8002a70:	0726      	lsls	r6, r4, #28
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8002a72:	f44f 6616 	mov.w	r6, #2400	@ 0x960
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8002a76:	bf18      	it	ne
 8002a78:	f024 040f 	bicne.w	r4, r4, #15
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8002a7c:	6046      	str	r6, [r0, #4]
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8002a7e:	bf18      	it	ne
 8002a80:	3410      	addne	r4, #16
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8002a82:	6004      	str	r4, [r0, #0]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8002a84:	0924      	lsrs	r4, r4, #4
 8002a86:	60c4      	str	r4, [r0, #12]
        JPEG_ConvertorParams.LastLineHeight = (videoInfo.frame_height % MCU_HEIGHT_PIXELS) == 0 ? 0 : MCU_HEIGHT_PIXELS - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8002a88:	692c      	ldr	r4, [r5, #16]
 8002a8a:	f014 040f 	ands.w	r4, r4, #15
 8002a8e:	bf18      	it	ne
 8002a90:	f1c4 0410 	rsbne	r4, r4, #16
 8002a94:	6084      	str	r4, [r0, #8]
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8002a96:	4810      	ldr	r0, [pc, #64]	@ (8002ad8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
 8002a98:	f7ff feba 	bl	8002810 <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002a9c:	4c0f      	ldr	r4, [pc, #60]	@ (8002adc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x80>)
        DMA2D_reference = dma;
 8002a9e:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 8002aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x84>)
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002aa2:	4d0d      	ldr	r5, [pc, #52]	@ (8002ad8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
        DMA2D_reference = dma;
 8002aa4:	601a      	str	r2, [r3, #0]
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002aa6:	4628      	mov	r0, r5
 8002aa8:	f7ff ff9c 	bl	80029e4 <JPEG_OutputHandler>
 8002aac:	6020      	str	r0, [r4, #0]
            if (JpegProcessing_End == 2)
 8002aae:	6823      	ldr	r3, [r4, #0]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d105      	bne.n	8002ac0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x64>
                SEM_WAIT(semDecodingDone);
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x88>)
 8002ab6:	f04f 31ff 	mov.w	r1, #4294967295
 8002aba:	6818      	ldr	r0, [r3, #0]
 8002abc:	f00b fbba 	bl	800e234 <osSemaphoreAcquire>
        } while (JpegProcessing_End != 1);
 8002ac0:	6823      	ldr	r3, [r4, #0]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d1ef      	bne.n	8002aa6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x4a>
        Jpeg_HWDecodingEnd = 0;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	4a07      	ldr	r2, [pc, #28]	@ (8002ae8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x8c>)
 8002aca:	6013      	str	r3, [r2, #0]
        DMA2D_CopyBufferEnd = 0;
 8002acc:	4a07      	ldr	r2, [pc, #28]	@ (8002aec <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x90>)
 8002ace:	6013      	str	r3, [r2, #0]
}
 8002ad0:	bd70      	pop	{r4, r5, r6, pc}
 8002ad2:	bf00      	nop
 8002ad4:	24000824 	.word	0x24000824
 8002ad8:	2400063c 	.word	0x2400063c
 8002adc:	24009e54 	.word	0x24009e54
 8002ae0:	24009e4c 	.word	0x24009e4c
 8002ae4:	24000840 	.word	0x24000840
 8002ae8:	24009e5c 	.word	0x24009e5c
 8002aec:	24000838 	.word	0x24000838

08002af0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 8002af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002af4:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002af6:	6943      	ldr	r3, [r0, #20]
{
 8002af8:	b085      	sub	sp, #20
 8002afa:	4604      	mov	r4, r0
 8002afc:	460f      	mov	r7, r1
 8002afe:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002b00:	b92b      	cbnz	r3, 8002b0e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x1e>
 8002b02:	4b29      	ldr	r3, [pc, #164]	@ (8002ba8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>)
 8002b04:	21b0      	movs	r1, #176	@ 0xb0
 8002b06:	4a29      	ldr	r2, [pc, #164]	@ (8002bac <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 8002b08:	4829      	ldr	r0, [pc, #164]	@ (8002bb0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 8002b0a:	f022 fb65 	bl	80251d8 <__assert_func>
    readData(currentMovieOffset, 8);
 8002b0e:	2208      	movs	r2, #8
 8002b10:	6981      	ldr	r1, [r0, #24]
 8002b12:	f7ff fcd7 	bl	80024c4 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 8002b16:	69a6      	ldr	r6, [r4, #24]
 8002b18:	4620      	mov	r0, r4
 8002b1a:	4631      	mov	r1, r6
 8002b1c:	f7ff fcbf 	bl	800249e <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002b20:	1cb1      	adds	r1, r6, #2
    uint32_t streamNo  = getU16(currentMovieOffset);
 8002b22:	4683      	mov	fp, r0
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002b24:	4620      	mov	r0, r4
 8002b26:	f7ff fcba 	bl	800249e <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002b2a:	1d31      	adds	r1, r6, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002b2c:	4682      	mov	sl, r0
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002b2e:	4620      	mov	r0, r4
 8002b30:	f7ff fc9a 	bl	8002468 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002b34:	f106 0108 	add.w	r1, r6, #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002b38:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002b3a:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002b3c:	1842      	adds	r2, r0, r1
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d226      	bcs.n	8002b90 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa0>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002b42:	f243 0330 	movw	r3, #12336	@ 0x3030
 8002b46:	459b      	cmp	fp, r3
 8002b48:	d117      	bne.n	8002b7a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002b4a:	f246 3364 	movw	r3, #25444	@ 0x6364
 8002b4e:	459a      	cmp	sl, r3
 8002b50:	d113      	bne.n	8002b7a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002b52:	b190      	cbz	r0, 8002b7a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002b54:	4602      	mov	r2, r0
            currentMovieOffset += 8;
 8002b56:	61a1      	str	r1, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002b58:	4620      	mov	r0, r4
 8002b5a:	f7ff fcb3 	bl	80024c4 <_ZN20HardwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002b5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002b60:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002b62:	462a      	mov	r2, r5
 8002b64:	4620      	mov	r0, r4
 8002b66:	f8cd 8000 	str.w	r8, [sp]
 8002b6a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8002b6e:	463b      	mov	r3, r7
 8002b70:	f7ff ff74 	bl	8002a5c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8002b74:	6963      	ldr	r3, [r4, #20]
 8002b76:	3301      	adds	r3, #1
 8002b78:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 8002b7a:	69a3      	ldr	r3, [r4, #24]
 8002b7c:	442b      	add	r3, r5
        if (chunkSize == 0) /* Empty frame - Skip */
 8002b7e:	b905      	cbnz	r5, 8002b82 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x92>
            currentMovieOffset += 8;
 8002b80:	3308      	adds	r3, #8
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002b82:	3301      	adds	r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002b84:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002b86:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002b8a:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002b8c:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8002b8e:	d109      	bne.n	8002ba4 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
        frameNumber = 1;
 8002b90:	2301      	movs	r3, #1
            isCurrentFrameLast = true;
 8002b92:	2001      	movs	r0, #1
        frameNumber = 1;
 8002b94:	6163      	str	r3, [r4, #20]
        currentMovieOffset = firstFrameOffset; /* start over */
 8002b96:	6a23      	ldr	r3, [r4, #32]
 8002b98:	61a3      	str	r3, [r4, #24]
}
 8002b9a:	f080 0001 	eor.w	r0, r0, #1
 8002b9e:	b005      	add	sp, #20
 8002ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        isCurrentFrameLast = false;
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	e7f8      	b.n	8002b9a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 8002ba8:	0802672b 	.word	0x0802672b
 8002bac:	0802684a 	.word	0x0802684a
 8002bb0:	0802667b 	.word	0x0802667b

08002bb4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8002bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bb6:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 8002bb8:	6981      	ldr	r1, [r0, #24]
{
 8002bba:	4616      	mov	r6, r2
    readData(currentMovieOffset, 8);
 8002bbc:	2208      	movs	r2, #8
 8002bbe:	f7ff fc81 	bl	80024c4 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002bc2:	69a7      	ldr	r7, [r4, #24]
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	1d39      	adds	r1, r7, #4
 8002bc8:	f7ff fc4e 	bl	8002468 <_ZN20HardwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002bcc:	f107 0108 	add.w	r1, r7, #8
 8002bd0:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002bd2:	4605      	mov	r5, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002bd4:	4620      	mov	r0, r4
 8002bd6:	f7ff fc75 	bl	80024c4 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002bda:	4601      	mov	r1, r0
    if (frameBuffer) /* only decode if buffers are assigned. */
 8002bdc:	b16e      	cbz	r6, 8002bfa <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x46>
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8002bde:	462a      	mov	r2, r5
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002be0:	4c07      	ldr	r4, [pc, #28]	@ (8002c00 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x4c>)
 8002be2:	4d08      	ldr	r5, [pc, #32]	@ (8002c04 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8002be4:	4633      	mov	r3, r6
 8002be6:	4807      	ldr	r0, [pc, #28]	@ (8002c04 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
 8002be8:	f7ff fe12 	bl	8002810 <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002bec:	4628      	mov	r0, r5
 8002bee:	f7ff fef9 	bl	80029e4 <JPEG_OutputHandler>
 8002bf2:	6020      	str	r0, [r4, #0]
        } while (JpegProcessing_End == 0);
 8002bf4:	6823      	ldr	r3, [r4, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0f8      	beq.n	8002bec <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x38>
}
 8002bfa:	2001      	movs	r0, #1
 8002bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	24009e54 	.word	0x24009e54
 8002c04:	2400063c 	.word	0x2400063c

08002c08 <DMA2D_CopyBuffer>:
 */
void DMA2D_CopyBuffer(JPEG_Data_BufferTypeDef& job)
{
    uint32_t xRef, yRef, refline;

    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002c08:	4a1b      	ldr	r2, [pc, #108]	@ (8002c78 <DMA2D_CopyBuffer+0x70>)
 8002c0a:	f8d0 c00c 	ldr.w	ip, [r0, #12]
{
 8002c0e:	b5f0      	push	{r4, r5, r6, r7, lr}
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002c10:	ea4f 130c 	mov.w	r3, ip, lsl #4
 8002c14:	6814      	ldr	r4, [r2, #0]
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);

    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 8002c16:	6855      	ldr	r5, [r2, #4]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002c18:	4e18      	ldr	r6, [pc, #96]	@ (8002c7c <DMA2D_CopyBuffer+0x74>)

    /* Configure DMA2D data size */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002c1a:	4f19      	ldr	r7, [pc, #100]	@ (8002c80 <DMA2D_CopyBuffer+0x78>)
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002c1c:	fbb3 f1f4 	udiv	r1, r3, r4
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
 8002c20:	fb04 3311 	mls	r3, r4, r1, r3
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 8002c24:	434d      	muls	r5, r1
 8002c26:	6911      	ldr	r1, [r2, #16]
 8002c28:	fb01 f403 	mul.w	r4, r1, r3
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002c2c:	2301      	movs	r3, #1
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 8002c2e:	012d      	lsls	r5, r5, #4
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002c30:	6373      	str	r3, [r6, #52]	@ 0x34
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002c32:	683f      	ldr	r7, [r7, #0]
 8002c34:	68d3      	ldr	r3, [r2, #12]
 8002c36:	1aff      	subs	r7, r7, r3
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002c38:	0519      	lsls	r1, r3, #20
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002c3a:	45bc      	cmp	ip, r7
 8002c3c:	d317      	bcc.n	8002c6e <DMA2D_CopyBuffer+0x66>
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002c3e:	6892      	ldr	r2, [r2, #8]
 8002c40:	f1c2 0210 	rsb	r2, r2, #16
 8002c44:	430a      	orrs	r2, r1
 8002c46:	6472      	str	r2, [r6, #68]	@ 0x44
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
    }

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 8002c48:	4a0e      	ldr	r2, [pc, #56]	@ (8002c84 <DMA2D_CopyBuffer+0x7c>)

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002c4a:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 8002c4e:	6811      	ldr	r1, [r2, #0]
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002c50:	011b      	lsls	r3, r3, #4
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 8002c52:	4a0a      	ldr	r2, [pc, #40]	@ (8002c7c <DMA2D_CopyBuffer+0x74>)
 8002c54:	4421      	add	r1, r4
 8002c56:	4429      	add	r1, r5
 8002c58:	63d1      	str	r1, [r2, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002c5a:	6413      	str	r3, [r2, #64]	@ 0x40

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, 0);
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	6113      	str	r3, [r2, #16]

    /* DMA2D FGPFCCR register configuration */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
 8002c60:	4b09      	ldr	r3, [pc, #36]	@ (8002c88 <DMA2D_CopyBuffer+0x80>)
 8002c62:	61d3      	str	r3, [r2, #28]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.DataBuffer));
 8002c64:	6843      	ldr	r3, [r0, #4]
 8002c66:	60d3      	str	r3, [r2, #12]

    /* Configure DMA2D contol register */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002c68:	4b08      	ldr	r3, [pc, #32]	@ (8002c8c <DMA2D_CopyBuffer+0x84>)
 8002c6a:	6013      	str	r3, [r2, #0]
}
 8002c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002c6e:	f041 0110 	orr.w	r1, r1, #16
 8002c72:	6471      	str	r1, [r6, #68]	@ 0x44
 8002c74:	e7e8      	b.n	8002c48 <DMA2D_CopyBuffer+0x40>
 8002c76:	bf00      	nop
 8002c78:	24000824 	.word	0x24000824
 8002c7c:	52001000 	.word	0x52001000
 8002c80:	24009e50 	.word	0x24009e50
 8002c84:	24009e6c 	.word	0x24009e6c
 8002c88:	ff09000b 	.word	0xff09000b
 8002c8c:	00012301 	.word	0x00012301

08002c90 <DMA2D_ExternalJobCompleted>:
void DMA2D_ExternalJobCompleted(JPEG_Data_BufferTypeDef& job)
{
    job.State = JPEG_BUFFER_EMPTY;
    job.DataBufferSize = 0;

    JPEG_OUT_Read_BufferIndex++;
 8002c90:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc4 <DMA2D_ExternalJobCompleted+0x34>)
    job.State = JPEG_BUFFER_EMPTY;
 8002c92:	2200      	movs	r2, #0
 8002c94:	7002      	strb	r2, [r0, #0]
    JPEG_OUT_Read_BufferIndex++;
 8002c96:	6819      	ldr	r1, [r3, #0]
    job.DataBufferSize = 0;
 8002c98:	6082      	str	r2, [r0, #8]
    JPEG_OUT_Read_BufferIndex++;
 8002c9a:	3101      	adds	r1, #1
 8002c9c:	6019      	str	r1, [r3, #0]
    if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002c9e:	6819      	ldr	r1, [r3, #0]
 8002ca0:	2901      	cmp	r1, #1
 8002ca2:	d900      	bls.n	8002ca6 <DMA2D_ExternalJobCompleted+0x16>
    {
        JPEG_OUT_Read_BufferIndex = 0;
 8002ca4:	601a      	str	r2, [r3, #0]
    }

    /* Check if last line */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
 8002ca6:	4b08      	ldr	r3, [pc, #32]	@ (8002cc8 <DMA2D_ExternalJobCompleted+0x38>)
 8002ca8:	4a08      	ldr	r2, [pc, #32]	@ (8002ccc <DMA2D_ExternalJobCompleted+0x3c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68d2      	ldr	r2, [r2, #12]
 8002cae:	1a9b      	subs	r3, r3, r2
 8002cb0:	68c2      	ldr	r2, [r0, #12]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d302      	bcc.n	8002cbc <DMA2D_ExternalJobCompleted+0x2c>
    {
        DMA2D_CopyBufferEnd = 1;
 8002cb6:	4b06      	ldr	r3, [pc, #24]	@ (8002cd0 <DMA2D_ExternalJobCompleted+0x40>)
 8002cb8:	2201      	movs	r2, #1
 8002cba:	601a      	str	r2, [r3, #0]
    }

    /* Signal decoder thread to wake up and continue decoding */
    SEM_POST(semDecodingDone);
 8002cbc:	4b05      	ldr	r3, [pc, #20]	@ (8002cd4 <DMA2D_ExternalJobCompleted+0x44>)
 8002cbe:	6818      	ldr	r0, [r3, #0]
 8002cc0:	f00b bae4 	b.w	800e28c <osSemaphoreRelease>
 8002cc4:	2400083c 	.word	0x2400083c
 8002cc8:	24009e50 	.word	0x24009e50
 8002ccc:	24000824 	.word	0x24000824
 8002cd0:	24000838 	.word	0x24000838
 8002cd4:	24000840 	.word	0x24000840

08002cd8 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002cd8:	2101      	movs	r1, #1
 8002cda:	2200      	movs	r2, #0
{
 8002cdc:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002cde:	4608      	mov	r0, r1
 8002ce0:	f00b fa5e 	bl	800e1a0 <osSemaphoreNew>
 8002ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8002d10 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8002ce6:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002ce8:	b928      	cbnz	r0, 8002cf6 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8002cea:	4b0a      	ldr	r3, [pc, #40]	@ (8002d14 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8002cec:	2128      	movs	r1, #40	@ 0x28
 8002cee:	4a0a      	ldr	r2, [pc, #40]	@ (8002d18 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002cf0:	480a      	ldr	r0, [pc, #40]	@ (8002d1c <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8002cf2:	f022 fa71 	bl	80251d8 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2104      	movs	r1, #4
 8002cfa:	2001      	movs	r0, #1
 8002cfc:	f00b faef 	bl	800e2de <osMessageQueueNew>
 8002d00:	4b07      	ldr	r3, [pc, #28]	@ (8002d20 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8002d02:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002d04:	b918      	cbnz	r0, 8002d0e <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8002d06:	4b07      	ldr	r3, [pc, #28]	@ (8002d24 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8002d08:	212c      	movs	r1, #44	@ 0x2c
 8002d0a:	4a03      	ldr	r2, [pc, #12]	@ (8002d18 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8002d0c:	e7f0      	b.n	8002cf0 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8002d0e:	bd08      	pop	{r3, pc}
 8002d10:	24009e74 	.word	0x24009e74
 8002d14:	080268ec 	.word	0x080268ec
 8002d18:	08026935 	.word	0x08026935
 8002d1c:	08026964 	.word	0x08026964
 8002d20:	24009e70 	.word	0x24009e70
 8002d24:	080269b5 	.word	0x080269b5

08002d28 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8002d28:	4b02      	ldr	r3, [pc, #8]	@ (8002d34 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8002d2a:	f04f 31ff 	mov.w	r1, #4294967295
 8002d2e:	6818      	ldr	r0, [r3, #0]
 8002d30:	f00b ba80 	b.w	800e234 <osSemaphoreAcquire>
 8002d34:	24009e74 	.word	0x24009e74

08002d38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8002d38:	4b01      	ldr	r3, [pc, #4]	@ (8002d40 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8002d3a:	6818      	ldr	r0, [r3, #0]
 8002d3c:	f00b baa6 	b.w	800e28c <osSemaphoreRelease>
 8002d40:	24009e74 	.word	0x24009e74

08002d44 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8002d44:	4b02      	ldr	r3, [pc, #8]	@ (8002d50 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8002d46:	2100      	movs	r1, #0
 8002d48:	6818      	ldr	r0, [r3, #0]
 8002d4a:	f00b ba73 	b.w	800e234 <osSemaphoreAcquire>
 8002d4e:	bf00      	nop
 8002d50:	24009e74 	.word	0x24009e74

08002d54 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8002d54:	f7ff bff0 	b.w	8002d38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08002d58 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8002d58:	2300      	movs	r3, #0
 8002d5a:	4803      	ldr	r0, [pc, #12]	@ (8002d68 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8002d5c:	4903      	ldr	r1, [pc, #12]	@ (8002d6c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8002d5e:	461a      	mov	r2, r3
 8002d60:	6800      	ldr	r0, [r0, #0]
 8002d62:	f00b baf7 	b.w	800e354 <osMessageQueuePut>
 8002d66:	bf00      	nop
 8002d68:	24009e70 	.word	0x24009e70
 8002d6c:	24000030 	.word	0x24000030

08002d70 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002d70:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8002d72:	2300      	movs	r3, #0
 8002d74:	4c07      	ldr	r4, [pc, #28]	@ (8002d94 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8002d76:	a901      	add	r1, sp, #4
 8002d78:	461a      	mov	r2, r3
 8002d7a:	6820      	ldr	r0, [r4, #0]
 8002d7c:	f00b fb1b 	bl	800e3b6 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002d80:	f04f 33ff 	mov.w	r3, #4294967295
 8002d84:	2200      	movs	r2, #0
 8002d86:	a901      	add	r1, sp, #4
 8002d88:	6820      	ldr	r0, [r4, #0]
 8002d8a:	f00b fb14 	bl	800e3b6 <osMessageQueueGet>
}
 8002d8e:	b002      	add	sp, #8
 8002d90:	bd10      	pop	{r4, pc}
 8002d92:	bf00      	nop
 8002d94:	24009e70 	.word	0x24009e70

08002d98 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
 8002d98:	6803      	ldr	r3, [r0, #0]
 8002d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d9c:	4718      	bx	r3

08002d9e <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8002d9e:	2001      	movs	r0, #1
 8002da0:	4770      	bx	lr

08002da2 <DMA2D_XferErrorCallback>:
    }

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
        (void)handle; // Unused argument
        while (1)
 8002da2:	e7fe      	b.n	8002da2 <DMA2D_XferErrorCallback>

08002da4 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002da4:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8002da8:	4770      	bx	lr
	...

08002dac <_ZN8STM32DMA5startEv>:
                execute();
            }
        }
    }

    virtual void start()
 8002dac:	b510      	push	{r4, lr}
 8002dae:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
 8002db0:	f04f 31ff 	mov.w	r1, #4294967295
 8002db4:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	@ 0xda4
 8002db8:	f00b f9b0 	bl	800e11c <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
 8002dbc:	6860      	ldr	r0, [r4, #4]
 8002dbe:	6803      	ldr	r3, [r0, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4798      	blx	r3
 8002dc4:	b978      	cbnz	r0, 8002de6 <_ZN8STM32DMA5startEv+0x3a>
 8002dc6:	7a63      	ldrb	r3, [r4, #9]
 8002dc8:	b16b      	cbz	r3, 8002de6 <_ZN8STM32DMA5startEv+0x3a>
 8002dca:	7a23      	ldrb	r3, [r4, #8]
 8002dcc:	b95b      	cbnz	r3, 8002de6 <_ZN8STM32DMA5startEv+0x3a>
        {
            started_by_external_job = false;
 8002dce:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
            execute();
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	6823      	ldr	r3, [r4, #0]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd8:	4798      	blx	r3
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
 8002dda:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	@ 0xda4
    }
 8002dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
 8002de2:	f00b b9be 	b.w	800e162 <osMutexRelease>
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
 8002de6:	490b      	ldr	r1, [pc, #44]	@ (8002e14 <_ZN8STM32DMA5startEv+0x68>)
 8002de8:	4a0b      	ldr	r2, [pc, #44]	@ (8002e18 <_ZN8STM32DMA5startEv+0x6c>)
 8002dea:	680b      	ldr	r3, [r1, #0]
 8002dec:	011b      	lsls	r3, r3, #4
 8002dee:	5cd3      	ldrb	r3, [r2, r3]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d1f2      	bne.n	8002dda <_ZN8STM32DMA5startEv+0x2e>
 8002df4:	7a20      	ldrb	r0, [r4, #8]
 8002df6:	2800      	cmp	r0, #0
 8002df8:	d1ef      	bne.n	8002dda <_ZN8STM32DMA5startEv+0x2e>
 8002dfa:	7aa0      	ldrb	r0, [r4, #10]
 8002dfc:	2800      	cmp	r0, #0
 8002dfe:	d1ec      	bne.n	8002dda <_ZN8STM32DMA5startEv+0x2e>
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002e00:	6808      	ldr	r0, [r1, #0]
            started_by_external_job = true;
 8002e02:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002e06:	eb02 1000 	add.w	r0, r2, r0, lsl #4
        isRunning = true;
 8002e0a:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002e0c:	f7ff fefc 	bl	8002c08 <DMA2D_CopyBuffer>
    }
 8002e10:	e7e3      	b.n	8002dda <_ZN8STM32DMA5startEv+0x2e>
 8002e12:	bf00      	nop
 8002e14:	2400083c 	.word	0x2400083c
 8002e18:	24000010 	.word	0x24000010

08002e1c <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8002e1c:	4b05      	ldr	r3, [pc, #20]	@ (8002e34 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e1e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002e22:	6003      	str	r3, [r0, #0]
 8002e24:	4b04      	ldr	r3, [pc, #16]	@ (8002e38 <_ZN8STM32DMAD1Ev+0x1c>)
 8002e26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002e2a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002e2e:	f3bf 8f6f 	isb	sy
}
 8002e32:	4770      	bx	lr
 8002e34:	08026b58 	.word	0x08026b58
 8002e38:	e000e100 	.word	0xe000e100

08002e3c <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002e3c:	b510      	push	{r4, lr}
 8002e3e:	4604      	mov	r4, r0
}
 8002e40:	f640 51a8 	movw	r1, #3496	@ 0xda8
 8002e44:	f7ff ffea 	bl	8002e1c <_ZN8STM32DMAD1Ev>
 8002e48:	4620      	mov	r0, r4
 8002e4a:	f021 fe4e 	bl	8024aea <_ZdlPvj>
 8002e4e:	4620      	mov	r0, r4
 8002e50:	bd10      	pop	{r4, pc}
	...

08002e54 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002e54:	4b10      	ldr	r3, [pc, #64]	@ (8002e98 <_ZN8STM32DMA10initializeEv+0x44>)
{
 8002e56:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002e58:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002e5c:	f042 0210 	orr.w	r2, r2, #16
 8002e60:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8002e64:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002e68:	f002 0210 	and.w	r2, r2, #16
 8002e6c:	9201      	str	r2, [sp, #4]
 8002e6e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002e70:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002e72:	f042 0210 	orr.w	r2, r2, #16
 8002e76:	67da      	str	r2, [r3, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002e78:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002e7a:	f022 0210 	bic.w	r2, r2, #16
 8002e7e:	67da      	str	r2, [r3, #124]	@ 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002e80:	4b06      	ldr	r3, [pc, #24]	@ (8002e9c <_ZN8STM32DMA10initializeEv+0x48>)
 8002e82:	4a07      	ldr	r2, [pc, #28]	@ (8002ea0 <_ZN8STM32DMA10initializeEv+0x4c>)
 8002e84:	621a      	str	r2, [r3, #32]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8002e86:	4a07      	ldr	r2, [pc, #28]	@ (8002ea4 <_ZN8STM32DMA10initializeEv+0x50>)
 8002e88:	625a      	str	r2, [r3, #36]	@ 0x24
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e8a:	4b07      	ldr	r3, [pc, #28]	@ (8002ea8 <_ZN8STM32DMA10initializeEv+0x54>)
 8002e8c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002e90:	609a      	str	r2, [r3, #8]
}
 8002e92:	b002      	add	sp, #8
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	58024400 	.word	0x58024400
 8002e9c:	240006b0 	.word	0x240006b0
 8002ea0:	080030f1 	.word	0x080030f1
 8002ea4:	08002da3 	.word	0x08002da3
 8002ea8:	e000e100 	.word	0xe000e100

08002eac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8002eac:	b508      	push	{r3, lr}
    switch (format)
 8002eae:	280a      	cmp	r0, #10
 8002eb0:	d809      	bhi.n	8002ec6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8002eb2:	e8df f000 	tbb	[pc, r0]
 8002eb6:	1006      	.short	0x1006
 8002eb8:	0808080e 	.word	0x0808080e
 8002ebc:	10101008 	.word	0x10101008
 8002ec0:	10          	.byte	0x10
 8002ec1:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002ec2:	2002      	movs	r0, #2
}
 8002ec4:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8002ec6:	4b05      	ldr	r3, [pc, #20]	@ (8002edc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8002ec8:	2191      	movs	r1, #145	@ 0x91
 8002eca:	4a05      	ldr	r2, [pc, #20]	@ (8002ee0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002ecc:	4805      	ldr	r0, [pc, #20]	@ (8002ee4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002ece:	f022 f983 	bl	80251d8 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	e7f6      	b.n	8002ec4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002ed6:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002ed8:	e7f4      	b.n	8002ec4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002eda:	bf00      	nop
 8002edc:	080269f7 	.word	0x080269f7
 8002ee0:	08026a12 	.word	0x08026a12
 8002ee4:	08026a5d 	.word	0x08026a5d

08002ee8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002ee8:	b538      	push	{r3, r4, r5, lr}
 8002eea:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002eec:	7f88      	ldrb	r0, [r1, #30]
 8002eee:	f7ff ffdd 	bl	8002eac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002ef2:	4b12      	ldr	r3, [pc, #72]	@ (8002f3c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002ef4:	8aa5      	ldrh	r5, [r4, #20]
 8002ef6:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002ef8:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002efa:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002efe:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002f00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002f02:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002f04:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002f06:	1b52      	subs	r2, r2, r5
 8002f08:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002f0a:	6825      	ldr	r5, [r4, #0]
 8002f0c:	2d08      	cmp	r5, #8
 8002f0e:	d10e      	bne.n	8002f2e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002f10:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002f12:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002f14:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002f16:	4a0a      	ldr	r2, [pc, #40]	@ (8002f40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8002f18:	7f20      	ldrb	r0, [r4, #28]
 8002f1a:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002f1e:	61da      	str	r2, [r3, #28]
        return color;
 8002f20:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002f22:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 8002f24:	4a07      	ldr	r2, [pc, #28]	@ (8002f44 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002f26:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002f28:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8002f2a:	601a      	str	r2, [r3, #0]
    }
}
 8002f2c:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8002f2e:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002f30:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002f32:	611a      	str	r2, [r3, #16]
 8002f34:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002f36:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8002f38:	4a03      	ldr	r2, [pc, #12]	@ (8002f48 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 8002f3a:	e7f6      	b.n	8002f2a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8002f3c:	52001000 	.word	0x52001000
 8002f40:	00010009 	.word	0x00010009
 8002f44:	00022301 	.word	0x00022301
 8002f48:	00032301 	.word	0x00032301

08002f4c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8002f4c:	b508      	push	{r3, lr}
    switch (format)
 8002f4e:	280b      	cmp	r0, #11
 8002f50:	d80b      	bhi.n	8002f6a <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8002f52:	e8df f000 	tbb	[pc, r0]
 8002f56:	1206      	.short	0x1206
 8002f58:	0a0a0a10 	.word	0x0a0a0a10
 8002f5c:	0808080a 	.word	0x0808080a
 8002f60:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002f62:	2002      	movs	r0, #2
}
 8002f64:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002f66:	2005      	movs	r0, #5
        break;
 8002f68:	e7fc      	b.n	8002f64 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8002f6a:	4b05      	ldr	r3, [pc, #20]	@ (8002f80 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002f6c:	2170      	movs	r1, #112	@ 0x70
 8002f6e:	4a05      	ldr	r2, [pc, #20]	@ (8002f84 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002f70:	4805      	ldr	r0, [pc, #20]	@ (8002f88 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8002f72:	f022 f931 	bl	80251d8 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002f76:	2000      	movs	r0, #0
 8002f78:	e7f4      	b.n	8002f64 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002f7a:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002f7c:	e7f2      	b.n	8002f64 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002f7e:	bf00      	nop
 8002f80:	080269f7 	.word	0x080269f7
 8002f84:	08026aac 	.word	0x08026aac
 8002f88:	08026a5d 	.word	0x08026a5d

08002f8c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8002f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002f90:	7f4f      	ldrb	r7, [r1, #29]
{
 8002f92:	4689      	mov	r9, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002f94:	4638      	mov	r0, r7
 8002f96:	f7ff ffd9 	bl	8002f4c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002f9a:	f899 501e 	ldrb.w	r5, [r9, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002f9e:	4680      	mov	r8, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002fa0:	4628      	mov	r0, r5
 8002fa2:	f7ff ffd3 	bl	8002f4c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8002fa6:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002fa8:	4628      	mov	r0, r5
 8002faa:	f7ff ff7f 	bl	8002eac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002fae:	f8b9 1014 	ldrh.w	r1, [r9, #20]
 8002fb2:	f8b9 401a 	ldrh.w	r4, [r9, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002fb6:	f8b9 2018 	ldrh.w	r2, [r9, #24]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002fba:	4b45      	ldr	r3, [pc, #276]	@ (80030d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002fbc:	1a64      	subs	r4, r4, r1
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002fbe:	1a52      	subs	r2, r2, r1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002fc0:	641c      	str	r4, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002fc2:	619c      	str	r4, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002fc4:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002fc6:	f8b9 2016 	ldrh.w	r2, [r9, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002fca:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002fd0:	f8d9 1010 	ldr.w	r1, [r9, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002fd4:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002fd6:	f8d9 2004 	ldr.w	r2, [r9, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002fda:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002fdc:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8002fde:	f8d9 4000 	ldr.w	r4, [r9]
 8002fe2:	f899 201c 	ldrb.w	r2, [r9, #28]
 8002fe6:	2c80      	cmp	r4, #128	@ 0x80
 8002fe8:	d022      	beq.n	8003030 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa4>
 8002fea:	d80f      	bhi.n	800300c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 8002fec:	2c20      	cmp	r4, #32
 8002fee:	d066      	beq.n	80030be <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8002ff0:	2c40      	cmp	r4, #64	@ 0x40
 8002ff2:	d064      	beq.n	80030be <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8002ff4:	2c04      	cmp	r4, #4
 8002ff6:	d05c      	beq.n	80030b2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x126>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002ff8:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
 8002ffc:	4b34      	ldr	r3, [pc, #208]	@ (80030d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002ffe:	42af      	cmp	r7, r5
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003000:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8003004:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8003006:	d060      	beq.n	80030ca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8003008:	4a32      	ldr	r2, [pc, #200]	@ (80030d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 800300a:	e03f      	b.n	800308c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 800300c:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 8003010:	d004      	beq.n	800301c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8003012:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 8003016:	d1ef      	bne.n	8002ff8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003018:	482f      	ldr	r0, [pc, #188]	@ (80030d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 800301a:	e000      	b.n	800301e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800301c:	482f      	ldr	r0, [pc, #188]	@ (80030dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800301e:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 8003022:	61da      	str	r2, [r3, #28]
 8003024:	f8d9 200c 	ldr.w	r2, [r9, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8003028:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800302a:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800302c:	6159      	str	r1, [r3, #20]
 800302e:	e02c      	b.n	800308a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003030:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8003034:	f8d9 4008 	ldr.w	r4, [r9, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003038:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 800303c:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800303e:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003040:	6159      	str	r1, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8003042:	1d21      	adds	r1, r4, #4
 8003044:	62d9      	str	r1, [r3, #44]	@ 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8003046:	7821      	ldrb	r1, [r4, #0]
 8003048:	b141      	cbz	r1, 800305c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 800304a:	2901      	cmp	r1, #1
 800304c:	d021      	beq.n	8003092 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 800304e:	4b24      	ldr	r3, [pc, #144]	@ (80030e0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 8003050:	f240 110b 	movw	r1, #267	@ 0x10b
 8003054:	4a23      	ldr	r2, [pc, #140]	@ (80030e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 8003056:	4824      	ldr	r0, [pc, #144]	@ (80030e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 8003058:	f022 f8be 	bl	80251d8 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800305c:	69da      	ldr	r2, [r3, #28]
 800305e:	8861      	ldrh	r1, [r4, #2]
 8003060:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8003064:	3901      	subs	r1, #1
 8003066:	f022 0210 	bic.w	r2, r2, #16
 800306a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800306e:	61da      	str	r2, [r3, #28]
            bool blend = true;
 8003070:	2201      	movs	r2, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8003072:	4b17      	ldr	r3, [pc, #92]	@ (80030d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8003074:	69d9      	ldr	r1, [r3, #28]
 8003076:	f041 0120 	orr.w	r1, r1, #32
 800307a:	61d9      	str	r1, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800307c:	69d9      	ldr	r1, [r3, #28]
 800307e:	0689      	lsls	r1, r1, #26
 8003080:	d4fc      	bmi.n	800307c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8003082:	2110      	movs	r1, #16
 8003084:	6099      	str	r1, [r3, #8]
            if (blend)
 8003086:	2a00      	cmp	r2, #0
 8003088:	d0be      	beq.n	8003008 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 800308a:	4a18      	ldr	r2, [pc, #96]	@ (80030ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 800308c:	601a      	str	r2, [r3, #0]
}
 800308e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003092:	69d9      	ldr	r1, [r3, #28]
                if (blitOp.alpha == 255)
 8003094:	3aff      	subs	r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003096:	8860      	ldrh	r0, [r4, #2]
 8003098:	f421 417f 	bic.w	r1, r1, #65280	@ 0xff00
                if (blitOp.alpha == 255)
 800309c:	bf18      	it	ne
 800309e:	2201      	movne	r2, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80030a0:	3801      	subs	r0, #1
 80030a2:	f021 0110 	bic.w	r1, r1, #16
 80030a6:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 80030aa:	f041 0110 	orr.w	r1, r1, #16
 80030ae:	61d9      	str	r1, [r3, #28]
                break;
 80030b0:	e7df      	b.n	8003072 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80030b2:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 80030b6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80030ba:	61da      	str	r2, [r3, #28]
 80030bc:	e7b5      	b.n	800302a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 80030be:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 80030c2:	4b03      	ldr	r3, [pc, #12]	@ (80030d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 80030c4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80030c8:	e7f7      	b.n	80030ba <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80030ca:	f242 3201 	movw	r2, #8961	@ 0x2301
 80030ce:	e7dd      	b.n	800308c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 80030d0:	52001000 	.word	0x52001000
 80030d4:	00012301 	.word	0x00012301
 80030d8:	00020009 	.word	0x00020009
 80030dc:	0002000a 	.word	0x0002000a
 80030e0:	08026af6 	.word	0x08026af6
 80030e4:	08026b10 	.word	0x08026b10
 80030e8:	08026a5d 	.word	0x08026a5d
 80030ec:	00022301 	.word	0x00022301

080030f0 <DMA2D_XferCpltCallback>:
 80030f0:	4b02      	ldr	r3, [pc, #8]	@ (80030fc <DMA2D_XferCpltCallback+0xc>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 80030f6:	6803      	ldr	r3, [r0, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	4718      	bx	r3
 80030fc:	24026418 	.word	0x24026418

08003100 <_ZN8STM32DMA18signalDMAInterruptEv>:
        if (!started_by_external_job)
 8003100:	f890 3da0 	ldrb.w	r3, [r0, #3488]	@ 0xda0
    virtual void signalDMAInterrupt()
 8003104:	b510      	push	{r4, lr}
 8003106:	4604      	mov	r4, r0
        if (!started_by_external_job)
 8003108:	b9d3      	cbnz	r3, 8003140 <_ZN8STM32DMA18signalDMAInterruptEv+0x40>
            executeCompleted();
 800310a:	6803      	ldr	r3, [r0, #0]
 800310c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800310e:	4798      	blx	r3
            if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL && !DMA2D_CopyBufferEnd && !isRunning && !isReserved)
 8003110:	4919      	ldr	r1, [pc, #100]	@ (8003178 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 8003112:	4a1a      	ldr	r2, [pc, #104]	@ (800317c <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8003114:	680b      	ldr	r3, [r1, #0]
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	5cd3      	ldrb	r3, [r2, r3]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d12a      	bne.n	8003174 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 800311e:	4818      	ldr	r0, [pc, #96]	@ (8003180 <_ZN8STM32DMA18signalDMAInterruptEv+0x80>)
 8003120:	6800      	ldr	r0, [r0, #0]
 8003122:	bb38      	cbnz	r0, 8003174 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8003124:	7a20      	ldrb	r0, [r4, #8]
 8003126:	bb28      	cbnz	r0, 8003174 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8003128:	7aa0      	ldrb	r0, [r4, #10]
 800312a:	bb18      	cbnz	r0, 8003174 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 800312c:	6808      	ldr	r0, [r1, #0]
                started_by_external_job = true;
 800312e:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        isRunning = true;
 8003132:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8003134:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    }
 8003138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 800313c:	f7ff bd64 	b.w	8002c08 <DMA2D_CopyBuffer>
        if (isRunning)
 8003140:	7a03      	ldrb	r3, [r0, #8]
 8003142:	b143      	cbz	r3, 8003156 <_ZN8STM32DMA18signalDMAInterruptEv+0x56>
            isRunning = false;
 8003144:	2300      	movs	r3, #0
 8003146:	7203      	strb	r3, [r0, #8]
            DMA2D_ExternalJobCompleted(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8003148:	4b0b      	ldr	r3, [pc, #44]	@ (8003178 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 800314a:	6818      	ldr	r0, [r3, #0]
 800314c:	4b0b      	ldr	r3, [pc, #44]	@ (800317c <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 800314e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8003152:	f7ff fd9d 	bl	8002c90 <DMA2D_ExternalJobCompleted>
            if (!queue.isEmpty() && isAllowed)
 8003156:	6860      	ldr	r0, [r4, #4]
 8003158:	6803      	ldr	r3, [r0, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4798      	blx	r3
 800315e:	b948      	cbnz	r0, 8003174 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8003160:	7a63      	ldrb	r3, [r4, #9]
 8003162:	b13b      	cbz	r3, 8003174 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
                execute();
 8003164:	6823      	ldr	r3, [r4, #0]
                started_by_external_job = false;
 8003166:	f884 0da0 	strb.w	r0, [r4, #3488]	@ 0xda0
                execute();
 800316a:	4620      	mov	r0, r4
 800316c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 800316e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                execute();
 8003172:	4718      	bx	r3
    }
 8003174:	bd10      	pop	{r4, pc}
 8003176:	bf00      	nop
 8003178:	2400083c 	.word	0x2400083c
 800317c:	24000010 	.word	0x24000010
 8003180:	24000838 	.word	0x24000838

08003184 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8003184:	b570      	push	{r4, r5, r6, lr}
 8003186:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8003188:	4b0e      	ldr	r3, [pc, #56]	@ (80031c4 <_ZN8STM32DMAC1Ev+0x40>)
 800318a:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800318c:	2600      	movs	r6, #0
 800318e:	4625      	mov	r5, r4
 8003190:	2260      	movs	r2, #96	@ 0x60
 8003192:	6060      	str	r0, [r4, #4]
 8003194:	7226      	strb	r6, [r4, #8]
 8003196:	7266      	strb	r6, [r4, #9]
 8003198:	f845 3b20 	str.w	r3, [r5], #32
 800319c:	4629      	mov	r1, r5
 800319e:	f00e fd8b 	bl	8011cb8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80031a2:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 80031a6:	60ee      	str	r6, [r5, #12]
 80031a8:	3524      	adds	r5, #36	@ 0x24
 80031aa:	429d      	cmp	r5, r3
 80031ac:	d1fb      	bne.n	80031a6 <_ZN8STM32DMAC1Ev+0x22>
 80031ae:	f884 6da0 	strb.w	r6, [r4, #3488]	@ 0xda0
    mutexIsRunning = MUTEX_CREATE();
 80031b2:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 80031b4:	f8c4 6da4 	str.w	r6, [r4, #3492]	@ 0xda4
    mutexIsRunning = MUTEX_CREATE();
 80031b8:	f00a ff7b 	bl	800e0b2 <osMutexNew>
 80031bc:	f8c4 0da4 	str.w	r0, [r4, #3492]	@ 0xda4
}
 80031c0:	4620      	mov	r0, r4
 80031c2:	bd70      	pop	{r4, r5, r6, pc}
 80031c4:	08026b58 	.word	0x08026b58

080031c8 <_ZN8touchgfx5paint8tearDownEv>:
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80031c8:	4b03      	ldr	r3, [pc, #12]	@ (80031d8 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	07d2      	lsls	r2, r2, #31
 80031ce:	d4fc      	bmi.n	80031ca <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80031d0:	2223      	movs	r2, #35	@ 0x23
 80031d2:	609a      	str	r2, [r3, #8]
}
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	52001000 	.word	0x52001000

080031dc <_ZN8touchgfx5paint9flushLineEPmi>:
void flushLine(uint32_t* addr, int sizebytes)
{
    // This funciton is used when decompressing RGB images to flush
    // the currently decoded pixels in the cache to allow the DMA2D
    // to blend the pixels correcly.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80031dc:	4a0b      	ldr	r2, [pc, #44]	@ (800320c <_ZN8touchgfx5paint9flushLineEPmi+0x30>)
 80031de:	6953      	ldr	r3, [r2, #20]
 80031e0:	03db      	lsls	r3, r3, #15
 80031e2:	d511      	bpl.n	8003208 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80031e4:	2900      	cmp	r1, #0
 80031e6:	dd0f      	ble.n	8003208 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80031e8:	f000 031f 	and.w	r3, r0, #31
 80031ec:	4419      	add	r1, r3
  __ASM volatile ("dsb 0xF":::"memory");
 80031ee:	f3bf 8f4f 	dsb	sy

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 80031f2:	4401      	add	r1, r0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80031f4:	f8c2 0268 	str.w	r0, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80031f8:	3020      	adds	r0, #32
      } while ( op_size > 0 );
 80031fa:	1a0b      	subs	r3, r1, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	dcf9      	bgt.n	80031f4 <_ZN8touchgfx5paint9flushLineEPmi+0x18>
 8003200:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003204:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanDCache_by_Addr(addr, sizebytes);
    }
}
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	e000ed00 	.word	0xe000ed00

08003210 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 8003210:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8003212:	4c10      	ldr	r4, [pc, #64]	@ (8003254 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x44>)
 8003214:	6825      	ldr	r5, [r4, #0]
 8003216:	07ed      	lsls	r5, r5, #31
 8003218:	d4fc      	bmi.n	8003214 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800321a:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800321c:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 800321e:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003220:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8003222:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003226:	ea41 0105 	orr.w	r1, r1, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 800322a:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800322c:	6461      	str	r1, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 800322e:	63e0      	str	r0, [r4, #60]	@ 0x3c
    if (alpha < 0xFF)
 8003230:	d00c      	beq.n	800324c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003232:	4909      	ldr	r1, [pc, #36]	@ (8003258 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x48>)

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8003234:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003238:	6265      	str	r5, [r4, #36]	@ 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 800323a:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 800323e:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8003240:	4b06      	ldr	r3, [pc, #24]	@ (800325c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8003242:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8003244:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8003246:	60e0      	str	r0, [r4, #12]

        /* Set Output Color */
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8003248:	6023      	str	r3, [r4, #0]
    }
}
 800324a:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 800324c:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 800324e:	4b04      	ldr	r3, [pc, #16]	@ (8003260 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
        WRITE_REG(DMA2D->OCOLR, color);
 8003250:	63a2      	str	r2, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8003252:	e7f9      	b.n	8003248 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x38>
 8003254:	52001000 	.word	0x52001000
 8003258:	00010009 	.word	0x00010009
 800325c:	00020001 	.word	0x00020001
 8003260:	00030001 	.word	0x00030001

08003264 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>:

void lineFromRGB888(uint8_t* const ptr, const uint8_t* const data, const unsigned count, const uint8_t alpha)
{
 8003264:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8003266:	4c0e      	ldr	r4, [pc, #56]	@ (80032a0 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x3c>)
 8003268:	6825      	ldr	r5, [r4, #0]
 800326a:	07ed      	lsls	r5, r5, #31
 800326c:	d4fc      	bmi.n	8003268 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800326e:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003270:	0412      	lsls	r2, r2, #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    if (alpha < 0xFF)
 8003272:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003274:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8003276:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800327a:	ea42 0205 	orr.w	r2, r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 800327e:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003280:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8003282:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8003284:	60e1      	str	r1, [r4, #12]
    if (alpha < 0xFF)
 8003286:	d007      	beq.n	8003298 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x34>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003288:	4a06      	ldr	r2, [pc, #24]	@ (80032a4 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x40>)
 800328a:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 800328e:	61e3      	str	r3, [r4, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003290:	6265      	str	r5, [r4, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8003292:	6160      	str	r0, [r4, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8003294:	6022      	str	r2, [r4, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 8003296:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003298:	4b03      	ldr	r3, [pc, #12]	@ (80032a8 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x44>)
 800329a:	61e3      	str	r3, [r4, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 800329c:	6025      	str	r5, [r4, #0]
}
 800329e:	e7fa      	b.n	8003296 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x32>
 80032a0:	52001000 	.word	0x52001000
 80032a4:	00020001 	.word	0x00020001
 80032a8:	ff020001 	.word	0xff020001

080032ac <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>:

void lineFromARGB8888(uint8_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 80032ac:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80032ae:	4c0b      	ldr	r4, [pc, #44]	@ (80032dc <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x30>)
 80032b0:	6825      	ldr	r5, [r4, #0]
 80032b2:	07ed      	lsls	r5, r5, #31
 80032b4:	d4fc      	bmi.n	80032b0 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x4>
    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80032b6:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80032b8:	0412      	lsls	r2, r2, #16

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80032ba:	061b      	lsls	r3, r3, #24
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80032bc:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80032be:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80032c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80032c4:	432a      	orrs	r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80032c6:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80032c8:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 80032ca:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 80032cc:	60e1      	str	r1, [r4, #12]
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80032ce:	61e3      	str	r3, [r4, #28]

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 80032d0:	4b03      	ldr	r3, [pc, #12]	@ (80032e0 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x34>)
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80032d2:	6265      	str	r5, [r4, #36]	@ 0x24
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 80032d4:	6160      	str	r0, [r4, #20]
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 80032d6:	6023      	str	r3, [r4, #0]
}
 80032d8:	bd30      	pop	{r4, r5, pc}
 80032da:	bf00      	nop
 80032dc:	52001000 	.word	0x52001000
 80032e0:	00020001 	.word	0x00020001

080032e4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 80032e4:	2001      	movs	r0, #1
 80032e6:	4770      	bx	lr

080032e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 80032e8:	2040      	movs	r0, #64	@ 0x40
 80032ea:	4770      	bx	lr

080032ec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 80032ec:	eb00 1081 	add.w	r0, r0, r1, lsl #6
    }
 80032f0:	3008      	adds	r0, #8
 80032f2:	4770      	bx	lr

080032f4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 80032f4:	eb00 1081 	add.w	r0, r0, r1, lsl #6
    }
 80032f8:	3008      	adds	r0, #8
 80032fa:	4770      	bx	lr

080032fc <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80032fc:	2001      	movs	r0, #1
 80032fe:	4770      	bx	lr

08003300 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8003300:	f241 3004 	movw	r0, #4868	@ 0x1304
 8003304:	4770      	bx	lr

08003306 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8003306:	f241 3304 	movw	r3, #4868	@ 0x1304
 800330a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800330e:	3008      	adds	r0, #8
 8003310:	4770      	bx	lr

08003312 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8003312:	f241 3304 	movw	r3, #4868	@ 0x1304
 8003316:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800331a:	3008      	adds	r0, #8
 800331c:	4770      	bx	lr

0800331e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI22WaitingScreenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 800331e:	2001      	movs	r0, #1
 8003320:	4770      	bx	lr

08003322 <_ZN8touchgfx9PartitionINS_4meta8TypeListI22WaitingScreenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8003322:	2010      	movs	r0, #16
 8003324:	4770      	bx	lr

08003326 <_ZN8touchgfx9PartitionINS_4meta8TypeListI22WaitingScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8003326:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 800332a:	3008      	adds	r0, #8
 800332c:	4770      	bx	lr

0800332e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI22WaitingScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800332e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8003332:	3008      	adds	r0, #8
 8003334:	4770      	bx	lr

08003336 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8003336:	4608      	mov	r0, r1
 8003338:	f001 b82a 	b.w	8004390 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

0800333c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 800333c:	4b03      	ldr	r3, [pc, #12]	@ (800334c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x10>)
 800333e:	b510      	push	{r4, lr}
 8003340:	4604      	mov	r4, r0
 8003342:	6003      	str	r3, [r0, #0]
 8003344:	f00d f80b 	bl	801035e <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003348:	4620      	mov	r0, r4
 800334a:	bd10      	pop	{r4, pc}
 800334c:	08026c10 	.word	0x08026c10

08003350 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 8003350:	b510      	push	{r4, lr}
 8003352:	4604      	mov	r4, r0
 8003354:	f7ff fff2 	bl	800333c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8003358:	2148      	movs	r1, #72	@ 0x48
 800335a:	4620      	mov	r0, r4
 800335c:	f021 fbc5 	bl	8024aea <_ZdlPvj>
 8003360:	4620      	mov	r0, r4
 8003362:	bd10      	pop	{r4, pc}

08003364 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003364:	4b03      	ldr	r3, [pc, #12]	@ (8003374 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003366:	b510      	push	{r4, lr}
 8003368:	4604      	mov	r4, r0
 800336a:	6003      	str	r3, [r0, #0]
 800336c:	f00c fff7 	bl	801035e <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003370:	4620      	mov	r0, r4
 8003372:	bd10      	pop	{r4, pc}
 8003374:	08026bdc 	.word	0x08026bdc

08003378 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003378:	b510      	push	{r4, lr}
 800337a:	4604      	mov	r4, r0
 800337c:	f7ff fff2 	bl	8003364 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003380:	f241 310c 	movw	r1, #4876	@ 0x130c
 8003384:	4620      	mov	r0, r4
 8003386:	f021 fbb0 	bl	8024aea <_ZdlPvj>
 800338a:	4620      	mov	r0, r4
 800338c:	bd10      	pop	{r4, pc}
	...

08003390 <_ZN8touchgfx9PartitionINS_4meta8TypeListI22WaitingScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003390:	4b03      	ldr	r3, [pc, #12]	@ (80033a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI22WaitingScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003392:	b510      	push	{r4, lr}
 8003394:	4604      	mov	r4, r0
 8003396:	6003      	str	r3, [r0, #0]
 8003398:	f00c ffe1 	bl	801035e <_ZN8touchgfx17AbstractPartitionD1Ev>
 800339c:	4620      	mov	r0, r4
 800339e:	bd10      	pop	{r4, pc}
 80033a0:	08026ba8 	.word	0x08026ba8

080033a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI22WaitingScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80033a4:	b510      	push	{r4, lr}
 80033a6:	4604      	mov	r4, r0
 80033a8:	f7ff fff2 	bl	8003390 <_ZN8touchgfx9PartitionINS_4meta8TypeListI22WaitingScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80033ac:	2118      	movs	r1, #24
 80033ae:	4620      	mov	r0, r4
 80033b0:	f021 fb9b 	bl	8024aea <_ZdlPvj>
 80033b4:	4620      	mov	r0, r4
 80033b6:	bd10      	pop	{r4, pc}

080033b8 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 80033b8:	4b09      	ldr	r3, [pc, #36]	@ (80033e0 <_ZN12FrontendHeapD1Ev+0x28>)
 80033ba:	b510      	push	{r4, lr}
 80033bc:	4604      	mov	r4, r0
 80033be:	6003      	str	r3, [r0, #0]
 80033c0:	f500 5099 	add.w	r0, r0, #4896	@ 0x1320
 80033c4:	3018      	adds	r0, #24
 80033c6:	f7ff ffb9 	bl	800333c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80033ca:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 80033ce:	f7ff ffc9 	bl	8003364 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80033d2:	f104 0014 	add.w	r0, r4, #20
 80033d6:	f7ff ffdb 	bl	8003390 <_ZN8touchgfx9PartitionINS_4meta8TypeListI22WaitingScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80033da:	4620      	mov	r0, r4
 80033dc:	bd10      	pop	{r4, pc}
 80033de:	bf00      	nop
 80033e0:	08026c44 	.word	0x08026c44

080033e4 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80033e4:	b508      	push	{r3, lr}
 80033e6:	4802      	ldr	r0, [pc, #8]	@ (80033f0 <__tcf_0+0xc>)
 80033e8:	f7ff ffe6 	bl	80033b8 <_ZN12FrontendHeapD1Ev>
 80033ec:	bd08      	pop	{r3, pc}
 80033ee:	bf00      	nop
 80033f0:	2400ad30 	.word	0x2400ad30

080033f4 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 80033f4:	b510      	push	{r4, lr}
 80033f6:	4604      	mov	r4, r0
 80033f8:	f7ff ffde 	bl	80033b8 <_ZN12FrontendHeapD1Ev>
 80033fc:	f44f 51a7 	mov.w	r1, #5344	@ 0x14e0
 8003400:	4620      	mov	r0, r4
 8003402:	f021 fb72 	bl	8024aea <_ZdlPvj>
 8003406:	4620      	mov	r0, r4
 8003408:	bd10      	pop	{r4, pc}
	...

0800340c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 800340c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8003410:	f000 fc52 	bl	8003cb8 <_ZN14BitmapDatabase11getInstanceEv>
 8003414:	2400      	movs	r4, #0
 8003416:	4605      	mov	r5, r0
 8003418:	f000 fc52 	bl	8003cc0 <_ZN14BitmapDatabase15getInstanceSizeEv>
 800341c:	4623      	mov	r3, r4
 800341e:	4601      	mov	r1, r0
 8003420:	4622      	mov	r2, r4
 8003422:	4628      	mov	r0, r5
 8003424:	9400      	str	r4, [sp, #0]
 8003426:	f016 fd89 	bl	8019f3c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 800342a:	4b27      	ldr	r3, [pc, #156]	@ (80034c8 <touchgfx_init+0xbc>)
 800342c:	4a27      	ldr	r2, [pc, #156]	@ (80034cc <touchgfx_init+0xc0>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 800342e:	4620      	mov	r0, r4
        static FrontendHeap instance;
 8003430:	4d27      	ldr	r5, [pc, #156]	@ (80034d0 <touchgfx_init+0xc4>)
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	f003 fad8 	bl	80069e8 <_ZN8touchgfx5Texts11setLanguageEt>
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
    {
        vectorFontRenderer = renderer;
 8003438:	4b26      	ldr	r3, [pc, #152]	@ (80034d4 <touchgfx_init+0xc8>)
 800343a:	4a27      	ldr	r2, [pc, #156]	@ (80034d8 <touchgfx_init+0xcc>)

    display.setVectorFontRenderer(&vectorFontRenderer);

    FontManager::setFontProvider(&fontProvider);
 800343c:	4827      	ldr	r0, [pc, #156]	@ (80034dc <touchgfx_init+0xd0>)
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	f016 fc28 	bl	8019c94 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8003444:	682b      	ldr	r3, [r5, #0]
 8003446:	f3bf 8f5b 	dmb	ish
 800344a:	07db      	lsls	r3, r3, #31
 800344c:	d436      	bmi.n	80034bc <touchgfx_init+0xb0>
 800344e:	4628      	mov	r0, r5
 8003450:	f021 fb4d 	bl	8024aee <__cxa_guard_acquire>
 8003454:	b390      	cbz	r0, 80034bc <touchgfx_init+0xb0>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 8003456:	4c22      	ldr	r4, [pc, #136]	@ (80034e0 <touchgfx_init+0xd4>)
          screenStorage(scr),
          transitionStorage(tra),
 8003458:	4f22      	ldr	r7, [pc, #136]	@ (80034e4 <touchgfx_init+0xd8>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 800345a:	4b23      	ldr	r3, [pc, #140]	@ (80034e8 <touchgfx_init+0xdc>)
        : presenterStorage(pres),
 800345c:	f104 0014 	add.w	r0, r4, #20
          frontendApplication(app)
 8003460:	f107 064c 	add.w	r6, r7, #76	@ 0x4c
          screenStorage(scr),
 8003464:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8003468:	6023      	str	r3, [r4, #0]
        : presenterStorage(pres),
 800346a:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 800346c:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 8003470:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8003472:	6126      	str	r6, [r4, #16]
 8003474:	f00c ff74 	bl	8010360 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003478:	4b1c      	ldr	r3, [pc, #112]	@ (80034ec <touchgfx_init+0xe0>)
 800347a:	4640      	mov	r0, r8
 800347c:	6163      	str	r3, [r4, #20]
 800347e:	f00c ff6f 	bl	8010360 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003482:	4b1b      	ldr	r3, [pc, #108]	@ (80034f0 <touchgfx_init+0xe4>)
 8003484:	4638      	mov	r0, r7
 8003486:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003488:	f00c ff6a 	bl	8010360 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800348c:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8003490:	4a18      	ldr	r2, [pc, #96]	@ (80034f4 <touchgfx_init+0xe8>)
 8003492:	f504 509c 	add.w	r0, r4, #4992	@ 0x1380
 8003496:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
 800349a:	f003 fca7 	bl	8006dec <_ZN5ModelC1Ev>
 800349e:	4622      	mov	r2, r4
 80034a0:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 80034a4:	4630      	mov	r0, r6
 80034a6:	f003 fc97 	bl	8006dd8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80034aa:	4630      	mov	r0, r6
 80034ac:	f000 ff70 	bl	8004390 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 80034b0:	4811      	ldr	r0, [pc, #68]	@ (80034f8 <touchgfx_init+0xec>)
 80034b2:	f021 feaf 	bl	8025214 <atexit>
 80034b6:	4628      	mov	r0, r5
 80034b8:	f021 fb25 	bl	8024b06 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80034bc:	480f      	ldr	r0, [pc, #60]	@ (80034fc <touchgfx_init+0xf0>)
}
 80034be:	b002      	add	sp, #8
 80034c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 80034c4:	f7fe bcda 	b.w	8001e7c <_ZN11TouchGFXHAL10initializeEv>
 80034c8:	2402647c 	.word	0x2402647c
 80034cc:	24009ef4 	.word	0x24009ef4
 80034d0:	2400ad2c 	.word	0x2400ad2c
 80034d4:	24009f14 	.word	0x24009f14
 80034d8:	24009ef8 	.word	0x24009ef8
 80034dc:	24000034 	.word	0x24000034
 80034e0:	2400ad30 	.word	0x2400ad30
 80034e4:	2400c068 	.word	0x2400c068
 80034e8:	08026c44 	.word	0x08026c44
 80034ec:	08026ba8 	.word	0x08026ba8
 80034f0:	08026bdc 	.word	0x08026bdc
 80034f4:	08026c10 	.word	0x08026c10
 80034f8:	080033e5 	.word	0x080033e5
 80034fc:	24009e78 	.word	0x24009e78

08003500 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 8003500:	4770      	bx	lr
	...

08003504 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8003504:	4801      	ldr	r0, [pc, #4]	@ (800350c <touchgfx_taskEntry+0x8>)
 8003506:	f7fe bccb 	b.w	8001ea0 <_ZN11TouchGFXHAL9taskEntryEv>
 800350a:	bf00      	nop
 800350c:	24009e78 	.word	0x24009e78

08003510 <_GLOBAL__sub_I_touchgfx_init>:
}
 8003510:	b573      	push	{r0, r1, r4, r5, r6, lr}
static STM32DMA dma;
 8003512:	4c0e      	ldr	r4, [pc, #56]	@ (800354c <_GLOBAL__sub_I_touchgfx_init+0x3c>)
{
public:

    STM32TouchController() {}
 8003514:	4b0e      	ldr	r3, [pc, #56]	@ (8003550 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 8003516:	4e0f      	ldr	r6, [pc, #60]	@ (8003554 <_GLOBAL__sub_I_touchgfx_init+0x44>)
 8003518:	4620      	mov	r0, r4
static LCD24bpp display;
 800351a:	4d0f      	ldr	r5, [pc, #60]	@ (8003558 <_GLOBAL__sub_I_touchgfx_init+0x48>)
 800351c:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 800351e:	f7ff fe31 	bl	8003184 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 8003522:	4628      	mov	r0, r5
 8003524:	f01a fb74 	bl	801dc10 <_ZN8touchgfx8LCD24bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 8003528:	480c      	ldr	r0, [pc, #48]	@ (800355c <_GLOBAL__sub_I_touchgfx_init+0x4c>)
 800352a:	f014 fc6b 	bl	8017e04 <_ZN8touchgfx22VectorFontRendererImplC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 800352e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8003532:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8003536:	4621      	mov	r1, r4
 8003538:	4809      	ldr	r0, [pc, #36]	@ (8003560 <_GLOBAL__sub_I_touchgfx_init+0x50>)
 800353a:	e9cd 3200 	strd	r3, r2, [sp]
 800353e:	4633      	mov	r3, r6
 8003540:	462a      	mov	r2, r5
 8003542:	f7fe fd41 	bl	8001fc8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 8003546:	b002      	add	sp, #8
 8003548:	bd70      	pop	{r4, r5, r6, pc}
 800354a:	bf00      	nop
 800354c:	24009f80 	.word	0x24009f80
 8003550:	080263b8 	.word	0x080263b8
 8003554:	2400ad28 	.word	0x2400ad28
 8003558:	24009f14 	.word	0x24009f14
 800355c:	24009ef8 	.word	0x24009ef8
 8003560:	24009e78 	.word	0x24009e78

08003564 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8003564:	4801      	ldr	r0, [pc, #4]	@ (800356c <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8003566:	f7ff bc59 	b.w	8002e1c <_ZN8STM32DMAD1Ev>
 800356a:	bf00      	nop
 800356c:	24009f80 	.word	0x24009f80

08003570 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8003570:	2000      	movs	r0, #0
 8003572:	4770      	bx	lr

08003574 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8003574:	8081      	strh	r1, [r0, #4]
    }
 8003576:	4770      	bx	lr

08003578 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8003578:	80c1      	strh	r1, [r0, #6]
    }
 800357a:	4770      	bx	lr

0800357c <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 800357c:	8101      	strh	r1, [r0, #8]
    }
 800357e:	4770      	bx	lr

08003580 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8003580:	8141      	strh	r1, [r0, #10]
    }
 8003582:	4770      	bx	lr

08003584 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8003584:	4770      	bx	lr

08003586 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8003586:	4770      	bx	lr

08003588 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8003588:	4770      	bx	lr

0800358a <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 800358a:	4770      	bx	lr

0800358c <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 800358c:	4770      	bx	lr

0800358e <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800358e:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8003590:	88c4      	ldrh	r4, [r0, #6]
 8003592:	6803      	ldr	r3, [r0, #0]
 8003594:	1b12      	subs	r2, r2, r4
 8003596:	8884      	ldrh	r4, [r0, #4]
 8003598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800359a:	1b09      	subs	r1, r1, r4
 800359c:	b212      	sxth	r2, r2
    }
 800359e:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 80035a2:	b209      	sxth	r1, r1
 80035a4:	4718      	bx	r3

080035a6 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80035a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80035aa:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80035ac:	f04f 33ff 	mov.w	r3, #4294967295
 80035b0:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 80035b2:	6813      	ldr	r3, [r2, #0]
 80035b4:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 80035b6:	6010      	str	r0, [r2, #0]
    }
 80035b8:	4770      	bx	lr

080035ba <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 80035ba:	2000      	movs	r0, #0
 80035bc:	4770      	bx	lr

080035be <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 80035be:	888b      	ldrh	r3, [r1, #4]
 80035c0:	8083      	strh	r3, [r0, #4]
        return true;
    }
 80035c2:	2001      	movs	r0, #1
 80035c4:	4770      	bx	lr

080035c6 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 80035c6:	4770      	bx	lr

080035c8 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 80035c8:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
    }
 80035cc:	4770      	bx	lr

080035ce <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 80035ce:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 80035d2:	4770      	bx	lr

080035d4 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80035d4:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 80035d6:	b510      	push	{r4, lr}
        return rect.width;
 80035d8:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 80035dc:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80035e0:	8002      	strh	r2, [r0, #0]
 80035e2:	8042      	strh	r2, [r0, #2]
 80035e4:	8084      	strh	r4, [r0, #4]
 80035e6:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 80035e8:	bd10      	pop	{r4, pc}

080035ea <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 80035ea:	2200      	movs	r2, #0
 80035ec:	8002      	strh	r2, [r0, #0]
 80035ee:	8042      	strh	r2, [r0, #2]
 80035f0:	8082      	strh	r2, [r0, #4]
 80035f2:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 80035f4:	4770      	bx	lr

080035f6 <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
    {
        drawMode = mode;
 80035f6:	7701      	strb	r1, [r0, #28]
    }
 80035f8:	4770      	bx	lr

080035fa <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
    {
        strokeMiterLimit = miterLimit;
 80035fa:	ed80 0a08 	vstr	s0, [r0, #32]
    }
 80035fe:	4770      	bx	lr

08003600 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
    {
        strokeLineJoin = lineJoin;
 8003600:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    }
 8003604:	4770      	bx	lr

08003606 <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
    {
        strokeLineCap = lineCap;
 8003606:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    }
 800360a:	4770      	bx	lr

0800360c <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
        {
            return true;
        }
 800360c:	2001      	movs	r0, #1
 800360e:	4770      	bx	lr

08003610 <_ZN8touchgfx23CWRVectorRendererRGB88816getLinearPainterEv>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
    {
        return linearPainter;
    }
 8003610:	3098      	adds	r0, #152	@ 0x98
 8003612:	4770      	bx	lr

08003614 <_ZN8touchgfx23CWRVectorRendererRGB88820getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
    {
        return colorPainter;
    }
 8003614:	308c      	adds	r0, #140	@ 0x8c
 8003616:	4770      	bx	lr

08003618 <_ZN8touchgfx23CWRVectorRendererRGB88815getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
    {
        return colorPainter;
    }
 8003618:	3084      	adds	r0, #132	@ 0x84
 800361a:	4770      	bx	lr

0800361c <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB888 renderer;
 800361c:	4770      	bx	lr
	...

08003620 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003620:	4b02      	ldr	r3, [pc, #8]	@ (800362c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 8003622:	2290      	movs	r2, #144	@ 0x90
 8003624:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	e000e100 	.word	0xe000e100

08003630 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 8003630:	4770      	bx	lr

08003632 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 8003632:	6301      	str	r1, [r0, #48]	@ 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 8003634:	e9c0 210d 	strd	r2, r1, [r0, #52]	@ 0x34
    }
 8003638:	4770      	bx	lr

0800363a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 800363a:	4770      	bx	lr

0800363c <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 800363c:	4770      	bx	lr

0800363e <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 800363e:	4770      	bx	lr

08003640 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 8003640:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8003644:	4611      	mov	r1, r2
 8003646:	6840      	ldr	r0, [r0, #4]
 8003648:	6803      	ldr	r3, [r0, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	4718      	bx	r3

0800364e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE29setVideoFrameRateCompensationEb>:
        return stream.isPlaying;
    }

    virtual void setVideoFrameRateCompensation(bool allow)
    {
        allowSkipFrames = allow;
 800364e:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
    }
 8003652:	4770      	bx	lr

08003654 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8003654:	b510      	push	{r4, lr}
 8003656:	4604      	mov	r4, r0
 8003658:	2148      	movs	r1, #72	@ 0x48
 800365a:	f021 fa46 	bl	8024aea <_ZdlPvj>
 800365e:	4620      	mov	r0, r4
 8003660:	bd10      	pop	{r4, pc}

08003662 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
 8003662:	b510      	push	{r4, lr}
 8003664:	4604      	mov	r4, r0
 8003666:	212c      	movs	r1, #44	@ 0x2c
 8003668:	f021 fa3f 	bl	8024aea <_ZdlPvj>
 800366c:	4620      	mov	r0, r4
 800366e:	bd10      	pop	{r4, pc}

08003670 <_ZN8touchgfx23CWRVectorRendererRGB888D0Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003670:	b510      	push	{r4, lr}
 8003672:	4604      	mov	r4, r0
 8003674:	21bc      	movs	r1, #188	@ 0xbc
 8003676:	f021 fa38 	bl	8024aea <_ZdlPvj>
 800367a:	4620      	mov	r0, r4
 800367c:	bd10      	pop	{r4, pc}
	...

08003680 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8003680:	b538      	push	{r3, r4, r5, lr}
 8003682:	4604      	mov	r4, r0
    HAL::initialize();
 8003684:	f00d fc7b 	bl	8010f7e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8003688:	6823      	ldr	r3, [r4, #0]
 800368a:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 800368c:	f013 fa42 	bl	8016b14 <_ZN8touchgfx11Application11getInstanceEv>
 8003690:	4601      	mov	r1, r0
 8003692:	4620      	mov	r0, r4
 8003694:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 8003696:	6823      	ldr	r3, [r4, #0]
 8003698:	4908      	ldr	r1, [pc, #32]	@ (80036bc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 800369a:	4620      	mov	r0, r4
 800369c:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 80036a0:	2300      	movs	r3, #0
 80036a2:	461a      	mov	r2, r3
 80036a4:	47a8      	blx	r5
    void addDMA(touchgfx::DMA_Interface& dma)
    {
        this->dma = &dma;
 80036a6:	6863      	ldr	r3, [r4, #4]
 80036a8:	4a05      	ldr	r2, [pc, #20]	@ (80036c0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 80036aa:	6453      	str	r3, [r2, #68]	@ 0x44
        mjpegDecoders[index] = &decoder;
 80036ac:	4b05      	ldr	r3, [pc, #20]	@ (80036c4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 80036ae:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 80036b0:	4a05      	ldr	r2, [pc, #20]	@ (80036c8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 80036b2:	631a      	str	r2, [r3, #48]	@ 0x30
        topBufferRGB = bufferRGB;
 80036b4:	639a      	str	r2, [r3, #56]	@ 0x38
        sizeBufferRGB = sizeOfBuffer;
 80036b6:	4a05      	ldr	r2, [pc, #20]	@ (80036cc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 80036b8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80036ba:	bd38      	pop	{r3, r4, r5, pc}
 80036bc:	d0119400 	.word	0xd0119400
 80036c0:	2400c318 	.word	0x2400c318
 80036c4:	2400c2d0 	.word	0x2400c2d0
 80036c8:	d0000000 	.word	0xd0000000
 80036cc:	00119400 	.word	0x00119400

080036d0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 80036d0:	b538      	push	{r3, r4, r5, lr}
 80036d2:	4604      	mov	r4, r0
 80036d4:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 80036d6:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 80036d8:	f04f 31ff 	mov.w	r1, #4294967295
 80036dc:	f00a fd1e 	bl	800e11c <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 80036e0:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80036e2:	f00a fd3e 	bl	800e162 <osMutexRelease>
        streams[handle].isActive = false;
 80036e6:	2324      	movs	r3, #36	@ 0x24
 80036e8:	fb03 4505 	mla	r5, r3, r5, r4
 80036ec:	2300      	movs	r3, #0
 80036ee:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
        if (oneIsActive == false)
 80036f2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80036f6:	b90b      	cbnz	r3, 80036fc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 80036f8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80036fa:	63a3      	str	r3, [r4, #56]	@ 0x38
    }
 80036fc:	bd38      	pop	{r3, r4, r5, pc}

080036fe <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 80036fe:	f00d bbef 	b.w	8010ee0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

08003702 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 8003702:	f00d bd50 	b.w	80111a6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08003706 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 8003706:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800370a:	b112      	cbz	r2, 8003712 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 800370c:	6803      	ldr	r3, [r0, #0]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	4718      	bx	r3
    }
 8003712:	4770      	bx	lr

08003714 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003714:	4a12      	ldr	r2, [pc, #72]	@ (8003760 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 8003716:	6953      	ldr	r3, [r2, #20]
 8003718:	03db      	lsls	r3, r3, #15
{
 800371a:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800371c:	d51e      	bpl.n	800375c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800371e:	2300      	movs	r3, #0
 8003720:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003724:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8003728:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800372c:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003730:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003734:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8003738:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800373a:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800373e:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003740:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8003744:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003746:	f8c2 5274 	str.w	r5, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
 800374a:	d2f9      	bcs.n	8003740 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 800374c:	3b20      	subs	r3, #32
 800374e:	f113 0f20 	cmn.w	r3, #32
 8003752:	d1f2      	bne.n	800373a <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 8003754:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003758:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 800375c:	bd70      	pop	{r4, r5, r6, pc}
 800375e:	bf00      	nop
 8003760:	e000ed00 	.word	0xe000ed00

08003764 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 8003764:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8003766:	b131      	cbz	r1, 8003776 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x12>
 8003768:	4b04      	ldr	r3, [pc, #16]	@ (800377c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x18>)
 800376a:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 800376e:	4a04      	ldr	r2, [pc, #16]	@ (8003780 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x1c>)
 8003770:	4804      	ldr	r0, [pc, #16]	@ (8003784 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x20>)
 8003772:	f021 fd31 	bl	80251d8 <__assert_func>
    }
 8003776:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 800377a:	bd08      	pop	{r3, pc}
 800377c:	08026c50 	.word	0x08026c50
 8003780:	08026c64 	.word	0x08026c64
 8003784:	08026dee 	.word	0x08026dee

08003788 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8003788:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 800378a:	b131      	cbz	r1, 800379a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 800378c:	4b06      	ldr	r3, [pc, #24]	@ (80037a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 800378e:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 8003792:	4a06      	ldr	r2, [pc, #24]	@ (80037ac <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 8003794:	4806      	ldr	r0, [pc, #24]	@ (80037b0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 8003796:	f021 fd1f 	bl	80251d8 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 800379a:	6840      	ldr	r0, [r0, #4]
 800379c:	4611      	mov	r1, r2
 800379e:	6803      	ldr	r3, [r0, #0]
    }
 80037a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 80037a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a6:	4718      	bx	r3
 80037a8:	08026c50 	.word	0x08026c50
 80037ac:	08026e38 	.word	0x08026e38
 80037b0:	08026dee 	.word	0x08026dee

080037b4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 80037b4:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 80037b6:	b129      	cbz	r1, 80037c4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x10>
 80037b8:	4b03      	ldr	r3, [pc, #12]	@ (80037c8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x14>)
 80037ba:	2179      	movs	r1, #121	@ 0x79
 80037bc:	4a03      	ldr	r2, [pc, #12]	@ (80037cc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x18>)
 80037be:	4804      	ldr	r0, [pc, #16]	@ (80037d0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x1c>)
 80037c0:	f021 fd0a 	bl	80251d8 <__assert_func>
    }
 80037c4:	68c0      	ldr	r0, [r0, #12]
 80037c6:	bd08      	pop	{r3, pc}
 80037c8:	08026c50 	.word	0x08026c50
 80037cc:	08026fe6 	.word	0x08026fe6
 80037d0:	08026dee 	.word	0x08026dee

080037d4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 80037d4:	b510      	push	{r4, lr}
 80037d6:	4604      	mov	r4, r0
        assert(handle < no_streams);
 80037d8:	b129      	cbz	r1, 80037e6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 80037da:	4b19      	ldr	r3, [pc, #100]	@ (8003840 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 80037dc:	21a2      	movs	r1, #162	@ 0xa2
 80037de:	4a19      	ldr	r2, [pc, #100]	@ (8003844 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 80037e0:	4819      	ldr	r0, [pc, #100]	@ (8003848 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 80037e2:	f021 fcf9 	bl	80251d8 <__assert_func>
        switch (cmd)
 80037e6:	2a05      	cmp	r2, #5
 80037e8:	d815      	bhi.n	8003816 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 80037ea:	e8df f002 	tbb	[pc, r2]
 80037ee:	1103      	.short	0x1103
 80037f0:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 80037f4:	6840      	ldr	r0, [r0, #4]
 80037f6:	6803      	ldr	r3, [r0, #0]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	4798      	blx	r3
 80037fc:	b158      	cbz	r0, 8003816 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 80037fe:	2301      	movs	r3, #1
 8003800:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 8003804:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
            stream.frameCount = 0;
 8003808:	2300      	movs	r3, #0
            stream.tickCount = 0;
 800380a:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 800380e:	e002      	b.n	8003816 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 8003810:	2300      	movs	r3, #0
 8003812:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    }
 8003816:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 8003818:	6203      	str	r3, [r0, #32]
 800381a:	e7f5      	b.n	8003808 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 800381c:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 800381e:	2301      	movs	r3, #1
 8003820:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 8003824:	e7f0      	b.n	8003808 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 8003826:	2300      	movs	r3, #0
 8003828:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
            stream.seek_to_frame = 1;
 800382c:	2301      	movs	r3, #1
 800382e:	6203      	str	r3, [r0, #32]
            break;
 8003830:	e7f1      	b.n	8003816 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 8003832:	3b00      	subs	r3, #0
 8003834:	bf18      	it	ne
 8003836:	2301      	movne	r3, #1
 8003838:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    }
 800383c:	e7eb      	b.n	8003816 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 800383e:	bf00      	nop
 8003840:	08026c50 	.word	0x08026c50
 8003844:	0802719b 	.word	0x0802719b
 8003848:	08026dee 	.word	0x08026dee

0800384c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 800384c:	b510      	push	{r4, lr}
 800384e:	460c      	mov	r4, r1
 8003850:	4611      	mov	r1, r2
 8003852:	461a      	mov	r2, r3
        assert(handle < no_streams);
 8003854:	b12c      	cbz	r4, 8003862 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x16>
 8003856:	4b06      	ldr	r3, [pc, #24]	@ (8003870 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x24>)
 8003858:	2190      	movs	r1, #144	@ 0x90
 800385a:	4a06      	ldr	r2, [pc, #24]	@ (8003874 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x28>)
 800385c:	4806      	ldr	r0, [pc, #24]	@ (8003878 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x2c>)
 800385e:	f021 fcbb 	bl	80251d8 <__assert_func>
        stream.frameNumber = 0;
 8003862:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003864:	6840      	ldr	r0, [r0, #4]
 8003866:	6803      	ldr	r3, [r0, #0]
    }
 8003868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	4718      	bx	r3
 8003870:	08026c50 	.word	0x08026c50
 8003874:	0802736f 	.word	0x0802736f
 8003878:	08026dee 	.word	0x08026dee

0800387c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 800387c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800387e:	b129      	cbz	r1, 800388c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x10>
 8003880:	4b05      	ldr	r3, [pc, #20]	@ (8003898 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x1c>)
 8003882:	2182      	movs	r1, #130	@ 0x82
 8003884:	4a05      	ldr	r2, [pc, #20]	@ (800389c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x20>)
 8003886:	4806      	ldr	r0, [pc, #24]	@ (80038a0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x24>)
 8003888:	f021 fca6 	bl	80251d8 <__assert_func>
        stream.tickCount = 0;
 800388c:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 8003890:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 8003894:	bd08      	pop	{r3, pc}
 8003896:	bf00      	nop
 8003898:	08026c50 	.word	0x08026c50
 800389c:	0802754a 	.word	0x0802754a
 80038a0:	08026dee 	.word	0x08026dee

080038a4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 80038a4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 80038a8:	b510      	push	{r4, lr}
 80038aa:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 80038ac:	b153      	cbz	r3, 80038c4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 80038ae:	f04f 31ff 	mov.w	r1, #4294967295
 80038b2:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 80038b4:	f00a fc32 	bl	800e11c <osMutexAcquire>
            firstDrawThisFrame = false;
 80038b8:	2300      	movs	r3, #0
 80038ba:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
            uiHasMutex = true;
 80038be:	2301      	movs	r3, #1
 80038c0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    }
 80038c4:	bd10      	pop	{r4, pc}

080038c6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 80038c6:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80038ca:	b11a      	cbz	r2, 80038d4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 80038cc:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 80038d0:	b102      	cbz	r2, 80038d4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 80038d2:	6018      	str	r0, [r3, #0]
        }
    }
 80038d4:	4770      	bx	lr
	...

080038d8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 80038d8:	b510      	push	{r4, lr}
 80038da:	4604      	mov	r4, r0
 80038dc:	4610      	mov	r0, r2
        assert(handle < no_streams);
 80038de:	b129      	cbz	r1, 80038ec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 80038e0:	4b13      	ldr	r3, [pc, #76]	@ (8003930 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 80038e2:	21d0      	movs	r1, #208	@ 0xd0
 80038e4:	4a13      	ldr	r2, [pc, #76]	@ (8003934 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 80038e6:	4814      	ldr	r0, [pc, #80]	@ (8003938 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 80038e8:	f021 fc76 	bl	80251d8 <__assert_func>
        if (stream.isPlaying)
 80038ec:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 80038f0:	b133      	cbz	r3, 8003900 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 80038f2:	4b12      	ldr	r3, [pc, #72]	@ (800393c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f893 206b 	ldrb.w	r2, [r3, #107]	@ 0x6b
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 80038fa:	6963      	ldr	r3, [r4, #20]
 80038fc:	4413      	add	r3, r2
 80038fe:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 8003900:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 8003904:	b90b      	cbnz	r3, 800390a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 8003906:	2001      	movs	r0, #1
    }
 8003908:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 800390a:	68a3      	ldr	r3, [r4, #8]
 800390c:	6303      	str	r3, [r0, #48]	@ 0x30
            widget.invalidate();
 800390e:	6803      	ldr	r3, [r0, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 8003914:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 8003916:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
            stream.doInvalidateOnNextTick = false;
 800391a:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 800391e:	2800      	cmp	r0, #0
 8003920:	d1f1      	bne.n	8003906 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 8003922:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1ee      	bne.n	8003908 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 800392a:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
 800392e:	e7eb      	b.n	8003908 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 8003930:	08026c50 	.word	0x08026c50
 8003934:	08027706 	.word	0x08027706
 8003938:	08026dee 	.word	0x08026dee
 800393c:	24026418 	.word	0x24026418

08003940 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8003940:	b570      	push	{r4, r5, r6, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 8003942:	4c1a      	ldr	r4, [pc, #104]	@ (80039ac <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x6c>)
 8003944:	4605      	mov	r5, r0
    HAL::endFrame();
 8003946:	f00d fb0d 	bl	8010f64 <_ZN8touchgfx3HAL8endFrameEv>
 800394a:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 800394e:	b913      	cbnz	r3, 8003956 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x16>
 8003950:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8003954:	b1ab      	cbz	r3, 8003982 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8003956:	69e1      	ldr	r1, [r4, #28]
 8003958:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800395c:	4353      	muls	r3, r2
 800395e:	6922      	ldr	r2, [r4, #16]
 8003960:	434a      	muls	r2, r1
 8003962:	4293      	cmp	r3, r2
 8003964:	d30d      	bcc.n	8003982 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
        {
            if (allowSkipFrames)
 8003966:	f894 003c 	ldrb.w	r0, [r4, #60]	@ 0x3c
 800396a:	b138      	cbz	r0, 800397c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3c>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 800396c:	1a9b      	subs	r3, r3, r2
 800396e:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 8003972:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 8003974:	bf98      	it	ls
 8003976:	f102 32ff 	addls.w	r2, r2, #4294967295
 800397a:	6262      	str	r2, [r4, #36]	@ 0x24
                    stream.doDecode = true;
 800397c:	2301      	movs	r3, #1
 800397e:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
        firstDrawThisFrame = true;
 8003982:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 8003984:	6c20      	ldr	r0, [r4, #64]	@ 0x40
        firstDrawThisFrame = true;
 8003986:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        SEM_POST(semDecode);
 800398a:	f00a fc7f 	bl	800e28c <osSemaphoreRelease>
        if (uiHasMutex)
 800398e:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8003992:	b12b      	cbz	r3, 80039a0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>
            MUTEX_UNLOCK(mutexBuffers);
 8003994:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003996:	f00a fbe4 	bl	800e162 <osMutexRelease>
            uiHasMutex = false;
 800399a:	2300      	movs	r3, #0
 800399c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    dma.start();
 80039a0:	6868      	ldr	r0, [r5, #4]
 80039a2:	6803      	ldr	r3, [r0, #0]
}
 80039a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dma.start();
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	4718      	bx	r3
 80039ac:	2400c2d0 	.word	0x2400c2d0

080039b0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039b0:	4b04      	ldr	r3, [pc, #16]	@ (80039c4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 80039b2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80039b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80039ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80039be:	f3bf 8f6f 	isb	sy
}
 80039c2:	4770      	bx	lr
 80039c4:	e000e100 	.word	0xe000e100

080039c8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039c8:	4b02      	ldr	r3, [pc, #8]	@ (80039d4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 80039ca:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80039ce:	609a      	str	r2, [r3, #8]
}
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	e000e100 	.word	0xe000e100

080039d8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 80039d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039da:	4603      	mov	r3, r0
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 80039dc:	f890 0028 	ldrb.w	r0, [r0, #40]	@ 0x28
 80039e0:	b9d8      	cbnz	r0, 8003a1a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x42>
            {
                // Reset stream parameters
                streams[i] = Stream();
 80039e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80039e6:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
        streams[handle].isActive = true;
 80039e8:	2501      	movs	r5, #1
                streams[i] = Stream();
 80039ea:	60d8      	str	r0, [r3, #12]
 80039ec:	859a      	strh	r2, [r3, #44]	@ 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80039ee:	f506 128c 	add.w	r2, r6, #1146880	@ 0x118000
                streams[i] = Stream();
 80039f2:	6118      	str	r0, [r3, #16]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80039f4:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
                streams[i] = Stream();
 80039f8:	6158      	str	r0, [r3, #20]
 80039fa:	6198      	str	r0, [r3, #24]
 80039fc:	61d8      	str	r0, [r3, #28]
 80039fe:	6218      	str	r0, [r3, #32]
 8003a00:	6258      	str	r0, [r3, #36]	@ 0x24
        streams[handle].isActive = true;
 8003a02:	629d      	str	r5, [r3, #40]	@ 0x28
                streams[i] = Stream();
 8003a04:	f883 002e 	strb.w	r0, [r3, #46]	@ 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003a08:	e9d3 470c 	ldrd	r4, r7, [r3, #48]	@ 0x30
 8003a0c:	443c      	add	r4, r7
 8003a0e:	42a2      	cmp	r2, r4
 8003a10:	d90a      	bls.n	8003a28 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x50>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8003a12:	4b0b      	ldr	r3, [pc, #44]	@ (8003a40 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 8003a14:	2152      	movs	r1, #82	@ 0x52
 8003a16:	4a0b      	ldr	r2, [pc, #44]	@ (8003a44 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 8003a18:	e003      	b.n	8003a22 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4a>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 8003a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a48 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 8003a1c:	f240 11c5 	movw	r1, #453	@ 0x1c5
 8003a20:	4a0a      	ldr	r2, [pc, #40]	@ (8003a4c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8003a22:	480b      	ldr	r0, [pc, #44]	@ (8003a50 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 8003a24:	f021 fbd8 	bl	80251d8 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 8003a28:	609e      	str	r6, [r3, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
 8003a2a:	639a      	str	r2, [r3, #56]	@ 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 8003a2c:	f44f 7348 	mov.w	r3, #800	@ 0x320
        format = bufferFormat;
 8003a30:	f881 5034 	strb.w	r5, [r1, #52]	@ 0x34
        bufferWidth = width;
 8003a34:	86cb      	strh	r3, [r1, #54]	@ 0x36
        bufferHeight = height;
 8003a36:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
        buffer = videoBuffer;
 8003a3a:	6308      	str	r0, [r1, #48]	@ 0x30
        bufferHeight = height;
 8003a3c:	870b      	strh	r3, [r1, #56]	@ 0x38
    }
 8003a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a40:	08027a5e 	.word	0x08027a5e
 8003a44:	08027a99 	.word	0x08027a99
 8003a48:	080278a7 	.word	0x080278a7
 8003a4c:	080278d7 	.word	0x080278d7
 8003a50:	08026dee 	.word	0x08026dee

08003a54 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
        : widgetWidth(0)
 8003a54:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 8003a56:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003a58:	4e12      	ldr	r6, [pc, #72]	@ (8003aa4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x50>)
 8003a5a:	4604      	mov	r4, r0
 8003a5c:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 8003a5e:	4b12      	ldr	r3, [pc, #72]	@ (8003aa8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x54>)
 8003a60:	6003      	str	r3, [r0, #0]
 8003a62:	6833      	ldr	r3, [r6, #0]
 8003a64:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003a68:	b10a      	cbz	r2, 8003a6e <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1a>
 8003a6a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003a6c:	b900      	cbnz	r0, 8003a70 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1c>
        return instance->lcdRef;
 8003a6e:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8003a70:	6803      	ldr	r3, [r0, #0]
 8003a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a74:	4798      	blx	r3
 8003a76:	1e43      	subs	r3, r0, #1
 8003a78:	425d      	negs	r5, r3
 8003a7a:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 8003a7c:	6833      	ldr	r3, [r6, #0]
 8003a7e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 8003a80:	b130      	cbz	r0, 8003a90 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8003a82:	6803      	ldr	r3, [r0, #0]
 8003a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a86:	4798      	blx	r3
 8003a88:	2801      	cmp	r0, #1
 8003a8a:	bf08      	it	eq
 8003a8c:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8003a90:	b92d      	cbnz	r5, 8003a9e <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x4a>
 8003a92:	4b06      	ldr	r3, [pc, #24]	@ (8003aac <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 8003a94:	2127      	movs	r1, #39	@ 0x27
 8003a96:	4a06      	ldr	r2, [pc, #24]	@ (8003ab0 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 8003a98:	4806      	ldr	r0, [pc, #24]	@ (8003ab4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 8003a9a:	f021 fb9d 	bl	80251d8 <__assert_func>
    }
 8003a9e:	4620      	mov	r0, r4
 8003aa0:	bd70      	pop	{r4, r5, r6, pc}
 8003aa2:	bf00      	nop
 8003aa4:	24026418 	.word	0x24026418
 8003aa8:	08027d4c 	.word	0x08027d4c
 8003aac:	08027c3c 	.word	0x08027c3c
 8003ab0:	08027c9a 	.word	0x08027c9a
 8003ab4:	08027cd3 	.word	0x08027cd3

08003ab8 <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 8003ab8:	b570      	push	{r4, r5, r6, lr}
    static CWRVectorRendererRGB888 renderer;
 8003aba:	4e24      	ldr	r6, [pc, #144]	@ (8003b4c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x94>)
 8003abc:	6835      	ldr	r5, [r6, #0]
 8003abe:	f3bf 8f5b 	dmb	ish
 8003ac2:	f015 0501 	ands.w	r5, r5, #1
 8003ac6:	d13f      	bne.n	8003b48 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
 8003ac8:	4630      	mov	r0, r6
 8003aca:	f021 f810 	bl	8024aee <__cxa_guard_acquire>
 8003ace:	2800      	cmp	r0, #0
 8003ad0:	d03a      	beq.n	8003b48 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
class CWRVectorRenderer : public VectorRenderer
 8003ad2:	4c1f      	ldr	r4, [pc, #124]	@ (8003b50 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8003ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8003b54 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 8003ad6:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8003ada:	6125      	str	r5, [r4, #16]
 8003adc:	84e5      	strh	r5, [r4, #38]	@ 0x26
 8003ade:	62a5      	str	r5, [r4, #40]	@ 0x28
 8003ae0:	85a5      	strh	r5, [r4, #44]	@ 0x2c
 8003ae2:	e9c4 3500 	strd	r3, r5, [r4]
 8003ae6:	e9c4 5502 	strd	r5, r5, [r4, #8]
 8003aea:	f014 fbea 	bl	80182c2 <_ZN8touchgfx9Matrix3x3C1Ev>
    class CanvasWidgetProxy : public CanvasWidget
 8003aee:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003af2:	f00f fc67 	bl	80133c4 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8003af6:	4b18      	ldr	r3, [pc, #96]	@ (8003b58 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa0>)
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003af8:	4620      	mov	r0, r4
    class CanvasWidgetProxy : public CanvasWidget
 8003afa:	65a3      	str	r3, [r4, #88]	@ 0x58
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003afc:	4b17      	ldr	r3, [pc, #92]	@ (8003b5c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa4>)
 8003afe:	f840 3b84 	str.w	r3, [r0], #132
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 8003b02:	f7ff ffa7 	bl	8003a54 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8003b06:	4b16      	ldr	r3, [pc, #88]	@ (8003b60 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa8>)
 8003b08:	4816      	ldr	r0, [pc, #88]	@ (8003b64 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xac>)
 8003b0a:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 8003b0e:	3324      	adds	r3, #36	@ 0x24
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 8003b10:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 8003b14:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
        : AbstractPainter(),
 8003b18:	2364      	movs	r3, #100	@ 0x64
 8003b1a:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
 8003b1e:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 8003b22:	e9c4 3528 	strd	r3, r5, [r4, #160]	@ 0xa0
 8003b26:	2300      	movs	r3, #0
 8003b28:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
 8003b2c:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 8003b30:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
 8003b34:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB888LinearGradient : public AbstractPainterLinearGradient
 8003b38:	4b0b      	ldr	r3, [pc, #44]	@ (8003b68 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb0>)
 8003b3a:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8003b3e:	f021 fb69 	bl	8025214 <atexit>
 8003b42:	4630      	mov	r0, r6
 8003b44:	f020 ffdf 	bl	8024b06 <__cxa_guard_release>
}
 8003b48:	4801      	ldr	r0, [pc, #4]	@ (8003b50 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8003b4a:	bd70      	pop	{r4, r5, r6, pc}
 8003b4c:	2400c210 	.word	0x2400c210
 8003b50:	2400c214 	.word	0x2400c214
 8003b54:	0802938c 	.word	0x0802938c
 8003b58:	08027d6c 	.word	0x08027d6c
 8003b5c:	08027de4 	.word	0x08027de4
 8003b60:	080293d8 	.word	0x080293d8
 8003b64:	0800361d 	.word	0x0800361d
 8003b68:	08029410 	.word	0x08029410

08003b6c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 8003b6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003b70:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 8003b72:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003b74:	f44f 6716 	mov.w	r7, #2400	@ 0x960
            SEM_WAIT(semDecode);
 8003b78:	f04f 31ff 	mov.w	r1, #4294967295
 8003b7c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8003b7e:	f00a fb59 	bl	800e234 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 8003b82:	f04f 31ff 	mov.w	r1, #4294967295
 8003b86:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003b88:	f00a fac8 	bl	800e11c <osMutexAcquire>
                if (stream.doDecode)
 8003b8c:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8003b90:	b343      	cbz	r3, 8003be4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x78>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 8003b92:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 8003b94:	f8d4 8020 	ldr.w	r8, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
 8003b98:	682b      	ldr	r3, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
 8003b9a:	f884 602b 	strb.w	r6, [r4, #43]	@ 0x2b
                    if (stream.seek_to_frame > 0)
 8003b9e:	f1b8 0f00 	cmp.w	r8, #0
 8003ba2:	d023      	beq.n	8003bec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x80>
                        decoder->gotoFrame(stream.seek_to_frame);
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba6:	4641      	mov	r1, r8
 8003ba8:	4628      	mov	r0, r5
 8003baa:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 8003bac:	2300      	movs	r3, #0
 8003bae:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003bb0:	682b      	ldr	r3, [r5, #0]
 8003bb2:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003bb6:	9700      	str	r7, [sp, #0]
 8003bb8:	4628      	mov	r0, r5
 8003bba:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8003bbe:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003bc2:	68a1      	ldr	r1, [r4, #8]
 8003bc4:	47c0      	blx	r8
                    stream.frameCount++;
 8003bc6:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003bc8:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
                    stream.frameCount++;
 8003bcc:	3301      	adds	r3, #1
 8003bce:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 8003bd0:	b1f0      	cbz	r0, 8003c10 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xa4>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8003bd2:	682b      	ldr	r3, [r5, #0]
 8003bd4:	4628      	mov	r0, r5
 8003bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd8:	4798      	blx	r3
 8003bda:	3801      	subs	r0, #1
                    stream.doDecode = false;
 8003bdc:	2300      	movs	r3, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8003bde:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 8003be0:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 8003be4:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003be6:	f00a fabc 	bl	800e162 <osMutexRelease>
        while (1)
 8003bea:	e7c5      	b.n	8003b78 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xc>
                        if (stream.skip_frames > 0)
 8003bec:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003bee:	2a00      	cmp	r2, #0
 8003bf0:	d0de      	beq.n	8003bb0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 8003bf2:	4628      	mov	r0, r5
 8003bf4:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	@ 0x24
 8003bf8:	4798      	blx	r3
 8003bfa:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003bfc:	4401      	add	r1, r0
 8003bfe:	4628      	mov	r0, r5
 8003c00:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 8003c02:	6923      	ldr	r3, [r4, #16]
 8003c04:	6a62      	ldr	r2, [r4, #36]	@ 0x24
                            stream.skip_frames = 0;
 8003c06:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
                            stream.frameCount += stream.skip_frames;
 8003c0a:	4413      	add	r3, r2
 8003c0c:	6123      	str	r3, [r4, #16]
 8003c0e:	e7cf      	b.n	8003bb0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
 8003c10:	2001      	movs	r0, #1
 8003c12:	e7e3      	b.n	8003bdc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x70>

08003c14 <videoTaskFunc>:
    }
}

extern "C" void videoTaskFunc(void* argument)
{
    videoController.decoderTaskEntry();
 8003c14:	4801      	ldr	r0, [pc, #4]	@ (8003c1c <videoTaskFunc+0x8>)
{
 8003c16:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 8003c18:	f7ff ffa8 	bl	8003b6c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>
 8003c1c:	2400c2d0 	.word	0x2400c2d0

08003c20 <_GLOBAL__sub_I_mjpegdecoder1>:
}
 8003c20:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 8003c22:	4814      	ldr	r0, [pc, #80]	@ (8003c74 <_GLOBAL__sub_I_mjpegdecoder1+0x54>)
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003c24:	2500      	movs	r5, #0
 8003c26:	f7fe fbed 	bl	8002404 <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003c2a:	4c13      	ldr	r4, [pc, #76]	@ (8003c78 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
 8003c2c:	4b13      	ldr	r3, [pc, #76]	@ (8003c7c <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
        semDecode = SEM_CREATE(); // Binary semaphore
 8003c2e:	462a      	mov	r2, r5
 8003c30:	4629      	mov	r1, r5
 8003c32:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003c34:	6023      	str	r3, [r4, #0]
 8003c36:	f44f 7380 	mov.w	r3, #256	@ 0x100
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003c3a:	63a5      	str	r5, [r4, #56]	@ 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003c3c:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003c3e:	85a3      	strh	r3, [r4, #44]	@ 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003c40:	f884 503e 	strb.w	r5, [r4, #62]	@ 0x3e
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 8003c44:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003c48:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003c4c:	e9c4 5510 	strd	r5, r5, [r4, #64]	@ 0x40
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 8003c50:	e9c4 5501 	strd	r5, r5, [r4, #4]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003c54:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8003c58:	e9c4 5505 	strd	r5, r5, [r4, #20]
            seek_to_frame(0), skip_frames(0),
 8003c5c:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003c60:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 8003c64:	f00a fa9c 	bl	800e1a0 <osSemaphoreNew>
 8003c68:	6420      	str	r0, [r4, #64]	@ 0x40
        mutexBuffers = MUTEX_CREATE();
 8003c6a:	4628      	mov	r0, r5
 8003c6c:	f00a fa21 	bl	800e0b2 <osMutexNew>
 8003c70:	6460      	str	r0, [r4, #68]	@ 0x44
}
 8003c72:	bd38      	pop	{r3, r4, r5, pc}
 8003c74:	2400c318 	.word	0x2400c318
 8003c78:	2400c2d0 	.word	0x2400c2d0
 8003c7c:	08027e30 	.word	0x08027e30

08003c80 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003c80:	4770      	bx	lr

08003c82 <_ZN23ApplicationFontProviderD0Ev>:
 8003c82:	b510      	push	{r4, lr}
 8003c84:	4604      	mov	r4, r0
 8003c86:	2104      	movs	r1, #4
 8003c88:	f020 ff2f 	bl	8024aea <_ZdlPvj>
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	bd10      	pop	{r4, pc}

08003c90 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 8003c90:	2901      	cmp	r1, #1
{
 8003c92:	b508      	push	{r3, lr}
    switch (typography)
 8003c94:	d006      	beq.n	8003ca4 <_ZN23ApplicationFontProvider7getFontEt+0x14>
 8003c96:	2902      	cmp	r1, #2
 8003c98:	d008      	beq.n	8003cac <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 8003c9a:	b959      	cbnz	r1, 8003cb4 <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003c9c:	f002 fef0 	bl	8006a80 <_ZN17TypedTextDatabase8getFontsEv>
 8003ca0:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 8003ca2:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003ca4:	f002 feec 	bl	8006a80 <_ZN17TypedTextDatabase8getFontsEv>
 8003ca8:	6840      	ldr	r0, [r0, #4]
 8003caa:	e7fa      	b.n	8003ca2 <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003cac:	f002 fee8 	bl	8006a80 <_ZN17TypedTextDatabase8getFontsEv>
 8003cb0:	6880      	ldr	r0, [r0, #8]
 8003cb2:	e7f6      	b.n	8003ca2 <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 8003cb4:	2000      	movs	r0, #0
 8003cb6:	e7f4      	b.n	8003ca2 <_ZN23ApplicationFontProvider7getFontEt+0x12>

08003cb8 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003cb8:	4800      	ldr	r0, [pc, #0]	@ (8003cbc <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8003cba:	4770      	bx	lr
 8003cbc:	08027e80 	.word	0x08027e80

08003cc0 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8003cc0:	200a      	movs	r0, #10
 8003cc2:	4770      	bx	lr

08003cc4 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003cc4:	b513      	push	{r0, r1, r4, lr}
 8003cc6:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8003cc8:	b151      	cbz	r1, 8003ce0 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003cca:	6803      	ldr	r3, [r0, #0]
 8003ccc:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8003cce:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8003cd0:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003cd4:	689c      	ldr	r4, [r3, #8]
 8003cd6:	f10d 0303 	add.w	r3, sp, #3
 8003cda:	47a0      	blx	r4
        return glyph;
    }
 8003cdc:	b002      	add	sp, #8
 8003cde:	bd10      	pop	{r4, pc}
            return 0;
 8003ce0:	4608      	mov	r0, r1
 8003ce2:	e7fb      	b.n	8003cdc <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08003ce4 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8003ce4:	89c0      	ldrh	r0, [r0, #14]
 8003ce6:	4770      	bx	lr

08003ce8 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8003ce8:	8a00      	ldrh	r0, [r0, #16]
 8003cea:	4770      	bx	lr

08003cec <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8003cec:	88c0      	ldrh	r0, [r0, #6]
 8003cee:	4770      	bx	lr

08003cf0 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8003cf0:	8880      	ldrh	r0, [r0, #4]
 8003cf2:	4770      	bx	lr

08003cf4 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8003cf4:	7a80      	ldrb	r0, [r0, #10]
    }
 8003cf6:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8003cfa:	4770      	bx	lr

08003cfc <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8003cfc:	7a80      	ldrb	r0, [r0, #10]
    }
 8003cfe:	09c0      	lsrs	r0, r0, #7
 8003d00:	4770      	bx	lr

08003d02 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 8003d02:	2000      	movs	r0, #0
 8003d04:	4770      	bx	lr
	...

08003d08 <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 8003d08:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8003d10 <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	00000000 	.word	0x00000000

08003d14 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8003d14:	4770      	bx	lr

08003d16 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003d16:	b510      	push	{r4, lr}
 8003d18:	4604      	mov	r4, r0
    }
 8003d1a:	2108      	movs	r1, #8
 8003d1c:	f020 fee5 	bl	8024aea <_ZdlPvj>
 8003d20:	4620      	mov	r0, r4
 8003d22:	bd10      	pop	{r4, pc}

08003d24 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8003d24:	4770      	bx	lr

08003d26 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8003d26:	4770      	bx	lr

08003d28 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8003d28:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 8003d2c:	6808      	ldr	r0, [r1, #0]
 8003d2e:	6849      	ldr	r1, [r1, #4]
 8003d30:	c303      	stmia	r3!, {r0, r1}
    }
 8003d32:	4770      	bx	lr

08003d34 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8003d34:	4770      	bx	lr

08003d36 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8003d36:	4770      	bx	lr

08003d38 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8003d38:	6041      	str	r1, [r0, #4]
    }
 8003d3a:	4770      	bx	lr

08003d3c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8003d3c:	4770      	bx	lr
	...

08003d40 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003d40:	4b06      	ldr	r3, [pc, #24]	@ (8003d5c <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8003d42:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8003d46:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8003d50:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003d54:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	080041c5 	.word	0x080041c5

08003d60 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8003d60:	2301      	movs	r3, #1
 8003d62:	7203      	strb	r3, [r0, #8]
    }
 8003d64:	4770      	bx	lr

08003d66 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
 * Screen transitioning to.
 *
 * @see Transition
 */
template <Direction templateDirection>
class SlideTransition : public Transition
 8003d66:	4770      	bx	lr

08003d68 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8003d68:	4770      	bx	lr

08003d6a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 8003d6a:	4770      	bx	lr

08003d6c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003d6c:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8003d6e:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8003d70:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8003d72:	68c2      	ldr	r2, [r0, #12]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	1054      	asrs	r4, r2, #1
 8003d78:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8003d7c:	07d2      	lsls	r2, r2, #31
 8003d7e:	bf48      	it	mi
 8003d80:	590a      	ldrmi	r2, [r1, r4]
    }
 8003d82:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8003d86:	bf48      	it	mi
 8003d88:	58d3      	ldrmi	r3, [r2, r3]
 8003d8a:	4718      	bx	r3

08003d8c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8003d8c:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8003d8e:	6840      	ldr	r0, [r0, #4]
 8003d90:	b130      	cbz	r0, 8003da0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	b91a      	cbnz	r2, 8003d9e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 8003d96:	68d8      	ldr	r0, [r3, #12]
 8003d98:	f000 0001 	and.w	r0, r0, #1
 8003d9c:	4770      	bx	lr
 8003d9e:	2001      	movs	r0, #1
    }
 8003da0:	4770      	bx	lr

08003da2 <_ZN8touchgfx12NoTransitionD0Ev>:
 8003da2:	b510      	push	{r4, lr}
 8003da4:	4604      	mov	r4, r0
 8003da6:	210c      	movs	r1, #12
 8003da8:	f020 fe9f 	bl	8024aea <_ZdlPvj>
 8003dac:	4620      	mov	r0, r4
 8003dae:	bd10      	pop	{r4, pc}

08003db0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003db0:	b510      	push	{r4, lr}
 8003db2:	4604      	mov	r4, r0
 8003db4:	2110      	movs	r1, #16
 8003db6:	f020 fe98 	bl	8024aea <_ZdlPvj>
 8003dba:	4620      	mov	r0, r4
 8003dbc:	bd10      	pop	{r4, pc}

08003dbe <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8003dbe:	b510      	push	{r4, lr}
 8003dc0:	4604      	mov	r4, r0
 8003dc2:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8003dc6:	f020 fe90 	bl	8024aea <_ZdlPvj>
 8003dca:	4620      	mov	r0, r4
 8003dcc:	bd10      	pop	{r4, pc}

08003dce <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
 8003dce:	b510      	push	{r4, lr}
 8003dd0:	4604      	mov	r4, r0
 8003dd2:	2140      	movs	r1, #64	@ 0x40
 8003dd4:	f020 fe89 	bl	8024aea <_ZdlPvj>
 8003dd8:	4620      	mov	r0, r4
 8003dda:	bd10      	pop	{r4, pc}

08003ddc <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8003ddc:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 8003dde:	f012 fe99 	bl	8016b14 <_ZN8touchgfx11Application11getInstanceEv>
 8003de2:	6803      	ldr	r3, [r0, #0]
    }
 8003de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 8003de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dea:	4718      	bx	r3

08003dec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
        screenContainer->invalidate();
    }

    virtual void tearDown()
    {
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 8003dec:	4b05      	ldr	r3, [pc, #20]	@ (8003e04 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x18>)
    virtual void tearDown()
 8003dee:	4601      	mov	r1, r0
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	b12b      	cbz	r3, 8003e00 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x14>
 8003df4:	6840      	ldr	r0, [r0, #4]
 8003df6:	b118      	cbz	r0, 8003e00 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x14>
        {
            screenContainer->remove(snapshot);
 8003df8:	6803      	ldr	r3, [r0, #0]
 8003dfa:	310c      	adds	r1, #12
 8003dfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003dfe:	4718      	bx	r3
        }
    }
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	24026417 	.word	0x24026417

08003e08 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:

    virtual void init()
    {
        Transition::init();

        if (done)
 8003e08:	7a03      	ldrb	r3, [r0, #8]
    virtual void init()
 8003e0a:	b570      	push	{r4, r5, r6, lr}
 8003e0c:	4605      	mov	r5, r0
        if (done)
 8003e0e:	b9bb      	cbnz	r3, 8003e40 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x38>
        {
            return;
        }

        // Move snapshot and its children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
 8003e10:	6840      	ldr	r0, [r0, #4]
 8003e12:	6803      	ldr	r3, [r0, #0]
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	4798      	blx	r3
 8003e18:	4604      	mov	r4, r0
        while (d)
 8003e1a:	b93c      	cbnz	r4, 8003e2c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x24>
            }

            d = d->getNextSibling();
        }

        screenContainer->add(snapshot);
 8003e1c:	6868      	ldr	r0, [r5, #4]
 8003e1e:	f105 010c 	add.w	r1, r5, #12
 8003e22:	6803      	ldr	r3, [r0, #0]
    }
 8003e24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->add(snapshot);
 8003e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e2a:	4718      	bx	r3
                d->setX(d->getX() - targetValue);
 8003e2c:	88a1      	ldrh	r1, [r4, #4]
 8003e2e:	4620      	mov	r0, r4
 8003e30:	8f6b      	ldrh	r3, [r5, #58]	@ 0x3a
 8003e32:	1ac9      	subs	r1, r1, r3
 8003e34:	6823      	ldr	r3, [r4, #0]
 8003e36:	b209      	sxth	r1, r1
 8003e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e3a:	4798      	blx	r3
        return nextSibling;
 8003e3c:	69a4      	ldr	r4, [r4, #24]
 8003e3e:	e7ec      	b.n	8003e1a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x12>
    }
 8003e40:	bd70      	pop	{r4, r5, r6, pc}

08003e42 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8003e42:	b510      	push	{r4, lr}
 8003e44:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8003e46:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8003e4a:	b158      	cbz	r0, 8003e64 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8003e4c:	6803      	ldr	r3, [r0, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	4798      	blx	r3
 8003e52:	b138      	cbz	r0, 8003e64 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8003e54:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8003e58:	6803      	ldr	r3, [r0, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 8003e64:	bd10      	pop	{r4, pc}

08003e66 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8003e66:	b570      	push	{r4, r5, r6, lr}
 8003e68:	4604      	mov	r4, r0
        animationCounter++;
 8003e6a:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 8003e6e:	3001      	adds	r0, #1
        if (animationCounter > animationSteps)
 8003e70:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
        animationCounter++;
 8003e74:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
 8003e76:	4298      	cmp	r0, r3
        animationCounter++;
 8003e78:	f884 0039 	strb.w	r0, [r4, #57]	@ 0x39
        if (animationCounter > animationSteps)
 8003e7c:	d905      	bls.n	8003e8a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x24>
            done = true;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	7223      	strb	r3, [r4, #8]
            animationCounter = 0;
 8003e82:	2300      	movs	r3, #0
 8003e84:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
    }
 8003e88:	bd70      	pop	{r4, r5, r6, pc}
        int16_t calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8003e8a:	f9b4 203a 	ldrsh.w	r2, [r4, #58]	@ 0x3a
 8003e8e:	2100      	movs	r1, #0
 8003e90:	f014 ff0c 	bl	8018cac <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
 8003e94:	07c3      	lsls	r3, r0, #31
 8003e96:	d506      	bpl.n	8003ea6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x40>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8003e98:	2800      	cmp	r0, #0
 8003e9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e9e:	bfc8      	it	gt
 8003ea0:	2301      	movgt	r3, #1
 8003ea2:	4418      	add	r0, r3
 8003ea4:	b200      	sxth	r0, r0
            relativeValue = calculatedValue - snapshot.getX();
 8003ea6:	8a23      	ldrh	r3, [r4, #16]
 8003ea8:	1ac0      	subs	r0, r0, r3
 8003eaa:	87a0      	strh	r0, [r4, #60]	@ 0x3c
        Drawable* d = screenContainer->getFirstChild();
 8003eac:	6860      	ldr	r0, [r4, #4]
 8003eae:	6803      	ldr	r3, [r0, #0]
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	4798      	blx	r3
 8003eb4:	4605      	mov	r5, r0
        while (d)
 8003eb6:	b92d      	cbnz	r5, 8003ec4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x5e>
 8003eb8:	6860      	ldr	r0, [r4, #4]
        screenContainer->invalidate();
 8003eba:	6803      	ldr	r3, [r0, #0]
    }
 8003ebc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->invalidate();
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	4718      	bx	r3
                d->setX(d->getX() + relativeValue);
 8003ec4:	88a9      	ldrh	r1, [r5, #4]
 8003ec6:	4628      	mov	r0, r5
 8003ec8:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
 8003eca:	4419      	add	r1, r3
 8003ecc:	682b      	ldr	r3, [r5, #0]
 8003ece:	b209      	sxth	r1, r1
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed2:	4798      	blx	r3
 8003ed4:	69ad      	ldr	r5, [r5, #24]
 8003ed6:	e7ee      	b.n	8003eb6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x50>

08003ed8 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoWaitingScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoWaitingScreenScreenNoTransitionImpl()
{
 8003ed8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<WaitingScreenView, WaitingScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003edc:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8003ee0:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003ee2:	68b0      	ldr	r0, [r6, #8]
 8003ee4:	6803      	ldr	r3, [r0, #0]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	4798      	blx	r3
 8003eea:	f5b0 7f18 	cmp.w	r0, #608	@ 0x260
 8003eee:	d205      	bcs.n	8003efc <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x24>
 8003ef0:	4b44      	ldr	r3, [pc, #272]	@ (8004004 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x12c>)
 8003ef2:	21a3      	movs	r1, #163	@ 0xa3
 8003ef4:	4a44      	ldr	r2, [pc, #272]	@ (8004008 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003ef6:	4845      	ldr	r0, [pc, #276]	@ (800400c <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x134>)
 8003ef8:	f021 f96e 	bl	80251d8 <__assert_func>
 8003efc:	6870      	ldr	r0, [r6, #4]
 8003efe:	6803      	ldr	r3, [r0, #0]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	4798      	blx	r3
 8003f04:	280f      	cmp	r0, #15
 8003f06:	d803      	bhi.n	8003f10 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x38>
 8003f08:	4b41      	ldr	r3, [pc, #260]	@ (8004010 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x138>)
 8003f0a:	21a4      	movs	r1, #164	@ 0xa4
 8003f0c:	4a3e      	ldr	r2, [pc, #248]	@ (8004008 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x130>)
 8003f0e:	e7f2      	b.n	8003ef6 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003f10:	68f0      	ldr	r0, [r6, #12]
 8003f12:	6803      	ldr	r3, [r0, #0]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	4798      	blx	r3
 8003f18:	280b      	cmp	r0, #11
 8003f1a:	d803      	bhi.n	8003f24 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x4c>
 8003f1c:	4b3d      	ldr	r3, [pc, #244]	@ (8004014 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x13c>)
 8003f1e:	21a5      	movs	r1, #165	@ 0xa5
 8003f20:	4a39      	ldr	r2, [pc, #228]	@ (8004008 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x130>)
 8003f22:	e7e8      	b.n	8003ef6 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 8003f24:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 800401c <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 8003f28:	f012 fdf4 	bl	8016b14 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8003f2c:	3004      	adds	r0, #4
 8003f2e:	f012 fe2f 	bl	8016b90 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8003f32:	f8d9 0000 	ldr.w	r0, [r9]
 8003f36:	b110      	cbz	r0, 8003f3e <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8003f38:	6803      	ldr	r3, [r0, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	4798      	blx	r3
    if (*currentTrans)
 8003f3e:	f8d9 0000 	ldr.w	r0, [r9]
 8003f42:	b110      	cbz	r0, 8003f4a <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 8003f44:	6803      	ldr	r3, [r0, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4798      	blx	r3
    if (*currentScreen)
 8003f4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004020 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x148>
 8003f4e:	f8d8 0000 	ldr.w	r0, [r8]
 8003f52:	b110      	cbz	r0, 8003f5a <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 8003f54:	6803      	ldr	r3, [r0, #0]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	4798      	blx	r3
    if (*currentPresenter)
 8003f5a:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003f5e:	b110      	cbz	r0, 8003f66 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8003f60:	6803      	ldr	r3, [r0, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	4798      	blx	r3
    if (*currentScreen)
 8003f66:	f8d8 0000 	ldr.w	r0, [r8]
 8003f6a:	b110      	cbz	r0, 8003f72 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8003f6c:	6803      	ldr	r3, [r0, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4798      	blx	r3
    if (*currentPresenter)
 8003f72:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003f76:	b110      	cbz	r0, 8003f7e <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 8003f78:	6803      	ldr	r3, [r0, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003f7e:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8003f80:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8003f82:	f04f 0b00 	mov.w	fp, #0
 8003f86:	6803      	ldr	r3, [r0, #0]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8a:	4798      	blx	r3
 8003f8c:	4b22      	ldr	r3, [pc, #136]	@ (8004018 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x140>)
 8003f8e:	4604      	mov	r4, r0
 8003f90:	f8c0 b004 	str.w	fp, [r0, #4]
 8003f94:	f880 b008 	strb.w	fp, [r0, #8]
 8003f98:	4659      	mov	r1, fp
 8003f9a:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003f9c:	68b0      	ldr	r0, [r6, #8]
 8003f9e:	6803      	ldr	r3, [r0, #0]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa2:	4798      	blx	r3
 8003fa4:	4605      	mov	r5, r0
 8003fa6:	f002 ffd9 	bl	8006f5c <_ZN17WaitingScreenViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003faa:	6870      	ldr	r0, [r6, #4]
 8003fac:	4659      	mov	r1, fp
 8003fae:	6803      	ldr	r3, [r0, #0]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb2:	4798      	blx	r3
 8003fb4:	4606      	mov	r6, r0
 8003fb6:	4629      	mov	r1, r5
 8003fb8:	f002 ffae 	bl	8006f18 <_ZN22WaitingScreenPresenterC1ER17WaitingScreenView>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 8003fbc:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8003fbe:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8003fc2:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8003fc4:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8003fc8:	f8c8 5000 	str.w	r5, [r8]
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8003fcc:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003fd0:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8003fd2:	f8c6 a008 	str.w	sl, [r6, #8]
 8003fd6:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8003fd8:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8003fda:	4798      	blx	r3
    newPresenter->activate();
 8003fdc:	6833      	ldr	r3, [r6, #0]
 8003fde:	4630      	mov	r0, r6
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003fe4:	4621      	mov	r1, r4
 8003fe6:	4628      	mov	r0, r5
 8003fe8:	f014 fe5a 	bl	8018ca0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003fec:	6823      	ldr	r3, [r4, #0]
 8003fee:	4620      	mov	r0, r4
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	4798      	blx	r3
    newTransition->invalidate();
 8003ff4:	6823      	ldr	r3, [r4, #0]
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	695b      	ldr	r3, [r3, #20]
}
 8003ffa:	b001      	add	sp, #4
 8003ffc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004000:	4718      	bx	r3
 8004002:	bf00      	nop
 8004004:	08027f58 	.word	0x08027f58
 8004008:	08027fe6 	.word	0x08027fe6
 800400c:	080280c4 	.word	0x080280c4
 8004010:	08028119 	.word	0x08028119
 8004014:	080281bc 	.word	0x080281bc
 8004018:	0802848c 	.word	0x0802848c
 800401c:	24026460 	.word	0x24026460
 8004020:	2402645c 	.word	0x2402645c

08004024 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv>:
{
 8004024:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004028:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 800402c:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800402e:	68b0      	ldr	r0, [r6, #8]
 8004030:	6803      	ldr	r3, [r0, #0]
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	4798      	blx	r3
 8004036:	f241 3303 	movw	r3, #4867	@ 0x1303
 800403a:	4298      	cmp	r0, r3
 800403c:	d805      	bhi.n	800404a <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x26>
 800403e:	4b56      	ldr	r3, [pc, #344]	@ (8004198 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x174>)
 8004040:	21a3      	movs	r1, #163	@ 0xa3
 8004042:	4a56      	ldr	r2, [pc, #344]	@ (800419c <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x178>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004044:	4856      	ldr	r0, [pc, #344]	@ (80041a0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x17c>)
 8004046:	f021 f8c7 	bl	80251d8 <__assert_func>
 800404a:	6870      	ldr	r0, [r6, #4]
 800404c:	6803      	ldr	r3, [r0, #0]
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	4798      	blx	r3
 8004052:	280f      	cmp	r0, #15
 8004054:	d803      	bhi.n	800405e <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x3a>
 8004056:	4b53      	ldr	r3, [pc, #332]	@ (80041a4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x180>)
 8004058:	21a4      	movs	r1, #164	@ 0xa4
 800405a:	4a50      	ldr	r2, [pc, #320]	@ (800419c <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x178>)
 800405c:	e7f2      	b.n	8004044 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800405e:	68f0      	ldr	r0, [r6, #12]
 8004060:	6803      	ldr	r3, [r0, #0]
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	4798      	blx	r3
 8004066:	283f      	cmp	r0, #63	@ 0x3f
 8004068:	d803      	bhi.n	8004072 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x4e>
 800406a:	4b4f      	ldr	r3, [pc, #316]	@ (80041a8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x184>)
 800406c:	21a5      	movs	r1, #165	@ 0xa5
 800406e:	4a4b      	ldr	r2, [pc, #300]	@ (800419c <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x178>)
 8004070:	e7e8      	b.n	8004044 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x20>
    if (*currentTrans)
 8004072:	f8df 9148 	ldr.w	r9, [pc, #328]	@ 80041bc <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x198>
    Application::getInstance()->clearAllTimerWidgets();
 8004076:	f012 fd4d 	bl	8016b14 <_ZN8touchgfx11Application11getInstanceEv>
 800407a:	3004      	adds	r0, #4
 800407c:	f012 fd88 	bl	8016b90 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8004080:	f8d9 0000 	ldr.w	r0, [r9]
 8004084:	b110      	cbz	r0, 800408c <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x68>
        (*currentTrans)->tearDown();
 8004086:	6803      	ldr	r3, [r0, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	4798      	blx	r3
    if (*currentTrans)
 800408c:	f8d9 0000 	ldr.w	r0, [r9]
 8004090:	b110      	cbz	r0, 8004098 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x74>
        (*currentTrans)->~Transition();
 8004092:	6803      	ldr	r3, [r0, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4798      	blx	r3
    if (*currentScreen)
 8004098:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 80041c0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x19c>
 800409c:	f8d8 0000 	ldr.w	r0, [r8]
 80040a0:	b110      	cbz	r0, 80040a8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 80040a2:	6803      	ldr	r3, [r0, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	4798      	blx	r3
    if (*currentPresenter)
 80040a8:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80040ac:	b110      	cbz	r0, 80040b4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x90>
        (*currentPresenter)->deactivate();
 80040ae:	6803      	ldr	r3, [r0, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	4798      	blx	r3
    if (*currentScreen)
 80040b4:	f8d8 0000 	ldr.w	r0, [r8]
 80040b8:	b110      	cbz	r0, 80040c0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x9c>
        (*currentScreen)->~Screen();
 80040ba:	6803      	ldr	r3, [r0, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4798      	blx	r3
    if (*currentPresenter)
 80040c0:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80040c4:	b110      	cbz	r0, 80040cc <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 80040c6:	6803      	ldr	r3, [r0, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80040cc:	68f0      	ldr	r0, [r6, #12]
 80040ce:	2100      	movs	r1, #0
 80040d0:	6803      	ldr	r3, [r0, #0]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d4:	4798      	blx	r3
 80040d6:	2300      	movs	r3, #0
          relativeValue(0)
 80040d8:	4a34      	ldr	r2, [pc, #208]	@ (80041ac <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x188>)
 80040da:	4605      	mov	r5, r0
 80040dc:	6043      	str	r3, [r0, #4]
 80040de:	4604      	mov	r4, r0
 80040e0:	7203      	strb	r3, [r0, #8]
 80040e2:	f845 2b0c 	str.w	r2, [r5], #12
          snapshot(),
 80040e6:	4628      	mov	r0, r5
 80040e8:	f00f fa46 	bl	8013578 <_ZN8touchgfx14SnapshotWidgetC1Ev>
          animationSteps(transitionSteps),
 80040ec:	2214      	movs	r2, #20
          relativeValue(0)
 80040ee:	2300      	movs	r3, #0
          animationSteps(transitionSteps),
 80040f0:	8722      	strh	r2, [r4, #56]	@ 0x38
        if (!HAL::USE_ANIMATION_STORAGE)
 80040f2:	4a2f      	ldr	r2, [pc, #188]	@ (80041b0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x18c>)
          relativeValue(0)
 80040f4:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        if (!HAL::USE_ANIMATION_STORAGE)
 80040f6:	7812      	ldrb	r2, [r2, #0]
 80040f8:	2a00      	cmp	r2, #0
 80040fa:	d135      	bne.n	8004168 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x144>
            done = true;
 80040fc:	2301      	movs	r3, #1
 80040fe:	7223      	strb	r3, [r4, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004100:	68b0      	ldr	r0, [r6, #8]
 8004102:	2100      	movs	r1, #0
 8004104:	6803      	ldr	r3, [r0, #0]
 8004106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004108:	4798      	blx	r3
 800410a:	4605      	mov	r5, r0
 800410c:	f002 feea 	bl	8006ee4 <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004110:	6870      	ldr	r0, [r6, #4]
 8004112:	2100      	movs	r1, #0
 8004114:	6803      	ldr	r3, [r0, #0]
 8004116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004118:	4798      	blx	r3
 800411a:	4606      	mov	r6, r0
 800411c:	4629      	mov	r1, r5
 800411e:	f002 feb3 	bl	8006e88 <_ZN16Screen2PresenterC1ER11Screen2View>
    model->bind(newPresenter);
 8004122:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8004124:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8004128:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 800412a:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 800412e:	f8c8 5000 	str.w	r5, [r8]
 8004132:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8004136:	682b      	ldr	r3, [r5, #0]
 8004138:	f8c6 a008 	str.w	sl, [r6, #8]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8004140:	4798      	blx	r3
    newPresenter->activate();
 8004142:	6833      	ldr	r3, [r6, #0]
 8004144:	4630      	mov	r0, r6
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800414a:	4621      	mov	r1, r4
 800414c:	4628      	mov	r0, r5
 800414e:	f014 fda7 	bl	8018ca0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004152:	6823      	ldr	r3, [r4, #0]
 8004154:	4620      	mov	r0, r4
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	4798      	blx	r3
    newTransition->invalidate();
 800415a:	6823      	ldr	r3, [r4, #0]
 800415c:	4620      	mov	r0, r4
 800415e:	695b      	ldr	r3, [r3, #20]
}
 8004160:	b001      	add	sp, #4
 8004162:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004166:	4718      	bx	r3
        snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8004168:	4912      	ldr	r1, [pc, #72]	@ (80041b4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x190>)
        setWidth(width);
 800416a:	4628      	mov	r0, r5
 800416c:	4a12      	ldr	r2, [pc, #72]	@ (80041b8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x194>)
 800416e:	f9b1 b000 	ldrsh.w	fp, [r1]
        setX(x);
 8004172:	68e1      	ldr	r1, [r4, #12]
        rect.x = x;
 8004174:	6123      	str	r3, [r4, #16]
        setWidth(width);
 8004176:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 8004178:	f9b2 1000 	ldrsh.w	r1, [r2]
 800417c:	4798      	blx	r3
        setHeight(height);
 800417e:	68e3      	ldr	r3, [r4, #12]
 8004180:	4659      	mov	r1, fp
 8004182:	4628      	mov	r0, r5
 8004184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004186:	4798      	blx	r3
        snapshot.makeSnapshot();
 8004188:	4628      	mov	r0, r5
 800418a:	f00f f970 	bl	801346e <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>
            targetValue = -HAL::DISPLAY_WIDTH;
 800418e:	4a0a      	ldr	r2, [pc, #40]	@ (80041b8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x194>)
 8004190:	8813      	ldrh	r3, [r2, #0]
 8004192:	425b      	negs	r3, r3
 8004194:	8763      	strh	r3, [r4, #58]	@ 0x3a
            break;
 8004196:	e7b3      	b.n	8004100 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0xdc>
 8004198:	08027f58 	.word	0x08027f58
 800419c:	0802825f 	.word	0x0802825f
 80041a0:	080280c4 	.word	0x080280c4
 80041a4:	08028119 	.word	0x08028119
 80041a8:	080281bc 	.word	0x080281bc
 80041ac:	080284b0 	.word	0x080284b0
 80041b0:	24026417 	.word	0x24026417
 80041b4:	2402640e 	.word	0x2402640e
 80041b8:	2402640c 	.word	0x2402640c
 80041bc:	24026460 	.word	0x24026460
 80041c0:	2402645c 	.word	0x2402645c

080041c4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
{
 80041c4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80041c8:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 80041cc:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80041ce:	68b0      	ldr	r0, [r6, #8]
 80041d0:	6803      	ldr	r3, [r0, #0]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	4798      	blx	r3
 80041d6:	f5b0 7fbe 	cmp.w	r0, #380	@ 0x17c
 80041da:	d205      	bcs.n	80041e8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x24>
 80041dc:	4b44      	ldr	r3, [pc, #272]	@ (80042f0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 80041de:	21a3      	movs	r1, #163	@ 0xa3
 80041e0:	4a44      	ldr	r2, [pc, #272]	@ (80042f4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80041e2:	4845      	ldr	r0, [pc, #276]	@ (80042f8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 80041e4:	f020 fff8 	bl	80251d8 <__assert_func>
 80041e8:	6870      	ldr	r0, [r6, #4]
 80041ea:	6803      	ldr	r3, [r0, #0]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	4798      	blx	r3
 80041f0:	280f      	cmp	r0, #15
 80041f2:	d803      	bhi.n	80041fc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x38>
 80041f4:	4b41      	ldr	r3, [pc, #260]	@ (80042fc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 80041f6:	21a4      	movs	r1, #164	@ 0xa4
 80041f8:	4a3e      	ldr	r2, [pc, #248]	@ (80042f4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 80041fa:	e7f2      	b.n	80041e2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80041fc:	68f0      	ldr	r0, [r6, #12]
 80041fe:	6803      	ldr	r3, [r0, #0]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	4798      	blx	r3
 8004204:	280b      	cmp	r0, #11
 8004206:	d803      	bhi.n	8004210 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4c>
 8004208:	4b3d      	ldr	r3, [pc, #244]	@ (8004300 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 800420a:	21a5      	movs	r1, #165	@ 0xa5
 800420c:	4a39      	ldr	r2, [pc, #228]	@ (80042f4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 800420e:	e7e8      	b.n	80041e2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 8004210:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8004308 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 8004214:	f012 fc7e 	bl	8016b14 <_ZN8touchgfx11Application11getInstanceEv>
 8004218:	3004      	adds	r0, #4
 800421a:	f012 fcb9 	bl	8016b90 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 800421e:	f8d9 0000 	ldr.w	r0, [r9]
 8004222:	b110      	cbz	r0, 800422a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8004224:	6803      	ldr	r3, [r0, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	4798      	blx	r3
    if (*currentTrans)
 800422a:	f8d9 0000 	ldr.w	r0, [r9]
 800422e:	b110      	cbz	r0, 8004236 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 8004230:	6803      	ldr	r3, [r0, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4798      	blx	r3
    if (*currentScreen)
 8004236:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800430c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
 800423a:	f8d8 0000 	ldr.w	r0, [r8]
 800423e:	b110      	cbz	r0, 8004246 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 8004240:	6803      	ldr	r3, [r0, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	4798      	blx	r3
    if (*currentPresenter)
 8004246:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800424a:	b110      	cbz	r0, 8004252 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 800424c:	6803      	ldr	r3, [r0, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	4798      	blx	r3
    if (*currentScreen)
 8004252:	f8d8 0000 	ldr.w	r0, [r8]
 8004256:	b110      	cbz	r0, 800425e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8004258:	6803      	ldr	r3, [r0, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4798      	blx	r3
    if (*currentPresenter)
 800425e:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8004262:	b110      	cbz	r0, 800426a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 8004264:	6803      	ldr	r3, [r0, #0]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800426a:	68f0      	ldr	r0, [r6, #12]
 800426c:	2100      	movs	r1, #0
 800426e:	f04f 0b00 	mov.w	fp, #0
 8004272:	6803      	ldr	r3, [r0, #0]
 8004274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004276:	4798      	blx	r3
 8004278:	4b22      	ldr	r3, [pc, #136]	@ (8004304 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 800427a:	4604      	mov	r4, r0
 800427c:	f8c0 b004 	str.w	fp, [r0, #4]
 8004280:	f880 b008 	strb.w	fp, [r0, #8]
 8004284:	4659      	mov	r1, fp
 8004286:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004288:	68b0      	ldr	r0, [r6, #8]
 800428a:	6803      	ldr	r3, [r0, #0]
 800428c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428e:	4798      	blx	r3
 8004290:	4605      	mov	r5, r0
 8004292:	f002 fddf 	bl	8006e54 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004296:	6870      	ldr	r0, [r6, #4]
 8004298:	4659      	mov	r1, fp
 800429a:	6803      	ldr	r3, [r0, #0]
 800429c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429e:	4798      	blx	r3
 80042a0:	4606      	mov	r6, r0
 80042a2:	4629      	mov	r1, r5
 80042a4:	f002 fdb4 	bl	8006e10 <_ZN16Screen1PresenterC1ER11Screen1View>
    model->bind(newPresenter);
 80042a8:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 80042aa:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 80042ae:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 80042b0:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 80042b4:	f8c8 5000 	str.w	r5, [r8]
 80042b8:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 80042bc:	682b      	ldr	r3, [r5, #0]
 80042be:	f8c6 a008 	str.w	sl, [r6, #8]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	63ee      	str	r6, [r5, #60]	@ 0x3c
 80042c6:	4798      	blx	r3
    newPresenter->activate();
 80042c8:	6833      	ldr	r3, [r6, #0]
 80042ca:	4630      	mov	r0, r6
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80042d0:	4621      	mov	r1, r4
 80042d2:	4628      	mov	r0, r5
 80042d4:	f014 fce4 	bl	8018ca0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80042d8:	6823      	ldr	r3, [r4, #0]
 80042da:	4620      	mov	r0, r4
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	4798      	blx	r3
    newTransition->invalidate();
 80042e0:	6823      	ldr	r3, [r4, #0]
 80042e2:	4620      	mov	r0, r4
 80042e4:	695b      	ldr	r3, [r3, #20]
}
 80042e6:	b001      	add	sp, #4
 80042e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ec:	4718      	bx	r3
 80042ee:	bf00      	nop
 80042f0:	08027f58 	.word	0x08027f58
 80042f4:	08028344 	.word	0x08028344
 80042f8:	080280c4 	.word	0x080280c4
 80042fc:	08028119 	.word	0x08028119
 8004300:	080281bc 	.word	0x080281bc
 8004304:	0802848c 	.word	0x0802848c
 8004308:	24026460 	.word	0x24026460
 800430c:	2402645c 	.word	0x2402645c

08004310 <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8004310:	4b04      	ldr	r3, [pc, #16]	@ (8004324 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8004318:	b10a      	cbz	r2, 800431e <_ZN8touchgfx3HAL3lcdEv+0xe>
 800431a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800431c:	b900      	cbnz	r0, 8004320 <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 800431e:	6898      	ldr	r0, [r3, #8]
    }
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	24026418 	.word	0x24026418

08004328 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8004328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800432a:	4617      	mov	r7, r2
 800432c:	4604      	mov	r4, r0
 800432e:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8004330:	f012 fd00 	bl	8016d34 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8004334:	4b12      	ldr	r3, [pc, #72]	@ (8004380 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
        : currentPresenter(0),
 8004336:	2500      	movs	r5, #0
        instance = this;
 8004338:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800433a:	4629      	mov	r1, r5
      model(m)
 800433c:	4b11      	ldr	r3, [pc, #68]	@ (8004384 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 800433e:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 8004340:	4b11      	ldr	r3, [pc, #68]	@ (8004388 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 8004342:	e9c4 3551 	strd	r3, r5, [r4, #324]	@ 0x144
        return instance;
 8004346:	4b11      	ldr	r3, [pc, #68]	@ (800438c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8004348:	6818      	ldr	r0, [r3, #0]
 800434a:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800434e:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8004350:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
 8004354:	689b      	ldr	r3, [r3, #8]
      model(m)
 8004356:	e9c4 7655 	strd	r7, r6, [r4, #340]	@ 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800435a:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800435c:	4628      	mov	r0, r5
 800435e:	f002 fb43 	bl	80069e8 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8004362:	f7ff ffd5 	bl	8004310 <_ZN8touchgfx3HAL3lcdEv>
 8004366:	f01a fd54 	bl	801ee12 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 800436a:	f7ff ffd1 	bl	8004310 <_ZN8touchgfx3HAL3lcdEv>
 800436e:	f01a fdc7 	bl	801ef00 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 8004372:	f7ff ffcd 	bl	8004310 <_ZN8touchgfx3HAL3lcdEv>
 8004376:	f01a fdcf 	bl	801ef18 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>
}
 800437a:	4620      	mov	r0, r4
 800437c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800437e:	bf00      	nop
 8004380:	2402646c 	.word	0x2402646c
 8004384:	08028438 	.word	0x08028438
 8004388:	08028420 	.word	0x08028420
 800438c:	24026418 	.word	0x24026418

08004390 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004390:	4b06      	ldr	r3, [pc, #24]	@ (80043ac <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 8004392:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8004396:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 800439a:	2300      	movs	r3, #0
 800439c:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 80043a0:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 80043a4:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	080041c5 	.word	0x080041c5

080043b0 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv>:
 80043b0:	4b06      	ldr	r3, [pc, #24]	@ (80043cc <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv+0x1c>)
 80043b2:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 80043b6:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 80043ba:	2300      	movs	r3, #0
 80043bc:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 80043c0:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 80043c4:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	08004025 	.word	0x08004025

080043d0 <_ZN23FrontendApplicationBase35gotoWaitingScreenScreenNoTransitionEv>:
 80043d0:	4b06      	ldr	r3, [pc, #24]	@ (80043ec <_ZN23FrontendApplicationBase35gotoWaitingScreenScreenNoTransitionEv+0x1c>)
 80043d2:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 80043d6:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 80043da:	2300      	movs	r3, #0
 80043dc:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 80043e0:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 80043e4:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	08003ed9 	.word	0x08003ed9

080043f0 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 80043f0:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80043f2:	4770      	bx	lr

080043f4 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 80043f4:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80043f6:	4770      	bx	lr

080043f8 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 80043f8:	4770      	bx	lr

080043fa <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80043fa:	888b      	ldrh	r3, [r1, #4]
 80043fc:	69c0      	ldr	r0, [r0, #28]
 80043fe:	0adb      	lsrs	r3, r3, #11
 8004400:	680a      	ldr	r2, [r1, #0]
 8004402:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8004406:	4410      	add	r0, r2
 8004408:	4770      	bx	lr

0800440a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800440a:	b510      	push	{r4, lr}
 800440c:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 800440e:	b1ba      	cbz	r2, 8004440 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8004410:	7b10      	ldrb	r0, [r2, #12]
 8004412:	b168      	cbz	r0, 8004430 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8004414:	7b53      	ldrb	r3, [r2, #13]
 8004416:	7ad2      	ldrb	r2, [r2, #11]
 8004418:	021b      	lsls	r3, r3, #8
 800441a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800441e:	431a      	orrs	r2, r3
 8004420:	6a23      	ldr	r3, [r4, #32]
 8004422:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 8004426:	881a      	ldrh	r2, [r3, #0]
 8004428:	428a      	cmp	r2, r1
 800442a:	d102      	bne.n	8004432 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 800442c:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 8004430:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8004432:	d805      	bhi.n	8004440 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8004434:	3801      	subs	r0, #1
 8004436:	3304      	adds	r3, #4
 8004438:	b280      	uxth	r0, r0
 800443a:	2800      	cmp	r0, #0
 800443c:	d1f3      	bne.n	8004426 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800443e:	e7f7      	b.n	8004430 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8004440:	2000      	movs	r0, #0
 8004442:	e7f5      	b.n	8004430 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08004444 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8004444:	b510      	push	{r4, lr}
 8004446:	4604      	mov	r4, r0
 8004448:	212c      	movs	r1, #44	@ 0x2c
 800444a:	f020 fb4e 	bl	8024aea <_ZdlPvj>
 800444e:	4620      	mov	r0, r4
 8004450:	bd10      	pop	{r4, pc}
	...

08004454 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8004454:	b530      	push	{r4, r5, lr}
 8004456:	b08b      	sub	sp, #44	@ 0x2c
 8004458:	4604      	mov	r4, r0
      arabicTable(formsTable)
 800445a:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 800445e:	9508      	str	r5, [sp, #32]
 8004460:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8004464:	9507      	str	r5, [sp, #28]
 8004466:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 800446a:	9506      	str	r5, [sp, #24]
 800446c:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 8004470:	9505      	str	r5, [sp, #20]
 8004472:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8004476:	9504      	str	r5, [sp, #16]
 8004478:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 800447c:	9503      	str	r5, [sp, #12]
 800447e:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 8004482:	9502      	str	r5, [sp, #8]
 8004484:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8004488:	9501      	str	r5, [sp, #4]
 800448a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 800448e:	9500      	str	r5, [sp, #0]
 8004490:	f013 ffd4 	bl	801843c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8004494:	4b06      	ldr	r3, [pc, #24]	@ (80044b0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 8004496:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8004498:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 800449a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800449c:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 800449e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80044a0:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 80044a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80044a4:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 80044a6:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80044a8:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 80044aa:	b00b      	add	sp, #44	@ 0x2c
 80044ac:	bd30      	pop	{r4, r5, pc}
 80044ae:	bf00      	nop
 80044b0:	080284d4 	.word	0x080284d4

080044b4 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 80044b4:	4770      	bx	lr

080044b6 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 80044b6:	4770      	bx	lr

080044b8 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 80044b8:	4770      	bx	lr

080044ba <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 80044ba:	4770      	bx	lr

080044bc <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 80044bc:	4770      	bx	lr

080044be <_ZN15Screen1ViewBase7action1Ev>:
     * Custom Actions
     */
    virtual void action1()
    {
        // Override and implement this function in Screen1
    }
 80044be:	4770      	bx	lr

080044c0 <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 80044c0:	4770      	bx	lr

080044c2 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 80044c2:	4770      	bx	lr

080044c4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80044c4:	4770      	bx	lr

080044c6 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80044c6:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 80044c8:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 80044ca:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 80044cc:	68c2      	ldr	r2, [r0, #12]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	1055      	asrs	r5, r2, #1
 80044d2:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80044d6:	07d2      	lsls	r2, r2, #31
 80044d8:	bf48      	it	mi
 80044da:	5962      	ldrmi	r2, [r4, r5]
    }
 80044dc:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 80044de:	bf48      	it	mi
 80044e0:	58d3      	ldrmi	r3, [r2, r3]
 80044e2:	4718      	bx	r3

080044e4 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80044e4:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 80044e6:	6840      	ldr	r0, [r0, #4]
 80044e8:	b130      	cbz	r0, 80044f8 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	b91a      	cbnz	r2, 80044f6 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 80044ee:	68d8      	ldr	r0, [r3, #12]
 80044f0:	f000 0001 	and.w	r0, r0, #1
 80044f4:	4770      	bx	lr
 80044f6:	2001      	movs	r0, #1
    }
 80044f8:	4770      	bx	lr

080044fa <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80044fa:	b510      	push	{r4, lr}
 80044fc:	4604      	mov	r4, r0
 80044fe:	2110      	movs	r1, #16
 8004500:	f020 faf3 	bl	8024aea <_ZdlPvj>
 8004504:	4620      	mov	r0, r4
 8004506:	bd10      	pop	{r4, pc}

08004508 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8004508:	b510      	push	{r4, lr}
 800450a:	4604      	mov	r4, r0
}
 800450c:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8004510:	f020 faeb 	bl	8024aea <_ZdlPvj>
 8004514:	4620      	mov	r0, r4
 8004516:	bd10      	pop	{r4, pc}

08004518 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &button1)
 8004518:	30f0      	adds	r0, #240	@ 0xf0
 800451a:	4288      	cmp	r0, r1
{
 800451c:	b508      	push	{r3, lr}
    if (&src == &button1)
 800451e:	d105      	bne.n	800452c <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8004520:	f012 faf8 	bl	8016b14 <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When button1 clicked change screen to Screen2
        //Go to Screen2 with screen transition towards East
        application().gotoScreen2ScreenSlideTransitionEast();
    }
}
 8004524:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen2ScreenSlideTransitionEast();
 8004528:	f7ff bf42 	b.w	80043b0 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv>
}
 800452c:	bd08      	pop	{r3, pc}

0800452e <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 800452e:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8004530:	b570      	push	{r4, r5, r6, lr}
 8004532:	4604      	mov	r4, r0
        setX(x);
 8004534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 8004536:	4615      	mov	r5, r2
        setX(x);
 8004538:	4798      	blx	r3
        setY(y);
 800453a:	6823      	ldr	r3, [r4, #0]
 800453c:	4620      	mov	r0, r4
 800453e:	4629      	mov	r1, r5
 8004540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 8004542:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8004546:	4718      	bx	r3

08004548 <_ZN8touchgfx6WidgetC1Ev>:
 8004548:	2200      	movs	r2, #0
 800454a:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800454e:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 8004552:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 8004556:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 800455a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800455e:	8482      	strh	r2, [r0, #36]	@ 0x24
class Widget : public Drawable
 8004560:	4a01      	ldr	r2, [pc, #4]	@ (8004568 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8004562:	6002      	str	r2, [r0, #0]
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	0802853c 	.word	0x0802853c

0800456c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 800456c:	b538      	push	{r3, r4, r5, lr}
 800456e:	4604      	mov	r4, r0
 8004570:	460d      	mov	r5, r1
        : Widget(), bitmap(bmp), alpha(255)
 8004572:	2226      	movs	r2, #38	@ 0x26
 8004574:	2100      	movs	r1, #0
 8004576:	f021 f8cb 	bl	8025710 <memset>
 800457a:	4620      	mov	r0, r4
 800457c:	f7ff ffe4 	bl	8004548 <_ZN8touchgfx6WidgetC1Ev>
 8004580:	4b06      	ldr	r3, [pc, #24]	@ (800459c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
    {
        Image::setBitmap(bmp);
 8004582:	4620      	mov	r0, r4
 8004584:	4629      	mov	r1, r5
        : Widget(), bitmap(bmp), alpha(255)
 8004586:	6023      	str	r3, [r4, #0]
 8004588:	882b      	ldrh	r3, [r5, #0]
 800458a:	84e3      	strh	r3, [r4, #38]	@ 0x26
 800458c:	23ff      	movs	r3, #255	@ 0xff
 800458e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
        Image::setBitmap(bmp);
 8004592:	f00f fcfc 	bl	8013f8e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8004596:	4620      	mov	r0, r4
 8004598:	bd38      	pop	{r3, r4, r5, pc}
 800459a:	bf00      	nop
 800459c:	080296f4 	.word	0x080296f4

080045a0 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 80045a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045a4:	4604      	mov	r4, r0
 80045a6:	b08b      	sub	sp, #44	@ 0x2c
        : presenter(0)
 80045a8:	f04f 0900 	mov.w	r9, #0
 80045ac:	f014 f9cc 	bl	8018948 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 80045b0:	4625      	mov	r5, r4
 80045b2:	4a7e      	ldr	r2, [pc, #504]	@ (80047ac <_ZN15Screen1ViewBaseC1Ev+0x20c>)
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 80045b4:	4649      	mov	r1, r9
 80045b6:	f8c4 903c 	str.w	r9, [r4, #60]	@ 0x3c
 80045ba:	f845 2b40 	str.w	r2, [r5], #64
 80045be:	2226      	movs	r2, #38	@ 0x26
 80045c0:	4628      	mov	r0, r5
 80045c2:	f104 0b6c 	add.w	fp, r4, #108	@ 0x6c
 80045c6:	f021 f8a3 	bl	8025710 <memset>
 80045ca:	4628      	mov	r0, r5
 80045cc:	f7ff ffbc 	bl	8004548 <_ZN8touchgfx6WidgetC1Ev>
 80045d0:	4977      	ldr	r1, [pc, #476]	@ (80047b0 <_ZN15Screen1ViewBaseC1Ev+0x210>)
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 80045d2:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 80045d6:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 80045da:	6421      	str	r1, [r4, #64]	@ 0x40
 80045dc:	21ff      	movs	r1, #255	@ 0xff
 80045de:	4658      	mov	r0, fp
        : color(col)
 80045e0:	f8c4 9068 	str.w	r9, [r4, #104]	@ 0x68
 80045e4:	f884 1066 	strb.w	r1, [r4, #102]	@ 0x66
 80045e8:	a908      	add	r1, sp, #32
 80045ea:	f8ad 6020 	strh.w	r6, [sp, #32]
 80045ee:	f7ff ffbd 	bl	800456c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80045f2:	a908      	add	r1, sp, #32
 80045f4:	4650      	mov	r0, sl
 80045f6:	f8ad 6020 	strh.w	r6, [sp, #32]
 80045fa:	f7ff ffb7 	bl	800456c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80045fe:	f104 03c4 	add.w	r3, r4, #196	@ 0xc4
 8004602:	f104 08f0 	add.w	r8, r4, #240	@ 0xf0
 8004606:	a908      	add	r1, sp, #32
 8004608:	f8ad 6020 	strh.w	r6, [sp, #32]
 800460c:	4618      	mov	r0, r3
 800460e:	9301      	str	r3, [sp, #4]
 8004610:	f7ff ffac 	bl	800456c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 8004614:	4649      	mov	r1, r9
 8004616:	2226      	movs	r2, #38	@ 0x26
 8004618:	4640      	mov	r0, r8
 800461a:	f021 f879 	bl	8025710 <memset>
 800461e:	4640      	mov	r0, r8
 8004620:	f7ff ff92 	bl	8004548 <_ZN8touchgfx6WidgetC1Ev>
 8004624:	f504 7792 	add.w	r7, r4, #292	@ 0x124
        touchable = touch;
 8004628:	f04f 0301 	mov.w	r3, #1
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 800462c:	4961      	ldr	r1, [pc, #388]	@ (80047b4 <_ZN15Screen1ViewBaseC1Ev+0x214>)
 */
class TextArea : public Widget
{
public:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800462e:	2226      	movs	r2, #38	@ 0x26
 8004630:	f8a4 611e 	strh.w	r6, [r4, #286]	@ 0x11e
 8004634:	f884 3114 	strb.w	r3, [r4, #276]	@ 0x114
 8004638:	4638      	mov	r0, r7
 800463a:	f8c4 10f0 	str.w	r1, [r4, #240]	@ 0xf0
 800463e:	4649      	mov	r1, r9
 8004640:	f8a4 6120 	strh.w	r6, [r4, #288]	@ 0x120
 8004644:	f884 6122 	strb.w	r6, [r4, #290]	@ 0x122
 8004648:	f8c4 9118 	str.w	r9, [r4, #280]	@ 0x118
 800464c:	f884 911c 	strb.w	r9, [r4, #284]	@ 0x11c
 8004650:	f021 f85e 	bl	8025710 <memset>
 8004654:	4638      	mov	r0, r7
 8004656:	f7ff ff77 	bl	8004548 <_ZN8touchgfx6WidgetC1Ev>
 800465a:	4a57      	ldr	r2, [pc, #348]	@ (80047b8 <_ZN15Screen1ViewBaseC1Ev+0x218>)
        : typedTextId(id)
 800465c:	4b57      	ldr	r3, [pc, #348]	@ (80047bc <_ZN15Screen1ViewBaseC1Ev+0x21c>)
        setXY(x, y);
 800465e:	4649      	mov	r1, r9
 8004660:	f8c4 2124 	str.w	r2, [r4, #292]	@ 0x124
 8004664:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8004668:	f8c4 314c 	str.w	r3, [r4, #332]	@ 0x14c
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800466c:	f04f 33ff 	mov.w	r3, #4294967295
 8004670:	f8c4 2158 	str.w	r2, [r4, #344]	@ 0x158
 8004674:	4628      	mov	r0, r5
        : pobject(pObject), pmemfun(pmemfun_1)
 8004676:	4a52      	ldr	r2, [pc, #328]	@ (80047c0 <_ZN15Screen1ViewBaseC1Ev+0x220>)
 8004678:	f8a4 6150 	strh.w	r6, [r4, #336]	@ 0x150
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 800467c:	1d26      	adds	r6, r4, #4
        : color(col)
 800467e:	f8c4 9154 	str.w	r9, [r4, #340]	@ 0x154
 8004682:	f8a4 915c 	strh.w	r9, [r4, #348]	@ 0x15c
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004686:	f8c4 9160 	str.w	r9, [r4, #352]	@ 0x160
 800468a:	e9c4 245b 	strd	r2, r4, [r4, #364]	@ 0x16c
 800468e:	4a4d      	ldr	r2, [pc, #308]	@ (80047c4 <_ZN15Screen1ViewBaseC1Ev+0x224>)
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 8004690:	e9c4 3959 	strd	r3, r9, [r4, #356]	@ 0x164
 8004694:	e9c4 295d 	strd	r2, r9, [r4, #372]	@ 0x174
 8004698:	464a      	mov	r2, r9
 800469a:	f7ff ff48 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 800469e:	4628      	mov	r0, r5
 80046a0:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80046a4:	f7fe ff6a 	bl	800357c <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 80046a8:	4628      	mov	r0, r5
 80046aa:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80046ae:	f7fe ff67 	bl	8003580 <_ZN8touchgfx8Drawable9setHeightEs>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 80046b2:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80046b6:	4629      	mov	r1, r5
 80046b8:	4630      	mov	r0, r6
 80046ba:	66a2      	str	r2, [r4, #104]	@ 0x68
 80046bc:	2508      	movs	r5, #8
 80046be:	f00c f975 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(-88, -35);
 80046c2:	4658      	mov	r0, fp
 80046c4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80046c8:	f06f 0157 	mvn.w	r1, #87	@ 0x57
 80046cc:	f7ff ff2f 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
 80046d0:	2207      	movs	r2, #7
    image1.setBitmap(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_BACKGROUNDS_1024X600_METEOR_RAIN_ID));
 80046d2:	a908      	add	r1, sp, #32
 80046d4:	4658      	mov	r0, fp
 80046d6:	f8ad 2020 	strh.w	r2, [sp, #32]
 80046da:	f00f fc58 	bl	8013f8e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80046de:	4659      	mov	r1, fp
 80046e0:	4630      	mov	r0, r6
 80046e2:	f00c f963 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image2_1.setXY(0, 0);
 80046e6:	464a      	mov	r2, r9
 80046e8:	4649      	mov	r1, r9
 80046ea:	4650      	mov	r0, sl
 80046ec:	f7ff ff1f 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    image2_1.setBitmap(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_BARS_800X480_BOTTOM_BASE_ID));
 80046f0:	a908      	add	r1, sp, #32
 80046f2:	4650      	mov	r0, sl
 80046f4:	f8ad 5020 	strh.w	r5, [sp, #32]
 80046f8:	f00f fc49 	bl	8013f8e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80046fc:	4651      	mov	r1, sl
 80046fe:	4630      	mov	r0, r6
 8004700:	f00c f954 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image2.setXY(0, 400);
 8004704:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8004708:	4649      	mov	r1, r9
 800470a:	9801      	ldr	r0, [sp, #4]
 800470c:	f7ff ff0f 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    image2.setBitmap(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_BARS_800X480_BOTTOM_BASE_ID));
 8004710:	a908      	add	r1, sp, #32
 8004712:	9801      	ldr	r0, [sp, #4]
 8004714:	f8ad 5020 	strh.w	r5, [sp, #32]
 8004718:	f00f fc39 	bl	8013f8e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800471c:	9901      	ldr	r1, [sp, #4]
 800471e:	4630      	mov	r0, r6
 8004720:	f00c f944 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button1.setXY(261, 400);
 8004724:	4640      	mov	r0, r8
 8004726:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800472a:	f240 1105 	movw	r1, #261	@ 0x105
 800472e:	f7ff fefe 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
 8004732:	2209      	movs	r2, #9
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_MEDIUM_ROUND_DISABLED_ID), touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_MEDIUM_ROUND_DISABLED_ID));
 8004734:	a907      	add	r1, sp, #28
 8004736:	4640      	mov	r0, r8
 8004738:	f8ad 201c 	strh.w	r2, [sp, #28]
        boundingArea = calculateBoundingArea();
 800473c:	446d      	add	r5, sp
 800473e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8004742:	aa08      	add	r2, sp, #32
 8004744:	f00f fb67 	bl	8013e16 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 8004748:	f504 72b6 	add.w	r2, r4, #364	@ 0x16c
 800474c:	4641      	mov	r1, r8
 800474e:	4630      	mov	r0, r6
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 8004750:	f8c4 2118 	str.w	r2, [r4, #280]	@ 0x118
 8004754:	f00c f92a 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea1.setXY(377, 430);
 8004758:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 800475c:	4638      	mov	r0, r7
 800475e:	f240 1179 	movw	r1, #377	@ 0x179
 8004762:	f7ff fee4 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8004766:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 800476a:	4639      	mov	r1, r7
 800476c:	4628      	mov	r0, r5
        color = newColor;
 800476e:	f8c4 3154 	str.w	r3, [r4, #340]	@ 0x154
        linespace = space;
 8004772:	f8a4 9158 	strh.w	r9, [r4, #344]	@ 0x158
        boundingArea = calculateBoundingArea();
 8004776:	f00f f859 	bl	801382c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 800477a:	f504 73b0 	add.w	r3, r4, #352	@ 0x160
 800477e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004782:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004786:	4b0d      	ldr	r3, [pc, #52]	@ (80047bc <_ZN15Screen1ViewBaseC1Ev+0x21c>)
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_6YQL));
 8004788:	a908      	add	r1, sp, #32
 800478a:	4638      	mov	r0, r7
 800478c:	9308      	str	r3, [sp, #32]
 800478e:	f04f 0301 	mov.w	r3, #1
 8004792:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8004796:	f00f fae3 	bl	8013d60 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800479a:	4630      	mov	r0, r6
 800479c:	4639      	mov	r1, r7
 800479e:	f00c f905 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80047a2:	4620      	mov	r0, r4
 80047a4:	b00b      	add	sp, #44	@ 0x2c
 80047a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047aa:	bf00      	nop
 80047ac:	080285bc 	.word	0x080285bc
 80047b0:	08029618 	.word	0x08029618
 80047b4:	08029680 	.word	0x08029680
 80047b8:	08029588 	.word	0x08029588
 80047bc:	08027f50 	.word	0x08027f50
 80047c0:	080285a4 	.word	0x080285a4
 80047c4:	08004519 	.word	0x08004519

080047c8 <_ZN15Screen2ViewBase7action1Ev>:
     * Custom Actions
     */
    virtual void action1()
    {
        // Override and implement this function in Screen1
    }
 80047c8:	4770      	bx	lr

080047ca <_ZN15Screen2ViewBaseD1Ev>:
}

Screen2ViewBase::~Screen2ViewBase()
{

}
 80047ca:	4770      	bx	lr

080047cc <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{

}
 80047cc:	4770      	bx	lr

080047ce <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt64EEERKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80047ce:	4770      	bx	lr

080047d0 <_ZN8touchgfx16RadioButtonGroupILt64EED1Ev>:
    }

    /** Finalizes an instance of the RadioButtonGroup class. */
    virtual ~RadioButtonGroup()
    {
    }
 80047d0:	4770      	bx	lr

080047d2 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
 80047d2:	4770      	bx	lr

080047d4 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80047d4:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 80047d6:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 80047d8:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 80047da:	68c2      	ldr	r2, [r0, #12]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	1055      	asrs	r5, r2, #1
 80047e0:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80047e4:	07d2      	lsls	r2, r2, #31
 80047e6:	bf48      	it	mi
 80047e8:	5962      	ldrmi	r2, [r4, r5]
    }
 80047ea:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 80047ec:	bf48      	it	mi
 80047ee:	58d3      	ldrmi	r3, [r2, r3]
 80047f0:	4718      	bx	r3

080047f2 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80047f2:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 80047f4:	6840      	ldr	r0, [r0, #4]
 80047f6:	b130      	cbz	r0, 8004806 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 80047f8:	689a      	ldr	r2, [r3, #8]
 80047fa:	b91a      	cbnz	r2, 8004804 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 80047fc:	68d8      	ldr	r0, [r3, #12]
 80047fe:	f000 0001 	and.w	r0, r0, #1
 8004802:	4770      	bx	lr
 8004804:	2001      	movs	r0, #1
    }
 8004806:	4770      	bx	lr

08004808 <_ZNK8touchgfx16RadioButtonGroupILt64EE14getRadioButtonEt>:
     *
     * @return the RadioButton at the specified index. Returns 0 if the index is illegal.
     */
    virtual RadioButton* getRadioButton(uint16_t index) const
    {
        return (size > index) ? radioButtons[index] : 0;
 8004808:	f8b0 3104 	ldrh.w	r3, [r0, #260]	@ 0x104
 800480c:	428b      	cmp	r3, r1
 800480e:	bf86      	itte	hi
 8004810:	eb00 0081 	addhi.w	r0, r0, r1, lsl #2
 8004814:	6840      	ldrhi	r0, [r0, #4]
 8004816:	2000      	movls	r0, #0
    }
 8004818:	4770      	bx	lr

0800481a <_ZNK8touchgfx16RadioButtonGroupILt64EE27getSelectedRadioButtonIndexEv>:
     * Gets the index of the currently selected RadioButton.
     *
     * @return the index of the selected RadioButton. Returns -1 if no RadioButton is
     *         selected.
     */
    virtual int32_t getSelectedRadioButtonIndex() const
 800481a:	4603      	mov	r3, r0
    {
        for (uint16_t i = 0; i < size; i++)
 800481c:	f8b0 1104 	ldrh.w	r1, [r0, #260]	@ 0x104
 8004820:	2000      	movs	r0, #0
    virtual int32_t getSelectedRadioButtonIndex() const
 8004822:	b510      	push	{r4, lr}
        for (uint16_t i = 0; i < size; i++)
 8004824:	b282      	uxth	r2, r0
 8004826:	4291      	cmp	r1, r2
 8004828:	d802      	bhi.n	8004830 <_ZNK8touchgfx16RadioButtonGroupILt64EE27getSelectedRadioButtonIndexEv+0x16>
            if (radioButtons[i]->getSelected())
            {
                return i;
            }
        }
        return -1;
 800482a:	f04f 30ff 	mov.w	r0, #4294967295
    }
 800482e:	bd10      	pop	{r4, pc}
     *
     * @return The current selected state.
     */
    bool getSelected() const
    {
        return selected;
 8004830:	f853 4f04 	ldr.w	r4, [r3, #4]!
            if (radioButtons[i]->getSelected())
 8004834:	1c42      	adds	r2, r0, #1
 8004836:	f894 4037 	ldrb.w	r4, [r4, #55]	@ 0x37
 800483a:	2c00      	cmp	r4, #0
 800483c:	d1f7      	bne.n	800482e <_ZNK8touchgfx16RadioButtonGroupILt64EE27getSelectedRadioButtonIndexEv+0x14>
 800483e:	4610      	mov	r0, r2
 8004840:	e7f0      	b.n	8004824 <_ZNK8touchgfx16RadioButtonGroupILt64EE27getSelectedRadioButtonIndexEv+0xa>

08004842 <_ZNK8touchgfx16RadioButtonGroupILt64EE22getSelectedRadioButtonEv>:
     * @return a pointer to the selected RadioButton. Returns 0 if no RadioButton is
     *         selected.
     */
    virtual RadioButton* getSelectedRadioButton() const
    {
        int32_t index = getSelectedRadioButtonIndex();
 8004842:	6803      	ldr	r3, [r0, #0]
    virtual RadioButton* getSelectedRadioButton() const
 8004844:	b510      	push	{r4, lr}
        int32_t index = getSelectedRadioButtonIndex();
 8004846:	691b      	ldr	r3, [r3, #16]
    virtual RadioButton* getSelectedRadioButton() const
 8004848:	4604      	mov	r4, r0
        int32_t index = getSelectedRadioButtonIndex();
 800484a:	4798      	blx	r3
        return (index < 0) ? 0 : getRadioButton(index);
 800484c:	1e01      	subs	r1, r0, #0
 800484e:	db06      	blt.n	800485e <_ZNK8touchgfx16RadioButtonGroupILt64EE22getSelectedRadioButtonEv+0x1c>
 8004850:	6823      	ldr	r3, [r4, #0]
 8004852:	4620      	mov	r0, r4
 8004854:	b289      	uxth	r1, r1
 8004856:	68db      	ldr	r3, [r3, #12]
    }
 8004858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return (index < 0) ? 0 : getRadioButton(index);
 800485c:	4718      	bx	r3
    }
 800485e:	2000      	movs	r0, #0
 8004860:	bd10      	pop	{r4, pc}

08004862 <_ZN8touchgfx16RadioButtonGroupILt64EE21setDeselectionEnabledEb>:
     *
     * @param  deselectionEnabled true if it should be possible to deselect by click.
     *
     * @see getDeselectionEnabled
     */
    virtual void setDeselectionEnabled(bool deselectionEnabled)
 8004862:	f8b0 3104 	ldrh.w	r3, [r0, #260]	@ 0x104
 8004866:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    {
        for (uint16_t i = 0; i < size; i++)
 800486a:	4298      	cmp	r0, r3
 800486c:	d100      	bne.n	8004870 <_ZN8touchgfx16RadioButtonGroupILt64EE21setDeselectionEnabledEb+0xe>
        {
            radioButtons[i]->setDeselectionEnabled(deselectionEnabled);
        }
    }
 800486e:	4770      	bx	lr
        deselectionEnabled = state;
 8004870:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8004874:	f882 1038 	strb.w	r1, [r2, #56]	@ 0x38
        for (uint16_t i = 0; i < size; i++)
 8004878:	e7f7      	b.n	800486a <_ZN8touchgfx16RadioButtonGroupILt64EE21setDeselectionEnabledEb+0x8>

0800487a <_ZNK8touchgfx16RadioButtonGroupILt64EE21getDeselectionEnabledEv>:
     *
     * @return The current deselectionEnabled state.
     *
     * @see setDeselectionEnabled
     */
    virtual bool getDeselectionEnabled() const
 800487a:	4603      	mov	r3, r0
    {
        return (size > 0) ? radioButtons[0]->getDeselectionEnabled() : false;
 800487c:	f8b0 0104 	ldrh.w	r0, [r0, #260]	@ 0x104
 8004880:	b110      	cbz	r0, 8004888 <_ZNK8touchgfx16RadioButtonGroupILt64EE21getDeselectionEnabledEv+0xe>
        return deselectionEnabled;
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
    }
 8004888:	4770      	bx	lr

0800488a <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt64EEERKNS_14AbstractButtonEvvE7executeES5_>:
    virtual void execute(T1 t1)
 800488a:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 800488c:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 800488e:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8004890:	68c2      	ldr	r2, [r0, #12]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	1055      	asrs	r5, r2, #1
 8004896:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800489a:	07d2      	lsls	r2, r2, #31
 800489c:	bf48      	it	mi
 800489e:	5962      	ldrmi	r2, [r4, r5]
    }
 80048a0:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 80048a2:	bf48      	it	mi
 80048a4:	58d3      	ldrmi	r3, [r2, r3]
 80048a6:	4718      	bx	r3

080048a8 <_ZNK8touchgfx8CallbackINS_16RadioButtonGroupILt64EEERKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80048a8:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 80048aa:	6840      	ldr	r0, [r0, #4]
 80048ac:	b130      	cbz	r0, 80048bc <_ZNK8touchgfx8CallbackINS_16RadioButtonGroupILt64EEERKNS_14AbstractButtonEvvE7isValidEv+0x14>
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	b91a      	cbnz	r2, 80048ba <_ZNK8touchgfx8CallbackINS_16RadioButtonGroupILt64EEERKNS_14AbstractButtonEvvE7isValidEv+0x12>
 80048b2:	68d8      	ldr	r0, [r3, #12]
 80048b4:	f000 0001 	and.w	r0, r0, #1
 80048b8:	4770      	bx	lr
 80048ba:	2001      	movs	r0, #1
    }
 80048bc:	4770      	bx	lr

080048be <_ZN8touchgfx16RadioButtonGroupILt64EE11setSelectedERNS_11RadioButtonE>:
    virtual void setSelected(RadioButton& radioButton)
 80048be:	b570      	push	{r4, r5, r6, lr}
 80048c0:	460d      	mov	r5, r1
 80048c2:	4604      	mov	r4, r0
        radioButton.setSelected(true);
 80048c4:	2101      	movs	r1, #1
 80048c6:	4628      	mov	r0, r5
 80048c8:	f00f fd72 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
        radioButtonClickedHandler(radioButton);
 80048cc:	6823      	ldr	r3, [r4, #0]
 80048ce:	4629      	mov	r1, r5
 80048d0:	4620      	mov	r0, r4
 80048d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 80048d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        radioButtonClickedHandler(radioButton);
 80048d8:	4718      	bx	r3

080048da <_ZN8touchgfx16RadioButtonGroupILt64EED0Ev>:
    virtual ~RadioButtonGroup()
 80048da:	b510      	push	{r4, lr}
 80048dc:	4604      	mov	r4, r0
    }
 80048de:	f44f 7198 	mov.w	r1, #304	@ 0x130
 80048e2:	f020 f902 	bl	8024aea <_ZdlPvj>
 80048e6:	4620      	mov	r0, r4
 80048e8:	bd10      	pop	{r4, pc}

080048ea <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt64EEERKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80048ea:	b510      	push	{r4, lr}
 80048ec:	4604      	mov	r4, r0
 80048ee:	2110      	movs	r1, #16
 80048f0:	f020 f8fb 	bl	8024aea <_ZdlPvj>
 80048f4:	4620      	mov	r0, r4
 80048f6:	bd10      	pop	{r4, pc}

080048f8 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 80048f8:	b510      	push	{r4, lr}
 80048fa:	4604      	mov	r4, r0
 80048fc:	2110      	movs	r1, #16
 80048fe:	f020 f8f4 	bl	8024aea <_ZdlPvj>
 8004902:	4620      	mov	r0, r4
 8004904:	bd10      	pop	{r4, pc}

08004906 <_ZN15Screen2ViewBaseD0Ev>:
Screen2ViewBase::~Screen2ViewBase()
 8004906:	b510      	push	{r4, lr}
 8004908:	4604      	mov	r4, r0
}
 800490a:	f241 3104 	movw	r1, #4868	@ 0x1304
 800490e:	f020 f8ec 	bl	8024aea <_ZdlPvj>
 8004912:	4620      	mov	r0, r4
 8004914:	bd10      	pop	{r4, pc}

08004916 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE>:
    }
}

void Screen2ViewBase::radioButtonSelectedCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &RadioButton_0_1)
 8004916:	f500 538c 	add.w	r3, r0, #4480	@ 0x1180
 800491a:	3308      	adds	r3, #8
 800491c:	4299      	cmp	r1, r3
{
 800491e:	b570      	push	{r4, r5, r6, lr}
 8004920:	4604      	mov	r4, r0
 8004922:	460d      	mov	r5, r1
    if (&src == &RadioButton_0_1)
 8004924:	d105      	bne.n	8004932 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1c>
    {
        //Interaction3
        //When RadioButton_0_1 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(0, 4 , 0);
 8004926:	2300      	movs	r3, #0
 8004928:	2204      	movs	r2, #4
 800492a:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 800492c:	4619      	mov	r1, r3
 800492e:	f002 fab5 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_0_2)
 8004932:	f504 538a 	add.w	r3, r4, #4416	@ 0x1140
 8004936:	3308      	adds	r3, #8
 8004938:	429d      	cmp	r5, r3
 800493a:	d105      	bne.n	8004948 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x32>
    {
        //Interaction4
        //When RadioButton_0_2 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(0, 4 , 1);
 800493c:	2301      	movs	r3, #1
 800493e:	2204      	movs	r2, #4
 8004940:	2100      	movs	r1, #0
 8004942:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004944:	f002 faaa 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_0_3)
 8004948:	f504 5388 	add.w	r3, r4, #4352	@ 0x1100
 800494c:	3308      	adds	r3, #8
 800494e:	429d      	cmp	r5, r3
 8004950:	d105      	bne.n	800495e <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x48>
    {
        //Interaction5
        //When RadioButton_0_3 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(0, 4 , 2);
 8004952:	2302      	movs	r3, #2
 8004954:	2204      	movs	r2, #4
 8004956:	2100      	movs	r1, #0
 8004958:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800495a:	f002 fa9f 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_0_4)
 800495e:	f504 5386 	add.w	r3, r4, #4288	@ 0x10c0
 8004962:	3308      	adds	r3, #8
 8004964:	429d      	cmp	r5, r3
 8004966:	d105      	bne.n	8004974 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x5e>
    {
        //Interaction6
        //When RadioButton_0_4 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(0, 4 , 3);
 8004968:	2303      	movs	r3, #3
 800496a:	2204      	movs	r2, #4
 800496c:	2100      	movs	r1, #0
 800496e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004970:	f002 fa94 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_0_5)
 8004974:	f504 5384 	add.w	r3, r4, #4224	@ 0x1080
 8004978:	3308      	adds	r3, #8
 800497a:	429d      	cmp	r5, r3
 800497c:	d105      	bne.n	800498a <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x74>
    {
        //Interaction7
        //When RadioButton_0_5 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(0, 3 , 0);
 800497e:	2300      	movs	r3, #0
 8004980:	2203      	movs	r2, #3
 8004982:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004984:	4619      	mov	r1, r3
 8004986:	f002 fa89 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_0_6)
 800498a:	f504 5382 	add.w	r3, r4, #4160	@ 0x1040
 800498e:	3308      	adds	r3, #8
 8004990:	429d      	cmp	r5, r3
 8004992:	d105      	bne.n	80049a0 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x8a>
    {
        //Interaction8
        //When RadioButton_0_6 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(0, 3 , 1);
 8004994:	2301      	movs	r3, #1
 8004996:	2203      	movs	r2, #3
 8004998:	2100      	movs	r1, #0
 800499a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800499c:	f002 fa7e 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_0_7)
 80049a0:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 80049a4:	3308      	adds	r3, #8
 80049a6:	429d      	cmp	r5, r3
 80049a8:	d105      	bne.n	80049b6 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0xa0>
    {
        //Interaction9
        //When RadioButton_0_7 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(0, 3 , 2);
 80049aa:	2302      	movs	r3, #2
 80049ac:	2203      	movs	r2, #3
 80049ae:	2100      	movs	r1, #0
 80049b0:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80049b2:	f002 fa73 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_0_8)
 80049b6:	f604 73c8 	addw	r3, r4, #4040	@ 0xfc8
 80049ba:	429d      	cmp	r5, r3
 80049bc:	d105      	bne.n	80049ca <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0xb4>
    {
        //Interaction10
        //When RadioButton_0_8 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(0, 3 , 3);
 80049be:	2303      	movs	r3, #3
 80049c0:	2100      	movs	r1, #0
 80049c2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80049c4:	461a      	mov	r2, r3
 80049c6:	f002 fa69 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_0_9)
 80049ca:	f604 7388 	addw	r3, r4, #3976	@ 0xf88
 80049ce:	429d      	cmp	r5, r3
 80049d0:	d105      	bne.n	80049de <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0xc8>
    {
        //Interaction11
        //When RadioButton_0_9 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(0, 2 , 0);
 80049d2:	2300      	movs	r3, #0
 80049d4:	2202      	movs	r2, #2
 80049d6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80049d8:	4619      	mov	r1, r3
 80049da:	f002 fa5f 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_0_10)
 80049de:	f604 7348 	addw	r3, r4, #3912	@ 0xf48
 80049e2:	429d      	cmp	r5, r3
 80049e4:	d105      	bne.n	80049f2 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0xdc>
    {
        //Interaction12
        //When RadioButton_0_10 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(0, 2 , 1);
 80049e6:	2301      	movs	r3, #1
 80049e8:	2202      	movs	r2, #2
 80049ea:	2100      	movs	r1, #0
 80049ec:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80049ee:	f002 fa55 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_0_11)
 80049f2:	f604 7308 	addw	r3, r4, #3848	@ 0xf08
 80049f6:	429d      	cmp	r5, r3
 80049f8:	d105      	bne.n	8004a06 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0xf0>
    {
        //Interaction13
        //When RadioButton_0_11 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(0, 2 , 2);
 80049fa:	2302      	movs	r3, #2
 80049fc:	2100      	movs	r1, #0
 80049fe:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004a00:	461a      	mov	r2, r3
 8004a02:	f002 fa4b 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_0_12)
 8004a06:	f604 63c8 	addw	r3, r4, #3784	@ 0xec8
 8004a0a:	429d      	cmp	r5, r3
 8004a0c:	d105      	bne.n	8004a1a <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x104>
    {
        //Interaction14
        //When RadioButton_0_12 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(0, 2 , 3);
 8004a0e:	2303      	movs	r3, #3
 8004a10:	2202      	movs	r2, #2
 8004a12:	2100      	movs	r1, #0
 8004a14:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004a16:	f002 fa41 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_0_13)
 8004a1a:	f604 6388 	addw	r3, r4, #3720	@ 0xe88
 8004a1e:	429d      	cmp	r5, r3
 8004a20:	d105      	bne.n	8004a2e <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x118>
    {
        //Interaction15
        //When RadioButton_0_13 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(0, 1 , 0);
 8004a22:	2300      	movs	r3, #0
 8004a24:	2201      	movs	r2, #1
 8004a26:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004a28:	4619      	mov	r1, r3
 8004a2a:	f002 fa37 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_0_14)
 8004a2e:	f604 6348 	addw	r3, r4, #3656	@ 0xe48
 8004a32:	429d      	cmp	r5, r3
 8004a34:	d105      	bne.n	8004a42 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x12c>
    {
        //Interaction16
        //When RadioButton_0_14 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(0, 1 , 1);
 8004a36:	2301      	movs	r3, #1
 8004a38:	2100      	movs	r1, #0
 8004a3a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	f002 fa2d 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_0_15)
 8004a42:	f604 6308 	addw	r3, r4, #3592	@ 0xe08
 8004a46:	429d      	cmp	r5, r3
 8004a48:	d105      	bne.n	8004a56 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x140>
    {
        //Interaction17
        //When RadioButton_0_15 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(0, 1 , 2);
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	2100      	movs	r1, #0
 8004a50:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004a52:	f002 fa23 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_0_16)
 8004a56:	f604 53c8 	addw	r3, r4, #3528	@ 0xdc8
 8004a5a:	429d      	cmp	r5, r3
 8004a5c:	d105      	bne.n	8004a6a <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x154>
    {
        //Interaction18
        //When RadioButton_0_16 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(0, 1 , 3);
 8004a5e:	2303      	movs	r3, #3
 8004a60:	2201      	movs	r2, #1
 8004a62:	2100      	movs	r1, #0
 8004a64:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004a66:	f002 fa19 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_1_1)
 8004a6a:	f604 5388 	addw	r3, r4, #3464	@ 0xd88
 8004a6e:	429d      	cmp	r5, r3
 8004a70:	d105      	bne.n	8004a7e <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x168>
    {
        //Interaction19
        //When RadioButton_1_1 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(1, 4 , 0);
 8004a72:	2300      	movs	r3, #0
 8004a74:	2204      	movs	r2, #4
 8004a76:	2101      	movs	r1, #1
 8004a78:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004a7a:	f002 fa0f 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_1_2)
 8004a7e:	f604 5348 	addw	r3, r4, #3400	@ 0xd48
 8004a82:	429d      	cmp	r5, r3
 8004a84:	d105      	bne.n	8004a92 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x17c>
    {
        //Interaction20
        //When RadioButton_1_2 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(1, 4 , 1);
 8004a86:	2301      	movs	r3, #1
 8004a88:	2204      	movs	r2, #4
 8004a8a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	f002 fa05 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_1_3)
 8004a92:	f604 5308 	addw	r3, r4, #3336	@ 0xd08
 8004a96:	429d      	cmp	r5, r3
 8004a98:	d105      	bne.n	8004aa6 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x190>
    {
        //Interaction21
        //When RadioButton_1_3 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(1, 4 , 2);
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	2204      	movs	r2, #4
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004aa2:	f002 f9fb 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_1_4)
 8004aa6:	f604 43c8 	addw	r3, r4, #3272	@ 0xcc8
 8004aaa:	429d      	cmp	r5, r3
 8004aac:	d105      	bne.n	8004aba <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1a4>
    {
        //Interaction22
        //When RadioButton_1_4 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(1, 4 , 3);
 8004aae:	2303      	movs	r3, #3
 8004ab0:	2204      	movs	r2, #4
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004ab6:	f002 f9f1 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_1_5)
 8004aba:	f604 4388 	addw	r3, r4, #3208	@ 0xc88
 8004abe:	429d      	cmp	r5, r3
 8004ac0:	d105      	bne.n	8004ace <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1b8>
    {
        //Interaction23
        //When RadioButton_1_5 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(1, 3 , 0);
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	2203      	movs	r2, #3
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004aca:	f002 f9e7 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_1_6)
 8004ace:	f604 4348 	addw	r3, r4, #3144	@ 0xc48
 8004ad2:	429d      	cmp	r5, r3
 8004ad4:	d105      	bne.n	8004ae2 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1cc>
    {
        //Interaction24
        //When RadioButton_1_6 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(1, 3 , 1);
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	2203      	movs	r2, #3
 8004ada:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004adc:	4619      	mov	r1, r3
 8004ade:	f002 f9dd 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_1_7)
 8004ae2:	f604 4308 	addw	r3, r4, #3080	@ 0xc08
 8004ae6:	429d      	cmp	r5, r3
 8004ae8:	d105      	bne.n	8004af6 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1e0>
    {
        //Interaction25
        //When RadioButton_1_7 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(1, 3 , 2);
 8004aea:	2302      	movs	r3, #2
 8004aec:	2203      	movs	r2, #3
 8004aee:	2101      	movs	r1, #1
 8004af0:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004af2:	f002 f9d3 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_1_8)
 8004af6:	f604 33c8 	addw	r3, r4, #3016	@ 0xbc8
 8004afa:	429d      	cmp	r5, r3
 8004afc:	d105      	bne.n	8004b0a <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1f4>
    {
        //Interaction26
        //When RadioButton_1_8 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(1, 3 , 3);
 8004afe:	2303      	movs	r3, #3
 8004b00:	2101      	movs	r1, #1
 8004b02:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004b04:	461a      	mov	r2, r3
 8004b06:	f002 f9c9 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_1_9)
 8004b0a:	f604 3388 	addw	r3, r4, #2952	@ 0xb88
 8004b0e:	429d      	cmp	r5, r3
 8004b10:	d105      	bne.n	8004b1e <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x208>
    {
        //Interaction27
        //When RadioButton_1_9 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(1, 2 , 0);
 8004b12:	2300      	movs	r3, #0
 8004b14:	2202      	movs	r2, #2
 8004b16:	2101      	movs	r1, #1
 8004b18:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004b1a:	f002 f9bf 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_1_10)
 8004b1e:	f604 3348 	addw	r3, r4, #2888	@ 0xb48
 8004b22:	429d      	cmp	r5, r3
 8004b24:	d105      	bne.n	8004b32 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x21c>
    {
        //Interaction28
        //When RadioButton_1_10 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(1, 2 , 1);
 8004b26:	2301      	movs	r3, #1
 8004b28:	2202      	movs	r2, #2
 8004b2a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	f002 f9b5 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_1_11)
 8004b32:	f604 3308 	addw	r3, r4, #2824	@ 0xb08
 8004b36:	429d      	cmp	r5, r3
 8004b38:	d105      	bne.n	8004b46 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x230>
    {
        //Interaction29
        //When RadioButton_1_11 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(1, 2 , 2);
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004b40:	461a      	mov	r2, r3
 8004b42:	f002 f9ab 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_1_12)
 8004b46:	f604 23c8 	addw	r3, r4, #2760	@ 0xac8
 8004b4a:	429d      	cmp	r5, r3
 8004b4c:	d105      	bne.n	8004b5a <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x244>
    {
        //Interaction30
        //When RadioButton_1_12 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(1, 2 , 3);
 8004b4e:	2303      	movs	r3, #3
 8004b50:	2202      	movs	r2, #2
 8004b52:	2101      	movs	r1, #1
 8004b54:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004b56:	f002 f9a1 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_1_13)
 8004b5a:	f604 2388 	addw	r3, r4, #2696	@ 0xa88
 8004b5e:	429d      	cmp	r5, r3
 8004b60:	d105      	bne.n	8004b6e <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x258>
    {
        //Interaction31
        //When RadioButton_1_13 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(1, 1 , 0);
 8004b62:	2201      	movs	r2, #1
 8004b64:	2300      	movs	r3, #0
 8004b66:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004b68:	4611      	mov	r1, r2
 8004b6a:	f002 f997 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_1_14)
 8004b6e:	f604 2348 	addw	r3, r4, #2632	@ 0xa48
 8004b72:	429d      	cmp	r5, r3
 8004b74:	d105      	bne.n	8004b82 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x26c>
    {
        //Interaction32
        //When RadioButton_1_14 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(1, 1 , 1);
 8004b76:	2301      	movs	r3, #1
 8004b78:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	f002 f98d 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_1_15)
 8004b82:	f604 2308 	addw	r3, r4, #2568	@ 0xa08
 8004b86:	429d      	cmp	r5, r3
 8004b88:	d105      	bne.n	8004b96 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x280>
    {
        //Interaction33
        //When RadioButton_1_15 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(1, 1 , 2);
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004b90:	4611      	mov	r1, r2
 8004b92:	f002 f983 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_1_16)
 8004b96:	f604 13c8 	addw	r3, r4, #2504	@ 0x9c8
 8004b9a:	429d      	cmp	r5, r3
 8004b9c:	d105      	bne.n	8004baa <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x294>
    {
        //Interaction34
        //When RadioButton_1_16 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(1, 1 , 3);
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004ba4:	4611      	mov	r1, r2
 8004ba6:	f002 f979 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_2_1)
 8004baa:	f604 1388 	addw	r3, r4, #2440	@ 0x988
 8004bae:	429d      	cmp	r5, r3
 8004bb0:	d105      	bne.n	8004bbe <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2a8>
    {
        //Interaction35
        //When RadioButton_2_1 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(2, 4 , 0);
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	2204      	movs	r2, #4
 8004bb6:	2102      	movs	r1, #2
 8004bb8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004bba:	f002 f96f 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_2_2)
 8004bbe:	f604 1348 	addw	r3, r4, #2376	@ 0x948
 8004bc2:	429d      	cmp	r5, r3
 8004bc4:	d105      	bne.n	8004bd2 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2bc>
    {
        //Interaction36
        //When RadioButton_2_2 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(2, 4 , 1);
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	2204      	movs	r2, #4
 8004bca:	2102      	movs	r1, #2
 8004bcc:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004bce:	f002 f965 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_2_3)
 8004bd2:	f604 1308 	addw	r3, r4, #2312	@ 0x908
 8004bd6:	429d      	cmp	r5, r3
 8004bd8:	d105      	bne.n	8004be6 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2d0>
    {
        //Interaction37
        //When RadioButton_2_3 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(2, 4 , 2);
 8004bda:	2302      	movs	r3, #2
 8004bdc:	2204      	movs	r2, #4
 8004bde:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004be0:	4619      	mov	r1, r3
 8004be2:	f002 f95b 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_2_4)
 8004be6:	f604 03c8 	addw	r3, r4, #2248	@ 0x8c8
 8004bea:	429d      	cmp	r5, r3
 8004bec:	d105      	bne.n	8004bfa <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2e4>
    {
        //Interaction38
        //When RadioButton_2_4 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(2, 4 , 3);
 8004bee:	2303      	movs	r3, #3
 8004bf0:	2204      	movs	r2, #4
 8004bf2:	2102      	movs	r1, #2
 8004bf4:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004bf6:	f002 f951 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_2_5)
 8004bfa:	f604 0388 	addw	r3, r4, #2184	@ 0x888
 8004bfe:	429d      	cmp	r5, r3
 8004c00:	d105      	bne.n	8004c0e <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2f8>
    {
        //Interaction39
        //When RadioButton_2_5 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(2, 3 , 0);
 8004c02:	2300      	movs	r3, #0
 8004c04:	2203      	movs	r2, #3
 8004c06:	2102      	movs	r1, #2
 8004c08:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004c0a:	f002 f947 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_2_6)
 8004c0e:	f604 0348 	addw	r3, r4, #2120	@ 0x848
 8004c12:	429d      	cmp	r5, r3
 8004c14:	d105      	bne.n	8004c22 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x30c>
    {
        //Interaction40
        //When RadioButton_2_6 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(2, 3 , 1);
 8004c16:	2301      	movs	r3, #1
 8004c18:	2203      	movs	r2, #3
 8004c1a:	2102      	movs	r1, #2
 8004c1c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004c1e:	f002 f93d 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_2_7)
 8004c22:	f604 0308 	addw	r3, r4, #2056	@ 0x808
 8004c26:	429d      	cmp	r5, r3
 8004c28:	d105      	bne.n	8004c36 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x320>
    {
        //Interaction41
        //When RadioButton_2_7 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(2, 3 , 2);
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	2203      	movs	r2, #3
 8004c2e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004c30:	4619      	mov	r1, r3
 8004c32:	f002 f933 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_2_8)
 8004c36:	f504 63f9 	add.w	r3, r4, #1992	@ 0x7c8
 8004c3a:	429d      	cmp	r5, r3
 8004c3c:	d105      	bne.n	8004c4a <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x334>
    {
        //Interaction42
        //When RadioButton_2_8 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(2, 3 , 3);
 8004c3e:	2303      	movs	r3, #3
 8004c40:	2102      	movs	r1, #2
 8004c42:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004c44:	461a      	mov	r2, r3
 8004c46:	f002 f929 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_2_9)
 8004c4a:	f504 63f1 	add.w	r3, r4, #1928	@ 0x788
 8004c4e:	429d      	cmp	r5, r3
 8004c50:	d105      	bne.n	8004c5e <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x348>
    {
        //Interaction43
        //When RadioButton_2_9 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(2, 2 , 0);
 8004c52:	2202      	movs	r2, #2
 8004c54:	2300      	movs	r3, #0
 8004c56:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004c58:	4611      	mov	r1, r2
 8004c5a:	f002 f91f 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_2_10)
 8004c5e:	f504 63e9 	add.w	r3, r4, #1864	@ 0x748
 8004c62:	429d      	cmp	r5, r3
 8004c64:	d105      	bne.n	8004c72 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x35c>
    {
        //Interaction44
        //When RadioButton_2_10 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(2, 2 , 1);
 8004c66:	2202      	movs	r2, #2
 8004c68:	2301      	movs	r3, #1
 8004c6a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004c6c:	4611      	mov	r1, r2
 8004c6e:	f002 f915 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_2_11)
 8004c72:	f504 63e1 	add.w	r3, r4, #1800	@ 0x708
 8004c76:	429d      	cmp	r5, r3
 8004c78:	d105      	bne.n	8004c86 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x370>
    {
        //Interaction45
        //When RadioButton_2_11 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(2, 2 , 2);
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004c7e:	461a      	mov	r2, r3
 8004c80:	4619      	mov	r1, r3
 8004c82:	f002 f90b 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_2_12)
 8004c86:	f504 63d9 	add.w	r3, r4, #1736	@ 0x6c8
 8004c8a:	429d      	cmp	r5, r3
 8004c8c:	d105      	bne.n	8004c9a <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x384>
    {
        //Interaction46
        //When RadioButton_2_12 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(2, 2 , 3);
 8004c8e:	2202      	movs	r2, #2
 8004c90:	2303      	movs	r3, #3
 8004c92:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004c94:	4611      	mov	r1, r2
 8004c96:	f002 f901 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_2_13)
 8004c9a:	f504 63d1 	add.w	r3, r4, #1672	@ 0x688
 8004c9e:	429d      	cmp	r5, r3
 8004ca0:	d105      	bne.n	8004cae <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x398>
    {
        //Interaction47
        //When RadioButton_2_13 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(2, 1 , 0);
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	2102      	movs	r1, #2
 8004ca8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004caa:	f002 f8f7 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_2_14)
 8004cae:	f504 63c9 	add.w	r3, r4, #1608	@ 0x648
 8004cb2:	429d      	cmp	r5, r3
 8004cb4:	d105      	bne.n	8004cc2 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3ac>
    {
        //Interaction48
        //When RadioButton_2_14 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(2, 1 , 1);
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	2102      	movs	r1, #2
 8004cba:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	f002 f8ed 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_2_15)
 8004cc2:	f504 63c1 	add.w	r3, r4, #1544	@ 0x608
 8004cc6:	429d      	cmp	r5, r3
 8004cc8:	d105      	bne.n	8004cd6 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c0>
    {
        //Interaction49
        //When RadioButton_2_15 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(2, 1 , 2);
 8004cca:	2302      	movs	r3, #2
 8004ccc:	2201      	movs	r2, #1
 8004cce:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	f002 f8e3 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_2_16)
 8004cd6:	f504 63b9 	add.w	r3, r4, #1480	@ 0x5c8
 8004cda:	429d      	cmp	r5, r3
 8004cdc:	d105      	bne.n	8004cea <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3d4>
    {
        //Interaction50
        //When RadioButton_2_16 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(2, 1 , 3);
 8004cde:	2303      	movs	r3, #3
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	2102      	movs	r1, #2
 8004ce4:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004ce6:	f002 f8d9 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_3_1)
 8004cea:	f504 63b1 	add.w	r3, r4, #1416	@ 0x588
 8004cee:	429d      	cmp	r5, r3
 8004cf0:	d105      	bne.n	8004cfe <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3e8>
    {
        //Interaction51
        //When RadioButton_3_1 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(3, 4 , 0);
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	2204      	movs	r2, #4
 8004cf6:	2103      	movs	r1, #3
 8004cf8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004cfa:	f002 f8cf 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_3_2)
 8004cfe:	f504 63a9 	add.w	r3, r4, #1352	@ 0x548
 8004d02:	429d      	cmp	r5, r3
 8004d04:	d105      	bne.n	8004d12 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3fc>
    {
        //Interaction52
        //When RadioButton_3_2 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(3, 4 , 1);
 8004d06:	2301      	movs	r3, #1
 8004d08:	2204      	movs	r2, #4
 8004d0a:	2103      	movs	r1, #3
 8004d0c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004d0e:	f002 f8c5 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_3_3)
 8004d12:	f504 63a1 	add.w	r3, r4, #1288	@ 0x508
 8004d16:	429d      	cmp	r5, r3
 8004d18:	d105      	bne.n	8004d26 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x410>
    {
        //Interaction53
        //When RadioButton_3_3 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(3, 4 , 2);
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	2204      	movs	r2, #4
 8004d1e:	2103      	movs	r1, #3
 8004d20:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004d22:	f002 f8bb 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_3_4)
 8004d26:	f504 6399 	add.w	r3, r4, #1224	@ 0x4c8
 8004d2a:	429d      	cmp	r5, r3
 8004d2c:	d105      	bne.n	8004d3a <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x424>
    {
        //Interaction54
        //When RadioButton_3_4 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(3, 4 , 3);
 8004d2e:	2303      	movs	r3, #3
 8004d30:	2204      	movs	r2, #4
 8004d32:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004d34:	4619      	mov	r1, r3
 8004d36:	f002 f8b1 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_3_5)
 8004d3a:	f504 6391 	add.w	r3, r4, #1160	@ 0x488
 8004d3e:	429d      	cmp	r5, r3
 8004d40:	d105      	bne.n	8004d4e <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x438>
    {
        //Interaction55
        //When RadioButton_3_5 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(3, 3 , 0);
 8004d42:	2203      	movs	r2, #3
 8004d44:	2300      	movs	r3, #0
 8004d46:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004d48:	4611      	mov	r1, r2
 8004d4a:	f002 f8a7 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_3_6)
 8004d4e:	f504 6389 	add.w	r3, r4, #1096	@ 0x448
 8004d52:	429d      	cmp	r5, r3
 8004d54:	d105      	bne.n	8004d62 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x44c>
    {
        //Interaction56
        //When RadioButton_3_6 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(3, 3 , 1);
 8004d56:	2203      	movs	r2, #3
 8004d58:	2301      	movs	r3, #1
 8004d5a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004d5c:	4611      	mov	r1, r2
 8004d5e:	f002 f89d 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_3_7)
 8004d62:	f504 6381 	add.w	r3, r4, #1032	@ 0x408
 8004d66:	429d      	cmp	r5, r3
 8004d68:	d105      	bne.n	8004d76 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x460>
    {
        //Interaction57
        //When RadioButton_3_7 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(3, 3 , 2);
 8004d6a:	2203      	movs	r2, #3
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004d70:	4611      	mov	r1, r2
 8004d72:	f002 f893 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_3_8)
 8004d76:	f504 7372 	add.w	r3, r4, #968	@ 0x3c8
 8004d7a:	429d      	cmp	r5, r3
 8004d7c:	d105      	bne.n	8004d8a <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x474>
    {
        //Interaction58
        //When RadioButton_3_8 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(3, 3 , 3);
 8004d7e:	2303      	movs	r3, #3
 8004d80:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004d82:	461a      	mov	r2, r3
 8004d84:	4619      	mov	r1, r3
 8004d86:	f002 f889 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_3_9)
 8004d8a:	f504 7362 	add.w	r3, r4, #904	@ 0x388
 8004d8e:	429d      	cmp	r5, r3
 8004d90:	d105      	bne.n	8004d9e <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x488>
    {
        //Interaction59
        //When RadioButton_3_9 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(3, 2 , 0);
 8004d92:	2300      	movs	r3, #0
 8004d94:	2202      	movs	r2, #2
 8004d96:	2103      	movs	r1, #3
 8004d98:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004d9a:	f002 f87f 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_3_10)
 8004d9e:	f504 7352 	add.w	r3, r4, #840	@ 0x348
 8004da2:	429d      	cmp	r5, r3
 8004da4:	d105      	bne.n	8004db2 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x49c>
    {
        //Interaction60
        //When RadioButton_3_10 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(3, 2 , 1);
 8004da6:	2301      	movs	r3, #1
 8004da8:	2202      	movs	r2, #2
 8004daa:	2103      	movs	r1, #3
 8004dac:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004dae:	f002 f875 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_3_11)
 8004db2:	f504 7342 	add.w	r3, r4, #776	@ 0x308
 8004db6:	429d      	cmp	r5, r3
 8004db8:	d105      	bne.n	8004dc6 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x4b0>
    {
        //Interaction61
        //When RadioButton_3_11 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(3, 2 , 2);
 8004dba:	2302      	movs	r3, #2
 8004dbc:	2103      	movs	r1, #3
 8004dbe:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	f002 f86b 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_3_12)
 8004dc6:	f504 7332 	add.w	r3, r4, #712	@ 0x2c8
 8004dca:	429d      	cmp	r5, r3
 8004dcc:	d105      	bne.n	8004dda <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x4c4>
    {
        //Interaction62
        //When RadioButton_3_12 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(3, 2 , 3);
 8004dce:	2303      	movs	r3, #3
 8004dd0:	2202      	movs	r2, #2
 8004dd2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	f002 f861 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_3_13)
 8004dda:	f504 7322 	add.w	r3, r4, #648	@ 0x288
 8004dde:	429d      	cmp	r5, r3
 8004de0:	d105      	bne.n	8004dee <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x4d8>
    {
        //Interaction63
        //When RadioButton_3_13 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(3, 1 , 0);
 8004de2:	2300      	movs	r3, #0
 8004de4:	2201      	movs	r2, #1
 8004de6:	2103      	movs	r1, #3
 8004de8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004dea:	f002 f857 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_3_14)
 8004dee:	f504 7312 	add.w	r3, r4, #584	@ 0x248
 8004df2:	429d      	cmp	r5, r3
 8004df4:	d105      	bne.n	8004e02 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x4ec>
    {
        //Interaction64
        //When RadioButton_3_14 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(3, 1 , 1);
 8004df6:	2301      	movs	r3, #1
 8004df8:	2103      	movs	r1, #3
 8004dfa:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	f002 f84d 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_3_15)
 8004e02:	f504 7302 	add.w	r3, r4, #520	@ 0x208
 8004e06:	429d      	cmp	r5, r3
 8004e08:	d105      	bne.n	8004e16 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x500>
    {
        //Interaction65
        //When RadioButton_3_15 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(3, 1 , 2);
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	2103      	movs	r1, #3
 8004e10:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004e12:	f002 f843 	bl	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_3_16)
 8004e16:	f504 73e4 	add.w	r3, r4, #456	@ 0x1c8
 8004e1a:	429d      	cmp	r5, r3
 8004e1c:	d107      	bne.n	8004e2e <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x518>
    {
        //Interaction66
        //When RadioButton_3_16 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(3, 1 , 3);
 8004e1e:	2303      	movs	r3, #3
 8004e20:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004e22:	2201      	movs	r2, #1
 8004e24:	4619      	mov	r1, r3
    }
}
 8004e26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        presenter->selectMatrizLed(3, 1 , 3);
 8004e2a:	f002 b837 	b.w	8006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>
}
 8004e2e:	bd70      	pop	{r4, r5, r6, pc}

08004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>:
    virtual void add(RadioButton& radioButton)
 8004e30:	b508      	push	{r3, lr}
        assert(size < CAPACITY && "RadioButtonGroup capacity exceeded!");
 8004e32:	f8b0 3104 	ldrh.w	r3, [r0, #260]	@ 0x104
 8004e36:	2b3f      	cmp	r3, #63	@ 0x3f
 8004e38:	d905      	bls.n	8004e46 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE+0x16>
 8004e3a:	4b09      	ldr	r3, [pc, #36]	@ (8004e60 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE+0x30>)
 8004e3c:	2141      	movs	r1, #65	@ 0x41
 8004e3e:	4a09      	ldr	r2, [pc, #36]	@ (8004e64 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE+0x34>)
 8004e40:	4809      	ldr	r0, [pc, #36]	@ (8004e68 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE+0x38>)
 8004e42:	f020 f9c9 	bl	80251d8 <__assert_func>
        radioButton.setAction(radioButtonClicked);
 8004e46:	f500 7284 	add.w	r2, r0, #264	@ 0x108
 8004e4a:	628a      	str	r2, [r1, #40]	@ 0x28
        radioButton.setDeselectedAction(radioButtonUnselected);
 8004e4c:	f500 728c 	add.w	r2, r0, #280	@ 0x118
        deselectedAction = &callback;
 8004e50:	63ca      	str	r2, [r1, #60]	@ 0x3c
        radioButtons[size++] = &radioButton;
 8004e52:	1c5a      	adds	r2, r3, #1
 8004e54:	f8a0 2104 	strh.w	r2, [r0, #260]	@ 0x104
 8004e58:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8004e5c:	6041      	str	r1, [r0, #4]
    }
 8004e5e:	bd08      	pop	{r3, pc}
 8004e60:	080285ec 	.word	0x080285ec
 8004e64:	08028625 	.word	0x08028625
 8004e68:	08028694 	.word	0x08028694

08004e6c <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:
{
 8004e6c:	b538      	push	{r3, r4, r5, lr}
    if (&src == &Nex)
 8004e6e:	f500 5391 	add.w	r3, r0, #4640	@ 0x1220
{
 8004e72:	4604      	mov	r4, r0
 8004e74:	460d      	mov	r5, r1
    if (&src == &Nex)
 8004e76:	4299      	cmp	r1, r3
 8004e78:	d103      	bne.n	8004e82 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
    

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8004e7a:	f011 fe4b 	bl	8016b14 <_ZN8touchgfx11Application11getInstanceEv>
        application().gotoWaitingScreenScreenNoTransition();
 8004e7e:	f7ff faa7 	bl	80043d0 <_ZN23FrontendApplicationBase35gotoWaitingScreenScreenNoTransitionEv>
    if (&src == &Back)
 8004e82:	f504 5094 	add.w	r0, r4, #4736	@ 0x1280
 8004e86:	301c      	adds	r0, #28
 8004e88:	4285      	cmp	r5, r0
 8004e8a:	d105      	bne.n	8004e98 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2c>
 8004e8c:	f011 fe42 	bl	8016b14 <_ZN8touchgfx11Application11getInstanceEv>
}
 8004e90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        application().gotoScreen1ScreenNoTransition();
 8004e94:	f7ff ba7c 	b.w	8004390 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
}
 8004e98:	bd38      	pop	{r3, r4, r5, pc}

08004e9a <_ZN8touchgfx16RadioButtonGroupILt64EE25radioButtonClickedHandlerERKNS_14AbstractButtonE>:
     * Handles the event that a RadioButton has been selected. deselects all other
     * RadioButtons.
     *
     * @param  radioButton the RadioButton that has been selected.
     */
    virtual void radioButtonClickedHandler(const AbstractButton& radioButton)
 8004e9a:	b570      	push	{r4, r5, r6, lr}
 8004e9c:	4604      	mov	r4, r0
 8004e9e:	460d      	mov	r5, r1
    {
        // Deselect other radio buttons
        for (uint16_t i = 0; i < size; i++)
 8004ea0:	2600      	movs	r6, #0
 8004ea2:	f8b4 2104 	ldrh.w	r2, [r4, #260]	@ 0x104
 8004ea6:	b2b3      	uxth	r3, r6
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d80e      	bhi.n	8004eca <_ZN8touchgfx16RadioButtonGroupILt64EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x30>
                    radioButtons[i]->setSelected(false);
                }
            }
        }

        if (radioButtonSelectedCallback && radioButtonSelectedCallback->isValid())
 8004eac:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 8004eb0:	b1c8      	cbz	r0, 8004ee6 <_ZN8touchgfx16RadioButtonGroupILt64EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x4c>
 8004eb2:	6803      	ldr	r3, [r0, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	4798      	blx	r3
 8004eb8:	b1a8      	cbz	r0, 8004ee6 <_ZN8touchgfx16RadioButtonGroupILt64EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x4c>
 8004eba:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
        {
            radioButtonSelectedCallback->execute(radioButton);
 8004ebe:	4629      	mov	r1, r5
 8004ec0:	6803      	ldr	r3, [r0, #0]
        }
    }
 8004ec2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            radioButtonSelectedCallback->execute(radioButton);
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	4718      	bx	r3
            if (radioButtons[i] != &radioButton)
 8004eca:	b2b3      	uxth	r3, r6
 8004ecc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004ed0:	6858      	ldr	r0, [r3, #4]
 8004ed2:	42a8      	cmp	r0, r5
 8004ed4:	d005      	beq.n	8004ee2 <_ZN8touchgfx16RadioButtonGroupILt64EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x48>
                if (radioButtons[i]->getSelected())
 8004ed6:	f890 3037 	ldrb.w	r3, [r0, #55]	@ 0x37
 8004eda:	b113      	cbz	r3, 8004ee2 <_ZN8touchgfx16RadioButtonGroupILt64EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x48>
                    radioButtons[i]->setSelected(false);
 8004edc:	2100      	movs	r1, #0
 8004ede:	f00f fa67 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
        for (uint16_t i = 0; i < size; i++)
 8004ee2:	3601      	adds	r6, #1
 8004ee4:	e7dd      	b.n	8004ea2 <_ZN8touchgfx16RadioButtonGroupILt64EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x8>
    }
 8004ee6:	bd70      	pop	{r4, r5, r6, pc}

08004ee8 <_ZN8touchgfx16RadioButtonGroupILt64EE28radioButtonDeselectedHandlerERKNS_14AbstractButtonE>:
    /**
     * Handles the event that a RadioButton has been deselected.
     *
     * @param  radioButton the RadioButton that has been deselected.
     */
    virtual void radioButtonDeselectedHandler(const AbstractButton& radioButton)
 8004ee8:	b570      	push	{r4, r5, r6, lr}
 8004eea:	4604      	mov	r4, r0
    {
        if (radioButtonDeselectedCallback && radioButtonDeselectedCallback->isValid())
 8004eec:	f8d0 012c 	ldr.w	r0, [r0, #300]	@ 0x12c
    virtual void radioButtonDeselectedHandler(const AbstractButton& radioButton)
 8004ef0:	460d      	mov	r5, r1
        if (radioButtonDeselectedCallback && radioButtonDeselectedCallback->isValid())
 8004ef2:	b158      	cbz	r0, 8004f0c <_ZN8touchgfx16RadioButtonGroupILt64EE28radioButtonDeselectedHandlerERKNS_14AbstractButtonE+0x24>
 8004ef4:	6803      	ldr	r3, [r0, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	4798      	blx	r3
 8004efa:	b138      	cbz	r0, 8004f0c <_ZN8touchgfx16RadioButtonGroupILt64EE28radioButtonDeselectedHandlerERKNS_14AbstractButtonE+0x24>
 8004efc:	f8d4 012c 	ldr.w	r0, [r4, #300]	@ 0x12c
        {
            radioButtonDeselectedCallback->execute(radioButton);
 8004f00:	4629      	mov	r1, r5
 8004f02:	6803      	ldr	r3, [r0, #0]
        }
    }
 8004f04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            radioButtonDeselectedCallback->execute(radioButton);
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	4718      	bx	r3
    }
 8004f0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004f10 <_ZN8touchgfx14AbstractButtonC1Ev>:
    AbstractButton()
 8004f10:	b510      	push	{r4, lr}
 8004f12:	4604      	mov	r4, r0
        : Widget(), action(), pressed(false)
 8004f14:	2226      	movs	r2, #38	@ 0x26
 8004f16:	2100      	movs	r1, #0
 8004f18:	f020 fbfa 	bl	8025710 <memset>
 8004f1c:	4620      	mov	r0, r4
 8004f1e:	f7ff fb13 	bl	8004548 <_ZN8touchgfx6WidgetC1Ev>
 8004f22:	4b05      	ldr	r3, [pc, #20]	@ (8004f38 <_ZN8touchgfx14AbstractButtonC1Ev+0x28>)
    }
 8004f24:	4620      	mov	r0, r4
        : Widget(), action(), pressed(false)
 8004f26:	6023      	str	r3, [r4, #0]
 8004f28:	2300      	movs	r3, #0
 8004f2a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004f2c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
        touchable = touch;
 8004f30:	2301      	movs	r3, #1
 8004f32:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    }
 8004f36:	bd10      	pop	{r4, pc}
 8004f38:	080294a8 	.word	0x080294a8

08004f3c <_ZN8touchgfx11RadioButtonC1Ev>:
    RadioButton()
 8004f3c:	b510      	push	{r4, lr}
 8004f3e:	4604      	mov	r4, r0
        : AbstractButton(), bitmapUnselected(), bitmapUnselectedPressed(), bitmapSelected(), bitmapSelectedPressed(), alpha(255), selected(false), deselectionEnabled(false), deselectedAction(0)
 8004f40:	f7ff ffe6 	bl	8004f10 <_ZN8touchgfx14AbstractButtonC1Ev>
 8004f44:	4b08      	ldr	r3, [pc, #32]	@ (8004f68 <_ZN8touchgfx11RadioButtonC1Ev+0x2c>)
 8004f46:	f04f 32ff 	mov.w	r2, #4294967295
    }
 8004f4a:	4620      	mov	r0, r4
        : AbstractButton(), bitmapUnselected(), bitmapUnselectedPressed(), bitmapSelected(), bitmapSelectedPressed(), alpha(255), selected(false), deselectionEnabled(false), deselectedAction(0)
 8004f4c:	6023      	str	r3, [r4, #0]
 8004f4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004f52:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 8004f54:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8004f58:	e9c4 230c 	strd	r2, r3, [r4, #48]	@ 0x30
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
 8004f62:	63e3      	str	r3, [r4, #60]	@ 0x3c
    }
 8004f64:	bd10      	pop	{r4, pc}
 8004f66:	bf00      	nop
 8004f68:	080297d4 	.word	0x080297d4

08004f6c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 8004f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        return typedTextId < numberOfTypedTexts;
 8004f6e:	4b19      	ldr	r3, [pc, #100]	@ (8004fd4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x68>)
 8004f70:	4606      	mov	r6, r0
 8004f72:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
    {
        if (typedText.hasValidId())
 8004f74:	881b      	ldrh	r3, [r3, #0]
 8004f76:	428b      	cmp	r3, r1
 8004f78:	d92a      	bls.n	8004fd0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x64>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004f7a:	4b17      	ldr	r3, [pc, #92]	@ (8004fd8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x6c>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	b92b      	cbnz	r3, 8004f8c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x20>
 8004f80:	4b16      	ldr	r3, [pc, #88]	@ (8004fdc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x70>)
 8004f82:	216c      	movs	r1, #108	@ 0x6c
 8004f84:	4a16      	ldr	r2, [pc, #88]	@ (8004fe0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x74>)
 8004f86:	4817      	ldr	r0, [pc, #92]	@ (8004fe4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x78>)
 8004f88:	f020 f926 	bl	80251d8 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 8004f8c:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8004f90:	4b15      	ldr	r3, [pc, #84]	@ (8004fe8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x7c>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 8004f98:	4b14      	ldr	r3, [pc, #80]	@ (8004fec <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x80>)
 8004f9a:	6818      	ldr	r0, [r3, #0]
 8004f9c:	f001 fd60 	bl	8006a60 <_ZNK8touchgfx5Texts7getTextEt>
        {
            const Font* f = typedText.getFont();
            const Unicode::UnicodeChar* s = typedText.getText();
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8004fa0:	682b      	ldr	r3, [r5, #0]
 8004fa2:	4607      	mov	r7, r0
 8004fa4:	4628      	mov	r0, r5
 8004fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa8:	4798      	blx	r3
 8004faa:	682b      	ldr	r3, [r5, #0]
 8004fac:	4604      	mov	r4, r0
 8004fae:	4639      	mov	r1, r7
 8004fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	4798      	blx	r3
 8004fb6:	fb14 f400 	smulbb	r4, r4, r0
 8004fba:	682b      	ldr	r3, [r5, #0]
 8004fbc:	4639      	mov	r1, r7
 8004fbe:	b2a4      	uxth	r4, r4
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc4:	4798      	blx	r3
 8004fc6:	1823      	adds	r3, r4, r0
 8004fc8:	b21b      	sxth	r3, r3
 8004fca:	f8a6 3046 	strh.w	r3, [r6, #70]	@ 0x46
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 8004fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	e7fa      	b.n	8004fca <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x5e>
 8004fd4:	24026474 	.word	0x24026474
 8004fd8:	24026470 	.word	0x24026470
 8004fdc:	080286f8 	.word	0x080286f8
 8004fe0:	0802873a 	.word	0x0802873a
 8004fe4:	08028775 	.word	0x08028775
 8004fe8:	24026478 	.word	0x24026478
 8004fec:	2402647c 	.word	0x2402647c

08004ff0 <_ZN15Screen2ViewBaseC1Ev>:
Screen2ViewBase::Screen2ViewBase() :
 8004ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff4:	4604      	mov	r4, r0
 8004ff6:	b0cd      	sub	sp, #308	@ 0x134
 8004ff8:	2500      	movs	r5, #0
 8004ffa:	f013 fca5 	bl	8018948 <_ZN8touchgfx6ScreenC1Ev>
    radioButtonSelectedCallback(this, &Screen2ViewBase::radioButtonSelectedCallbackHandler)
 8004ffe:	4627      	mov	r7, r4
 8005000:	4bda      	ldr	r3, [pc, #872]	@ (800536c <_ZN15Screen2ViewBaseC1Ev+0x37c>)
        : Widget(), alpha(255), color(0)
 8005002:	2226      	movs	r2, #38	@ 0x26
 8005004:	4629      	mov	r1, r5
 8005006:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8005008:	f50d 7b96 	add.w	fp, sp, #300	@ 0x12c
 800500c:	f847 3b40 	str.w	r3, [r7], #64
 8005010:	4638      	mov	r0, r7
 8005012:	f020 fb7d 	bl	8025710 <memset>
 8005016:	4638      	mov	r0, r7
 8005018:	f7ff fa96 	bl	8004548 <_ZN8touchgfx6WidgetC1Ev>
 800501c:	4bd4      	ldr	r3, [pc, #848]	@ (8005370 <_ZN15Screen2ViewBaseC1Ev+0x380>)
 800501e:	f104 086c 	add.w	r8, r4, #108	@ 0x6c
 8005022:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 8005026:	6423      	str	r3, [r4, #64]	@ 0x40
 8005028:	23ff      	movs	r3, #255	@ 0xff
 800502a:	4659      	mov	r1, fp
        : color(col)
 800502c:	66a5      	str	r5, [r4, #104]	@ 0x68
 800502e:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 8005032:	4640      	mov	r0, r8
 8005034:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 8005038:	f7ff fa98 	bl	800456c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800503c:	f104 0398 	add.w	r3, r4, #152	@ 0x98
        : pobject(pObject), pmemfun(pmemfun_1)
 8005040:	4acc      	ldr	r2, [pc, #816]	@ (8005374 <_ZN15Screen2ViewBaseC1Ev+0x384>)
 8005042:	2124      	movs	r1, #36	@ 0x24
        : size(0),
 8005044:	f8a4 519c 	strh.w	r5, [r4, #412]	@ 0x19c
 8005048:	9302      	str	r3, [sp, #8]
 800504a:	f504 5680 	add.w	r6, r4, #4096	@ 0x1000
          radioButtonDeselectedCallback(0)
 800504e:	4bca      	ldr	r3, [pc, #808]	@ (8005378 <_ZN15Screen2ViewBaseC1Ev+0x388>)
 8005050:	f04f 0a03 	mov.w	sl, #3
 8005054:	f8c4 21a0 	str.w	r2, [r4, #416]	@ 0x1a0
 8005058:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 800505c:	f8c4 21b0 	str.w	r2, [r4, #432]	@ 0x1b0
 8005060:	9b02      	ldr	r3, [sp, #8]
 8005062:	9a02      	ldr	r2, [sp, #8]
 8005064:	f8c4 31a4 	str.w	r3, [r4, #420]	@ 0x1a4
 8005068:	2301      	movs	r3, #1
 800506a:	f8c4 21b4 	str.w	r2, [r4, #436]	@ 0x1b4
 800506e:	2228      	movs	r2, #40	@ 0x28
 8005070:	e9c4 136a 	strd	r1, r3, [r4, #424]	@ 0x1a8
 8005074:	e9c4 236e 	strd	r2, r3, [r4, #440]	@ 0x1b8
 8005078:	f504 73e4 	add.w	r3, r4, #456	@ 0x1c8
 800507c:	e9c4 5570 	strd	r5, r5, [r4, #448]	@ 0x1c0
 8005080:	4618      	mov	r0, r3
 8005082:	9303      	str	r3, [sp, #12]
 8005084:	f7ff ff5a 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 8005088:	f504 7302 	add.w	r3, r4, #520	@ 0x208
 800508c:	4618      	mov	r0, r3
 800508e:	930c      	str	r3, [sp, #48]	@ 0x30
 8005090:	f7ff ff54 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 8005094:	f504 7312 	add.w	r3, r4, #584	@ 0x248
 8005098:	4618      	mov	r0, r3
 800509a:	930d      	str	r3, [sp, #52]	@ 0x34
 800509c:	f7ff ff4e 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 80050a0:	f504 7322 	add.w	r3, r4, #648	@ 0x288
 80050a4:	4618      	mov	r0, r3
 80050a6:	930e      	str	r3, [sp, #56]	@ 0x38
 80050a8:	f7ff ff48 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 80050ac:	f504 7332 	add.w	r3, r4, #712	@ 0x2c8
 80050b0:	4618      	mov	r0, r3
 80050b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80050b4:	f7ff ff42 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 80050b8:	f504 7342 	add.w	r3, r4, #776	@ 0x308
 80050bc:	4618      	mov	r0, r3
 80050be:	9310      	str	r3, [sp, #64]	@ 0x40
 80050c0:	f7ff ff3c 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 80050c4:	f504 7352 	add.w	r3, r4, #840	@ 0x348
 80050c8:	4618      	mov	r0, r3
 80050ca:	9311      	str	r3, [sp, #68]	@ 0x44
 80050cc:	f7ff ff36 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 80050d0:	f504 7362 	add.w	r3, r4, #904	@ 0x388
 80050d4:	4618      	mov	r0, r3
 80050d6:	9312      	str	r3, [sp, #72]	@ 0x48
 80050d8:	f7ff ff30 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 80050dc:	f504 7372 	add.w	r3, r4, #968	@ 0x3c8
 80050e0:	4618      	mov	r0, r3
 80050e2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80050e4:	f7ff ff2a 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 80050e8:	f504 6381 	add.w	r3, r4, #1032	@ 0x408
 80050ec:	4618      	mov	r0, r3
 80050ee:	9314      	str	r3, [sp, #80]	@ 0x50
 80050f0:	f7ff ff24 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 80050f4:	f504 6389 	add.w	r3, r4, #1096	@ 0x448
 80050f8:	4618      	mov	r0, r3
 80050fa:	9315      	str	r3, [sp, #84]	@ 0x54
 80050fc:	f7ff ff1e 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 8005100:	f504 6391 	add.w	r3, r4, #1160	@ 0x488
 8005104:	4618      	mov	r0, r3
 8005106:	9316      	str	r3, [sp, #88]	@ 0x58
 8005108:	f7ff ff18 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 800510c:	f504 6399 	add.w	r3, r4, #1224	@ 0x4c8
 8005110:	4618      	mov	r0, r3
 8005112:	9317      	str	r3, [sp, #92]	@ 0x5c
 8005114:	f7ff ff12 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 8005118:	f504 63a1 	add.w	r3, r4, #1288	@ 0x508
 800511c:	4618      	mov	r0, r3
 800511e:	9318      	str	r3, [sp, #96]	@ 0x60
 8005120:	f7ff ff0c 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 8005124:	f504 63a9 	add.w	r3, r4, #1352	@ 0x548
 8005128:	4618      	mov	r0, r3
 800512a:	9319      	str	r3, [sp, #100]	@ 0x64
 800512c:	f7ff ff06 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 8005130:	f504 63b1 	add.w	r3, r4, #1416	@ 0x588
 8005134:	4618      	mov	r0, r3
 8005136:	931a      	str	r3, [sp, #104]	@ 0x68
 8005138:	f7ff ff00 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 800513c:	f504 63b9 	add.w	r3, r4, #1480	@ 0x5c8
 8005140:	4618      	mov	r0, r3
 8005142:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005144:	f7ff fefa 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 8005148:	f504 63c1 	add.w	r3, r4, #1544	@ 0x608
 800514c:	4618      	mov	r0, r3
 800514e:	931c      	str	r3, [sp, #112]	@ 0x70
 8005150:	f7ff fef4 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 8005154:	f504 63c9 	add.w	r3, r4, #1608	@ 0x648
 8005158:	4618      	mov	r0, r3
 800515a:	931d      	str	r3, [sp, #116]	@ 0x74
 800515c:	f7ff feee 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 8005160:	f504 63d1 	add.w	r3, r4, #1672	@ 0x688
 8005164:	4618      	mov	r0, r3
 8005166:	931e      	str	r3, [sp, #120]	@ 0x78
 8005168:	f7ff fee8 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 800516c:	f504 63d9 	add.w	r3, r4, #1736	@ 0x6c8
 8005170:	4618      	mov	r0, r3
 8005172:	931f      	str	r3, [sp, #124]	@ 0x7c
 8005174:	f7ff fee2 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 8005178:	f504 63e1 	add.w	r3, r4, #1800	@ 0x708
 800517c:	4618      	mov	r0, r3
 800517e:	9320      	str	r3, [sp, #128]	@ 0x80
 8005180:	f7ff fedc 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 8005184:	f504 63e9 	add.w	r3, r4, #1864	@ 0x748
 8005188:	4618      	mov	r0, r3
 800518a:	9321      	str	r3, [sp, #132]	@ 0x84
 800518c:	f7ff fed6 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 8005190:	f504 63f1 	add.w	r3, r4, #1928	@ 0x788
 8005194:	4618      	mov	r0, r3
 8005196:	9322      	str	r3, [sp, #136]	@ 0x88
 8005198:	f7ff fed0 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 800519c:	f504 63f9 	add.w	r3, r4, #1992	@ 0x7c8
 80051a0:	4618      	mov	r0, r3
 80051a2:	9323      	str	r3, [sp, #140]	@ 0x8c
 80051a4:	f7ff feca 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 80051a8:	f604 0308 	addw	r3, r4, #2056	@ 0x808
 80051ac:	4618      	mov	r0, r3
 80051ae:	9324      	str	r3, [sp, #144]	@ 0x90
 80051b0:	f7ff fec4 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 80051b4:	f604 0348 	addw	r3, r4, #2120	@ 0x848
 80051b8:	4618      	mov	r0, r3
 80051ba:	9325      	str	r3, [sp, #148]	@ 0x94
 80051bc:	f7ff febe 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 80051c0:	f604 0388 	addw	r3, r4, #2184	@ 0x888
 80051c4:	4618      	mov	r0, r3
 80051c6:	9326      	str	r3, [sp, #152]	@ 0x98
 80051c8:	f7ff feb8 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 80051cc:	f604 03c8 	addw	r3, r4, #2248	@ 0x8c8
 80051d0:	4618      	mov	r0, r3
 80051d2:	9327      	str	r3, [sp, #156]	@ 0x9c
 80051d4:	f7ff feb2 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 80051d8:	f604 1308 	addw	r3, r4, #2312	@ 0x908
 80051dc:	4618      	mov	r0, r3
 80051de:	9328      	str	r3, [sp, #160]	@ 0xa0
 80051e0:	f7ff feac 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 80051e4:	f604 1348 	addw	r3, r4, #2376	@ 0x948
 80051e8:	4618      	mov	r0, r3
 80051ea:	9329      	str	r3, [sp, #164]	@ 0xa4
 80051ec:	f7ff fea6 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 80051f0:	f604 1388 	addw	r3, r4, #2440	@ 0x988
 80051f4:	4618      	mov	r0, r3
 80051f6:	932a      	str	r3, [sp, #168]	@ 0xa8
 80051f8:	f7ff fea0 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 80051fc:	f604 13c8 	addw	r3, r4, #2504	@ 0x9c8
 8005200:	4618      	mov	r0, r3
 8005202:	932b      	str	r3, [sp, #172]	@ 0xac
 8005204:	f7ff fe9a 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 8005208:	f604 2308 	addw	r3, r4, #2568	@ 0xa08
 800520c:	4618      	mov	r0, r3
 800520e:	932c      	str	r3, [sp, #176]	@ 0xb0
 8005210:	f7ff fe94 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 8005214:	f604 2348 	addw	r3, r4, #2632	@ 0xa48
 8005218:	4618      	mov	r0, r3
 800521a:	932d      	str	r3, [sp, #180]	@ 0xb4
 800521c:	f7ff fe8e 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 8005220:	f604 2388 	addw	r3, r4, #2696	@ 0xa88
 8005224:	4618      	mov	r0, r3
 8005226:	932e      	str	r3, [sp, #184]	@ 0xb8
 8005228:	f7ff fe88 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 800522c:	f604 23c8 	addw	r3, r4, #2760	@ 0xac8
 8005230:	4618      	mov	r0, r3
 8005232:	932f      	str	r3, [sp, #188]	@ 0xbc
 8005234:	f7ff fe82 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 8005238:	f604 3308 	addw	r3, r4, #2824	@ 0xb08
 800523c:	4618      	mov	r0, r3
 800523e:	9330      	str	r3, [sp, #192]	@ 0xc0
 8005240:	f7ff fe7c 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 8005244:	f604 3348 	addw	r3, r4, #2888	@ 0xb48
 8005248:	4618      	mov	r0, r3
 800524a:	9331      	str	r3, [sp, #196]	@ 0xc4
 800524c:	f7ff fe76 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 8005250:	f604 3388 	addw	r3, r4, #2952	@ 0xb88
 8005254:	4618      	mov	r0, r3
 8005256:	9332      	str	r3, [sp, #200]	@ 0xc8
 8005258:	f7ff fe70 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 800525c:	f604 33c8 	addw	r3, r4, #3016	@ 0xbc8
 8005260:	4618      	mov	r0, r3
 8005262:	9333      	str	r3, [sp, #204]	@ 0xcc
 8005264:	f7ff fe6a 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 8005268:	f604 4308 	addw	r3, r4, #3080	@ 0xc08
 800526c:	4618      	mov	r0, r3
 800526e:	9334      	str	r3, [sp, #208]	@ 0xd0
 8005270:	f7ff fe64 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 8005274:	f604 4348 	addw	r3, r4, #3144	@ 0xc48
 8005278:	4618      	mov	r0, r3
 800527a:	9335      	str	r3, [sp, #212]	@ 0xd4
 800527c:	f7ff fe5e 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 8005280:	f604 4388 	addw	r3, r4, #3208	@ 0xc88
 8005284:	4618      	mov	r0, r3
 8005286:	9336      	str	r3, [sp, #216]	@ 0xd8
 8005288:	f7ff fe58 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 800528c:	f604 43c8 	addw	r3, r4, #3272	@ 0xcc8
 8005290:	4618      	mov	r0, r3
 8005292:	9337      	str	r3, [sp, #220]	@ 0xdc
 8005294:	f7ff fe52 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 8005298:	f604 5308 	addw	r3, r4, #3336	@ 0xd08
 800529c:	4618      	mov	r0, r3
 800529e:	9338      	str	r3, [sp, #224]	@ 0xe0
 80052a0:	f7ff fe4c 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 80052a4:	f604 5348 	addw	r3, r4, #3400	@ 0xd48
 80052a8:	4618      	mov	r0, r3
 80052aa:	9339      	str	r3, [sp, #228]	@ 0xe4
 80052ac:	f7ff fe46 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 80052b0:	f604 5388 	addw	r3, r4, #3464	@ 0xd88
 80052b4:	4618      	mov	r0, r3
 80052b6:	933a      	str	r3, [sp, #232]	@ 0xe8
 80052b8:	f7ff fe40 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 80052bc:	f604 53c8 	addw	r3, r4, #3528	@ 0xdc8
 80052c0:	4618      	mov	r0, r3
 80052c2:	933b      	str	r3, [sp, #236]	@ 0xec
 80052c4:	f7ff fe3a 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 80052c8:	f604 6308 	addw	r3, r4, #3592	@ 0xe08
 80052cc:	4618      	mov	r0, r3
 80052ce:	933c      	str	r3, [sp, #240]	@ 0xf0
 80052d0:	f7ff fe34 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 80052d4:	f604 6348 	addw	r3, r4, #3656	@ 0xe48
 80052d8:	4618      	mov	r0, r3
 80052da:	933d      	str	r3, [sp, #244]	@ 0xf4
 80052dc:	f7ff fe2e 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 80052e0:	f604 6388 	addw	r3, r4, #3720	@ 0xe88
 80052e4:	4618      	mov	r0, r3
 80052e6:	933e      	str	r3, [sp, #248]	@ 0xf8
 80052e8:	f7ff fe28 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 80052ec:	f604 63c8 	addw	r3, r4, #3784	@ 0xec8
 80052f0:	4618      	mov	r0, r3
 80052f2:	933f      	str	r3, [sp, #252]	@ 0xfc
 80052f4:	f7ff fe22 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 80052f8:	f604 7308 	addw	r3, r4, #3848	@ 0xf08
 80052fc:	4618      	mov	r0, r3
 80052fe:	9340      	str	r3, [sp, #256]	@ 0x100
 8005300:	f7ff fe1c 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 8005304:	f604 7348 	addw	r3, r4, #3912	@ 0xf48
 8005308:	4618      	mov	r0, r3
 800530a:	9341      	str	r3, [sp, #260]	@ 0x104
 800530c:	f7ff fe16 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 8005310:	f604 7388 	addw	r3, r4, #3976	@ 0xf88
 8005314:	4618      	mov	r0, r3
 8005316:	9342      	str	r3, [sp, #264]	@ 0x108
 8005318:	f7ff fe10 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 800531c:	f604 73c8 	addw	r3, r4, #4040	@ 0xfc8
 8005320:	4618      	mov	r0, r3
 8005322:	9343      	str	r3, [sp, #268]	@ 0x10c
 8005324:	f7ff fe0a 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 8005328:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800532c:	3308      	adds	r3, #8
 800532e:	4618      	mov	r0, r3
 8005330:	9304      	str	r3, [sp, #16]
 8005332:	f7ff fe03 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 8005336:	f504 5382 	add.w	r3, r4, #4160	@ 0x1040
 800533a:	3308      	adds	r3, #8
 800533c:	4618      	mov	r0, r3
 800533e:	9305      	str	r3, [sp, #20]
 8005340:	f7ff fdfc 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 8005344:	f504 5384 	add.w	r3, r4, #4224	@ 0x1080
 8005348:	3308      	adds	r3, #8
 800534a:	4618      	mov	r0, r3
 800534c:	9306      	str	r3, [sp, #24]
 800534e:	f7ff fdf5 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 8005352:	f504 5386 	add.w	r3, r4, #4288	@ 0x10c0
 8005356:	3308      	adds	r3, #8
 8005358:	4618      	mov	r0, r3
 800535a:	9307      	str	r3, [sp, #28]
 800535c:	f7ff fdee 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 8005360:	f504 5388 	add.w	r3, r4, #4352	@ 0x1100
 8005364:	3308      	adds	r3, #8
 8005366:	4618      	mov	r0, r3
 8005368:	e008      	b.n	800537c <_ZN15Screen2ViewBaseC1Ev+0x38c>
 800536a:	bf00      	nop
 800536c:	08028838 	.word	0x08028838
 8005370:	08029618 	.word	0x08029618
 8005374:	080287d4 	.word	0x080287d4
 8005378:	080287ec 	.word	0x080287ec
 800537c:	9308      	str	r3, [sp, #32]
 800537e:	f7ff fddd 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 8005382:	f504 538a 	add.w	r3, r4, #4416	@ 0x1140
 8005386:	3308      	adds	r3, #8
 8005388:	4618      	mov	r0, r3
 800538a:	9309      	str	r3, [sp, #36]	@ 0x24
 800538c:	f7ff fdd6 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 8005390:	f504 538c 	add.w	r3, r4, #4480	@ 0x1180
 8005394:	3308      	adds	r3, #8
 8005396:	4618      	mov	r0, r3
 8005398:	930a      	str	r3, [sp, #40]	@ 0x28
 800539a:	f7ff fdcf 	bl	8004f3c <_ZN8touchgfx11RadioButtonC1Ev>
 800539e:	f504 538e 	add.w	r3, r4, #4544	@ 0x11c0
 80053a2:	4659      	mov	r1, fp
 80053a4:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 80053a8:	3308      	adds	r3, #8
 80053aa:	4618      	mov	r0, r3
 80053ac:	9344      	str	r3, [sp, #272]	@ 0x110
 80053ae:	f7ff f8dd 	bl	800456c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80053b2:	f504 538f 	add.w	r3, r4, #4576	@ 0x11e0
 80053b6:	4659      	mov	r1, fp
 80053b8:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 80053bc:	3314      	adds	r3, #20
 80053be:	4618      	mov	r0, r3
 80053c0:	9345      	str	r3, [sp, #276]	@ 0x114
 80053c2:	f7ff f8d3 	bl	800456c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80053c6:	f504 5391 	add.w	r3, r4, #4640	@ 0x1220
 80053ca:	4618      	mov	r0, r3
 80053cc:	9347      	str	r3, [sp, #284]	@ 0x11c
 80053ce:	f00e ff1f 	bl	8014210 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80053d2:	f504 5393 	add.w	r3, r4, #4704	@ 0x1260
 80053d6:	3308      	adds	r3, #8
 80053d8:	4618      	mov	r0, r3
 80053da:	9346      	str	r3, [sp, #280]	@ 0x118
 80053dc:	f7ff fd98 	bl	8004f10 <_ZN8touchgfx14AbstractButtonC1Ev>
 80053e0:	4bd1      	ldr	r3, [pc, #836]	@ (8005728 <_ZN15Screen2ViewBaseC1Ev+0x738>)
 80053e2:	f8a6 9296 	strh.w	r9, [r6, #662]	@ 0x296
 80053e6:	f8c6 3268 	str.w	r3, [r6, #616]	@ 0x268
 80053ea:	f504 5394 	add.w	r3, r4, #4736	@ 0x1280
 80053ee:	f8a6 9298 	strh.w	r9, [r6, #664]	@ 0x298
 80053f2:	331c      	adds	r3, #28
 80053f4:	f886 929a 	strb.w	r9, [r6, #666]	@ 0x29a
 80053f8:	f04f 0904 	mov.w	r9, #4
 80053fc:	4618      	mov	r0, r3
 80053fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005400:	f00e ff06 	bl	8014210 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8005404:	4bc9      	ldr	r3, [pc, #804]	@ (800572c <_ZN15Screen2ViewBaseC1Ev+0x73c>)
 8005406:	4aca      	ldr	r2, [pc, #808]	@ (8005730 <_ZN15Screen2ViewBaseC1Ev+0x740>)
        setXY(x, y);
 8005408:	4629      	mov	r1, r5
 800540a:	4638      	mov	r0, r7
 800540c:	e9c6 34b9 	strd	r3, r4, [r6, #740]	@ 0x2e4
 8005410:	e9c6 34bd 	strd	r3, r4, [r6, #756]	@ 0x2f4
 8005414:	4bc7      	ldr	r3, [pc, #796]	@ (8005734 <_ZN15Screen2ViewBaseC1Ev+0x744>)
 8005416:	e9c6 25bb 	strd	r2, r5, [r6, #748]	@ 0x2ec
 800541a:	e9c6 35bf 	strd	r3, r5, [r6, #764]	@ 0x2fc
 800541e:	462a      	mov	r2, r5
 8005420:	1d26      	adds	r6, r4, #4
 8005422:	f7ff f884 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8005426:	4638      	mov	r0, r7
 8005428:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800542c:	f7fe f8a6 	bl	800357c <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 8005430:	4638      	mov	r0, r7
 8005432:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8005436:	f7fe f8a3 	bl	8003580 <_ZN8touchgfx8Drawable9setHeightEs>
        color = newColor;
 800543a:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 800543e:	4639      	mov	r1, r7
 8005440:	4630      	mov	r0, r6
 8005442:	66a3      	str	r3, [r4, #104]	@ 0x68
 8005444:	2706      	movs	r7, #6
 8005446:	f00b fab1 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(-99, -42);
 800544a:	f06f 0229 	mvn.w	r2, #41	@ 0x29
 800544e:	4640      	mov	r0, r8
 8005450:	f06f 0162 	mvn.w	r1, #98	@ 0x62
 8005454:	f7ff f86b 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
 8005458:	2307      	movs	r3, #7
    image1.setBitmap(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_BACKGROUNDS_1024X600_METEOR_RAIN_ID));
 800545a:	4659      	mov	r1, fp
 800545c:	4640      	mov	r0, r8
 800545e:	f8ad 312c 	strh.w	r3, [sp, #300]	@ 0x12c
 8005462:	f00e fd94 	bl	8013f8e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8005466:	4641      	mov	r1, r8
 8005468:	4630      	mov	r0, r6
 800546a:	f00b fa9f 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    radioButtonGroup1.setRadioButtonSelectedHandler(radioButtonSelectedCallback);
 800546e:	f504 5397 	add.w	r3, r4, #4832	@ 0x12e0
 8005472:	f04f 0805 	mov.w	r8, #5
    RadioButton_3_16.setXY(750, 308);
 8005476:	9803      	ldr	r0, [sp, #12]
    radioButtonGroup1.setRadioButtonSelectedHandler(radioButtonSelectedCallback);
 8005478:	3314      	adds	r3, #20
    RadioButton_3_16.setXY(750, 308);
 800547a:	f44f 729a 	mov.w	r2, #308	@ 0x134
 800547e:	f240 21ee 	movw	r1, #750	@ 0x2ee
        radioButtonSelectedCallback = &callback;
 8005482:	f8c4 31c0 	str.w	r3, [r4, #448]	@ 0x1c0
 8005486:	f7ff f852 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_16.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 800548a:	ab4a      	add	r3, sp, #296	@ 0x128
 800548c:	aa49      	add	r2, sp, #292	@ 0x124
 800548e:	a948      	add	r1, sp, #288	@ 0x120
 8005490:	9803      	ldr	r0, [sp, #12]
 8005492:	f8cd b000 	str.w	fp, [sp]
 8005496:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 800549a:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 800549e:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 80054a2:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 80054a6:	f00e fee2 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_16.setSelected(false);
 80054aa:	4629      	mov	r1, r5
 80054ac:	9803      	ldr	r0, [sp, #12]
 80054ae:	f00e ff7f 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
        deselectionEnabled = state;
 80054b2:	f884 5200 	strb.w	r5, [r4, #512]	@ 0x200
    radioButtonGroup1.add(RadioButton_3_16);
 80054b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054ba:	f7ff fcb9 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80054be:	9903      	ldr	r1, [sp, #12]
 80054c0:	4630      	mov	r0, r6
 80054c2:	f00b fa73 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_15.setXY(700, 308);
 80054c6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80054c8:	f44f 729a 	mov.w	r2, #308	@ 0x134
 80054cc:	f44f 712f 	mov.w	r1, #700	@ 0x2bc
 80054d0:	f7ff f82d 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_15.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80054d4:	ab4a      	add	r3, sp, #296	@ 0x128
 80054d6:	aa49      	add	r2, sp, #292	@ 0x124
 80054d8:	a948      	add	r1, sp, #288	@ 0x120
 80054da:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80054dc:	f8cd b000 	str.w	fp, [sp]
 80054e0:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 80054e4:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 80054e8:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 80054ec:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 80054f0:	f00e febd 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_15.setSelected(false);
 80054f4:	4629      	mov	r1, r5
 80054f6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80054f8:	f00e ff5a 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_15);
 80054fc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80054fe:	9802      	ldr	r0, [sp, #8]
 8005500:	f884 5240 	strb.w	r5, [r4, #576]	@ 0x240
 8005504:	f7ff fc94 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005508:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800550a:	4630      	mov	r0, r6
 800550c:	f00b fa4e 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_14.setXY(650, 308);
 8005510:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005512:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8005516:	f240 218a 	movw	r1, #650	@ 0x28a
 800551a:	f7ff f808 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_14.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 800551e:	ab4a      	add	r3, sp, #296	@ 0x128
 8005520:	aa49      	add	r2, sp, #292	@ 0x124
 8005522:	a948      	add	r1, sp, #288	@ 0x120
 8005524:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005526:	f8cd b000 	str.w	fp, [sp]
 800552a:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 800552e:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005532:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005536:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 800553a:	f00e fe98 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_14.setSelected(false);
 800553e:	4629      	mov	r1, r5
 8005540:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005542:	f00e ff35 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_14);
 8005546:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005548:	9802      	ldr	r0, [sp, #8]
 800554a:	f884 5280 	strb.w	r5, [r4, #640]	@ 0x280
 800554e:	f7ff fc6f 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005552:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005554:	4630      	mov	r0, r6
 8005556:	f00b fa29 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_13.setXY(600, 308);
 800555a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800555c:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8005560:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8005564:	f7fe ffe3 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_13.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005568:	ab4a      	add	r3, sp, #296	@ 0x128
 800556a:	aa49      	add	r2, sp, #292	@ 0x124
 800556c:	a948      	add	r1, sp, #288	@ 0x120
 800556e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8005570:	f8cd b000 	str.w	fp, [sp]
 8005574:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005578:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 800557c:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005580:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005584:	f00e fe73 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_13.setSelected(false);
 8005588:	4629      	mov	r1, r5
 800558a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800558c:	f00e ff10 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_13);
 8005590:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005592:	9802      	ldr	r0, [sp, #8]
 8005594:	f884 52c0 	strb.w	r5, [r4, #704]	@ 0x2c0
 8005598:	f7ff fc4a 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 800559c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800559e:	4630      	mov	r0, r6
 80055a0:	f00b fa04 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_12.setXY(750, 258);
 80055a4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80055a6:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80055aa:	f240 21ee 	movw	r1, #750	@ 0x2ee
 80055ae:	f7fe ffbe 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_12.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80055b2:	ab4a      	add	r3, sp, #296	@ 0x128
 80055b4:	aa49      	add	r2, sp, #292	@ 0x124
 80055b6:	a948      	add	r1, sp, #288	@ 0x120
 80055b8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80055ba:	f8cd b000 	str.w	fp, [sp]
 80055be:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 80055c2:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 80055c6:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 80055ca:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 80055ce:	f00e fe4e 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_12.setSelected(false);
 80055d2:	4629      	mov	r1, r5
 80055d4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80055d6:	f00e feeb 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_12);
 80055da:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80055dc:	9802      	ldr	r0, [sp, #8]
 80055de:	f884 5300 	strb.w	r5, [r4, #768]	@ 0x300
 80055e2:	f7ff fc25 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80055e6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80055e8:	4630      	mov	r0, r6
 80055ea:	f00b f9df 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_11.setXY(700, 258);
 80055ee:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80055f0:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80055f4:	f44f 712f 	mov.w	r1, #700	@ 0x2bc
 80055f8:	f7fe ff99 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_11.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80055fc:	ab4a      	add	r3, sp, #296	@ 0x128
 80055fe:	aa49      	add	r2, sp, #292	@ 0x124
 8005600:	a948      	add	r1, sp, #288	@ 0x120
 8005602:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005604:	f8cd b000 	str.w	fp, [sp]
 8005608:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 800560c:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005610:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005614:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005618:	f00e fe29 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_11.setSelected(false);
 800561c:	4629      	mov	r1, r5
 800561e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005620:	f00e fec6 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_11);
 8005624:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8005626:	9802      	ldr	r0, [sp, #8]
 8005628:	f884 5340 	strb.w	r5, [r4, #832]	@ 0x340
 800562c:	f7ff fc00 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005630:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8005632:	4630      	mov	r0, r6
 8005634:	f00b f9ba 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_10.setXY(650, 258);
 8005638:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800563a:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800563e:	f240 218a 	movw	r1, #650	@ 0x28a
 8005642:	f7fe ff74 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_10.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005646:	ab4a      	add	r3, sp, #296	@ 0x128
 8005648:	aa49      	add	r2, sp, #292	@ 0x124
 800564a:	a948      	add	r1, sp, #288	@ 0x120
 800564c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800564e:	f8cd b000 	str.w	fp, [sp]
 8005652:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005656:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 800565a:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 800565e:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005662:	f00e fe04 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_10.setSelected(false);
 8005666:	4629      	mov	r1, r5
 8005668:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800566a:	f00e fea1 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_10);
 800566e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8005670:	9802      	ldr	r0, [sp, #8]
 8005672:	f884 5380 	strb.w	r5, [r4, #896]	@ 0x380
 8005676:	f7ff fbdb 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 800567a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800567c:	4630      	mov	r0, r6
 800567e:	f00b f995 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_9.setXY(600, 258);
 8005682:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8005684:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8005688:	f44f 7116 	mov.w	r1, #600	@ 0x258
 800568c:	f7fe ff4f 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_9.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005690:	ab4a      	add	r3, sp, #296	@ 0x128
 8005692:	aa49      	add	r2, sp, #292	@ 0x124
 8005694:	a948      	add	r1, sp, #288	@ 0x120
 8005696:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8005698:	f8cd b000 	str.w	fp, [sp]
 800569c:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 80056a0:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 80056a4:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 80056a8:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 80056ac:	f00e fddf 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_9.setSelected(false);
 80056b0:	4629      	mov	r1, r5
 80056b2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80056b4:	f00e fe7c 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_9);
 80056b8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80056ba:	9802      	ldr	r0, [sp, #8]
 80056bc:	f884 53c0 	strb.w	r5, [r4, #960]	@ 0x3c0
 80056c0:	f7ff fbb6 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80056c4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80056c6:	4630      	mov	r0, r6
 80056c8:	f00b f970 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_8.setXY(750, 208);
 80056cc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80056ce:	22d0      	movs	r2, #208	@ 0xd0
 80056d0:	f240 21ee 	movw	r1, #750	@ 0x2ee
 80056d4:	f7fe ff2b 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_8.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80056d8:	ab4a      	add	r3, sp, #296	@ 0x128
 80056da:	aa49      	add	r2, sp, #292	@ 0x124
 80056dc:	a948      	add	r1, sp, #288	@ 0x120
 80056de:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80056e0:	f8cd b000 	str.w	fp, [sp]
 80056e4:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 80056e8:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 80056ec:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 80056f0:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 80056f4:	f00e fdbb 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_8.setSelected(false);
 80056f8:	4629      	mov	r1, r5
 80056fa:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80056fc:	f00e fe58 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_8);
 8005700:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005702:	9802      	ldr	r0, [sp, #8]
 8005704:	f884 5400 	strb.w	r5, [r4, #1024]	@ 0x400
 8005708:	f7ff fb92 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 800570c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800570e:	4630      	mov	r0, r6
 8005710:	f00b f94c 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_7.setXY(700, 208);
 8005714:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8005716:	22d0      	movs	r2, #208	@ 0xd0
 8005718:	f44f 712f 	mov.w	r1, #700	@ 0x2bc
 800571c:	f7fe ff07 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_7.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005720:	ab4a      	add	r3, sp, #296	@ 0x128
 8005722:	aa49      	add	r2, sp, #292	@ 0x124
 8005724:	a948      	add	r1, sp, #288	@ 0x120
 8005726:	e007      	b.n	8005738 <_ZN15Screen2ViewBaseC1Ev+0x748>
 8005728:	08029680 	.word	0x08029680
 800572c:	08028820 	.word	0x08028820
 8005730:	08004e6d 	.word	0x08004e6d
 8005734:	08004917 	.word	0x08004917
 8005738:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800573a:	f8cd b000 	str.w	fp, [sp]
 800573e:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005742:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005746:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 800574a:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 800574e:	f00e fd8e 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_7.setSelected(false);
 8005752:	4629      	mov	r1, r5
 8005754:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8005756:	f00e fe2b 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_7);
 800575a:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800575c:	9802      	ldr	r0, [sp, #8]
 800575e:	f884 5440 	strb.w	r5, [r4, #1088]	@ 0x440
 8005762:	f7ff fb65 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005766:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8005768:	4630      	mov	r0, r6
 800576a:	f00b f91f 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_6.setXY(650, 208);
 800576e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8005770:	22d0      	movs	r2, #208	@ 0xd0
 8005772:	f240 218a 	movw	r1, #650	@ 0x28a
 8005776:	f7fe feda 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_6.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 800577a:	ab4a      	add	r3, sp, #296	@ 0x128
 800577c:	aa49      	add	r2, sp, #292	@ 0x124
 800577e:	a948      	add	r1, sp, #288	@ 0x120
 8005780:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8005782:	f8cd b000 	str.w	fp, [sp]
 8005786:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 800578a:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 800578e:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005792:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005796:	f00e fd6a 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_6.setSelected(false);
 800579a:	4629      	mov	r1, r5
 800579c:	9815      	ldr	r0, [sp, #84]	@ 0x54
 800579e:	f00e fe07 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_6);
 80057a2:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80057a4:	9802      	ldr	r0, [sp, #8]
 80057a6:	f884 5480 	strb.w	r5, [r4, #1152]	@ 0x480
 80057aa:	f7ff fb41 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80057ae:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80057b0:	4630      	mov	r0, r6
 80057b2:	f00b f8fb 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_5.setXY(600, 208);
 80057b6:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80057b8:	22d0      	movs	r2, #208	@ 0xd0
 80057ba:	f44f 7116 	mov.w	r1, #600	@ 0x258
 80057be:	f7fe feb6 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_5.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80057c2:	ab4a      	add	r3, sp, #296	@ 0x128
 80057c4:	aa49      	add	r2, sp, #292	@ 0x124
 80057c6:	a948      	add	r1, sp, #288	@ 0x120
 80057c8:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80057ca:	f8cd b000 	str.w	fp, [sp]
 80057ce:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 80057d2:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 80057d6:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 80057da:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 80057de:	f00e fd46 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_5.setSelected(false);
 80057e2:	4629      	mov	r1, r5
 80057e4:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80057e6:	f00e fde3 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_5);
 80057ea:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80057ec:	9802      	ldr	r0, [sp, #8]
 80057ee:	f884 54c0 	strb.w	r5, [r4, #1216]	@ 0x4c0
 80057f2:	f7ff fb1d 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80057f6:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80057f8:	4630      	mov	r0, r6
 80057fa:	f00b f8d7 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_4.setXY(750, 158);
 80057fe:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8005800:	229e      	movs	r2, #158	@ 0x9e
 8005802:	f240 21ee 	movw	r1, #750	@ 0x2ee
 8005806:	f7fe fe92 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_4.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 800580a:	ab4a      	add	r3, sp, #296	@ 0x128
 800580c:	aa49      	add	r2, sp, #292	@ 0x124
 800580e:	a948      	add	r1, sp, #288	@ 0x120
 8005810:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8005812:	f8cd b000 	str.w	fp, [sp]
 8005816:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 800581a:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 800581e:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005822:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005826:	f00e fd22 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_4.setSelected(false);
 800582a:	4629      	mov	r1, r5
 800582c:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800582e:	f00e fdbf 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_4);
 8005832:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8005834:	9802      	ldr	r0, [sp, #8]
 8005836:	f884 5500 	strb.w	r5, [r4, #1280]	@ 0x500
 800583a:	f7ff faf9 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 800583e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8005840:	4630      	mov	r0, r6
 8005842:	f00b f8b3 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_3.setXY(700, 158);
 8005846:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8005848:	229e      	movs	r2, #158	@ 0x9e
 800584a:	f44f 712f 	mov.w	r1, #700	@ 0x2bc
 800584e:	f7fe fe6e 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_3.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005852:	ab4a      	add	r3, sp, #296	@ 0x128
 8005854:	aa49      	add	r2, sp, #292	@ 0x124
 8005856:	a948      	add	r1, sp, #288	@ 0x120
 8005858:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800585a:	f8cd b000 	str.w	fp, [sp]
 800585e:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005862:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005866:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 800586a:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 800586e:	f00e fcfe 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_3.setSelected(false);
 8005872:	4629      	mov	r1, r5
 8005874:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8005876:	f00e fd9b 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_3);
 800587a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800587c:	9802      	ldr	r0, [sp, #8]
 800587e:	f884 5540 	strb.w	r5, [r4, #1344]	@ 0x540
 8005882:	f7ff fad5 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005886:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8005888:	4630      	mov	r0, r6
 800588a:	f00b f88f 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_2.setXY(650, 158);
 800588e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005890:	229e      	movs	r2, #158	@ 0x9e
 8005892:	f240 218a 	movw	r1, #650	@ 0x28a
 8005896:	f7fe fe4a 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_2.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 800589a:	ab4a      	add	r3, sp, #296	@ 0x128
 800589c:	aa49      	add	r2, sp, #292	@ 0x124
 800589e:	a948      	add	r1, sp, #288	@ 0x120
 80058a0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80058a2:	f8cd b000 	str.w	fp, [sp]
 80058a6:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 80058aa:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 80058ae:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 80058b2:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 80058b6:	f00e fcda 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_2.setSelected(false);
 80058ba:	4629      	mov	r1, r5
 80058bc:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80058be:	f00e fd77 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_2);
 80058c2:	9919      	ldr	r1, [sp, #100]	@ 0x64
 80058c4:	9802      	ldr	r0, [sp, #8]
 80058c6:	f884 5580 	strb.w	r5, [r4, #1408]	@ 0x580
 80058ca:	f7ff fab1 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80058ce:	9919      	ldr	r1, [sp, #100]	@ 0x64
 80058d0:	4630      	mov	r0, r6
 80058d2:	f00b f86b 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_1.setXY(600, 158);
 80058d6:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80058d8:	229e      	movs	r2, #158	@ 0x9e
 80058da:	f44f 7116 	mov.w	r1, #600	@ 0x258
 80058de:	f7fe fe26 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80058e2:	ab4a      	add	r3, sp, #296	@ 0x128
 80058e4:	aa49      	add	r2, sp, #292	@ 0x124
 80058e6:	a948      	add	r1, sp, #288	@ 0x120
 80058e8:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80058ea:	f8cd b000 	str.w	fp, [sp]
 80058ee:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 80058f2:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 80058f6:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 80058fa:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 80058fe:	f00e fcb6 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_1.setSelected(false);
 8005902:	4629      	mov	r1, r5
 8005904:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8005906:	f00e fd53 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_1);
 800590a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800590c:	9802      	ldr	r0, [sp, #8]
 800590e:	f884 55c0 	strb.w	r5, [r4, #1472]	@ 0x5c0
 8005912:	f7ff fa8d 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005916:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005918:	4630      	mov	r0, r6
 800591a:	f00b f847 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_16.setXY(550, 308);
 800591e:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8005920:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8005924:	f240 2126 	movw	r1, #550	@ 0x226
 8005928:	f7fe fe01 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_16.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 800592c:	ab4a      	add	r3, sp, #296	@ 0x128
 800592e:	aa49      	add	r2, sp, #292	@ 0x124
 8005930:	a948      	add	r1, sp, #288	@ 0x120
 8005932:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8005934:	f8cd b000 	str.w	fp, [sp]
 8005938:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 800593c:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005940:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005944:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005948:	f00e fc91 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_16.setSelected(false);
 800594c:	4629      	mov	r1, r5
 800594e:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8005950:	f00e fd2e 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_16);
 8005954:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8005956:	9802      	ldr	r0, [sp, #8]
 8005958:	f884 5600 	strb.w	r5, [r4, #1536]	@ 0x600
 800595c:	f7ff fa68 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005960:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8005962:	4630      	mov	r0, r6
 8005964:	f00b f822 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_15.setXY(500, 308);
 8005968:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800596a:	f44f 729a 	mov.w	r2, #308	@ 0x134
 800596e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8005972:	f7fe fddc 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_15.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005976:	ab4a      	add	r3, sp, #296	@ 0x128
 8005978:	aa49      	add	r2, sp, #292	@ 0x124
 800597a:	a948      	add	r1, sp, #288	@ 0x120
 800597c:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800597e:	f8cd b000 	str.w	fp, [sp]
 8005982:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005986:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 800598a:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 800598e:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005992:	f00e fc6c 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_15.setSelected(false);
 8005996:	4629      	mov	r1, r5
 8005998:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800599a:	f00e fd09 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_15);
 800599e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80059a0:	9802      	ldr	r0, [sp, #8]
 80059a2:	f884 5640 	strb.w	r5, [r4, #1600]	@ 0x640
 80059a6:	f7ff fa43 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80059aa:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80059ac:	4630      	mov	r0, r6
 80059ae:	f00a fffd 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_14.setXY(450, 308);
 80059b2:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80059b4:	f44f 729a 	mov.w	r2, #308	@ 0x134
 80059b8:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 80059bc:	f7fe fdb7 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_14.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80059c0:	ab4a      	add	r3, sp, #296	@ 0x128
 80059c2:	aa49      	add	r2, sp, #292	@ 0x124
 80059c4:	a948      	add	r1, sp, #288	@ 0x120
 80059c6:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80059c8:	f8cd b000 	str.w	fp, [sp]
 80059cc:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 80059d0:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 80059d4:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 80059d8:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 80059dc:	f00e fc47 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_14.setSelected(false);
 80059e0:	4629      	mov	r1, r5
 80059e2:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80059e4:	f00e fce4 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_14);
 80059e8:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80059ea:	9802      	ldr	r0, [sp, #8]
 80059ec:	f884 5680 	strb.w	r5, [r4, #1664]	@ 0x680
 80059f0:	f7ff fa1e 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80059f4:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80059f6:	4630      	mov	r0, r6
 80059f8:	f00a ffd8 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_13.setXY(400, 308);
 80059fc:	981e      	ldr	r0, [sp, #120]	@ 0x78
 80059fe:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8005a02:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8005a06:	f7fe fd92 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_13.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005a0a:	ab4a      	add	r3, sp, #296	@ 0x128
 8005a0c:	aa49      	add	r2, sp, #292	@ 0x124
 8005a0e:	a948      	add	r1, sp, #288	@ 0x120
 8005a10:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8005a12:	f8cd b000 	str.w	fp, [sp]
 8005a16:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005a1a:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005a1e:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005a22:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005a26:	f00e fc22 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_13.setSelected(false);
 8005a2a:	4629      	mov	r1, r5
 8005a2c:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8005a2e:	f00e fcbf 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_13);
 8005a32:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8005a34:	9802      	ldr	r0, [sp, #8]
 8005a36:	f884 56c0 	strb.w	r5, [r4, #1728]	@ 0x6c0
 8005a3a:	f7ff f9f9 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005a3e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8005a40:	4630      	mov	r0, r6
 8005a42:	f00a ffb3 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_12.setXY(550, 258);
 8005a46:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8005a48:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8005a4c:	f240 2126 	movw	r1, #550	@ 0x226
 8005a50:	f7fe fd6d 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_12.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005a54:	ab4a      	add	r3, sp, #296	@ 0x128
 8005a56:	aa49      	add	r2, sp, #292	@ 0x124
 8005a58:	a948      	add	r1, sp, #288	@ 0x120
 8005a5a:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8005a5c:	f8cd b000 	str.w	fp, [sp]
 8005a60:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005a64:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005a68:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005a6c:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005a70:	f00e fbfd 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_12.setSelected(false);
 8005a74:	4629      	mov	r1, r5
 8005a76:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8005a78:	f00e fc9a 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_12);
 8005a7c:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8005a7e:	9802      	ldr	r0, [sp, #8]
 8005a80:	f884 5700 	strb.w	r5, [r4, #1792]	@ 0x700
 8005a84:	f7ff f9d4 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005a88:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	f00a ff8e 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_11.setXY(500, 258);
 8005a90:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8005a92:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8005a96:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8005a9a:	f7fe fd48 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_11.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005a9e:	ab4a      	add	r3, sp, #296	@ 0x128
 8005aa0:	aa49      	add	r2, sp, #292	@ 0x124
 8005aa2:	a948      	add	r1, sp, #288	@ 0x120
 8005aa4:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8005aa6:	f8cd b000 	str.w	fp, [sp]
 8005aaa:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005aae:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005ab2:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005ab6:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005aba:	f00e fbd8 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_11.setSelected(false);
 8005abe:	4629      	mov	r1, r5
 8005ac0:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8005ac2:	f00e fc75 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_11);
 8005ac6:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005ac8:	9802      	ldr	r0, [sp, #8]
 8005aca:	f884 5740 	strb.w	r5, [r4, #1856]	@ 0x740
 8005ace:	f7ff f9af 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005ad2:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005ad4:	4630      	mov	r0, r6
 8005ad6:	f00a ff69 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_10.setXY(450, 258);
 8005ada:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8005adc:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8005ae0:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 8005ae4:	f7fe fd23 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_10.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005ae8:	ab4a      	add	r3, sp, #296	@ 0x128
 8005aea:	aa49      	add	r2, sp, #292	@ 0x124
 8005aec:	a948      	add	r1, sp, #288	@ 0x120
 8005aee:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8005af0:	f8cd b000 	str.w	fp, [sp]
 8005af4:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005af8:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005afc:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005b00:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005b04:	f00e fbb3 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_10.setSelected(false);
 8005b08:	4629      	mov	r1, r5
 8005b0a:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8005b0c:	f00e fc50 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_10);
 8005b10:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8005b12:	9802      	ldr	r0, [sp, #8]
 8005b14:	f884 5780 	strb.w	r5, [r4, #1920]	@ 0x780
 8005b18:	f7ff f98a 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005b1c:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8005b1e:	4630      	mov	r0, r6
 8005b20:	f00a ff44 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_9.setXY(400, 258);
 8005b24:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8005b26:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8005b2a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8005b2e:	f7fe fcfe 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_9.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005b32:	ab4a      	add	r3, sp, #296	@ 0x128
 8005b34:	aa49      	add	r2, sp, #292	@ 0x124
 8005b36:	a948      	add	r1, sp, #288	@ 0x120
 8005b38:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8005b3a:	f8cd b000 	str.w	fp, [sp]
 8005b3e:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005b42:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005b46:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005b4a:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005b4e:	f00e fb8e 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_9.setSelected(false);
 8005b52:	4629      	mov	r1, r5
 8005b54:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8005b56:	f00e fc2b 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_9);
 8005b5a:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8005b5c:	9802      	ldr	r0, [sp, #8]
 8005b5e:	f884 57c0 	strb.w	r5, [r4, #1984]	@ 0x7c0
 8005b62:	f7ff f965 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005b66:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8005b68:	4630      	mov	r0, r6
 8005b6a:	f00a ff1f 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_8.setXY(550, 208);
 8005b6e:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8005b70:	22d0      	movs	r2, #208	@ 0xd0
 8005b72:	f240 2126 	movw	r1, #550	@ 0x226
 8005b76:	f7fe fcda 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_8.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005b7a:	ab4a      	add	r3, sp, #296	@ 0x128
 8005b7c:	aa49      	add	r2, sp, #292	@ 0x124
 8005b7e:	a948      	add	r1, sp, #288	@ 0x120
 8005b80:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8005b82:	f8cd b000 	str.w	fp, [sp]
 8005b86:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005b8a:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005b8e:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005b92:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005b96:	f00e fb6a 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_8.setSelected(false);
 8005b9a:	4629      	mov	r1, r5
 8005b9c:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8005b9e:	f00e fc07 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_8);
 8005ba2:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8005ba4:	9802      	ldr	r0, [sp, #8]
 8005ba6:	f884 5800 	strb.w	r5, [r4, #2048]	@ 0x800
 8005baa:	f7ff f941 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005bae:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8005bb0:	4630      	mov	r0, r6
 8005bb2:	f00a fefb 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_7.setXY(500, 208);
 8005bb6:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8005bb8:	22d0      	movs	r2, #208	@ 0xd0
 8005bba:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8005bbe:	f7fe fcb6 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_7.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005bc2:	ab4a      	add	r3, sp, #296	@ 0x128
 8005bc4:	aa49      	add	r2, sp, #292	@ 0x124
 8005bc6:	a948      	add	r1, sp, #288	@ 0x120
 8005bc8:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8005bca:	f8cd b000 	str.w	fp, [sp]
 8005bce:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005bd2:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005bd6:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005bda:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005bde:	f00e fb46 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_7.setSelected(false);
 8005be2:	4629      	mov	r1, r5
 8005be4:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8005be6:	f00e fbe3 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_7);
 8005bea:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8005bec:	9802      	ldr	r0, [sp, #8]
 8005bee:	f884 5840 	strb.w	r5, [r4, #2112]	@ 0x840
 8005bf2:	f7ff f91d 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005bf6:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8005bf8:	4630      	mov	r0, r6
 8005bfa:	f00a fed7 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_6.setXY(450, 208);
 8005bfe:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8005c00:	22d0      	movs	r2, #208	@ 0xd0
 8005c02:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 8005c06:	f7fe fc92 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_6.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005c0a:	ab4a      	add	r3, sp, #296	@ 0x128
 8005c0c:	aa49      	add	r2, sp, #292	@ 0x124
 8005c0e:	a948      	add	r1, sp, #288	@ 0x120
 8005c10:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8005c12:	f8cd b000 	str.w	fp, [sp]
 8005c16:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005c1a:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005c1e:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005c22:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005c26:	f00e fb22 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_6.setSelected(false);
 8005c2a:	4629      	mov	r1, r5
 8005c2c:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8005c2e:	f00e fbbf 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_6);
 8005c32:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8005c34:	9802      	ldr	r0, [sp, #8]
 8005c36:	f884 5880 	strb.w	r5, [r4, #2176]	@ 0x880
 8005c3a:	f7ff f8f9 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005c3e:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8005c40:	4630      	mov	r0, r6
 8005c42:	f00a feb3 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_5.setXY(400, 208);
 8005c46:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8005c48:	22d0      	movs	r2, #208	@ 0xd0
 8005c4a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8005c4e:	f7fe fc6e 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_5.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005c52:	ab4a      	add	r3, sp, #296	@ 0x128
 8005c54:	aa49      	add	r2, sp, #292	@ 0x124
 8005c56:	a948      	add	r1, sp, #288	@ 0x120
 8005c58:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8005c5a:	f8cd b000 	str.w	fp, [sp]
 8005c5e:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005c62:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005c66:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005c6a:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005c6e:	f00e fafe 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_5.setSelected(false);
 8005c72:	4629      	mov	r1, r5
 8005c74:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8005c76:	f00e fb9b 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_5);
 8005c7a:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8005c7c:	9802      	ldr	r0, [sp, #8]
 8005c7e:	f884 58c0 	strb.w	r5, [r4, #2240]	@ 0x8c0
 8005c82:	f7ff f8d5 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005c86:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8005c88:	4630      	mov	r0, r6
 8005c8a:	f00a fe8f 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_4.setXY(550, 158);
 8005c8e:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8005c90:	229e      	movs	r2, #158	@ 0x9e
 8005c92:	f240 2126 	movw	r1, #550	@ 0x226
 8005c96:	f7fe fc4a 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_4.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005c9a:	ab4a      	add	r3, sp, #296	@ 0x128
 8005c9c:	aa49      	add	r2, sp, #292	@ 0x124
 8005c9e:	a948      	add	r1, sp, #288	@ 0x120
 8005ca0:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8005ca2:	f8cd b000 	str.w	fp, [sp]
 8005ca6:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005caa:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005cae:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005cb2:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005cb6:	f00e fada 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_4.setSelected(false);
 8005cba:	4629      	mov	r1, r5
 8005cbc:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8005cbe:	f00e fb77 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_4);
 8005cc2:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8005cc4:	9802      	ldr	r0, [sp, #8]
 8005cc6:	f884 5900 	strb.w	r5, [r4, #2304]	@ 0x900
 8005cca:	f7ff f8b1 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005cce:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8005cd0:	4630      	mov	r0, r6
 8005cd2:	f00a fe6b 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_3.setXY(500, 158);
 8005cd6:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8005cd8:	229e      	movs	r2, #158	@ 0x9e
 8005cda:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8005cde:	f7fe fc26 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_3.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005ce2:	ab4a      	add	r3, sp, #296	@ 0x128
 8005ce4:	aa49      	add	r2, sp, #292	@ 0x124
 8005ce6:	a948      	add	r1, sp, #288	@ 0x120
 8005ce8:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8005cea:	f8cd b000 	str.w	fp, [sp]
 8005cee:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005cf2:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005cf6:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005cfa:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005cfe:	f00e fab6 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_3.setSelected(false);
 8005d02:	4629      	mov	r1, r5
 8005d04:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8005d06:	f00e fb53 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_3);
 8005d0a:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8005d0c:	9802      	ldr	r0, [sp, #8]
 8005d0e:	f884 5940 	strb.w	r5, [r4, #2368]	@ 0x940
 8005d12:	f7ff f88d 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005d16:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8005d18:	4630      	mov	r0, r6
 8005d1a:	f00a fe47 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_2.setXY(450, 158);
 8005d1e:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8005d20:	229e      	movs	r2, #158	@ 0x9e
 8005d22:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 8005d26:	f7fe fc02 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_2.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005d2a:	ab4a      	add	r3, sp, #296	@ 0x128
 8005d2c:	aa49      	add	r2, sp, #292	@ 0x124
 8005d2e:	a948      	add	r1, sp, #288	@ 0x120
 8005d30:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8005d32:	f8cd b000 	str.w	fp, [sp]
 8005d36:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005d3a:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005d3e:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005d42:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005d46:	f00e fa92 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_2.setSelected(false);
 8005d4a:	4629      	mov	r1, r5
 8005d4c:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8005d4e:	f00e fb2f 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_2);
 8005d52:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8005d54:	9802      	ldr	r0, [sp, #8]
 8005d56:	f884 5980 	strb.w	r5, [r4, #2432]	@ 0x980
 8005d5a:	f7ff f869 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005d5e:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8005d60:	4630      	mov	r0, r6
 8005d62:	f00a fe23 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_1.setXY(400, 158);
 8005d66:	982a      	ldr	r0, [sp, #168]	@ 0xa8
 8005d68:	229e      	movs	r2, #158	@ 0x9e
 8005d6a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8005d6e:	f7fe fbde 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005d72:	ab4a      	add	r3, sp, #296	@ 0x128
 8005d74:	aa49      	add	r2, sp, #292	@ 0x124
 8005d76:	a948      	add	r1, sp, #288	@ 0x120
 8005d78:	982a      	ldr	r0, [sp, #168]	@ 0xa8
 8005d7a:	f8cd b000 	str.w	fp, [sp]
 8005d7e:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005d82:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005d86:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005d8a:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005d8e:	f00e fa6e 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_1.setSelected(false);
 8005d92:	4629      	mov	r1, r5
 8005d94:	982a      	ldr	r0, [sp, #168]	@ 0xa8
 8005d96:	f00e fb0b 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_1);
 8005d9a:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8005d9c:	9802      	ldr	r0, [sp, #8]
 8005d9e:	f884 59c0 	strb.w	r5, [r4, #2496]	@ 0x9c0
 8005da2:	f7ff f845 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005da6:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8005da8:	4630      	mov	r0, r6
 8005daa:	f00a fdff 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_16.setXY(350, 308);
 8005dae:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8005db0:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8005db4:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8005db8:	f7fe fbb9 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_16.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005dbc:	ab4a      	add	r3, sp, #296	@ 0x128
 8005dbe:	aa49      	add	r2, sp, #292	@ 0x124
 8005dc0:	a948      	add	r1, sp, #288	@ 0x120
 8005dc2:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8005dc4:	f8cd b000 	str.w	fp, [sp]
 8005dc8:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005dcc:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005dd0:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005dd4:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005dd8:	f00e fa49 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_16.setSelected(false);
 8005ddc:	4629      	mov	r1, r5
 8005dde:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8005de0:	f00e fae6 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_16);
 8005de4:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8005de6:	9802      	ldr	r0, [sp, #8]
 8005de8:	f884 5a00 	strb.w	r5, [r4, #2560]	@ 0xa00
 8005dec:	f7ff f820 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005df0:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8005df2:	4630      	mov	r0, r6
 8005df4:	f00a fdda 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_15.setXY(300, 308);
 8005df8:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8005dfa:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8005dfe:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8005e02:	f7fe fb94 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_15.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005e06:	ab4a      	add	r3, sp, #296	@ 0x128
 8005e08:	aa49      	add	r2, sp, #292	@ 0x124
 8005e0a:	a948      	add	r1, sp, #288	@ 0x120
 8005e0c:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8005e0e:	f8cd b000 	str.w	fp, [sp]
 8005e12:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005e16:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005e1a:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005e1e:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005e22:	f00e fa24 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_15.setSelected(false);
 8005e26:	4629      	mov	r1, r5
 8005e28:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8005e2a:	f00e fac1 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_15);
 8005e2e:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8005e30:	9802      	ldr	r0, [sp, #8]
 8005e32:	f884 5a40 	strb.w	r5, [r4, #2624]	@ 0xa40
 8005e36:	f7fe fffb 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005e3a:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8005e3c:	4630      	mov	r0, r6
 8005e3e:	f00a fdb5 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_14.setXY(250, 308);
 8005e42:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 8005e44:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8005e48:	21fa      	movs	r1, #250	@ 0xfa
 8005e4a:	f7fe fb70 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_14.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005e4e:	ab4a      	add	r3, sp, #296	@ 0x128
 8005e50:	aa49      	add	r2, sp, #292	@ 0x124
 8005e52:	a948      	add	r1, sp, #288	@ 0x120
 8005e54:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 8005e56:	f8cd b000 	str.w	fp, [sp]
 8005e5a:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005e5e:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005e62:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005e66:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005e6a:	f00e fa00 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_14.setSelected(false);
 8005e6e:	4629      	mov	r1, r5
 8005e70:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 8005e72:	f00e fa9d 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_14);
 8005e76:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8005e78:	9802      	ldr	r0, [sp, #8]
 8005e7a:	f884 5a80 	strb.w	r5, [r4, #2688]	@ 0xa80
 8005e7e:	f7fe ffd7 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005e82:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8005e84:	4630      	mov	r0, r6
 8005e86:	f00a fd91 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_13.setXY(200, 308);
 8005e8a:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8005e8c:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8005e90:	21c8      	movs	r1, #200	@ 0xc8
 8005e92:	f7fe fb4c 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_13.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005e96:	ab4a      	add	r3, sp, #296	@ 0x128
 8005e98:	aa49      	add	r2, sp, #292	@ 0x124
 8005e9a:	a948      	add	r1, sp, #288	@ 0x120
 8005e9c:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8005e9e:	f8cd b000 	str.w	fp, [sp]
 8005ea2:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005ea6:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005eaa:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005eae:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005eb2:	f00e f9dc 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_13.setSelected(false);
 8005eb6:	4629      	mov	r1, r5
 8005eb8:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8005eba:	f00e fa79 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_13);
 8005ebe:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 8005ec0:	9802      	ldr	r0, [sp, #8]
 8005ec2:	f884 5ac0 	strb.w	r5, [r4, #2752]	@ 0xac0
 8005ec6:	f7fe ffb3 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005eca:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 8005ecc:	4630      	mov	r0, r6
 8005ece:	f00a fd6d 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_12.setXY(350, 258);
 8005ed2:	982f      	ldr	r0, [sp, #188]	@ 0xbc
 8005ed4:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8005ed8:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8005edc:	f7fe fb27 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_12.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005ee0:	ab4a      	add	r3, sp, #296	@ 0x128
 8005ee2:	aa49      	add	r2, sp, #292	@ 0x124
 8005ee4:	a948      	add	r1, sp, #288	@ 0x120
 8005ee6:	982f      	ldr	r0, [sp, #188]	@ 0xbc
 8005ee8:	f8cd b000 	str.w	fp, [sp]
 8005eec:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005ef0:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005ef4:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005ef8:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005efc:	f00e f9b7 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_12.setSelected(false);
 8005f00:	4629      	mov	r1, r5
 8005f02:	982f      	ldr	r0, [sp, #188]	@ 0xbc
 8005f04:	f00e fa54 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_12);
 8005f08:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 8005f0a:	9802      	ldr	r0, [sp, #8]
 8005f0c:	f884 5b00 	strb.w	r5, [r4, #2816]	@ 0xb00
 8005f10:	f7fe ff8e 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005f14:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 8005f16:	4630      	mov	r0, r6
 8005f18:	f00a fd48 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_11.setXY(300, 258);
 8005f1c:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 8005f1e:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8005f22:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8005f26:	f7fe fb02 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_11.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005f2a:	ab4a      	add	r3, sp, #296	@ 0x128
 8005f2c:	aa49      	add	r2, sp, #292	@ 0x124
 8005f2e:	a948      	add	r1, sp, #288	@ 0x120
 8005f30:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 8005f32:	f8cd b000 	str.w	fp, [sp]
 8005f36:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005f3a:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005f3e:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005f42:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005f46:	f00e f992 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_11.setSelected(false);
 8005f4a:	4629      	mov	r1, r5
 8005f4c:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 8005f4e:	f00e fa2f 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_11);
 8005f52:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 8005f54:	9802      	ldr	r0, [sp, #8]
 8005f56:	f884 5b40 	strb.w	r5, [r4, #2880]	@ 0xb40
 8005f5a:	f7fe ff69 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005f5e:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 8005f60:	4630      	mov	r0, r6
 8005f62:	f00a fd23 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_10.setXY(250, 258);
 8005f66:	9831      	ldr	r0, [sp, #196]	@ 0xc4
 8005f68:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8005f6c:	21fa      	movs	r1, #250	@ 0xfa
 8005f6e:	f7fe fade 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_10.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005f72:	ab4a      	add	r3, sp, #296	@ 0x128
 8005f74:	aa49      	add	r2, sp, #292	@ 0x124
 8005f76:	a948      	add	r1, sp, #288	@ 0x120
 8005f78:	9831      	ldr	r0, [sp, #196]	@ 0xc4
 8005f7a:	f8cd b000 	str.w	fp, [sp]
 8005f7e:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005f82:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005f86:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005f8a:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005f8e:	f00e f96e 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_10.setSelected(false);
 8005f92:	4629      	mov	r1, r5
 8005f94:	9831      	ldr	r0, [sp, #196]	@ 0xc4
 8005f96:	f00e fa0b 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_10);
 8005f9a:	9931      	ldr	r1, [sp, #196]	@ 0xc4
 8005f9c:	9802      	ldr	r0, [sp, #8]
 8005f9e:	f884 5b80 	strb.w	r5, [r4, #2944]	@ 0xb80
 8005fa2:	f7fe ff45 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005fa6:	9931      	ldr	r1, [sp, #196]	@ 0xc4
 8005fa8:	4630      	mov	r0, r6
 8005faa:	f00a fcff 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_9.setXY(200, 258);
 8005fae:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 8005fb0:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8005fb4:	21c8      	movs	r1, #200	@ 0xc8
 8005fb6:	f7fe faba 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_9.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005fba:	ab4a      	add	r3, sp, #296	@ 0x128
 8005fbc:	aa49      	add	r2, sp, #292	@ 0x124
 8005fbe:	a948      	add	r1, sp, #288	@ 0x120
 8005fc0:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 8005fc2:	f8cd b000 	str.w	fp, [sp]
 8005fc6:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005fca:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005fce:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005fd2:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005fd6:	f00e f94a 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_9.setSelected(false);
 8005fda:	4629      	mov	r1, r5
 8005fdc:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 8005fde:	f00e f9e7 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_9);
 8005fe2:	9932      	ldr	r1, [sp, #200]	@ 0xc8
 8005fe4:	9802      	ldr	r0, [sp, #8]
 8005fe6:	f884 5bc0 	strb.w	r5, [r4, #3008]	@ 0xbc0
 8005fea:	f7fe ff21 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005fee:	9932      	ldr	r1, [sp, #200]	@ 0xc8
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	f00a fcdb 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_8.setXY(350, 208);
 8005ff6:	9833      	ldr	r0, [sp, #204]	@ 0xcc
 8005ff8:	22d0      	movs	r2, #208	@ 0xd0
 8005ffa:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8005ffe:	f7fe fa96 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_8.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8006002:	ab4a      	add	r3, sp, #296	@ 0x128
 8006004:	aa49      	add	r2, sp, #292	@ 0x124
 8006006:	a948      	add	r1, sp, #288	@ 0x120
 8006008:	9833      	ldr	r0, [sp, #204]	@ 0xcc
 800600a:	f8cd b000 	str.w	fp, [sp]
 800600e:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8006012:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8006016:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 800601a:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 800601e:	f00e f926 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_8.setSelected(false);
 8006022:	4629      	mov	r1, r5
 8006024:	9833      	ldr	r0, [sp, #204]	@ 0xcc
 8006026:	f00e f9c3 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_8);
 800602a:	9933      	ldr	r1, [sp, #204]	@ 0xcc
 800602c:	9802      	ldr	r0, [sp, #8]
 800602e:	f884 5c00 	strb.w	r5, [r4, #3072]	@ 0xc00
 8006032:	f7fe fefd 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8006036:	9933      	ldr	r1, [sp, #204]	@ 0xcc
 8006038:	4630      	mov	r0, r6
 800603a:	f00a fcb7 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_7.setXY(300, 208);
 800603e:	9834      	ldr	r0, [sp, #208]	@ 0xd0
 8006040:	22d0      	movs	r2, #208	@ 0xd0
 8006042:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8006046:	f7fe fa72 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_7.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 800604a:	ab4a      	add	r3, sp, #296	@ 0x128
 800604c:	aa49      	add	r2, sp, #292	@ 0x124
 800604e:	a948      	add	r1, sp, #288	@ 0x120
 8006050:	9834      	ldr	r0, [sp, #208]	@ 0xd0
 8006052:	f8cd b000 	str.w	fp, [sp]
 8006056:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 800605a:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 800605e:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8006062:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8006066:	f00e f902 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_7.setSelected(false);
 800606a:	4629      	mov	r1, r5
 800606c:	9834      	ldr	r0, [sp, #208]	@ 0xd0
 800606e:	f00e f99f 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_7);
 8006072:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8006074:	9802      	ldr	r0, [sp, #8]
 8006076:	f884 5c40 	strb.w	r5, [r4, #3136]	@ 0xc40
 800607a:	f7fe fed9 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 800607e:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8006080:	4630      	mov	r0, r6
 8006082:	f00a fc93 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_6.setXY(250, 208);
 8006086:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8006088:	22d0      	movs	r2, #208	@ 0xd0
 800608a:	21fa      	movs	r1, #250	@ 0xfa
 800608c:	f7fe fa4f 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_6.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8006090:	ab4a      	add	r3, sp, #296	@ 0x128
 8006092:	aa49      	add	r2, sp, #292	@ 0x124
 8006094:	a948      	add	r1, sp, #288	@ 0x120
 8006096:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8006098:	f8cd b000 	str.w	fp, [sp]
 800609c:	46cb      	mov	fp, r9
 800609e:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 80060a2:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 80060a6:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 80060aa:	46d0      	mov	r8, sl
 80060ac:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 80060b0:	f00e f8dd 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_6.setSelected(false);
 80060b4:	4629      	mov	r1, r5
 80060b6:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 80060b8:	f00e f97a 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_6);
 80060bc:	9935      	ldr	r1, [sp, #212]	@ 0xd4
 80060be:	9802      	ldr	r0, [sp, #8]
 80060c0:	f884 5c80 	strb.w	r5, [r4, #3200]	@ 0xc80
 80060c4:	f7fe feb4 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80060c8:	9935      	ldr	r1, [sp, #212]	@ 0xd4
 80060ca:	4630      	mov	r0, r6
 80060cc:	f00a fc6e 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_5.setXY(200, 208);
 80060d0:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 80060d2:	22d0      	movs	r2, #208	@ 0xd0
 80060d4:	21c8      	movs	r1, #200	@ 0xc8
 80060d6:	f7fe fa2a 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
 80060da:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 80060de:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 80060e2:	46b9      	mov	r9, r7
    RadioButton_1_5.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80060e4:	af4b      	add	r7, sp, #300	@ 0x12c
 80060e6:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 80060ea:	f04f 0a05 	mov.w	sl, #5
 80060ee:	ab4a      	add	r3, sp, #296	@ 0x128
 80060f0:	aa49      	add	r2, sp, #292	@ 0x124
 80060f2:	a948      	add	r1, sp, #288	@ 0x120
 80060f4:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 80060f6:	9700      	str	r7, [sp, #0]
 80060f8:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 80060fc:	f00e f8b7 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_5.setSelected(false);
 8006100:	4629      	mov	r1, r5
 8006102:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 8006104:	f00e f954 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_5);
 8006108:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 800610a:	9802      	ldr	r0, [sp, #8]
 800610c:	f884 5cc0 	strb.w	r5, [r4, #3264]	@ 0xcc0
 8006110:	f7fe fe8e 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8006114:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 8006116:	4630      	mov	r0, r6
 8006118:	f00a fc48 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_4.setXY(350, 158);
 800611c:	9837      	ldr	r0, [sp, #220]	@ 0xdc
 800611e:	229e      	movs	r2, #158	@ 0x9e
 8006120:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8006124:	f7fe fa03 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_4.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8006128:	ab4a      	add	r3, sp, #296	@ 0x128
 800612a:	aa49      	add	r2, sp, #292	@ 0x124
 800612c:	a948      	add	r1, sp, #288	@ 0x120
 800612e:	9837      	ldr	r0, [sp, #220]	@ 0xdc
 8006130:	9700      	str	r7, [sp, #0]
 8006132:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 8006136:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 800613a:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 800613e:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 8006142:	f00e f894 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_4.setSelected(false);
 8006146:	4629      	mov	r1, r5
 8006148:	9837      	ldr	r0, [sp, #220]	@ 0xdc
 800614a:	f00e f931 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_4);
 800614e:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 8006150:	9802      	ldr	r0, [sp, #8]
 8006152:	f884 5d00 	strb.w	r5, [r4, #3328]	@ 0xd00
 8006156:	f7fe fe6b 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 800615a:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 800615c:	4630      	mov	r0, r6
 800615e:	f00a fc25 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_3.setXY(300, 158);
 8006162:	9838      	ldr	r0, [sp, #224]	@ 0xe0
 8006164:	229e      	movs	r2, #158	@ 0x9e
 8006166:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800616a:	f7fe f9e0 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_3.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 800616e:	ab4a      	add	r3, sp, #296	@ 0x128
 8006170:	aa49      	add	r2, sp, #292	@ 0x124
 8006172:	a948      	add	r1, sp, #288	@ 0x120
 8006174:	9838      	ldr	r0, [sp, #224]	@ 0xe0
 8006176:	9700      	str	r7, [sp, #0]
 8006178:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 800617c:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 8006180:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 8006184:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 8006188:	f00e f871 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_3.setSelected(false);
 800618c:	4629      	mov	r1, r5
 800618e:	9838      	ldr	r0, [sp, #224]	@ 0xe0
 8006190:	f00e f90e 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_3);
 8006194:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 8006196:	9802      	ldr	r0, [sp, #8]
 8006198:	f884 5d40 	strb.w	r5, [r4, #3392]	@ 0xd40
 800619c:	f7fe fe48 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80061a0:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 80061a2:	4630      	mov	r0, r6
 80061a4:	f00a fc02 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_2.setXY(250, 158);
 80061a8:	9839      	ldr	r0, [sp, #228]	@ 0xe4
 80061aa:	229e      	movs	r2, #158	@ 0x9e
 80061ac:	21fa      	movs	r1, #250	@ 0xfa
 80061ae:	f7fe f9be 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_2.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80061b2:	ab4a      	add	r3, sp, #296	@ 0x128
 80061b4:	aa49      	add	r2, sp, #292	@ 0x124
 80061b6:	a948      	add	r1, sp, #288	@ 0x120
 80061b8:	9839      	ldr	r0, [sp, #228]	@ 0xe4
 80061ba:	9700      	str	r7, [sp, #0]
 80061bc:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 80061c0:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 80061c4:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 80061c8:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 80061cc:	f00e f84f 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_2.setSelected(false);
 80061d0:	4629      	mov	r1, r5
 80061d2:	9839      	ldr	r0, [sp, #228]	@ 0xe4
 80061d4:	f00e f8ec 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_2);
 80061d8:	9939      	ldr	r1, [sp, #228]	@ 0xe4
 80061da:	9802      	ldr	r0, [sp, #8]
 80061dc:	f884 5d80 	strb.w	r5, [r4, #3456]	@ 0xd80
 80061e0:	f7fe fe26 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80061e4:	9939      	ldr	r1, [sp, #228]	@ 0xe4
 80061e6:	4630      	mov	r0, r6
 80061e8:	f00a fbe0 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_1.setXY(200, 158);
 80061ec:	983a      	ldr	r0, [sp, #232]	@ 0xe8
 80061ee:	229e      	movs	r2, #158	@ 0x9e
 80061f0:	21c8      	movs	r1, #200	@ 0xc8
 80061f2:	f7fe f99c 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80061f6:	ab4a      	add	r3, sp, #296	@ 0x128
 80061f8:	aa49      	add	r2, sp, #292	@ 0x124
 80061fa:	a948      	add	r1, sp, #288	@ 0x120
 80061fc:	983a      	ldr	r0, [sp, #232]	@ 0xe8
 80061fe:	9700      	str	r7, [sp, #0]
 8006200:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 8006204:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 8006208:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 800620c:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 8006210:	f00e f82d 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_1.setSelected(false);
 8006214:	4629      	mov	r1, r5
 8006216:	983a      	ldr	r0, [sp, #232]	@ 0xe8
 8006218:	f00e f8ca 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_1);
 800621c:	993a      	ldr	r1, [sp, #232]	@ 0xe8
 800621e:	9802      	ldr	r0, [sp, #8]
 8006220:	f884 5dc0 	strb.w	r5, [r4, #3520]	@ 0xdc0
 8006224:	f7fe fe04 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8006228:	993a      	ldr	r1, [sp, #232]	@ 0xe8
 800622a:	4630      	mov	r0, r6
 800622c:	f00a fbbe 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_16.setXY(150, 308);
 8006230:	983b      	ldr	r0, [sp, #236]	@ 0xec
 8006232:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8006236:	2196      	movs	r1, #150	@ 0x96
 8006238:	f7fe f979 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_16.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 800623c:	ab4a      	add	r3, sp, #296	@ 0x128
 800623e:	aa49      	add	r2, sp, #292	@ 0x124
 8006240:	a948      	add	r1, sp, #288	@ 0x120
 8006242:	983b      	ldr	r0, [sp, #236]	@ 0xec
 8006244:	9700      	str	r7, [sp, #0]
 8006246:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 800624a:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 800624e:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 8006252:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 8006256:	f00e f80a 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_16.setSelected(false);
 800625a:	4629      	mov	r1, r5
 800625c:	983b      	ldr	r0, [sp, #236]	@ 0xec
 800625e:	f00e f8a7 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_0_16);
 8006262:	993b      	ldr	r1, [sp, #236]	@ 0xec
 8006264:	9802      	ldr	r0, [sp, #8]
 8006266:	f884 5e00 	strb.w	r5, [r4, #3584]	@ 0xe00
 800626a:	f7fe fde1 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 800626e:	993b      	ldr	r1, [sp, #236]	@ 0xec
 8006270:	4630      	mov	r0, r6
 8006272:	f00a fb9b 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_15.setXY(100, 308);
 8006276:	983c      	ldr	r0, [sp, #240]	@ 0xf0
 8006278:	f44f 729a 	mov.w	r2, #308	@ 0x134
 800627c:	2164      	movs	r1, #100	@ 0x64
 800627e:	f7fe f956 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_15.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8006282:	ab4a      	add	r3, sp, #296	@ 0x128
 8006284:	aa49      	add	r2, sp, #292	@ 0x124
 8006286:	a948      	add	r1, sp, #288	@ 0x120
 8006288:	983c      	ldr	r0, [sp, #240]	@ 0xf0
 800628a:	9700      	str	r7, [sp, #0]
 800628c:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 8006290:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 8006294:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 8006298:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 800629c:	f00d ffe7 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_15.setSelected(false);
 80062a0:	4629      	mov	r1, r5
 80062a2:	983c      	ldr	r0, [sp, #240]	@ 0xf0
 80062a4:	f00e f884 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_0_15);
 80062a8:	993c      	ldr	r1, [sp, #240]	@ 0xf0
 80062aa:	9802      	ldr	r0, [sp, #8]
 80062ac:	f884 5e40 	strb.w	r5, [r4, #3648]	@ 0xe40
 80062b0:	f7fe fdbe 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80062b4:	993c      	ldr	r1, [sp, #240]	@ 0xf0
 80062b6:	4630      	mov	r0, r6
 80062b8:	f00a fb78 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_14.setXY(50, 308);
 80062bc:	983d      	ldr	r0, [sp, #244]	@ 0xf4
 80062be:	f44f 729a 	mov.w	r2, #308	@ 0x134
 80062c2:	2132      	movs	r1, #50	@ 0x32
 80062c4:	f7fe f933 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_14.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80062c8:	ab4a      	add	r3, sp, #296	@ 0x128
 80062ca:	aa49      	add	r2, sp, #292	@ 0x124
 80062cc:	a948      	add	r1, sp, #288	@ 0x120
 80062ce:	983d      	ldr	r0, [sp, #244]	@ 0xf4
 80062d0:	9700      	str	r7, [sp, #0]
 80062d2:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 80062d6:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 80062da:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 80062de:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 80062e2:	f00d ffc4 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_14.setSelected(false);
 80062e6:	4629      	mov	r1, r5
 80062e8:	983d      	ldr	r0, [sp, #244]	@ 0xf4
 80062ea:	f00e f861 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_0_14);
 80062ee:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 80062f0:	9802      	ldr	r0, [sp, #8]
 80062f2:	f884 5e80 	strb.w	r5, [r4, #3712]	@ 0xe80
 80062f6:	f7fe fd9b 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80062fa:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 80062fc:	4630      	mov	r0, r6
 80062fe:	f00a fb55 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_13.setXY(0, 308);
 8006302:	4629      	mov	r1, r5
 8006304:	983e      	ldr	r0, [sp, #248]	@ 0xf8
 8006306:	f44f 729a 	mov.w	r2, #308	@ 0x134
 800630a:	f7fe f910 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_13.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 800630e:	ab4a      	add	r3, sp, #296	@ 0x128
 8006310:	aa49      	add	r2, sp, #292	@ 0x124
 8006312:	a948      	add	r1, sp, #288	@ 0x120
 8006314:	983e      	ldr	r0, [sp, #248]	@ 0xf8
 8006316:	9700      	str	r7, [sp, #0]
 8006318:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 800631c:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 8006320:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 8006324:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 8006328:	f00d ffa1 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_13.setSelected(false);
 800632c:	4629      	mov	r1, r5
 800632e:	983e      	ldr	r0, [sp, #248]	@ 0xf8
 8006330:	f00e f83e 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_0_13);
 8006334:	993e      	ldr	r1, [sp, #248]	@ 0xf8
 8006336:	9802      	ldr	r0, [sp, #8]
 8006338:	f884 5ec0 	strb.w	r5, [r4, #3776]	@ 0xec0
 800633c:	f7fe fd78 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8006340:	993e      	ldr	r1, [sp, #248]	@ 0xf8
 8006342:	4630      	mov	r0, r6
 8006344:	f00a fb32 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_12.setXY(150, 258);
 8006348:	983f      	ldr	r0, [sp, #252]	@ 0xfc
 800634a:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800634e:	2196      	movs	r1, #150	@ 0x96
 8006350:	f7fe f8ed 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_12.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8006354:	ab4a      	add	r3, sp, #296	@ 0x128
 8006356:	aa49      	add	r2, sp, #292	@ 0x124
 8006358:	a948      	add	r1, sp, #288	@ 0x120
 800635a:	983f      	ldr	r0, [sp, #252]	@ 0xfc
 800635c:	9700      	str	r7, [sp, #0]
 800635e:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 8006362:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 8006366:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 800636a:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 800636e:	f00d ff7e 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_12.setSelected(false);
 8006372:	4629      	mov	r1, r5
 8006374:	983f      	ldr	r0, [sp, #252]	@ 0xfc
 8006376:	f00e f81b 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_0_12);
 800637a:	993f      	ldr	r1, [sp, #252]	@ 0xfc
 800637c:	9802      	ldr	r0, [sp, #8]
 800637e:	f884 5f00 	strb.w	r5, [r4, #3840]	@ 0xf00
 8006382:	f7fe fd55 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8006386:	993f      	ldr	r1, [sp, #252]	@ 0xfc
 8006388:	4630      	mov	r0, r6
 800638a:	f00a fb0f 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_11.setXY(100, 258);
 800638e:	9840      	ldr	r0, [sp, #256]	@ 0x100
 8006390:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8006394:	2164      	movs	r1, #100	@ 0x64
 8006396:	f7fe f8ca 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_11.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 800639a:	ab4a      	add	r3, sp, #296	@ 0x128
 800639c:	aa49      	add	r2, sp, #292	@ 0x124
 800639e:	a948      	add	r1, sp, #288	@ 0x120
 80063a0:	9840      	ldr	r0, [sp, #256]	@ 0x100
 80063a2:	9700      	str	r7, [sp, #0]
 80063a4:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 80063a8:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 80063ac:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 80063b0:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 80063b4:	f00d ff5b 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_11.setSelected(false);
 80063b8:	4629      	mov	r1, r5
 80063ba:	9840      	ldr	r0, [sp, #256]	@ 0x100
 80063bc:	f00d fff8 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_0_11);
 80063c0:	9940      	ldr	r1, [sp, #256]	@ 0x100
 80063c2:	9802      	ldr	r0, [sp, #8]
 80063c4:	f884 5f40 	strb.w	r5, [r4, #3904]	@ 0xf40
 80063c8:	f7fe fd32 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80063cc:	9940      	ldr	r1, [sp, #256]	@ 0x100
 80063ce:	4630      	mov	r0, r6
 80063d0:	f00a faec 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_10.setXY(50, 258);
 80063d4:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80063d6:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80063da:	2132      	movs	r1, #50	@ 0x32
 80063dc:	f7fe f8a7 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_10.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80063e0:	ab4a      	add	r3, sp, #296	@ 0x128
 80063e2:	aa49      	add	r2, sp, #292	@ 0x124
 80063e4:	a948      	add	r1, sp, #288	@ 0x120
 80063e6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80063e8:	9700      	str	r7, [sp, #0]
 80063ea:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 80063ee:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 80063f2:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 80063f6:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 80063fa:	f00d ff38 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_10.setSelected(false);
 80063fe:	4629      	mov	r1, r5
 8006400:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8006402:	f00d ffd5 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_0_10);
 8006406:	9941      	ldr	r1, [sp, #260]	@ 0x104
 8006408:	9802      	ldr	r0, [sp, #8]
 800640a:	f884 5f80 	strb.w	r5, [r4, #3968]	@ 0xf80
 800640e:	f7fe fd0f 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8006412:	9941      	ldr	r1, [sp, #260]	@ 0x104
 8006414:	4630      	mov	r0, r6
 8006416:	f00a fac9 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_9.setXY(0, 258);
 800641a:	4629      	mov	r1, r5
 800641c:	9842      	ldr	r0, [sp, #264]	@ 0x108
 800641e:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8006422:	f7fe f884 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_9.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8006426:	ab4a      	add	r3, sp, #296	@ 0x128
 8006428:	aa49      	add	r2, sp, #292	@ 0x124
 800642a:	a948      	add	r1, sp, #288	@ 0x120
 800642c:	9842      	ldr	r0, [sp, #264]	@ 0x108
 800642e:	9700      	str	r7, [sp, #0]
 8006430:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 8006434:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 8006438:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 800643c:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 8006440:	f00d ff15 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_9.setSelected(false);
 8006444:	4629      	mov	r1, r5
 8006446:	9842      	ldr	r0, [sp, #264]	@ 0x108
 8006448:	f00d ffb2 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_0_9);
 800644c:	9942      	ldr	r1, [sp, #264]	@ 0x108
 800644e:	9802      	ldr	r0, [sp, #8]
 8006450:	f884 5fc0 	strb.w	r5, [r4, #4032]	@ 0xfc0
 8006454:	f7fe fcec 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8006458:	9942      	ldr	r1, [sp, #264]	@ 0x108
 800645a:	4630      	mov	r0, r6
 800645c:	f00a faa6 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_8.setXY(150, 208);
 8006460:	9843      	ldr	r0, [sp, #268]	@ 0x10c
 8006462:	22d0      	movs	r2, #208	@ 0xd0
 8006464:	2196      	movs	r1, #150	@ 0x96
 8006466:	f7fe f862 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_8.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 800646a:	aa49      	add	r2, sp, #292	@ 0x124
 800646c:	ab4a      	add	r3, sp, #296	@ 0x128
 800646e:	a948      	add	r1, sp, #288	@ 0x120
 8006470:	9843      	ldr	r0, [sp, #268]	@ 0x10c
 8006472:	9700      	str	r7, [sp, #0]
 8006474:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 8006478:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 800647c:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 8006480:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 8006484:	f00d fef3 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_8.setSelected(false);
 8006488:	4629      	mov	r1, r5
 800648a:	9843      	ldr	r0, [sp, #268]	@ 0x10c
 800648c:	f00d ff90 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
 8006490:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
    radioButtonGroup1.add(RadioButton_0_8);
 8006494:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 8006496:	701d      	strb	r5, [r3, #0]
 8006498:	9802      	ldr	r0, [sp, #8]
 800649a:	9303      	str	r3, [sp, #12]
 800649c:	f7fe fcc8 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80064a0:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 80064a2:	4630      	mov	r0, r6
 80064a4:	f00a fa82 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_7.setXY(100, 208);
 80064a8:	9804      	ldr	r0, [sp, #16]
 80064aa:	22d0      	movs	r2, #208	@ 0xd0
 80064ac:	2164      	movs	r1, #100	@ 0x64
 80064ae:	f7fe f83e 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_7.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80064b2:	aa49      	add	r2, sp, #292	@ 0x124
 80064b4:	ab4a      	add	r3, sp, #296	@ 0x128
 80064b6:	a948      	add	r1, sp, #288	@ 0x120
 80064b8:	9804      	ldr	r0, [sp, #16]
 80064ba:	9700      	str	r7, [sp, #0]
 80064bc:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 80064c0:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 80064c4:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 80064c8:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 80064cc:	f00d fecf 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_7.setSelected(false);
 80064d0:	4629      	mov	r1, r5
 80064d2:	9804      	ldr	r0, [sp, #16]
 80064d4:	f00d ff6c 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
 80064d8:	9b03      	ldr	r3, [sp, #12]
    radioButtonGroup1.add(RadioButton_0_7);
 80064da:	9904      	ldr	r1, [sp, #16]
 80064dc:	f883 5040 	strb.w	r5, [r3, #64]	@ 0x40
 80064e0:	9802      	ldr	r0, [sp, #8]
 80064e2:	f7fe fca5 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80064e6:	9904      	ldr	r1, [sp, #16]
 80064e8:	4630      	mov	r0, r6
 80064ea:	f00a fa5f 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_6.setXY(50, 208);
 80064ee:	9805      	ldr	r0, [sp, #20]
 80064f0:	22d0      	movs	r2, #208	@ 0xd0
 80064f2:	2132      	movs	r1, #50	@ 0x32
 80064f4:	f7fe f81b 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_6.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80064f8:	aa49      	add	r2, sp, #292	@ 0x124
 80064fa:	ab4a      	add	r3, sp, #296	@ 0x128
 80064fc:	a948      	add	r1, sp, #288	@ 0x120
 80064fe:	9805      	ldr	r0, [sp, #20]
 8006500:	9700      	str	r7, [sp, #0]
 8006502:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 8006506:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 800650a:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 800650e:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 8006512:	f00d feac 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_6.setSelected(false);
 8006516:	4629      	mov	r1, r5
 8006518:	9805      	ldr	r0, [sp, #20]
 800651a:	f00d ff49 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
 800651e:	9b03      	ldr	r3, [sp, #12]
    radioButtonGroup1.add(RadioButton_0_6);
 8006520:	9905      	ldr	r1, [sp, #20]
 8006522:	f883 5080 	strb.w	r5, [r3, #128]	@ 0x80
 8006526:	9802      	ldr	r0, [sp, #8]
 8006528:	f7fe fc82 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 800652c:	9905      	ldr	r1, [sp, #20]
 800652e:	4630      	mov	r0, r6
 8006530:	f00a fa3c 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_5.setXY(0, 208);
 8006534:	4629      	mov	r1, r5
 8006536:	9806      	ldr	r0, [sp, #24]
 8006538:	22d0      	movs	r2, #208	@ 0xd0
 800653a:	f7fd fff8 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_5.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 800653e:	aa49      	add	r2, sp, #292	@ 0x124
 8006540:	ab4a      	add	r3, sp, #296	@ 0x128
 8006542:	a948      	add	r1, sp, #288	@ 0x120
 8006544:	9806      	ldr	r0, [sp, #24]
 8006546:	9700      	str	r7, [sp, #0]
 8006548:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 800654c:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 8006550:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 8006554:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 8006558:	f00d fe89 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_5.setSelected(false);
 800655c:	4629      	mov	r1, r5
 800655e:	9806      	ldr	r0, [sp, #24]
 8006560:	f00d ff26 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
 8006564:	9b03      	ldr	r3, [sp, #12]
    radioButtonGroup1.add(RadioButton_0_5);
 8006566:	9906      	ldr	r1, [sp, #24]
 8006568:	f883 50c0 	strb.w	r5, [r3, #192]	@ 0xc0
 800656c:	9802      	ldr	r0, [sp, #8]
 800656e:	f7fe fc5f 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8006572:	9906      	ldr	r1, [sp, #24]
 8006574:	4630      	mov	r0, r6
 8006576:	f00a fa19 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_4.setXY(150, 158);
 800657a:	9807      	ldr	r0, [sp, #28]
 800657c:	229e      	movs	r2, #158	@ 0x9e
 800657e:	2196      	movs	r1, #150	@ 0x96
 8006580:	f7fd ffd5 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_4.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8006584:	aa49      	add	r2, sp, #292	@ 0x124
 8006586:	ab4a      	add	r3, sp, #296	@ 0x128
 8006588:	a948      	add	r1, sp, #288	@ 0x120
 800658a:	9807      	ldr	r0, [sp, #28]
 800658c:	9700      	str	r7, [sp, #0]
 800658e:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 8006592:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 8006596:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 800659a:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 800659e:	f00d fe66 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_4.setSelected(false);
 80065a2:	4629      	mov	r1, r5
 80065a4:	9807      	ldr	r0, [sp, #28]
 80065a6:	f00d ff03 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
 80065aa:	9b03      	ldr	r3, [sp, #12]
    radioButtonGroup1.add(RadioButton_0_4);
 80065ac:	9907      	ldr	r1, [sp, #28]
 80065ae:	f883 5100 	strb.w	r5, [r3, #256]	@ 0x100
 80065b2:	9802      	ldr	r0, [sp, #8]
 80065b4:	f7fe fc3c 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80065b8:	9907      	ldr	r1, [sp, #28]
 80065ba:	4630      	mov	r0, r6
 80065bc:	f00a f9f6 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_3.setXY(100, 158);
 80065c0:	9808      	ldr	r0, [sp, #32]
 80065c2:	229e      	movs	r2, #158	@ 0x9e
 80065c4:	2164      	movs	r1, #100	@ 0x64
 80065c6:	f7fd ffb2 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_3.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80065ca:	aa49      	add	r2, sp, #292	@ 0x124
 80065cc:	ab4a      	add	r3, sp, #296	@ 0x128
 80065ce:	a948      	add	r1, sp, #288	@ 0x120
 80065d0:	9808      	ldr	r0, [sp, #32]
 80065d2:	9700      	str	r7, [sp, #0]
 80065d4:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 80065d8:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 80065dc:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 80065e0:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 80065e4:	f00d fe43 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_3.setSelected(false);
 80065e8:	4629      	mov	r1, r5
 80065ea:	9808      	ldr	r0, [sp, #32]
 80065ec:	f00d fee0 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
 80065f0:	9b03      	ldr	r3, [sp, #12]
    radioButtonGroup1.add(RadioButton_0_3);
 80065f2:	9908      	ldr	r1, [sp, #32]
 80065f4:	f883 5140 	strb.w	r5, [r3, #320]	@ 0x140
 80065f8:	9802      	ldr	r0, [sp, #8]
 80065fa:	f7fe fc19 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80065fe:	9908      	ldr	r1, [sp, #32]
 8006600:	4630      	mov	r0, r6
 8006602:	f00a f9d3 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_2.setXY(50, 158);
 8006606:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006608:	229e      	movs	r2, #158	@ 0x9e
 800660a:	2132      	movs	r1, #50	@ 0x32
 800660c:	f7fd ff8f 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_2.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8006610:	aa49      	add	r2, sp, #292	@ 0x124
 8006612:	ab4a      	add	r3, sp, #296	@ 0x128
 8006614:	a948      	add	r1, sp, #288	@ 0x120
 8006616:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006618:	9700      	str	r7, [sp, #0]
 800661a:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 800661e:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 8006622:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 8006626:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 800662a:	f00d fe20 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_2.setSelected(false);
 800662e:	4629      	mov	r1, r5
 8006630:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006632:	f00d febd 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
 8006636:	9b03      	ldr	r3, [sp, #12]
    radioButtonGroup1.add(RadioButton_0_2);
 8006638:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800663a:	f883 5180 	strb.w	r5, [r3, #384]	@ 0x180
 800663e:	9802      	ldr	r0, [sp, #8]
 8006640:	f7fe fbf6 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8006644:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006646:	4630      	mov	r0, r6
 8006648:	f00a f9b0 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_1.setXY(0, 158);
 800664c:	4629      	mov	r1, r5
 800664e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006650:	229e      	movs	r2, #158	@ 0x9e
 8006652:	f7fd ff6c 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8006656:	aa49      	add	r2, sp, #292	@ 0x124
 8006658:	ab4a      	add	r3, sp, #296	@ 0x128
 800665a:	a948      	add	r1, sp, #288	@ 0x120
 800665c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800665e:	9700      	str	r7, [sp, #0]
 8006660:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 8006664:	f04f 0a02 	mov.w	sl, #2
 8006668:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 800666c:	f04f 0908 	mov.w	r9, #8
 8006670:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 8006674:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 8006678:	f00d fdf9 	bl	801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_1.setSelected(false);
 800667c:	4629      	mov	r1, r5
 800667e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006680:	f00d fe96 	bl	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
 8006684:	9b03      	ldr	r3, [sp, #12]
    radioButtonGroup1.add(RadioButton_0_1);
 8006686:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006688:	f883 51c0 	strb.w	r5, [r3, #448]	@ 0x1c0
 800668c:	9802      	ldr	r0, [sp, #8]
 800668e:	f7fe fbcf 	bl	8004e30 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8006692:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006694:	4630      	mov	r0, r6
 8006696:	f00a f989 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image2_1.setXY(0, 0);
 800669a:	462a      	mov	r2, r5
 800669c:	4629      	mov	r1, r5
 800669e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80066a0:	f7fd ff45 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    image2_1.setBitmap(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_BARS_800X480_BOTTOM_BASE_ID));
 80066a4:	4639      	mov	r1, r7
 80066a6:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80066a8:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 80066ac:	f00d fc6f 	bl	8013f8e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80066b0:	9944      	ldr	r1, [sp, #272]	@ 0x110
 80066b2:	4630      	mov	r0, r6
 80066b4:	f00a f97a 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image2.setXY(0, 400);
 80066b8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80066bc:	4629      	mov	r1, r5
 80066be:	9845      	ldr	r0, [sp, #276]	@ 0x114
 80066c0:	f7fd ff35 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    image2.setBitmap(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_BARS_800X480_BOTTOM_BASE_ID));
 80066c4:	4639      	mov	r1, r7
 80066c6:	9845      	ldr	r0, [sp, #276]	@ 0x114
    Nex.setAction(buttonCallback);
 80066c8:	f504 5597 	add.w	r5, r4, #4832	@ 0x12e0
 80066cc:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
    image2.setBitmap(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_BARS_800X480_BOTTOM_BASE_ID));
 80066d0:	f00d fc5d 	bl	8013f8e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80066d4:	9945      	ldr	r1, [sp, #276]	@ 0x114
 80066d6:	4630      	mov	r0, r6
 80066d8:	f00a f968 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Nex.setXY(615, 415);
 80066dc:	9847      	ldr	r0, [sp, #284]	@ 0x11c
 80066de:	f240 129f 	movw	r2, #415	@ 0x19f
 80066e2:	f240 2167 	movw	r1, #615	@ 0x267
 80066e6:	f7fd ff22 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
 80066ea:	2301      	movs	r3, #1
    Nex.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUND_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUND_PRESSED_ID));
 80066ec:	463a      	mov	r2, r7
 80066ee:	a94a      	add	r1, sp, #296	@ 0x128
 80066f0:	9847      	ldr	r0, [sp, #284]	@ 0x11c
        color = col;
 80066f2:	f04f 39ff 	mov.w	r9, #4294967295
 80066f6:	f8ad 3128 	strh.w	r3, [sp, #296]	@ 0x128
    Nex.setAction(buttonCallback);
 80066fa:	445d      	add	r5, fp
 80066fc:	f8ad a12c 	strh.w	sl, [sp, #300]	@ 0x12c
    Nex.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUND_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUND_PRESSED_ID));
 8006700:	f00d fb89 	bl	8013e16 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 8006704:	9b03      	ldr	r3, [sp, #12]
        updateTextPosition();
 8006706:	9847      	ldr	r0, [sp, #284]	@ 0x11c
 8006708:	f8a3 a258 	strh.w	sl, [r3, #600]	@ 0x258
 800670c:	f7fe fc2e 	bl	8004f6c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
        color = col;
 8006710:	9b03      	ldr	r3, [sp, #12]
 8006712:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 8006714:	4630      	mov	r0, r6
        action = &callback;
 8006716:	f8c3 5248 	str.w	r5, [r3, #584]	@ 0x248
        colorPressed = col;
 800671a:	e9c3 9997 	strd	r9, r9, [r3, #604]	@ 0x25c
 800671e:	f00a f945 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button1.setXY(268, 400);
 8006722:	9846      	ldr	r0, [sp, #280]	@ 0x118
 8006724:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006728:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800672c:	f7fd feff 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
 8006730:	2209      	movs	r2, #9
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_MEDIUM_ROUND_DISABLED_ID), touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_MEDIUM_ROUND_DISABLED_ID));
 8006732:	a94a      	add	r1, sp, #296	@ 0x128
 8006734:	9846      	ldr	r0, [sp, #280]	@ 0x118
 8006736:	f8ad 2128 	strh.w	r2, [sp, #296]	@ 0x128
 800673a:	f8ad 212c 	strh.w	r2, [sp, #300]	@ 0x12c
 800673e:	463a      	mov	r2, r7
 8006740:	f00d fb69 	bl	8013e16 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8006744:	9946      	ldr	r1, [sp, #280]	@ 0x118
 8006746:	4630      	mov	r0, r6
 8006748:	f00a f930 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Back.setXY(75, 415);
 800674c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800674e:	f240 129f 	movw	r2, #415	@ 0x19f
 8006752:	214b      	movs	r1, #75	@ 0x4b
 8006754:	f7fd feeb 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
 8006758:	2301      	movs	r3, #1
    Back.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUND_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUND_PRESSED_ID));
 800675a:	463a      	mov	r2, r7
 800675c:	a94a      	add	r1, sp, #296	@ 0x128
 800675e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006760:	f8ad 3128 	strh.w	r3, [sp, #296]	@ 0x128
 8006764:	f8ad a12c 	strh.w	sl, [sp, #300]	@ 0x12c
 8006768:	f00d fb55 	bl	8013e16 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800676c:	9b03      	ldr	r3, [sp, #12]
        updateTextPosition();
 800676e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006770:	f8a3 82d4 	strh.w	r8, [r3, #724]	@ 0x2d4
 8006774:	f7fe fbfa 	bl	8004f6c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
        color = col;
 8006778:	9b03      	ldr	r3, [sp, #12]
 800677a:	4630      	mov	r0, r6
 800677c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800677e:	f8c3 52c4 	str.w	r5, [r3, #708]	@ 0x2c4
        colorPressed = col;
 8006782:	e9c3 99b6 	strd	r9, r9, [r3, #728]	@ 0x2d8
 8006786:	f00a f911 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800678a:	4620      	mov	r0, r4
 800678c:	b04d      	add	sp, #308	@ 0x134
 800678e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006792:	bf00      	nop

08006794 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8006794:	4770      	bx	lr
	...

08006798 <_Z23getFont_verdana_10_4bppv>:
{
 8006798:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800679a:	4d16      	ldr	r5, [pc, #88]	@ (80067f4 <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 800679c:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800679e:	682c      	ldr	r4, [r5, #0]
 80067a0:	f3bf 8f5b 	dmb	ish
 80067a4:	f014 0401 	ands.w	r4, r4, #1
 80067a8:	d120      	bne.n	80067ec <_Z23getFont_verdana_10_4bppv+0x54>
 80067aa:	4628      	mov	r0, r5
 80067ac:	f01e f99f 	bl	8024aee <__cxa_guard_acquire>
 80067b0:	b1e0      	cbz	r0, 80067ec <_Z23getFont_verdana_10_4bppv+0x54>
 80067b2:	233f      	movs	r3, #63	@ 0x3f
 80067b4:	2201      	movs	r2, #1
 80067b6:	4910      	ldr	r1, [pc, #64]	@ (80067f8 <_Z23getFont_verdana_10_4bppv+0x60>)
 80067b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80067ba:	4b10      	ldr	r3, [pc, #64]	@ (80067fc <_Z23getFont_verdana_10_4bppv+0x64>)
 80067bc:	4810      	ldr	r0, [pc, #64]	@ (8006800 <_Z23getFont_verdana_10_4bppv+0x68>)
 80067be:	9308      	str	r3, [sp, #32]
 80067c0:	4b10      	ldr	r3, [pc, #64]	@ (8006804 <_Z23getFont_verdana_10_4bppv+0x6c>)
 80067c2:	940a      	str	r4, [sp, #40]	@ 0x28
 80067c4:	9405      	str	r4, [sp, #20]
 80067c6:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80067ca:	2304      	movs	r3, #4
 80067cc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80067d0:	230a      	movs	r3, #10
 80067d2:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80067d6:	9300      	str	r3, [sp, #0]
 80067d8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80067dc:	f7fd fe3a 	bl	8004454 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80067e0:	4809      	ldr	r0, [pc, #36]	@ (8006808 <_Z23getFont_verdana_10_4bppv+0x70>)
 80067e2:	f01e fd17 	bl	8025214 <atexit>
 80067e6:	4628      	mov	r0, r5
 80067e8:	f01e f98d 	bl	8024b06 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 80067ec:	4804      	ldr	r0, [pc, #16]	@ (8006800 <_Z23getFont_verdana_10_4bppv+0x68>)
 80067ee:	b00f      	add	sp, #60	@ 0x3c
 80067f0:	bd30      	pop	{r4, r5, pc}
 80067f2:	bf00      	nop
 80067f4:	2400c360 	.word	0x2400c360
 80067f8:	0802a1ec 	.word	0x0802a1ec
 80067fc:	0802a28c 	.word	0x0802a28c
 8006800:	2400c364 	.word	0x2400c364
 8006804:	0802a298 	.word	0x0802a298
 8006808:	08006795 	.word	0x08006795

0800680c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 9, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800680c:	4770      	bx	lr
	...

08006810 <_Z23getFont_verdana_20_4bppv>:
{
 8006810:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 9, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8006812:	4d16      	ldr	r5, [pc, #88]	@ (800686c <_Z23getFont_verdana_20_4bppv+0x5c>)
{
 8006814:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 9, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8006816:	682c      	ldr	r4, [r5, #0]
 8006818:	f3bf 8f5b 	dmb	ish
 800681c:	f014 0401 	ands.w	r4, r4, #1
 8006820:	d121      	bne.n	8006866 <_Z23getFont_verdana_20_4bppv+0x56>
 8006822:	4628      	mov	r0, r5
 8006824:	f01e f963 	bl	8024aee <__cxa_guard_acquire>
 8006828:	b1e8      	cbz	r0, 8006866 <_Z23getFont_verdana_20_4bppv+0x56>
 800682a:	233f      	movs	r3, #63	@ 0x3f
 800682c:	2201      	movs	r2, #1
 800682e:	4910      	ldr	r1, [pc, #64]	@ (8006870 <_Z23getFont_verdana_20_4bppv+0x60>)
 8006830:	9309      	str	r3, [sp, #36]	@ 0x24
 8006832:	4b10      	ldr	r3, [pc, #64]	@ (8006874 <_Z23getFont_verdana_20_4bppv+0x64>)
 8006834:	4810      	ldr	r0, [pc, #64]	@ (8006878 <_Z23getFont_verdana_20_4bppv+0x68>)
 8006836:	9308      	str	r3, [sp, #32]
 8006838:	4b10      	ldr	r3, [pc, #64]	@ (800687c <_Z23getFont_verdana_20_4bppv+0x6c>)
 800683a:	940a      	str	r4, [sp, #40]	@ 0x28
 800683c:	9405      	str	r4, [sp, #20]
 800683e:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8006842:	2304      	movs	r3, #4
 8006844:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8006848:	2314      	movs	r3, #20
 800684a:	2209      	movs	r2, #9
 800684c:	9300      	str	r3, [sp, #0]
 800684e:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8006852:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8006856:	f7fd fdfd 	bl	8004454 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800685a:	4809      	ldr	r0, [pc, #36]	@ (8006880 <_Z23getFont_verdana_20_4bppv+0x70>)
 800685c:	f01e fcda 	bl	8025214 <atexit>
 8006860:	4628      	mov	r0, r5
 8006862:	f01e f950 	bl	8024b06 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8006866:	4804      	ldr	r0, [pc, #16]	@ (8006878 <_Z23getFont_verdana_20_4bppv+0x68>)
 8006868:	b00f      	add	sp, #60	@ 0x3c
 800686a:	bd30      	pop	{r4, r5, pc}
 800686c:	2400c390 	.word	0x2400c390
 8006870:	0802a1fc 	.word	0x0802a1fc
 8006874:	0802a290 	.word	0x0802a290
 8006878:	2400c394 	.word	0x2400c394
 800687c:	0802a29c 	.word	0x0802a29c
 8006880:	0800680d 	.word	0x0800680d

08006884 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8006884:	4770      	bx	lr
	...

08006888 <_Z23getFont_verdana_40_4bppv>:
{
 8006888:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800688a:	4d16      	ldr	r5, [pc, #88]	@ (80068e4 <_Z23getFont_verdana_40_4bppv+0x5c>)
{
 800688c:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800688e:	682c      	ldr	r4, [r5, #0]
 8006890:	f3bf 8f5b 	dmb	ish
 8006894:	f014 0401 	ands.w	r4, r4, #1
 8006898:	d120      	bne.n	80068dc <_Z23getFont_verdana_40_4bppv+0x54>
 800689a:	4628      	mov	r0, r5
 800689c:	f01e f927 	bl	8024aee <__cxa_guard_acquire>
 80068a0:	b1e0      	cbz	r0, 80068dc <_Z23getFont_verdana_40_4bppv+0x54>
 80068a2:	233f      	movs	r3, #63	@ 0x3f
 80068a4:	2201      	movs	r2, #1
 80068a6:	4910      	ldr	r1, [pc, #64]	@ (80068e8 <_Z23getFont_verdana_40_4bppv+0x60>)
 80068a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80068aa:	4b10      	ldr	r3, [pc, #64]	@ (80068ec <_Z23getFont_verdana_40_4bppv+0x64>)
 80068ac:	4810      	ldr	r0, [pc, #64]	@ (80068f0 <_Z23getFont_verdana_40_4bppv+0x68>)
 80068ae:	9308      	str	r3, [sp, #32]
 80068b0:	4b10      	ldr	r3, [pc, #64]	@ (80068f4 <_Z23getFont_verdana_40_4bppv+0x6c>)
 80068b2:	940a      	str	r4, [sp, #40]	@ 0x28
 80068b4:	9405      	str	r4, [sp, #20]
 80068b6:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80068ba:	2304      	movs	r3, #4
 80068bc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80068c0:	2328      	movs	r3, #40	@ 0x28
 80068c2:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80068c6:	9300      	str	r3, [sp, #0]
 80068c8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80068cc:	f7fd fdc2 	bl	8004454 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80068d0:	4809      	ldr	r0, [pc, #36]	@ (80068f8 <_Z23getFont_verdana_40_4bppv+0x70>)
 80068d2:	f01e fc9f 	bl	8025214 <atexit>
 80068d6:	4628      	mov	r0, r5
 80068d8:	f01e f915 	bl	8024b06 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 80068dc:	4804      	ldr	r0, [pc, #16]	@ (80068f0 <_Z23getFont_verdana_40_4bppv+0x68>)
 80068de:	b00f      	add	sp, #60	@ 0x3c
 80068e0:	bd30      	pop	{r4, r5, pc}
 80068e2:	bf00      	nop
 80068e4:	2400c3c0 	.word	0x2400c3c0
 80068e8:	0802a27c 	.word	0x0802a27c
 80068ec:	0802a294 	.word	0x0802a294
 80068f0:	2400c3c4 	.word	0x2400c3c4
 80068f4:	0802a2a0 	.word	0x0802a2a0
 80068f8:	08006885 	.word	0x08006885

080068fc <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 80068fc:	2000      	movs	r0, #0
 80068fe:	4770      	bx	lr

08006900 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 8006900:	2000      	movs	r0, #0
 8006902:	4770      	bx	lr

08006904 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8006904:	b40e      	push	{r1, r2, r3}
 8006906:	b503      	push	{r0, r1, lr}
 8006908:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800690a:	2100      	movs	r1, #0
{
 800690c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8006910:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8006912:	f011 f897 	bl	8017a44 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8006916:	b002      	add	sp, #8
 8006918:	f85d eb04 	ldr.w	lr, [sp], #4
 800691c:	b003      	add	sp, #12
 800691e:	4770      	bx	lr

08006920 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8006920:	b40c      	push	{r2, r3}
 8006922:	b507      	push	{r0, r1, r2, lr}
 8006924:	ab04      	add	r3, sp, #16
 8006926:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 800692a:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800692c:	f011 f88a 	bl	8017a44 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8006930:	b003      	add	sp, #12
 8006932:	f85d eb04 	ldr.w	lr, [sp], #4
 8006936:	b002      	add	sp, #8
 8006938:	4770      	bx	lr
	...

0800693c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 800693c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 800693e:	b510      	push	{r4, lr}
 8006940:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8006942:	b373      	cbz	r3, 80069a2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8006944:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 8006946:	b92b      	cbnz	r3, 8006954 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8006948:	4b18      	ldr	r3, [pc, #96]	@ (80069ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 800694a:	21c5      	movs	r1, #197	@ 0xc5
 800694c:	4a18      	ldr	r2, [pc, #96]	@ (80069b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800694e:	4819      	ldr	r0, [pc, #100]	@ (80069b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8006950:	f01e fc42 	bl	80251d8 <__assert_func>
            return buffer[pos];
 8006954:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8006956:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800695a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800695c:	b30b      	cbz	r3, 80069a2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 800695e:	f012 ff5d 	bl	801981c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8006962:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8006964:	2b01      	cmp	r3, #1
 8006966:	d803      	bhi.n	8006970 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8006968:	4b13      	ldr	r3, [pc, #76]	@ (80069b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 800696a:	21cb      	movs	r1, #203	@ 0xcb
 800696c:	4a13      	ldr	r2, [pc, #76]	@ (80069bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 800696e:	e7ee      	b.n	800694e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8006970:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8006972:	f640 103f 	movw	r0, #2367	@ 0x93f
 8006976:	1c53      	adds	r3, r2, #1
 8006978:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 800697a:	2b09      	cmp	r3, #9
 800697c:	4619      	mov	r1, r3
 800697e:	bf88      	it	hi
 8006980:	f1a3 010a 	subhi.w	r1, r3, #10
 8006984:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8006988:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 800698a:	4281      	cmp	r1, r0
 800698c:	d109      	bne.n	80069a2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 800698e:	2b0a      	cmp	r3, #10
 8006990:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8006994:	bf28      	it	cs
 8006996:	2300      	movcs	r3, #0
            return buffer[pos];
 8006998:	8c50      	ldrh	r0, [r2, #34]	@ 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 800699a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800699e:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 80069a0:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 80069a2:	4620      	mov	r0, r4
}
 80069a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 80069a8:	f012 be3a 	b.w	8019620 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80069ac:	08028868 	.word	0x08028868
 80069b0:	08028871 	.word	0x08028871
 80069b4:	0802891c 	.word	0x0802891c
 80069b8:	08028974 	.word	0x08028974
 80069bc:	08028982 	.word	0x08028982

080069c0 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 80069c0:	f012 bdf7 	b.w	80195b2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080069c4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80069c4:	b510      	push	{r4, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	ac02      	add	r4, sp, #8
 80069ca:	e884 0006 	stmia.w	r4, {r1, r2}
 80069ce:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 80069d0:	ab0a      	add	r3, sp, #40	@ 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80069d2:	4621      	mov	r1, r4
    va_start(pArg, format);
 80069d4:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80069d6:	9301      	str	r3, [sp, #4]
 80069d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069da:	9300      	str	r3, [sp, #0]
 80069dc:	9b08      	ldr	r3, [sp, #32]
 80069de:	f00f fc37 	bl	8016250 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80069e2:	b006      	add	sp, #24
 80069e4:	bd10      	pop	{r4, pc}
	...

080069e8 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80069e8:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 80069ea:	bb18      	cbnz	r0, 8006a34 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 80069ec:	4b12      	ldr	r3, [pc, #72]	@ (8006a38 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 80069ee:	4813      	ldr	r0, [pc, #76]	@ (8006a3c <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 80069f0:	681c      	ldr	r4, [r3, #0]
 80069f2:	4913      	ldr	r1, [pc, #76]	@ (8006a40 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 80069f4:	b1b4      	cbz	r4, 8006a24 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80069f6:	6822      	ldr	r2, [r4, #0]
 80069f8:	4422      	add	r2, r4
 80069fa:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80069fc:	6862      	ldr	r2, [r4, #4]
 80069fe:	4422      	add	r2, r4
 8006a00:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8006a02:	68a2      	ldr	r2, [r4, #8]
 8006a04:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8006a06:	4b0f      	ldr	r3, [pc, #60]	@ (8006a44 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8006a0c:	f000 f838 	bl	8006a80 <_ZN17TypedTextDatabase8getFontsEv>
 8006a10:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8006a12:	f000 f833 	bl	8006a7c <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8006a16:	4b0c      	ldr	r3, [pc, #48]	@ (8006a48 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8006a18:	601c      	str	r4, [r3, #0]
        fonts = f;
 8006a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8006a4c <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8006a1c:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8006a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8006a50 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8006a20:	8018      	strh	r0, [r3, #0]
    }
}
 8006a22:	e007      	b.n	8006a34 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8006a24:	4b0b      	ldr	r3, [pc, #44]	@ (8006a54 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8006a26:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8006a28:	4b0b      	ldr	r3, [pc, #44]	@ (8006a58 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8006a2a:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8006a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8006a5c <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8006a2e:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8006a30:	2c00      	cmp	r4, #0
 8006a32:	d1e8      	bne.n	8006a06 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8006a34:	bd38      	pop	{r3, r4, r5, pc}
 8006a36:	bf00      	nop
 8006a38:	2400c3fc 	.word	0x2400c3fc
 8006a3c:	2400c3f4 	.word	0x2400c3f4
 8006a40:	2400c3f0 	.word	0x2400c3f0
 8006a44:	2400c3f8 	.word	0x2400c3f8
 8006a48:	24026470 	.word	0x24026470
 8006a4c:	24026478 	.word	0x24026478
 8006a50:	24026474 	.word	0x24026474
 8006a54:	9021b7a0 	.word	0x9021b7a0
 8006a58:	9021b790 	.word	0x9021b790
 8006a5c:	9021b7b4 	.word	0x9021b7b4

08006a60 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8006a60:	4b04      	ldr	r3, [pc, #16]	@ (8006a74 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8006a68:	4b03      	ldr	r3, [pc, #12]	@ (8006a78 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
}
 8006a6c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	2400c3f0 	.word	0x2400c3f0
 8006a78:	2400c3f4 	.word	0x2400c3f4

08006a7c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8006a7c:	2004      	movs	r0, #4
 8006a7e:	4770      	bx	lr

08006a80 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8006a80:	4800      	ldr	r0, [pc, #0]	@ (8006a84 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8006a82:	4770      	bx	lr
 8006a84:	2400c400 	.word	0x2400c400

08006a88 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8006a88:	b510      	push	{r4, lr}
};
 8006a8a:	4c05      	ldr	r4, [pc, #20]	@ (8006aa0 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
 8006a8c:	f7ff fec0 	bl	8006810 <_Z23getFont_verdana_20_4bppv>
};
 8006a90:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8006a92:	f7ff fef9 	bl	8006888 <_Z23getFont_verdana_40_4bppv>
};
 8006a96:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8006a98:	f7ff fe7e 	bl	8006798 <_Z23getFont_verdana_10_4bppv>
};
 8006a9c:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 8006a9e:	bd10      	pop	{r4, pc}
 8006aa0:	2400c400 	.word	0x2400c400

08006aa4 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 8006aa4:	b510      	push	{r4, lr}
    pointArray = 0;
 8006aa6:	2400      	movs	r4, #0
 8006aa8:	6004      	str	r4, [r0, #0]
    pointArraySize = 0;
 8006aaa:	600c      	str	r4, [r1, #0]
    commandArray = 0;
 8006aac:	6014      	str	r4, [r2, #0]
    commandArraySize = 0;
 8006aae:	601c      	str	r4, [r3, #0]
}
 8006ab0:	bd10      	pop	{r4, pc}

08006ab2 <_ZN21WaitingScreenViewBase7action1Ev>:
     * Custom Actions
     */
    virtual void action1()
    {
        // Override and implement this function in Screen1
    }
 8006ab2:	4770      	bx	lr

08006ab4 <_ZN21WaitingScreenViewBaseD1Ev>:
}

WaitingScreenViewBase::~WaitingScreenViewBase()
{

}
 8006ab4:	4770      	bx	lr

08006ab6 <_ZN21WaitingScreenViewBase11setupScreenEv>:

void WaitingScreenViewBase::setupScreen()
{

}
 8006ab6:	4770      	bx	lr

08006ab8 <_ZN8touchgfx8CallbackI21WaitingScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006ab8:	4770      	bx	lr

08006aba <_ZN8touchgfx8CallbackI21WaitingScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8006aba:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8006abc:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8006abe:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8006ac0:	68c2      	ldr	r2, [r0, #12]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	1055      	asrs	r5, r2, #1
 8006ac6:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8006aca:	07d2      	lsls	r2, r2, #31
 8006acc:	bf48      	it	mi
 8006ace:	5962      	ldrmi	r2, [r4, r5]
    }
 8006ad0:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8006ad2:	bf48      	it	mi
 8006ad4:	58d3      	ldrmi	r3, [r2, r3]
 8006ad6:	4718      	bx	r3

08006ad8 <_ZNK8touchgfx8CallbackI21WaitingScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8006ad8:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8006ada:	6840      	ldr	r0, [r0, #4]
 8006adc:	b130      	cbz	r0, 8006aec <_ZNK8touchgfx8CallbackI21WaitingScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8006ade:	689a      	ldr	r2, [r3, #8]
 8006ae0:	b91a      	cbnz	r2, 8006aea <_ZNK8touchgfx8CallbackI21WaitingScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 8006ae2:	68d8      	ldr	r0, [r3, #12]
 8006ae4:	f000 0001 	and.w	r0, r0, #1
 8006ae8:	4770      	bx	lr
 8006aea:	2001      	movs	r0, #1
    }
 8006aec:	4770      	bx	lr

08006aee <_ZN8touchgfx8CallbackI21WaitingScreenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006aee:	b510      	push	{r4, lr}
 8006af0:	4604      	mov	r4, r0
 8006af2:	2110      	movs	r1, #16
 8006af4:	f01d fff9 	bl	8024aea <_ZdlPvj>
 8006af8:	4620      	mov	r0, r4
 8006afa:	bd10      	pop	{r4, pc}

08006afc <_ZN21WaitingScreenViewBaseD0Ev>:
WaitingScreenViewBase::~WaitingScreenViewBase()
 8006afc:	b510      	push	{r4, lr}
 8006afe:	4604      	mov	r4, r0
}
 8006b00:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8006b04:	f01d fff1 	bl	8024aea <_ZdlPvj>
 8006b08:	4620      	mov	r0, r4
 8006b0a:	bd10      	pop	{r4, pc}

08006b0c <_ZN21WaitingScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void WaitingScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &button1)
 8006b0c:	30f0      	adds	r0, #240	@ 0xf0
 8006b0e:	4288      	cmp	r0, r1
{
 8006b10:	b508      	push	{r3, lr}
    if (&src == &button1)
 8006b12:	d105      	bne.n	8006b20 <_ZN21WaitingScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8006b14:	f00f fffe 	bl	8016b14 <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When button1 clicked change screen to Screen2
        //Go to Screen2 with screen transition towards East
        application().gotoScreen2ScreenSlideTransitionEast();
    }
}
 8006b18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen2ScreenSlideTransitionEast();
 8006b1c:	f7fd bc48 	b.w	80043b0 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv>
}
 8006b20:	bd08      	pop	{r3, pc}
	...

08006b24 <_ZN21WaitingScreenViewBaseC1Ev>:
WaitingScreenViewBase::WaitingScreenViewBase() :
 8006b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b28:	4604      	mov	r4, r0
 8006b2a:	b08d      	sub	sp, #52	@ 0x34
 8006b2c:	2500      	movs	r5, #0
 8006b2e:	f011 ff0b 	bl	8018948 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &WaitingScreenViewBase::buttonCallbackHandler)
 8006b32:	4627      	mov	r7, r4
 8006b34:	4b96      	ldr	r3, [pc, #600]	@ (8006d90 <_ZN21WaitingScreenViewBaseC1Ev+0x26c>)
        : Widget(), alpha(255), color(0)
 8006b36:	f04f 0826 	mov.w	r8, #38	@ 0x26
 8006b3a:	4629      	mov	r1, r5
 8006b3c:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8006b3e:	f104 0b6c 	add.w	fp, r4, #108	@ 0x6c
 8006b42:	f847 3b40 	str.w	r3, [r7], #64
 8006b46:	4642      	mov	r2, r8
 8006b48:	4638      	mov	r0, r7
 8006b4a:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8006b4e:	f01e fddf 	bl	8025710 <memset>
 8006b52:	4638      	mov	r0, r7
 8006b54:	f7fd fcf8 	bl	8004548 <_ZN8touchgfx6WidgetC1Ev>
 8006b58:	4b8e      	ldr	r3, [pc, #568]	@ (8006d94 <_ZN21WaitingScreenViewBaseC1Ev+0x270>)
 8006b5a:	a90a      	add	r1, sp, #40	@ 0x28
 8006b5c:	4658      	mov	r0, fp
 8006b5e:	6423      	str	r3, [r4, #64]	@ 0x40
 8006b60:	23ff      	movs	r3, #255	@ 0xff
 8006b62:	66a5      	str	r5, [r4, #104]	@ 0x68
 8006b64:	f104 0af0 	add.w	sl, r4, #240	@ 0xf0
 8006b68:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 8006b6c:	f504 7992 	add.w	r9, r4, #292	@ 0x124
 8006b70:	f8ad 6028 	strh.w	r6, [sp, #40]	@ 0x28
 8006b74:	f7fd fcfa 	bl	800456c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8006b78:	f104 0398 	add.w	r3, r4, #152	@ 0x98
 8006b7c:	a90a      	add	r1, sp, #40	@ 0x28
 8006b7e:	f8ad 6028 	strh.w	r6, [sp, #40]	@ 0x28
 8006b82:	4618      	mov	r0, r3
 8006b84:	9302      	str	r3, [sp, #8]
 8006b86:	f7fd fcf1 	bl	800456c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8006b8a:	f104 03c4 	add.w	r3, r4, #196	@ 0xc4
 8006b8e:	a90a      	add	r1, sp, #40	@ 0x28
 8006b90:	f8ad 6028 	strh.w	r6, [sp, #40]	@ 0x28
 8006b94:	4618      	mov	r0, r3
 8006b96:	9303      	str	r3, [sp, #12]
 8006b98:	f7fd fce8 	bl	800456c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        : Widget(), action(), pressed(false)
 8006b9c:	4642      	mov	r2, r8
 8006b9e:	4629      	mov	r1, r5
 8006ba0:	4650      	mov	r0, sl
 8006ba2:	f01e fdb5 	bl	8025710 <memset>
 8006ba6:	4650      	mov	r0, sl
 8006ba8:	f7fd fcce 	bl	8004548 <_ZN8touchgfx6WidgetC1Ev>
        touchable = touch;
 8006bac:	2301      	movs	r3, #1
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8006bae:	4642      	mov	r2, r8
 8006bb0:	4629      	mov	r1, r5
 8006bb2:	f884 3114 	strb.w	r3, [r4, #276]	@ 0x114
 8006bb6:	4648      	mov	r0, r9
 8006bb8:	4b77      	ldr	r3, [pc, #476]	@ (8006d98 <_ZN21WaitingScreenViewBaseC1Ev+0x274>)
 8006bba:	f104 0804 	add.w	r8, r4, #4
 8006bbe:	f8a4 611e 	strh.w	r6, [r4, #286]	@ 0x11e
 8006bc2:	f8c4 30f0 	str.w	r3, [r4, #240]	@ 0xf0
 8006bc6:	f8a4 6120 	strh.w	r6, [r4, #288]	@ 0x120
 8006bca:	f884 6122 	strb.w	r6, [r4, #290]	@ 0x122
 8006bce:	f8c4 5118 	str.w	r5, [r4, #280]	@ 0x118
 8006bd2:	f884 511c 	strb.w	r5, [r4, #284]	@ 0x11c
 8006bd6:	f01e fd9b 	bl	8025710 <memset>
 8006bda:	4648      	mov	r0, r9
 8006bdc:	f7fd fcb4 	bl	8004548 <_ZN8touchgfx6WidgetC1Ev>
 8006be0:	4b6e      	ldr	r3, [pc, #440]	@ (8006d9c <_ZN21WaitingScreenViewBaseC1Ev+0x278>)
        : typedTextId(id)
 8006be2:	f8a4 6150 	strh.w	r6, [r4, #336]	@ 0x150
 8006be6:	f504 76b6 	add.w	r6, r4, #364	@ 0x16c
 8006bea:	f8c4 3124 	str.w	r3, [r4, #292]	@ 0x124
 8006bee:	4b6c      	ldr	r3, [pc, #432]	@ (8006da0 <_ZN21WaitingScreenViewBaseC1Ev+0x27c>)
 8006bf0:	4630      	mov	r0, r6
 8006bf2:	f8c4 5154 	str.w	r5, [r4, #340]	@ 0x154
 8006bf6:	f8c4 314c 	str.w	r3, [r4, #332]	@ 0x14c
 8006bfa:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 8006bfe:	f8a4 515c 	strh.w	r5, [r4, #348]	@ 0x15c
 8006c02:	f8c4 3158 	str.w	r3, [r4, #344]	@ 0x158
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8006c06:	f04f 33ff 	mov.w	r3, #4294967295
 8006c0a:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160
              text(0)
 8006c0e:	e9c4 3559 	strd	r3, r5, [r4, #356]	@ 0x164
 8006c12:	f009 fc91 	bl	8010538 <_ZN8touchgfx11BoxProgressC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 8006c16:	4a63      	ldr	r2, [pc, #396]	@ (8006da4 <_ZN21WaitingScreenViewBaseC1Ev+0x280>)
        setXY(x, y);
 8006c18:	4629      	mov	r1, r5
 8006c1a:	4638      	mov	r0, r7
 8006c1c:	e9c4 2494 	strd	r2, r4, [r4, #592]	@ 0x250
 8006c20:	4a61      	ldr	r2, [pc, #388]	@ (8006da8 <_ZN21WaitingScreenViewBaseC1Ev+0x284>)
 8006c22:	e9c4 2596 	strd	r2, r5, [r4, #600]	@ 0x258
 8006c26:	462a      	mov	r2, r5
 8006c28:	f7fd fc81 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8006c2c:	4638      	mov	r0, r7
 8006c2e:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8006c32:	f7fc fca3 	bl	800357c <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 8006c36:	4638      	mov	r0, r7
 8006c38:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8006c3c:	f7fc fca0 	bl	8003580 <_ZN8touchgfx8Drawable9setHeightEs>
        color = newColor;
 8006c40:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8006c44:	4639      	mov	r1, r7
 8006c46:	4640      	mov	r0, r8
 8006c48:	66a2      	str	r2, [r4, #104]	@ 0x68
 8006c4a:	2708      	movs	r7, #8
 8006c4c:	f009 feae 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(-88, -35);
 8006c50:	4658      	mov	r0, fp
 8006c52:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8006c56:	f06f 0157 	mvn.w	r1, #87	@ 0x57
 8006c5a:	f7fd fc68 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
 8006c5e:	2207      	movs	r2, #7
    image1.setBitmap(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_BACKGROUNDS_1024X600_METEOR_RAIN_ID));
 8006c60:	a90a      	add	r1, sp, #40	@ 0x28
 8006c62:	4658      	mov	r0, fp
 8006c64:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8006c68:	f00d f991 	bl	8013f8e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8006c6c:	4659      	mov	r1, fp
 8006c6e:	4640      	mov	r0, r8
 8006c70:	f009 fe9c 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image2_1.setXY(0, 0);
 8006c74:	462a      	mov	r2, r5
 8006c76:	4629      	mov	r1, r5
 8006c78:	9802      	ldr	r0, [sp, #8]
 8006c7a:	f7fd fc58 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    image2_1.setBitmap(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_BARS_800X480_BOTTOM_BASE_ID));
 8006c7e:	a90a      	add	r1, sp, #40	@ 0x28
 8006c80:	9802      	ldr	r0, [sp, #8]
 8006c82:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8006c86:	f00d f982 	bl	8013f8e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8006c8a:	9902      	ldr	r1, [sp, #8]
 8006c8c:	4640      	mov	r0, r8
 8006c8e:	f009 fe8d 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image2.setXY(0, 400);
 8006c92:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006c96:	4629      	mov	r1, r5
 8006c98:	9803      	ldr	r0, [sp, #12]
 8006c9a:	f7fd fc48 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    image2.setBitmap(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_BARS_800X480_BOTTOM_BASE_ID));
 8006c9e:	a90a      	add	r1, sp, #40	@ 0x28
 8006ca0:	9803      	ldr	r0, [sp, #12]
 8006ca2:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8006ca6:	f00d f972 	bl	8013f8e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8006caa:	9903      	ldr	r1, [sp, #12]
 8006cac:	4640      	mov	r0, r8
 8006cae:	f009 fe7d 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button1.setXY(268, 400);
 8006cb2:	4650      	mov	r0, sl
 8006cb4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006cb8:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8006cbc:	f7fd fc37 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
 8006cc0:	2209      	movs	r2, #9
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_MEDIUM_ROUND_DISABLED_ID), touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_MEDIUM_ROUND_DISABLED_ID));
 8006cc2:	a909      	add	r1, sp, #36	@ 0x24
 8006cc4:	4650      	mov	r0, sl
 8006cc6:	f8ad 2024 	strh.w	r2, [sp, #36]	@ 0x24
        boundingArea = calculateBoundingArea();
 8006cca:	af04      	add	r7, sp, #16
 8006ccc:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8006cd0:	aa0a      	add	r2, sp, #40	@ 0x28
 8006cd2:	f00d f8a0 	bl	8013e16 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 8006cd6:	f504 7214 	add.w	r2, r4, #592	@ 0x250
 8006cda:	4651      	mov	r1, sl
 8006cdc:	4640      	mov	r0, r8
        action = &callback;
 8006cde:	f8c4 2118 	str.w	r2, [r4, #280]	@ 0x118
 8006ce2:	f009 fe63 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea1.setXY(377, 430);
 8006ce6:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 8006cea:	4648      	mov	r0, r9
 8006cec:	f240 1179 	movw	r1, #377	@ 0x179
 8006cf0:	f7fd fc1d 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8006cf4:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8006cf8:	4649      	mov	r1, r9
 8006cfa:	4638      	mov	r0, r7
        color = newColor;
 8006cfc:	f8c4 3154 	str.w	r3, [r4, #340]	@ 0x154
        linespace = space;
 8006d00:	f8a4 5158 	strh.w	r5, [r4, #344]	@ 0x158
        boundingArea = calculateBoundingArea();
 8006d04:	f00c fd92 	bl	801382c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8006d08:	f504 73b0 	add.w	r3, r4, #352	@ 0x160
 8006d0c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8006d10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006d14:	4b22      	ldr	r3, [pc, #136]	@ (8006da0 <_ZN21WaitingScreenViewBaseC1Ev+0x27c>)
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ZVLI));
 8006d16:	a90a      	add	r1, sp, #40	@ 0x28
 8006d18:	4648      	mov	r0, r9
 8006d1a:	f8ad 502c 	strh.w	r5, [sp, #44]	@ 0x2c
 8006d1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d20:	f00d f81e 	bl	8013d60 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8006d24:	4649      	mov	r1, r9
 8006d26:	4640      	mov	r0, r8
 8006d28:	f009 fe40 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    boxProgress1.setXY(300, 342);
 8006d2c:	4630      	mov	r0, r6
 8006d2e:	f44f 72ab 	mov.w	r2, #342	@ 0x156
 8006d32:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8006d36:	f7fd fbfa 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
    boxProgress1.setProgressIndicatorPosition(0, 0, 300, 10);
 8006d3a:	230a      	movs	r3, #10
 8006d3c:	462a      	mov	r2, r5
 8006d3e:	4629      	mov	r1, r5
 8006d40:	4630      	mov	r0, r6
 8006d42:	9300      	str	r3, [sp, #0]
 8006d44:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8006d48:	f009 fb50 	bl	80103ec <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    boxProgress1.setRange(0, 100);
 8006d4c:	462b      	mov	r3, r5
 8006d4e:	2264      	movs	r2, #100	@ 0x64
 8006d50:	4629      	mov	r1, r5
 8006d52:	4630      	mov	r0, r6
 8006d54:	9500      	str	r5, [sp, #0]
 8006d56:	f009 fc67 	bl	8010628 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    boxProgress1.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8006d5a:	4629      	mov	r1, r5
 8006d5c:	4630      	mov	r0, r6
 8006d5e:	f009 fc42 	bl	80105e6 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    boxProgress1.setBackground(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BOXPROGRESS_NORMAL_SMALL_ID));
 8006d62:	a90a      	add	r1, sp, #40	@ 0x28
 8006d64:	4630      	mov	r0, r6
 8006d66:	f8ad 5028 	strh.w	r5, [sp, #40]	@ 0x28
 8006d6a:	f009 fdb1 	bl	80108d0 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    boxProgress1.setColor(touchgfx::Color::getColorFromRGB(0, 240, 255));
 8006d6e:	4630      	mov	r0, r6
 8006d70:	490e      	ldr	r1, [pc, #56]	@ (8006dac <_ZN21WaitingScreenViewBaseC1Ev+0x288>)
 8006d72:	f009 fb0a 	bl	801038a <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    boxProgress1.setValue(60);
 8006d76:	4630      	mov	r0, r6
 8006d78:	213c      	movs	r1, #60	@ 0x3c
 8006d7a:	f009 fb4f 	bl	801041c <_ZN8touchgfx11BoxProgress8setValueEi>
 8006d7e:	4640      	mov	r0, r8
 8006d80:	4631      	mov	r1, r6
 8006d82:	f009 fe13 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8006d86:	4620      	mov	r0, r4
 8006d88:	b00d      	add	sp, #52	@ 0x34
 8006d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d8e:	bf00      	nop
 8006d90:	08028a74 	.word	0x08028a74
 8006d94:	08029618 	.word	0x08029618
 8006d98:	08029680 	.word	0x08029680
 8006d9c:	08029588 	.word	0x08029588
 8006da0:	08027f50 	.word	0x08027f50
 8006da4:	08028a5c 	.word	0x08028a5c
 8006da8:	08006b0d 	.word	0x08006b0d
 8006dac:	ff00f0ff 	.word	0xff00f0ff

08006db0 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8006db0:	4770      	bx	lr

08006db2 <_ZN19FrontendApplicationD0Ev>:
 8006db2:	b510      	push	{r4, lr}
 8006db4:	4604      	mov	r4, r0
 8006db6:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8006dba:	f01d fe96 	bl	8024aea <_ZdlPvj>
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	bd10      	pop	{r4, pc}

08006dc2 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8006dc2:	b510      	push	{r4, lr}
 8006dc4:	4604      	mov	r4, r0
    {
        model.tick();
 8006dc6:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 8006dca:	f000 f812 	bl	8006df2 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8006dce:	4620      	mov	r0, r4
    }
 8006dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8006dd4:	f00f bf3a 	b.w	8016c4c <_ZN8touchgfx11Application15handleTickEventEv>

08006dd8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8006dd8:	b510      	push	{r4, lr}
 8006dda:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8006ddc:	f7fd faa4 	bl	8004328 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8006de0:	4b01      	ldr	r3, [pc, #4]	@ (8006de8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8006de2:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8006de4:	6023      	str	r3, [r4, #0]
}
 8006de6:	bd10      	pop	{r4, pc}
 8006de8:	08028aac 	.word	0x08028aac

08006dec <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8006dec:	2200      	movs	r2, #0
 8006dee:	6002      	str	r2, [r0, #0]
{

}
 8006df0:	4770      	bx	lr

08006df2 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8006df2:	4770      	bx	lr

08006df4 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 8006df4:	4770      	bx	lr

08006df6 <_ZThn4_N16Screen1PresenterD1Ev>:
 8006df6:	3804      	subs	r0, #4
 8006df8:	4770      	bx	lr

08006dfa <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 8006dfa:	4770      	bx	lr

08006dfc <_ZN16Screen1PresenterD0Ev>:
 8006dfc:	b510      	push	{r4, lr}
 8006dfe:	4604      	mov	r4, r0
 8006e00:	2110      	movs	r1, #16
 8006e02:	f01d fe72 	bl	8024aea <_ZdlPvj>
 8006e06:	4620      	mov	r0, r4
 8006e08:	bd10      	pop	{r4, pc}

08006e0a <_ZThn4_N16Screen1PresenterD0Ev>:
 8006e0a:	f1a0 0004 	sub.w	r0, r0, #4
 8006e0e:	e7f5      	b.n	8006dfc <_ZN16Screen1PresenterD0Ev>

08006e10 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8006e10:	2200      	movs	r2, #0
    : view(v)
 8006e12:	60c1      	str	r1, [r0, #12]
 8006e14:	6082      	str	r2, [r0, #8]
 8006e16:	4a02      	ldr	r2, [pc, #8]	@ (8006e20 <_ZN16Screen1PresenterC1ER11Screen1View+0x10>)
 8006e18:	6002      	str	r2, [r0, #0]
 8006e1a:	3218      	adds	r2, #24
 8006e1c:	6042      	str	r2, [r0, #4]
}
 8006e1e:	4770      	bx	lr
 8006e20:	08028b00 	.word	0x08028b00

08006e24 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8006e24:	4770      	bx	lr
	...

08006e28 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8006e28:	4b03      	ldr	r3, [pc, #12]	@ (8006e38 <_ZN11Screen1ViewD1Ev+0x10>)
 8006e2a:	b510      	push	{r4, lr}
 8006e2c:	4604      	mov	r4, r0
 8006e2e:	6003      	str	r3, [r0, #0]
 8006e30:	f7fd fb46 	bl	80044c0 <_ZN15Screen1ViewBaseD1Ev>
 8006e34:	4620      	mov	r0, r4
 8006e36:	bd10      	pop	{r4, pc}
 8006e38:	08028b28 	.word	0x08028b28

08006e3c <_ZN11Screen1ViewD0Ev>:
 8006e3c:	b510      	push	{r4, lr}
 8006e3e:	4604      	mov	r4, r0
 8006e40:	f7ff fff2 	bl	8006e28 <_ZN11Screen1ViewD1Ev>
 8006e44:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8006e48:	4620      	mov	r0, r4
 8006e4a:	f01d fe4e 	bl	8024aea <_ZdlPvj>
 8006e4e:	4620      	mov	r0, r4
 8006e50:	bd10      	pop	{r4, pc}
	...

08006e54 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8006e54:	b510      	push	{r4, lr}
 8006e56:	4604      	mov	r4, r0
 8006e58:	f7fd fba2 	bl	80045a0 <_ZN15Screen1ViewBaseC1Ev>
 8006e5c:	4b01      	ldr	r3, [pc, #4]	@ (8006e64 <_ZN11Screen1ViewC1Ev+0x10>)
}
 8006e5e:	4620      	mov	r0, r4
Screen1View::Screen1View()
 8006e60:	6023      	str	r3, [r4, #0]
}
 8006e62:	bd10      	pop	{r4, pc}
 8006e64:	08028b28 	.word	0x08028b28

08006e68 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8006e68:	f7fd bb2b 	b.w	80044c2 <_ZN15Screen1ViewBase11setupScreenEv>

08006e6c <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {}
 8006e6c:	4770      	bx	lr

08006e6e <_ZThn4_N16Screen2PresenterD1Ev>:
 8006e6e:	3804      	subs	r0, #4
 8006e70:	4770      	bx	lr

08006e72 <_ZN16Screen2Presenter10deactivateEv>:
}

void Screen2Presenter::activate()
{

}
 8006e72:	4770      	bx	lr

08006e74 <_ZN16Screen2PresenterD0Ev>:
 8006e74:	b510      	push	{r4, lr}
 8006e76:	4604      	mov	r4, r0
 8006e78:	2110      	movs	r1, #16
 8006e7a:	f01d fe36 	bl	8024aea <_ZdlPvj>
 8006e7e:	4620      	mov	r0, r4
 8006e80:	bd10      	pop	{r4, pc}

08006e82 <_ZThn4_N16Screen2PresenterD0Ev>:
 8006e82:	f1a0 0004 	sub.w	r0, r0, #4
 8006e86:	e7f5      	b.n	8006e74 <_ZN16Screen2PresenterD0Ev>

08006e88 <_ZN16Screen2PresenterC1ER11Screen2View>:
 8006e88:	2200      	movs	r2, #0
    : view(v)
 8006e8a:	60c1      	str	r1, [r0, #12]
 8006e8c:	6082      	str	r2, [r0, #8]
 8006e8e:	4a02      	ldr	r2, [pc, #8]	@ (8006e98 <_ZN16Screen2PresenterC1ER11Screen2View+0x10>)
 8006e90:	6002      	str	r2, [r0, #0]
 8006e92:	3218      	adds	r2, #24
 8006e94:	6042      	str	r2, [r0, #4]
}
 8006e96:	4770      	bx	lr
 8006e98:	08028b60 	.word	0x08028b60

08006e9c <_ZN16Screen2Presenter15selectMatrizLedEiii>:

}


void Screen2Presenter:: selectMatrizLed(int matriz, int row, int column)
{
 8006e9c:	b570      	push	{r4, r5, r6, lr}
 8006e9e:	460c      	mov	r4, r1
 8006ea0:	4615      	mov	r5, r2
 8006ea2:	461e      	mov	r6, r3
	uint8_t columna = (uint8_t)column;
	//MatrizLedSelect(num_mx, fila, columna);
    // Avanzamos una posición por cada toque

    // Apagar todo primero
    MAX7219_ClearAll();
 8006ea4:	f7f9 fc9e 	bl	80007e4 <MAX7219_ClearAll>

    // Prender el nuevo LED
    MatrizLedSelect(num_mx, fila, columna);
 8006ea8:	b2e9      	uxtb	r1, r5
 8006eaa:	b2f2      	uxtb	r2, r6
 8006eac:	b2e0      	uxtb	r0, r4
    //MAX7219_LightSingleLed(current_matrix, current_row, current_bit);
}
 8006eae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    MatrizLedSelect(num_mx, fila, columna);
 8006eb2:	f7f9 bc37 	b.w	8000724 <MatrizLedSelect>

08006eb6 <_ZN11Screen2View14tearDownScreenEv>:
}

void Screen2View::tearDownScreen()
{
    Screen2ViewBase::tearDownScreen();
}
 8006eb6:	4770      	bx	lr

08006eb8 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 8006eb8:	4b03      	ldr	r3, [pc, #12]	@ (8006ec8 <_ZN11Screen2ViewD1Ev+0x10>)
 8006eba:	b510      	push	{r4, lr}
 8006ebc:	4604      	mov	r4, r0
 8006ebe:	6003      	str	r3, [r0, #0]
 8006ec0:	f7fd fc83 	bl	80047ca <_ZN15Screen2ViewBaseD1Ev>
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	bd10      	pop	{r4, pc}
 8006ec8:	08028b88 	.word	0x08028b88

08006ecc <_ZN11Screen2ViewD0Ev>:
 8006ecc:	b510      	push	{r4, lr}
 8006ece:	4604      	mov	r4, r0
 8006ed0:	f7ff fff2 	bl	8006eb8 <_ZN11Screen2ViewD1Ev>
 8006ed4:	f241 3104 	movw	r1, #4868	@ 0x1304
 8006ed8:	4620      	mov	r0, r4
 8006eda:	f01d fe06 	bl	8024aea <_ZdlPvj>
 8006ede:	4620      	mov	r0, r4
 8006ee0:	bd10      	pop	{r4, pc}
	...

08006ee4 <_ZN11Screen2ViewC1Ev>:
Screen2View::Screen2View()
 8006ee4:	b510      	push	{r4, lr}
 8006ee6:	4604      	mov	r4, r0
 8006ee8:	f7fe f882 	bl	8004ff0 <_ZN15Screen2ViewBaseC1Ev>
 8006eec:	4b01      	ldr	r3, [pc, #4]	@ (8006ef4 <_ZN11Screen2ViewC1Ev+0x10>)
}
 8006eee:	4620      	mov	r0, r4
Screen2View::Screen2View()
 8006ef0:	6023      	str	r3, [r4, #0]
}
 8006ef2:	bd10      	pop	{r4, pc}
 8006ef4:	08028b88 	.word	0x08028b88

08006ef8 <_ZN11Screen2View11setupScreenEv>:
    Screen2ViewBase::setupScreen();
 8006ef8:	f7fd bc68 	b.w	80047cc <_ZN15Screen2ViewBase11setupScreenEv>

08006efc <_ZN22WaitingScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~WaitingScreenPresenter() {}
 8006efc:	4770      	bx	lr

08006efe <_ZThn4_N22WaitingScreenPresenterD1Ev>:
 8006efe:	3804      	subs	r0, #4
 8006f00:	4770      	bx	lr

08006f02 <_ZN22WaitingScreenPresenter10deactivateEv>:
}

void WaitingScreenPresenter::activate()
{

}
 8006f02:	4770      	bx	lr

08006f04 <_ZN22WaitingScreenPresenterD0Ev>:
 8006f04:	b510      	push	{r4, lr}
 8006f06:	4604      	mov	r4, r0
 8006f08:	2110      	movs	r1, #16
 8006f0a:	f01d fdee 	bl	8024aea <_ZdlPvj>
 8006f0e:	4620      	mov	r0, r4
 8006f10:	bd10      	pop	{r4, pc}

08006f12 <_ZThn4_N22WaitingScreenPresenterD0Ev>:
 8006f12:	f1a0 0004 	sub.w	r0, r0, #4
 8006f16:	e7f5      	b.n	8006f04 <_ZN22WaitingScreenPresenterD0Ev>

08006f18 <_ZN22WaitingScreenPresenterC1ER17WaitingScreenView>:
 8006f18:	2200      	movs	r2, #0
    : view(v)
 8006f1a:	60c1      	str	r1, [r0, #12]
 8006f1c:	6082      	str	r2, [r0, #8]
 8006f1e:	4a02      	ldr	r2, [pc, #8]	@ (8006f28 <_ZN22WaitingScreenPresenterC1ER17WaitingScreenView+0x10>)
 8006f20:	6002      	str	r2, [r0, #0]
 8006f22:	3218      	adds	r2, #24
 8006f24:	6042      	str	r2, [r0, #4]
}
 8006f26:	4770      	bx	lr
 8006f28:	08028bc0 	.word	0x08028bc0

08006f2c <_ZN17WaitingScreenView14tearDownScreenEv>:
}

void WaitingScreenView::tearDownScreen()
{
    WaitingScreenViewBase::tearDownScreen();
}
 8006f2c:	4770      	bx	lr
	...

08006f30 <_ZN17WaitingScreenViewD1Ev>:

class WaitingScreenView : public WaitingScreenViewBase
{
public:
    WaitingScreenView();
    virtual ~WaitingScreenView() {}
 8006f30:	4b03      	ldr	r3, [pc, #12]	@ (8006f40 <_ZN17WaitingScreenViewD1Ev+0x10>)
 8006f32:	b510      	push	{r4, lr}
 8006f34:	4604      	mov	r4, r0
 8006f36:	6003      	str	r3, [r0, #0]
 8006f38:	f7ff fdbc 	bl	8006ab4 <_ZN21WaitingScreenViewBaseD1Ev>
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	bd10      	pop	{r4, pc}
 8006f40:	08028be8 	.word	0x08028be8

08006f44 <_ZN17WaitingScreenViewD0Ev>:
 8006f44:	b510      	push	{r4, lr}
 8006f46:	4604      	mov	r4, r0
 8006f48:	f7ff fff2 	bl	8006f30 <_ZN17WaitingScreenViewD1Ev>
 8006f4c:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8006f50:	4620      	mov	r0, r4
 8006f52:	f01d fdca 	bl	8024aea <_ZdlPvj>
 8006f56:	4620      	mov	r0, r4
 8006f58:	bd10      	pop	{r4, pc}
	...

08006f5c <_ZN17WaitingScreenViewC1Ev>:
WaitingScreenView::WaitingScreenView()
 8006f5c:	b510      	push	{r4, lr}
 8006f5e:	4604      	mov	r4, r0
 8006f60:	f7ff fde0 	bl	8006b24 <_ZN21WaitingScreenViewBaseC1Ev>
 8006f64:	4b01      	ldr	r3, [pc, #4]	@ (8006f6c <_ZN17WaitingScreenViewC1Ev+0x10>)
}
 8006f66:	4620      	mov	r0, r4
WaitingScreenView::WaitingScreenView()
 8006f68:	6023      	str	r3, [r4, #0]
}
 8006f6a:	bd10      	pop	{r4, pc}
 8006f6c:	08028be8 	.word	0x08028be8

08006f70 <_ZN17WaitingScreenView11setupScreenEv>:
    WaitingScreenViewBase::setupScreen();
 8006f70:	f7ff bda1 	b.w	8006ab6 <_ZN21WaitingScreenViewBase11setupScreenEv>

08006f74 <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8006f74:	2301      	movs	r3, #1
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 8006f76:	f44f 7248 	mov.w	r2, #800	@ 0x320
  
  return FT6X06_OK;
}
 8006f7a:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 8006f7c:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 8006f7e:	2302      	movs	r3, #2
 8006f80:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 8006f82:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8006f86:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 8006f8a:	4770      	bx	lr

08006f8c <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 8006f8c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8006f90:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 8006f92:	bf04      	itt	eq
 8006f94:	2300      	moveq	r3, #0
 8006f96:	f880 3024 	strbeq.w	r3, [r0, #36]	@ 0x24
  }
  
  return FT6X06_OK;
}
 8006f9a:	2000      	movs	r0, #0
 8006f9c:	4770      	bx	lr

08006f9e <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 8006f9e:	2000      	movs	r0, #0
 8006fa0:	4770      	bx	lr

08006fa2 <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8006fa2:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006fa4:	6904      	ldr	r4, [r0, #16]
 8006fa6:	8900      	ldrh	r0, [r0, #8]
 8006fa8:	46a4      	mov	ip, r4
}
 8006faa:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006fae:	4760      	bx	ip

08006fb0 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8006fb0:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006fb2:	68c4      	ldr	r4, [r0, #12]
 8006fb4:	8900      	ldrh	r0, [r0, #8]
 8006fb6:	46a4      	mov	ip, r4
}
 8006fb8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006fbc:	4760      	bx	ip

08006fbe <FT6X06_GestureConfig>:
{
 8006fbe:	b570      	push	{r4, r5, r6, lr}
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8006fc0:	f100 0518 	add.w	r5, r0, #24
{
 8006fc4:	460e      	mov	r6, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8006fc6:	7809      	ldrb	r1, [r1, #0]
 8006fc8:	4628      	mov	r0, r5
 8006fca:	f000 f911 	bl	80071f0 <ft6x06_radian_value>
 8006fce:	4604      	mov	r4, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8006fd0:	7931      	ldrb	r1, [r6, #4]
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	f000 f918 	bl	8007208 <ft6x06_offset_left_right>
 8006fd8:	4404      	add	r4, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8006fda:	7a31      	ldrb	r1, [r6, #8]
 8006fdc:	4628      	mov	r0, r5
 8006fde:	f000 f91f 	bl	8007220 <ft6x06_offset_up_down>
 8006fe2:	4404      	add	r4, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8006fe4:	7b31      	ldrb	r1, [r6, #12]
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	f000 f926 	bl	8007238 <ft6x06_disatnce_left_right>
 8006fec:	4404      	add	r4, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8006fee:	7c31      	ldrb	r1, [r6, #16]
 8006ff0:	4628      	mov	r0, r5
 8006ff2:	f000 f92d 	bl	8007250 <ft6x06_distance_up_down>
 8006ff6:	4404      	add	r4, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8006ff8:	7d31      	ldrb	r1, [r6, #20]
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	f000 f934 	bl	8007268 <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 8007000:	42c4      	cmn	r4, r0
}
 8007002:	bf14      	ite	ne
 8007004:	f04f 30ff 	movne.w	r0, #4294967295
 8007008:	2000      	moveq	r0, #0
 800700a:	bd70      	pop	{r4, r5, r6, pc}

0800700c <FT6X06_ReadID>:
{
 800700c:	b513      	push	{r0, r1, r4, lr}
 800700e:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 8007010:	3018      	adds	r0, #24
 8007012:	f10d 0107 	add.w	r1, sp, #7
 8007016:	f000 f93f 	bl	8007298 <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 800701a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800701e:	6023      	str	r3, [r4, #0]
}
 8007020:	b002      	add	sp, #8
 8007022:	bd10      	pop	{r4, pc}

08007024 <FT6X06_GetState>:
{
 8007024:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8007026:	f100 0518 	add.w	r5, r0, #24
{
 800702a:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 800702c:	a901      	add	r1, sp, #4
 800702e:	4628      	mov	r0, r5
 8007030:	f000 f8d1 	bl	80071d6 <ft6x06_td_status>
 8007034:	bb08      	cbnz	r0, 800707a <FT6X06_GetState+0x56>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8007036:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 800703a:	2b02      	cmp	r3, #2
 800703c:	bf98      	it	ls
 800703e:	4618      	movls	r0, r3
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8007040:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8007042:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8007044:	2103      	movs	r1, #3
 8007046:	4628      	mov	r0, r5
 8007048:	eb0d 0203 	add.w	r2, sp, r3
 800704c:	f000 f8b0 	bl	80071b0 <ft6x06_read_reg>
 8007050:	b9b0      	cbnz	r0, 8007080 <FT6X06_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8007052:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007056:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800705a:	021b      	lsls	r3, r3, #8
 800705c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007060:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8007062:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8007066:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8007068:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800706c:	021b      	lsls	r3, r3, #8
 800706e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007072:	4313      	orrs	r3, r2
 8007074:	60a3      	str	r3, [r4, #8]
}
 8007076:	b003      	add	sp, #12
 8007078:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 800707a:	f04f 30ff 	mov.w	r0, #4294967295
 800707e:	e7df      	b.n	8007040 <FT6X06_GetState+0x1c>
    ret = FT6X06_ERROR;
 8007080:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8007084:	e7f7      	b.n	8007076 <FT6X06_GetState+0x52>

08007086 <FT6X06_GetGesture>:
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 8007086:	3018      	adds	r0, #24
 8007088:	f000 b8a0 	b.w	80071cc <ft6x06_gest_id>

0800708c <FT6X06_EnableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 800708c:	2101      	movs	r1, #1
 800708e:	3018      	adds	r0, #24
 8007090:	f000 b8f6 	b.w	8007280 <ft6x06_g_mode>

08007094 <FT6X06_DisableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 8007094:	2100      	movs	r1, #0
 8007096:	3018      	adds	r0, #24
 8007098:	f000 b8f2 	b.w	8007280 <ft6x06_g_mode>

0800709c <FT6X06_Init>:
{
 800709c:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 800709e:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 80070a2:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 80070a4:	b96b      	cbnz	r3, 80070c2 <FT6X06_Init+0x26>
    pObj->IO.Init();
 80070a6:	6803      	ldr	r3, [r0, #0]
 80070a8:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 80070aa:	4620      	mov	r0, r4
 80070ac:	f7ff fff2 	bl	8007094 <FT6X06_DisableIT>
  if(ret != FT6X06_OK)
 80070b0:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 80070b2:	f04f 0301 	mov.w	r3, #1
  if(ret != FT6X06_OK)
 80070b6:	bf18      	it	ne
 80070b8:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 80070ba:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  if(ret != FT6X06_OK)
 80070be:	4240      	negs	r0, r0
}
 80070c0:	bd10      	pop	{r4, pc}
    ret += FT6X06_DisableIT(pObj);
 80070c2:	2000      	movs	r0, #0
  return ret;
 80070c4:	e7fc      	b.n	80070c0 <FT6X06_Init+0x24>

080070c6 <FT6X06_ClearIT>:
int32_t FT6X06_ClearIT(FT6X06_Object_t *pObj)
 80070c6:	2000      	movs	r0, #0
 80070c8:	4770      	bx	lr

080070ca <FT6X06_GetMultiTouchState>:
{
 80070ca:	b530      	push	{r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80070cc:	f100 0518 	add.w	r5, r0, #24
{
 80070d0:	b085      	sub	sp, #20
 80070d2:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80070d4:	4628      	mov	r0, r5
 80070d6:	a901      	add	r1, sp, #4
 80070d8:	f000 f87d 	bl	80071d6 <ft6x06_td_status>
 80070dc:	2800      	cmp	r0, #0
 80070de:	d145      	bne.n	800716c <FT6X06_GetMultiTouchState+0xa2>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 80070e0:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	bf98      	it	ls
 80070e8:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 80070ea:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 80070ec:	230c      	movs	r3, #12
 80070ee:	aa01      	add	r2, sp, #4
 80070f0:	2103      	movs	r1, #3
 80070f2:	4628      	mov	r0, r5
 80070f4:	f000 f85c 	bl	80071b0 <ft6x06_read_reg>
 80070f8:	2800      	cmp	r0, #0
 80070fa:	d13a      	bne.n	8007172 <FT6X06_GetMultiTouchState+0xa8>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80070fc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007100:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8007104:	0213      	lsls	r3, r2, #8
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8007106:	0992      	lsrs	r2, r2, #6
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8007108:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 800710c:	61e2      	str	r2, [r4, #28]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800710e:	430b      	orrs	r3, r1
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8007110:	f89d 1007 	ldrb.w	r1, [sp, #7]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8007114:	f89d 200a 	ldrb.w	r2, [sp, #10]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8007118:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800711a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800711e:	021b      	lsls	r3, r3, #8
 8007120:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007124:	430b      	orrs	r3, r1
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8007126:	f89d 100b 	ldrb.w	r1, [sp, #11]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800712a:	60e3      	str	r3, [r4, #12]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 800712c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8007130:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 8007132:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8007136:	091b      	lsrs	r3, r3, #4
 8007138:	6263      	str	r3, [r4, #36]	@ 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800713a:	0213      	lsls	r3, r2, #8
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 800713c:	0992      	lsrs	r2, r2, #6
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800713e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8007142:	6222      	str	r2, [r4, #32]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8007144:	430b      	orrs	r3, r1
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8007146:	f89d 100d 	ldrb.w	r1, [sp, #13]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800714a:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 800714c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8007150:	021b      	lsls	r3, r3, #8
 8007152:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007156:	430b      	orrs	r3, r1
 8007158:	6123      	str	r3, [r4, #16]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 800715a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800715e:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 8007160:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8007164:	091b      	lsrs	r3, r3, #4
 8007166:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8007168:	b005      	add	sp, #20
 800716a:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 800716c:	f04f 30ff 	mov.w	r0, #4294967295
 8007170:	e7bb      	b.n	80070ea <FT6X06_GetMultiTouchState+0x20>
    ret = FT6X06_ERROR;
 8007172:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 8007176:	e7f7      	b.n	8007168 <FT6X06_GetMultiTouchState+0x9e>

08007178 <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 8007178:	b190      	cbz	r0, 80071a0 <FT6X06_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 800717a:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 800717c:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800717e:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8007180:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8007182:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 8007184:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8007186:	68ca      	ldr	r2, [r1, #12]
 8007188:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800718a:	690a      	ldr	r2, [r1, #16]
 800718c:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800718e:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8007190:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 8007192:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8007194:	4a04      	ldr	r2, [pc, #16]	@ (80071a8 <FT6X06_RegisterBusIO+0x30>)
 8007196:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8007198:	4a04      	ldr	r2, [pc, #16]	@ (80071ac <FT6X06_RegisterBusIO+0x34>)
 800719a:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 800719c:	b103      	cbz	r3, 80071a0 <FT6X06_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 800719e:	4718      	bx	r3
}
 80071a0:	f04f 30ff 	mov.w	r0, #4294967295
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	08006fa3 	.word	0x08006fa3
 80071ac:	08006fb1 	.word	0x08006fb1

080071b0 <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 80071b0:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80071b2:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 80071b6:	46a4      	mov	ip, r4
}
 80071b8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80071bc:	4760      	bx	ip

080071be <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 80071be:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80071c0:	6804      	ldr	r4, [r0, #0]
 80071c2:	6880      	ldr	r0, [r0, #8]
 80071c4:	46a4      	mov	ip, r4
}
 80071c6:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80071ca:	4760      	bx	ip

080071cc <ft6x06_gest_id>:
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 80071cc:	2301      	movs	r3, #1
{
 80071ce:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 80071d0:	4619      	mov	r1, r3
 80071d2:	f7ff bfed 	b.w	80071b0 <ft6x06_read_reg>

080071d6 <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 80071d6:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 80071d8:	460a      	mov	r2, r1
{
 80071da:	460c      	mov	r4, r1
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 80071dc:	2301      	movs	r3, #1
 80071de:	2102      	movs	r1, #2
 80071e0:	f7ff ffe6 	bl	80071b0 <ft6x06_read_reg>
  
  if(ret == 0)
 80071e4:	b918      	cbnz	r0, 80071ee <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 80071e6:	7823      	ldrb	r3, [r4, #0]
 80071e8:	f003 030f 	and.w	r3, r3, #15
 80071ec:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 80071ee:	bd10      	pop	{r4, pc}

080071f0 <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 80071f0:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 80071f2:	2301      	movs	r3, #1
{
 80071f4:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 80071f8:	f10d 0207 	add.w	r2, sp, #7
 80071fc:	2191      	movs	r1, #145	@ 0x91
 80071fe:	f7ff ffde 	bl	80071be <ft6x06_write_reg>
}
 8007202:	b003      	add	sp, #12
 8007204:	f85d fb04 	ldr.w	pc, [sp], #4

08007208 <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8007208:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 800720a:	2301      	movs	r3, #1
{
 800720c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8007210:	f10d 0207 	add.w	r2, sp, #7
 8007214:	2192      	movs	r1, #146	@ 0x92
 8007216:	f7ff ffd2 	bl	80071be <ft6x06_write_reg>
}
 800721a:	b003      	add	sp, #12
 800721c:	f85d fb04 	ldr.w	pc, [sp], #4

08007220 <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8007220:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8007222:	2301      	movs	r3, #1
{
 8007224:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8007228:	f10d 0207 	add.w	r2, sp, #7
 800722c:	2193      	movs	r1, #147	@ 0x93
 800722e:	f7ff ffc6 	bl	80071be <ft6x06_write_reg>
}
 8007232:	b003      	add	sp, #12
 8007234:	f85d fb04 	ldr.w	pc, [sp], #4

08007238 <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8007238:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 800723a:	2301      	movs	r3, #1
{
 800723c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8007240:	f10d 0207 	add.w	r2, sp, #7
 8007244:	2194      	movs	r1, #148	@ 0x94
 8007246:	f7ff ffba 	bl	80071be <ft6x06_write_reg>
}
 800724a:	b003      	add	sp, #12
 800724c:	f85d fb04 	ldr.w	pc, [sp], #4

08007250 <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8007250:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8007252:	2301      	movs	r3, #1
{
 8007254:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8007258:	f10d 0207 	add.w	r2, sp, #7
 800725c:	2195      	movs	r1, #149	@ 0x95
 800725e:	f7ff ffae 	bl	80071be <ft6x06_write_reg>
}
 8007262:	b003      	add	sp, #12
 8007264:	f85d fb04 	ldr.w	pc, [sp], #4

08007268 <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 8007268:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 800726a:	2301      	movs	r3, #1
{
 800726c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8007270:	f10d 0207 	add.w	r2, sp, #7
 8007274:	2196      	movs	r1, #150	@ 0x96
 8007276:	f7ff ffa2 	bl	80071be <ft6x06_write_reg>
}
 800727a:	b003      	add	sp, #12
 800727c:	f85d fb04 	ldr.w	pc, [sp], #4

08007280 <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 8007280:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8007282:	2301      	movs	r3, #1
{
 8007284:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8007288:	f10d 0207 	add.w	r2, sp, #7
 800728c:	21a4      	movs	r1, #164	@ 0xa4
 800728e:	f7ff ff96 	bl	80071be <ft6x06_write_reg>
}
 8007292:	b003      	add	sp, #12
 8007294:	f85d fb04 	ldr.w	pc, [sp], #4

08007298 <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8007298:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 800729a:	2301      	movs	r3, #1
 800729c:	21a8      	movs	r1, #168	@ 0xa8
 800729e:	f7ff bf87 	b.w	80071b0 <ft6x06_read_reg>
	...

080072a4 <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80072a4:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 80072a6:	2201      	movs	r2, #1
 80072a8:	4b07      	ldr	r3, [pc, #28]	@ (80072c8 <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 80072aa:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 80072ae:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80072b0:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80072b2:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 80072b4:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80072b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80072ba:	f006 f9d9 	bl	800d670 <HAL_SDRAM_SendCommand>
 80072be:	3800      	subs	r0, #0
 80072c0:	bf18      	it	ne
 80072c2:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80072c4:	4240      	negs	r0, r0
 80072c6:	bd08      	pop	{r3, pc}
 80072c8:	2400c40c 	.word	0x2400c40c

080072cc <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80072cc:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 80072ce:	2202      	movs	r2, #2
 80072d0:	4b08      	ldr	r3, [pc, #32]	@ (80072f4 <IS42S32800J_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 80072d2:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 80072d6:	2101      	movs	r1, #1
 80072d8:	2200      	movs	r2, #0
 80072da:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80072de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80072e2:	4619      	mov	r1, r3
 80072e4:	f006 f9c4 	bl	800d670 <HAL_SDRAM_SendCommand>
 80072e8:	3800      	subs	r0, #0
 80072ea:	bf18      	it	ne
 80072ec:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80072ee:	4240      	negs	r0, r0
 80072f0:	bd08      	pop	{r3, pc}
 80072f2:	bf00      	nop
 80072f4:	2400c40c 	.word	0x2400c40c

080072f8 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 80072f8:	460a      	mov	r2, r1
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80072fa:	e9d1 3103 	ldrd	r3, r1, [r1, #12]
{
 80072fe:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8007300:	430b      	orrs	r3, r1
                     pRegMode->BurstType     |\
 8007302:	6951      	ldr	r1, [r2, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8007304:	2404      	movs	r4, #4
                     pRegMode->BurstType     |\
 8007306:	430b      	orrs	r3, r1
                     pRegMode->CASLatency    |\
 8007308:	6991      	ldr	r1, [r2, #24]
 800730a:	430b      	orrs	r3, r1
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800730c:	69d1      	ldr	r1, [r2, #28]
  Command.CommandTarget          = pRegMode->TargetBank;
 800730e:	6812      	ldr	r2, [r2, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8007310:	430b      	orrs	r3, r1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8007312:	4907      	ldr	r1, [pc, #28]	@ (8007330 <IS42S32800J_ModeRegConfig+0x38>)
  Command.CommandTarget          = pRegMode->TargetBank;
 8007314:	604a      	str	r2, [r1, #4]
  Command.AutoRefreshNumber      = 1;
 8007316:	2201      	movs	r2, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8007318:	600c      	str	r4, [r1, #0]
  Command.ModeRegisterDefinition = tmpmrd;
 800731a:	e9c1 2302 	strd	r2, r3, [r1, #8]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800731e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007322:	f006 f9a5 	bl	800d670 <HAL_SDRAM_SendCommand>
 8007326:	3800      	subs	r0, #0
 8007328:	bf18      	it	ne
 800732a:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 800732c:	4240      	negs	r0, r0
 800732e:	bd10      	pop	{r4, pc}
 8007330:	2400c40c 	.word	0x2400c40c

08007334 <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8007334:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 8007336:	4b08      	ldr	r3, [pc, #32]	@ (8007358 <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 8007338:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 800733c:	2108      	movs	r1, #8
 800733e:	2200      	movs	r2, #0
 8007340:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8007344:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007348:	4619      	mov	r1, r3
 800734a:	f006 f991 	bl	800d670 <HAL_SDRAM_SendCommand>
 800734e:	3800      	subs	r0, #0
 8007350:	bf18      	it	ne
 8007352:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8007354:	4240      	negs	r0, r0
 8007356:	bd08      	pop	{r3, pc}
 8007358:	2400c40c 	.word	0x2400c40c

0800735c <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 800735c:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800735e:	f006 f9a6 	bl	800d6ae <HAL_SDRAM_ProgramRefreshRate>
 8007362:	3800      	subs	r0, #0
 8007364:	bf18      	it	ne
 8007366:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8007368:	4240      	negs	r0, r0
 800736a:	bd08      	pop	{r3, pc}

0800736c <IS42S32800J_Init>:
{
 800736c:	b570      	push	{r4, r5, r6, lr}
 800736e:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8007370:	6809      	ldr	r1, [r1, #0]
{
 8007372:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8007374:	f7ff ff96 	bl	80072a4 <IS42S32800J_ClockEnable>
 8007378:	b110      	cbz	r0, 8007380 <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 800737a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800737e:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8007380:	f001 fc7c 	bl	8008c7c <HAL_GetTick>
 8007384:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8007386:	f001 fc79 	bl	8008c7c <HAL_GetTick>
 800738a:	4286      	cmp	r6, r0
 800738c:	d0fb      	beq.n	8007386 <IS42S32800J_Init+0x1a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 800738e:	6821      	ldr	r1, [r4, #0]
 8007390:	4628      	mov	r0, r5
 8007392:	f7ff ff9b 	bl	80072cc <IS42S32800J_Precharge>
 8007396:	2800      	cmp	r0, #0
 8007398:	d1ef      	bne.n	800737a <IS42S32800J_Init+0xe>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 800739a:	4628      	mov	r0, r5
 800739c:	e9d4 1200 	ldrd	r1, r2, [r4]
 80073a0:	f7ff ffc8 	bl	8007334 <IS42S32800J_RefreshMode>
 80073a4:	2800      	cmp	r0, #0
 80073a6:	d1e8      	bne.n	800737a <IS42S32800J_Init+0xe>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 80073a8:	4621      	mov	r1, r4
 80073aa:	4628      	mov	r0, r5
 80073ac:	f7ff ffa4 	bl	80072f8 <IS42S32800J_ModeRegConfig>
 80073b0:	2800      	cmp	r0, #0
 80073b2:	d1e2      	bne.n	800737a <IS42S32800J_Init+0xe>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 80073b4:	68a1      	ldr	r1, [r4, #8]
 80073b6:	4628      	mov	r0, r5
 80073b8:	f7ff ffd0 	bl	800735c <IS42S32800J_RefreshRate>
 80073bc:	3800      	subs	r0, #0
 80073be:	bf18      	it	ne
 80073c0:	2001      	movne	r0, #1
 80073c2:	4240      	negs	r0, r0
  return ret;
 80073c4:	e7db      	b.n	800737e <IS42S32800J_Init+0x12>

080073c6 <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 80073c6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80073ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 80073ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 80073d2:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 80073d6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80073da:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 80073de:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80073e2:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 80073e4:	2000      	movs	r0, #0
 80073e6:	4770      	bx	lr

080073e8 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80073e8:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80073ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
{
 80073ee:	b095      	sub	sp, #84	@ 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80073f0:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80073f4:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 80073f6:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80073f8:	920f      	str	r2, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 2;
 80073fa:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 80073fc:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80073fe:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 8007400:	920b      	str	r2, [sp, #44]	@ 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007402:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8007404:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_config.Match           = 0;
 8007406:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8007408:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 800740a:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800740c:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800740e:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007412:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  s_config.Interval        = 0x10;
 8007416:	2310      	movs	r3, #16
 8007418:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800741a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800741e:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8007420:	f240 1301 	movw	r3, #257	@ 0x101
 8007424:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007426:	f241 3388 	movw	r3, #5000	@ 0x1388
 800742a:	f004 fd28 	bl	800be7e <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 800742e:	2800      	cmp	r0, #0

}
 8007430:	bf14      	ite	ne
 8007432:	f06f 0004 	mvnne.w	r0, #4
 8007436:	2000      	moveq	r0, #0
 8007438:	b015      	add	sp, #84	@ 0x54
 800743a:	f85d fb04 	ldr.w	pc, [sp], #4

0800743e <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800743e:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007440:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8007444:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8007446:	bf08      	it	eq
 8007448:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 800744c:	b095      	sub	sp, #84	@ 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800744e:	bf18      	it	ne
 8007450:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8007454:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007456:	a906      	add	r1, sp, #24
{
 8007458:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800745a:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 800745c:	2306      	movs	r3, #6
 800745e:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8007460:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8007462:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8007466:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 8007468:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800746a:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800746c:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007470:	f004 fc04 	bl	800bc7c <HAL_QSPI_Command>
 8007474:	bb20      	cbnz	r0, 80074c0 <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8007476:	f240 2302 	movw	r3, #514	@ 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 800747a:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 800747c:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 800747e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8007482:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007484:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8007486:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 800748a:	f04f 0310 	mov.w	r3, #16
 800748e:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8007492:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007496:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8007498:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 800749c:	bf14      	ite	ne
 800749e:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 80074a2:	f04f 7340 	moveq.w	r3, #50331648	@ 0x3000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80074a6:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 80074a8:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80074aa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80074ae:	f004 fce6 	bl	800be7e <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 80074b2:	2800      	cmp	r0, #0
 80074b4:	bf14      	ite	ne
 80074b6:	f06f 0004 	mvnne.w	r0, #4
 80074ba:	2000      	moveq	r0, #0
}
 80074bc:	b015      	add	sp, #84	@ 0x54
 80074be:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 80074c0:	f06f 0001 	mvn.w	r0, #1
 80074c4:	e7fa      	b.n	80074bc <MT25TL01G_WriteEnable+0x7e>

080074c6 <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80074c6:	2903      	cmp	r1, #3
{
 80074c8:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80074ca:	bf08      	it	eq
 80074cc:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 80074d0:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80074d2:	bf18      	it	ne
 80074d4:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 80074d8:	4604      	mov	r4, r0
 80074da:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80074dc:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 80074de:	23b7      	movs	r3, #183	@ 0xb7
 80074e0:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80074e2:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80074e4:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80074e8:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 80074ea:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80074ec:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80074ee:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 80074f2:	f7ff ffa4 	bl	800743e <MT25TL01G_WriteEnable>
 80074f6:	b118      	cbz	r0, 8007500 <MT25TL01G_Enter4BytesAddressMode+0x3a>
    return MT25TL01G_ERROR_COMMAND;
 80074f8:	f06f 0001 	mvn.w	r0, #1
}
 80074fc:	b00f      	add	sp, #60	@ 0x3c
 80074fe:	bd30      	pop	{r4, r5, pc}
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007500:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007504:	4669      	mov	r1, sp
 8007506:	4620      	mov	r0, r4
 8007508:	f004 fbb8 	bl	800bc7c <HAL_QSPI_Command>
 800750c:	2800      	cmp	r0, #0
 800750e:	d1f3      	bne.n	80074f8 <MT25TL01G_Enter4BytesAddressMode+0x32>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8007510:	4629      	mov	r1, r5
 8007512:	4620      	mov	r0, r4
 8007514:	f7ff ff68 	bl	80073e8 <MT25TL01G_AutoPollingMemReady>
 8007518:	2800      	cmp	r0, #0
 800751a:	d0ef      	beq.n	80074fc <MT25TL01G_Enter4BytesAddressMode+0x36>
 800751c:	e7ec      	b.n	80074f8 <MT25TL01G_Enter4BytesAddressMode+0x32>

0800751e <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800751e:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8007520:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8007524:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007526:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800752a:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 800752c:	2335      	movs	r3, #53	@ 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800752e:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8007530:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8007532:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8007534:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8007538:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 800753a:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800753c:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800753e:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007542:	f004 fb9b 	bl	800bc7c <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8007546:	2800      	cmp	r0, #0
}
 8007548:	bf14      	ite	ne
 800754a:	f06f 0001 	mvnne.w	r0, #1
 800754e:	2000      	moveq	r0, #0
 8007550:	b00f      	add	sp, #60	@ 0x3c
 8007552:	f85d fb04 	ldr.w	pc, [sp], #4

08007556 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8007556:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8007558:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 800755c:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800755e:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8007562:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8007564:	23f5      	movs	r3, #245	@ 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007566:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8007568:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800756a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800756c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8007570:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8007572:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8007574:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007576:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800757a:	f004 fb7f 	bl	800bc7c <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 800757e:	2800      	cmp	r0, #0
}
 8007580:	bf14      	ite	ne
 8007582:	f06f 0001 	mvnne.w	r0, #1
 8007586:	2000      	moveq	r0, #0
 8007588:	b00f      	add	sp, #60	@ 0x3c
 800758a:	f85d fb04 	ldr.w	pc, [sp], #4

0800758e <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800758e:	b500      	push	{lr}
 8007590:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8007592:	2903      	cmp	r1, #3
 8007594:	d80e      	bhi.n	80075b4 <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 8007596:	e8df f001 	tbb	[pc, r1]
 800759a:	2902      	.short	0x2902
 800759c:	3f34      	.short	0x3f34
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800759e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80075a2:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 80075a4:	230e      	movs	r3, #14
 80075a6:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 80075a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80075ac:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 80075ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80075b2:	930b      	str	r3, [sp, #44]	@ 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 80075b4:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 80075b6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 80075ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80075be:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 80075c0:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 80075c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 80075c6:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80075c8:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 80075ca:	e9cd c20d 	strd	ip, r2, [sp, #52]	@ 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80075ce:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80075d0:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80075d2:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80075d4:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80075d8:	f004 fca2 	bl	800bf20 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 80075dc:	2800      	cmp	r0, #0
}
 80075de:	bf14      	ite	ne
 80075e0:	f06f 0005 	mvnne.w	r0, #5
 80075e4:	2000      	moveq	r0, #0
 80075e6:	b011      	add	sp, #68	@ 0x44
 80075e8:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80075ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80075f0:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 80075f2:	233d      	movs	r3, #61	@ 0x3d
 80075f4:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 80075f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80075fa:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 80075fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007600:	e7d7      	b.n	80075b2 <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8007602:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007606:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8007608:	23ee      	movs	r3, #238	@ 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 800760a:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800760c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007610:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8007612:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8007616:	e7cc      	b.n	80075b2 <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8007618:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800761c:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 800761e:	23ed      	movs	r3, #237	@ 0xed
 8007620:	e7f3      	b.n	800760a <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

08007622 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8007622:	b500      	push	{lr}
 8007624:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8007626:	2903      	cmp	r1, #3
 8007628:	d80e      	bhi.n	8007648 <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 800762a:	e8df f001 	tbb	[pc, r1]
 800762e:	2502      	.short	0x2502
 8007630:	3b30      	.short	0x3b30
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8007632:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007636:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 8007638:	230c      	movs	r3, #12
 800763a:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800763c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007640:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8007642:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8007646:	930b      	str	r3, [sp, #44]	@ 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8007648:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800764a:	466a      	mov	r2, sp
 800764c:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 800764e:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8007650:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8007654:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8007656:	2300      	movs	r3, #0
 8007658:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800765a:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800765c:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8007660:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8007664:	f004 fc5c 	bl	800bf20 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8007668:	2800      	cmp	r0, #0
}
 800766a:	bf14      	ite	ne
 800766c:	f06f 0005 	mvnne.w	r0, #5
 8007670:	2000      	moveq	r0, #0
 8007672:	b011      	add	sp, #68	@ 0x44
 8007674:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8007678:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800767c:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800767e:	23bc      	movs	r3, #188	@ 0xbc
 8007680:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 8007682:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007686:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8007688:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800768c:	e7db      	b.n	8007646 <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800768e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007692:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8007694:	23ec      	movs	r3, #236	@ 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8007696:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8007698:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800769c:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800769e:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80076a2:	e7d0      	b.n	8007646 <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80076a4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80076a8:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 80076aa:	23eb      	movs	r3, #235	@ 0xeb
 80076ac:	e7f3      	b.n	8007696 <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

080076ae <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80076ae:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80076b0:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 80076b4:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80076b6:	bf18      	it	ne
 80076b8:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 80076bc:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80076be:	bf08      	it	eq
 80076c0:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80076c4:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80076c6:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 80076c8:	2366      	movs	r3, #102	@ 0x66
 80076ca:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80076cc:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80076ce:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80076d2:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 80076d4:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80076d6:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80076d8:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80076dc:	f004 face 	bl	800bc7c <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 80076e0:	2800      	cmp	r0, #0
}
 80076e2:	bf14      	ite	ne
 80076e4:	f06f 0001 	mvnne.w	r0, #1
 80076e8:	2000      	moveq	r0, #0
 80076ea:	b00f      	add	sp, #60	@ 0x3c
 80076ec:	f85d fb04 	ldr.w	pc, [sp], #4

080076f0 <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80076f0:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80076f2:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 80076f6:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80076f8:	bf18      	it	ne
 80076fa:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 80076fe:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8007700:	bf08      	it	eq
 8007702:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007706:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8007708:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 800770a:	2399      	movs	r3, #153	@ 0x99
 800770c:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800770e:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8007710:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8007714:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8007716:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8007718:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800771a:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800771e:	f004 faad 	bl	800bc7c <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8007722:	2800      	cmp	r0, #0
}
 8007724:	bf14      	ite	ne
 8007726:	f06f 0001 	mvnne.w	r0, #1
 800772a:	2000      	moveq	r0, #0
 800772c:	b00f      	add	sp, #60	@ 0x3c
 800772e:	f85d fb04 	ldr.w	pc, [sp], #4

08007732 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8007732:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007734:	6884      	ldr	r4, [r0, #8]
 8007736:	8800      	ldrh	r0, [r0, #0]
 8007738:	46a4      	mov	ip, r4
}
 800773a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800773e:	4760      	bx	ip

08007740 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8007740:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8007742:	6844      	ldr	r4, [r0, #4]
 8007744:	8800      	ldrh	r0, [r0, #0]
 8007746:	46a4      	mov	ip, r4
}
 8007748:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800774c:	4760      	bx	ip

0800774e <OTM8009A_IO_Delay.isra.0>:

/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 800774e:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8007750:	68c3      	ldr	r3, [r0, #12]
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8007752:	4604      	mov	r4, r0
 8007754:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 8007756:	4798      	blx	r3
 8007758:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800775a:	68e3      	ldr	r3, [r4, #12]
 800775c:	4798      	blx	r3
 800775e:	1b83      	subs	r3, r0, r6
 8007760:	42ab      	cmp	r3, r5
 8007762:	d3fa      	bcc.n	800775a <OTM8009A_IO_Delay.isra.0+0xc>
  {
  }
  return OTM8009A_OK;
}
 8007764:	bd70      	pop	{r4, r5, r6, pc}
	...

08007768 <OTM8009A_Init>:
{
 8007768:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800776c:	2300      	movs	r3, #0
 800776e:	f100 0510 	add.w	r5, r0, #16
{
 8007772:	4607      	mov	r7, r0
 8007774:	460e      	mov	r6, r1
 8007776:	4690      	mov	r8, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007778:	4619      	mov	r1, r3
 800777a:	4ade      	ldr	r2, [pc, #888]	@ (8007af4 <OTM8009A_Init+0x38c>)
 800777c:	4628      	mov	r0, r5
 800777e:	f000 fb99 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8007782:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007784:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8007786:	4adc      	ldr	r2, [pc, #880]	@ (8007af8 <OTM8009A_Init+0x390>)
 8007788:	21ff      	movs	r1, #255	@ 0xff
 800778a:	4628      	mov	r0, r5
 800778c:	f000 fb92 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007790:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8007792:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007794:	4ad9      	ldr	r2, [pc, #868]	@ (8007afc <OTM8009A_Init+0x394>)
 8007796:	4619      	mov	r1, r3
 8007798:	4628      	mov	r0, r5
 800779a:	f000 fb8b 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800779e:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80077a0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80077a2:	4ad7      	ldr	r2, [pc, #860]	@ (8007b00 <OTM8009A_Init+0x398>)
 80077a4:	21ff      	movs	r1, #255	@ 0xff
 80077a6:	4628      	mov	r0, r5
 80077a8:	f000 fb84 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80077ac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80077ae:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80077b0:	4ad2      	ldr	r2, [pc, #840]	@ (8007afc <OTM8009A_Init+0x394>)
 80077b2:	4619      	mov	r1, r3
 80077b4:	4628      	mov	r0, r5
 80077b6:	f000 fb7d 	bl	8007eb4 <otm8009a_write_reg>
 80077ba:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80077bc:	2300      	movs	r3, #0
 80077be:	4ad1      	ldr	r2, [pc, #836]	@ (8007b04 <OTM8009A_Init+0x39c>)
 80077c0:	21c4      	movs	r1, #196	@ 0xc4
 80077c2:	4628      	mov	r0, r5
 80077c4:	f000 fb76 	bl	8007eb4 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 80077c8:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80077ca:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 80077cc:	4638      	mov	r0, r7
 80077ce:	f7ff ffbe 	bl	800774e <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 80077d2:	2300      	movs	r3, #0
 80077d4:	4acc      	ldr	r2, [pc, #816]	@ (8007b08 <OTM8009A_Init+0x3a0>)
 80077d6:	4628      	mov	r0, r5
 80077d8:	4619      	mov	r1, r3
 80077da:	f000 fb6b 	bl	8007eb4 <otm8009a_write_reg>
 80077de:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 80077e0:	2300      	movs	r3, #0
 80077e2:	4aca      	ldr	r2, [pc, #808]	@ (8007b0c <OTM8009A_Init+0x3a4>)
 80077e4:	21c4      	movs	r1, #196	@ 0xc4
 80077e6:	4628      	mov	r0, r5
 80077e8:	f000 fb64 	bl	8007eb4 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 80077ec:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 80077ee:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 80077f0:	4638      	mov	r0, r7
 80077f2:	f7ff ffac 	bl	800774e <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 80077f6:	2300      	movs	r3, #0
 80077f8:	4ac5      	ldr	r2, [pc, #788]	@ (8007b10 <OTM8009A_Init+0x3a8>)
 80077fa:	4628      	mov	r0, r5
 80077fc:	4619      	mov	r1, r3
 80077fe:	f000 fb59 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8007802:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8007804:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8007806:	4ac3      	ldr	r2, [pc, #780]	@ (8007b14 <OTM8009A_Init+0x3ac>)
 8007808:	21c5      	movs	r1, #197	@ 0xc5
 800780a:	4628      	mov	r0, r5
 800780c:	f000 fb52 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8007810:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8007812:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8007814:	4ac0      	ldr	r2, [pc, #768]	@ (8007b18 <OTM8009A_Init+0x3b0>)
 8007816:	4619      	mov	r1, r3
 8007818:	4628      	mov	r0, r5
 800781a:	f000 fb4b 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800781e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8007820:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8007822:	4abe      	ldr	r2, [pc, #760]	@ (8007b1c <OTM8009A_Init+0x3b4>)
 8007824:	21c5      	movs	r1, #197	@ 0xc5
 8007826:	4628      	mov	r0, r5
 8007828:	f000 fb44 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 800782c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800782e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8007830:	4abb      	ldr	r2, [pc, #748]	@ (8007b20 <OTM8009A_Init+0x3b8>)
 8007832:	4619      	mov	r1, r3
 8007834:	4628      	mov	r0, r5
 8007836:	f000 fb3d 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 800783a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 800783c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 800783e:	4ab9      	ldr	r2, [pc, #740]	@ (8007b24 <OTM8009A_Init+0x3bc>)
 8007840:	21c0      	movs	r1, #192	@ 0xc0
 8007842:	4628      	mov	r0, r5
 8007844:	f000 fb36 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007848:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 800784a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800784c:	4aa9      	ldr	r2, [pc, #676]	@ (8007af4 <OTM8009A_Init+0x38c>)
 800784e:	4619      	mov	r1, r3
 8007850:	4628      	mov	r0, r5
 8007852:	f000 fb2f 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8007856:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007858:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 800785a:	4ab3      	ldr	r2, [pc, #716]	@ (8007b28 <OTM8009A_Init+0x3c0>)
 800785c:	21d9      	movs	r1, #217	@ 0xd9
 800785e:	4628      	mov	r0, r5
 8007860:	f000 fb28 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8007864:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8007866:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8007868:	4ab0      	ldr	r2, [pc, #704]	@ (8007b2c <OTM8009A_Init+0x3c4>)
 800786a:	4619      	mov	r1, r3
 800786c:	4628      	mov	r0, r5
 800786e:	f000 fb21 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8007872:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8007874:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8007876:	4aae      	ldr	r2, [pc, #696]	@ (8007b30 <OTM8009A_Init+0x3c8>)
 8007878:	21c1      	movs	r1, #193	@ 0xc1
 800787a:	4628      	mov	r0, r5
 800787c:	f000 fb1a 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8007880:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8007882:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8007884:	4aab      	ldr	r2, [pc, #684]	@ (8007b34 <OTM8009A_Init+0x3cc>)
 8007886:	4619      	mov	r1, r3
 8007888:	4628      	mov	r0, r5
 800788a:	f000 fb13 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 800788e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8007890:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8007892:	4aa9      	ldr	r2, [pc, #676]	@ (8007b38 <OTM8009A_Init+0x3d0>)
 8007894:	21c5      	movs	r1, #197	@ 0xc5
 8007896:	4628      	mov	r0, r5
 8007898:	f000 fb0c 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 800789c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 800789e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80078a0:	4aa6      	ldr	r2, [pc, #664]	@ (8007b3c <OTM8009A_Init+0x3d4>)
 80078a2:	4619      	mov	r1, r3
 80078a4:	4628      	mov	r0, r5
 80078a6:	f000 fb05 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80078aa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80078ac:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80078ae:	4a9b      	ldr	r2, [pc, #620]	@ (8007b1c <OTM8009A_Init+0x3b4>)
 80078b0:	21c5      	movs	r1, #197	@ 0xc5
 80078b2:	4628      	mov	r0, r5
 80078b4:	f000 fafe 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80078b8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80078ba:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80078bc:	4a8d      	ldr	r2, [pc, #564]	@ (8007af4 <OTM8009A_Init+0x38c>)
 80078be:	4619      	mov	r1, r3
 80078c0:	4628      	mov	r0, r5
 80078c2:	f000 faf7 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80078c6:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80078c8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80078ca:	4a9d      	ldr	r2, [pc, #628]	@ (8007b40 <OTM8009A_Init+0x3d8>)
 80078cc:	21d8      	movs	r1, #216	@ 0xd8
 80078ce:	4628      	mov	r0, r5
 80078d0:	f000 faf0 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80078d4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80078d6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80078d8:	4a9a      	ldr	r2, [pc, #616]	@ (8007b44 <OTM8009A_Init+0x3dc>)
 80078da:	4619      	mov	r1, r3
 80078dc:	4628      	mov	r0, r5
 80078de:	f000 fae9 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80078e2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80078e4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80078e6:	4a98      	ldr	r2, [pc, #608]	@ (8007b48 <OTM8009A_Init+0x3e0>)
 80078e8:	21c5      	movs	r1, #197	@ 0xc5
 80078ea:	4628      	mov	r0, r5
 80078ec:	f000 fae2 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80078f0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80078f2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80078f4:	4a95      	ldr	r2, [pc, #596]	@ (8007b4c <OTM8009A_Init+0x3e4>)
 80078f6:	4619      	mov	r1, r3
 80078f8:	4628      	mov	r0, r5
 80078fa:	f000 fadb 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80078fe:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8007900:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8007902:	4a93      	ldr	r2, [pc, #588]	@ (8007b50 <OTM8009A_Init+0x3e8>)
 8007904:	21c0      	movs	r1, #192	@ 0xc0
 8007906:	4628      	mov	r0, r5
 8007908:	f000 fad4 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 800790c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 800790e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8007910:	4a90      	ldr	r2, [pc, #576]	@ (8007b54 <OTM8009A_Init+0x3ec>)
 8007912:	4619      	mov	r1, r3
 8007914:	4628      	mov	r0, r5
 8007916:	f000 facd 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 800791a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 800791c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 800791e:	4a8e      	ldr	r2, [pc, #568]	@ (8007b58 <OTM8009A_Init+0x3f0>)
 8007920:	21c5      	movs	r1, #197	@ 0xc5
 8007922:	4628      	mov	r0, r5
 8007924:	f000 fac6 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8007928:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 800792a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800792c:	4a8b      	ldr	r2, [pc, #556]	@ (8007b5c <OTM8009A_Init+0x3f4>)
 800792e:	4619      	mov	r1, r3
 8007930:	4628      	mov	r0, r5
 8007932:	f000 fabf 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8007936:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8007938:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800793a:	4a89      	ldr	r2, [pc, #548]	@ (8007b60 <OTM8009A_Init+0x3f8>)
 800793c:	21c4      	movs	r1, #196	@ 0xc4
 800793e:	4628      	mov	r0, r5
 8007940:	f000 fab8 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8007944:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8007946:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8007948:	4a78      	ldr	r2, [pc, #480]	@ (8007b2c <OTM8009A_Init+0x3c4>)
 800794a:	4619      	mov	r1, r3
 800794c:	4628      	mov	r0, r5
 800794e:	f000 fab1 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8007952:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8007954:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8007956:	4a83      	ldr	r2, [pc, #524]	@ (8007b64 <OTM8009A_Init+0x3fc>)
 8007958:	21c1      	movs	r1, #193	@ 0xc1
 800795a:	4628      	mov	r0, r5
 800795c:	f000 faaa 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8007960:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8007962:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8007964:	4a80      	ldr	r2, [pc, #512]	@ (8007b68 <OTM8009A_Init+0x400>)
 8007966:	4619      	mov	r1, r3
 8007968:	4628      	mov	r0, r5
 800796a:	f000 faa3 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 800796e:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8007970:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8007972:	4a7e      	ldr	r2, [pc, #504]	@ (8007b6c <OTM8009A_Init+0x404>)
 8007974:	21b3      	movs	r1, #179	@ 0xb3
 8007976:	4628      	mov	r0, r5
 8007978:	f000 fa9c 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800797c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 800797e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007980:	4a5e      	ldr	r2, [pc, #376]	@ (8007afc <OTM8009A_Init+0x394>)
 8007982:	4619      	mov	r1, r3
 8007984:	4628      	mov	r0, r5
 8007986:	f000 fa95 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 800798a:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800798c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 800798e:	4a78      	ldr	r2, [pc, #480]	@ (8007b70 <OTM8009A_Init+0x408>)
 8007990:	21ce      	movs	r1, #206	@ 0xce
 8007992:	4628      	mov	r0, r5
 8007994:	f000 fa8e 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8007998:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 800799a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800799c:	4a75      	ldr	r2, [pc, #468]	@ (8007b74 <OTM8009A_Init+0x40c>)
 800799e:	4619      	mov	r1, r3
 80079a0:	4628      	mov	r0, r5
 80079a2:	f000 fa87 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80079a6:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80079a8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80079aa:	4a73      	ldr	r2, [pc, #460]	@ (8007b78 <OTM8009A_Init+0x410>)
 80079ac:	21ce      	movs	r1, #206	@ 0xce
 80079ae:	4628      	mov	r0, r5
 80079b0:	f000 fa80 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80079b4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80079b6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80079b8:	4a70      	ldr	r2, [pc, #448]	@ (8007b7c <OTM8009A_Init+0x414>)
 80079ba:	4619      	mov	r1, r3
 80079bc:	4628      	mov	r0, r5
 80079be:	f000 fa79 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80079c2:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80079c4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80079c6:	4a6e      	ldr	r2, [pc, #440]	@ (8007b80 <OTM8009A_Init+0x418>)
 80079c8:	21ce      	movs	r1, #206	@ 0xce
 80079ca:	4628      	mov	r0, r5
 80079cc:	f000 fa72 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80079d0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80079d2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80079d4:	4a6b      	ldr	r2, [pc, #428]	@ (8007b84 <OTM8009A_Init+0x41c>)
 80079d6:	4619      	mov	r1, r3
 80079d8:	4628      	mov	r0, r5
 80079da:	f000 fa6b 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80079de:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80079e0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80079e2:	4a69      	ldr	r2, [pc, #420]	@ (8007b88 <OTM8009A_Init+0x420>)
 80079e4:	21cf      	movs	r1, #207	@ 0xcf
 80079e6:	4628      	mov	r0, r5
 80079e8:	f000 fa64 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80079ec:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80079ee:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80079f0:	4a66      	ldr	r2, [pc, #408]	@ (8007b8c <OTM8009A_Init+0x424>)
 80079f2:	4619      	mov	r1, r3
 80079f4:	4628      	mov	r0, r5
 80079f6:	f000 fa5d 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80079fa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80079fc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80079fe:	4a64      	ldr	r2, [pc, #400]	@ (8007b90 <OTM8009A_Init+0x428>)
 8007a00:	21cf      	movs	r1, #207	@ 0xcf
 8007a02:	4628      	mov	r0, r5
 8007a04:	f000 fa56 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007a08:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8007a0a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007a0c:	4a3b      	ldr	r2, [pc, #236]	@ (8007afc <OTM8009A_Init+0x394>)
 8007a0e:	4619      	mov	r1, r3
 8007a10:	4628      	mov	r0, r5
 8007a12:	f000 fa4f 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8007a16:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007a18:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8007a1a:	4a5e      	ldr	r2, [pc, #376]	@ (8007b94 <OTM8009A_Init+0x42c>)
 8007a1c:	21cb      	movs	r1, #203	@ 0xcb
 8007a1e:	4628      	mov	r0, r5
 8007a20:	f000 fa48 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8007a24:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8007a26:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8007a28:	4a5b      	ldr	r2, [pc, #364]	@ (8007b98 <OTM8009A_Init+0x430>)
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	f000 fa41 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8007a32:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8007a34:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8007a36:	4a59      	ldr	r2, [pc, #356]	@ (8007b9c <OTM8009A_Init+0x434>)
 8007a38:	21cb      	movs	r1, #203	@ 0xcb
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	f000 fa3a 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8007a40:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8007a42:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8007a44:	4a4b      	ldr	r2, [pc, #300]	@ (8007b74 <OTM8009A_Init+0x40c>)
 8007a46:	4619      	mov	r1, r3
 8007a48:	4628      	mov	r0, r5
 8007a4a:	f000 fa33 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8007a4e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8007a50:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8007a52:	4a53      	ldr	r2, [pc, #332]	@ (8007ba0 <OTM8009A_Init+0x438>)
 8007a54:	21cb      	movs	r1, #203	@ 0xcb
 8007a56:	4628      	mov	r0, r5
 8007a58:	f000 fa2c 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8007a5c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8007a5e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8007a60:	4a46      	ldr	r2, [pc, #280]	@ (8007b7c <OTM8009A_Init+0x414>)
 8007a62:	4619      	mov	r1, r3
 8007a64:	4628      	mov	r0, r5
 8007a66:	f000 fa25 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8007a6a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8007a6c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8007a6e:	4a4d      	ldr	r2, [pc, #308]	@ (8007ba4 <OTM8009A_Init+0x43c>)
 8007a70:	21cb      	movs	r1, #203	@ 0xcb
 8007a72:	4628      	mov	r0, r5
 8007a74:	f000 fa1e 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8007a78:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8007a7a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8007a7c:	4a41      	ldr	r2, [pc, #260]	@ (8007b84 <OTM8009A_Init+0x41c>)
 8007a7e:	4619      	mov	r1, r3
 8007a80:	4628      	mov	r0, r5
 8007a82:	f000 fa17 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8007a86:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8007a88:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8007a8a:	4a47      	ldr	r2, [pc, #284]	@ (8007ba8 <OTM8009A_Init+0x440>)
 8007a8c:	21cb      	movs	r1, #203	@ 0xcb
 8007a8e:	4628      	mov	r0, r5
 8007a90:	f000 fa10 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8007a94:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8007a96:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8007a98:	4a3c      	ldr	r2, [pc, #240]	@ (8007b8c <OTM8009A_Init+0x424>)
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	4628      	mov	r0, r5
 8007a9e:	f000 fa09 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8007aa2:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8007aa4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8007aa6:	4a41      	ldr	r2, [pc, #260]	@ (8007bac <OTM8009A_Init+0x444>)
 8007aa8:	21cb      	movs	r1, #203	@ 0xcb
 8007aaa:	4628      	mov	r0, r5
 8007aac:	f000 fa02 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8007ab0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8007ab2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8007ab4:	4a3e      	ldr	r2, [pc, #248]	@ (8007bb0 <OTM8009A_Init+0x448>)
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	4628      	mov	r0, r5
 8007aba:	f000 f9fb 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8007abe:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8007ac0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8007ac2:	4a3c      	ldr	r2, [pc, #240]	@ (8007bb4 <OTM8009A_Init+0x44c>)
 8007ac4:	21cb      	movs	r1, #203	@ 0xcb
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	f000 f9f4 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8007acc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8007ace:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8007ad0:	4a39      	ldr	r2, [pc, #228]	@ (8007bb8 <OTM8009A_Init+0x450>)
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	f000 f9ed 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8007ada:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8007adc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8007ade:	4a37      	ldr	r2, [pc, #220]	@ (8007bbc <OTM8009A_Init+0x454>)
 8007ae0:	21cb      	movs	r1, #203	@ 0xcb
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	f000 f9e6 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007ae8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8007aea:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007aec:	4a03      	ldr	r2, [pc, #12]	@ (8007afc <OTM8009A_Init+0x394>)
 8007aee:	4619      	mov	r1, r3
 8007af0:	4628      	mov	r0, r5
 8007af2:	e065      	b.n	8007bc0 <OTM8009A_Init+0x458>
 8007af4:	08028d25 	.word	0x08028d25
 8007af8:	08028d21 	.word	0x08028d21
 8007afc:	08028d26 	.word	0x08028d26
 8007b00:	08028d1f 	.word	0x08028d1f
 8007b04:	08028d27 	.word	0x08028d27
 8007b08:	08028d28 	.word	0x08028d28
 8007b0c:	08028d29 	.word	0x08028d29
 8007b10:	08028d2a 	.word	0x08028d2a
 8007b14:	08028d2b 	.word	0x08028d2b
 8007b18:	08028d2c 	.word	0x08028d2c
 8007b1c:	08028d2d 	.word	0x08028d2d
 8007b20:	08028d2e 	.word	0x08028d2e
 8007b24:	08028d2f 	.word	0x08028d2f
 8007b28:	08028d30 	.word	0x08028d30
 8007b2c:	08028d33 	.word	0x08028d33
 8007b30:	08028d34 	.word	0x08028d34
 8007b34:	08028d35 	.word	0x08028d35
 8007b38:	08028d36 	.word	0x08028d36
 8007b3c:	08028d37 	.word	0x08028d37
 8007b40:	08028d1d 	.word	0x08028d1d
 8007b44:	08028d38 	.word	0x08028d38
 8007b48:	08028d39 	.word	0x08028d39
 8007b4c:	08028d3a 	.word	0x08028d3a
 8007b50:	08028d3b 	.word	0x08028d3b
 8007b54:	08028d3c 	.word	0x08028d3c
 8007b58:	08028d3d 	.word	0x08028d3d
 8007b5c:	08028d31 	.word	0x08028d31
 8007b60:	08028d3e 	.word	0x08028d3e
 8007b64:	08028d3f 	.word	0x08028d3f
 8007b68:	08028d40 	.word	0x08028d40
 8007b6c:	08028d1b 	.word	0x08028d1b
 8007b70:	08028d15 	.word	0x08028d15
 8007b74:	08028d41 	.word	0x08028d41
 8007b78:	08028d07 	.word	0x08028d07
 8007b7c:	08028d42 	.word	0x08028d42
 8007b80:	08028cf9 	.word	0x08028cf9
 8007b84:	08028d43 	.word	0x08028d43
 8007b88:	08028cef 	.word	0x08028cef
 8007b8c:	08028d44 	.word	0x08028d44
 8007b90:	08028d51 	.word	0x08028d51
 8007b94:	08028ce5 	.word	0x08028ce5
 8007b98:	08028d45 	.word	0x08028d45
 8007b9c:	08028cd6 	.word	0x08028cd6
 8007ba0:	08028cc7 	.word	0x08028cc7
 8007ba4:	08028cbd 	.word	0x08028cbd
 8007ba8:	08028cae 	.word	0x08028cae
 8007bac:	08028c9f 	.word	0x08028c9f
 8007bb0:	08028d46 	.word	0x08028d46
 8007bb4:	08028c95 	.word	0x08028c95
 8007bb8:	08028d47 	.word	0x08028d47
 8007bbc:	08028c8b 	.word	0x08028c8b
 8007bc0:	f000 f978 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8007bc4:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007bc6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8007bc8:	4a8e      	ldr	r2, [pc, #568]	@ (8007e04 <OTM8009A_Init+0x69c>)
 8007bca:	21cc      	movs	r1, #204	@ 0xcc
 8007bcc:	4628      	mov	r0, r5
 8007bce:	f000 f971 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8007bd2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8007bd4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8007bd6:	4a8c      	ldr	r2, [pc, #560]	@ (8007e08 <OTM8009A_Init+0x6a0>)
 8007bd8:	4619      	mov	r1, r3
 8007bda:	4628      	mov	r0, r5
 8007bdc:	f000 f96a 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8007be0:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8007be2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8007be4:	4a89      	ldr	r2, [pc, #548]	@ (8007e0c <OTM8009A_Init+0x6a4>)
 8007be6:	21cc      	movs	r1, #204	@ 0xcc
 8007be8:	4628      	mov	r0, r5
 8007bea:	f000 f963 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8007bee:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8007bf0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8007bf2:	4a87      	ldr	r2, [pc, #540]	@ (8007e10 <OTM8009A_Init+0x6a8>)
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	4628      	mov	r0, r5
 8007bf8:	f000 f95c 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8007bfc:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8007bfe:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8007c00:	4a84      	ldr	r2, [pc, #528]	@ (8007e14 <OTM8009A_Init+0x6ac>)
 8007c02:	21cc      	movs	r1, #204	@ 0xcc
 8007c04:	4628      	mov	r0, r5
 8007c06:	f000 f955 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8007c0a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8007c0c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8007c0e:	4a82      	ldr	r2, [pc, #520]	@ (8007e18 <OTM8009A_Init+0x6b0>)
 8007c10:	4619      	mov	r1, r3
 8007c12:	4628      	mov	r0, r5
 8007c14:	f000 f94e 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8007c18:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8007c1a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8007c1c:	4a7f      	ldr	r2, [pc, #508]	@ (8007e1c <OTM8009A_Init+0x6b4>)
 8007c1e:	21cc      	movs	r1, #204	@ 0xcc
 8007c20:	4628      	mov	r0, r5
 8007c22:	f000 f947 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8007c26:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8007c28:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8007c2a:	4a7d      	ldr	r2, [pc, #500]	@ (8007e20 <OTM8009A_Init+0x6b8>)
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	4628      	mov	r0, r5
 8007c30:	f000 f940 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8007c34:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8007c36:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8007c38:	4a7a      	ldr	r2, [pc, #488]	@ (8007e24 <OTM8009A_Init+0x6bc>)
 8007c3a:	21cc      	movs	r1, #204	@ 0xcc
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	f000 f939 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8007c42:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8007c44:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8007c46:	4a78      	ldr	r2, [pc, #480]	@ (8007e28 <OTM8009A_Init+0x6c0>)
 8007c48:	4619      	mov	r1, r3
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	f000 f932 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8007c50:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8007c52:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8007c54:	4a75      	ldr	r2, [pc, #468]	@ (8007e2c <OTM8009A_Init+0x6c4>)
 8007c56:	21cc      	movs	r1, #204	@ 0xcc
 8007c58:	4628      	mov	r0, r5
 8007c5a:	f000 f92b 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8007c5e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8007c60:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8007c62:	4a73      	ldr	r2, [pc, #460]	@ (8007e30 <OTM8009A_Init+0x6c8>)
 8007c64:	4619      	mov	r1, r3
 8007c66:	4628      	mov	r0, r5
 8007c68:	f000 f924 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8007c6c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8007c6e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8007c70:	4a70      	ldr	r2, [pc, #448]	@ (8007e34 <OTM8009A_Init+0x6cc>)
 8007c72:	21c5      	movs	r1, #197	@ 0xc5
 8007c74:	4628      	mov	r0, r5
 8007c76:	f000 f91d 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8007c7a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8007c7c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8007c7e:	4a6e      	ldr	r2, [pc, #440]	@ (8007e38 <OTM8009A_Init+0x6d0>)
 8007c80:	4619      	mov	r1, r3
 8007c82:	4628      	mov	r0, r5
 8007c84:	f000 f916 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8007c88:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8007c8a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8007c8c:	4a6b      	ldr	r2, [pc, #428]	@ (8007e3c <OTM8009A_Init+0x6d4>)
 8007c8e:	21f5      	movs	r1, #245	@ 0xf5
 8007c90:	4628      	mov	r0, r5
 8007c92:	f000 f90f 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8007c96:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8007c98:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8007c9a:	4a69      	ldr	r2, [pc, #420]	@ (8007e40 <OTM8009A_Init+0x6d8>)
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	4628      	mov	r0, r5
 8007ca0:	f000 f908 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8007ca4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8007ca6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8007ca8:	4a66      	ldr	r2, [pc, #408]	@ (8007e44 <OTM8009A_Init+0x6dc>)
 8007caa:	21c6      	movs	r1, #198	@ 0xc6
 8007cac:	4628      	mov	r0, r5
 8007cae:	f000 f901 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007cb2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8007cb4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007cb6:	4a64      	ldr	r2, [pc, #400]	@ (8007e48 <OTM8009A_Init+0x6e0>)
 8007cb8:	4619      	mov	r1, r3
 8007cba:	4628      	mov	r0, r5
 8007cbc:	f000 f8fa 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8007cc0:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007cc2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8007cc4:	4a61      	ldr	r2, [pc, #388]	@ (8007e4c <OTM8009A_Init+0x6e4>)
 8007cc6:	21ff      	movs	r1, #255	@ 0xff
 8007cc8:	4628      	mov	r0, r5
 8007cca:	f000 f8f3 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007cce:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8007cd0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007cd2:	4a5d      	ldr	r2, [pc, #372]	@ (8007e48 <OTM8009A_Init+0x6e0>)
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	f000 f8ec 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007cdc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007cde:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007ce0:	4a59      	ldr	r2, [pc, #356]	@ (8007e48 <OTM8009A_Init+0x6e0>)
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	4628      	mov	r0, r5
 8007ce6:	f000 f8e5 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8007cea:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007cec:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8007cee:	4a58      	ldr	r2, [pc, #352]	@ (8007e50 <OTM8009A_Init+0x6e8>)
 8007cf0:	21e1      	movs	r1, #225	@ 0xe1
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	f000 f8de 	bl	8007eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007cf8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8007cfa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007cfc:	4a52      	ldr	r2, [pc, #328]	@ (8007e48 <OTM8009A_Init+0x6e0>)
 8007cfe:	4619      	mov	r1, r3
 8007d00:	4628      	mov	r0, r5
 8007d02:	f000 f8d7 	bl	8007eb4 <otm8009a_write_reg>
 8007d06:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8007d08:	2310      	movs	r3, #16
 8007d0a:	4a52      	ldr	r2, [pc, #328]	@ (8007e54 <OTM8009A_Init+0x6ec>)
 8007d0c:	21e2      	movs	r1, #226	@ 0xe2
 8007d0e:	4628      	mov	r0, r5
 8007d10:	f000 f8d0 	bl	8007eb4 <otm8009a_write_reg>
 8007d14:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8007d16:	2300      	movs	r3, #0
 8007d18:	4a4f      	ldr	r2, [pc, #316]	@ (8007e58 <OTM8009A_Init+0x6f0>)
 8007d1a:	2111      	movs	r1, #17
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	f000 f8c9 	bl	8007eb4 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 120);
 8007d22:	2178      	movs	r1, #120	@ 0x78
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8007d24:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 8007d26:	4638      	mov	r0, r7
 8007d28:	f7ff fd11 	bl	800774e <OTM8009A_IO_Delay.isra.0>
  switch(ColorCoding)
 8007d2c:	4f4b      	ldr	r7, [pc, #300]	@ (8007e5c <OTM8009A_Init+0x6f4>)
 8007d2e:	2e00      	cmp	r6, #0
 8007d30:	d061      	beq.n	8007df6 <OTM8009A_Init+0x68e>
 8007d32:	2e02      	cmp	r6, #2
 8007d34:	d107      	bne.n	8007d46 <OTM8009A_Init+0x5de>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8007d36:	2300      	movs	r3, #0
 8007d38:	4a49      	ldr	r2, [pc, #292]	@ (8007e60 <OTM8009A_Init+0x6f8>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8007d3a:	213a      	movs	r1, #58	@ 0x3a
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	f000 f8b9 	bl	8007eb4 <otm8009a_write_reg>
 8007d42:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8007d44:	607e      	str	r6, [r7, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8007d46:	f1b8 0f01 	cmp.w	r8, #1
 8007d4a:	d157      	bne.n	8007dfc <OTM8009A_Init+0x694>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8007d4c:	2360      	movs	r3, #96	@ 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8007d4e:	f10d 0207 	add.w	r2, sp, #7
 8007d52:	2136      	movs	r1, #54	@ 0x36
 8007d54:	4628      	mov	r0, r5
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8007d56:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	f000 f8aa 	bl	8007eb4 <otm8009a_write_reg>
 8007d60:	1826      	adds	r6, r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8007d62:	2304      	movs	r3, #4
 8007d64:	4a3f      	ldr	r2, [pc, #252]	@ (8007e64 <OTM8009A_Init+0x6fc>)
 8007d66:	212a      	movs	r1, #42	@ 0x2a
 8007d68:	4628      	mov	r0, r5
 8007d6a:	f000 f8a3 	bl	8007eb4 <otm8009a_write_reg>
 8007d6e:	4406      	add	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8007d70:	2304      	movs	r3, #4
 8007d72:	4a3d      	ldr	r2, [pc, #244]	@ (8007e68 <OTM8009A_Init+0x700>)
 8007d74:	212b      	movs	r1, #43	@ 0x2b
 8007d76:	4628      	mov	r0, r5
 8007d78:	f000 f89c 	bl	8007eb4 <otm8009a_write_reg>
 8007d7c:	1834      	adds	r4, r6, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8007d7e:	f8c7 8000 	str.w	r8, [r7]
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8007d82:	2600      	movs	r6, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8007d84:	2300      	movs	r3, #0
 8007d86:	4a39      	ldr	r2, [pc, #228]	@ (8007e6c <OTM8009A_Init+0x704>)
 8007d88:	2151      	movs	r1, #81	@ 0x51
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	f000 f892 	bl	8007eb4 <otm8009a_write_reg>
 8007d90:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8007d92:	4633      	mov	r3, r6
 8007d94:	4a36      	ldr	r2, [pc, #216]	@ (8007e70 <OTM8009A_Init+0x708>)
 8007d96:	2153      	movs	r1, #83	@ 0x53
 8007d98:	4628      	mov	r0, r5
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8007d9a:	60be      	str	r6, [r7, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8007d9c:	f000 f88a 	bl	8007eb4 <otm8009a_write_reg>
 8007da0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8007da2:	4633      	mov	r3, r6
 8007da4:	4a33      	ldr	r2, [pc, #204]	@ (8007e74 <OTM8009A_Init+0x70c>)
 8007da6:	2155      	movs	r1, #85	@ 0x55
 8007da8:	4628      	mov	r0, r5
 8007daa:	f000 f883 	bl	8007eb4 <otm8009a_write_reg>
 8007dae:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8007db0:	4633      	mov	r3, r6
 8007db2:	4a31      	ldr	r2, [pc, #196]	@ (8007e78 <OTM8009A_Init+0x710>)
 8007db4:	215e      	movs	r1, #94	@ 0x5e
 8007db6:	4628      	mov	r0, r5
 8007db8:	f000 f87c 	bl	8007eb4 <otm8009a_write_reg>
 8007dbc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8007dbe:	4633      	mov	r3, r6
 8007dc0:	4a2e      	ldr	r2, [pc, #184]	@ (8007e7c <OTM8009A_Init+0x714>)
 8007dc2:	2129      	movs	r1, #41	@ 0x29
 8007dc4:	4628      	mov	r0, r5
 8007dc6:	f000 f875 	bl	8007eb4 <otm8009a_write_reg>
 8007dca:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007dcc:	4633      	mov	r3, r6
 8007dce:	4631      	mov	r1, r6
 8007dd0:	4a1d      	ldr	r2, [pc, #116]	@ (8007e48 <OTM8009A_Init+0x6e0>)
 8007dd2:	4628      	mov	r0, r5
 8007dd4:	f000 f86e 	bl	8007eb4 <otm8009a_write_reg>
 8007dd8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8007dda:	4633      	mov	r3, r6
 8007ddc:	4a28      	ldr	r2, [pc, #160]	@ (8007e80 <OTM8009A_Init+0x718>)
 8007dde:	212c      	movs	r1, #44	@ 0x2c
 8007de0:	4628      	mov	r0, r5
 8007de2:	f000 f867 	bl	8007eb4 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 8007de6:	42c4      	cmn	r4, r0
}
 8007de8:	bf14      	ite	ne
 8007dea:	f04f 30ff 	movne.w	r0, #4294967295
 8007dee:	4630      	moveq	r0, r6
 8007df0:	b002      	add	sp, #8
 8007df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8007df6:	4633      	mov	r3, r6
 8007df8:	4a22      	ldr	r2, [pc, #136]	@ (8007e84 <OTM8009A_Init+0x71c>)
 8007dfa:	e79e      	b.n	8007d3a <OTM8009A_Init+0x5d2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	603b      	str	r3, [r7, #0]
 8007e00:	e7bf      	b.n	8007d82 <OTM8009A_Init+0x61a>
 8007e02:	bf00      	nop
 8007e04:	08028c81 	.word	0x08028c81
 8007e08:	08028d45 	.word	0x08028d45
 8007e0c:	08028c72 	.word	0x08028c72
 8007e10:	08028d41 	.word	0x08028d41
 8007e14:	08028c63 	.word	0x08028c63
 8007e18:	08028d42 	.word	0x08028d42
 8007e1c:	08028c59 	.word	0x08028c59
 8007e20:	08028d43 	.word	0x08028d43
 8007e24:	08028c4a 	.word	0x08028c4a
 8007e28:	08028d44 	.word	0x08028d44
 8007e2c:	08028c3b 	.word	0x08028c3b
 8007e30:	08028d31 	.word	0x08028d31
 8007e34:	08028d52 	.word	0x08028d52
 8007e38:	08028d53 	.word	0x08028d53
 8007e3c:	08028d54 	.word	0x08028d54
 8007e40:	08028d55 	.word	0x08028d55
 8007e44:	08028d56 	.word	0x08028d56
 8007e48:	08028d25 	.word	0x08028d25
 8007e4c:	08028c38 	.word	0x08028c38
 8007e50:	08028c28 	.word	0x08028c28
 8007e54:	08028c18 	.word	0x08028c18
 8007e58:	08028d48 	.word	0x08028d48
 8007e5c:	2400c41c 	.word	0x2400c41c
 8007e60:	08028d49 	.word	0x08028d49
 8007e64:	08028d5b 	.word	0x08028d5b
 8007e68:	08028d57 	.word	0x08028d57
 8007e6c:	08028d4b 	.word	0x08028d4b
 8007e70:	08028d4c 	.word	0x08028d4c
 8007e74:	08028d4d 	.word	0x08028d4d
 8007e78:	08028d4e 	.word	0x08028d4e
 8007e7c:	08028d4f 	.word	0x08028d4f
 8007e80:	08028d50 	.word	0x08028d50
 8007e84:	08028d4a 	.word	0x08028d4a

08007e88 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8007e88:	b160      	cbz	r0, 8007ea4 <OTM8009A_RegisterBusIO+0x1c>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8007e8a:	684b      	ldr	r3, [r1, #4]
 8007e8c:	6043      	str	r3, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8007e8e:	688b      	ldr	r3, [r1, #8]
 8007e90:	6083      	str	r3, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 8007e92:	68cb      	ldr	r3, [r1, #12]
    pObj->Ctx.handle   = pObj;
 8007e94:	6180      	str	r0, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8007e96:	60c3      	str	r3, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8007e98:	4b04      	ldr	r3, [pc, #16]	@ (8007eac <OTM8009A_RegisterBusIO+0x24>)
 8007e9a:	6143      	str	r3, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8007e9c:	4b04      	ldr	r3, [pc, #16]	@ (8007eb0 <OTM8009A_RegisterBusIO+0x28>)
 8007e9e:	6103      	str	r3, [r0, #16]
  int32_t ret = OTM8009A_OK;
 8007ea0:	2000      	movs	r0, #0
 8007ea2:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 8007ea4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	08007733 	.word	0x08007733
 8007eb0:	08007741 	.word	0x08007741

08007eb4 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8007eb4:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8007eb6:	6804      	ldr	r4, [r0, #0]
 8007eb8:	6880      	ldr	r0, [r0, #8]
 8007eba:	46a4      	mov	ip, r4
}
 8007ebc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8007ec0:	4760      	bx	ip
	...

08007ec4 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 8007ec4:	4a10      	ldr	r2, [pc, #64]	@ (8007f08 <BSP_I2C4_DeInit+0x44>)
{
 8007ec6:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 8007ec8:	6813      	ldr	r3, [r2, #0]
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 8007ece:	b10b      	cbz	r3, 8007ed4 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 8007ed0:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 8007ed2:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8007ed4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007ed8:	480c      	ldr	r0, [pc, #48]	@ (8007f0c <BSP_I2C4_DeInit+0x48>)
 8007eda:	f001 fe3d 	bl	8009b58 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8007ede:	480b      	ldr	r0, [pc, #44]	@ (8007f0c <BSP_I2C4_DeInit+0x48>)
 8007ee0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007ee4:	f001 fe38 	bl	8009b58 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8007ee8:	4a09      	ldr	r2, [pc, #36]	@ (8007f10 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8007eea:	480a      	ldr	r0, [pc, #40]	@ (8007f14 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 8007eec:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 8007ef0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ef4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8007ef8:	f002 f87e 	bl	8009ff8 <HAL_I2C_DeInit>
 8007efc:	2800      	cmp	r0, #0
 8007efe:	d0e7      	beq.n	8007ed0 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 8007f00:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8007f04:	e7e5      	b.n	8007ed2 <BSP_I2C4_DeInit+0xe>
 8007f06:	bf00      	nop
 8007f08:	2400ce80 	.word	0x2400ce80
 8007f0c:	58020c00 	.word	0x58020c00
 8007f10:	58024400 	.word	0x58024400
 8007f14:	2400c428 	.word	0x2400c428

08007f18 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	2201      	movs	r2, #1
{
 8007f1c:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 8007f1e:	6041      	str	r1, [r0, #4]
{
 8007f20:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8007f22:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8007f24:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 8007f28:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8007f2c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8007f30:	f002 f80c 	bl	8009f4c <HAL_I2C_Init>
 8007f34:	4601      	mov	r1, r0
 8007f36:	b108      	cbz	r0, 8007f3c <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 8007f38:	2001      	movs	r0, #1
}
 8007f3a:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	f002 fa32 	bl	800a3a6 <HAL_I2CEx_ConfigAnalogFilter>
 8007f42:	4601      	mov	r1, r0
 8007f44:	2800      	cmp	r0, #0
 8007f46:	d1f7      	bne.n	8007f38 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8007f48:	4620      	mov	r0, r4
 8007f4a:	f002 fa52 	bl	800a3f2 <HAL_I2CEx_ConfigDigitalFilter>
 8007f4e:	3800      	subs	r0, #0
 8007f50:	bf18      	it	ne
 8007f52:	2001      	movne	r0, #1
 8007f54:	e7f1      	b.n	8007f3a <MX_I2C4_Init+0x22>
	...

08007f58 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 8007f58:	4ba1      	ldr	r3, [pc, #644]	@ (80081e0 <BSP_I2C4_Init+0x288>)
 8007f5a:	48a2      	ldr	r0, [pc, #648]	@ (80081e4 <BSP_I2C4_Init+0x28c>)
{
 8007f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 8007f60:	6003      	str	r3, [r0, #0]
{
 8007f62:	b093      	sub	sp, #76	@ 0x4c
  if (I2c4InitCounter == 0U)
 8007f64:	4ba0      	ldr	r3, [pc, #640]	@ (80081e8 <BSP_I2C4_Init+0x290>)
 8007f66:	681c      	ldr	r4, [r3, #0]
 8007f68:	b11c      	cbz	r4, 8007f72 <BSP_I2C4_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8007f6a:	2000      	movs	r0, #0
}
 8007f6c:	b013      	add	sp, #76	@ 0x4c
 8007f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 8007f72:	2201      	movs	r2, #1
 8007f74:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8007f76:	f002 fa11 	bl	800a39c <HAL_I2C_GetState>
 8007f7a:	2800      	cmp	r0, #0
 8007f7c:	d1f5      	bne.n	8007f6a <BSP_I2C4_Init+0x12>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8007f7e:	4d9b      	ldr	r5, [pc, #620]	@ (80081ec <BSP_I2C4_Init+0x294>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8007f80:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8007f84:	2702      	movs	r7, #2
 8007f86:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8007f88:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8007f8c:	a90d      	add	r1, sp, #52	@ 0x34
 8007f8e:	4898      	ldr	r0, [pc, #608]	@ (80081f0 <BSP_I2C4_Init+0x298>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8007f90:	f043 0308 	orr.w	r3, r3, #8
 8007f94:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8007f98:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8007f9c:	f003 0308 	and.w	r3, r3, #8
 8007fa0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fa2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8007fa4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8007fa8:	f043 0308 	orr.w	r3, r3, #8
 8007fac:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8007fb0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8007fb4:	940f      	str	r4, [sp, #60]	@ 0x3c
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8007fb6:	f003 0308 	and.w	r3, r3, #8
 8007fba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007fbc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8007fbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8007fc2:	e9cd 7610 	strd	r7, r6, [sp, #64]	@ 0x40
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8007fc6:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8007fca:	f001 fcdd 	bl	8009988 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8007fce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8007fd2:	a90d      	add	r1, sp, #52	@ 0x34
 8007fd4:	4886      	ldr	r0, [pc, #536]	@ (80081f0 <BSP_I2C4_Init+0x298>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8007fd6:	9611      	str	r6, [sp, #68]	@ 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8007fd8:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8007fdc:	e9cd 470f 	strd	r4, r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8007fe0:	f001 fcd2 	bl	8009988 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 8007fe4:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 8007fe8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fec:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
 8007ff0:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 8007ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ff8:	930c      	str	r3, [sp, #48]	@ 0x30
 8007ffa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  BUS_I2C4_FORCE_RESET();
 8007ffc:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8008000:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008004:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
  BUS_I2C4_RELEASE_RESET();
 8008008:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800800c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008010:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8008014:	f004 fcbc 	bl	800c990 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8008018:	2800      	cmp	r0, #0
 800801a:	d06f      	beq.n	80080fc <BSP_I2C4_Init+0x1a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800801c:	4b75      	ldr	r3, [pc, #468]	@ (80081f4 <BSP_I2C4_Init+0x29c>)
  if (tsdadel_max <= 0)
 800801e:	4622      	mov	r2, r4
 8008020:	46a2      	mov	sl, r4
  uint32_t prev_presc = I2C_PRESC_MAX;
 8008022:	f04f 0910 	mov.w	r9, #16
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8008026:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800802a:	f8df b1d0 	ldr.w	fp, [pc, #464]	@ 80081fc <BSP_I2C4_Init+0x2a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800802e:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8008032:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8008036:	fa00 f607 	lsl.w	r6, r0, r7
  if (tsdadel_max <= 0)
 800803a:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800803c:	f1c5 0332 	rsb	r3, r5, #50	@ 0x32
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8008040:	f5c6 76c3 	rsb	r6, r6, #390	@ 0x186
  if (tsdadel_min <= 0)
 8008044:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  if (tsdadel_max <= 0)
 8008048:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
  if (tsdadel_min <= 0)
 800804c:	9300      	str	r3, [sp, #0]
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800804e:	4b6a      	ldr	r3, [pc, #424]	@ (80081f8 <BSP_I2C4_Init+0x2a0>)
 8008050:	681b      	ldr	r3, [r3, #0]
{
 8008052:	4688      	mov	r8, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8008054:	f04f 0c00 	mov.w	ip, #0
      if (tscldel >= (uint32_t)tscldel_min)
 8008058:	f5b8 7faf 	cmp.w	r8, #350	@ 0x15e
 800805c:	f8cd c004 	str.w	ip, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8008060:	f10c 0c01 	add.w	ip, ip, #1
      if (tscldel >= (uint32_t)tscldel_min)
 8008064:	d35d      	bcc.n	8008122 <BSP_I2C4_Init+0x1ca>
 8008066:	2700      	movs	r7, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8008068:	46be      	mov	lr, r7
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800806a:	9d00      	ldr	r5, [sp, #0]
 800806c:	42bd      	cmp	r5, r7
 800806e:	d852      	bhi.n	8008116 <BSP_I2C4_Init+0x1be>
 8008070:	42be      	cmp	r6, r7
 8008072:	d350      	bcc.n	8008116 <BSP_I2C4_Init+0x1be>
            if(presc != prev_presc)
 8008074:	4591      	cmp	r9, r2
 8008076:	d04e      	beq.n	8008116 <BSP_I2C4_Init+0x1be>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008078:	2514      	movs	r5, #20
 800807a:	fb05 fa03 	mul.w	sl, r5, r3
              I2c_valid_timing_nbr ++;
 800807e:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8008080:	9d01      	ldr	r5, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008082:	eb0b 090a 	add.w	r9, fp, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008086:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008088:	f84b 200a 	str.w	r2, [fp, sl]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800808c:	e9c9 5e01 	strd	r5, lr, [r9, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008090:	d93e      	bls.n	8008110 <BSP_I2C4_Init+0x1b8>
 8008092:	4a59      	ldr	r2, [pc, #356]	@ (80081f8 <BSP_I2C4_Init+0x2a0>)
 8008094:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8008096:	4b58      	ldr	r3, [pc, #352]	@ (80081f8 <BSP_I2C4_Init+0x2a0>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8008098:	f640 15c4 	movw	r5, #2500	@ 0x9c4
 800809c:	f04f 32ff 	mov.w	r2, #4294967295
 80080a0:	4956      	ldr	r1, [pc, #344]	@ (80081fc <BSP_I2C4_Init+0x2a4>)
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80080a2:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80080a4:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80080a6:	9305      	str	r3, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80080a8:	0043      	lsls	r3, r0, #1
 80080aa:	f5c3 6b80 	rsb	fp, r3, #1024	@ 0x400
 80080ae:	e9cd 2501 	strd	r2, r5, [sp, #4]
 80080b2:	f10b 0b01 	add.w	fp, fp, #1
 80080b6:	f103 0532 	add.w	r5, r3, #50	@ 0x32
 80080ba:	f6a3 0334 	subw	r3, r3, #2100	@ 0x834
 80080be:	9508      	str	r5, [sp, #32]
 80080c0:	9309      	str	r3, [sp, #36]	@ 0x24
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80080c2:	9b05      	ldr	r3, [sp, #20]
 80080c4:	429f      	cmp	r7, r3
 80080c6:	d138      	bne.n	800813a <BSP_I2C4_Init+0x1e2>
        if (idx < I2C_VALID_TIMING_NBR)
 80080c8:	9b01      	ldr	r3, [sp, #4]
 80080ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80080cc:	d816      	bhi.n	80080fc <BSP_I2C4_Init+0x1a4>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80080ce:	2114      	movs	r1, #20
 80080d0:	9a01      	ldr	r2, [sp, #4]
 80080d2:	4b4a      	ldr	r3, [pc, #296]	@ (80081fc <BSP_I2C4_Init+0x2a4>)
 80080d4:	434a      	muls	r2, r1
 80080d6:	1899      	adds	r1, r3, r2
 80080d8:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80080da:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80080dc:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80080e0:	684b      	ldr	r3, [r1, #4]
 80080e2:	051b      	lsls	r3, r3, #20
 80080e4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80080e8:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80080ea:	688b      	ldr	r3, [r1, #8]
 80080ec:	041b      	lsls	r3, r3, #16
 80080ee:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80080f2:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80080f4:	68cb      	ldr	r3, [r1, #12]
 80080f6:	021b      	lsls	r3, r3, #8
 80080f8:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80080fa:	431c      	orrs	r4, r3
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80080fc:	4621      	mov	r1, r4
 80080fe:	4839      	ldr	r0, [pc, #228]	@ (80081e4 <BSP_I2C4_Init+0x28c>)
 8008100:	f7ff ff0a 	bl	8007f18 <MX_I2C4_Init>
 8008104:	2800      	cmp	r0, #0
 8008106:	f43f af30 	beq.w	8007f6a <BSP_I2C4_Init+0x12>
          ret = BSP_ERROR_BUS_FAILURE;
 800810a:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800810e:	e72d      	b.n	8007f6c <BSP_I2C4_Init+0x14>
 8008110:	4691      	mov	r9, r2
 8008112:	f04f 0a01 	mov.w	sl, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8008116:	f10e 0e01 	add.w	lr, lr, #1
 800811a:	440f      	add	r7, r1
 800811c:	f1be 0f10 	cmp.w	lr, #16
 8008120:	d1a3      	bne.n	800806a <BSP_I2C4_Init+0x112>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8008122:	f1bc 0f10 	cmp.w	ip, #16
 8008126:	4488      	add	r8, r1
 8008128:	d196      	bne.n	8008058 <BSP_I2C4_Init+0x100>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800812a:	3201      	adds	r2, #1
 800812c:	4401      	add	r1, r0
 800812e:	2a10      	cmp	r2, #16
 8008130:	d18f      	bne.n	8008052 <BSP_I2C4_Init+0xfa>
 8008132:	f1ba 0f00 	cmp.w	sl, #0
 8008136:	d1ac      	bne.n	8008092 <BSP_I2C4_Init+0x13a>
 8008138:	e7ad      	b.n	8008096 <BSP_I2C4_Init+0x13e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800813a:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800813c:	f04f 0c00 	mov.w	ip, #0
 8008140:	9d08      	ldr	r5, [sp, #32]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8008142:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8008146:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8008148:	441d      	add	r5, r3
 800814a:	441e      	add	r6, r3
 800814c:	9503      	str	r5, [sp, #12]
 800814e:	ebab 0503 	sub.w	r5, fp, r3
 8008152:	9607      	str	r6, [sp, #28]
 8008154:	006d      	lsls	r5, r5, #1
 8008156:	9500      	str	r5, [sp, #0]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8008158:	9d03      	ldr	r5, [sp, #12]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800815a:	f240 5214 	movw	r2, #1300	@ 0x514
 800815e:	f8cd c010 	str.w	ip, [sp, #16]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8008162:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8008166:	4295      	cmp	r5, r2
 8008168:	d92f      	bls.n	80081ca <BSP_I2C4_Init+0x272>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800816a:	f1a5 0632 	sub.w	r6, r5, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800816e:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 8008172:	d22a      	bcs.n	80081ca <BSP_I2C4_Init+0x272>
 8008174:	9e07      	ldr	r6, [sp, #28]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8008176:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800817a:	f8dd 9000 	ldr.w	r9, [sp]
 800817e:	442e      	add	r6, r5
 8008180:	f8dd 800c 	ldr.w	r8, [sp, #12]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8008184:	f206 1aa1 	addw	sl, r6, #417	@ 0x1a1
 8008188:	f240 4212 	movw	r2, #1042	@ 0x412
 800818c:	f8cd e018 	str.w	lr, [sp, #24]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8008190:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8008194:	4592      	cmp	sl, r2
 8008196:	d811      	bhi.n	80081bc <BSP_I2C4_Init+0x264>
 8008198:	f5b8 7f16 	cmp.w	r8, #600	@ 0x258
 800819c:	d30e      	bcc.n	80081bc <BSP_I2C4_Init+0x264>
 800819e:	4580      	cmp	r8, r0
 80081a0:	d90c      	bls.n	80081bc <BSP_I2C4_Init+0x264>
              error = -error;
 80081a2:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 80081a6:	bf28      	it	cs
 80081a8:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 80081aa:	9a02      	ldr	r2, [sp, #8]
 80081ac:	4592      	cmp	sl, r2
 80081ae:	d205      	bcs.n	80081bc <BSP_I2C4_Init+0x264>
              I2c_valid_timing[count].scll = scll;
 80081b0:	9a04      	ldr	r2, [sp, #16]
 80081b2:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 80081b4:	9a06      	ldr	r2, [sp, #24]
 80081b6:	e9cd 7a01 	strd	r7, sl, [sp, #4]
 80081ba:	60ca      	str	r2, [r1, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80081bc:	f5be 7f80 	cmp.w	lr, #256	@ 0x100
 80081c0:	4498      	add	r8, r3
 80081c2:	441e      	add	r6, r3
 80081c4:	eba9 0903 	sub.w	r9, r9, r3
 80081c8:	d1dc      	bne.n	8008184 <BSP_I2C4_Init+0x22c>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80081ca:	9a00      	ldr	r2, [sp, #0]
 80081cc:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 80081d0:	441d      	add	r5, r3
 80081d2:	eba2 0203 	sub.w	r2, r2, r3
 80081d6:	9200      	str	r2, [sp, #0]
 80081d8:	d1bf      	bne.n	800815a <BSP_I2C4_Init+0x202>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80081da:	3701      	adds	r7, #1
 80081dc:	3114      	adds	r1, #20
 80081de:	e770      	b.n	80080c2 <BSP_I2C4_Init+0x16a>
 80081e0:	58001c00 	.word	0x58001c00
 80081e4:	2400c428 	.word	0x2400c428
 80081e8:	2400ce80 	.word	0x2400ce80
 80081ec:	58024400 	.word	0x58024400
 80081f0:	58020c00 	.word	0x58020c00
 80081f4:	3b9aca00 	.word	0x3b9aca00
 80081f8:	2400c47c 	.word	0x2400c47c
 80081fc:	2400c480 	.word	0x2400c480

08008200 <BSP_I2C4_WriteReg>:
{
 8008200:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8008202:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8008206:	9200      	str	r2, [sp, #0]
 8008208:	460a      	mov	r2, r1
 800820a:	4601      	mov	r1, r0
 800820c:	4808      	ldr	r0, [pc, #32]	@ (8008230 <BSP_I2C4_WriteReg+0x30>)
 800820e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008212:	2301      	movs	r3, #1
 8008214:	f001 ff0a 	bl	800a02c <HAL_I2C_Mem_Write>
 8008218:	b140      	cbz	r0, 800822c <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800821a:	4805      	ldr	r0, [pc, #20]	@ (8008230 <BSP_I2C4_WriteReg+0x30>)
 800821c:	f002 f8c1 	bl	800a3a2 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8008220:	2804      	cmp	r0, #4
 8008222:	bf14      	ite	ne
 8008224:	f06f 0003 	mvnne.w	r0, #3
 8008228:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 800822c:	b004      	add	sp, #16
 800822e:	bd10      	pop	{r4, pc}
 8008230:	2400c428 	.word	0x2400c428

08008234 <BSP_I2C4_ReadReg>:
{
 8008234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8008236:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 800823a:	9200      	str	r2, [sp, #0]
 800823c:	460a      	mov	r2, r1
 800823e:	4601      	mov	r1, r0
 8008240:	4808      	ldr	r0, [pc, #32]	@ (8008264 <BSP_I2C4_ReadReg+0x30>)
 8008242:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008246:	2301      	movs	r3, #1
 8008248:	f001 ffca 	bl	800a1e0 <HAL_I2C_Mem_Read>
 800824c:	b140      	cbz	r0, 8008260 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800824e:	4805      	ldr	r0, [pc, #20]	@ (8008264 <BSP_I2C4_ReadReg+0x30>)
 8008250:	f002 f8a7 	bl	800a3a2 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8008254:	2804      	cmp	r0, #4
 8008256:	bf14      	ite	ne
 8008258:	f06f 0003 	mvnne.w	r0, #3
 800825c:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 8008260:	b004      	add	sp, #16
 8008262:	bd10      	pop	{r4, pc}
 8008264:	2400c428 	.word	0x2400c428

08008268 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8008268:	f000 bd08 	b.w	8008c7c <HAL_GetTick>

0800826c <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 800826c:	4a09      	ldr	r2, [pc, #36]	@ (8008294 <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800826e:	f44f 7c40 	mov.w	ip, #768	@ 0x300
  hQspi->Instance                = QUADSPI;
 8008272:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8008274:	684a      	ldr	r2, [r1, #4]
 8008276:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 8008278:	2201      	movs	r2, #1
 800827a:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 800827c:	688a      	ldr	r2, [r1, #8]
 800827e:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 8008280:	680a      	ldr	r2, [r1, #0]
 8008282:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8008284:	2200      	movs	r2, #0
 8008286:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 800828a:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 800828c:	68ca      	ldr	r2, [r1, #12]
 800828e:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 8008290:	f003 bca8 	b.w	800bbe4 <HAL_QSPI_Init>
 8008294:	52005000 	.word	0x52005000

08008298 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 8008298:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800829a:	b988      	cbnz	r0, 80082c0 <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800829c:	4c0a      	ldr	r4, [pc, #40]	@ (80082c8 <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 800829e:	480b      	ldr	r0, [pc, #44]	@ (80082cc <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 80082a0:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80082a2:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 80082a4:	b94b      	cbnz	r3, 80082ba <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80082a6:	f7ff f9bc 	bl	8007622 <MT25TL01G_EnableMemoryMappedModeSTR>
 80082aa:	b110      	cbz	r0, 80082b2 <BSP_QSPI_EnableMemoryMappedMode+0x1a>
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80082ac:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 80082b0:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 80082b2:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 80082b4:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 80082b6:	7023      	strb	r3, [r4, #0]
 80082b8:	e7fa      	b.n	80082b0 <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80082ba:	f7ff f968 	bl	800758e <MT25TL01G_EnableMemoryMappedModeDTR>
 80082be:	e7f4      	b.n	80082aa <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 80082c0:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80082c4:	e7f4      	b.n	80082b0 <BSP_QSPI_EnableMemoryMappedMode+0x18>
 80082c6:	bf00      	nop
 80082c8:	2400ce84 	.word	0x2400ce84
 80082cc:	24000470 	.word	0x24000470

080082d0 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 80082d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d2:	460c      	mov	r4, r1
 80082d4:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 80082d6:	bb30      	cbnz	r0, 8008326 <BSP_QSPI_ConfigFlash+0x56>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 80082d8:	4d17      	ldr	r5, [pc, #92]	@ (8008338 <BSP_QSPI_ConfigFlash+0x68>)
 80082da:	782b      	ldrb	r3, [r5, #0]
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d025      	beq.n	800832c <BSP_QSPI_ConfigFlash+0x5c>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80082e0:	fab2 f382 	clz	r3, r2
 80082e4:	4e15      	ldr	r6, [pc, #84]	@ (800833c <BSP_QSPI_ConfigFlash+0x6c>)
 80082e6:	095b      	lsrs	r3, r3, #5

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 80082e8:	4630      	mov	r0, r6
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80082ea:	011b      	lsls	r3, r3, #4
 80082ec:	60f3      	str	r3, [r6, #12]
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 80082ee:	f003 fc79 	bl	800bbe4 <HAL_QSPI_Init>
 80082f2:	b9f0      	cbnz	r0, 8008332 <BSP_QSPI_ConfigFlash+0x62>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 80082f4:	786b      	ldrb	r3, [r5, #1]
 80082f6:	2b03      	cmp	r3, #3
 80082f8:	d10f      	bne.n	800831a <BSP_QSPI_ConfigFlash+0x4a>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 80082fa:	2c03      	cmp	r4, #3
 80082fc:	d105      	bne.n	800830a <BSP_QSPI_ConfigFlash+0x3a>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 80082fe:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8008300:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 8008302:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8008304:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8008306:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 8008308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 800830a:	4630      	mov	r0, r6
 800830c:	f7ff f923 	bl	8007556 <MT25TL01G_ExitQPIMode>
 8008310:	2800      	cmp	r0, #0
 8008312:	d0f4      	beq.n	80082fe <BSP_QSPI_ConfigFlash+0x2e>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8008314:	f06f 0004 	mvn.w	r0, #4
 8008318:	e7f6      	b.n	8008308 <BSP_QSPI_ConfigFlash+0x38>
          if(Mode == MT25TL01G_QPI_MODE)
 800831a:	2c03      	cmp	r4, #3
 800831c:	d1ef      	bne.n	80082fe <BSP_QSPI_ConfigFlash+0x2e>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 800831e:	4630      	mov	r0, r6
 8008320:	f7ff f8fd 	bl	800751e <MT25TL01G_EnterQPIMode>
 8008324:	e7f4      	b.n	8008310 <BSP_QSPI_ConfigFlash+0x40>
    ret = BSP_ERROR_WRONG_PARAM;
 8008326:	f06f 0001 	mvn.w	r0, #1
 800832a:	e7ed      	b.n	8008308 <BSP_QSPI_ConfigFlash+0x38>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 800832c:	f06f 0019 	mvn.w	r0, #25
 8008330:	e7ea      	b.n	8008308 <BSP_QSPI_ConfigFlash+0x38>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8008332:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8008336:	e7e7      	b.n	8008308 <BSP_QSPI_ConfigFlash+0x38>
 8008338:	2400ce84 	.word	0x2400ce84
 800833c:	24000470 	.word	0x24000470

08008340 <BSP_QSPI_Init>:
{
 8008340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008344:	460c      	mov	r4, r1
 8008346:	b0a4      	sub	sp, #144	@ 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8008348:	2800      	cmp	r0, #0
 800834a:	f040 81ac 	bne.w	80086a6 <BSP_QSPI_Init+0x366>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 800834e:	4d03      	ldr	r5, [pc, #12]	@ (800835c <BSP_QSPI_Init+0x1c>)
 8008350:	782f      	ldrb	r7, [r5, #0]
 8008352:	b12f      	cbz	r7, 8008360 <BSP_QSPI_Init+0x20>
  int32_t ret = BSP_ERROR_NONE;
 8008354:	2000      	movs	r0, #0
}
 8008356:	b024      	add	sp, #144	@ 0x90
 8008358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800835c:	2400ce84 	.word	0x2400ce84
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8008360:	4bc3      	ldr	r3, [pc, #780]	@ (8008670 <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8008362:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8008366:	2609      	movs	r6, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8008368:	a916      	add	r1, sp, #88	@ 0x58
  QSPI_CLK_ENABLE();
 800836a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800836e:	f04f 0840 	mov.w	r8, #64	@ 0x40
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8008372:	48c0      	ldr	r0, [pc, #768]	@ (8008674 <BSP_QSPI_Init+0x334>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8008374:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 8008378:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800837c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8008380:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8008384:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8008388:	9201      	str	r2, [sp, #4]
 800838a:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 800838c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800838e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008392:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_RELEASE_RESET();
 8008394:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8008396:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800839a:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 800839c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80083a0:	f042 0202 	orr.w	r2, r2, #2
 80083a4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80083a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80083ac:	f002 0202 	and.w	r2, r2, #2
 80083b0:	9202      	str	r2, [sp, #8]
 80083b2:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 80083b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80083b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80083bc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80083c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80083c4:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80083c8:	9203      	str	r2, [sp, #12]
 80083ca:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 80083cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80083d0:	f042 0208 	orr.w	r2, r2, #8
 80083d4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80083d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80083dc:	f002 0208 	and.w	r2, r2, #8
 80083e0:	9204      	str	r2, [sp, #16]
 80083e2:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 80083e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80083e8:	f042 0220 	orr.w	r2, r2, #32
 80083ec:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80083f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80083f4:	f002 0220 	and.w	r2, r2, #32
 80083f8:	9205      	str	r2, [sp, #20]
 80083fa:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 80083fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008400:	f042 0220 	orr.w	r2, r2, #32
 8008404:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8008408:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800840c:	f002 0220 	and.w	r2, r2, #32
 8008410:	9206      	str	r2, [sp, #24]
 8008412:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 8008414:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008418:	f042 0220 	orr.w	r2, r2, #32
 800841c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8008420:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008424:	f002 0220 	and.w	r2, r2, #32
 8008428:	9207      	str	r2, [sp, #28]
 800842a:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 800842c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008430:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008434:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8008438:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800843c:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8008440:	9208      	str	r2, [sp, #32]
 8008442:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 8008444:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008448:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800844c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8008450:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008454:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8008458:	9209      	str	r2, [sp, #36]	@ 0x24
 800845a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 800845c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008460:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008464:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8008468:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800846c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8008470:	920a      	str	r2, [sp, #40]	@ 0x28
 8008472:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 8008474:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008478:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800847c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8008480:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008484:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8008488:	920b      	str	r2, [sp, #44]	@ 0x2c
 800848a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 800848c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008490:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008494:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8008498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800849c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80084a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80084a4:	2302      	movs	r3, #2
 80084a6:	e9cd 9316 	strd	r9, r3, [sp, #88]	@ 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80084aa:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80084ac:	961a      	str	r6, [sp, #104]	@ 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80084ae:	e9cd 7318 	strd	r7, r3, [sp, #96]	@ 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80084b2:	f001 fa69 	bl	8009988 <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80084b6:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 80084b8:	a916      	add	r1, sp, #88	@ 0x58
 80084ba:	486f      	ldr	r0, [pc, #444]	@ (8008678 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80084bc:	9318      	str	r3, [sp, #96]	@ 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 80084be:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80084c2:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 80084c6:	f001 fa5f 	bl	8009988 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 80084ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 80084ce:	a916      	add	r1, sp, #88	@ 0x58
 80084d0:	486a      	ldr	r0, [pc, #424]	@ (800867c <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 80084d2:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80084d4:	9718      	str	r7, [sp, #96]	@ 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80084d6:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 80084d8:	f001 fa56 	bl	8009988 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80084dc:	a916      	add	r1, sp, #88	@ 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 80084de:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80084e2:	4867      	ldr	r0, [pc, #412]	@ (8008680 <BSP_QSPI_Init+0x340>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 80084e4:	f44f 7900 	mov.w	r9, #512	@ 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80084e8:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80084ea:	f001 fa4d 	bl	8009988 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 80084ee:	a916      	add	r1, sp, #88	@ 0x58
 80084f0:	4864      	ldr	r0, [pc, #400]	@ (8008684 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 80084f2:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80084f6:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 80084fa:	f001 fa45 	bl	8009988 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 80084fe:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8008500:	a916      	add	r1, sp, #88	@ 0x58
 8008502:	485f      	ldr	r0, [pc, #380]	@ (8008680 <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8008504:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8008506:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8008508:	f001 fa3e 	bl	8009988 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800850c:	2380      	movs	r3, #128	@ 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800850e:	a916      	add	r1, sp, #88	@ 0x58
 8008510:	485c      	ldr	r0, [pc, #368]	@ (8008684 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8008512:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8008514:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8008516:	f001 fa37 	bl	8009988 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800851a:	a916      	add	r1, sp, #88	@ 0x58
 800851c:	4856      	ldr	r0, [pc, #344]	@ (8008678 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 800851e:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8008522:	f001 fa31 	bl	8009988 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8008526:	a916      	add	r1, sp, #88	@ 0x58
 8008528:	4856      	ldr	r0, [pc, #344]	@ (8008684 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 800852a:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800852e:	f001 fa2b 	bl	8009988 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8008532:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8008536:	a916      	add	r1, sp, #88	@ 0x58
 8008538:	484f      	ldr	r0, [pc, #316]	@ (8008678 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800853a:	9316      	str	r3, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800853c:	f001 fa24 	bl	8009988 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8008540:	463a      	mov	r2, r7
 8008542:	210f      	movs	r1, #15
 8008544:	205c      	movs	r0, #92	@ 0x5c
 8008546:	f000 fbc9 	bl	8008cdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800854a:	205c      	movs	r0, #92	@ 0x5c
 800854c:	f000 fbf8 	bl	8008d40 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 8008550:	a811      	add	r0, sp, #68	@ 0x44
 8008552:	f7fe ff38 	bl	80073c6 <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8008556:	7863      	ldrb	r3, [r4, #1]
 8008558:	4a4b      	ldr	r2, [pc, #300]	@ (8008688 <BSP_QSPI_Init+0x348>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 800855a:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800855e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008562:	920e      	str	r2, [sp, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008564:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008566:	fa92 f2a2 	rbit	r2, r2
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800856a:	fab3 f383 	clz	r3, r3
  return __builtin_clz(value);
 800856e:	fab2 f282 	clz	r2, r2
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8008572:	a90d      	add	r1, sp, #52	@ 0x34
 8008574:	4845      	ldr	r0, [pc, #276]	@ (800868c <BSP_QSPI_Init+0x34c>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8008576:	095b      	lsrs	r3, r3, #5
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8008578:	3a01      	subs	r2, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800857a:	011b      	lsls	r3, r3, #4
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800857c:	920d      	str	r2, [sp, #52]	@ 0x34
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800857e:	930f      	str	r3, [sp, #60]	@ 0x3c
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8008580:	f7ff fe74 	bl	800826c <MX_QSPI_Init>
 8008584:	2800      	cmp	r0, #0
 8008586:	f040 8091 	bne.w	80086ac <BSP_QSPI_Init+0x36c>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800858a:	2103      	movs	r1, #3
 800858c:	483f      	ldr	r0, [pc, #252]	@ (800868c <BSP_QSPI_Init+0x34c>)
 800858e:	f7ff f88e 	bl	80076ae <MT25TL01G_ResetEnable>
 8008592:	2800      	cmp	r0, #0
 8008594:	f040 8084 	bne.w	80086a0 <BSP_QSPI_Init+0x360>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8008598:	2103      	movs	r1, #3
 800859a:	483c      	ldr	r0, [pc, #240]	@ (800868c <BSP_QSPI_Init+0x34c>)
 800859c:	f7ff f8a8 	bl	80076f0 <MT25TL01G_ResetMemory>
 80085a0:	2800      	cmp	r0, #0
 80085a2:	d17d      	bne.n	80086a0 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80085a4:	7869      	ldrb	r1, [r5, #1]
 80085a6:	4839      	ldr	r0, [pc, #228]	@ (800868c <BSP_QSPI_Init+0x34c>)
 80085a8:	f7fe ff1e 	bl	80073e8 <MT25TL01G_AutoPollingMemReady>
 80085ac:	4601      	mov	r1, r0
 80085ae:	2800      	cmp	r0, #0
 80085b0:	d176      	bne.n	80086a0 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 80085b2:	4836      	ldr	r0, [pc, #216]	@ (800868c <BSP_QSPI_Init+0x34c>)
 80085b4:	f7ff f87b 	bl	80076ae <MT25TL01G_ResetEnable>
 80085b8:	4601      	mov	r1, r0
 80085ba:	2800      	cmp	r0, #0
 80085bc:	d170      	bne.n	80086a0 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 80085be:	4833      	ldr	r0, [pc, #204]	@ (800868c <BSP_QSPI_Init+0x34c>)
 80085c0:	f7ff f896 	bl	80076f0 <MT25TL01G_ResetMemory>
 80085c4:	4601      	mov	r1, r0
 80085c6:	2800      	cmp	r0, #0
 80085c8:	d16a      	bne.n	80086a0 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 80085ca:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 80085cc:	70a8      	strb	r0, [r5, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80085ce:	482f      	ldr	r0, [pc, #188]	@ (800868c <BSP_QSPI_Init+0x34c>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 80085d0:	802b      	strh	r3, [r5, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80085d2:	f7fe ff09 	bl	80073e8 <MT25TL01G_AutoPollingMemReady>
 80085d6:	2800      	cmp	r0, #0
 80085d8:	d162      	bne.n	80086a0 <BSP_QSPI_Init+0x360>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80085da:	7869      	ldrb	r1, [r5, #1]
 80085dc:	482b      	ldr	r0, [pc, #172]	@ (800868c <BSP_QSPI_Init+0x34c>)
 80085de:	f7fe ff72 	bl	80074c6 <MT25TL01G_Enter4BytesAddressMode>
 80085e2:	2800      	cmp	r0, #0
 80085e4:	d15c      	bne.n	80086a0 <BSP_QSPI_Init+0x360>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80085e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
  uint16_t reg=0;
 80085ea:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 80085ee:	901b      	str	r0, [sp, #108]	@ 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80085f0:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80085f4:	931c      	str	r3, [sp, #112]	@ 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 80085f6:	2385      	movs	r3, #133	@ 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80085f8:	a916      	add	r1, sp, #88	@ 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 80085fa:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80085fc:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8008600:	931f      	str	r3, [sp, #124]	@ 0x7c
  s_command.NbData            = 2;
 8008602:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008604:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8008608:	e9cd 3020 	strd	r3, r0, [sp, #128]	@ 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800860c:	e9cd 0022 	strd	r0, r0, [sp, #136]	@ 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008610:	481e      	ldr	r0, [pc, #120]	@ (800868c <BSP_QSPI_Init+0x34c>)
 8008612:	f003 fb33 	bl	800bc7c <HAL_QSPI_Command>
 8008616:	2800      	cmp	r0, #0
 8008618:	d142      	bne.n	80086a0 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800861a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800861e:	f10d 0102 	add.w	r1, sp, #2
 8008622:	481a      	ldr	r0, [pc, #104]	@ (800868c <BSP_QSPI_Init+0x34c>)
 8008624:	f003 fbcb 	bl	800bdbe <HAL_QSPI_Receive>
 8008628:	2800      	cmp	r0, #0
 800862a:	d139      	bne.n	80086a0 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800862c:	7869      	ldrb	r1, [r5, #1]
 800862e:	4817      	ldr	r0, [pc, #92]	@ (800868c <BSP_QSPI_Init+0x34c>)
 8008630:	f7fe ff05 	bl	800743e <MT25TL01G_WriteEnable>
 8008634:	bba0      	cbnz	r0, 80086a0 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8008636:	2381      	movs	r3, #129	@ 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008638:	f241 3288 	movw	r2, #5000	@ 0x1388
 800863c:	a916      	add	r1, sp, #88	@ 0x58
 800863e:	4813      	ldr	r0, [pc, #76]	@ (800868c <BSP_QSPI_Init+0x34c>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8008640:	9316      	str	r3, [sp, #88]	@ 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 8008642:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8008646:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800864a:	051b      	lsls	r3, r3, #20
 800864c:	0d1b      	lsrs	r3, r3, #20
 800864e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008652:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008656:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800865a:	f003 fb0f 	bl	800bc7c <HAL_QSPI_Command>
 800865e:	b9f8      	cbnz	r0, 80086a0 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008660:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008664:	f10d 0102 	add.w	r1, sp, #2
 8008668:	4808      	ldr	r0, [pc, #32]	@ (800868c <BSP_QSPI_Init+0x34c>)
 800866a:	f003 fb4c 	bl	800bd06 <HAL_QSPI_Transmit>
 800866e:	e00f      	b.n	8008690 <BSP_QSPI_Init+0x350>
 8008670:	58024400 	.word	0x58024400
 8008674:	58020400 	.word	0x58020400
 8008678:	58021800 	.word	0x58021800
 800867c:	58020c00 	.word	0x58020c00
 8008680:	58021c00 	.word	0x58021c00
 8008684:	58021400 	.word	0x58021400
 8008688:	08028d60 	.word	0x08028d60
 800868c:	24000470 	.word	0x24000470
 8008690:	b930      	cbnz	r0, 80086a0 <BSP_QSPI_Init+0x360>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8008692:	7862      	ldrb	r2, [r4, #1]
 8008694:	7821      	ldrb	r1, [r4, #0]
 8008696:	f7ff fe1b 	bl	80082d0 <BSP_QSPI_ConfigFlash>
 800869a:	2800      	cmp	r0, #0
 800869c:	f43f ae5a 	beq.w	8008354 <BSP_QSPI_Init+0x14>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 80086a0:	f06f 0004 	mvn.w	r0, #4
 80086a4:	e657      	b.n	8008356 <BSP_QSPI_Init+0x16>
    ret = BSP_ERROR_WRONG_PARAM;
 80086a6:	f06f 0001 	mvn.w	r0, #1
 80086aa:	e654      	b.n	8008356 <BSP_QSPI_Init+0x16>
          ret = BSP_ERROR_PERIPH_FAILURE;
 80086ac:	f06f 0003 	mvn.w	r0, #3
  return ret;
 80086b0:	e651      	b.n	8008356 <BSP_QSPI_Init+0x16>
 80086b2:	bf00      	nop

080086b4 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 80086b4:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 80086b6:	4604      	mov	r4, r0
 80086b8:	b970      	cbnz	r0, 80086d8 <BSP_SDRAM_DeInit+0x24>
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 80086ba:	4b09      	ldr	r3, [pc, #36]	@ (80086e0 <BSP_SDRAM_DeInit+0x2c>)
 80086bc:	4809      	ldr	r0, [pc, #36]	@ (80086e4 <BSP_SDRAM_DeInit+0x30>)
 80086be:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 80086c0:	f004 ffc8 	bl	800d654 <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 80086c4:	207a      	movs	r0, #122	@ 0x7a
 80086c6:	f000 fb49 	bl	8008d5c <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 80086ca:	4807      	ldr	r0, [pc, #28]	@ (80086e8 <BSP_SDRAM_DeInit+0x34>)
 80086cc:	4b07      	ldr	r3, [pc, #28]	@ (80086ec <BSP_SDRAM_DeInit+0x38>)
 80086ce:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 80086d0:	f003 f80c 	bl	800b6ec <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 80086d4:	4620      	mov	r0, r4
}
 80086d6:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 80086d8:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80086dc:	e7fb      	b.n	80086d6 <BSP_SDRAM_DeInit+0x22>
 80086de:	bf00      	nop
 80086e0:	52004140 	.word	0x52004140
 80086e4:	2400cf88 	.word	0x2400cf88
 80086e8:	2400ce90 	.word	0x2400ce90
 80086ec:	52000040 	.word	0x52000040

080086f0 <MX_SDRAM_Init>:
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 80086f0:	2201      	movs	r2, #1
 80086f2:	4915      	ldr	r1, [pc, #84]	@ (8008748 <MX_SDRAM_Init+0x58>)
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80086f4:	4b15      	ldr	r3, [pc, #84]	@ (800874c <MX_SDRAM_Init+0x5c>)
{
 80086f6:	b510      	push	{r4, lr}
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 80086f8:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80086fc:	6082      	str	r2, [r0, #8]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80086fe:	2104      	movs	r1, #4
 8008700:	2220      	movs	r2, #32
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8008702:	2440      	movs	r4, #64	@ 0x40
{
 8008704:	b088      	sub	sp, #32
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8008706:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800870a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800870e:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8008712:	2200      	movs	r2, #0
 8008714:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 8008718:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800871c:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 8008720:	6244      	str	r4, [r0, #36]	@ 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8008722:	629a      	str	r2, [r3, #40]	@ 0x28
  sdram_timing.ExitSelfRefreshDelay = 7;
 8008724:	2207      	movs	r2, #7
 8008726:	2302      	movs	r3, #2
  sdram_timing.RowCycleDelay        = 7;
 8008728:	e9cd 1203 	strd	r1, r2, [sp, #12]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800872c:	4469      	add	r1, sp
  sdram_timing.RCDDelay             = 2;
 800872e:	9307      	str	r3, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8008730:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 8008734:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8008738:	f004 ff64 	bl	800d604 <HAL_SDRAM_Init>
}
 800873c:	3800      	subs	r0, #0
 800873e:	bf18      	it	ne
 8008740:	2001      	movne	r0, #1
 8008742:	b008      	add	sp, #32
 8008744:	bd10      	pop	{r4, pc}
 8008746:	bf00      	nop
 8008748:	52004140 	.word	0x52004140
 800874c:	2400cf88 	.word	0x2400cf88

08008750 <BSP_SDRAM_Init>:
{
 8008750:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 8008752:	4605      	mov	r5, r0
{
 8008754:	b08f      	sub	sp, #60	@ 0x3c
  if(Instance >=SDRAM_INSTANCES_NBR)
 8008756:	2800      	cmp	r0, #0
 8008758:	f040 80dd 	bne.w	8008916 <BSP_SDRAM_Init+0x1c6>
  __HAL_RCC_FMC_CLK_ENABLE();
 800875c:	4b71      	ldr	r3, [pc, #452]	@ (8008924 <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800875e:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8008760:	a909      	add	r1, sp, #36	@ 0x24
 8008762:	4871      	ldr	r0, [pc, #452]	@ (8008928 <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8008764:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8008768:	4c70      	ldr	r4, [pc, #448]	@ (800892c <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800876a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800876e:	4e70      	ldr	r6, [pc, #448]	@ (8008930 <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8008770:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8008774:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8008778:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800877c:	9201      	str	r2, [sp, #4]
 800877e:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 8008780:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8008784:	f042 0201 	orr.w	r2, r2, #1
 8008788:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800878c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8008790:	f002 0201 	and.w	r2, r2, #1
 8008794:	9202      	str	r2, [sp, #8]
 8008796:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008798:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800879c:	f042 0208 	orr.w	r2, r2, #8
 80087a0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80087a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80087a8:	f002 0208 	and.w	r2, r2, #8
 80087ac:	9203      	str	r2, [sp, #12]
 80087ae:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80087b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80087b4:	f042 0210 	orr.w	r2, r2, #16
 80087b8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80087bc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80087c0:	f002 0210 	and.w	r2, r2, #16
 80087c4:	9204      	str	r2, [sp, #16]
 80087c6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80087c8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80087cc:	f042 0220 	orr.w	r2, r2, #32
 80087d0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80087d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80087d8:	f002 0220 	and.w	r2, r2, #32
 80087dc:	9205      	str	r2, [sp, #20]
 80087de:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80087e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80087e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80087e8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80087ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80087f0:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80087f4:	9206      	str	r2, [sp, #24]
 80087f6:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80087f8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80087fc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008800:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8008804:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008808:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800880c:	9207      	str	r2, [sp, #28]
 800880e:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8008810:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008814:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008818:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800881c:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800881e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008826:	9308      	str	r3, [sp, #32]
 8008828:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800882a:	2301      	movs	r3, #1
 800882c:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8008830:	230c      	movs	r3, #12
 8008832:	e9cd 730c 	strd	r7, r3, [sp, #48]	@ 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8008836:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800883a:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800883c:	f001 f8a4 	bl	8009988 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8008840:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8008844:	a909      	add	r1, sp, #36	@ 0x24
 8008846:	483b      	ldr	r0, [pc, #236]	@ (8008934 <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8008848:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800884a:	f001 f89d 	bl	8009988 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800884e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8008852:	a909      	add	r1, sp, #36	@ 0x24
 8008854:	4838      	ldr	r0, [pc, #224]	@ (8008938 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8008856:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8008858:	f001 f896 	bl	8009988 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 800885c:	f248 1337 	movw	r3, #33079	@ 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8008860:	a909      	add	r1, sp, #36	@ 0x24
 8008862:	4836      	ldr	r0, [pc, #216]	@ (800893c <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8008864:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8008866:	f001 f88f 	bl	8009988 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800886a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800886e:	a909      	add	r1, sp, #36	@ 0x24
 8008870:	4833      	ldr	r0, [pc, #204]	@ (8008940 <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8008872:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8008874:	f001 f888 	bl	8009988 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8008878:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800887c:	a909      	add	r1, sp, #36	@ 0x24
 800887e:	4831      	ldr	r0, [pc, #196]	@ (8008944 <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8008880:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8008882:	f001 f881 	bl	8009988 <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8008886:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800888a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800888e:	f240 2002 	movw	r0, #514	@ 0x202
 8008892:	f640 0208 	movw	r2, #2056	@ 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8008896:	6334      	str	r4, [r6, #48]	@ 0x30
 8008898:	6426      	str	r6, [r4, #64]	@ 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 800889a:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800889e:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 80088a2:	2380      	movs	r3, #128	@ 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 80088a4:	2220      	movs	r2, #32
  (void)HAL_MDMA_DeInit(&mdma_handle);
 80088a6:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 80088a8:	62a3      	str	r3, [r4, #40]	@ 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 80088aa:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80088ae:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 80088b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 80088b6:	4b24      	ldr	r3, [pc, #144]	@ (8008948 <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 80088b8:	6262      	str	r2, [r4, #36]	@ 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 80088ba:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 80088bc:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 80088c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 80088c4:	f002 ff12 	bl	800b6ec <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 80088c8:	4620      	mov	r0, r4
 80088ca:	f002 fea0 	bl	800b60e <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 80088ce:	462a      	mov	r2, r5
 80088d0:	210f      	movs	r1, #15
 80088d2:	207a      	movs	r0, #122	@ 0x7a
 80088d4:	f000 fa02 	bl	8008cdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 80088d8:	207a      	movs	r0, #122	@ 0x7a
 80088da:	f000 fa31 	bl	8008d40 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 80088de:	4630      	mov	r0, r6
 80088e0:	f7ff ff06 	bl	80086f0 <MX_SDRAM_Init>
 80088e4:	b9d0      	cbnz	r0, 800891c <BSP_SDRAM_Init+0x1cc>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 80088e6:	4919      	ldr	r1, [pc, #100]	@ (800894c <BSP_SDRAM_Init+0x1fc>)
 80088e8:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 80088ea:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 80088ee:	f240 6303 	movw	r3, #1539	@ 0x603
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 80088f2:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 80088f4:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 80088f8:	2330      	movs	r3, #48	@ 0x30
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 80088fa:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 80088fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8008902:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8008904:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8008906:	f7fe fd31 	bl	800736c <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 800890a:	2800      	cmp	r0, #0
 800890c:	bf18      	it	ne
 800890e:	f06f 0004 	mvnne.w	r0, #4
}
 8008912:	b00f      	add	sp, #60	@ 0x3c
 8008914:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8008916:	f06f 0001 	mvn.w	r0, #1
 800891a:	e7fa      	b.n	8008912 <BSP_SDRAM_Init+0x1c2>
      ret = BSP_ERROR_NO_INIT;
 800891c:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8008920:	e7f7      	b.n	8008912 <BSP_SDRAM_Init+0x1c2>
 8008922:	bf00      	nop
 8008924:	58024400 	.word	0x58024400
 8008928:	58020c00 	.word	0x58020c00
 800892c:	2400cefc 	.word	0x2400cefc
 8008930:	2400cf88 	.word	0x2400cf88
 8008934:	58021000 	.word	0x58021000
 8008938:	58021400 	.word	0x58021400
 800893c:	58021800 	.word	0x58021800
 8008940:	58021c00 	.word	0x58021c00
 8008944:	58022000 	.word	0x58022000
 8008948:	52000040 	.word	0x52000040
 800894c:	2400cf68 	.word	0x2400cf68

08008950 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8008950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008954:	460c      	mov	r4, r1
 8008956:	b08c      	sub	sp, #48	@ 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8008958:	4606      	mov	r6, r0
 800895a:	2800      	cmp	r0, #0
 800895c:	d15c      	bne.n	8008a18 <BSP_TS_Init+0xc8>
 800895e:	680b      	ldr	r3, [r1, #0]
 8008960:	1e5a      	subs	r2, r3, #1
 8008962:	f5b2 7f48 	cmp.w	r2, #800	@ 0x320
 8008966:	d257      	bcs.n	8008a18 <BSP_TS_Init+0xc8>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8008968:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800896a:	1e51      	subs	r1, r2, #1
 800896c:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8008970:	d252      	bcs.n	8008a18 <BSP_TS_Init+0xc8>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8008972:	4293      	cmp	r3, r2
 8008974:	bf28      	it	cs
 8008976:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8008978:	68e2      	ldr	r2, [r4, #12]
 800897a:	429a      	cmp	r2, r3
 800897c:	d84c      	bhi.n	8008a18 <BSP_TS_Init+0xc8>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 800897e:	2370      	movs	r3, #112	@ 0x70
 8008980:	2254      	movs	r2, #84	@ 0x54
 8008982:	f10d 0904 	add.w	r9, sp, #4

  for(i = 0; i < 2UL; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8008986:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008a5c <BSP_TS_Init+0x10c>
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 800898a:	e9cd 2301 	strd	r2, r3, [sp, #4]
  IOCtx.Init        = BSP_I2C4_Init;
 800898e:	4b2e      	ldr	r3, [pc, #184]	@ (8008a48 <BSP_TS_Init+0xf8>)
 8008990:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8008992:	4b2e      	ldr	r3, [pc, #184]	@ (8008a4c <BSP_TS_Init+0xfc>)
 8008994:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8008996:	4b2e      	ldr	r3, [pc, #184]	@ (8008a50 <BSP_TS_Init+0x100>)
 8008998:	930a      	str	r3, [sp, #40]	@ 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800899a:	4b2e      	ldr	r3, [pc, #184]	@ (8008a54 <BSP_TS_Init+0x104>)
 800899c:	9309      	str	r3, [sp, #36]	@ 0x24
  IOCtx.GetTick     = BSP_GetTick;
 800899e:	4b2e      	ldr	r3, [pc, #184]	@ (8008a58 <BSP_TS_Init+0x108>)
 80089a0:	930b      	str	r3, [sp, #44]	@ 0x2c
    IOCtx.Address     = (uint16_t)i2c_address[i];
 80089a2:	f859 3b04 	ldr.w	r3, [r9], #4
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 80089a6:	a906      	add	r1, sp, #24
 80089a8:	482c      	ldr	r0, [pc, #176]	@ (8008a5c <BSP_TS_Init+0x10c>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 80089aa:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 80089ae:	f7fe fbe3 	bl	8007178 <FT6X06_RegisterBusIO>
 80089b2:	b9c0      	cbnz	r0, 80089e6 <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_BUS_FAILURE;
    }
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 80089b4:	4669      	mov	r1, sp
 80089b6:	4829      	ldr	r0, [pc, #164]	@ (8008a5c <BSP_TS_Init+0x10c>)
 80089b8:	f7fe fb28 	bl	800700c <FT6X06_ReadID>
 80089bc:	b998      	cbnz	r0, 80089e6 <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else if(id != FT6X06_ID)
 80089be:	9b00      	ldr	r3, [sp, #0]
 80089c0:	2b11      	cmp	r3, #17
 80089c2:	d110      	bne.n	80089e6 <BSP_TS_Init+0x96>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 80089c4:	a903      	add	r1, sp, #12
 80089c6:	4825      	ldr	r0, [pc, #148]	@ (8008a5c <BSP_TS_Init+0x10c>)
 80089c8:	f7fe fad4 	bl	8006f74 <FT6X06_GetCapabilities>
      Ts_CompObj[Instance] = &FT6X06Obj;
 80089cc:	4f24      	ldr	r7, [pc, #144]	@ (8008a60 <BSP_TS_Init+0x110>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 80089ce:	4b25      	ldr	r3, [pc, #148]	@ (8008a64 <BSP_TS_Init+0x114>)
 80089d0:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8008a6c <BSP_TS_Init+0x11c>

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 80089d4:	4821      	ldr	r0, [pc, #132]	@ (8008a5c <BSP_TS_Init+0x10c>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 80089d6:	f8c8 3000 	str.w	r3, [r8]
      Ts_CompObj[Instance] = &FT6X06Obj;
 80089da:	f8c7 a000 	str.w	sl, [r7]
      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4798      	blx	r3
 80089e2:	4605      	mov	r5, r0
 80089e4:	b1d8      	cbz	r0, 8008a1e <BSP_TS_Init+0xce>
  for(i = 0; i < 2UL; i++)
 80089e6:	b116      	cbz	r6, 80089ee <BSP_TS_Init+0x9e>
      ret = BSP_ERROR_NO_INIT;
 80089e8:	f04f 35ff 	mov.w	r5, #4294967295
 80089ec:	e010      	b.n	8008a10 <BSP_TS_Init+0xc0>
  for(i = 0; i < 2UL; i++)
 80089ee:	2601      	movs	r6, #1
 80089f0:	e7d7      	b.n	80089a2 <BSP_TS_Init+0x52>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80089f2:	9b07      	ldr	r3, [sp, #28]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80089f4:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80089f6:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80089f8:	9b08      	ldr	r3, [sp, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80089fa:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80089fc:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80089fe:	68e3      	ldr	r3, [r4, #12]
 8008a00:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8008a02:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8008a04:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8008a06:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8008a08:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8008a0a:	6273      	str	r3, [r6, #36]	@ 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8008a0c:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 8008a10:	4628      	mov	r0, r5
 8008a12:	b00c      	add	sp, #48	@ 0x30
 8008a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8008a18:	f06f 0501 	mvn.w	r5, #1
  return ret;
 8008a1c:	e7f8      	b.n	8008a10 <BSP_TS_Init+0xc0>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8008a1e:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8008a20:	a906      	add	r1, sp, #24
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8008a22:	4e11      	ldr	r6, [pc, #68]	@ (8008a68 <BSP_TS_Init+0x118>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8008a24:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8008a26:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8008a28:	6863      	ldr	r3, [r4, #4]
 8008a2a:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8008a2c:	68a3      	ldr	r3, [r4, #8]
 8008a2e:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8008a30:	68e3      	ldr	r3, [r4, #12]
 8008a32:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8008a34:	f8d8 3000 	ldr.w	r3, [r8]
 8008a38:	69db      	ldr	r3, [r3, #28]
 8008a3a:	4798      	blx	r3
 8008a3c:	2800      	cmp	r0, #0
 8008a3e:	dad8      	bge.n	80089f2 <BSP_TS_Init+0xa2>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008a40:	f06f 0504 	mvn.w	r5, #4
 8008a44:	e7e4      	b.n	8008a10 <BSP_TS_Init+0xc0>
 8008a46:	bf00      	nop
 8008a48:	08007f59 	.word	0x08007f59
 8008a4c:	08007ec5 	.word	0x08007ec5
 8008a50:	08008235 	.word	0x08008235
 8008a54:	08008201 	.word	0x08008201
 8008a58:	08008269 	.word	0x08008269
 8008a5c:	2400cfbc 	.word	0x2400cfbc
 8008a60:	2400cfe4 	.word	0x2400cfe4
 8008a64:	24000038 	.word	0x24000038
 8008a68:	2400cfe8 	.word	0x2400cfe8
 8008a6c:	2400d010 	.word	0x2400d010

08008a70 <BSP_TS_GetState>:
{
 8008a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a72:	460c      	mov	r4, r1
 8008a74:	b085      	sub	sp, #20
  if(Instance >= TS_INSTANCES_NBR)
 8008a76:	2800      	cmp	r0, #0
 8008a78:	d14d      	bne.n	8008b16 <BSP_TS_GetState+0xa6>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8008a7a:	4b28      	ldr	r3, [pc, #160]	@ (8008b1c <BSP_TS_GetState+0xac>)
 8008a7c:	a901      	add	r1, sp, #4
 8008a7e:	4a28      	ldr	r2, [pc, #160]	@ (8008b20 <BSP_TS_GetState+0xb0>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	6810      	ldr	r0, [r2, #0]
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	4798      	blx	r3
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	db41      	blt.n	8008b10 <BSP_TS_GetState+0xa0>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8008a8c:	4925      	ldr	r1, [pc, #148]	@ (8008b24 <BSP_TS_GetState+0xb4>)
    else if(state.TouchDetected != 0U)
 8008a8e:	9e01      	ldr	r6, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8008a90:	698d      	ldr	r5, [r1, #24]
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8008a92:	6a08      	ldr	r0, [r1, #32]
    else if(state.TouchDetected != 0U)
 8008a94:	2e00      	cmp	r6, #0
 8008a96:	d037      	beq.n	8008b08 <BSP_TS_GetState+0x98>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8008a98:	688f      	ldr	r7, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8008a9a:	f8d1 e010 	ldr.w	lr, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8008a9e:	f017 0f08 	tst.w	r7, #8
      y_oriented = state.TouchY;
 8008aa2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8008aa6:	bf1e      	ittt	ne
 8008aa8:	4694      	movne	ip, r2
        x_oriented = state.TouchY;
 8008aaa:	461a      	movne	r2, r3
        y_oriented = state.TouchX;
 8008aac:	4663      	movne	r3, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8008aae:	f017 0f02 	tst.w	r7, #2
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8008ab2:	bf1c      	itt	ne
 8008ab4:	f10e 3cff 	addne.w	ip, lr, #4294967295
 8008ab8:	ebac 0202 	subne.w	r2, ip, r2
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8008abc:	f8d1 c014 	ldr.w	ip, [r1, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8008ac0:	077f      	lsls	r7, r7, #29
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8008ac2:	bf44      	itt	mi
 8008ac4:	f10c 37ff 	addmi.w	r7, ip, #4294967295
 8008ac8:	1afb      	submi	r3, r7, r3
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8008aca:	680f      	ldr	r7, [r1, #0]
 8008acc:	437a      	muls	r2, r7
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8008ace:	684f      	ldr	r7, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 8008ad0:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8008ad2:	437b      	muls	r3, r7
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8008ad4:	68cf      	ldr	r7, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8008ad6:	fbb2 f2fe 	udiv	r2, r2, lr
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8008ada:	fbb3 f3fc 	udiv	r3, r3, ip
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8008ade:	42aa      	cmp	r2, r5
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8008ae0:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8008ae2:	60a3      	str	r3, [r4, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8008ae4:	bf8c      	ite	hi
 8008ae6:	eba2 0c05 	subhi.w	ip, r2, r5
 8008aea:	eba5 0c02 	subls.w	ip, r5, r2
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8008aee:	4283      	cmp	r3, r0
 8008af0:	bf8c      	ite	hi
 8008af2:	1a1e      	subhi	r6, r3, r0
 8008af4:	1ac6      	subls	r6, r0, r3
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8008af6:	4567      	cmp	r7, ip
 8008af8:	d301      	bcc.n	8008afe <BSP_TS_GetState+0x8e>
 8008afa:	42b7      	cmp	r7, r6
 8008afc:	d205      	bcs.n	8008b0a <BSP_TS_GetState+0x9a>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8008afe:	618a      	str	r2, [r1, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8008b00:	620b      	str	r3, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 8008b02:	2000      	movs	r0, #0
}
 8008b04:	b005      	add	sp, #20
 8008b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TS_State->TouchDetected = 0U;
 8008b08:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8008b0a:	e9c4 5001 	strd	r5, r0, [r4, #4]
 8008b0e:	e7f8      	b.n	8008b02 <BSP_TS_GetState+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008b10:	f06f 0004 	mvn.w	r0, #4
 8008b14:	e7f6      	b.n	8008b04 <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 8008b16:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8008b1a:	e7f3      	b.n	8008b04 <BSP_TS_GetState+0x94>
 8008b1c:	2400d010 	.word	0x2400d010
 8008b20:	2400cfe4 	.word	0x2400cfe4
 8008b24:	2400cfe8 	.word	0x2400cfe8

08008b28 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008b28:	4b2d      	ldr	r3, [pc, #180]	@ (8008be0 <SystemInit+0xb8>)
 8008b2a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008b2e:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 8008b32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8008b36:	691a      	ldr	r2, [r3, #16]
 8008b38:	f042 0210 	orr.w	r2, r2, #16
 8008b3c:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008b3e:	4a29      	ldr	r2, [pc, #164]	@ (8008be4 <SystemInit+0xbc>)
 8008b40:	6813      	ldr	r3, [r2, #0]
 8008b42:	f003 030f 	and.w	r3, r3, #15
 8008b46:	2b06      	cmp	r3, #6
 8008b48:	d805      	bhi.n	8008b56 <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008b4a:	6813      	ldr	r3, [r2, #0]
 8008b4c:	f023 030f 	bic.w	r3, r3, #15
 8008b50:	f043 0307 	orr.w	r3, r3, #7
 8008b54:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008b56:	4b24      	ldr	r3, [pc, #144]	@ (8008be8 <SystemInit+0xc0>)
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	f042 0201 	orr.w	r2, r2, #1
 8008b5e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008b60:	2200      	movs	r2, #0
 8008b62:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008b64:	4a21      	ldr	r2, [pc, #132]	@ (8008bec <SystemInit+0xc4>)
 8008b66:	6819      	ldr	r1, [r3, #0]
 8008b68:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008b6a:	491e      	ldr	r1, [pc, #120]	@ (8008be4 <SystemInit+0xbc>)
  RCC->CR &= 0xEAF6ED7FU;
 8008b6c:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008b6e:	680a      	ldr	r2, [r1, #0]
 8008b70:	0712      	lsls	r2, r2, #28
 8008b72:	d505      	bpl.n	8008b80 <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008b74:	680a      	ldr	r2, [r1, #0]
 8008b76:	f022 020f 	bic.w	r2, r2, #15
 8008b7a:	f042 0207 	orr.w	r2, r2, #7
 8008b7e:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008b80:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8008b82:	491b      	ldr	r1, [pc, #108]	@ (8008bf0 <SystemInit+0xc8>)
  RCC->D1CFGR = 0x00000000;
 8008b84:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8008b86:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8008b88:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8008b8a:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8008b8c:	4919      	ldr	r1, [pc, #100]	@ (8008bf4 <SystemInit+0xcc>)
 8008b8e:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008b90:	4919      	ldr	r1, [pc, #100]	@ (8008bf8 <SystemInit+0xd0>)
 8008b92:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008b94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008b96:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008b98:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008b9a:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008b9c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008b9e:	6819      	ldr	r1, [r3, #0]
 8008ba0:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8008ba4:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008ba6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8008ba8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008bac:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 8008bb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008bb4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8008bb8:	4b10      	ldr	r3, [pc, #64]	@ (8008bfc <SystemInit+0xd4>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	0c1b      	lsrs	r3, r3, #16
 8008bbe:	041b      	lsls	r3, r3, #16
 8008bc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bc4:	d203      	bcs.n	8008bce <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8008bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8008c00 <SystemInit+0xd8>)
 8008bc8:	2201      	movs	r2, #1
 8008bca:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8008bce:	4b0d      	ldr	r3, [pc, #52]	@ (8008c04 <SystemInit+0xdc>)
 8008bd0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8008bd4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8008bd6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008bda:	4b01      	ldr	r3, [pc, #4]	@ (8008be0 <SystemInit+0xb8>)
 8008bdc:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8008bde:	4770      	bx	lr
 8008be0:	e000ed00 	.word	0xe000ed00
 8008be4:	52002000 	.word	0x52002000
 8008be8:	58024400 	.word	0x58024400
 8008bec:	eaf6ed7f 	.word	0xeaf6ed7f
 8008bf0:	02020200 	.word	0x02020200
 8008bf4:	01ff0000 	.word	0x01ff0000
 8008bf8:	01010280 	.word	0x01010280
 8008bfc:	5c001000 	.word	0x5c001000
 8008c00:	51008000 	.word	0x51008000
 8008c04:	52004000 	.word	0x52004000

08008c08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008c08:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008c0a:	2003      	movs	r0, #3
 8008c0c:	f000 f854 	bl	8008cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008c10:	f003 fcc2 	bl	800c598 <HAL_RCC_GetSysClockFreq>
 8008c14:	490f      	ldr	r1, [pc, #60]	@ (8008c54 <HAL_Init+0x4c>)
 8008c16:	4a10      	ldr	r2, [pc, #64]	@ (8008c58 <HAL_Init+0x50>)
 8008c18:	698b      	ldr	r3, [r1, #24]
 8008c1a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8008c1e:	5cd3      	ldrb	r3, [r2, r3]
 8008c20:	f003 031f 	and.w	r3, r3, #31
 8008c24:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c26:	698b      	ldr	r3, [r1, #24]
 8008c28:	f003 030f 	and.w	r3, r3, #15
 8008c2c:	5cd3      	ldrb	r3, [r2, r3]
 8008c2e:	4a0b      	ldr	r2, [pc, #44]	@ (8008c5c <HAL_Init+0x54>)
 8008c30:	f003 031f 	and.w	r3, r3, #31
 8008c34:	fa20 f303 	lsr.w	r3, r0, r3
 8008c38:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008c3a:	4b09      	ldr	r3, [pc, #36]	@ (8008c60 <HAL_Init+0x58>)
 8008c3c:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008c3e:	2000      	movs	r0, #0
 8008c40:	f7f8 fe44 	bl	80018cc <HAL_InitTick>
 8008c44:	4604      	mov	r4, r0
 8008c46:	b918      	cbnz	r0, 8008c50 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8008c48:	f7f8 facc 	bl	80011e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008c50:	2401      	movs	r4, #1
 8008c52:	e7fb      	b.n	8008c4c <HAL_Init+0x44>
 8008c54:	58024400 	.word	0x58024400
 8008c58:	08028d68 	.word	0x08028d68
 8008c5c:	24000068 	.word	0x24000068
 8008c60:	2400006c 	.word	0x2400006c

08008c64 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8008c64:	4a03      	ldr	r2, [pc, #12]	@ (8008c74 <HAL_IncTick+0x10>)
 8008c66:	4b04      	ldr	r3, [pc, #16]	@ (8008c78 <HAL_IncTick+0x14>)
 8008c68:	6811      	ldr	r1, [r2, #0]
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	440b      	add	r3, r1
 8008c6e:	6013      	str	r3, [r2, #0]
}
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	2400d014 	.word	0x2400d014
 8008c78:	24000070 	.word	0x24000070

08008c7c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8008c7c:	4b01      	ldr	r3, [pc, #4]	@ (8008c84 <HAL_GetTick+0x8>)
 8008c7e:	6818      	ldr	r0, [r3, #0]
}
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
 8008c84:	2400d014 	.word	0x2400d014

08008c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008c88:	b538      	push	{r3, r4, r5, lr}
 8008c8a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008c8c:	f7ff fff6 	bl	8008c7c <HAL_GetTick>
 8008c90:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008c92:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8008c94:	bf1e      	ittt	ne
 8008c96:	4b04      	ldrne	r3, [pc, #16]	@ (8008ca8 <HAL_Delay+0x20>)
 8008c98:	781b      	ldrbne	r3, [r3, #0]
 8008c9a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008c9c:	f7ff ffee 	bl	8008c7c <HAL_GetTick>
 8008ca0:	1b43      	subs	r3, r0, r5
 8008ca2:	42a3      	cmp	r3, r4
 8008ca4:	d3fa      	bcc.n	8008c9c <HAL_Delay+0x14>
  {
  }
}
 8008ca6:	bd38      	pop	{r3, r4, r5, pc}
 8008ca8:	24000070 	.word	0x24000070

08008cac <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8008cac:	4b01      	ldr	r3, [pc, #4]	@ (8008cb4 <HAL_GetREVID+0x8>)
 8008cae:	6818      	ldr	r0, [r3, #0]
}
 8008cb0:	0c00      	lsrs	r0, r0, #16
 8008cb2:	4770      	bx	lr
 8008cb4:	5c001000 	.word	0x5c001000

08008cb8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008cb8:	4907      	ldr	r1, [pc, #28]	@ (8008cd8 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008cba:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008cbc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008cbe:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008cc2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008cc6:	0412      	lsls	r2, r2, #16
 8008cc8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008ccc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008cd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8008cd4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8008cd6:	4770      	bx	lr
 8008cd8:	e000ed00 	.word	0xe000ed00

08008cdc <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008cdc:	4b16      	ldr	r3, [pc, #88]	@ (8008d38 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008cde:	b530      	push	{r4, r5, lr}
 8008ce0:	68dc      	ldr	r4, [r3, #12]
 8008ce2:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008ce6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008cea:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008cec:	2b04      	cmp	r3, #4
 8008cee:	bf28      	it	cs
 8008cf0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008cf2:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008cf4:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008cf8:	bf8c      	ite	hi
 8008cfa:	3c03      	subhi	r4, #3
 8008cfc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008cfe:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8008d02:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008d04:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d08:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008d0c:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d10:	fa03 f304 	lsl.w	r3, r3, r4
 8008d14:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d18:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8008d1c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8008d1e:	db06      	blt.n	8008d2e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d20:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8008d24:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8008d28:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8008d2c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d2e:	f000 000f 	and.w	r0, r0, #15
 8008d32:	4a02      	ldr	r2, [pc, #8]	@ (8008d3c <HAL_NVIC_SetPriority+0x60>)
 8008d34:	5413      	strb	r3, [r2, r0]
 8008d36:	e7f9      	b.n	8008d2c <HAL_NVIC_SetPriority+0x50>
 8008d38:	e000ed00 	.word	0xe000ed00
 8008d3c:	e000ed14 	.word	0xe000ed14

08008d40 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008d40:	2800      	cmp	r0, #0
 8008d42:	db07      	blt.n	8008d54 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008d44:	2301      	movs	r3, #1
 8008d46:	0941      	lsrs	r1, r0, #5
 8008d48:	f000 001f 	and.w	r0, r0, #31
 8008d4c:	4a02      	ldr	r2, [pc, #8]	@ (8008d58 <HAL_NVIC_EnableIRQ+0x18>)
 8008d4e:	4083      	lsls	r3, r0
 8008d50:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	e000e100 	.word	0xe000e100

08008d5c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	db0c      	blt.n	8008d7a <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008d60:	0943      	lsrs	r3, r0, #5
 8008d62:	2201      	movs	r2, #1
 8008d64:	f000 001f 	and.w	r0, r0, #31
 8008d68:	4904      	ldr	r1, [pc, #16]	@ (8008d7c <HAL_NVIC_DisableIRQ+0x20>)
 8008d6a:	3320      	adds	r3, #32
 8008d6c:	4082      	lsls	r2, r0
 8008d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008d72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008d76:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8008d7a:	4770      	bx	lr
 8008d7c:	e000e100 	.word	0xe000e100

08008d80 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8008d80:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8008d84:	4b04      	ldr	r3, [pc, #16]	@ (8008d98 <HAL_MPU_Disable+0x18>)
 8008d86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d88:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008d8c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop
 8008d98:	e000ed00 	.word	0xe000ed00

08008d9c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8008d9c:	4b06      	ldr	r3, [pc, #24]	@ (8008db8 <HAL_MPU_Enable+0x1c>)
 8008d9e:	f040 0001 	orr.w	r0, r0, #1
 8008da2:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8008da6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008da8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8008dac:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8008dae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008db2:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8008db6:	4770      	bx	lr
 8008db8:	e000ed00 	.word	0xe000ed00

08008dbc <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8008dbc:	7843      	ldrb	r3, [r0, #1]
 8008dbe:	4a14      	ldr	r2, [pc, #80]	@ (8008e10 <HAL_MPU_ConfigRegion+0x54>)
 8008dc0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8008dc4:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8008dc8:	f023 0301 	bic.w	r3, r3, #1
 8008dcc:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8008dd0:	6843      	ldr	r3, [r0, #4]
 8008dd2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008dd6:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008dd8:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008dda:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008ddc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8008de0:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008de2:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8008de4:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008de6:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008dea:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008dec:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8008df0:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008df2:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8008df6:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008df8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8008dfc:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008dfe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008e02:	7a01      	ldrb	r1, [r0, #8]
 8008e04:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008e08:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	e000ed00 	.word	0xe000ed00

08008e14 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8008e14:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008e16:	4604      	mov	r4, r0
 8008e18:	b908      	cbnz	r0, 8008e1e <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8008e1a:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8008e1c:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008e1e:	7f43      	ldrb	r3, [r0, #29]
 8008e20:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008e24:	b913      	cbnz	r3, 8008e2c <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8008e26:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8008e28:	f7f8 f9f4 	bl	8001214 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8008e2c:	2302      	movs	r3, #2
 8008e2e:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8008e30:	7923      	ldrb	r3, [r4, #4]
 8008e32:	b9e3      	cbnz	r3, 8008e6e <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8008e34:	6823      	ldr	r3, [r4, #0]
 8008e36:	4a13      	ldr	r2, [pc, #76]	@ (8008e84 <HAL_CRC_Init+0x70>)
 8008e38:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8008e3a:	689a      	ldr	r2, [r3, #8]
 8008e3c:	f022 0218 	bic.w	r2, r2, #24
 8008e40:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8008e42:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8008e44:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8008e46:	b9d2      	cbnz	r2, 8008e7e <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8008e48:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8008e4c:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8008e4e:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008e50:	689a      	ldr	r2, [r3, #8]
 8008e52:	6961      	ldr	r1, [r4, #20]
 8008e54:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8008e58:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008e5a:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008e5c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008e5e:	689a      	ldr	r2, [r3, #8]
 8008e60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008e64:	430a      	orrs	r2, r1
 8008e66:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8008e6c:	e7d6      	b.n	8008e1c <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8008e6e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8008e72:	4620      	mov	r0, r4
 8008e74:	f000 f808 	bl	8008e88 <HAL_CRCEx_Polynomial_Set>
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	d0e2      	beq.n	8008e42 <HAL_CRC_Init+0x2e>
 8008e7c:	e7cd      	b.n	8008e1a <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8008e7e:	6922      	ldr	r2, [r4, #16]
 8008e80:	e7e4      	b.n	8008e4c <HAL_CRC_Init+0x38>
 8008e82:	bf00      	nop
 8008e84:	04c11db7 	.word	0x04c11db7

08008e88 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8008e88:	07cb      	lsls	r3, r1, #31
{
 8008e8a:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8008e8c:	d50d      	bpl.n	8008eaa <HAL_CRCEx_Polynomial_Set+0x22>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8008e8e:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8008e90:	3b01      	subs	r3, #1
 8008e92:	d31d      	bcc.n	8008ed0 <HAL_CRCEx_Polynomial_Set+0x48>
 8008e94:	fa21 f403 	lsr.w	r4, r1, r3
 8008e98:	07e4      	lsls	r4, r4, #31
 8008e9a:	d5f9      	bpl.n	8008e90 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 8008e9c:	2a10      	cmp	r2, #16
 8008e9e:	d013      	beq.n	8008ec8 <HAL_CRCEx_Polynomial_Set+0x40>
 8008ea0:	2a10      	cmp	r2, #16
 8008ea2:	d804      	bhi.n	8008eae <HAL_CRCEx_Polynomial_Set+0x26>
 8008ea4:	b13a      	cbz	r2, 8008eb6 <HAL_CRCEx_Polynomial_Set+0x2e>
 8008ea6:	2a08      	cmp	r2, #8
 8008ea8:	d010      	beq.n	8008ecc <HAL_CRCEx_Polynomial_Set+0x44>
 8008eaa:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8008eac:	e00b      	b.n	8008ec6 <HAL_CRCEx_Polynomial_Set+0x3e>
    switch (PolyLength)
 8008eae:	2a18      	cmp	r2, #24
 8008eb0:	d1fb      	bne.n	8008eaa <HAL_CRCEx_Polynomial_Set+0x22>
        if (msb >= HAL_CRC_LENGTH_7B)
 8008eb2:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 8008eb4:	d8f9      	bhi.n	8008eaa <HAL_CRCEx_Polynomial_Set+0x22>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8008eb6:	6800      	ldr	r0, [r0, #0]
 8008eb8:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8008eba:	6883      	ldr	r3, [r0, #8]
 8008ebc:	f023 0318 	bic.w	r3, r3, #24
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	6083      	str	r3, [r0, #8]
 8008ec4:	2000      	movs	r0, #0
}
 8008ec6:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 8008ec8:	2b07      	cmp	r3, #7
 8008eca:	e7f3      	b.n	8008eb4 <HAL_CRCEx_Polynomial_Set+0x2c>
        if (msb >= HAL_CRC_LENGTH_16B)
 8008ecc:	2b0f      	cmp	r3, #15
 8008ece:	e7f1      	b.n	8008eb4 <HAL_CRCEx_Polynomial_Set+0x2c>
    switch (PolyLength)
 8008ed0:	2a10      	cmp	r2, #16
 8008ed2:	d1e5      	bne.n	8008ea0 <HAL_CRCEx_Polynomial_Set+0x18>
 8008ed4:	e7e9      	b.n	8008eaa <HAL_CRCEx_Polynomial_Set+0x22>

08008ed6 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8008ed6:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8008ed8:	4604      	mov	r4, r0
 8008eda:	2800      	cmp	r0, #0
 8008edc:	d036      	beq.n	8008f4c <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8008ede:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 8008ee2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008ee6:	b91b      	cbnz	r3, 8008ef0 <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8008ee8:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8008eec:	f7f8 f9aa 	bl	8001244 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008ef0:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8008ef2:	69e0      	ldr	r0, [r4, #28]
 8008ef4:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008ef6:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8008efa:	6823      	ldr	r3, [r4, #0]
 8008efc:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8008efe:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8008f00:	6819      	ldr	r1, [r3, #0]
 8008f02:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 8008f06:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8008f0a:	430a      	orrs	r2, r1
 8008f0c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8008f0e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008f10:	68a2      	ldr	r2, [r4, #8]
 8008f12:	f421 7183 	bic.w	r1, r1, #262	@ 0x106
 8008f16:	4302      	orrs	r2, r0
 8008f18:	f021 0101 	bic.w	r1, r1, #1
 8008f1c:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8008f1e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8008f20:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8008f22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008f24:	0c12      	lsrs	r2, r2, #16
 8008f26:	0412      	lsls	r2, r2, #16
 8008f28:	430a      	orrs	r2, r1
 8008f2a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8008f2c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008f2e:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8008f32:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8008f36:	0552      	lsls	r2, r2, #21
 8008f38:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8008f3c:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8008f3e:	430a      	orrs	r2, r1
 8008f40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8008f42:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8008f44:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8008f46:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 8008f4a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008f4c:	2001      	movs	r0, #1
 8008f4e:	e7fc      	b.n	8008f4a <HAL_DMA2D_Init+0x74>

08008f50 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 8008f50:	4770      	bx	lr

08008f52 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 8008f52:	4770      	bx	lr

08008f54 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8008f54:	6803      	ldr	r3, [r0, #0]
{
 8008f56:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8008f58:	685e      	ldr	r6, [r3, #4]
{
 8008f5a:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8008f5c:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008f5e:	07f2      	lsls	r2, r6, #31
 8008f60:	d514      	bpl.n	8008f8c <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8008f62:	05e9      	lsls	r1, r5, #23
 8008f64:	d512      	bpl.n	8008f8c <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008f6c:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008f6e:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8008f70:	f042 0201 	orr.w	r2, r2, #1
 8008f74:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8008f76:	2201      	movs	r2, #1
 8008f78:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008f7a:	2304      	movs	r3, #4
 8008f7c:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8008f80:	2300      	movs	r3, #0
 8008f82:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8008f86:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8008f88:	b103      	cbz	r3, 8008f8c <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8008f8a:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008f8c:	06b2      	lsls	r2, r6, #26
 8008f8e:	d516      	bpl.n	8008fbe <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8008f90:	04ab      	lsls	r3, r5, #18
 8008f92:	d514      	bpl.n	8008fbe <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8008f94:	6823      	ldr	r3, [r4, #0]
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008f9c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8008f9e:	2220      	movs	r2, #32
 8008fa0:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008fa2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008fa4:	f043 0302 	orr.w	r3, r3, #2
 8008fa8:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008faa:	2304      	movs	r3, #4
 8008fac:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8008fb6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008fb8:	b10b      	cbz	r3, 8008fbe <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8008fba:	4620      	mov	r0, r4
 8008fbc:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8008fbe:	0730      	lsls	r0, r6, #28
 8008fc0:	d516      	bpl.n	8008ff0 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8008fc2:	0529      	lsls	r1, r5, #20
 8008fc4:	d514      	bpl.n	8008ff0 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8008fc6:	6823      	ldr	r3, [r4, #0]
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008fce:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8008fd0:	2208      	movs	r2, #8
 8008fd2:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8008fd4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008fd6:	f043 0304 	orr.w	r3, r3, #4
 8008fda:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008fdc:	2304      	movs	r3, #4
 8008fde:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8008fe8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008fea:	b10b      	cbz	r3, 8008ff0 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8008fec:	4620      	mov	r0, r4
 8008fee:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8008ff0:	0772      	lsls	r2, r6, #29
 8008ff2:	d50b      	bpl.n	800900c <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8008ff4:	056b      	lsls	r3, r5, #21
 8008ff6:	d509      	bpl.n	800900c <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8008ff8:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8008ffa:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009002:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8009004:	2204      	movs	r2, #4
 8009006:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8009008:	f7ff ffa2 	bl	8008f50 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800900c:	07b0      	lsls	r0, r6, #30
 800900e:	d514      	bpl.n	800903a <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8009010:	05a9      	lsls	r1, r5, #22
 8009012:	d512      	bpl.n	800903a <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8009014:	6823      	ldr	r3, [r4, #0]
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800901c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800901e:	2202      	movs	r2, #2
 8009020:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8009022:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009024:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8009026:	2301      	movs	r3, #1
 8009028:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800902c:	2300      	movs	r3, #0
 800902e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
 8009032:	6a23      	ldr	r3, [r4, #32]
 8009034:	b10b      	cbz	r3, 800903a <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 8009036:	4620      	mov	r0, r4
 8009038:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800903a:	06f2      	lsls	r2, r6, #27
 800903c:	d513      	bpl.n	8009066 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800903e:	04eb      	lsls	r3, r5, #19
 8009040:	d511      	bpl.n	8009066 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8009042:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8009044:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800904c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800904e:	2210      	movs	r2, #16
 8009050:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8009052:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009054:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8009056:	2301      	movs	r3, #1
 8009058:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800905c:	2300      	movs	r3, #0
 800905e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8009062:	f7ff ff76 	bl	8008f52 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8009066:	bd70      	pop	{r4, r5, r6, pc}

08009068 <DSI_ShortWrite.constprop.0>:
  *                 This parameter can be any value of @arg DSI_DCS_Command or a
  *                 generic command code.
  * @param  Param2  DSC parameter or second generic parameter.
  * @retval HAL status
  */
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
 8009068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800906c:	4607      	mov	r7, r0
 800906e:	460d      	mov	r5, r1
 8009070:	4614      	mov	r4, r2
 8009072:	461e      	mov	r6, r3
                                        uint32_t Param2)
{
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8009074:	f7ff fe02 	bl	8008c7c <HAL_GetTick>
 8009078:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800907e:	07d2      	lsls	r2, r2, #31
 8009080:	d50a      	bpl.n	8009098 <DSI_ShortWrite.constprop.0+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8009082:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8009086:	9a06      	ldr	r2, [sp, #24]

  return HAL_OK;
 8009088:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800908a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800908e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8009092:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 8009094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009098:	f7ff fdf0 	bl	8008c7c <HAL_GetTick>
 800909c:	eba0 0008 	sub.w	r0, r0, r8
 80090a0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80090a4:	d9e9      	bls.n	800907a <DSI_ShortWrite.constprop.0+0x12>
      return HAL_TIMEOUT;
 80090a6:	2003      	movs	r0, #3
 80090a8:	e7f4      	b.n	8009094 <DSI_ShortWrite.constprop.0+0x2c>

080090aa <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80090aa:	7c03      	ldrb	r3, [r0, #16]
{
 80090ac:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d05b      	beq.n	800916a <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 80090b2:	6803      	ldr	r3, [r0, #0]
 80090b4:	2000      	movs	r0, #0
 80090b6:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80090ba:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80090be:	07c8      	lsls	r0, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 80090c0:	6191      	str	r1, [r2, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80090c2:	d507      	bpl.n	80090d4 <HAL_DSI_ConfigErrorMonitor+0x2a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 80090c4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80090c8:	ea6f 4010 	mvn.w	r0, r0, lsr #16
 80090cc:	ea6f 4000 	mvn.w	r0, r0, lsl #16
 80090d0:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80090d4:	0788      	lsls	r0, r1, #30
 80090d6:	d505      	bpl.n	80090e4 <HAL_DSI_ConfigErrorMonitor+0x3a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80090d8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80090dc:	f440 10f8 	orr.w	r0, r0, #2031616	@ 0x1f0000
 80090e0:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80090e4:	0748      	lsls	r0, r1, #29
 80090e6:	d505      	bpl.n	80090f4 <HAL_DSI_ConfigErrorMonitor+0x4a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80090e8:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80090ec:	f040 0001 	orr.w	r0, r0, #1
 80090f0:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80090f4:	0708      	lsls	r0, r1, #28
 80090f6:	d505      	bpl.n	8009104 <HAL_DSI_ConfigErrorMonitor+0x5a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80090f8:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80090fc:	f040 0002 	orr.w	r0, r0, #2
 8009100:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8009104:	06c8      	lsls	r0, r1, #27
 8009106:	d505      	bpl.n	8009114 <HAL_DSI_ConfigErrorMonitor+0x6a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8009108:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800910c:	f040 000c 	orr.w	r0, r0, #12
 8009110:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8009114:	0688      	lsls	r0, r1, #26
 8009116:	d505      	bpl.n	8009124 <HAL_DSI_ConfigErrorMonitor+0x7a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8009118:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800911c:	f040 0010 	orr.w	r0, r0, #16
 8009120:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8009124:	0648      	lsls	r0, r1, #25
 8009126:	d505      	bpl.n	8009134 <HAL_DSI_ConfigErrorMonitor+0x8a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8009128:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800912c:	f040 0020 	orr.w	r0, r0, #32
 8009130:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8009134:	0608      	lsls	r0, r1, #24
 8009136:	d505      	bpl.n	8009144 <HAL_DSI_ConfigErrorMonitor+0x9a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8009138:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800913c:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 8009140:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8009144:	05c8      	lsls	r0, r1, #23
 8009146:	d505      	bpl.n	8009154 <HAL_DSI_ConfigErrorMonitor+0xaa>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8009148:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800914c:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8009150:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8009154:	0589      	lsls	r1, r1, #22
 8009156:	d505      	bpl.n	8009164 <HAL_DSI_ConfigErrorMonitor+0xba>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8009158:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 800915c:	f441 51f8 	orr.w	r1, r1, #7936	@ 0x1f00
 8009160:	f8c3 10c8 	str.w	r1, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8009164:	2000      	movs	r0, #0
 8009166:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
 8009168:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800916a:	2002      	movs	r0, #2
}
 800916c:	4770      	bx	lr
	...

08009170 <HAL_DSI_Init>:
{
 8009170:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009172:	460d      	mov	r5, r1
  if (hdsi == NULL)
 8009174:	4604      	mov	r4, r0
 8009176:	2800      	cmp	r0, #0
 8009178:	f000 80ea 	beq.w	8009350 <HAL_DSI_Init+0x1e0>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800917c:	7c43      	ldrb	r3, [r0, #17]
 800917e:	b90b      	cbnz	r3, 8009184 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 8009180:	f7f8 f884 	bl	800128c <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8009184:	2303      	movs	r3, #3
 8009186:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8009188:	2300      	movs	r3, #0
 800918a:	9300      	str	r3, [sp, #0]
 800918c:	6823      	ldr	r3, [r4, #0]
 800918e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8009192:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8009196:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800919a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800919e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80091a2:	9300      	str	r3, [sp, #0]
 80091a4:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 80091a6:	f7ff fd69 	bl	8008c7c <HAL_GetTick>
 80091aa:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80091ac:	6822      	ldr	r2, [r4, #0]
 80091ae:	f8d2 340c 	ldr.w	r3, [r2, #1036]	@ 0x40c
 80091b2:	04d9      	lsls	r1, r3, #19
 80091b4:	d56e      	bpl.n	8009294 <HAL_DSI_Init+0x124>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80091b6:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 80091ba:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 80091be:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 80091c2:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80091c6:	f8d2 1430 	ldr.w	r1, [r2, #1072]	@ 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80091ca:	e9d5 0300 	ldrd	r0, r3, [r5]
 80091ce:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80091d0:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 80091d4:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80091d6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 80091da:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80091dc:	430b      	orrs	r3, r1
 80091de:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 80091e2:	2300      	movs	r3, #0
 80091e4:	9301      	str	r3, [sp, #4]
 80091e6:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 80091ea:	f043 0301 	orr.w	r3, r3, #1
 80091ee:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
 80091f2:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 80091f6:	f003 0301 	and.w	r3, r3, #1
 80091fa:	9301      	str	r3, [sp, #4]
 80091fc:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 80091fe:	f7ff fd43 	bl	8008c88 <HAL_Delay>
  tickstart = HAL_GetTick();
 8009202:	f7ff fd3b 	bl	8008c7c <HAL_GetTick>
 8009206:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8009208:	6823      	ldr	r3, [r4, #0]
 800920a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 800920e:	05d2      	lsls	r2, r2, #23
 8009210:	d548      	bpl.n	80092a4 <HAL_DSI_Init+0x134>
  __HAL_DSI_ENABLE(hdsi);
 8009212:	2200      	movs	r2, #0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8009214:	68a1      	ldr	r1, [r4, #8]
  __HAL_DSI_ENABLE(hdsi);
 8009216:	9202      	str	r2, [sp, #8]
 8009218:	685a      	ldr	r2, [r3, #4]
 800921a:	f042 0201 	orr.w	r2, r2, #1
 800921e:	605a      	str	r2, [r3, #4]
 8009220:	685a      	ldr	r2, [r3, #4]
 8009222:	f002 0201 	and.w	r2, r2, #1
 8009226:	9202      	str	r2, [sp, #8]
 8009228:	9a02      	ldr	r2, [sp, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800922a:	689a      	ldr	r2, [r3, #8]
 800922c:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8009230:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8009232:	689a      	ldr	r2, [r3, #8]
 8009234:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8009236:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8009238:	609a      	str	r2, [r3, #8]
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 800923a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800923e:	f042 0202 	orr.w	r2, r2, #2
 8009242:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 8009246:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800924a:	f042 0204 	orr.w	r2, r2, #4
 800924e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8009252:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8009256:	f022 0203 	bic.w	r2, r2, #3
 800925a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800925e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8009262:	430a      	orrs	r2, r1
 8009264:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  tickstart = HAL_GetTick();
 8009268:	f7ff fd08 	bl	8008c7c <HAL_GetTick>
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 800926c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800926e:	4606      	mov	r6, r0
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8009270:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009274:	079b      	lsls	r3, r3, #30
 8009276:	d025      	beq.n	80092c4 <HAL_DSI_Init+0x154>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 8009278:	6823      	ldr	r3, [r4, #0]
 800927a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800927e:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 8009282:	2b94      	cmp	r3, #148	@ 0x94
 8009284:	d025      	beq.n	80092d2 <HAL_DSI_Init+0x162>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009286:	f7ff fcf9 	bl	8008c7c <HAL_GetTick>
 800928a:	1b80      	subs	r0, r0, r6
 800928c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8009290:	d9f2      	bls.n	8009278 <HAL_DSI_Init+0x108>
 8009292:	e014      	b.n	80092be <HAL_DSI_Init+0x14e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009294:	f7ff fcf2 	bl	8008c7c <HAL_GetTick>
 8009298:	1b80      	subs	r0, r0, r6
 800929a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800929e:	d985      	bls.n	80091ac <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 80092a0:	2003      	movs	r0, #3
 80092a2:	e053      	b.n	800934c <HAL_DSI_Init+0x1dc>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80092a4:	f7ff fcea 	bl	8008c7c <HAL_GetTick>
 80092a8:	1b80      	subs	r0, r0, r6
 80092aa:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80092ae:	d9ab      	bls.n	8009208 <HAL_DSI_Init+0x98>
 80092b0:	e7f6      	b.n	80092a0 <HAL_DSI_Init+0x130>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80092b2:	f7ff fce3 	bl	8008c7c <HAL_GetTick>
 80092b6:	1b80      	subs	r0, r0, r6
 80092b8:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80092bc:	d902      	bls.n	80092c4 <HAL_DSI_Init+0x154>
        __HAL_UNLOCK(hdsi);
 80092be:	2300      	movs	r3, #0
 80092c0:	7423      	strb	r3, [r4, #16]
        return HAL_TIMEOUT;
 80092c2:	e7ed      	b.n	80092a0 <HAL_DSI_Init+0x130>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 80092c4:	6823      	ldr	r3, [r4, #0]
 80092c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80092ca:	f003 0314 	and.w	r3, r3, #20
 80092ce:	2b14      	cmp	r3, #20
 80092d0:	d1ef      	bne.n	80092b2 <HAL_DSI_Init+0x142>
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80092d2:	686b      	ldr	r3, [r5, #4]
 80092d4:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 80092d8:	4a1e      	ldr	r2, [pc, #120]	@ (8009354 <HAL_DSI_Init+0x1e4>)
  hdsi->Instance->IER[0U] = 0U;
 80092da:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80092dc:	2b01      	cmp	r3, #1
 80092de:	bf38      	it	cc
 80092e0:	2301      	movcc	r3, #1
 80092e2:	435a      	muls	r2, r3
 80092e4:	68ab      	ldr	r3, [r5, #8]
 80092e6:	f003 0303 	and.w	r3, r3, #3
 80092ea:	409a      	lsls	r2, r3
 80092ec:	682b      	ldr	r3, [r5, #0]
 80092ee:	434b      	muls	r3, r1
 80092f0:	fbb2 f2f3 	udiv	r2, r2, r3
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80092f4:	6823      	ldr	r3, [r4, #0]
 80092f6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 80092fa:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80092fe:	f8c3 1418 	str.w	r1, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8009302:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8009306:	430a      	orrs	r2, r1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8009308:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800930a:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->IER[0U] = 0U;
 800930e:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8009312:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  __HAL_DSI_DISABLE(hdsi);
 8009316:	9003      	str	r0, [sp, #12]
 8009318:	685a      	ldr	r2, [r3, #4]
  hdsi->ErrorMsk = 0U;
 800931a:	61a0      	str	r0, [r4, #24]
  __HAL_DSI_DISABLE(hdsi);
 800931c:	f022 0201 	bic.w	r2, r2, #1
 8009320:	605a      	str	r2, [r3, #4]
 8009322:	685a      	ldr	r2, [r3, #4]
 8009324:	f002 0201 	and.w	r2, r2, #1
 8009328:	9203      	str	r2, [sp, #12]
 800932a:	9a03      	ldr	r2, [sp, #12]
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800932c:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8009330:	f022 0203 	bic.w	r2, r2, #3
 8009334:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8009338:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800933c:	430a      	orrs	r2, r1
 800933e:	f042 0201 	orr.w	r2, r2, #1
 8009342:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->State = HAL_DSI_STATE_READY;
 8009346:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8009348:	6160      	str	r0, [r4, #20]
  hdsi->State = HAL_DSI_STATE_READY;
 800934a:	7463      	strb	r3, [r4, #17]
}
 800934c:	b004      	add	sp, #16
 800934e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8009350:	2001      	movs	r0, #1
 8009352:	e7fb      	b.n	800934c <HAL_DSI_Init+0x1dc>
 8009354:	003d0900 	.word	0x003d0900

08009358 <HAL_DSI_ErrorCallback>:
  * @brief  Operation Error DSI callback.
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
 8009358:	4770      	bx	lr

0800935a <HAL_DSI_IRQHandler>:
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800935a:	6803      	ldr	r3, [r0, #0]
 800935c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8009360:	07d1      	lsls	r1, r2, #31
{
 8009362:	b510      	push	{r4, lr}
 8009364:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8009366:	d508      	bpl.n	800937a <HAL_DSI_IRQHandler+0x20>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8009368:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800936c:	07d2      	lsls	r2, r2, #31
 800936e:	d504      	bpl.n	800937a <HAL_DSI_IRQHandler+0x20>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8009370:	2201      	movs	r2, #1
 8009372:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 8009376:	f7f8 ff21 	bl	80021bc <HAL_DSI_TearingEffectCallback>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800937a:	6823      	ldr	r3, [r4, #0]
 800937c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8009380:	0791      	lsls	r1, r2, #30
 8009382:	d509      	bpl.n	8009398 <HAL_DSI_IRQHandler+0x3e>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8009384:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8009388:	0792      	lsls	r2, r2, #30
 800938a:	d505      	bpl.n	8009398 <HAL_DSI_IRQHandler+0x3e>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800938c:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800938e:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8009390:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8009394:	f7f8 ff44 	bl	8002220 <HAL_DSI_EndOfRefreshCallback>
  if (hdsi->ErrorMsk != 0U)
 8009398:	69a3      	ldr	r3, [r4, #24]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d04e      	beq.n	800943c <HAL_DSI_IRQHandler+0xe2>
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800939e:	6821      	ldr	r1, [r4, #0]
 80093a0:	f8d1 20bc 	ldr.w	r2, [r1, #188]	@ 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80093a4:	f8d1 30c4 	ldr.w	r3, [r1, #196]	@ 0xc4
 80093a8:	401a      	ands	r2, r3
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 80093aa:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 80093ae:	f8d1 10c8 	ldr.w	r1, [r1, #200]	@ 0xc8
 80093b2:	400b      	ands	r3, r1
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 80093b4:	b291      	uxth	r1, r2
 80093b6:	b119      	cbz	r1, 80093c0 <HAL_DSI_IRQHandler+0x66>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 80093b8:	6961      	ldr	r1, [r4, #20]
 80093ba:	f041 0101 	orr.w	r1, r1, #1
 80093be:	6161      	str	r1, [r4, #20]
    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 80093c0:	f412 1ff8 	tst.w	r2, #2031616	@ 0x1f0000
 80093c4:	d003      	beq.n	80093ce <HAL_DSI_IRQHandler+0x74>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 80093c6:	6962      	ldr	r2, [r4, #20]
 80093c8:	f042 0202 	orr.w	r2, r2, #2
 80093cc:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 80093ce:	07d8      	lsls	r0, r3, #31
 80093d0:	d503      	bpl.n	80093da <HAL_DSI_IRQHandler+0x80>
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 80093d2:	6962      	ldr	r2, [r4, #20]
 80093d4:	f042 0204 	orr.w	r2, r2, #4
 80093d8:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 80093da:	0799      	lsls	r1, r3, #30
 80093dc:	d503      	bpl.n	80093e6 <HAL_DSI_IRQHandler+0x8c>
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 80093de:	6962      	ldr	r2, [r4, #20]
 80093e0:	f042 0208 	orr.w	r2, r2, #8
 80093e4:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 80093e6:	f013 0f0c 	tst.w	r3, #12
 80093ea:	d003      	beq.n	80093f4 <HAL_DSI_IRQHandler+0x9a>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 80093ec:	6962      	ldr	r2, [r4, #20]
 80093ee:	f042 0210 	orr.w	r2, r2, #16
 80093f2:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 80093f4:	06da      	lsls	r2, r3, #27
 80093f6:	d503      	bpl.n	8009400 <HAL_DSI_IRQHandler+0xa6>
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 80093f8:	6962      	ldr	r2, [r4, #20]
 80093fa:	f042 0220 	orr.w	r2, r2, #32
 80093fe:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8009400:	0698      	lsls	r0, r3, #26
 8009402:	d503      	bpl.n	800940c <HAL_DSI_IRQHandler+0xb2>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8009404:	6962      	ldr	r2, [r4, #20]
 8009406:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800940a:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800940c:	0659      	lsls	r1, r3, #25
 800940e:	d503      	bpl.n	8009418 <HAL_DSI_IRQHandler+0xbe>
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8009410:	6962      	ldr	r2, [r4, #20]
 8009412:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009416:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8009418:	061a      	lsls	r2, r3, #24
 800941a:	d503      	bpl.n	8009424 <HAL_DSI_IRQHandler+0xca>
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800941c:	6962      	ldr	r2, [r4, #20]
 800941e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009422:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8009424:	f413 5ff8 	tst.w	r3, #7936	@ 0x1f00
 8009428:	d003      	beq.n	8009432 <HAL_DSI_IRQHandler+0xd8>
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800942a:	6963      	ldr	r3, [r4, #20]
 800942c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009430:	6163      	str	r3, [r4, #20]
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8009432:	6963      	ldr	r3, [r4, #20]
 8009434:	b113      	cbz	r3, 800943c <HAL_DSI_IRQHandler+0xe2>
      HAL_DSI_ErrorCallback(hdsi);
 8009436:	4620      	mov	r0, r4
 8009438:	f7ff ff8e 	bl	8009358 <HAL_DSI_ErrorCallback>
}
 800943c:	bd10      	pop	{r4, pc}

0800943e <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800943e:	7c02      	ldrb	r2, [r0, #16]
{
 8009440:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8009442:	2a01      	cmp	r2, #1
 8009444:	d00a      	beq.n	800945c <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8009446:	6802      	ldr	r2, [r0, #0]
 8009448:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 800944a:	f020 0003 	bic.w	r0, r0, #3
 800944e:	6310      	str	r0, [r2, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8009450:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8009452:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009454:	2000      	movs	r0, #0
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8009456:	6311      	str	r1, [r2, #48]	@ 0x30
  __HAL_UNLOCK(hdsi);
 8009458:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 800945a:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800945c:	2002      	movs	r0, #2
}
 800945e:	4770      	bx	lr

08009460 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8009460:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009462:	7c03      	ldrb	r3, [r0, #16]
{
 8009464:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8009466:	2b01      	cmp	r3, #1
 8009468:	d069      	beq.n	800953e <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800946a:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800946c:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800946e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009470:	f042 0201 	orr.w	r2, r2, #1
 8009474:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8009476:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800947a:	f022 0201 	bic.w	r2, r2, #1
 800947e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8009482:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8009486:	f042 0201 	orr.w	r2, r2, #1
 800948a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800948e:	68da      	ldr	r2, [r3, #12]
 8009490:	f022 0203 	bic.w	r2, r2, #3
 8009494:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8009496:	68da      	ldr	r2, [r3, #12]
 8009498:	4302      	orrs	r2, r0
 800949a:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800949c:	695a      	ldr	r2, [r3, #20]
 800949e:	f022 0207 	bic.w	r2, r2, #7
 80094a2:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80094a4:	6958      	ldr	r0, [r3, #20]
 80094a6:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 80094aa:	432a      	orrs	r2, r5
 80094ac:	694d      	ldr	r5, [r1, #20]
 80094ae:	432a      	orrs	r2, r5
 80094b0:	4302      	orrs	r2, r0

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80094b2:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80094b4:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80094b6:	691a      	ldr	r2, [r3, #16]
 80094b8:	f022 020f 	bic.w	r2, r2, #15
 80094bc:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80094be:	691a      	ldr	r2, [r3, #16]
 80094c0:	4302      	orrs	r2, r0
 80094c2:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80094c4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80094c8:	f022 020e 	bic.w	r2, r2, #14
 80094cc:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 80094d0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80094d4:	ea42 0240 	orr.w	r2, r2, r0, lsl #1

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80094d8:	6888      	ldr	r0, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 80094da:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 80094de:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80094e0:	0c12      	lsrs	r2, r2, #16
 80094e2:	0412      	lsls	r2, r2, #16
 80094e4:	665a      	str	r2, [r3, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80094e6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80094e8:	4302      	orrs	r2, r0
 80094ea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80094ec:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80094f0:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80094f4:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80094f8:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 80094fc:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 8009500:	432a      	orrs	r2, r5
 8009502:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8009504:	432a      	orrs	r2, r5
 8009506:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8009508:	6a89      	ldr	r1, [r1, #40]	@ 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800950a:	432a      	orrs	r2, r5
 800950c:	4302      	orrs	r2, r0

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800950e:	2000      	movs	r0, #0
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8009510:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8009514:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009516:	f022 0201 	bic.w	r2, r2, #1
 800951a:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800951c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800951e:	430a      	orrs	r2, r1
 8009520:	669a      	str	r2, [r3, #104]	@ 0x68
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8009522:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8009526:	f042 0201 	orr.w	r2, r2, #1
 800952a:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 800952e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8009532:	f042 0202 	orr.w	r2, r2, #2
 8009536:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_UNLOCK(hdsi);
 800953a:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 800953c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800953e:	2002      	movs	r0, #2
 8009540:	e7fc      	b.n	800953c <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

08009544 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8009544:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009546:	7c03      	ldrb	r3, [r0, #16]
{
 8009548:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 800954a:	2b01      	cmp	r3, #1
 800954c:	d029      	beq.n	80095a2 <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 800954e:	6800      	ldr	r0, [r0, #0]
 8009550:	4b15      	ldr	r3, [pc, #84]	@ (80095a8 <HAL_DSI_ConfigCommand+0x64>)
 8009552:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 8009554:	4023      	ands	r3, r4
 8009556:	6683      	str	r3, [r0, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8009558:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 800955a:	e9d1 3500 	ldrd	r3, r5, [r1]
 800955e:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 8009560:	688d      	ldr	r5, [r1, #8]
 8009562:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 8009564:	68cd      	ldr	r5, [r1, #12]
 8009566:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 8009568:	690d      	ldr	r5, [r1, #16]
 800956a:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 800956c:	694d      	ldr	r5, [r1, #20]
 800956e:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 8009570:	698d      	ldr	r5, [r1, #24]
 8009572:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 8009574:	69cd      	ldr	r5, [r1, #28]
 8009576:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 8009578:	6a0d      	ldr	r5, [r1, #32]
 800957a:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 800957c:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800957e:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 8009580:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8009582:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 8009584:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8009586:	6b09      	ldr	r1, [r1, #48]	@ 0x30
                           LPCmd->LPDcsLongWrite      | \
 8009588:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800958a:	4323      	orrs	r3, r4
 800958c:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 800958e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8009590:	f023 0302 	bic.w	r3, r3, #2
 8009594:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8009596:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8009598:	430b      	orrs	r3, r1
 800959a:	6683      	str	r3, [r0, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800959c:	2000      	movs	r0, #0
 800959e:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
}
 80095a0:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80095a2:	2002      	movs	r0, #2
 80095a4:	e7fc      	b.n	80095a0 <HAL_DSI_ConfigCommand+0x5c>
 80095a6:	bf00      	nop
 80095a8:	fef080ff 	.word	0xfef080ff

080095ac <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80095ac:	7c02      	ldrb	r2, [r0, #16]
{
 80095ae:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 80095b0:	2a01      	cmp	r2, #1
 80095b2:	d00a      	beq.n	80095ca <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80095b4:	6802      	ldr	r2, [r0, #0]
 80095b6:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 80095b8:	f020 001f 	bic.w	r0, r0, #31
 80095bc:	62d0      	str	r0, [r2, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80095be:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 80095c0:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80095c2:	2000      	movs	r0, #0
  hdsi->Instance->PCR |= FlowControl;
 80095c4:	62d1      	str	r1, [r2, #44]	@ 0x2c
  __HAL_UNLOCK(hdsi);
 80095c6:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 80095c8:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80095ca:	2002      	movs	r0, #2
}
 80095cc:	4770      	bx	lr

080095ce <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80095ce:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80095d0:	7c03      	ldrb	r3, [r0, #16]
{
 80095d2:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d034      	beq.n	8009642 <HAL_DSI_ConfigPhyTimer+0x74>

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80095d8:	e9d1 0300 	ldrd	r0, r3, [r1]
 80095dc:	4298      	cmp	r0, r3
 80095de:	bf38      	it	cc
 80095e0:	4618      	movcc	r0, r3
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80095e8:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 80095ec:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80095f0:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80095f4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80095f8:	4302      	orrs	r2, r0
 80095fa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80095fe:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8009602:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8009606:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800960a:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800960e:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8009612:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8009614:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8009618:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800961a:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800961c:	432a      	orrs	r2, r5
 800961e:	4302      	orrs	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009620:	2000      	movs	r0, #0
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8009622:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8009626:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800962a:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800962e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8009632:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8009636:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800963a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  __HAL_UNLOCK(hdsi);
 800963e:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8009640:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8009642:	2002      	movs	r0, #2
 8009644:	e7fc      	b.n	8009640 <HAL_DSI_ConfigPhyTimer+0x72>
	...

08009648 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8009648:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800964a:	7c03      	ldrb	r3, [r0, #16]
{
 800964c:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800964e:	2b01      	cmp	r3, #1
 8009650:	d05b      	beq.n	800970a <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8009652:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8009654:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8009656:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8009658:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800965a:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800965e:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8009660:	689a      	ldr	r2, [r3, #8]
 8009662:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8009666:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8009668:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 800966a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800966c:	b292      	uxth	r2, r2
 800966e:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8009670:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8009672:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8009676:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8009678:	4a25      	ldr	r2, [pc, #148]	@ (8009710 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 800967a:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800967c:	4010      	ands	r0, r2
 800967e:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8009680:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8009682:	4328      	orrs	r0, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8009684:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8009686:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8009688:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800968a:	4010      	ands	r0, r2
 800968c:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800968e:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009690:	4328      	orrs	r0, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8009692:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8009694:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8009696:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800969a:	4010      	ands	r0, r2
 800969c:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80096a0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80096a4:	4328      	orrs	r0, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80096a6:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80096a8:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80096ac:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 80096b0:	4010      	ands	r0, r2
 80096b2:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80096b6:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 80096ba:	4328      	orrs	r0, r5
 80096bc:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 80096c0:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 80096c4:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 80096c8:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80096cc:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 80096d0:	698d      	ldr	r5, [r1, #24]
 80096d2:	4328      	orrs	r0, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80096d4:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80096d6:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80096d8:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80096dc:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 80096e0:	4010      	ands	r0, r2
 80096e2:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80096e6:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 80096ea:	4328      	orrs	r0, r5
 80096ec:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80096f0:	f8d3 008c 	ldr.w	r0, [r3, #140]	@ 0x8c
 80096f4:	4002      	ands	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80096f6:	2000      	movs	r0, #0
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80096f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80096fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8009700:	430a      	orrs	r2, r1
 8009702:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_UNLOCK(hdsi);
 8009706:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8009708:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800970a:	2002      	movs	r0, #2
 800970c:	e7fc      	b.n	8009708 <HAL_DSI_ConfigHostTimeouts+0xc0>
 800970e:	bf00      	nop
 8009710:	ffff0000 	.word	0xffff0000

08009714 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009714:	7c03      	ldrb	r3, [r0, #16]
{
 8009716:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8009718:	2b01      	cmp	r3, #1
 800971a:	d01c      	beq.n	8009756 <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800971c:	6802      	ldr	r2, [r0, #0]
 800971e:	2300      	movs	r3, #0
 8009720:	9300      	str	r3, [sp, #0]
 8009722:	6851      	ldr	r1, [r2, #4]
 8009724:	f041 0101 	orr.w	r1, r1, #1
 8009728:	6051      	str	r1, [r2, #4]
 800972a:	6851      	ldr	r1, [r2, #4]
 800972c:	f001 0101 	and.w	r1, r1, #1
 8009730:	9100      	str	r1, [sp, #0]
 8009732:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8009734:	9301      	str	r3, [sp, #4]
 8009736:	f8d2 1404 	ldr.w	r1, [r2, #1028]	@ 0x404
 800973a:	f041 0108 	orr.w	r1, r1, #8
 800973e:	f8c2 1404 	str.w	r1, [r2, #1028]	@ 0x404
 8009742:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009746:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8009748:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800974a:	f002 0208 	and.w	r2, r2, #8
 800974e:	9201      	str	r2, [sp, #4]
 8009750:	9a01      	ldr	r2, [sp, #4]
}
 8009752:	b002      	add	sp, #8
 8009754:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8009756:	2002      	movs	r0, #2
 8009758:	e7fb      	b.n	8009752 <HAL_DSI_Start+0x3e>

0800975a <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800975a:	7c02      	ldrb	r2, [r0, #16]
{
 800975c:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800975e:	2a01      	cmp	r2, #1
 8009760:	d009      	beq.n	8009776 <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8009762:	6801      	ldr	r1, [r0, #0]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009764:	2000      	movs	r0, #0
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8009766:	f8d1 2404 	ldr.w	r2, [r1, #1028]	@ 0x404
 800976a:	f042 0204 	orr.w	r2, r2, #4
 800976e:	f8c1 2404 	str.w	r2, [r1, #1028]	@ 0x404
  __HAL_UNLOCK(hdsi);
 8009772:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8009774:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8009776:	2002      	movs	r0, #2
}
 8009778:	4770      	bx	lr

0800977a <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800977a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800977c:	7c05      	ldrb	r5, [r0, #16]
{
 800977e:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8009780:	2d01      	cmp	r5, #1
 8009782:	d009      	beq.n	8009798 <HAL_DSI_ShortWrite+0x1e>
 8009784:	2501      	movs	r5, #1
 8009786:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8009788:	9d06      	ldr	r5, [sp, #24]
 800978a:	9500      	str	r5, [sp, #0]
 800978c:	f7ff fc6c 	bl	8009068 <DSI_ShortWrite.constprop.0>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009790:	2300      	movs	r3, #0
 8009792:	7423      	strb	r3, [r4, #16]

  return status;
}
 8009794:	b003      	add	sp, #12
 8009796:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8009798:	2002      	movs	r0, #2
 800979a:	e7fb      	b.n	8009794 <HAL_DSI_ShortWrite+0x1a>

0800979c <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    const uint8_t *ParametersTable)
{
 800979c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a0:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  const uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 80097a2:	7c03      	ldrb	r3, [r0, #16]
{
 80097a4:	4606      	mov	r6, r0
 80097a6:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 80097a8:	2b01      	cmp	r3, #1
{
 80097aa:	4615      	mov	r5, r2
 80097ac:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hdsi);
 80097b0:	d052      	beq.n	8009858 <HAL_DSI_LongWrite+0xbc>
 80097b2:	2301      	movs	r3, #1
 80097b4:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 80097b6:	f7ff fa61 	bl	8008c7c <HAL_GetTick>
 80097ba:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80097bc:	6832      	ldr	r2, [r6, #0]
 80097be:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 80097c0:	f013 0a01 	ands.w	sl, r3, #1
 80097c4:	d019      	beq.n	80097fa <HAL_DSI_LongWrite+0x5e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80097c6:	2c03      	cmp	r4, #3
 80097c8:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 80097ca:	f04f 0300 	mov.w	r3, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80097ce:	bf28      	it	cs
 80097d0:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 80097d2:	4283      	cmp	r3, r0
 80097d4:	d11d      	bne.n	8009812 <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 80097d6:	1ae0      	subs	r0, r4, r3
  pparams += nbBytes;
 80097d8:	4443      	add	r3, r8
  hdsi->Instance->GPDR = fifoword;
 80097da:	f8c2 9070 	str.w	r9, [r2, #112]	@ 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80097de:	bb10      	cbnz	r0, 8009826 <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 80097e0:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80097e2:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
 80097e6:	0223      	lsls	r3, r4, #8
 80097e8:	0224      	lsls	r4, r4, #8
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 80097f0:	431d      	orrs	r5, r3
 80097f2:	4325      	orrs	r5, r4
 80097f4:	66d5      	str	r5, [r2, #108]	@ 0x6c
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80097f6:	7430      	strb	r0, [r6, #16]

  return HAL_OK;
 80097f8:	e009      	b.n	800980e <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80097fa:	f7ff fa3f 	bl	8008c7c <HAL_GetTick>
 80097fe:	eba0 000b 	sub.w	r0, r0, fp
 8009802:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8009806:	d9d9      	bls.n	80097bc <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 8009808:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800980a:	f886 a010 	strb.w	sl, [r6, #16]
}
 800980e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8009812:	f818 1003 	ldrb.w	r1, [r8, r3]
 8009816:	3301      	adds	r3, #1
 8009818:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 800981c:	fa01 f10c 	lsl.w	r1, r1, ip
 8009820:	ea49 0901 	orr.w	r9, r9, r1
  for (count = 0U; count < nbBytes; count++)
 8009824:	e7d5      	b.n	80097d2 <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8009826:	2804      	cmp	r0, #4
    fifoword = 0U;
 8009828:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800982c:	4686      	mov	lr, r0
    for (count = 0U; count < nbBytes; count++)
 800982e:	4661      	mov	r1, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8009830:	bf28      	it	cs
 8009832:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8009836:	f813 8001 	ldrb.w	r8, [r3, r1]
 800983a:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 800983e:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8009840:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 8009844:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8009846:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 800984a:	d1f4      	bne.n	8009836 <HAL_DSI_LongWrite+0x9a>
    uicounter -= nbBytes;
 800984c:	eba0 000e 	sub.w	r0, r0, lr
    pparams += nbBytes;
 8009850:	4473      	add	r3, lr
    hdsi->Instance->GPDR = fifoword;
 8009852:	f8c2 c070 	str.w	ip, [r2, #112]	@ 0x70
    pparams += nbBytes;
 8009856:	e7c2      	b.n	80097de <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 8009858:	2002      	movs	r0, #2
 800985a:	e7d8      	b.n	800980e <HAL_DSI_LongWrite+0x72>

0800985c <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 800985c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009860:	461e      	mov	r6, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8009862:	7c03      	ldrb	r3, [r0, #16]
{
 8009864:	4605      	mov	r5, r0
 8009866:	460c      	mov	r4, r1
  __HAL_LOCK(hdsi);
 8009868:	2b01      	cmp	r3, #1
{
 800986a:	4617      	mov	r7, r2
 800986c:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8009870:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
  __HAL_LOCK(hdsi);
 8009874:	d06f      	beq.n	8009956 <HAL_DSI_Read+0xfa>
 8009876:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 8009878:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 800987a:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 800987c:	d90d      	bls.n	800989a <HAL_DSI_Read+0x3e>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 800987e:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8009882:	2237      	movs	r2, #55	@ 0x37
 8009884:	9300      	str	r3, [sp, #0]
 8009886:	b2f3      	uxtb	r3, r6
 8009888:	f7ff fbee 	bl	8009068 <DSI_ShortWrite.constprop.0>
 800988c:	b128      	cbz	r0, 800989a <HAL_DSI_Read+0x3e>
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800988e:	2300      	movs	r3, #0

      return HAL_ERROR;
 8009890:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 8009892:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 8009894:	b003      	add	sp, #12
 8009896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800989a:	f1b9 0f06 	cmp.w	r9, #6
 800989e:	d10f      	bne.n	80098c0 <HAL_DSI_Read+0x64>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80098a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 80098a2:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80098a4:	021b      	lsls	r3, r3, #8
 80098a6:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 80098aa:	f043 0306 	orr.w	r3, r3, #6
 80098ae:	66d3      	str	r3, [r2, #108]	@ 0x6c
  tickstart = HAL_GetTick();
 80098b0:	f7ff f9e4 	bl	8008c7c <HAL_GetTick>
 80098b4:	4604      	mov	r4, r0
  while (((int32_t)(datasize)) > 0)
 80098b6:	2e00      	cmp	r6, #0
 80098b8:	dc27      	bgt.n	800990a <HAL_DSI_Read+0xae>
  __HAL_UNLOCK(hdsi);
 80098ba:	2000      	movs	r0, #0
 80098bc:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 80098be:	e7e9      	b.n	8009894 <HAL_DSI_Read+0x38>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 80098c0:	f1b9 0f04 	cmp.w	r9, #4
 80098c4:	d105      	bne.n	80098d2 <HAL_DSI_Read+0x76>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80098c6:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 80098c8:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80098ca:	f044 0404 	orr.w	r4, r4, #4
 80098ce:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 80098d0:	e7ee      	b.n	80098b0 <HAL_DSI_Read+0x54>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 80098d2:	f1b9 0f14 	cmp.w	r9, #20
 80098d6:	d108      	bne.n	80098ea <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 80098d8:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80098dc:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 80098de:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80098e0:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 80098e4:	f044 0414 	orr.w	r4, r4, #20
 80098e8:	e7f1      	b.n	80098ce <HAL_DSI_Read+0x72>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 80098ea:	f1b9 0f24 	cmp.w	r9, #36	@ 0x24
 80098ee:	d1ce      	bne.n	800988e <HAL_DSI_Read+0x32>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80098f0:	f898 2001 	ldrb.w	r2, [r8, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80098f4:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80098f6:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80098f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80098fc:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8009900:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8009904:	f044 0424 	orr.w	r4, r4, #36	@ 0x24
 8009908:	e7e1      	b.n	80098ce <HAL_DSI_Read+0x72>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 800990a:	682a      	ldr	r2, [r5, #0]
 800990c:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 800990e:	f013 0310 	ands.w	r3, r3, #16
 8009912:	d10d      	bne.n	8009930 <HAL_DSI_Read+0xd4>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8009914:	2e04      	cmp	r6, #4
      fifoword = hdsi->Instance->GPDR;
 8009916:	6f10      	ldr	r0, [r2, #112]	@ 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8009918:	4632      	mov	r2, r6
 800991a:	bf28      	it	cs
 800991c:	2204      	movcs	r2, #4
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800991e:	00d9      	lsls	r1, r3, #3
 8009920:	fa20 f101 	lsr.w	r1, r0, r1
 8009924:	54f9      	strb	r1, [r7, r3]
      for (count = 0U; count < nbbytes; count++)
 8009926:	3301      	adds	r3, #1
 8009928:	429a      	cmp	r2, r3
 800992a:	d1f8      	bne.n	800991e <HAL_DSI_Read+0xc2>
        pdata++;
 800992c:	4417      	add	r7, r2
        datasize--;
 800992e:	1ab6      	subs	r6, r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009930:	f7ff f9a4 	bl	8008c7c <HAL_GetTick>
 8009934:	1b00      	subs	r0, r0, r4
 8009936:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800993a:	d903      	bls.n	8009944 <HAL_DSI_Read+0xe8>
      __HAL_UNLOCK(hdsi);
 800993c:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800993e:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8009940:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 8009942:	e7a7      	b.n	8009894 <HAL_DSI_Read+0x38>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 8009944:	682b      	ldr	r3, [r5, #0]
 8009946:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8009948:	0652      	lsls	r2, r2, #25
 800994a:	d4b4      	bmi.n	80098b6 <HAL_DSI_Read+0x5a>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 800994c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009950:	069b      	lsls	r3, r3, #26
 8009952:	d49c      	bmi.n	800988e <HAL_DSI_Read+0x32>
 8009954:	e7af      	b.n	80098b6 <HAL_DSI_Read+0x5a>
  __HAL_LOCK(hdsi);
 8009956:	2002      	movs	r0, #2
 8009958:	e79c      	b.n	8009894 <HAL_DSI_Read+0x38>

0800995a <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800995a:	7c02      	ldrb	r2, [r0, #16]
{
 800995c:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800995e:	2a01      	cmp	r2, #1
 8009960:	d00f      	beq.n	8009982 <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8009962:	6802      	ldr	r2, [r0, #0]
 8009964:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8009968:	f020 60c0 	bic.w	r0, r0, #100663296	@ 0x6000000
 800996c:	f8c2 041c 	str.w	r0, [r2, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8009970:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8009974:	ea40 6141 	orr.w	r1, r0, r1, lsl #25

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009978:	2000      	movs	r0, #0
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800997a:	f8c2 141c 	str.w	r1, [r2, #1052]	@ 0x41c
  __HAL_UNLOCK(hdsi);
 800997e:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8009980:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8009982:	2002      	movs	r0, #2
}
 8009984:	4770      	bx	lr
	...

08009988 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8009988:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 800998c:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800998e:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 8009b54 <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009992:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009996:	680a      	ldr	r2, [r1, #0]
 8009998:	fa32 f503 	lsrs.w	r5, r2, r3
 800999c:	d102      	bne.n	80099a4 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 800999e:	b003      	add	sp, #12
 80099a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80099a4:	2501      	movs	r5, #1
 80099a6:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 80099aa:	ea18 0202 	ands.w	r2, r8, r2
 80099ae:	f000 80bb 	beq.w	8009b28 <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80099b2:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80099b4:	2703      	movs	r7, #3
 80099b6:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80099ba:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80099be:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80099c2:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80099c4:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80099c8:	2f01      	cmp	r7, #1
 80099ca:	d834      	bhi.n	8009a36 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80099cc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80099ce:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 80099d2:	68cf      	ldr	r7, [r1, #12]
 80099d4:	fa07 f70e 	lsl.w	r7, r7, lr
 80099d8:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80099dc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80099de:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80099e0:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80099e4:	f3c6 1700 	ubfx	r7, r6, #4, #1
 80099e8:	409f      	lsls	r7, r3
 80099ea:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 80099ee:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80099f0:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80099f2:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80099f4:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80099f8:	688f      	ldr	r7, [r1, #8]
 80099fa:	fa07 f70e 	lsl.w	r7, r7, lr
 80099fe:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 8009a02:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009a04:	d119      	bne.n	8009a3a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 8009a06:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009a0a:	f003 0a07 	and.w	sl, r3, #7
 8009a0e:	f04f 0b0f 	mov.w	fp, #15
 8009a12:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8009a16:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8009a1a:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009a1e:	fa0b fb0a 	lsl.w	fp, fp, sl
 8009a22:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009a26:	690f      	ldr	r7, [r1, #16]
 8009a28:	fa07 f70a 	lsl.w	r7, r7, sl
 8009a2c:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 8009a30:	f8c8 7020 	str.w	r7, [r8, #32]
 8009a34:	e001      	b.n	8009a3a <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009a36:	2d03      	cmp	r5, #3
 8009a38:	d1da      	bne.n	80099f0 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 8009a3a:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009a3c:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009a40:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009a44:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009a48:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 8009a4c:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009a4e:	d06b      	beq.n	8009b28 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009a50:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 8009a54:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009a58:	f003 0c03 	and.w	ip, r3, #3
 8009a5c:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009a60:	f045 0502 	orr.w	r5, r5, #2
 8009a64:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009a68:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009a6c:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 8009a70:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8009a74:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009a78:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009a7c:	f005 0502 	and.w	r5, r5, #2
 8009a80:	9501      	str	r5, [sp, #4]
 8009a82:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8009a84:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009a86:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009a8a:	4d31      	ldr	r5, [pc, #196]	@ (8009b50 <HAL_GPIO_Init+0x1c8>)
 8009a8c:	42a8      	cmp	r0, r5
 8009a8e:	d04d      	beq.n	8009b2c <HAL_GPIO_Init+0x1a4>
 8009a90:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8009a94:	42a8      	cmp	r0, r5
 8009a96:	d04b      	beq.n	8009b30 <HAL_GPIO_Init+0x1a8>
 8009a98:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8009a9c:	42a8      	cmp	r0, r5
 8009a9e:	d049      	beq.n	8009b34 <HAL_GPIO_Init+0x1ac>
 8009aa0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8009aa4:	42a8      	cmp	r0, r5
 8009aa6:	d047      	beq.n	8009b38 <HAL_GPIO_Init+0x1b0>
 8009aa8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8009aac:	42a8      	cmp	r0, r5
 8009aae:	d045      	beq.n	8009b3c <HAL_GPIO_Init+0x1b4>
 8009ab0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8009ab4:	42a8      	cmp	r0, r5
 8009ab6:	d043      	beq.n	8009b40 <HAL_GPIO_Init+0x1b8>
 8009ab8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8009abc:	42a8      	cmp	r0, r5
 8009abe:	d041      	beq.n	8009b44 <HAL_GPIO_Init+0x1bc>
 8009ac0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8009ac4:	42a8      	cmp	r0, r5
 8009ac6:	d03f      	beq.n	8009b48 <HAL_GPIO_Init+0x1c0>
 8009ac8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8009acc:	42a8      	cmp	r0, r5
 8009ace:	d03d      	beq.n	8009b4c <HAL_GPIO_Init+0x1c4>
 8009ad0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8009ad4:	42a8      	cmp	r0, r5
 8009ad6:	bf14      	ite	ne
 8009ad8:	250a      	movne	r5, #10
 8009ada:	2509      	moveq	r5, #9
 8009adc:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009ae0:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009ae4:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009ae8:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8009aea:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 8009aee:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8009af0:	bf0c      	ite	eq
 8009af2:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8009af4:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009af6:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 8009afa:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8009afc:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 8009afe:	bf0c      	ite	eq
 8009b00:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8009b02:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009b04:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 8009b08:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8009b0a:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 8009b0e:	bf0c      	ite	eq
 8009b10:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8009b12:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009b14:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8009b16:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8009b1a:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 8009b1e:	bf54      	ite	pl
 8009b20:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8009b22:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8009b24:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 8009b28:	3301      	adds	r3, #1
 8009b2a:	e734      	b.n	8009996 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009b2c:	2500      	movs	r5, #0
 8009b2e:	e7d5      	b.n	8009adc <HAL_GPIO_Init+0x154>
 8009b30:	2501      	movs	r5, #1
 8009b32:	e7d3      	b.n	8009adc <HAL_GPIO_Init+0x154>
 8009b34:	2502      	movs	r5, #2
 8009b36:	e7d1      	b.n	8009adc <HAL_GPIO_Init+0x154>
 8009b38:	2503      	movs	r5, #3
 8009b3a:	e7cf      	b.n	8009adc <HAL_GPIO_Init+0x154>
 8009b3c:	2504      	movs	r5, #4
 8009b3e:	e7cd      	b.n	8009adc <HAL_GPIO_Init+0x154>
 8009b40:	2505      	movs	r5, #5
 8009b42:	e7cb      	b.n	8009adc <HAL_GPIO_Init+0x154>
 8009b44:	2506      	movs	r5, #6
 8009b46:	e7c9      	b.n	8009adc <HAL_GPIO_Init+0x154>
 8009b48:	2507      	movs	r5, #7
 8009b4a:	e7c7      	b.n	8009adc <HAL_GPIO_Init+0x154>
 8009b4c:	2508      	movs	r5, #8
 8009b4e:	e7c5      	b.n	8009adc <HAL_GPIO_Init+0x154>
 8009b50:	58020000 	.word	0x58020000
 8009b54:	58024400 	.word	0x58024400

08009b58 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8009b5c:	2200      	movs	r2, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8009b5e:	f04f 0a01 	mov.w	sl, #1
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8009b62:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8009b66:	f04f 0b03 	mov.w	fp, #3
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8009b6a:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while ((GPIO_Pin >> position) != 0x00U)
 8009b6e:	fa31 f302 	lsrs.w	r3, r1, r2
 8009b72:	d101      	bne.n	8009b78 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 8009b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 8009b78:	fa0a fc02 	lsl.w	ip, sl, r2
    if (iocurrent != 0x00U)
 8009b7c:	ea1c 0601 	ands.w	r6, ip, r1
 8009b80:	d070      	beq.n	8009c64 <HAL_GPIO_DeInit+0x10c>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8009b82:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8009b86:	f002 0703 	and.w	r7, r2, #3
 8009b8a:	f105 45b0 	add.w	r5, r5, #1476395008	@ 0x58000000
 8009b8e:	00bf      	lsls	r7, r7, #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 8009b90:	f8d5 3408 	ldr.w	r3, [r5, #1032]	@ 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8009b94:	fa08 f907 	lsl.w	r9, r8, r7
 8009b98:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8009b9c:	ea09 0e03 	and.w	lr, r9, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8009ba0:	4b3a      	ldr	r3, [pc, #232]	@ (8009c8c <HAL_GPIO_DeInit+0x134>)
 8009ba2:	4298      	cmp	r0, r3
 8009ba4:	d060      	beq.n	8009c68 <HAL_GPIO_DeInit+0x110>
 8009ba6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009baa:	4298      	cmp	r0, r3
 8009bac:	d05e      	beq.n	8009c6c <HAL_GPIO_DeInit+0x114>
 8009bae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009bb2:	4298      	cmp	r0, r3
 8009bb4:	d05c      	beq.n	8009c70 <HAL_GPIO_DeInit+0x118>
 8009bb6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009bba:	4298      	cmp	r0, r3
 8009bbc:	d05a      	beq.n	8009c74 <HAL_GPIO_DeInit+0x11c>
 8009bbe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009bc2:	4298      	cmp	r0, r3
 8009bc4:	d058      	beq.n	8009c78 <HAL_GPIO_DeInit+0x120>
 8009bc6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009bca:	4298      	cmp	r0, r3
 8009bcc:	d056      	beq.n	8009c7c <HAL_GPIO_DeInit+0x124>
 8009bce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009bd2:	4298      	cmp	r0, r3
 8009bd4:	d054      	beq.n	8009c80 <HAL_GPIO_DeInit+0x128>
 8009bd6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009bda:	4298      	cmp	r0, r3
 8009bdc:	d052      	beq.n	8009c84 <HAL_GPIO_DeInit+0x12c>
 8009bde:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009be2:	4298      	cmp	r0, r3
 8009be4:	d050      	beq.n	8009c88 <HAL_GPIO_DeInit+0x130>
 8009be6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009bea:	4298      	cmp	r0, r3
 8009bec:	bf0c      	ite	eq
 8009bee:	2309      	moveq	r3, #9
 8009bf0:	230a      	movne	r3, #10
 8009bf2:	40bb      	lsls	r3, r7
 8009bf4:	4573      	cmp	r3, lr
 8009bf6:	d117      	bne.n	8009c28 <HAL_GPIO_DeInit+0xd0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8009bf8:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8009bfc:	ea23 0306 	bic.w	r3, r3, r6
 8009c00:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8009c04:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8009c08:	ea23 0306 	bic.w	r3, r3, r6
 8009c0c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 8009c10:	6863      	ldr	r3, [r4, #4]
 8009c12:	ea23 0306 	bic.w	r3, r3, r6
 8009c16:	6063      	str	r3, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8009c18:	6823      	ldr	r3, [r4, #0]
 8009c1a:	ea23 0306 	bic.w	r3, r3, r6
 8009c1e:	6023      	str	r3, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8009c20:	68ab      	ldr	r3, [r5, #8]
 8009c22:	ea23 0309 	bic.w	r3, r3, r9
 8009c26:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8009c28:	0053      	lsls	r3, r2, #1
 8009c2a:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8009c2c:	08d6      	lsrs	r6, r2, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8009c2e:	fa0b f303 	lsl.w	r3, fp, r3
 8009c32:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8009c36:	431d      	orrs	r5, r3
 8009c38:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8009c3a:	f002 0507 	and.w	r5, r2, #7
 8009c3e:	6a37      	ldr	r7, [r6, #32]
 8009c40:	00ad      	lsls	r5, r5, #2
 8009c42:	fa08 f505 	lsl.w	r5, r8, r5
 8009c46:	ea27 0705 	bic.w	r7, r7, r5
 8009c4a:	6237      	str	r7, [r6, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009c4c:	68c5      	ldr	r5, [r0, #12]
 8009c4e:	ea25 0503 	bic.w	r5, r5, r3
 8009c52:	60c5      	str	r5, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8009c54:	6845      	ldr	r5, [r0, #4]
 8009c56:	ea25 050c 	bic.w	r5, r5, ip
 8009c5a:	6045      	str	r5, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009c5c:	6885      	ldr	r5, [r0, #8]
 8009c5e:	ea25 0303 	bic.w	r3, r5, r3
 8009c62:	6083      	str	r3, [r0, #8]
    position++;
 8009c64:	3201      	adds	r2, #1
 8009c66:	e782      	b.n	8009b6e <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8009c68:	2300      	movs	r3, #0
 8009c6a:	e7c2      	b.n	8009bf2 <HAL_GPIO_DeInit+0x9a>
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	e7c0      	b.n	8009bf2 <HAL_GPIO_DeInit+0x9a>
 8009c70:	2302      	movs	r3, #2
 8009c72:	e7be      	b.n	8009bf2 <HAL_GPIO_DeInit+0x9a>
 8009c74:	2303      	movs	r3, #3
 8009c76:	e7bc      	b.n	8009bf2 <HAL_GPIO_DeInit+0x9a>
 8009c78:	2304      	movs	r3, #4
 8009c7a:	e7ba      	b.n	8009bf2 <HAL_GPIO_DeInit+0x9a>
 8009c7c:	2305      	movs	r3, #5
 8009c7e:	e7b8      	b.n	8009bf2 <HAL_GPIO_DeInit+0x9a>
 8009c80:	2306      	movs	r3, #6
 8009c82:	e7b6      	b.n	8009bf2 <HAL_GPIO_DeInit+0x9a>
 8009c84:	2307      	movs	r3, #7
 8009c86:	e7b4      	b.n	8009bf2 <HAL_GPIO_DeInit+0x9a>
 8009c88:	2308      	movs	r3, #8
 8009c8a:	e7b2      	b.n	8009bf2 <HAL_GPIO_DeInit+0x9a>
 8009c8c:	58020000 	.word	0x58020000

08009c90 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009c90:	6903      	ldr	r3, [r0, #16]
 8009c92:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8009c94:	bf14      	ite	ne
 8009c96:	2001      	movne	r0, #1
 8009c98:	2000      	moveq	r0, #0
 8009c9a:	4770      	bx	lr

08009c9c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009c9c:	b10a      	cbz	r2, 8009ca2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009c9e:	6181      	str	r1, [r0, #24]
  }
}
 8009ca0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009ca2:	0409      	lsls	r1, r1, #16
 8009ca4:	e7fb      	b.n	8009c9e <HAL_GPIO_WritePin+0x2>

08009ca6 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009ca6:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009ca8:	ea01 0203 	and.w	r2, r1, r3
 8009cac:	ea21 0103 	bic.w	r1, r1, r3
 8009cb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009cb4:	6181      	str	r1, [r0, #24]
}
 8009cb6:	4770      	bx	lr

08009cb8 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8009cb8:	4b04      	ldr	r3, [pc, #16]	@ (8009ccc <HAL_HSEM_FastTake+0x14>)
 8009cba:	3020      	adds	r0, #32
 8009cbc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 8009cc0:	4b03      	ldr	r3, [pc, #12]	@ (8009cd0 <HAL_HSEM_FastTake+0x18>)
 8009cc2:	1ac0      	subs	r0, r0, r3
 8009cc4:	bf18      	it	ne
 8009cc6:	2001      	movne	r0, #1
 8009cc8:	4770      	bx	lr
 8009cca:	bf00      	nop
 8009ccc:	58026400 	.word	0x58026400
 8009cd0:	80000300 	.word	0x80000300

08009cd4 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8009cd4:	f441 7140 	orr.w	r1, r1, #768	@ 0x300
 8009cd8:	4b01      	ldr	r3, [pc, #4]	@ (8009ce0 <HAL_HSEM_Release+0xc>)
 8009cda:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 8009cde:	4770      	bx	lr
 8009ce0:	58026400 	.word	0x58026400

08009ce4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009ce4:	6803      	ldr	r3, [r0, #0]
 8009ce6:	699a      	ldr	r2, [r3, #24]
 8009ce8:	0791      	lsls	r1, r2, #30
 8009cea:	d501      	bpl.n	8009cf0 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009cec:	2200      	movs	r2, #0
 8009cee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009cf0:	699a      	ldr	r2, [r3, #24]
 8009cf2:	07d2      	lsls	r2, r2, #31
 8009cf4:	d403      	bmi.n	8009cfe <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009cf6:	699a      	ldr	r2, [r3, #24]
 8009cf8:	f042 0201 	orr.w	r2, r2, #1
 8009cfc:	619a      	str	r2, [r3, #24]
  }
}
 8009cfe:	4770      	bx	lr

08009d00 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009d00:	b530      	push	{r4, r5, lr}
 8009d02:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d04:	f3c1 0109 	ubfx	r1, r1, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009d08:	6804      	ldr	r4, [r0, #0]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d0a:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8009d0c:	6860      	ldr	r0, [r4, #4]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8009d12:	4a05      	ldr	r2, [pc, #20]	@ (8009d28 <I2C_TransferConfig+0x28>)
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d14:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8009d16:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8009d1e:	ea20 0002 	bic.w	r0, r0, r2
 8009d22:	4303      	orrs	r3, r0
 8009d24:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009d26:	bd30      	pop	{r4, r5, pc}
 8009d28:	03ff63ff 	.word	0x03ff63ff

08009d2c <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 8009d2c:	6803      	ldr	r3, [r0, #0]
{
 8009d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8009d32:	699c      	ldr	r4, [r3, #24]
{
 8009d34:	4605      	mov	r5, r0
 8009d36:	460f      	mov	r7, r1
 8009d38:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009d3a:	f014 0410 	ands.w	r4, r4, #16
 8009d3e:	d06f      	beq.n	8009e20 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 8009d40:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d42:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8009d44:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d46:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009d48:	682b      	ldr	r3, [r5, #0]
 8009d4a:	699a      	ldr	r2, [r3, #24]
 8009d4c:	0690      	lsls	r0, r2, #26
 8009d4e:	d461      	bmi.n	8009e14 <I2C_IsErrorOccurred+0xe8>
 8009d50:	f1b8 0f00 	cmp.w	r8, #0
 8009d54:	d035      	beq.n	8009dc2 <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 8009d56:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 8009d5a:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8009d5c:	682e      	ldr	r6, [r5, #0]
 8009d5e:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009d60:	05d9      	lsls	r1, r3, #23
 8009d62:	d505      	bpl.n	8009d70 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009d64:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8009d68:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8009d6c:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009d6e:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009d70:	055a      	lsls	r2, r3, #21
 8009d72:	d505      	bpl.n	8009d80 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009d74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8009d78:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8009d7c:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009d7e:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009d80:	059b      	lsls	r3, r3, #22
 8009d82:	d54f      	bpl.n	8009e24 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009d84:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8009d88:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009d8c:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 8009d8e:	4628      	mov	r0, r5
 8009d90:	f7ff ffa8 	bl	8009ce4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8009d94:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 8009d96:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8009d98:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8009d9c:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8009da0:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8009da4:	f023 0301 	bic.w	r3, r3, #1
 8009da8:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 8009daa:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8009dac:	4323      	orrs	r3, r4
 8009dae:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009db0:	2320      	movs	r3, #32
 8009db2:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009db6:	2300      	movs	r3, #0
 8009db8:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8009dbc:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 8009dc0:	e032      	b.n	8009e28 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 8009dc2:	1c7a      	adds	r2, r7, #1
 8009dc4:	d0c1      	beq.n	8009d4a <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009dc6:	f7fe ff59 	bl	8008c7c <HAL_GetTick>
 8009dca:	1b80      	subs	r0, r0, r6
 8009dcc:	42b8      	cmp	r0, r7
 8009dce:	d801      	bhi.n	8009dd4 <I2C_IsErrorOccurred+0xa8>
 8009dd0:	2f00      	cmp	r7, #0
 8009dd2:	d1b9      	bne.n	8009d48 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009dd4:	682b      	ldr	r3, [r5, #0]
 8009dd6:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8009dd8:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009ddc:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8009dde:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009de0:	0400      	lsls	r0, r0, #16
 8009de2:	d50a      	bpl.n	8009dfa <I2C_IsErrorOccurred+0xce>
 8009de4:	0449      	lsls	r1, r1, #17
 8009de6:	d408      	bmi.n	8009dfa <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 8009de8:	2a20      	cmp	r2, #32
 8009dea:	d006      	beq.n	8009dfa <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009dec:	685a      	ldr	r2, [r3, #4]
 8009dee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009df2:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8009df4:	f7fe ff42 	bl	8008c7c <HAL_GetTick>
 8009df8:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009dfa:	682b      	ldr	r3, [r5, #0]
 8009dfc:	699b      	ldr	r3, [r3, #24]
 8009dfe:	069b      	lsls	r3, r3, #26
 8009e00:	d4a2      	bmi.n	8009d48 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009e02:	f7fe ff3b 	bl	8008c7c <HAL_GetTick>
 8009e06:	1b80      	subs	r0, r0, r6
 8009e08:	2819      	cmp	r0, #25
 8009e0a:	d9f6      	bls.n	8009dfa <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009e0c:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8009e0e:	f04f 0801 	mov.w	r8, #1
 8009e12:	e799      	b.n	8009d48 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8009e14:	f1b8 0f00 	cmp.w	r8, #0
 8009e18:	d19d      	bne.n	8009d56 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e1a:	2220      	movs	r2, #32
 8009e1c:	61da      	str	r2, [r3, #28]
 8009e1e:	e79a      	b.n	8009d56 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 8009e20:	4620      	mov	r0, r4
 8009e22:	e79b      	b.n	8009d5c <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 8009e24:	2800      	cmp	r0, #0
 8009e26:	d1b2      	bne.n	8009d8e <I2C_IsErrorOccurred+0x62>
}
 8009e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009e2c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8009e2c:	b570      	push	{r4, r5, r6, lr}
 8009e2e:	4604      	mov	r4, r0
 8009e30:	460d      	mov	r5, r1
 8009e32:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009e34:	6823      	ldr	r3, [r4, #0]
 8009e36:	699b      	ldr	r3, [r3, #24]
 8009e38:	079b      	lsls	r3, r3, #30
 8009e3a:	d501      	bpl.n	8009e40 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8009e3c:	2000      	movs	r0, #0
 8009e3e:	e01f      	b.n	8009e80 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e40:	4632      	mov	r2, r6
 8009e42:	4629      	mov	r1, r5
 8009e44:	4620      	mov	r0, r4
 8009e46:	f7ff ff71 	bl	8009d2c <I2C_IsErrorOccurred>
 8009e4a:	b9c0      	cbnz	r0, 8009e7e <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8009e4c:	1c6a      	adds	r2, r5, #1
 8009e4e:	d0f1      	beq.n	8009e34 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e50:	f7fe ff14 	bl	8008c7c <HAL_GetTick>
 8009e54:	1b80      	subs	r0, r0, r6
 8009e56:	42a8      	cmp	r0, r5
 8009e58:	d801      	bhi.n	8009e5e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8009e5a:	2d00      	cmp	r5, #0
 8009e5c:	d1ea      	bne.n	8009e34 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009e5e:	6823      	ldr	r3, [r4, #0]
 8009e60:	699b      	ldr	r3, [r3, #24]
 8009e62:	f013 0302 	ands.w	r3, r3, #2
 8009e66:	d1e5      	bne.n	8009e34 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009e68:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 8009e6a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009e6e:	f042 0220 	orr.w	r2, r2, #32
 8009e72:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009e74:	2220      	movs	r2, #32
 8009e76:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e7a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8009e7e:	2001      	movs	r0, #1
}
 8009e80:	bd70      	pop	{r4, r5, r6, pc}

08009e82 <I2C_WaitOnFlagUntilTimeout>:
{
 8009e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e86:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009e8a:	4604      	mov	r4, r0
 8009e8c:	460f      	mov	r7, r1
 8009e8e:	4616      	mov	r6, r2
 8009e90:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009e92:	6823      	ldr	r3, [r4, #0]
 8009e94:	699b      	ldr	r3, [r3, #24]
 8009e96:	ea37 0303 	bics.w	r3, r7, r3
 8009e9a:	bf0c      	ite	eq
 8009e9c:	2301      	moveq	r3, #1
 8009e9e:	2300      	movne	r3, #0
 8009ea0:	42b3      	cmp	r3, r6
 8009ea2:	d001      	beq.n	8009ea8 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8009ea4:	2000      	movs	r0, #0
 8009ea6:	e025      	b.n	8009ef4 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ea8:	4642      	mov	r2, r8
 8009eaa:	4629      	mov	r1, r5
 8009eac:	4620      	mov	r0, r4
 8009eae:	f7ff ff3d 	bl	8009d2c <I2C_IsErrorOccurred>
 8009eb2:	b9f0      	cbnz	r0, 8009ef2 <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 8009eb4:	1c6b      	adds	r3, r5, #1
 8009eb6:	d0ec      	beq.n	8009e92 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009eb8:	f7fe fee0 	bl	8008c7c <HAL_GetTick>
 8009ebc:	eba0 0008 	sub.w	r0, r0, r8
 8009ec0:	42a8      	cmp	r0, r5
 8009ec2:	d801      	bhi.n	8009ec8 <I2C_WaitOnFlagUntilTimeout+0x46>
 8009ec4:	2d00      	cmp	r5, #0
 8009ec6:	d1e4      	bne.n	8009e92 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009ec8:	6823      	ldr	r3, [r4, #0]
 8009eca:	699b      	ldr	r3, [r3, #24]
 8009ecc:	ea37 0303 	bics.w	r3, r7, r3
 8009ed0:	bf0c      	ite	eq
 8009ed2:	2301      	moveq	r3, #1
 8009ed4:	2300      	movne	r3, #0
 8009ed6:	42b3      	cmp	r3, r6
 8009ed8:	d1db      	bne.n	8009e92 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009eda:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009edc:	f043 0320 	orr.w	r3, r3, #32
 8009ee0:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009ee2:	2320      	movs	r3, #32
 8009ee4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 8009eee:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8009ef2:	2001      	movs	r0, #1
}
 8009ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009ef8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8009ef8:	b570      	push	{r4, r5, r6, lr}
 8009efa:	4604      	mov	r4, r0
 8009efc:	460d      	mov	r5, r1
 8009efe:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009f00:	6823      	ldr	r3, [r4, #0]
 8009f02:	699b      	ldr	r3, [r3, #24]
 8009f04:	069b      	lsls	r3, r3, #26
 8009f06:	d501      	bpl.n	8009f0c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8009f08:	2000      	movs	r0, #0
 8009f0a:	e01d      	b.n	8009f48 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f0c:	4632      	mov	r2, r6
 8009f0e:	4629      	mov	r1, r5
 8009f10:	4620      	mov	r0, r4
 8009f12:	f7ff ff0b 	bl	8009d2c <I2C_IsErrorOccurred>
 8009f16:	b9b0      	cbnz	r0, 8009f46 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f18:	f7fe feb0 	bl	8008c7c <HAL_GetTick>
 8009f1c:	1b80      	subs	r0, r0, r6
 8009f1e:	42a8      	cmp	r0, r5
 8009f20:	d801      	bhi.n	8009f26 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8009f22:	2d00      	cmp	r5, #0
 8009f24:	d1ec      	bne.n	8009f00 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009f26:	6823      	ldr	r3, [r4, #0]
 8009f28:	699b      	ldr	r3, [r3, #24]
 8009f2a:	f013 0320 	ands.w	r3, r3, #32
 8009f2e:	d1e7      	bne.n	8009f00 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009f30:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8009f32:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009f36:	f042 0220 	orr.w	r2, r2, #32
 8009f3a:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009f3c:	2220      	movs	r2, #32
 8009f3e:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f42:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8009f46:	2001      	movs	r0, #1
}
 8009f48:	bd70      	pop	{r4, r5, r6, pc}

08009f4a <HAL_I2C_MspInit>:
}
 8009f4a:	4770      	bx	lr

08009f4c <HAL_I2C_Init>:
{
 8009f4c:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8009f4e:	4604      	mov	r4, r0
 8009f50:	2800      	cmp	r0, #0
 8009f52:	d04e      	beq.n	8009ff2 <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009f54:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8009f58:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8009f5c:	b91b      	cbnz	r3, 8009f66 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8009f5e:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8009f62:	f7ff fff2 	bl	8009f4a <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8009f66:	2324      	movs	r3, #36	@ 0x24
 8009f68:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8009f6c:	6823      	ldr	r3, [r4, #0]
 8009f6e:	681a      	ldr	r2, [r3, #0]
 8009f70:	f022 0201 	bic.w	r2, r2, #1
 8009f74:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009f76:	6862      	ldr	r2, [r4, #4]
 8009f78:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009f7c:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009f7e:	689a      	ldr	r2, [r3, #8]
 8009f80:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009f84:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009f86:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009f8a:	2901      	cmp	r1, #1
 8009f8c:	d106      	bne.n	8009f9c <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009f8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009f92:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009f94:	685a      	ldr	r2, [r3, #4]
 8009f96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009f9a:	e007      	b.n	8009fac <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009f9c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009fa0:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009fa2:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009fa4:	d1f6      	bne.n	8009f94 <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009fa6:	685a      	ldr	r2, [r3, #4]
 8009fa8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009fac:	605a      	str	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009fae:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009fb0:	685a      	ldr	r2, [r3, #4]
 8009fb2:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8009fb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009fba:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009fbc:	68da      	ldr	r2, [r3, #12]
 8009fbe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009fc2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009fc4:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8009fc8:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009fca:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009fcc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009fd0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009fd2:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8009fd6:	430a      	orrs	r2, r1
 8009fd8:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	f042 0201 	orr.w	r2, r2, #1
 8009fe0:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8009fe2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009fe4:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009fe6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009fea:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009fec:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8009ff0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009ff2:	2001      	movs	r0, #1
 8009ff4:	e7fc      	b.n	8009ff0 <HAL_I2C_Init+0xa4>

08009ff6 <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 8009ff6:	4770      	bx	lr

08009ff8 <HAL_I2C_DeInit>:
{
 8009ff8:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8009ffa:	4604      	mov	r4, r0
 8009ffc:	b198      	cbz	r0, 800a026 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8009ffe:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800a000:	2324      	movs	r3, #36	@ 0x24
 800a002:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800a006:	6813      	ldr	r3, [r2, #0]
 800a008:	f023 0301 	bic.w	r3, r3, #1
 800a00c:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800a00e:	f7ff fff2 	bl	8009ff6 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a012:	2000      	movs	r0, #0
 800a014:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 800a016:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 800a01a:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a01e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a020:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 800a024:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a026:	2001      	movs	r0, #1
 800a028:	e7fc      	b.n	800a024 <HAL_I2C_DeInit+0x2c>
	...

0800a02c <HAL_I2C_Mem_Write>:
{
 800a02c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a030:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a032:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800a036:	4604      	mov	r4, r0
 800a038:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a03a:	2b20      	cmp	r3, #32
{
 800a03c:	4616      	mov	r6, r2
 800a03e:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800a042:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a046:	f040 80c6 	bne.w	800a1d6 <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 800a04a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a04c:	b113      	cbz	r3, 800a054 <HAL_I2C_Mem_Write+0x28>
 800a04e:	f1ba 0f00 	cmp.w	sl, #0
 800a052:	d106      	bne.n	800a062 <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a054:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a058:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800a05a:	2001      	movs	r0, #1
}
 800a05c:	b003      	add	sp, #12
 800a05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800a062:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800a066:	2b01      	cmp	r3, #1
 800a068:	f000 80b5 	beq.w	800a1d6 <HAL_I2C_Mem_Write+0x1aa>
 800a06c:	f04f 0b01 	mov.w	fp, #1
 800a070:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800a074:	f7fe fe02 	bl	8008c7c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a078:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800a07a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a07c:	9000      	str	r0, [sp, #0]
 800a07e:	465a      	mov	r2, fp
 800a080:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a084:	4620      	mov	r0, r4
 800a086:	f7ff fefc 	bl	8009e82 <I2C_WaitOnFlagUntilTimeout>
 800a08a:	2800      	cmp	r0, #0
 800a08c:	d1e5      	bne.n	800a05a <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a08e:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 800a090:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a092:	fa5f f289 	uxtb.w	r2, r9
 800a096:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a098:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a09c:	2340      	movs	r3, #64	@ 0x40
 800a09e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 800a0a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a0a4:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a0a6:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800a0a8:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a0aa:	4b4c      	ldr	r3, [pc, #304]	@ (800a1dc <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 800a0ac:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a0b0:	9300      	str	r3, [sp, #0]
 800a0b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a0b6:	f7ff fe23 	bl	8009d00 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0ba:	462a      	mov	r2, r5
 800a0bc:	4641      	mov	r1, r8
 800a0be:	4620      	mov	r0, r4
 800a0c0:	f7ff feb4 	bl	8009e2c <I2C_WaitOnTXISFlagUntilTimeout>
 800a0c4:	bb18      	cbnz	r0, 800a10e <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a0c6:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a0ca:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a0cc:	d115      	bne.n	800a0fa <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a0ce:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	2180      	movs	r1, #128	@ 0x80
 800a0d4:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a0d6:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a0d8:	4643      	mov	r3, r8
 800a0da:	9500      	str	r5, [sp, #0]
 800a0dc:	f7ff fed1 	bl	8009e82 <I2C_WaitOnFlagUntilTimeout>
 800a0e0:	b9a8      	cbnz	r0, 800a10e <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a0e2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800a0e4:	b29b      	uxth	r3, r3
 800a0e6:	2bff      	cmp	r3, #255	@ 0xff
 800a0e8:	d815      	bhi.n	800a116 <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800a0ea:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a0ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 800a0f0:	b292      	uxth	r2, r2
 800a0f2:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a0f4:	b2d2      	uxtb	r2, r2
 800a0f6:	9000      	str	r0, [sp, #0]
 800a0f8:	e012      	b.n	800a120 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a0fa:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0fc:	4641      	mov	r1, r8
 800a0fe:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a100:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a102:	462a      	mov	r2, r5
 800a104:	f7ff fe92 	bl	8009e2c <I2C_WaitOnTXISFlagUntilTimeout>
 800a108:	b908      	cbnz	r0, 800a10e <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a10a:	6823      	ldr	r3, [r4, #0]
 800a10c:	e7df      	b.n	800a0ce <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 800a10e:	2300      	movs	r3, #0
 800a110:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800a114:	e7a1      	b.n	800a05a <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a116:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a118:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a11c:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a11e:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a120:	4639      	mov	r1, r7
 800a122:	4620      	mov	r0, r4
 800a124:	f7ff fdec 	bl	8009d00 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a128:	462a      	mov	r2, r5
 800a12a:	4641      	mov	r1, r8
 800a12c:	4620      	mov	r0, r4
 800a12e:	f7ff fe7d 	bl	8009e2c <I2C_WaitOnTXISFlagUntilTimeout>
 800a132:	2800      	cmp	r0, #0
 800a134:	d191      	bne.n	800a05a <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a136:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a138:	6822      	ldr	r2, [r4, #0]
 800a13a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800a13e:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800a140:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800a142:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800a144:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800a146:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800a148:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800a14a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800a14c:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800a14e:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a150:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800a152:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a154:	b29b      	uxth	r3, r3
 800a156:	b1b3      	cbz	r3, 800a186 <HAL_I2C_Mem_Write+0x15a>
 800a158:	b9aa      	cbnz	r2, 800a186 <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a15a:	4643      	mov	r3, r8
 800a15c:	2180      	movs	r1, #128	@ 0x80
 800a15e:	4620      	mov	r0, r4
 800a160:	9500      	str	r5, [sp, #0]
 800a162:	f7ff fe8e 	bl	8009e82 <I2C_WaitOnFlagUntilTimeout>
 800a166:	2800      	cmp	r0, #0
 800a168:	f47f af77 	bne.w	800a05a <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a16c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800a16e:	b29b      	uxth	r3, r3
 800a170:	2bff      	cmp	r3, #255	@ 0xff
 800a172:	d928      	bls.n	800a1c6 <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a174:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a176:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a17a:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a17c:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a17e:	4639      	mov	r1, r7
 800a180:	4620      	mov	r0, r4
 800a182:	f7ff fdbd 	bl	8009d00 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800a186:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800a188:	b29b      	uxth	r3, r3
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d1cc      	bne.n	800a128 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a18e:	462a      	mov	r2, r5
 800a190:	4641      	mov	r1, r8
 800a192:	4620      	mov	r0, r4
 800a194:	f7ff feb0 	bl	8009ef8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a198:	2800      	cmp	r0, #0
 800a19a:	f47f af5e 	bne.w	800a05a <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a19e:	6823      	ldr	r3, [r4, #0]
 800a1a0:	2120      	movs	r1, #32
 800a1a2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800a1a4:	685a      	ldr	r2, [r3, #4]
 800a1a6:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 800a1aa:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 800a1ae:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 800a1b2:	f022 0201 	bic.w	r2, r2, #1
 800a1b6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a1b8:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800a1bc:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a1c0:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800a1c4:	e74a      	b.n	800a05c <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800a1c6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a1c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800a1cc:	b292      	uxth	r2, r2
 800a1ce:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a1d0:	b2d2      	uxtb	r2, r2
 800a1d2:	9000      	str	r0, [sp, #0]
 800a1d4:	e7d3      	b.n	800a17e <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 800a1d6:	2002      	movs	r0, #2
 800a1d8:	e740      	b.n	800a05c <HAL_I2C_Mem_Write+0x30>
 800a1da:	bf00      	nop
 800a1dc:	80002000 	.word	0x80002000

0800a1e0 <HAL_I2C_Mem_Read>:
{
 800a1e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1e4:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1e6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800a1ea:	4604      	mov	r4, r0
 800a1ec:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1ee:	2b20      	cmp	r3, #32
{
 800a1f0:	4616      	mov	r6, r2
 800a1f2:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800a1f6:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1fa:	f040 80c9 	bne.w	800a390 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 800a1fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a200:	b113      	cbz	r3, 800a208 <HAL_I2C_Mem_Read+0x28>
 800a202:	f1ba 0f00 	cmp.w	sl, #0
 800a206:	d106      	bne.n	800a216 <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a208:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a20c:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800a20e:	2001      	movs	r0, #1
}
 800a210:	b003      	add	sp, #12
 800a212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800a216:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	f000 80b8 	beq.w	800a390 <HAL_I2C_Mem_Read+0x1b0>
 800a220:	f04f 0b01 	mov.w	fp, #1
 800a224:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800a228:	f7fe fd28 	bl	8008c7c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a22c:	2319      	movs	r3, #25
 800a22e:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800a230:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a232:	465a      	mov	r2, fp
 800a234:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a238:	4620      	mov	r0, r4
 800a23a:	f7ff fe22 	bl	8009e82 <I2C_WaitOnFlagUntilTimeout>
 800a23e:	4603      	mov	r3, r0
 800a240:	2800      	cmp	r0, #0
 800a242:	d1e4      	bne.n	800a20e <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a244:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 800a246:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a248:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a24a:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a24e:	2240      	movs	r2, #64	@ 0x40
 800a250:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 800a254:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a256:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a258:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800a25a:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a25c:	4a4d      	ldr	r2, [pc, #308]	@ (800a394 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 800a25e:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a262:	9200      	str	r2, [sp, #0]
 800a264:	fa5f f289 	uxtb.w	r2, r9
 800a268:	f7ff fd4a 	bl	8009d00 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a26c:	462a      	mov	r2, r5
 800a26e:	4641      	mov	r1, r8
 800a270:	4620      	mov	r0, r4
 800a272:	f7ff fddb 	bl	8009e2c <I2C_WaitOnTXISFlagUntilTimeout>
 800a276:	bb20      	cbnz	r0, 800a2c2 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a278:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a27c:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a27e:	d116      	bne.n	800a2ae <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a280:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a282:	2200      	movs	r2, #0
 800a284:	2140      	movs	r1, #64	@ 0x40
 800a286:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a288:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a28a:	4643      	mov	r3, r8
 800a28c:	9500      	str	r5, [sp, #0]
 800a28e:	f7ff fdf8 	bl	8009e82 <I2C_WaitOnFlagUntilTimeout>
 800a292:	b9b0      	cbnz	r0, 800a2c2 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a294:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800a296:	b29b      	uxth	r3, r3
 800a298:	2bff      	cmp	r3, #255	@ 0xff
 800a29a:	4b3f      	ldr	r3, [pc, #252]	@ (800a398 <HAL_I2C_Mem_Read+0x1b8>)
 800a29c:	d815      	bhi.n	800a2ca <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800a29e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800a2a0:	b292      	uxth	r2, r2
 800a2a2:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a2a4:	b2d2      	uxtb	r2, r2
 800a2a6:	9300      	str	r3, [sp, #0]
 800a2a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a2ac:	e012      	b.n	800a2d4 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a2ae:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2b0:	4641      	mov	r1, r8
 800a2b2:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a2b4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2b6:	462a      	mov	r2, r5
 800a2b8:	f7ff fdb8 	bl	8009e2c <I2C_WaitOnTXISFlagUntilTimeout>
 800a2bc:	b908      	cbnz	r0, 800a2c2 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a2be:	6823      	ldr	r3, [r4, #0]
 800a2c0:	e7de      	b.n	800a280 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800a2c8:	e7a1      	b.n	800a20e <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a2ca:	22ff      	movs	r2, #255	@ 0xff
 800a2cc:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a2ce:	9300      	str	r3, [sp, #0]
 800a2d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a2d4:	4639      	mov	r1, r7
 800a2d6:	4620      	mov	r0, r4
 800a2d8:	f7ff fd12 	bl	8009d00 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a2dc:	4643      	mov	r3, r8
 800a2de:	2200      	movs	r2, #0
 800a2e0:	2104      	movs	r1, #4
 800a2e2:	4620      	mov	r0, r4
 800a2e4:	9500      	str	r5, [sp, #0]
 800a2e6:	f7ff fdcc 	bl	8009e82 <I2C_WaitOnFlagUntilTimeout>
 800a2ea:	2800      	cmp	r0, #0
 800a2ec:	d18f      	bne.n	800a20e <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a2ee:	6823      	ldr	r3, [r4, #0]
 800a2f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a2f2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a2f4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800a2f6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800a2f8:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800a2fa:	3301      	adds	r3, #1
      hi2c->XferSize--;
 800a2fc:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800a2fe:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800a300:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800a302:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800a304:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800a306:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800a308:	b29b      	uxth	r3, r3
 800a30a:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a30c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800a30e:	b29b      	uxth	r3, r3
 800a310:	b1b3      	cbz	r3, 800a340 <HAL_I2C_Mem_Read+0x160>
 800a312:	b9aa      	cbnz	r2, 800a340 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a314:	4643      	mov	r3, r8
 800a316:	2180      	movs	r1, #128	@ 0x80
 800a318:	4620      	mov	r0, r4
 800a31a:	9500      	str	r5, [sp, #0]
 800a31c:	f7ff fdb1 	bl	8009e82 <I2C_WaitOnFlagUntilTimeout>
 800a320:	2800      	cmp	r0, #0
 800a322:	f47f af74 	bne.w	800a20e <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a326:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800a328:	b29b      	uxth	r3, r3
 800a32a:	2bff      	cmp	r3, #255	@ 0xff
 800a32c:	d928      	bls.n	800a380 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a32e:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a330:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a334:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a336:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a338:	4639      	mov	r1, r7
 800a33a:	4620      	mov	r0, r4
 800a33c:	f7ff fce0 	bl	8009d00 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800a340:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800a342:	b29b      	uxth	r3, r3
 800a344:	2b00      	cmp	r3, #0
 800a346:	d1c9      	bne.n	800a2dc <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a348:	462a      	mov	r2, r5
 800a34a:	4641      	mov	r1, r8
 800a34c:	4620      	mov	r0, r4
 800a34e:	f7ff fdd3 	bl	8009ef8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a352:	2800      	cmp	r0, #0
 800a354:	f47f af5b 	bne.w	800a20e <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a358:	6823      	ldr	r3, [r4, #0]
 800a35a:	2120      	movs	r1, #32
 800a35c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800a35e:	685a      	ldr	r2, [r3, #4]
 800a360:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 800a364:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 800a368:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 800a36c:	f022 0201 	bic.w	r2, r2, #1
 800a370:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a372:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800a376:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a37a:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800a37e:	e747      	b.n	800a210 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800a380:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a382:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800a386:	b292      	uxth	r2, r2
 800a388:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a38a:	b2d2      	uxtb	r2, r2
 800a38c:	9000      	str	r0, [sp, #0]
 800a38e:	e7d3      	b.n	800a338 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 800a390:	2002      	movs	r0, #2
 800a392:	e73d      	b.n	800a210 <HAL_I2C_Mem_Read+0x30>
 800a394:	80002000 	.word	0x80002000
 800a398:	80002400 	.word	0x80002400

0800a39c <HAL_I2C_GetState>:
  return hi2c->State;
 800a39c:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 800a3a0:	4770      	bx	lr

0800a3a2 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800a3a2:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 800a3a4:	4770      	bx	lr

0800a3a6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a3a6:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a3a8:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 800a3ac:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a3ae:	2a20      	cmp	r2, #32
 800a3b0:	b2d4      	uxtb	r4, r2
 800a3b2:	d11c      	bne.n	800a3ee <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a3b4:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800a3b8:	2a01      	cmp	r2, #1
 800a3ba:	d018      	beq.n	800a3ee <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a3bc:	2224      	movs	r2, #36	@ 0x24
 800a3be:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a3c2:	6802      	ldr	r2, [r0, #0]
 800a3c4:	6810      	ldr	r0, [r2, #0]
 800a3c6:	f020 0001 	bic.w	r0, r0, #1
 800a3ca:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a3cc:	6810      	ldr	r0, [r2, #0]
 800a3ce:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 800a3d2:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a3d4:	6810      	ldr	r0, [r2, #0]
 800a3d6:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a3d8:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 800a3da:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800a3dc:	6811      	ldr	r1, [r2, #0]
 800a3de:	f041 0101 	orr.w	r1, r1, #1
 800a3e2:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800a3e4:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800a3e8:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800a3ec:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 800a3ee:	2002      	movs	r0, #2
 800a3f0:	e7fc      	b.n	800a3ec <HAL_I2CEx_ConfigAnalogFilter+0x46>

0800a3f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a3f2:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a3f4:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 800a3f8:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a3fa:	2a20      	cmp	r2, #32
 800a3fc:	b2d4      	uxtb	r4, r2
 800a3fe:	d11b      	bne.n	800a438 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a400:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800a404:	2a01      	cmp	r2, #1
 800a406:	d017      	beq.n	800a438 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a408:	2224      	movs	r2, #36	@ 0x24
 800a40a:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a40e:	6802      	ldr	r2, [r0, #0]
 800a410:	6810      	ldr	r0, [r2, #0]
 800a412:	f020 0001 	bic.w	r0, r0, #1
 800a416:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a418:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a41a:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a41e:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a422:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 800a424:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800a426:	6811      	ldr	r1, [r2, #0]
 800a428:	f041 0101 	orr.w	r1, r1, #1
 800a42c:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800a42e:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800a432:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800a436:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 800a438:	2002      	movs	r0, #2
 800a43a:	e7fc      	b.n	800a436 <HAL_I2CEx_ConfigDigitalFilter+0x44>

0800a43c <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800a43c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 800a43e:	2401      	movs	r4, #1
 800a440:	7807      	ldrb	r7, [r0, #0]
  p = 0;
 800a442:	2500      	movs	r5, #0
 800a444:	194e      	adds	r6, r1, r5
 800a446:	443d      	add	r5, r7
 800a448:	194f      	adds	r7, r1, r5
    if ((p + i) > 256UL)
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 800a44a:	42be      	cmp	r6, r7
 800a44c:	d112      	bne.n	800a474 <JPEG_Bits_To_SizeCodes+0x38>
  for (l = 0; l < 16UL; l++)
 800a44e:	2c10      	cmp	r4, #16
 800a450:	d108      	bne.n	800a464 <JPEG_Bits_To_SizeCodes+0x28>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 800a452:	2400      	movs	r4, #0
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800a454:	2601      	movs	r6, #1
  Huffsize[p] = 0;
 800a456:	554c      	strb	r4, [r1, r5]
  *LastK = p;
 800a458:	601d      	str	r5, [r3, #0]
  p = 0;
 800a45a:	4623      	mov	r3, r4
  si = Huffsize[0];
 800a45c:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 800a45e:	5cc8      	ldrb	r0, [r1, r3]
 800a460:	b9d8      	cbnz	r0, 800a49a <JPEG_Bits_To_SizeCodes+0x5e>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 800a462:	bdf0      	pop	{r4, r5, r6, r7, pc}
    i = (uint32_t)Bits[l];
 800a464:	5d07      	ldrb	r7, [r0, r4]
    if ((p + i) > 256UL)
 800a466:	3401      	adds	r4, #1
 800a468:	19ee      	adds	r6, r5, r7
 800a46a:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 800a46e:	d9e9      	bls.n	800a444 <JPEG_Bits_To_SizeCodes+0x8>
      return HAL_ERROR;
 800a470:	2001      	movs	r0, #1
 800a472:	e7f6      	b.n	800a462 <JPEG_Bits_To_SizeCodes+0x26>
      Huffsize[p] = (uint8_t) l + 1U;
 800a474:	f806 4b01 	strb.w	r4, [r6], #1
      i--;
 800a478:	e7e7      	b.n	800a44a <JPEG_Bits_To_SizeCodes+0xe>
      Huffcode[p] = code;
 800a47a:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
      p++;
 800a47e:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 800a480:	5cc8      	ldrb	r0, [r1, r3]
 800a482:	19dc      	adds	r4, r3, r7
 800a484:	42a8      	cmp	r0, r5
 800a486:	d0f8      	beq.n	800a47a <JPEG_Bits_To_SizeCodes+0x3e>
    if(si > 31UL)
 800a488:	2d1f      	cmp	r5, #31
 800a48a:	d8f1      	bhi.n	800a470 <JPEG_Bits_To_SizeCodes+0x34>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800a48c:	fa06 f005 	lsl.w	r0, r6, r5
 800a490:	42a0      	cmp	r0, r4
 800a492:	d9ed      	bls.n	800a470 <JPEG_Bits_To_SizeCodes+0x34>
    code <<= 1;
 800a494:	0064      	lsls	r4, r4, #1
    si++;
 800a496:	3501      	adds	r5, #1
 800a498:	e7e1      	b.n	800a45e <JPEG_Bits_To_SizeCodes+0x22>
 800a49a:	1ae7      	subs	r7, r4, r3
 800a49c:	e7f0      	b.n	800a480 <JPEG_Bits_To_SizeCodes+0x44>

0800a49e <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800a49e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4a0:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 800a4a4:	460d      	mov	r5, r1
 800a4a6:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800a4a8:	ab01      	add	r3, sp, #4
 800a4aa:	aa43      	add	r2, sp, #268	@ 0x10c
 800a4ac:	a902      	add	r1, sp, #8
 800a4ae:	f7ff ffc5 	bl	800a43c <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800a4b2:	b938      	cbnz	r0, 800a4c4 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>
 800a4b4:	9e01      	ldr	r6, [sp, #4]
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	f104 010f 	add.w	r1, r4, #15
 800a4bc:	360f      	adds	r6, #15
 800a4be:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 800a4c0:	42a1      	cmp	r1, r4
 800a4c2:	d102      	bne.n	800a4ca <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2c>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800a4c4:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 800a4c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 800a4ca:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800a4ce:	2e0b      	cmp	r6, #11
 800a4d0:	d80a      	bhi.n	800a4e8 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800a4d2:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800a4d6:	f852 cb04 	ldr.w	ip, [r2], #4
 800a4da:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800a4de:	f813 7b01 	ldrb.w	r7, [r3], #1
 800a4e2:	3f01      	subs	r7, #1
 800a4e4:	55af      	strb	r7, [r5, r6]
      k++;
 800a4e6:	e7eb      	b.n	800a4c0 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x22>
      return HAL_ERROR; /* Huffman Table overflow error*/
 800a4e8:	2001      	movs	r0, #1
 800a4ea:	e7eb      	b.n	800a4c4 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>

0800a4ec <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	4608      	mov	r0, r1
 800a4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800a4f2:	681c      	ldr	r4, [r3, #0]
{
 800a4f4:	b091      	sub	sp, #68	@ 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800a4f6:	f504 63f8 	add.w	r3, r4, #1984	@ 0x7c0
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d125      	bne.n	800a54a <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800a4fe:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800a502:	a901      	add	r1, sp, #4
 800a504:	f7ff ffcb 	bl	800a49e <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 800a508:	b9e8      	cbnz	r0, 800a546 <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 800a50a:	aa01      	add	r2, sp, #4
 800a50c:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 800a510:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 800a514:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 800a516:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 800a518:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a51a:	7ad1      	ldrb	r1, [r2, #11]
    while (i > 1UL)
 800a51c:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a51e:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
    while (i > 1UL)
 800a522:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a524:	0209      	lsls	r1, r1, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a526:	f895 703c 	ldrb.w	r7, [r5, #60]	@ 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a52a:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 800a52e:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a530:	7b13      	ldrb	r3, [r2, #12]
 800a532:	021b      	lsls	r3, r3, #8
 800a534:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a538:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800a53a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a53e:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800a542:	42b4      	cmp	r4, r6
 800a544:	d1e9      	bne.n	800a51a <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800a546:	b011      	add	sp, #68	@ 0x44
 800a548:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800a54a:	f504 63fc 	add.w	r3, r4, #2016	@ 0x7e0
 800a54e:	429a      	cmp	r2, r3
 800a550:	d102      	bne.n	800a558 <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800a552:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
  if (HuffTableDC != NULL)
 800a556:	e7d4      	b.n	800a502 <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 800a558:	2001      	movs	r0, #1
 800a55a:	e7f4      	b.n	800a546 <JPEG_Set_HuffDC_Mem+0x5a>

0800a55c <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 800a55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800a560:	6804      	ldr	r4, [r0, #0]
{
 800a562:	f6ad 0d38 	subw	sp, sp, #2104	@ 0x838
 800a566:	460e      	mov	r6, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800a568:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d149      	bne.n	800a604 <JPEG_Set_HuffAC_Mem+0xa8>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800a570:	f204 6444 	addw	r4, r4, #1604	@ 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800a574:	466b      	mov	r3, sp
 800a576:	f20d 4234 	addw	r2, sp, #1076	@ 0x434
 800a57a:	a901      	add	r1, sp, #4
 800a57c:	4630      	mov	r0, r6
 800a57e:	f7ff ff5d 	bl	800a43c <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800a582:	2800      	cmp	r0, #0
 800a584:	d13a      	bne.n	800a5fc <JPEG_Set_HuffAC_Mem+0xa0>
 800a586:	9b00      	ldr	r3, [sp, #0]
 800a588:	460d      	mov	r5, r1
 800a58a:	f106 0c0f 	add.w	ip, r6, #15
 800a58e:	4617      	mov	r7, r2
 800a590:	330f      	adds	r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 800a592:	f04f 0e0a 	mov.w	lr, #10
 800a596:	18f1      	adds	r1, r6, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800a598:	ae42      	add	r6, sp, #264	@ 0x108
  while (k < lastK)
 800a59a:	4561      	cmp	r1, ip
 800a59c:	d139      	bne.n	800a612 <JPEG_Set_HuffAC_Mem+0xb6>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 800a59e:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 800a5a2:	a942      	add	r1, sp, #264	@ 0x108
 800a5a4:	f5a4 76a2 	sub.w	r6, r4, #324	@ 0x144
 800a5a8:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 800a5aa:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 800a5ac:	6063      	str	r3, [r4, #4]
 800a5ae:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 800a5b0:	f103 33d1 	add.w	r3, r3, #3520188881	@ 0xd1d1d1d1
 800a5b4:	f103 232e 	add.w	r3, r3, #771763712	@ 0x2e002e00
 800a5b8:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 800a5ba:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800a5be:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 800a5c0:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800a5c4:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 800a5c6:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800a5ca:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a5cc:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
    while (i > 1UL)
 800a5d0:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a5d2:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
    while (i > 1UL)
 800a5d6:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a5d8:	0212      	lsls	r2, r2, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a5da:	f895 732c 	ldrb.w	r7, [r5, #812]	@ 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a5de:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800a5e2:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a5e4:	f891 30a2 	ldrb.w	r3, [r1, #162]	@ 0xa2
 800a5e8:	021b      	lsls	r3, r3, #8
 800a5ea:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a5ee:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800a5f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5f4:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800a5f8:	42b4      	cmp	r4, r6
 800a5fa:	d1e7      	bne.n	800a5cc <JPEG_Set_HuffAC_Mem+0x70>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800a5fc:	f60d 0d38 	addw	sp, sp, #2104	@ 0x838
 800a600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800a604:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 800a608:	429a      	cmp	r2, r3
 800a60a:	d10f      	bne.n	800a62c <JPEG_Set_HuffAC_Mem+0xd0>
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800a60c:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  if (HuffTableAC != NULL)
 800a610:	e7b0      	b.n	800a574 <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 800a612:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l == 0UL)
 800a616:	b15b      	cbz	r3, 800a630 <JPEG_Set_HuffAC_Mem+0xd4>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800a618:	2bf0      	cmp	r3, #240	@ 0xf0
 800a61a:	d015      	beq.n	800a648 <JPEG_Set_HuffAC_Mem+0xec>
      msb = (l & 0xF0UL) >> 4;
 800a61c:	091a      	lsrs	r2, r3, #4
      lsb = (l & 0x0FUL);
 800a61e:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 800a622:	3b01      	subs	r3, #1
 800a624:	fb0e 3302 	mla	r3, lr, r2, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800a628:	2ba1      	cmp	r3, #161	@ 0xa1
 800a62a:	d902      	bls.n	800a632 <JPEG_Set_HuffAC_Mem+0xd6>
    return HAL_ERROR;
 800a62c:	2001      	movs	r0, #1
 800a62e:	e7e5      	b.n	800a5fc <JPEG_Set_HuffAC_Mem+0xa0>
      l = 160; /*l = 0x00 EOB code*/
 800a630:	23a0      	movs	r3, #160	@ 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800a632:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 800a636:	f857 8b04 	ldr.w	r8, [r7], #4
 800a63a:	f8c2 80a4 	str.w	r8, [r2, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800a63e:	f815 2b01 	ldrb.w	r2, [r5], #1
 800a642:	3a01      	subs	r2, #1
 800a644:	54f2      	strb	r2, [r6, r3]
      k++;
 800a646:	e7a8      	b.n	800a59a <JPEG_Set_HuffAC_Mem+0x3e>
      l = 161;
 800a648:	23a1      	movs	r3, #161	@ 0xa1
 800a64a:	e7f2      	b.n	800a632 <JPEG_Set_HuffAC_Mem+0xd6>

0800a64c <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800a64c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a64e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800a652:	6543      	str	r3, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a654:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800a656:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a658:	f002 0203 	and.w	r2, r2, #3
 800a65c:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800a65e:	685a      	ldr	r2, [r3, #4]
 800a660:	bf0c      	ite	eq
 800a662:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800a666:	f022 0208 	bicne.w	r2, r2, #8
 800a66a:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a66c:	681a      	ldr	r2, [r3, #0]
 800a66e:	f022 0201 	bic.w	r2, r2, #1
 800a672:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a674:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a676:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a67a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800a67c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a67e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a682:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800a684:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a686:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a68a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800a68c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a68e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a692:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800a694:	681a      	ldr	r2, [r3, #0]
 800a696:	f042 0201 	orr.w	r2, r2, #1
 800a69a:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800a69c:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800a69e:	f002 020c 	and.w	r2, r2, #12
 800a6a2:	2a08      	cmp	r2, #8
 800a6a4:	d104      	bne.n	800a6b0 <JPEG_Init_Process+0x64>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800a6a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a6a8:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800a6ac:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800a6ae:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800a6b0:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800a6b2:	f002 020c 	and.w	r2, r2, #12
 800a6b6:	2a0c      	cmp	r2, #12
 800a6b8:	d1f9      	bne.n	800a6ae <JPEG_Init_Process+0x62>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800a6ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a6bc:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a6c0:	e7f4      	b.n	800a6ac <JPEG_Init_Process+0x60>
	...

0800a6c4 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800a6c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800a6c6:	6b06      	ldr	r6, [r0, #48]	@ 0x30
{
 800a6c8:	4604      	mov	r4, r0
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800a6ca:	6a82      	ldr	r2, [r0, #40]	@ 0x28
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800a6cc:	6ab5      	ldr	r5, [r6, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800a6ce:	42aa      	cmp	r2, r5
 800a6d0:	d313      	bcc.n	800a6fa <JPEG_DMA_StartProcess+0x36>
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800a6d2:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800a6d4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800a6d6:	6a81      	ldr	r1, [r0, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800a6d8:	428b      	cmp	r3, r1
 800a6da:	d30e      	bcc.n	800a6fa <JPEG_DMA_StartProcess+0x36>
  {
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 800a6dc:	4f18      	ldr	r7, [pc, #96]	@ (800a740 <JPEG_DMA_StartProcess+0x7c>)
 800a6de:	6477      	str	r7, [r6, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 800a6e0:	4f18      	ldr	r7, [pc, #96]	@ (800a744 <JPEG_DMA_StartProcess+0x80>)
 800a6e2:	6577      	str	r7, [r6, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800a6e4:	4e18      	ldr	r6, [pc, #96]	@ (800a748 <JPEG_DMA_StartProcess+0x84>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 800a6e6:	6547      	str	r7, [r0, #84]	@ 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800a6e8:	6446      	str	r6, [r0, #68]	@ 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 800a6ea:	4e18      	ldr	r6, [pc, #96]	@ (800a74c <JPEG_DMA_StartProcess+0x88>)
 800a6ec:	6586      	str	r6, [r0, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 800a6ee:	b105      	cbz	r5, 800a6f2 <JPEG_DMA_StartProcess+0x2e>
 800a6f0:	b931      	cbnz	r1, 800a700 <JPEG_DMA_StartProcess+0x3c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a6f2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800a6f4:	f043 0304 	orr.w	r3, r3, #4
 800a6f8:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 800a6fa:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800a6fc:	b003      	add	sp, #12
 800a6fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800a700:	fbb2 f6f5 	udiv	r6, r2, r5
 800a704:	fb05 2516 	mls	r5, r5, r6, r2
 800a708:	1b52      	subs	r2, r2, r5
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800a70a:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800a70c:	62a2      	str	r2, [r4, #40]	@ 0x28
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800a70e:	fbb3 f2f1 	udiv	r2, r3, r1
 800a712:	fb01 3212 	mls	r2, r1, r2, r3
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800a716:	6821      	ldr	r1, [r4, #0]
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800a718:	1a9b      	subs	r3, r3, r2
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800a71a:	3144      	adds	r1, #68	@ 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800a71c:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800a71e:	9500      	str	r5, [sp, #0]
 800a720:	69e2      	ldr	r2, [r4, #28]
 800a722:	f001 f82a 	bl	800b77a <HAL_MDMA_Start_IT>
 800a726:	2800      	cmp	r0, #0
 800a728:	d1e3      	bne.n	800a6f2 <JPEG_DMA_StartProcess+0x2e>
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800a72a:	6822      	ldr	r2, [r4, #0]
 800a72c:	9500      	str	r5, [sp, #0]
 800a72e:	3240      	adds	r2, #64	@ 0x40
 800a730:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a732:	69a1      	ldr	r1, [r4, #24]
 800a734:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800a736:	f001 f820 	bl	800b77a <HAL_MDMA_Start_IT>
 800a73a:	2800      	cmp	r0, #0
 800a73c:	d0de      	beq.n	800a6fc <JPEG_DMA_StartProcess+0x38>
 800a73e:	e7d8      	b.n	800a6f2 <JPEG_DMA_StartProcess+0x2e>
 800a740:	0800ac87 	.word	0x0800ac87
 800a744:	0800ab7f 	.word	0x0800ab7f
 800a748:	0800b145 	.word	0x0800b145
 800a74c:	0800b137 	.word	0x0800b137

0800a750 <HAL_JPEG_Init>:
{
 800a750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 800a752:	4605      	mov	r5, r0
 800a754:	2800      	cmp	r0, #0
 800a756:	f000 80f2 	beq.w	800a93e <HAL_JPEG_Init+0x1ee>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800a75a:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 800a75e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800a762:	b91b      	cbnz	r3, 800a76c <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 800a764:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 800a768:	f7f6 fde0 	bl	800132c <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 800a76c:	682c      	ldr	r4, [r5, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800a76e:	2302      	movs	r3, #2
 800a770:	4a86      	ldr	r2, [pc, #536]	@ (800a98c <HAL_JPEG_Init+0x23c>)
 800a772:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 800a776:	f504 715b 	add.w	r1, r4, #876	@ 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 800a77a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a77c:	f504 7057 	add.w	r0, r4, #860	@ 0x35c
 800a780:	f043 0301 	orr.w	r3, r3, #1
 800a784:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a786:	6823      	ldr	r3, [r4, #0]
 800a788:	f023 0301 	bic.w	r3, r3, #1
 800a78c:	6023      	str	r3, [r4, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a78e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a790:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 800a794:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800a796:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a798:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a79c:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800a79e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a7a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a7a4:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800a7a6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a7a8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a7ac:	63a3      	str	r3, [r4, #56]	@ 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 800a7ae:	4b78      	ldr	r3, [pc, #480]	@ (800a990 <HAL_JPEG_Init+0x240>)
 800a7b0:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800a7b2:	4b78      	ldr	r3, [pc, #480]	@ (800a994 <HAL_JPEG_Init+0x244>)
 800a7b4:	642b      	str	r3, [r5, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 800a7b6:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 800a7b8:	e9c5 3311 	strd	r3, r3, [r5, #68]	@ 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a7bc:	7b93      	ldrb	r3, [r2, #14]
  while (index > 3UL)
 800a7be:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a7c0:	7cd6      	ldrb	r6, [r2, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a7c2:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a7c4:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800a7c8:	7c16      	ldrb	r6, [r2, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a7ca:	4333      	orrs	r3, r6
 800a7cc:	7c56      	ldrb	r6, [r2, #17]
 800a7ce:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a7d2:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 800a7d6:	4281      	cmp	r1, r0
 800a7d8:	d1f0      	bne.n	800a7bc <HAL_JPEG_Init+0x6c>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a7da:	4b6f      	ldr	r3, [pc, #444]	@ (800a998 <HAL_JPEG_Init+0x248>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800a7dc:	f504 7162 	add.w	r1, r4, #904	@ 0x388
 800a7e0:	4a6e      	ldr	r2, [pc, #440]	@ (800a99c <HAL_JPEG_Init+0x24c>)
 800a7e2:	f504 775e 	add.w	r7, r4, #888	@ 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a7e6:	f8c4 3378 	str.w	r3, [r4, #888]	@ 0x378
 800a7ea:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800a7ee:	4610      	mov	r0, r2
 800a7f0:	460e      	mov	r6, r1
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a7f2:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
 800a7f6:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 800a7fa:	f8c4 3370 	str.w	r3, [r4, #880]	@ 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a7fe:	7b83      	ldrb	r3, [r0, #14]
  while (index > 3UL)
 800a800:	3804      	subs	r0, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a802:	f890 c013 	ldrb.w	ip, [r0, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a806:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a808:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800a80c:	f890 c010 	ldrb.w	ip, [r0, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a810:	ea43 030c 	orr.w	r3, r3, ip
 800a814:	f890 c011 	ldrb.w	ip, [r0, #17]
 800a818:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a81c:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 800a820:	42be      	cmp	r6, r7
 800a822:	d1ec      	bne.n	800a7fe <HAL_JPEG_Init+0xae>
  value = *address & 0xFFFF0000U;
 800a824:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800a828:	f504 6085 	add.w	r0, r4, #1064	@ 0x428
  value = *address & 0xFFFF0000U;
 800a82c:	0c1b      	lsrs	r3, r3, #16
 800a82e:	041b      	lsls	r3, r3, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800a830:	f443 437a 	orr.w	r3, r3, #64000	@ 0xfa00
 800a834:	f043 03f9 	orr.w	r3, r3, #249	@ 0xf9
  *address = value;
 800a838:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a83c:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
  while (index > 3UL)
 800a840:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a842:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a846:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a848:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800a84c:	f892 60b0 	ldrb.w	r6, [r2, #176]	@ 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a850:	4333      	orrs	r3, r6
 800a852:	f892 60b1 	ldrb.w	r6, [r2, #177]	@ 0xb1
 800a856:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a85a:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 800a85e:	4281      	cmp	r1, r0
 800a860:	d1ec      	bne.n	800a83c <HAL_JPEG_Init+0xec>
  value = *address & 0x0000FFFFU;
 800a862:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address = (hjpeg->Instance->DHTMEM + 102);
 800a866:	f504 619f 	add.w	r1, r4, #1272	@ 0x4f8
  value = *address & 0xFFFF0000U;
 800a86a:	4a4d      	ldr	r2, [pc, #308]	@ (800a9a0 <HAL_JPEG_Init+0x250>)
 800a86c:	f504 608b 	add.w	r0, r4, #1112	@ 0x458
  value = *address & 0x0000FFFFU;
 800a870:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800a872:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 800a876:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
  value = *address & 0xFFFF0000U;
 800a87a:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 800a87e:	4013      	ands	r3, r2
  *address = value;
 800a880:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a884:	2301      	movs	r3, #1
 800a886:	f8c4 3438 	str.w	r3, [r4, #1080]	@ 0x438
 800a88a:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 800a88e:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
 800a892:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
  value = *address & 0x0000FFFFUL;
 800a896:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 800a89a:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800a89c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 800a8a0:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
  value = *address & 0xFFFF0000UL;
 800a8a4:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 800a8a8:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800a8aa:	f443 6330 	orr.w	r3, r3, #2816	@ 0xb00
 800a8ae:	f043 030a 	orr.w	r3, r3, #10
  *address = value;
 800a8b2:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a8b6:	4b3b      	ldr	r3, [pc, #236]	@ (800a9a4 <HAL_JPEG_Init+0x254>)
 800a8b8:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
 800a8bc:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 800a8c0:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  value = *address & 0x0000FFFFU;
 800a8c4:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 800a8c8:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800a8ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 800a8ce:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
  value = *address & 0xFFFF0000U;
 800a8d2:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 800a8d6:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800a8d8:	4a33      	ldr	r2, [pc, #204]	@ (800a9a8 <HAL_JPEG_Init+0x258>)
 800a8da:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800a8de:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 800a8e2:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a8e6:	4b31      	ldr	r3, [pc, #196]	@ (800a9ac <HAL_JPEG_Init+0x25c>)
 800a8e8:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454
 800a8ec:	4b30      	ldr	r3, [pc, #192]	@ (800a9b0 <HAL_JPEG_Init+0x260>)
 800a8ee:	f8c4 3450 	str.w	r3, [r4, #1104]	@ 0x450
 800a8f2:	4b30      	ldr	r3, [pc, #192]	@ (800a9b4 <HAL_JPEG_Init+0x264>)
 800a8f4:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
  value = *address & 0x0000FFFFUL;
 800a8f8:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 800a8fc:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800a8fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 800a902:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800a906:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
  while (index > 3UL)
 800a90a:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a90c:	f892 60b5 	ldrb.w	r6, [r2, #181]	@ 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800a910:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a912:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800a916:	f892 60b2 	ldrb.w	r6, [r2, #178]	@ 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a91a:	4333      	orrs	r3, r6
 800a91c:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
 800a920:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a924:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 800a928:	4281      	cmp	r1, r0
 800a92a:	d1ec      	bne.n	800a906 <HAL_JPEG_Init+0x1b6>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800a92c:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 800a930:	491a      	ldr	r1, [pc, #104]	@ (800a99c <HAL_JPEG_Init+0x24c>)
 800a932:	4628      	mov	r0, r5
 800a934:	f7ff fe12 	bl	800a55c <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 800a938:	b118      	cbz	r0, 800a942 <HAL_JPEG_Init+0x1f2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800a93a:	2301      	movs	r3, #1
 800a93c:	652b      	str	r3, [r5, #80]	@ 0x50
    return HAL_ERROR;
 800a93e:	2001      	movs	r0, #1
}
 800a940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800a942:	f504 62cc 	add.w	r2, r4, #1632	@ 0x660
 800a946:	4918      	ldr	r1, [pc, #96]	@ (800a9a8 <HAL_JPEG_Init+0x258>)
 800a948:	4628      	mov	r0, r5
 800a94a:	f7ff fe07 	bl	800a55c <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 800a94e:	2800      	cmp	r0, #0
 800a950:	d1f3      	bne.n	800a93a <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800a952:	f504 62f8 	add.w	r2, r4, #1984	@ 0x7c0
 800a956:	490d      	ldr	r1, [pc, #52]	@ (800a98c <HAL_JPEG_Init+0x23c>)
 800a958:	4628      	mov	r0, r5
 800a95a:	f7ff fdc7 	bl	800a4ec <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 800a95e:	2800      	cmp	r0, #0
 800a960:	d1eb      	bne.n	800a93a <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800a962:	f504 62fc 	add.w	r2, r4, #2016	@ 0x7e0
 800a966:	4914      	ldr	r1, [pc, #80]	@ (800a9b8 <HAL_JPEG_Init+0x268>)
 800a968:	4628      	mov	r0, r5
 800a96a:	f7ff fdbf 	bl	800a4ec <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 800a96e:	2800      	cmp	r0, #0
 800a970:	d1e3      	bne.n	800a93a <HAL_JPEG_Init+0x1ea>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800a972:	6863      	ldr	r3, [r4, #4]
 800a974:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a978:	6063      	str	r3, [r4, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 800a97a:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 800a97c:	6228      	str	r0, [r5, #32]
  hjpeg->JpegOutCount = 0;
 800a97e:	6268      	str	r0, [r5, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 800a980:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800a984:	6528      	str	r0, [r5, #80]	@ 0x50
  hjpeg->Context = 0;
 800a986:	6568      	str	r0, [r5, #84]	@ 0x54
  return HAL_OK;
 800a988:	e7da      	b.n	800a940 <HAL_JPEG_Init+0x1f0>
 800a98a:	bf00      	nop
 800a98c:	08028fb8 	.word	0x08028fb8
 800a990:	08028db8 	.word	0x08028db8
 800a994:	08028d78 	.word	0x08028d78
 800a998:	0b0a0908 	.word	0x0b0a0908
 800a99c:	08028eea 	.word	0x08028eea
 800a9a0:	ffff0000 	.word	0xffff0000
 800a9a4:	09080706 	.word	0x09080706
 800a9a8:	08028e38 	.word	0x08028e38
 800a9ac:	01000404 	.word	0x01000404
 800a9b0:	05070403 	.word	0x05070403
 800a9b4:	04040201 	.word	0x04040201
 800a9b8:	08028f9c 	.word	0x08028f9c

0800a9bc <HAL_JPEG_GetInfo>:
{
 800a9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 800a9c0:	2800      	cmp	r0, #0
 800a9c2:	d06f      	beq.n	800aaa4 <HAL_JPEG_GetInfo+0xe8>
 800a9c4:	2900      	cmp	r1, #0
 800a9c6:	d06d      	beq.n	800aaa4 <HAL_JPEG_GetInfo+0xe8>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800a9c8:	6804      	ldr	r4, [r0, #0]
 800a9ca:	6863      	ldr	r3, [r4, #4]
 800a9cc:	f003 0303 	and.w	r3, r3, #3
 800a9d0:	2b02      	cmp	r3, #2
 800a9d2:	d047      	beq.n	800aa64 <HAL_JPEG_GetInfo+0xa8>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800a9d4:	6863      	ldr	r3, [r4, #4]
 800a9d6:	f013 0303 	ands.w	r3, r3, #3
 800a9da:	d005      	beq.n	800a9e8 <HAL_JPEG_GetInfo+0x2c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 800a9dc:	6863      	ldr	r3, [r4, #4]
 800a9de:	f003 0303 	and.w	r3, r3, #3
 800a9e2:	2b03      	cmp	r3, #3
 800a9e4:	d15e      	bne.n	800aaa4 <HAL_JPEG_GetInfo+0xe8>
 800a9e6:	2330      	movs	r3, #48	@ 0x30
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800a9e8:	6862      	ldr	r2, [r4, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 800a9ea:	600b      	str	r3, [r1, #0]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800a9ec:	f023 0320 	bic.w	r3, r3, #32
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800a9f0:	0c12      	lsrs	r2, r2, #16
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800a9f2:	2b10      	cmp	r3, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800a9f4:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800a9f6:	68e2      	ldr	r2, [r4, #12]
 800a9f8:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800a9fc:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800a9fe:	d13c      	bne.n	800aa7a <HAL_JPEG_GetInfo+0xbe>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800aa00:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800aa02:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800aa04:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800aa08:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800aa0a:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800aa0c:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800aa0e:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800aa12:	d129      	bne.n	800aa68 <HAL_JPEG_GetInfo+0xac>
 800aa14:	4313      	orrs	r3, r2
 800aa16:	f013 0f0f 	tst.w	r3, #15
 800aa1a:	bf0c      	ite	eq
 800aa1c:	2301      	moveq	r3, #1
 800aa1e:	2300      	movne	r3, #0
 800aa20:	005b      	lsls	r3, r3, #1
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 800aa22:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 800aa24:	2300      	movs	r3, #0
 800aa26:	3450      	adds	r4, #80	@ 0x50
 800aa28:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 800aaa8 <HAL_JPEG_GetInfo+0xec>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 800aa2c:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800aa2e:	f04f 0e64 	mov.w	lr, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 800aa32:	f241 3888 	movw	r8, #5000	@ 0x1388
    quantRow = *tableAddress;
 800aa36:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 800aa3a:	eb05 070c 	add.w	r7, r5, ip
    quantRow = *tableAddress;
 800aa3e:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800aa40:	fa29 f206 	lsr.w	r2, r9, r6
 800aa44:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 800aa46:	2a01      	cmp	r2, #1
 800aa48:	d119      	bne.n	800aa7e <HAL_JPEG_GetInfo+0xc2>
        quality += 100UL;
 800aa4a:	3364      	adds	r3, #100	@ 0x64
    for (j = 0; j < 4UL; j++)
 800aa4c:	3608      	adds	r6, #8
 800aa4e:	3701      	adds	r7, #1
 800aa50:	2e20      	cmp	r6, #32
 800aa52:	d1f5      	bne.n	800aa40 <HAL_JPEG_GetInfo+0x84>
        }
      }
    }

    i += 4UL;
 800aa54:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800aa56:	2d40      	cmp	r5, #64	@ 0x40
 800aa58:	d1ed      	bne.n	800aa36 <HAL_JPEG_GetInfo+0x7a>
    tableAddress ++;
  }

  return (quality / 64UL);
 800aa5a:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 800aa5c:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800aa5e:	610b      	str	r3, [r1, #16]
}
 800aa60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa64:	2310      	movs	r3, #16
 800aa66:	e7bf      	b.n	800a9e8 <HAL_JPEG_GetInfo+0x2c>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800aa68:	2d03      	cmp	r5, #3
 800aa6a:	d106      	bne.n	800aa7a <HAL_JPEG_GetInfo+0xbe>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	f013 0f0f 	tst.w	r3, #15
 800aa72:	bf0c      	ite	eq
 800aa74:	2301      	moveq	r3, #1
 800aa76:	2300      	movne	r3, #0
 800aa78:	e7d3      	b.n	800aa22 <HAL_JPEG_GetInfo+0x66>
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	e7d1      	b.n	800aa22 <HAL_JPEG_GetInfo+0x66>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800aa7e:	fb0e fb02 	mul.w	fp, lr, r2
 800aa82:	f897 a000 	ldrb.w	sl, [r7]
 800aa86:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aa88:	f812 a00a 	ldrb.w	sl, [r2, sl]
 800aa8c:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 800aa90:	2a64      	cmp	r2, #100	@ 0x64
          quality += 5000UL / scale;
 800aa92:	bf8b      	itete	hi
 800aa94:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 800aa98:	f1c2 02c8 	rsbls	r2, r2, #200	@ 0xc8
          quality += 5000UL / scale;
 800aa9c:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 800aa9e:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 800aaa2:	e7d3      	b.n	800aa4c <HAL_JPEG_GetInfo+0x90>
    return HAL_ERROR;
 800aaa4:	2001      	movs	r0, #1
 800aaa6:	e7db      	b.n	800aa60 <HAL_JPEG_GetInfo+0xa4>
 800aaa8:	08028df8 	.word	0x08028df8

0800aaac <HAL_JPEG_Decode_DMA>:
{
 800aaac:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 800aaae:	4604      	mov	r4, r0
 800aab0:	b348      	cbz	r0, 800ab06 <HAL_JPEG_Decode_DMA+0x5a>
 800aab2:	b341      	cbz	r1, 800ab06 <HAL_JPEG_Decode_DMA+0x5a>
 800aab4:	b33b      	cbz	r3, 800ab06 <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 800aab6:	f890 504c 	ldrb.w	r5, [r0, #76]	@ 0x4c
 800aaba:	2d01      	cmp	r5, #1
 800aabc:	d028      	beq.n	800ab10 <HAL_JPEG_Decode_DMA+0x64>
 800aabe:	2501      	movs	r5, #1
 800aac0:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800aac4:	f890 504d 	ldrb.w	r5, [r0, #77]	@ 0x4d
 800aac8:	2d01      	cmp	r5, #1
 800aaca:	d11e      	bne.n	800ab0a <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800aacc:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 800aace:	6282      	str	r2, [r0, #40]	@ 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800aad0:	f880 504d 	strb.w	r5, [r0, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800aad4:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 800aad6:	f025 050f 	bic.w	r5, r5, #15
 800aada:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800aadc:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 800aade:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 800aae2:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800aae6:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->JpegInCount = 0;
 800aae8:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 800aaea:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 800aaec:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 800aaee:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hjpeg->JpegOutCount = 0;
 800aaf0:	6245      	str	r5, [r0, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
 800aaf2:	f7ff fdab 	bl	800a64c <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 800aaf6:	f7ff fde5 	bl	800a6c4 <JPEG_DMA_StartProcess>
 800aafa:	b128      	cbz	r0, 800ab08 <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800aafc:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 800aafe:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800ab02:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 800ab06:	2001      	movs	r0, #1
}
 800ab08:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hjpeg);
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  __HAL_LOCK(hjpeg);
 800ab10:	2002      	movs	r0, #2
 800ab12:	e7f9      	b.n	800ab08 <HAL_JPEG_Decode_DMA+0x5c>

0800ab14 <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800ab14:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ab16:	f003 030c 	and.w	r3, r3, #12
 800ab1a:	2b0c      	cmp	r3, #12
 800ab1c:	d10d      	bne.n	800ab3a <HAL_JPEG_Pause+0x26>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800ab1e:	07cb      	lsls	r3, r1, #31
 800ab20:	d503      	bpl.n	800ab2a <HAL_JPEG_Pause+0x16>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800ab22:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ab24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ab28:	6543      	str	r3, [r0, #84]	@ 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800ab2a:	0789      	lsls	r1, r1, #30
 800ab2c:	d503      	bpl.n	800ab36 <HAL_JPEG_Pause+0x22>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800ab2e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ab30:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800ab34:	6543      	str	r3, [r0, #84]	@ 0x54
}
 800ab36:	2000      	movs	r0, #0
 800ab38:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800ab3a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ab3c:	f003 030c 	and.w	r3, r3, #12
 800ab40:	2b08      	cmp	r3, #8
 800ab42:	d1f8      	bne.n	800ab36 <HAL_JPEG_Pause+0x22>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800ab44:	f011 0301 	ands.w	r3, r1, #1
 800ab48:	d004      	beq.n	800ab54 <HAL_JPEG_Pause+0x40>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800ab4a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ab4c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ab50:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800ab52:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800ab54:	078a      	lsls	r2, r1, #30
 800ab56:	d505      	bpl.n	800ab64 <HAL_JPEG_Pause+0x50>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800ab58:	6d42      	ldr	r2, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800ab5a:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800ab5e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ab62:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 800ab64:	6801      	ldr	r1, [r0, #0]
 800ab66:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800ab68:	ea22 0303 	bic.w	r3, r2, r3
 800ab6c:	630b      	str	r3, [r1, #48]	@ 0x30
 800ab6e:	e7e2      	b.n	800ab36 <HAL_JPEG_Pause+0x22>

0800ab70 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 800ab70:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 800ab72:	6282      	str	r2, [r0, #40]	@ 0x28
}
 800ab74:	4770      	bx	lr

0800ab76 <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 800ab76:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 800ab78:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 800ab7a:	4770      	bx	lr

0800ab7c <HAL_JPEG_EncodeCpltCallback>:
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
 800ab7c:	4770      	bx	lr

0800ab7e <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800ab7e:	6c00      	ldr	r0, [r0, #64]	@ 0x40
{
 800ab80:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ab82:	6803      	ldr	r3, [r0, #0]
 800ab84:	681a      	ldr	r2, [r3, #0]
 800ab86:	f022 0201 	bic.w	r2, r2, #1
 800ab8a:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800ab8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab8e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800ab92:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
 800ab94:	2301      	movs	r3, #1
 800ab96:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ab9a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800ab9c:	f043 0304 	orr.w	r3, r3, #4
 800aba0:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
 800aba2:	f7f7 ff17 	bl	80029d4 <HAL_JPEG_ErrorCallback>
}
 800aba6:	bd08      	pop	{r3, pc}

0800aba8 <JPEG_ReadInputData>:
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800aba8:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 800abaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abac:	4604      	mov	r4, r0
 800abae:	460d      	mov	r5, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800abb0:	b922      	cbnz	r2, 800abbc <JPEG_ReadInputData+0x14>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800abb2:	2101      	movs	r1, #1
 800abb4:	f7ff ffae 	bl	800ab14 <HAL_JPEG_Pause>
  uint32_t nb_bytes = 0;
 800abb8:	2200      	movs	r2, #0
 800abba:	e004      	b.n	800abc6 <JPEG_ReadInputData+0x1e>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800abbc:	6a03      	ldr	r3, [r0, #32]
 800abbe:	429a      	cmp	r2, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800abc0:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800abc2:	d924      	bls.n	800ac0e <JPEG_ReadInputData+0x66>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800abc4:	1ad2      	subs	r2, r2, r3
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800abc6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800abc8:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 800abcc:	d11e      	bne.n	800ac0c <JPEG_ReadInputData+0x64>
 800abce:	b1ea      	cbz	r2, 800ac0c <JPEG_ReadInputData+0x64>
    if (nb_words >= nbRequestWords)
 800abd0:	ebb5 0f92 	cmp.w	r5, r2, lsr #2
 800abd4:	69a1      	ldr	r1, [r4, #24]
    nb_words = nb_bytes / 4UL;
 800abd6:	ea4f 0692 	mov.w	r6, r2, lsr #2
    if (nb_words >= nbRequestWords)
 800abda:	d827      	bhi.n	800ac2c <JPEG_ReadInputData+0x84>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800abdc:	6827      	ldr	r7, [r4, #0]
        input_count = hjpeg->JpegInCount;
 800abde:	6a26      	ldr	r6, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800abe0:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800abe2:	1988      	adds	r0, r1, r6
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800abe4:	5d8e      	ldrb	r6, [r1, r6]
      for (index = 0; index < nbRequestWords; index++)
 800abe6:	429d      	cmp	r5, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800abe8:	7882      	ldrb	r2, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800abea:	f890 c001 	ldrb.w	ip, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800abee:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800abf2:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800abf4:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800abf8:	ea42 0206 	orr.w	r2, r2, r6
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800abfc:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ac00:	643a      	str	r2, [r7, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 800ac02:	6a22      	ldr	r2, [r4, #32]
 800ac04:	f102 0204 	add.w	r2, r2, #4
 800ac08:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800ac0a:	d1e8      	bne.n	800abde <JPEG_ReadInputData+0x36>
}
 800ac0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d1d2      	bne.n	800abb8 <JPEG_ReadInputData+0x10>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800ac12:	6a01      	ldr	r1, [r0, #32]
 800ac14:	f7f7 fe70 	bl	80028f8 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 800ac18:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ac1a:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800ac1c:	bf84      	itt	hi
 800ac1e:	f023 0303 	bichi.w	r3, r3, #3
 800ac22:	62a3      	strhi	r3, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 800ac24:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 800ac26:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 800ac28:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 800ac2a:	e7cc      	b.n	800abc6 <JPEG_ReadInputData+0x1e>
      if (nb_words > 0UL)
 800ac2c:	2a03      	cmp	r2, #3
 800ac2e:	d918      	bls.n	800ac62 <JPEG_ReadInputData+0xba>
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ac30:	6827      	ldr	r7, [r4, #0]
          input_count = hjpeg->JpegInCount;
 800ac32:	6a25      	ldr	r5, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800ac34:	3301      	adds	r3, #1
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800ac36:	1948      	adds	r0, r1, r5
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ac38:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_words; index++)
 800ac3a:	429e      	cmp	r6, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800ac3c:	7882      	ldrb	r2, [r0, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800ac3e:	f890 c001 	ldrb.w	ip, [r0, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800ac42:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800ac46:	78c0      	ldrb	r0, [r0, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800ac48:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800ac4c:	ea42 0205 	orr.w	r2, r2, r5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800ac50:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ac54:	643a      	str	r2, [r7, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800ac56:	6a22      	ldr	r2, [r4, #32]
 800ac58:	f102 0204 	add.w	r2, r2, #4
 800ac5c:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800ac5e:	d1e8      	bne.n	800ac32 <JPEG_ReadInputData+0x8a>
 800ac60:	e7d4      	b.n	800ac0c <JPEG_ReadInputData+0x64>
        for (index = 0; index < nb_bytes; index++)
 800ac62:	4618      	mov	r0, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800ac64:	6a25      	ldr	r5, [r4, #32]
 800ac66:	00c6      	lsls	r6, r0, #3
        for (index = 0; index < nb_bytes; index++)
 800ac68:	3001      	adds	r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800ac6a:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_bytes; index++)
 800ac6c:	4282      	cmp	r2, r0
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800ac6e:	fa05 f506 	lsl.w	r5, r5, r6
 800ac72:	ea43 0305 	orr.w	r3, r3, r5
          hjpeg->JpegInCount++;
 800ac76:	6a25      	ldr	r5, [r4, #32]
 800ac78:	f105 0501 	add.w	r5, r5, #1
 800ac7c:	6225      	str	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 800ac7e:	d1f1      	bne.n	800ac64 <JPEG_ReadInputData+0xbc>
        hjpeg->Instance->DIR = dataword;
 800ac80:	6822      	ldr	r2, [r4, #0]
 800ac82:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800ac84:	e7c2      	b.n	800ac0c <JPEG_ReadInputData+0x64>

0800ac86 <JPEG_MDMAInCpltCallback>:
{
 800ac86:	b537      	push	{r0, r1, r2, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800ac88:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800ac8a:	6822      	ldr	r2, [r4, #0]
 800ac8c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800ac8e:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 800ac92:	6313      	str	r3, [r2, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 800ac94:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ac96:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800ac9a:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 800ac9e:	041b      	lsls	r3, r3, #16
 800aca0:	0c1b      	lsrs	r3, r3, #16
 800aca2:	2b0c      	cmp	r3, #12
 800aca4:	d11a      	bne.n	800acdc <JPEG_MDMAInCpltCallback+0x56>
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800aca6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800aca8:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800acaa:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800acac:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800acae:	695a      	ldr	r2, [r3, #20]
 800acb0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800acb2:	f3c2 0210 	ubfx	r2, r2, #0, #17
 800acb6:	1a9b      	subs	r3, r3, r2
 800acb8:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800acba:	6a21      	ldr	r1, [r4, #32]
 800acbc:	f7f7 fe1c 	bl	80028f8 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
 800acc0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800acc2:	42ab      	cmp	r3, r5
 800acc4:	d327      	bcc.n	800ad16 <JPEG_MDMAInCpltCallback+0x90>
      if (inXfrSize == 0UL)
 800acc6:	b95d      	cbnz	r5, 800ace0 <JPEG_MDMAInCpltCallback+0x5a>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800acc8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 800acca:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800accc:	f043 0304 	orr.w	r3, r3, #4
 800acd0:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800acd2:	2306      	movs	r3, #6
 800acd4:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 800acd8:	f7f7 fe7c 	bl	80029d4 <HAL_JPEG_ErrorCallback>
}
 800acdc:	b003      	add	sp, #12
 800acde:	bd30      	pop	{r4, r5, pc}
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800ace0:	fbb3 f2f5 	udiv	r2, r3, r5
 800ace4:	fb05 3212 	mls	r2, r5, r2, r3
 800ace8:	1a9b      	subs	r3, r3, r2
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800acea:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800acec:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800acee:	6822      	ldr	r2, [r4, #0]
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800acf0:	04db      	lsls	r3, r3, #19
 800acf2:	d40a      	bmi.n	800ad0a <JPEG_MDMAInCpltCallback+0x84>
 800acf4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800acf6:	b143      	cbz	r3, 800ad0a <JPEG_MDMAInCpltCallback+0x84>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800acf8:	2101      	movs	r1, #1
 800acfa:	3240      	adds	r2, #64	@ 0x40
 800acfc:	9100      	str	r1, [sp, #0]
 800acfe:	69a1      	ldr	r1, [r4, #24]
 800ad00:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800ad02:	f000 fd3a 	bl	800b77a <HAL_MDMA_Start_IT>
 800ad06:	2800      	cmp	r0, #0
 800ad08:	d1de      	bne.n	800acc8 <JPEG_MDMAInCpltCallback+0x42>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800ad0a:	6822      	ldr	r2, [r4, #0]
 800ad0c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800ad0e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800ad12:	6313      	str	r3, [r2, #48]	@ 0x30
 800ad14:	e7e2      	b.n	800acdc <JPEG_MDMAInCpltCallback+0x56>
    else if (hjpeg->InDataLength > 0UL)
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d0e8      	beq.n	800acec <JPEG_MDMAInCpltCallback+0x66>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800ad1a:	079a      	lsls	r2, r3, #30
 800ad1c:	d0e6      	beq.n	800acec <JPEG_MDMAInCpltCallback+0x66>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800ad1e:	f023 0303 	bic.w	r3, r3, #3
 800ad22:	3304      	adds	r3, #4
 800ad24:	e7e1      	b.n	800acea <JPEG_MDMAInCpltCallback+0x64>

0800ad26 <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800ad26:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 800ad28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800ad2a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ad2e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
{
 800ad30:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d32a      	bcc.n	800ad8c <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 800ad36:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 800ad38:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 800ad3a:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800ad3c:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 800ad3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nbOutputWords; index++)
 800ad40:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800ad42:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800ad44:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800ad46:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800ad48:	69e0      	ldr	r0, [r4, #28]
 800ad4a:	4428      	add	r0, r5
 800ad4c:	ea4f 2513 	mov.w	r5, r3, lsr #8
 800ad50:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800ad52:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800ad54:	69e0      	ldr	r0, [r4, #28]
 800ad56:	4428      	add	r0, r5
 800ad58:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800ad5c:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800ad60:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800ad62:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800ad64:	69e0      	ldr	r0, [r4, #28]
 800ad66:	4428      	add	r0, r5
 800ad68:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 800ad6a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ad6c:	f103 0304 	add.w	r3, r3, #4
 800ad70:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800ad72:	d1e1      	bne.n	800ad38 <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800ad74:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ad76:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d106      	bne.n	800ad8a <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ad7c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800ad7e:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ad80:	4620      	mov	r0, r4
 800ad82:	f7f7 fdd7 	bl	8002934 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800ad86:	2300      	movs	r3, #0
 800ad88:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800ad8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800ad8c:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d9fb      	bls.n	800ad8a <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800ad92:	6a42      	ldr	r2, [r0, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800ad94:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800ad96:	1a9b      	subs	r3, r3, r2
 800ad98:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 800ad9a:	4290      	cmp	r0, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800ad9c:	69e1      	ldr	r1, [r4, #28]
    for (index = 0; index < nb_words; index++)
 800ad9e:	d105      	bne.n	800adac <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800ada0:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800ada2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ada4:	429f      	cmp	r7, r3
 800ada6:	d119      	bne.n	800addc <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ada8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800adaa:	e7e9      	b.n	800ad80 <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 800adac:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 800adae:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 800adb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800adb2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800adb4:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800adb6:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800adb8:	69e1      	ldr	r1, [r4, #28]
 800adba:	4429      	add	r1, r5
 800adbc:	0a1d      	lsrs	r5, r3, #8
 800adbe:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800adc0:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800adc2:	69e1      	ldr	r1, [r4, #28]
 800adc4:	4429      	add	r1, r5
 800adc6:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800adc8:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800adca:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800adcc:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800adce:	69e1      	ldr	r1, [r4, #28]
 800add0:	4429      	add	r1, r5
 800add2:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 800add4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800add6:	3304      	adds	r3, #4
 800add8:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800adda:	e7de      	b.n	800ad9a <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800addc:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800adde:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 800ade0:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800ade2:	1b78      	subs	r0, r7, r5
      dataword = hjpeg->Instance->DOR;
 800ade4:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 800ade6:	4282      	cmp	r2, r0
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800ade8:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
 800adea:	d114      	bne.n	800ae16 <JPEG_StoreOutputData+0xf0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800adec:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800adee:	4620      	mov	r0, r4
 800adf0:	f7f7 fda0 	bl	8002934 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800adf4:	2300      	movs	r3, #0
 800adf6:	6263      	str	r3, [r4, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 800adf8:	1d2b      	adds	r3, r5, #4
 800adfa:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 800adfc:	2b03      	cmp	r3, #3
 800adfe:	d8c4      	bhi.n	800ad8a <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800ae00:	00da      	lsls	r2, r3, #3
 800ae02:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800ae04:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 800ae06:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800ae08:	fa26 f202 	lsr.w	r2, r6, r2
 800ae0c:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 800ae0e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800ae10:	3201      	adds	r2, #1
 800ae12:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800ae14:	e7f2      	b.n	800adfc <JPEG_StoreOutputData+0xd6>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800ae16:	f002 0303 	and.w	r3, r2, #3
 800ae1a:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800ae1e:	3201      	adds	r2, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800ae20:	00db      	lsls	r3, r3, #3
 800ae22:	fa26 f303 	lsr.w	r3, r6, r3
 800ae26:	f801 300c 	strb.w	r3, [r1, ip]
        hjpeg->JpegOutCount++;
 800ae2a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800ae30:	e7d9      	b.n	800ade6 <JPEG_StoreOutputData+0xc0>

0800ae32 <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ae32:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ae34:	f003 0303 	and.w	r3, r3, #3
 800ae38:	2b02      	cmp	r3, #2
{
 800ae3a:	b510      	push	{r4, lr}
 800ae3c:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ae3e:	d114      	bne.n	800ae6a <JPEG_Process+0x38>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800ae40:	6803      	ldr	r3, [r0, #0]
 800ae42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae44:	065b      	lsls	r3, r3, #25
 800ae46:	d510      	bpl.n	800ae6a <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800ae48:	1d01      	adds	r1, r0, #4
 800ae4a:	f7ff fdb7 	bl	800a9bc <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800ae4e:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800ae50:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800ae52:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800ae54:	f7f7 fd1a 	bl	800288c <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800ae58:	6823      	ldr	r3, [r4, #0]
 800ae5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ae60:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800ae62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ae68:	639a      	str	r2, [r3, #56]	@ 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800ae6a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ae6c:	04d9      	lsls	r1, r3, #19
 800ae6e:	d407      	bmi.n	800ae80 <JPEG_Process+0x4e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800ae70:	6823      	ldr	r3, [r4, #0]
 800ae72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae74:	0792      	lsls	r2, r2, #30
 800ae76:	d544      	bpl.n	800af02 <JPEG_Process+0xd0>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800ae78:	2108      	movs	r1, #8
      JPEG_ReadInputData(hjpeg, 1);
 800ae7a:	4620      	mov	r0, r4
 800ae7c:	f7ff fe94 	bl	800aba8 <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800ae80:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ae82:	0499      	lsls	r1, r3, #18
 800ae84:	d407      	bmi.n	800ae96 <JPEG_Process+0x64>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800ae86:	6823      	ldr	r3, [r4, #0]
 800ae88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae8a:	0712      	lsls	r2, r2, #28
 800ae8c:	d53e      	bpl.n	800af0c <JPEG_Process+0xda>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800ae8e:	2108      	movs	r1, #8
      JPEG_StoreOutputData(hjpeg, 1);
 800ae90:	4620      	mov	r0, r4
 800ae92:	f7ff ff48 	bl	800ad26 <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800ae96:	6823      	ldr	r3, [r4, #0]
 800ae98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae9a:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800ae9e:	2a20      	cmp	r2, #32
 800aea0:	d13c      	bne.n	800af1c <JPEG_Process+0xea>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800aea2:	681a      	ldr	r2, [r3, #0]
 800aea4:	f022 0201 	bic.w	r2, r2, #1
 800aea8:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800aeaa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aeac:	f002 020c 	and.w	r2, r2, #12
 800aeb0:	2a08      	cmp	r2, #8
 800aeb2:	d103      	bne.n	800aebc <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800aeb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aeb6:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800aeba:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800aebc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aebe:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800aec2:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 800aec4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800aec6:	b133      	cbz	r3, 800aed6 <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800aec8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800aeca:	4620      	mov	r0, r4
 800aecc:	69e1      	ldr	r1, [r4, #28]
 800aece:	f7f7 fd31 	bl	8002934 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800aed2:	2300      	movs	r3, #0
 800aed4:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 800aed6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800aed8:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800aeda:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800aedc:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800aee0:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800aee4:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800aee6:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800aee8:	f04f 0200 	mov.w	r2, #0
 800aeec:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800aef0:	f04f 0201 	mov.w	r2, #1
 800aef4:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800aef8:	d10d      	bne.n	800af16 <JPEG_Process+0xe4>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800aefa:	f7f7 fd6d 	bl	80029d8 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 800aefe:	2001      	movs	r0, #1
}
 800af00:	bd10      	pop	{r4, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800af02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af04:	0758      	lsls	r0, r3, #29
 800af06:	d5bb      	bpl.n	800ae80 <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 800af08:	2101      	movs	r1, #1
 800af0a:	e7b6      	b.n	800ae7a <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800af0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af0e:	06db      	lsls	r3, r3, #27
 800af10:	d5c1      	bpl.n	800ae96 <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 800af12:	2101      	movs	r1, #1
 800af14:	e7bc      	b.n	800ae90 <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800af16:	f7ff fe31 	bl	800ab7c <HAL_JPEG_EncodeCpltCallback>
 800af1a:	e7f0      	b.n	800aefe <JPEG_Process+0xcc>
  return JPEG_PROCESS_ONGOING;
 800af1c:	2000      	movs	r0, #0
 800af1e:	e7ef      	b.n	800af00 <JPEG_Process+0xce>

0800af20 <JPEG_DMA_PollResidualData>:
{
 800af20:	b570      	push	{r4, r5, r6, lr}
 800af22:	4604      	mov	r4, r0
 800af24:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800af26:	6d65      	ldr	r5, [r4, #84]	@ 0x54
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800af28:	6823      	ldr	r3, [r4, #0]
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800af2a:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 800af2e:	d122      	bne.n	800af76 <JPEG_DMA_PollResidualData+0x56>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800af30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af32:	06d0      	lsls	r0, r2, #27
 800af34:	d51f      	bpl.n	800af76 <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 800af36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800af38:	69e1      	ldr	r1, [r4, #28]
 800af3a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800af3c:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800af3e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800af40:	69e2      	ldr	r2, [r4, #28]
 800af42:	440a      	add	r2, r1
 800af44:	0a19      	lsrs	r1, r3, #8
 800af46:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800af48:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800af4a:	69e2      	ldr	r2, [r4, #28]
 800af4c:	440a      	add	r2, r1
 800af4e:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800af50:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800af52:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800af54:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800af56:	69e2      	ldr	r2, [r4, #28]
 800af58:	440a      	add	r2, r1
 800af5a:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 800af5c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800af5e:	3304      	adds	r3, #4
 800af60:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800af62:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800af64:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800af66:	429a      	cmp	r2, r3
 800af68:	d105      	bne.n	800af76 <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800af6a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800af6c:	4620      	mov	r0, r4
 800af6e:	69e1      	ldr	r1, [r4, #28]
 800af70:	f7f7 fce0 	bl	8002934 <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 800af74:	6265      	str	r5, [r4, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800af76:	3e01      	subs	r6, #1
 800af78:	d1d5      	bne.n	800af26 <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800af7a:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 800af7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800af7e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800af80:	06c9      	lsls	r1, r1, #27
 800af82:	d501      	bpl.n	800af88 <JPEG_DMA_PollResidualData+0x68>
 800af84:	0492      	lsls	r2, r2, #18
 800af86:	d420      	bmi.n	800afca <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800af88:	681a      	ldr	r2, [r3, #0]
 800af8a:	f022 0201 	bic.w	r2, r2, #1
 800af8e:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 800af90:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800af92:	b133      	cbz	r3, 800afa2 <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800af94:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800af96:	4620      	mov	r0, r4
 800af98:	69e1      	ldr	r1, [r4, #28]
 800af9a:	f7f7 fccb 	bl	8002934 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800af9e:	2300      	movs	r3, #0
 800afa0:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 800afa2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800afa4:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800afa6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800afa8:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800afac:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800afb0:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800afb2:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800afb4:	f04f 0200 	mov.w	r2, #0
 800afb8:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800afbc:	f04f 0201 	mov.w	r2, #1
 800afc0:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800afc4:	d102      	bne.n	800afcc <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800afc6:	f7f7 fd07 	bl	80029d8 <HAL_JPEG_DecodeCpltCallback>
}
 800afca:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800afcc:	f7ff fdd6 	bl	800ab7c <HAL_JPEG_EncodeCpltCallback>
}
 800afd0:	e7fb      	b.n	800afca <JPEG_DMA_PollResidualData+0xaa>

0800afd2 <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800afd2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800afd4:	f413 5f40 	tst.w	r3, #12288	@ 0x3000
{
 800afd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800afda:	4604      	mov	r4, r0
 800afdc:	460d      	mov	r5, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800afde:	d014      	beq.n	800b00a <HAL_JPEG_Resume+0x38>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800afe0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800afe2:	f003 030c 	and.w	r3, r3, #12
 800afe6:	2b0c      	cmp	r3, #12
 800afe8:	d146      	bne.n	800b078 <HAL_JPEG_Resume+0xa6>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800afea:	07cb      	lsls	r3, r1, #31
 800afec:	d520      	bpl.n	800b030 <HAL_JPEG_Resume+0x5e>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800afee:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800aff0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aff4:	6543      	str	r3, [r0, #84]	@ 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800aff6:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800aff8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
      if (xfrSize == 0UL)
 800affa:	b941      	cbnz	r1, 800b00e <HAL_JPEG_Resume+0x3c>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800affc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800affe:	f043 0304 	orr.w	r3, r3, #4
 800b002:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800b004:	2306      	movs	r3, #6
 800b006:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 800b00a:	2001      	movs	r0, #1
 800b00c:	e01d      	b.n	800b04a <HAL_JPEG_Resume+0x78>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
 800b00e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b010:	fbb3 f2f1 	udiv	r2, r3, r1
 800b014:	fb01 3212 	mls	r2, r1, r2, r3
 800b018:	1a9b      	subs	r3, r3, r2
 800b01a:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (hjpeg->InDataLength > 0UL)
 800b01c:	b143      	cbz	r3, 800b030 <HAL_JPEG_Resume+0x5e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800b01e:	6822      	ldr	r2, [r4, #0]
 800b020:	2101      	movs	r1, #1
 800b022:	3240      	adds	r2, #64	@ 0x40
 800b024:	9100      	str	r1, [sp, #0]
 800b026:	69a1      	ldr	r1, [r4, #24]
 800b028:	f000 fba7 	bl	800b77a <HAL_MDMA_Start_IT>
 800b02c:	2800      	cmp	r0, #0
 800b02e:	d1e5      	bne.n	800affc <HAL_JPEG_Resume+0x2a>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800b030:	07a8      	lsls	r0, r5, #30
 800b032:	d509      	bpl.n	800b048 <HAL_JPEG_Resume+0x76>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800b034:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b036:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b03a:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800b03c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b03e:	0419      	lsls	r1, r3, #16
 800b040:	d505      	bpl.n	800b04e <HAL_JPEG_Resume+0x7c>
        JPEG_DMA_PollResidualData(hjpeg);
 800b042:	4620      	mov	r0, r4
 800b044:	f7ff ff6c 	bl	800af20 <JPEG_DMA_PollResidualData>
  return HAL_OK;
 800b048:	2000      	movs	r0, #0
}
 800b04a:	b003      	add	sp, #12
 800b04c:	bd30      	pop	{r4, r5, pc}
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800b04e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800b050:	6a81      	ldr	r1, [r0, #40]	@ 0x28
        if (xfrSize == 0UL)
 800b052:	2900      	cmp	r1, #0
 800b054:	d0d2      	beq.n	800affc <HAL_JPEG_Resume+0x2a>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800b056:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b058:	fbb3 f2f1 	udiv	r2, r3, r1
 800b05c:	fb01 3212 	mls	r2, r1, r2, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800b060:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800b062:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800b064:	2201      	movs	r2, #1
 800b066:	3144      	adds	r1, #68	@ 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800b068:	62e3      	str	r3, [r4, #44]	@ 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800b06a:	9200      	str	r2, [sp, #0]
 800b06c:	69e2      	ldr	r2, [r4, #28]
 800b06e:	f000 fb84 	bl	800b77a <HAL_MDMA_Start_IT>
 800b072:	2800      	cmp	r0, #0
 800b074:	d0e8      	beq.n	800b048 <HAL_JPEG_Resume+0x76>
 800b076:	e7c1      	b.n	800affc <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800b078:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800b07a:	f003 030c 	and.w	r3, r3, #12
 800b07e:	2b08      	cmp	r3, #8
 800b080:	d1e2      	bne.n	800b048 <HAL_JPEG_Resume+0x76>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800b082:	f011 0301 	ands.w	r3, r1, #1
 800b086:	d004      	beq.n	800b092 <HAL_JPEG_Resume+0xc0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800b088:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800b08a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b08e:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800b090:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800b092:	07aa      	lsls	r2, r5, #30
 800b094:	d505      	bpl.n	800b0a2 <HAL_JPEG_Resume+0xd0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800b096:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800b098:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800b09c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b0a0:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 800b0a2:	6821      	ldr	r1, [r4, #0]
 800b0a4:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	630b      	str	r3, [r1, #48]	@ 0x30
 800b0aa:	e7cd      	b.n	800b048 <HAL_JPEG_Resume+0x76>

0800b0ac <JPEG_DMA_EndProcess>:
{
 800b0ac:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800b0ae:	6b43      	ldr	r3, [r0, #52]	@ 0x34
{
 800b0b0:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800b0b2:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	695b      	ldr	r3, [r3, #20]
 800b0b8:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800b0bc:	1ad3      	subs	r3, r2, r3
 800b0be:	6243      	str	r3, [r0, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800b0c0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d105      	bne.n	800b0d2 <JPEG_DMA_EndProcess+0x26>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b0c6:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800b0c8:	69c1      	ldr	r1, [r0, #28]
 800b0ca:	f7f7 fc33 	bl	8002934 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	6263      	str	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800b0d2:	6823      	ldr	r3, [r4, #0]
 800b0d4:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 800b0d6:	f015 0510 	ands.w	r5, r5, #16
 800b0da:	d124      	bne.n	800b126 <JPEG_DMA_EndProcess+0x7a>
    if (hjpeg->JpegOutCount > 0UL)
 800b0dc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b0de:	b12b      	cbz	r3, 800b0ec <JPEG_DMA_EndProcess+0x40>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b0e0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b0e2:	4620      	mov	r0, r4
 800b0e4:	69e1      	ldr	r1, [r4, #28]
 800b0e6:	f7f7 fc25 	bl	8002934 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800b0ea:	6265      	str	r5, [r4, #36]	@ 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b0ec:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800b0ee:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b0f0:	6813      	ldr	r3, [r2, #0]
 800b0f2:	f023 0301 	bic.w	r3, r3, #1
 800b0f6:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 800b0f8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800b0fa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b0fc:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800b100:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b104:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800b106:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800b108:	f04f 0200 	mov.w	r2, #0
 800b10c:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800b110:	f04f 0201 	mov.w	r2, #1
 800b114:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b118:	d102      	bne.n	800b120 <JPEG_DMA_EndProcess+0x74>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800b11a:	f7f7 fc5d 	bl	80029d8 <HAL_JPEG_DecodeCpltCallback>
}
 800b11e:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800b120:	f7ff fd2c 	bl	800ab7c <HAL_JPEG_EncodeCpltCallback>
 800b124:	e7fb      	b.n	800b11e <JPEG_DMA_EndProcess+0x72>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800b126:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b128:	049b      	lsls	r3, r3, #18
 800b12a:	d4f8      	bmi.n	800b11e <JPEG_DMA_EndProcess+0x72>
    JPEG_DMA_PollResidualData(hjpeg);
 800b12c:	4620      	mov	r0, r4
}
 800b12e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 800b132:	f7ff bef5 	b.w	800af20 <JPEG_DMA_PollResidualData>

0800b136 <JPEG_MDMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800b136:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800b138:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800b13a:	041b      	lsls	r3, r3, #16
 800b13c:	d501      	bpl.n	800b142 <JPEG_MDMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 800b13e:	f7ff bfb5 	b.w	800b0ac <JPEG_DMA_EndProcess>
}
 800b142:	4770      	bx	lr

0800b144 <JPEG_MDMAOutCpltCallback>:
{
 800b144:	b513      	push	{r0, r1, r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800b146:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b148:	6823      	ldr	r3, [r4, #0]
 800b14a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b14c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b150:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800b152:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b154:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 800b158:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800b15c:	0412      	lsls	r2, r2, #16
 800b15e:	0c12      	lsrs	r2, r2, #16
 800b160:	2a0c      	cmp	r2, #12
 800b162:	d125      	bne.n	800b1b0 <JPEG_MDMAOutCpltCallback+0x6c>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800b164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b166:	069a      	lsls	r2, r3, #26
 800b168:	d424      	bmi.n	800b1b4 <JPEG_MDMAOutCpltCallback+0x70>
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800b16a:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b16c:	4620      	mov	r0, r4
 800b16e:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800b170:	695a      	ldr	r2, [r3, #20]
 800b172:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b174:	f3c2 0210 	ubfx	r2, r2, #0, #17
 800b178:	1a9b      	subs	r3, r3, r2
 800b17a:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b17c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b17e:	f7f7 fbd9 	bl	8002934 <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800b182:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b184:	049b      	lsls	r3, r3, #18
 800b186:	d415      	bmi.n	800b1b4 <JPEG_MDMAOutCpltCallback+0x70>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800b188:	6821      	ldr	r1, [r4, #0]
 800b18a:	2301      	movs	r3, #1
 800b18c:	3144      	adds	r1, #68	@ 0x44
 800b18e:	9300      	str	r3, [sp, #0]
 800b190:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b192:	69e2      	ldr	r2, [r4, #28]
 800b194:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800b196:	f000 faf0 	bl	800b77a <HAL_MDMA_Start_IT>
 800b19a:	b158      	cbz	r0, 800b1b4 <JPEG_MDMAOutCpltCallback+0x70>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b19c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 800b19e:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b1a0:	f043 0304 	orr.w	r3, r3, #4
 800b1a4:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800b1a6:	2306      	movs	r3, #6
 800b1a8:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 800b1ac:	f7f7 fc12 	bl	80029d4 <HAL_JPEG_ErrorCallback>
}
 800b1b0:	b002      	add	sp, #8
 800b1b2:	bd10      	pop	{r4, pc}
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800b1b4:	6822      	ldr	r2, [r4, #0]
 800b1b6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800b1b8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800b1bc:	6313      	str	r3, [r2, #48]	@ 0x30
 800b1be:	e7f7      	b.n	800b1b0 <JPEG_MDMAOutCpltCallback+0x6c>

0800b1c0 <HAL_JPEG_IRQHandler>:
{
 800b1c0:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 800b1c2:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
{
 800b1c6:	4604      	mov	r4, r0
  switch (hjpeg->State)
 800b1c8:	3b03      	subs	r3, #3
 800b1ca:	2b01      	cmp	r3, #1
 800b1cc:	d850      	bhi.n	800b270 <HAL_JPEG_IRQHandler+0xb0>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800b1ce:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800b1d0:	f003 030c 	and.w	r3, r3, #12
 800b1d4:	2b08      	cmp	r3, #8
 800b1d6:	d103      	bne.n	800b1e0 <HAL_JPEG_IRQHandler+0x20>
}
 800b1d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 800b1dc:	f7ff be29 	b.w	800ae32 <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800b1e0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800b1e2:	f003 030c 	and.w	r3, r3, #12
 800b1e6:	2b0c      	cmp	r3, #12
 800b1e8:	d142      	bne.n	800b270 <HAL_JPEG_IRQHandler+0xb0>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b1ea:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800b1ec:	f003 0303 	and.w	r3, r3, #3
 800b1f0:	2b02      	cmp	r3, #2
 800b1f2:	d114      	bne.n	800b21e <HAL_JPEG_IRQHandler+0x5e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800b1f4:	6803      	ldr	r3, [r0, #0]
 800b1f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1f8:	0659      	lsls	r1, r3, #25
 800b1fa:	d510      	bpl.n	800b21e <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800b1fc:	1d01      	adds	r1, r0, #4
 800b1fe:	f7ff fbdd 	bl	800a9bc <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800b202:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800b204:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800b206:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800b208:	f7f7 fb40 	bl	800288c <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800b20c:	6823      	ldr	r3, [r4, #0]
 800b20e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b210:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b214:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800b216:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b218:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b21c:	639a      	str	r2, [r3, #56]	@ 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800b21e:	6823      	ldr	r3, [r4, #0]
 800b220:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b222:	0692      	lsls	r2, r2, #26
 800b224:	d524      	bpl.n	800b270 <HAL_JPEG_IRQHandler+0xb0>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800b226:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800b228:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800b22a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b22e:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	f022 0201 	bic.w	r2, r2, #1
 800b236:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b238:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b23a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b23e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800b240:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b242:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b246:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800b248:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800b24c:	2b02      	cmp	r3, #2
 800b24e:	d101      	bne.n	800b254 <HAL_JPEG_IRQHandler+0x94>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800b250:	f000 fadc 	bl	800b80c <HAL_MDMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800b254:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800b256:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800b25a:	2b02      	cmp	r3, #2
 800b25c:	d103      	bne.n	800b266 <HAL_JPEG_IRQHandler+0xa6>
}
 800b25e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800b262:	f000 bad3 	b.w	800b80c <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 800b266:	4620      	mov	r0, r4
}
 800b268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 800b26c:	f7ff bf1e 	b.w	800b0ac <JPEG_DMA_EndProcess>
}
 800b270:	bd10      	pop	{r4, pc}

0800b272 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800b272:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800b274:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800b276:	3284      	adds	r2, #132	@ 0x84
 800b278:	1883      	adds	r3, r0, r2
{
 800b27a:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800b27c:	68c7      	ldr	r7, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800b27e:	685d      	ldr	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800b280:	684c      	ldr	r4, [r1, #4]
 800b282:	f3c7 470b 	ubfx	r7, r7, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800b286:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b28a:	680e      	ldr	r6, [r1, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800b28c:	4427      	add	r7, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800b28e:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800b290:	f106 0c01 	add.w	ip, r6, #1
 800b294:	68c5      	ldr	r5, [r0, #12]
 800b296:	f3c5 450b 	ubfx	r5, r5, #16, #12
 800b29a:	4465      	add	r5, ip
 800b29c:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b2a0:	605d      	str	r5, [r3, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800b2a2:	68c7      	ldr	r7, [r0, #12]
 800b2a4:	68cd      	ldr	r5, [r1, #12]
 800b2a6:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800b2aa:	442f      	add	r7, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800b2ac:	689d      	ldr	r5, [r3, #8]
 800b2ae:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 800b2b2:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800b2b4:	688d      	ldr	r5, [r1, #8]
 800b2b6:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 800b2ba:	3501      	adds	r5, #1
 800b2bc:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
 800b2c0:	4465      	add	r5, ip

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800b2c2:	f8d1 c010 	ldr.w	ip, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800b2c6:	ea45 4507 	orr.w	r5, r5, r7, lsl #16

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800b2ca:	698f      	ldr	r7, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800b2cc:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800b2ce:	691d      	ldr	r5, [r3, #16]
 800b2d0:	f025 0507 	bic.w	r5, r5, #7
 800b2d4:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800b2d6:	f8c3 c010 	str.w	ip, [r3, #16]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800b2da:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 800b2de:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800b2e2:	f891 7031 	ldrb.w	r7, [r1, #49]	@ 0x31
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800b2e6:	ea45 2507 	orr.w	r5, r5, r7, lsl #8
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800b2ea:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800b2ee:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 800b2f2:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800b2f4:	695d      	ldr	r5, [r3, #20]
 800b2f6:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 800b2fa:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800b2fc:	694d      	ldr	r5, [r1, #20]
 800b2fe:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800b300:	69dd      	ldr	r5, [r3, #28]
 800b302:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 800b306:	f025 0507 	bic.w	r5, r5, #7
 800b30a:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800b30c:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 800b310:	433d      	orrs	r5, r7
 800b312:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 800b314:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800b316:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800b318:	f1bc 0f00 	cmp.w	ip, #0
 800b31c:	d024      	beq.n	800b368 <LTDC_SetConfig+0xf6>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800b31e:	f1bc 0f01 	cmp.w	ip, #1
 800b322:	d023      	beq.n	800b36c <LTDC_SetConfig+0xfa>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b324:	f1ac 0502 	sub.w	r5, ip, #2
 800b328:	2d02      	cmp	r5, #2
 800b32a:	d921      	bls.n	800b370 <LTDC_SetConfig+0xfe>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 800b32c:	f1bc 0f07 	cmp.w	ip, #7
 800b330:	bf14      	ite	ne
 800b332:	2501      	movne	r5, #1
 800b334:	2502      	moveq	r5, #2
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800b336:	6adf      	ldr	r7, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800b338:	1ba4      	subs	r4, r4, r6
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800b33a:	f007 27e0 	and.w	r7, r7, #3758153728	@ 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800b33e:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800b340:	62df      	str	r7, [r3, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800b342:	3407      	adds	r4, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800b344:	6a8f      	ldr	r7, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800b346:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800b348:	436f      	muls	r7, r5
 800b34a:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 800b34e:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800b350:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 800b352:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 800b356:	f024 0407 	bic.w	r4, r4, #7
 800b35a:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800b35c:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800b35e:	5883      	ldr	r3, [r0, r2]
 800b360:	f043 0301 	orr.w	r3, r3, #1
 800b364:	5083      	str	r3, [r0, r2]
}
 800b366:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 4U;
 800b368:	2504      	movs	r5, #4
 800b36a:	e7e4      	b.n	800b336 <LTDC_SetConfig+0xc4>
    tmp = 3U;
 800b36c:	2503      	movs	r5, #3
 800b36e:	e7e2      	b.n	800b336 <LTDC_SetConfig+0xc4>
    tmp = 2U;
 800b370:	2502      	movs	r5, #2
 800b372:	e7e0      	b.n	800b336 <LTDC_SetConfig+0xc4>

0800b374 <HAL_LTDC_Init>:
{
 800b374:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800b376:	4604      	mov	r4, r0
 800b378:	2800      	cmp	r0, #0
 800b37a:	d04e      	beq.n	800b41a <HAL_LTDC_Init+0xa6>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800b37c:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 800b380:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800b384:	b91b      	cbnz	r3, 800b38e <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800b386:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 800b38a:	f7f6 f855 	bl	8001438 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b38e:	2302      	movs	r3, #2
 800b390:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800b394:	6823      	ldr	r3, [r4, #0]
 800b396:	699a      	ldr	r2, [r3, #24]
 800b398:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800b39c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b39e:	6999      	ldr	r1, [r3, #24]
 800b3a0:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800b3a4:	4302      	orrs	r2, r0
 800b3a6:	68e0      	ldr	r0, [r4, #12]
 800b3a8:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800b3aa:	6920      	ldr	r0, [r4, #16]
 800b3ac:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b3ae:	430a      	orrs	r2, r1
 800b3b0:	619a      	str	r2, [r3, #24]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 800b3b2:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 800b3b6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800b3ba:	609a      	str	r2, [r3, #8]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 800b3bc:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 800b3c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800b3c4:	60da      	str	r2, [r3, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 800b3c6:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	@ 0x24
 800b3ca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800b3ce:	611a      	str	r2, [r3, #16]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 800b3d0:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	@ 0x2c
 800b3d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800b3d8:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800b3da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800b3dc:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800b3e0:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800b3e4:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800b3e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800b3ea:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 800b3ec:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 800b3f0:	432a      	orrs	r2, r5
 800b3f2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800b3f6:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800b3f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800b3fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800b3fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b400:	f042 0206 	orr.w	r2, r2, #6
 800b404:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800b406:	699a      	ldr	r2, [r3, #24]
 800b408:	f042 0201 	orr.w	r2, r2, #1
 800b40c:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800b40e:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800b410:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800b414:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 800b418:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800b41a:	2001      	movs	r0, #1
 800b41c:	e7fc      	b.n	800b418 <HAL_LTDC_Init+0xa4>

0800b41e <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 800b41e:	4770      	bx	lr

0800b420 <HAL_LTDC_LineEventCallback>:
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
 800b420:	4770      	bx	lr

0800b422 <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 800b422:	4770      	bx	lr

0800b424 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800b424:	6803      	ldr	r3, [r0, #0]
{
 800b426:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800b428:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
{
 800b42a:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800b42c:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800b42e:	0772      	lsls	r2, r6, #29
 800b430:	d514      	bpl.n	800b45c <HAL_LTDC_IRQHandler+0x38>
 800b432:	0769      	lsls	r1, r5, #29
 800b434:	d512      	bpl.n	800b45c <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800b436:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b438:	f022 0204 	bic.w	r2, r2, #4
 800b43c:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800b43e:	2204      	movs	r2, #4
 800b440:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800b442:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 800b446:	f043 0301 	orr.w	r3, r3, #1
 800b44a:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 800b44e:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800b450:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800b454:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800b458:	f7ff ffe1 	bl	800b41e <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800b45c:	07b2      	lsls	r2, r6, #30
 800b45e:	d516      	bpl.n	800b48e <HAL_LTDC_IRQHandler+0x6a>
 800b460:	07ab      	lsls	r3, r5, #30
 800b462:	d514      	bpl.n	800b48e <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800b464:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800b466:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800b468:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b46a:	f022 0202 	bic.w	r2, r2, #2
 800b46e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800b470:	2202      	movs	r2, #2
 800b472:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800b474:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800b478:	4313      	orrs	r3, r2
 800b47a:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800b47e:	2304      	movs	r3, #4
 800b480:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800b484:	2300      	movs	r3, #0
 800b486:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800b48a:	f7ff ffc8 	bl	800b41e <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800b48e:	07f0      	lsls	r0, r6, #31
 800b490:	d510      	bpl.n	800b4b4 <HAL_LTDC_IRQHandler+0x90>
 800b492:	07e9      	lsls	r1, r5, #31
 800b494:	d50e      	bpl.n	800b4b4 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800b496:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800b498:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800b49a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b49c:	f022 0201 	bic.w	r2, r2, #1
 800b4a0:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 800b4a6:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800b4a8:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800b4ac:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800b4b0:	f7ff ffb6 	bl	800b420 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800b4b4:	0732      	lsls	r2, r6, #28
 800b4b6:	d511      	bpl.n	800b4dc <HAL_LTDC_IRQHandler+0xb8>
 800b4b8:	072b      	lsls	r3, r5, #28
 800b4ba:	d50f      	bpl.n	800b4dc <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800b4bc:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 800b4be:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800b4c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b4c2:	f022 0208 	bic.w	r2, r2, #8
 800b4c6:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800b4c8:	2208      	movs	r2, #8
 800b4ca:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800b4d8:	f7ff ffa3 	bl	800b422 <HAL_LTDC_ReloadEventCallback>
}
 800b4dc:	bd70      	pop	{r4, r5, r6, pc}

0800b4de <HAL_LTDC_ConfigLayer>:
{
 800b4de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800b4e2:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 800b4e6:	4606      	mov	r6, r0
 800b4e8:	460f      	mov	r7, r1
 800b4ea:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800b4ec:	2b01      	cmp	r3, #1
 800b4ee:	f04f 0002 	mov.w	r0, #2
 800b4f2:	d01f      	beq.n	800b534 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b4f4:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 800b4f6:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b4fa:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b4fc:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b500:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800b504:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b508:	3438      	adds	r4, #56	@ 0x38
 800b50a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b50c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b50e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b510:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b516:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800b518:	4630      	mov	r0, r6
 800b51a:	4662      	mov	r2, ip
 800b51c:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b51e:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800b520:	f7ff fea7 	bl	800b272 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800b524:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800b526:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800b528:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800b52c:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800b530:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 800b534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b538 <HAL_LTDC_SetPitch>:
{
 800b538:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 800b53a:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 800b53e:	2b01      	cmp	r3, #1
 800b540:	f04f 0302 	mov.w	r3, #2
 800b544:	d02c      	beq.n	800b5a0 <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800b546:	2434      	movs	r4, #52	@ 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b548:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800b54c:	fb04 0402 	mla	r4, r4, r2, r0
 800b550:	6ca4      	ldr	r4, [r4, #72]	@ 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800b552:	b33c      	cbz	r4, 800b5a4 <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800b554:	2c01      	cmp	r4, #1
 800b556:	d027      	beq.n	800b5a8 <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b558:	1ea5      	subs	r5, r4, #2
 800b55a:	429d      	cmp	r5, r3
 800b55c:	d902      	bls.n	800b564 <HAL_LTDC_SetPitch+0x2c>
    tmp = 2U;
 800b55e:	2c07      	cmp	r4, #7
 800b560:	bf18      	it	ne
 800b562:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800b564:	01d2      	lsls	r2, r2, #7
 800b566:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 800b568:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800b56a:	3284      	adds	r2, #132	@ 0x84
 800b56c:	4422      	add	r2, r4
 800b56e:	6ad4      	ldr	r4, [r2, #44]	@ 0x2c
 800b570:	f024 54ff 	bic.w	r4, r4, #534773760	@ 0x1fe00000
 800b574:	f424 14f8 	bic.w	r4, r4, #2031616	@ 0x1f0000
 800b578:	62d4      	str	r4, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800b57a:	4c0c      	ldr	r4, [pc, #48]	@ (800b5ac <HAL_LTDC_SetPitch+0x74>)
 800b57c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800b57e:	f045 0501 	orr.w	r5, r5, #1
 800b582:	6265      	str	r5, [r4, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 800b584:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 800b586:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800b58a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800b58c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b58e:	f043 0301 	orr.w	r3, r3, #1
 800b592:	6263      	str	r3, [r4, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800b594:	2301      	movs	r3, #1
 800b596:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800b59a:	2300      	movs	r3, #0
 800b59c:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 800b5a4:	2304      	movs	r3, #4
 800b5a6:	e7dd      	b.n	800b564 <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 800b5a8:	2303      	movs	r3, #3
 800b5aa:	e7db      	b.n	800b564 <HAL_LTDC_SetPitch+0x2c>
 800b5ac:	50001000 	.word	0x50001000

0800b5b0 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800b5b0:	b530      	push	{r4, r5, lr}
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800b5b2:	6804      	ldr	r4, [r0, #0]
 800b5b4:	f3c3 0310 	ubfx	r3, r3, #0, #17

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;

  addressMask = SrcAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800b5b8:	f011 4f5f 	tst.w	r1, #3741319168	@ 0xdf000000
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800b5bc:	6965      	ldr	r5, [r4, #20]
 800b5be:	ea4f 4555 	mov.w	r5, r5, lsr #17
 800b5c2:	ea4f 4545 	mov.w	r5, r5, lsl #17
 800b5c6:	ea45 0503 	orr.w	r5, r5, r3
 800b5ca:	6165      	str	r5, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800b5cc:	9d03      	ldr	r5, [sp, #12]
 800b5ce:	6963      	ldr	r3, [r4, #20]
 800b5d0:	f105 35ff 	add.w	r5, r5, #4294967295
 800b5d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5d8:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 800b5dc:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800b5de:	f04f 031f 	mov.w	r3, #31
 800b5e2:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 800b5e4:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 800b5e6:	61a1      	str	r1, [r4, #24]
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800b5e8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b5ea:	bf0c      	ite	eq
 800b5ec:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800b5f0:	f423 3380 	bicne.w	r3, r3, #65536	@ 0x10000
  }

  addressMask = DstAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800b5f4:	f012 4f5f 	tst.w	r2, #3741319168	@ 0xdf000000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800b5f8:	62a3      	str	r3, [r4, #40]	@ 0x28
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800b5fa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b5fc:	bf0c      	ite	eq
 800b5fe:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800b602:	f423 3300 	bicne.w	r3, r3, #131072	@ 0x20000
 800b606:	62a3      	str	r3, [r4, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800b608:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800b60a:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800b60c:	bd30      	pop	{r4, r5, pc}

0800b60e <HAL_MDMA_Init>:
{
 800b60e:	b538      	push	{r3, r4, r5, lr}
 800b610:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800b612:	f7fd fb33 	bl	8008c7c <HAL_GetTick>
 800b616:	4605      	mov	r5, r0
  if(hmdma == NULL)
 800b618:	2c00      	cmp	r4, #0
 800b61a:	d061      	beq.n	800b6e0 <HAL_MDMA_Init+0xd2>
  __HAL_UNLOCK(hmdma);
 800b61c:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
 800b61e:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 800b620:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800b624:	2302      	movs	r3, #2
 800b626:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 800b62a:	68d3      	ldr	r3, [r2, #12]
 800b62c:	f023 0301 	bic.w	r3, r3, #1
 800b630:	60d3      	str	r3, [r2, #12]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800b632:	6823      	ldr	r3, [r4, #0]
 800b634:	68da      	ldr	r2, [r3, #12]
 800b636:	07d2      	lsls	r2, r2, #31
 800b638:	d448      	bmi.n	800b6cc <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800b63a:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800b63e:	430a      	orrs	r2, r1
 800b640:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800b642:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 800b646:	430a      	orrs	r2, r1
 800b648:	69e1      	ldr	r1, [r4, #28]
 800b64a:	430a      	orrs	r2, r1
 800b64c:	6a21      	ldr	r1, [r4, #32]
 800b64e:	430a      	orrs	r2, r1
 800b650:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800b652:	430a      	orrs	r2, r1
 800b654:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b656:	430a      	orrs	r2, r1
 800b658:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b65a:	430a      	orrs	r2, r1
 800b65c:	68a1      	ldr	r1, [r4, #8]
 800b65e:	430a      	orrs	r2, r1
 800b660:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800b662:	3901      	subs	r1, #1
 800b664:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800b668:	6861      	ldr	r1, [r4, #4]
 800b66a:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800b66e:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800b670:	d103      	bne.n	800b67a <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800b672:	691a      	ldr	r2, [r3, #16]
 800b674:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800b678:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800b67a:	2200      	movs	r2, #0
 800b67c:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800b67e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800b680:	2a00      	cmp	r2, #0
 800b682:	da04      	bge.n	800b68e <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800b684:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800b686:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800b688:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 800b68c:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800b68e:	b292      	uxth	r2, r2
 800b690:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800b692:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800b694:	2a00      	cmp	r2, #0
 800b696:	da25      	bge.n	800b6e4 <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800b698:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800b69a:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800b69c:	f440 2000 	orr.w	r0, r0, #524288	@ 0x80000
 800b6a0:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800b6a2:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800b6a4:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800b6a8:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800b6ac:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800b6ae:	f04f 0200 	mov.w	r2, #0
 800b6b2:	d019      	beq.n	800b6e8 <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800b6b4:	b2c9      	uxtb	r1, r1
 800b6b6:	6299      	str	r1, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800b6b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->State = HAL_MDMA_STATE_READY;
 800b6ba:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800b6bc:	66a2      	str	r2, [r4, #104]	@ 0x68
  return HAL_OK;
 800b6be:	2000      	movs	r0, #0
  hmdma->LinkedListNodeCounter  = 0;
 800b6c0:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800b6c2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 800b6c6:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
  return HAL_OK;
 800b6ca:	e00a      	b.n	800b6e2 <HAL_MDMA_Init+0xd4>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800b6cc:	f7fd fad6 	bl	8008c7c <HAL_GetTick>
 800b6d0:	1b40      	subs	r0, r0, r5
 800b6d2:	2805      	cmp	r0, #5
 800b6d4:	d9ad      	bls.n	800b632 <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800b6d6:	2340      	movs	r3, #64	@ 0x40
 800b6d8:	66a3      	str	r3, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800b6da:	2303      	movs	r3, #3
 800b6dc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 800b6e0:	2001      	movs	r0, #1
}
 800b6e2:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800b6e4:	6a18      	ldr	r0, [r3, #32]
 800b6e6:	e7dd      	b.n	800b6a4 <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 800b6e8:	629a      	str	r2, [r3, #40]	@ 0x28
 800b6ea:	e7e5      	b.n	800b6b8 <HAL_MDMA_Init+0xaa>

0800b6ec <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 800b6ec:	b1d8      	cbz	r0, 800b726 <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 800b6ee:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800b6f0:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 800b6f2:	68d3      	ldr	r3, [r2, #12]
 800b6f4:	f023 0301 	bic.w	r3, r3, #1
 800b6f8:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 800b6fe:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 800b700:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 800b702:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 800b704:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 800b706:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 800b708:	6253      	str	r3, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 800b70a:	6293      	str	r3, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 800b70c:	6313      	str	r3, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 800b70e:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800b710:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800b712:	6683      	str	r3, [r0, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800b714:	6643      	str	r3, [r0, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 800b716:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 800b71a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 800b71e:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
  return HAL_OK;
 800b722:	4618      	mov	r0, r3
 800b724:	4770      	bx	lr
    return HAL_ERROR;
 800b726:	2001      	movs	r0, #1
}
 800b728:	4770      	bx	lr

0800b72a <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
 800b72a:	4603      	mov	r3, r0
{
 800b72c:	b530      	push	{r4, r5, lr}
  if(hmdma == NULL)
 800b72e:	b300      	cbz	r0, 800b772 <HAL_MDMA_ConfigPostRequestMask+0x48>
  __HAL_LOCK(hmdma);
 800b730:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 800b734:	2801      	cmp	r0, #1
 800b736:	d01e      	beq.n	800b776 <HAL_MDMA_ConfigPostRequestMask+0x4c>
 800b738:	2401      	movs	r4, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800b73a:	f893 503d 	ldrb.w	r5, [r3, #61]	@ 0x3d
 800b73e:	42a5      	cmp	r5, r4
 800b740:	b2e8      	uxtb	r0, r5
  __HAL_LOCK(hmdma);
 800b742:	f883 403c 	strb.w	r4, [r3, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800b746:	d112      	bne.n	800b76e <HAL_MDMA_ConfigPostRequestMask+0x44>
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800b748:	681c      	ldr	r4, [r3, #0]
 800b74a:	6925      	ldr	r5, [r4, #16]
 800b74c:	006d      	lsls	r5, r5, #1
 800b74e:	d407      	bmi.n	800b760 <HAL_MDMA_ConfigPostRequestMask+0x36>
      hmdma->Instance->CMAR = MaskAddress;
 800b750:	6321      	str	r1, [r4, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800b752:	6362      	str	r2, [r4, #52]	@ 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800b754:	6922      	ldr	r2, [r4, #16]
      if(MaskAddress == 0U)
 800b756:	b939      	cbnz	r1, 800b768 <HAL_MDMA_ConfigPostRequestMask+0x3e>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800b758:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
 800b75c:	2000      	movs	r0, #0
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800b75e:	6122      	str	r2, [r4, #16]
  __HAL_UNLOCK(hmdma);
 800b760:	2200      	movs	r2, #0
 800b762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800b766:	bd30      	pop	{r4, r5, pc}
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800b768:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b76c:	e7f6      	b.n	800b75c <HAL_MDMA_ConfigPostRequestMask+0x32>
      status =  HAL_ERROR;
 800b76e:	4620      	mov	r0, r4
 800b770:	e7f6      	b.n	800b760 <HAL_MDMA_ConfigPostRequestMask+0x36>
    return HAL_ERROR;
 800b772:	2001      	movs	r0, #1
 800b774:	e7f7      	b.n	800b766 <HAL_MDMA_ConfigPostRequestMask+0x3c>
  __HAL_LOCK(hmdma);
 800b776:	2002      	movs	r0, #2
 800b778:	e7f5      	b.n	800b766 <HAL_MDMA_ConfigPostRequestMask+0x3c>

0800b77a <HAL_MDMA_Start_IT>:
{
 800b77a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(hmdma == NULL)
 800b77c:	4604      	mov	r4, r0
 800b77e:	2800      	cmp	r0, #0
 800b780:	d042      	beq.n	800b808 <HAL_MDMA_Start_IT+0x8e>
  __HAL_LOCK(hmdma);
 800b782:	f890 503c 	ldrb.w	r5, [r0, #60]	@ 0x3c
 800b786:	2d01      	cmp	r5, #1
 800b788:	d03c      	beq.n	800b804 <HAL_MDMA_Start_IT+0x8a>
 800b78a:	2501      	movs	r5, #1
 800b78c:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800b790:	f890 503d 	ldrb.w	r5, [r0, #61]	@ 0x3d
 800b794:	2d01      	cmp	r5, #1
 800b796:	f04f 0500 	mov.w	r5, #0
 800b79a:	d131      	bne.n	800b800 <HAL_MDMA_Start_IT+0x86>
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800b79c:	2602      	movs	r6, #2
 800b79e:	f880 603d 	strb.w	r6, [r0, #61]	@ 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800b7a2:	6685      	str	r5, [r0, #104]	@ 0x68
    __HAL_MDMA_DISABLE(hmdma);
 800b7a4:	6805      	ldr	r5, [r0, #0]
 800b7a6:	68ee      	ldr	r6, [r5, #12]
 800b7a8:	f026 0601 	bic.w	r6, r6, #1
 800b7ac:	60ee      	str	r6, [r5, #12]
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800b7ae:	9e06      	ldr	r6, [sp, #24]
 800b7b0:	9600      	str	r6, [sp, #0]
 800b7b2:	f7ff fefd 	bl	800b5b0 <MDMA_SetConfig>
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800b7b6:	68eb      	ldr	r3, [r5, #12]
 800b7b8:	f043 0306 	orr.w	r3, r3, #6
 800b7bc:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 800b7be:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800b7c0:	b11b      	cbz	r3, 800b7ca <HAL_MDMA_Start_IT+0x50>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800b7c2:	68eb      	ldr	r3, [r5, #12]
 800b7c4:	f043 0310 	orr.w	r3, r3, #16
 800b7c8:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800b7ca:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800b7cc:	b11b      	cbz	r3, 800b7d6 <HAL_MDMA_Start_IT+0x5c>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800b7ce:	68eb      	ldr	r3, [r5, #12]
 800b7d0:	f043 0308 	orr.w	r3, r3, #8
 800b7d4:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 800b7d6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800b7d8:	b11b      	cbz	r3, 800b7e2 <HAL_MDMA_Start_IT+0x68>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800b7da:	68eb      	ldr	r3, [r5, #12]
 800b7dc:	f043 0320 	orr.w	r3, r3, #32
 800b7e0:	60eb      	str	r3, [r5, #12]
    __HAL_MDMA_ENABLE(hmdma);
 800b7e2:	68eb      	ldr	r3, [r5, #12]
 800b7e4:	f043 0301 	orr.w	r3, r3, #1
 800b7e8:	60eb      	str	r3, [r5, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800b7ea:	6863      	ldr	r3, [r4, #4]
 800b7ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b7f0:	d103      	bne.n	800b7fa <HAL_MDMA_Start_IT+0x80>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800b7f2:	68eb      	ldr	r3, [r5, #12]
 800b7f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b7f8:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 800b7fa:	2000      	movs	r0, #0
}
 800b7fc:	b002      	add	sp, #8
 800b7fe:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hmdma);
 800b800:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  __HAL_LOCK(hmdma);
 800b804:	2002      	movs	r0, #2
 800b806:	e7f9      	b.n	800b7fc <HAL_MDMA_Start_IT+0x82>
    return HAL_ERROR;
 800b808:	2001      	movs	r0, #1
 800b80a:	e7f7      	b.n	800b7fc <HAL_MDMA_Start_IT+0x82>

0800b80c <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
 800b80c:	b128      	cbz	r0, 800b81a <HAL_MDMA_Abort_IT+0xe>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800b80e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800b812:	2b02      	cmp	r3, #2
 800b814:	d003      	beq.n	800b81e <HAL_MDMA_Abort_IT+0x12>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800b816:	2380      	movs	r3, #128	@ 0x80
 800b818:	6683      	str	r3, [r0, #104]	@ 0x68
    return HAL_ERROR;
 800b81a:	2001      	movs	r0, #1
 800b81c:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 800b81e:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800b820:	2304      	movs	r3, #4
 800b822:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  return HAL_OK;
 800b826:	2000      	movs	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
 800b828:	68d3      	ldr	r3, [r2, #12]
 800b82a:	f023 0301 	bic.w	r3, r3, #1
 800b82e:	60d3      	str	r3, [r2, #12]
}
 800b830:	4770      	bx	lr
	...

0800b834 <HAL_MDMA_IRQHandler>:
  __IO uint32_t count = 0;
 800b834:	2300      	movs	r3, #0
{
 800b836:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t count = 0;
 800b838:	9301      	str	r3, [sp, #4]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800b83a:	f04f 42a4 	mov.w	r2, #1375731712	@ 0x52000000
  uint32_t timeout = SystemCoreClock / 9600U;
 800b83e:	4b58      	ldr	r3, [pc, #352]	@ (800b9a0 <HAL_MDMA_IRQHandler+0x16c>)
{
 800b840:	4604      	mov	r4, r0
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800b842:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800b844:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800b846:	6803      	ldr	r3, [r0, #0]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800b848:	6810      	ldr	r0, [r2, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800b84a:	f103 422e 	add.w	r2, r3, #2919235584	@ 0xae000000
 800b84e:	3a40      	subs	r2, #64	@ 0x40
 800b850:	f3c2 1284 	ubfx	r2, r2, #6, #5
 800b854:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800b858:	4202      	tst	r2, r0
 800b85a:	f000 809e 	beq.w	800b99a <HAL_MDMA_IRQHandler+0x166>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800b85e:	681a      	ldr	r2, [r3, #0]
 800b860:	07d1      	lsls	r1, r2, #31
 800b862:	d529      	bpl.n	800b8b8 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800b864:	68da      	ldr	r2, [r3, #12]
 800b866:	0792      	lsls	r2, r2, #30
 800b868:	d526      	bpl.n	800b8b8 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800b86a:	68da      	ldr	r2, [r3, #12]
 800b86c:	f022 0202 	bic.w	r2, r2, #2
 800b870:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 800b872:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800b874:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 800b876:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800b878:	bf54      	ite	pl
 800b87a:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800b87e:	f041 0102 	orrmi.w	r1, r1, #2
 800b882:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800b884:	0591      	lsls	r1, r2, #22
 800b886:	d503      	bpl.n	800b890 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800b888:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800b88a:	f041 0104 	orr.w	r1, r1, #4
 800b88e:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800b890:	05d0      	lsls	r0, r2, #23
 800b892:	d503      	bpl.n	800b89c <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800b894:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800b896:	f041 0108 	orr.w	r1, r1, #8
 800b89a:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800b89c:	0551      	lsls	r1, r2, #21
 800b89e:	d503      	bpl.n	800b8a8 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800b8a0:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800b8a2:	f041 0110 	orr.w	r1, r1, #16
 800b8a6:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800b8a8:	0512      	lsls	r2, r2, #20
 800b8aa:	d503      	bpl.n	800b8b4 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800b8ac:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800b8ae:	f042 0220 	orr.w	r2, r2, #32
 800b8b2:	66a2      	str	r2, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800b8b8:	681a      	ldr	r2, [r3, #0]
 800b8ba:	06d0      	lsls	r0, r2, #27
 800b8bc:	d508      	bpl.n	800b8d0 <HAL_MDMA_IRQHandler+0x9c>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800b8be:	68da      	ldr	r2, [r3, #12]
 800b8c0:	0691      	lsls	r1, r2, #26
 800b8c2:	d505      	bpl.n	800b8d0 <HAL_MDMA_IRQHandler+0x9c>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800b8c4:	2210      	movs	r2, #16
 800b8c6:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 800b8c8:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800b8ca:	b10b      	cbz	r3, 800b8d0 <HAL_MDMA_IRQHandler+0x9c>
        hmdma->XferBufferCpltCallback(hmdma);
 800b8cc:	4620      	mov	r0, r4
 800b8ce:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800b8d0:	6823      	ldr	r3, [r4, #0]
 800b8d2:	681a      	ldr	r2, [r3, #0]
 800b8d4:	0712      	lsls	r2, r2, #28
 800b8d6:	d508      	bpl.n	800b8ea <HAL_MDMA_IRQHandler+0xb6>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800b8d8:	68da      	ldr	r2, [r3, #12]
 800b8da:	06d0      	lsls	r0, r2, #27
 800b8dc:	d505      	bpl.n	800b8ea <HAL_MDMA_IRQHandler+0xb6>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800b8de:	2208      	movs	r2, #8
 800b8e0:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 800b8e2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800b8e4:	b10b      	cbz	r3, 800b8ea <HAL_MDMA_IRQHandler+0xb6>
        hmdma->XferBlockCpltCallback(hmdma);
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800b8ea:	6823      	ldr	r3, [r4, #0]
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	0751      	lsls	r1, r2, #29
 800b8f0:	d508      	bpl.n	800b904 <HAL_MDMA_IRQHandler+0xd0>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800b8f2:	68da      	ldr	r2, [r3, #12]
 800b8f4:	0712      	lsls	r2, r2, #28
 800b8f6:	d505      	bpl.n	800b904 <HAL_MDMA_IRQHandler+0xd0>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800b8f8:	2204      	movs	r2, #4
 800b8fa:	605a      	str	r2, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800b8fc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800b8fe:	b10b      	cbz	r3, 800b904 <HAL_MDMA_IRQHandler+0xd0>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800b900:	4620      	mov	r0, r4
 800b902:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800b904:	6823      	ldr	r3, [r4, #0]
 800b906:	681a      	ldr	r2, [r3, #0]
 800b908:	0790      	lsls	r0, r2, #30
 800b90a:	d524      	bpl.n	800b956 <HAL_MDMA_IRQHandler+0x122>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800b90c:	68da      	ldr	r2, [r3, #12]
 800b90e:	0751      	lsls	r1, r2, #29
 800b910:	d521      	bpl.n	800b956 <HAL_MDMA_IRQHandler+0x122>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800b912:	68da      	ldr	r2, [r3, #12]
 800b914:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800b918:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800b91a:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 800b91e:	2a04      	cmp	r2, #4
 800b920:	f04f 0200 	mov.w	r2, #0
 800b924:	d10c      	bne.n	800b940 <HAL_MDMA_IRQHandler+0x10c>
        hmdma->State = HAL_MDMA_STATE_READY;
 800b926:	2301      	movs	r3, #1
        __HAL_UNLOCK(hmdma);
 800b928:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 800b92c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 800b930:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    if (hmdma->XferErrorCallback != NULL)
 800b932:	2b00      	cmp	r3, #0
 800b934:	d031      	beq.n	800b99a <HAL_MDMA_IRQHandler+0x166>
      hmdma->XferErrorCallback(hmdma);
 800b936:	4620      	mov	r0, r4
}
 800b938:	b003      	add	sp, #12
 800b93a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 800b93e:	4718      	bx	r3
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800b940:	2102      	movs	r1, #2
 800b942:	6059      	str	r1, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 800b944:	2301      	movs	r3, #1
      __HAL_UNLOCK(hmdma);
 800b946:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 800b94a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 800b94e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800b950:	b10b      	cbz	r3, 800b956 <HAL_MDMA_IRQHandler+0x122>
        hmdma->XferCpltCallback(hmdma);
 800b952:	4620      	mov	r0, r4
 800b954:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800b956:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800b958:	b1fb      	cbz	r3, 800b99a <HAL_MDMA_IRQHandler+0x166>
  uint32_t timeout = SystemCoreClock / 9600U;
 800b95a:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800b95e:	fbb5 f5f3 	udiv	r5, r5, r3
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800b962:	2304      	movs	r3, #4
 800b964:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 800b968:	6823      	ldr	r3, [r4, #0]
 800b96a:	68da      	ldr	r2, [r3, #12]
 800b96c:	f022 0201 	bic.w	r2, r2, #1
 800b970:	60da      	str	r2, [r3, #12]
      if (++count > timeout)
 800b972:	9a01      	ldr	r2, [sp, #4]
 800b974:	3201      	adds	r2, #1
 800b976:	42aa      	cmp	r2, r5
 800b978:	9201      	str	r2, [sp, #4]
 800b97a:	d802      	bhi.n	800b982 <HAL_MDMA_IRQHandler+0x14e>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800b97c:	68da      	ldr	r2, [r3, #12]
 800b97e:	07d2      	lsls	r2, r2, #31
 800b980:	d4f7      	bmi.n	800b972 <HAL_MDMA_IRQHandler+0x13e>
    __HAL_UNLOCK(hmdma);
 800b982:	2200      	movs	r2, #0
 800b984:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800b988:	68db      	ldr	r3, [r3, #12]
 800b98a:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800b98c:	bf4c      	ite	mi
 800b98e:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 800b990:	2301      	movpl	r3, #1
 800b992:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 800b996:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b998:	e7cb      	b.n	800b932 <HAL_MDMA_IRQHandler+0xfe>
}
 800b99a:	b003      	add	sp, #12
 800b99c:	bd30      	pop	{r4, r5, pc}
 800b99e:	bf00      	nop
 800b9a0:	2400006c 	.word	0x2400006c

0800b9a4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b9a4:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800b9a6:	4d1c      	ldr	r5, [pc, #112]	@ (800ba18 <HAL_PWREx_ConfigSupply+0x74>)
{
 800b9a8:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800b9aa:	68eb      	ldr	r3, [r5, #12]
 800b9ac:	f003 0307 	and.w	r3, r3, #7
 800b9b0:	2b06      	cmp	r3, #6
 800b9b2:	d006      	beq.n	800b9c2 <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b9b4:	68e8      	ldr	r0, [r5, #12]
 800b9b6:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 800b9ba:	1b00      	subs	r0, r0, r4
 800b9bc:	bf18      	it	ne
 800b9be:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800b9c0:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b9c2:	68eb      	ldr	r3, [r5, #12]
 800b9c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b9c8:	4303      	orrs	r3, r0
 800b9ca:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 800b9cc:	f7fd f956 	bl	8008c7c <HAL_GetTick>
 800b9d0:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b9d2:	686b      	ldr	r3, [r5, #4]
 800b9d4:	049a      	lsls	r2, r3, #18
 800b9d6:	d508      	bpl.n	800b9ea <HAL_PWREx_ConfigSupply+0x46>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800b9d8:	f1a4 031d 	sub.w	r3, r4, #29
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	d90c      	bls.n	800b9fa <HAL_PWREx_ConfigSupply+0x56>
 800b9e0:	3c2d      	subs	r4, #45	@ 0x2d
 800b9e2:	2c01      	cmp	r4, #1
 800b9e4:	d909      	bls.n	800b9fa <HAL_PWREx_ConfigSupply+0x56>
      return HAL_OK;
 800b9e6:	2000      	movs	r0, #0
 800b9e8:	e7ea      	b.n	800b9c0 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b9ea:	f7fd f947 	bl	8008c7c <HAL_GetTick>
 800b9ee:	1b80      	subs	r0, r0, r6
 800b9f0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b9f4:	d9ed      	bls.n	800b9d2 <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 800b9f6:	2001      	movs	r0, #1
 800b9f8:	e7e2      	b.n	800b9c0 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 800b9fa:	f7fd f93f 	bl	8008c7c <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800b9fe:	4d06      	ldr	r5, [pc, #24]	@ (800ba18 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 800ba00:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800ba02:	68eb      	ldr	r3, [r5, #12]
 800ba04:	03db      	lsls	r3, r3, #15
 800ba06:	d4ee      	bmi.n	800b9e6 <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ba08:	f7fd f938 	bl	8008c7c <HAL_GetTick>
 800ba0c:	1b00      	subs	r0, r0, r4
 800ba0e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800ba12:	d9f6      	bls.n	800ba02 <HAL_PWREx_ConfigSupply+0x5e>
 800ba14:	e7ef      	b.n	800b9f6 <HAL_PWREx_ConfigSupply+0x52>
 800ba16:	bf00      	nop
 800ba18:	58024800 	.word	0x58024800

0800ba1c <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800ba1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800ba20:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800ba22:	b135      	cbz	r5, 800ba32 <QSPI_Config+0x16>
 800ba24:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 800ba28:	d003      	beq.n	800ba32 <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800ba2a:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800ba2c:	6804      	ldr	r4, [r0, #0]
 800ba2e:	3b01      	subs	r3, #1
 800ba30:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800ba32:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ba36:	e9d1 7807 	ldrd	r7, r8, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800ba3a:	f1ba 0f00 	cmp.w	sl, #0
 800ba3e:	d04c      	beq.n	800bada <QSPI_Config+0xbe>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ba40:	694c      	ldr	r4, [r1, #20]
 800ba42:	ea45 0a0a 	orr.w	sl, r5, sl
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800ba46:	6806      	ldr	r6, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ba48:	680b      	ldr	r3, [r1, #0]
 800ba4a:	04a4      	lsls	r4, r4, #18
 800ba4c:	f8d1 c034 	ldr.w	ip, [r1, #52]	@ 0x34
 800ba50:	ea4a 0a02 	orr.w	sl, sl, r2
 800ba54:	e9d1 0e0b 	ldrd	r0, lr, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800ba58:	f1b8 0f00 	cmp.w	r8, #0
 800ba5c:	d026      	beq.n	800baac <QSPI_Config+0x90>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800ba5e:	688d      	ldr	r5, [r1, #8]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ba60:	f8d1 9010 	ldr.w	r9, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800ba64:	61f5      	str	r5, [r6, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ba66:	ea4a 0508 	orr.w	r5, sl, r8
 800ba6a:	b19f      	cbz	r7, 800ba94 <QSPI_Config+0x78>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ba6c:	433b      	orrs	r3, r7
 800ba6e:	4303      	orrs	r3, r0
 800ba70:	68c8      	ldr	r0, [r1, #12]
 800ba72:	ea43 030e 	orr.w	r3, r3, lr
 800ba76:	ea43 030c 	orr.w	r3, r3, ip
 800ba7a:	ea43 0309 	orr.w	r3, r3, r9
 800ba7e:	4303      	orrs	r3, r0
 800ba80:	4323      	orrs	r3, r4
 800ba82:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ba84:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ba88:	6173      	str	r3, [r6, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ba8a:	d001      	beq.n	800ba90 <QSPI_Config+0x74>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800ba8c:	684b      	ldr	r3, [r1, #4]
 800ba8e:	61b3      	str	r3, [r6, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 800ba90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ba94:	4303      	orrs	r3, r0
 800ba96:	ea43 030e 	orr.w	r3, r3, lr
 800ba9a:	ea43 030c 	orr.w	r3, r3, ip
 800ba9e:	ea43 0309 	orr.w	r3, r3, r9
 800baa2:	4323      	orrs	r3, r4
 800baa4:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800baa6:	6173      	str	r3, [r6, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800baa8:	61b7      	str	r7, [r6, #24]
 800baaa:	e7f1      	b.n	800ba90 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800baac:	b15f      	cbz	r7, 800bac6 <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800baae:	433b      	orrs	r3, r7
 800bab0:	4303      	orrs	r3, r0
 800bab2:	68c8      	ldr	r0, [r1, #12]
 800bab4:	ea43 030e 	orr.w	r3, r3, lr
 800bab8:	ea43 030c 	orr.w	r3, r3, ip
 800babc:	4303      	orrs	r3, r0
 800babe:	4323      	orrs	r3, r4
 800bac0:	ea43 030a 	orr.w	r3, r3, sl
 800bac4:	e7de      	b.n	800ba84 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bac6:	4303      	orrs	r3, r0
 800bac8:	ea43 030e 	orr.w	r3, r3, lr
 800bacc:	ea43 050c 	orr.w	r5, r3, ip
 800bad0:	ea45 0304 	orr.w	r3, r5, r4
 800bad4:	ea43 030a 	orr.w	r3, r3, sl
 800bad8:	e7e5      	b.n	800baa6 <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800bada:	f1b8 0f00 	cmp.w	r8, #0
 800bade:	d02d      	beq.n	800bb3c <QSPI_Config+0x120>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800bae0:	688b      	ldr	r3, [r1, #8]
 800bae2:	ea45 0508 	orr.w	r5, r5, r8
 800bae6:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bae8:	694e      	ldr	r6, [r1, #20]
 800baea:	4315      	orrs	r5, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800baec:	61e3      	str	r3, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800baee:	f8d1 c034 	ldr.w	ip, [r1, #52]	@ 0x34
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800baf2:	04b6      	lsls	r6, r6, #18
 800baf4:	690b      	ldr	r3, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800baf6:	e9d1 9e0b 	ldrd	r9, lr, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800bafa:	b1a7      	cbz	r7, 800bb26 <QSPI_Config+0x10a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bafc:	433b      	orrs	r3, r7
 800bafe:	68c8      	ldr	r0, [r1, #12]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800bb00:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bb04:	ea43 0309 	orr.w	r3, r3, r9
 800bb08:	ea43 030e 	orr.w	r3, r3, lr
 800bb0c:	ea43 030c 	orr.w	r3, r3, ip
 800bb10:	ea43 0300 	orr.w	r3, r3, r0
 800bb14:	ea43 0306 	orr.w	r3, r3, r6
 800bb18:	ea43 0305 	orr.w	r3, r3, r5
 800bb1c:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800bb1e:	d0b7      	beq.n	800ba90 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800bb20:	684b      	ldr	r3, [r1, #4]
 800bb22:	61a3      	str	r3, [r4, #24]
 800bb24:	e7b4      	b.n	800ba90 <QSPI_Config+0x74>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bb26:	ea43 0209 	orr.w	r2, r3, r9
 800bb2a:	ea42 020e 	orr.w	r2, r2, lr
 800bb2e:	ea42 020c 	orr.w	r2, r2, ip
 800bb32:	4332      	orrs	r2, r6
 800bb34:	432a      	orrs	r2, r5
 800bb36:	6162      	str	r2, [r4, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800bb38:	61a7      	str	r7, [r4, #24]
 800bb3a:	e7a9      	b.n	800ba90 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800bb3c:	b1d7      	cbz	r7, 800bb74 <QSPI_Config+0x158>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bb3e:	ea45 0307 	orr.w	r3, r5, r7
 800bb42:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 800bb44:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800bb46:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bb4a:	ea43 0302 	orr.w	r3, r3, r2
 800bb4e:	ea43 0304 	orr.w	r3, r3, r4
 800bb52:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 800bb54:	ea43 0304 	orr.w	r3, r3, r4
 800bb58:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 800bb5a:	ea43 0304 	orr.w	r3, r3, r4
 800bb5e:	68cc      	ldr	r4, [r1, #12]
 800bb60:	ea43 0304 	orr.w	r3, r3, r4
 800bb64:	694c      	ldr	r4, [r1, #20]
 800bb66:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800bb6a:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800bb6c:	d090      	beq.n	800ba90 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800bb6e:	684b      	ldr	r3, [r1, #4]
 800bb70:	6183      	str	r3, [r0, #24]
 800bb72:	e78d      	b.n	800ba90 <QSPI_Config+0x74>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800bb74:	2d00      	cmp	r5, #0
 800bb76:	d08b      	beq.n	800ba90 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bb78:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800bb7a:	6800      	ldr	r0, [r0, #0]
 800bb7c:	432b      	orrs	r3, r5
 800bb7e:	431a      	orrs	r2, r3
 800bb80:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800bb82:	431a      	orrs	r2, r3
 800bb84:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800bb86:	431a      	orrs	r2, r3
 800bb88:	694b      	ldr	r3, [r1, #20]
 800bb8a:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 800bb8e:	6142      	str	r2, [r0, #20]
          CLEAR_REG(hqspi->Instance->AR);
 800bb90:	6187      	str	r7, [r0, #24]
}
 800bb92:	e77d      	b.n	800ba90 <QSPI_Config+0x74>

0800bb94 <QSPI_WaitFlagStateUntilTimeout>:
{
 800bb94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb98:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800bb9c:	4604      	mov	r4, r0
 800bb9e:	460e      	mov	r6, r1
 800bba0:	4615      	mov	r5, r2
 800bba2:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800bba4:	6822      	ldr	r2, [r4, #0]
 800bba6:	6893      	ldr	r3, [r2, #8]
 800bba8:	4233      	tst	r3, r6
 800bbaa:	bf14      	ite	ne
 800bbac:	2301      	movne	r3, #1
 800bbae:	2300      	moveq	r3, #0
 800bbb0:	42ab      	cmp	r3, r5
 800bbb2:	d101      	bne.n	800bbb8 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 800bbb4:	2000      	movs	r0, #0
 800bbb6:	e012      	b.n	800bbde <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800bbb8:	f1b8 3fff 	cmp.w	r8, #4294967295
 800bbbc:	d0f3      	beq.n	800bba6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bbbe:	f7fd f85d 	bl	8008c7c <HAL_GetTick>
 800bbc2:	1bc0      	subs	r0, r0, r7
 800bbc4:	4540      	cmp	r0, r8
 800bbc6:	d802      	bhi.n	800bbce <QSPI_WaitFlagStateUntilTimeout+0x3a>
 800bbc8:	f1b8 0f00 	cmp.w	r8, #0
 800bbcc:	d1ea      	bne.n	800bba4 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800bbce:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800bbd0:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800bbd2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800bbd6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800bbd8:	f043 0301 	orr.w	r3, r3, #1
 800bbdc:	6463      	str	r3, [r4, #68]	@ 0x44
}
 800bbde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800bbe4 <HAL_QSPI_Init>:
{
 800bbe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbe6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800bbe8:	f7fd f848 	bl	8008c7c <HAL_GetTick>
 800bbec:	4605      	mov	r5, r0
  if(hqspi == NULL)
 800bbee:	2c00      	cmp	r4, #0
 800bbf0:	d03f      	beq.n	800bc72 <HAL_QSPI_Init+0x8e>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800bbf2:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800bbf6:	b92b      	cbnz	r3, 800bc04 <HAL_QSPI_Init+0x20>
    HAL_QSPI_MspInit(hqspi);
 800bbf8:	4620      	mov	r0, r4
 800bbfa:	f7f5 fc5b 	bl	80014b4 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800bbfe:	f241 3388 	movw	r3, #5000	@ 0x1388
 800bc02:	64a3      	str	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800bc04:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800bc06:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800bc08:	68a3      	ldr	r3, [r4, #8]
 800bc0a:	680a      	ldr	r2, [r1, #0]
 800bc0c:	3b01      	subs	r3, #1
 800bc0e:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 800bc12:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800bc16:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800bc18:	600a      	str	r2, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	9300      	str	r3, [sp, #0]
 800bc1e:	2120      	movs	r1, #32
 800bc20:	462b      	mov	r3, r5
 800bc22:	f7ff ffb7 	bl	800bb94 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800bc26:	bb10      	cbnz	r0, 800bc6e <HAL_QSPI_Init+0x8a>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800bc28:	6822      	ldr	r2, [r4, #0]
 800bc2a:	69e5      	ldr	r5, [r4, #28]
 800bc2c:	68e3      	ldr	r3, [r4, #12]
 800bc2e:	6811      	ldr	r1, [r2, #0]
 800bc30:	432b      	orrs	r3, r5
 800bc32:	6a25      	ldr	r5, [r4, #32]
 800bc34:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800bc38:	432b      	orrs	r3, r5
 800bc3a:	6865      	ldr	r5, [r4, #4]
 800bc3c:	f021 01d0 	bic.w	r1, r1, #208	@ 0xd0
 800bc40:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800bc44:	430b      	orrs	r3, r1
 800bc46:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800bc48:	6855      	ldr	r5, [r2, #4]
 800bc4a:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800bc4e:	430b      	orrs	r3, r1
 800bc50:	6921      	ldr	r1, [r4, #16]
 800bc52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800bc56:	4908      	ldr	r1, [pc, #32]	@ (800bc78 <HAL_QSPI_Init+0x94>)
 800bc58:	4029      	ands	r1, r5
 800bc5a:	430b      	orrs	r3, r1
 800bc5c:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800bc5e:	6813      	ldr	r3, [r2, #0]
 800bc60:	f043 0301 	orr.w	r3, r3, #1
 800bc64:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800bc66:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800bc68:	6460      	str	r0, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800bc6a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 800bc6e:	b003      	add	sp, #12
 800bc70:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800bc72:	2001      	movs	r0, #1
 800bc74:	e7fb      	b.n	800bc6e <HAL_QSPI_Init+0x8a>
 800bc76:	bf00      	nop
 800bc78:	ffe0f8fe 	.word	0xffe0f8fe

0800bc7c <HAL_QSPI_Command>:
{
 800bc7c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc80:	4604      	mov	r4, r0
 800bc82:	468a      	mov	sl, r1
 800bc84:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800bc86:	f7fc fff9 	bl	8008c7c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800bc8a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800bc8e:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	d036      	beq.n	800bd02 <HAL_QSPI_Command+0x86>
 800bc94:	2301      	movs	r3, #1
 800bc96:	2602      	movs	r6, #2
 800bc98:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800bc9c:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	fa5f f983 	uxtb.w	r9, r3
 800bca6:	d128      	bne.n	800bcfa <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800bca8:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800bcaa:	4603      	mov	r3, r0
 800bcac:	2120      	movs	r1, #32
 800bcae:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800bcb0:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800bcb2:	f884 6041 	strb.w	r6, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800bcb6:	f8cd 8000 	str.w	r8, [sp]
 800bcba:	f7ff ff6b 	bl	800bb94 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800bcbe:	4605      	mov	r5, r0
 800bcc0:	b9a0      	cbnz	r0, 800bcec <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	4651      	mov	r1, sl
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	f7ff fea8 	bl	800ba1c <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800bccc:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 800bcd0:	b953      	cbnz	r3, 800bce8 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800bcd2:	463b      	mov	r3, r7
 800bcd4:	464a      	mov	r2, r9
 800bcd6:	4631      	mov	r1, r6
 800bcd8:	4620      	mov	r0, r4
 800bcda:	f8cd 8000 	str.w	r8, [sp]
 800bcde:	f7ff ff59 	bl	800bb94 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800bce2:	b960      	cbnz	r0, 800bcfe <HAL_QSPI_Command+0x82>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800bce4:	6823      	ldr	r3, [r4, #0]
 800bce6:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800bce8:	f884 9041 	strb.w	r9, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800bcec:	2300      	movs	r3, #0
 800bcee:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800bcf2:	4628      	mov	r0, r5
 800bcf4:	b002      	add	sp, #8
 800bcf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 800bcfa:	4635      	mov	r5, r6
 800bcfc:	e7f6      	b.n	800bcec <HAL_QSPI_Command+0x70>
 800bcfe:	4605      	mov	r5, r0
 800bd00:	e7f4      	b.n	800bcec <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 800bd02:	2502      	movs	r5, #2
 800bd04:	e7f5      	b.n	800bcf2 <HAL_QSPI_Command+0x76>

0800bd06 <HAL_QSPI_Transmit>:
{
 800bd06:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bd0a:	4604      	mov	r4, r0
 800bd0c:	4688      	mov	r8, r1
 800bd0e:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800bd10:	f7fc ffb4 	bl	8008c7c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800bd14:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800bd18:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800bd1a:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	d04c      	beq.n	800bdba <HAL_QSPI_Transmit+0xb4>
 800bd20:	2301      	movs	r3, #1
 800bd22:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800bd26:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800bd2a:	2b01      	cmp	r3, #1
 800bd2c:	b2d8      	uxtb	r0, r3
 800bd2e:	d142      	bne.n	800bdb6 <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800bd30:	2300      	movs	r3, #0
 800bd32:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800bd34:	f1b8 0f00 	cmp.w	r8, #0
 800bd38:	d038      	beq.n	800bdac <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800bd3a:	2312      	movs	r3, #18
 800bd3c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800bd40:	692b      	ldr	r3, [r5, #16]
 800bd42:	3301      	adds	r3, #1
 800bd44:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800bd46:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 800bd48:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800bd4c:	3301      	adds	r3, #1
 800bd4e:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800bd50:	696b      	ldr	r3, [r5, #20]
 800bd52:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800bd56:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 800bd58:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800bd5a:	b99b      	cbnz	r3, 800bd84 <HAL_QSPI_Transmit+0x7e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800bd5c:	4633      	mov	r3, r6
 800bd5e:	2201      	movs	r2, #1
 800bd60:	2102      	movs	r1, #2
 800bd62:	4620      	mov	r0, r4
 800bd64:	9700      	str	r7, [sp, #0]
 800bd66:	f7ff ff15 	bl	800bb94 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800bd6a:	b910      	cbnz	r0, 800bd72 <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800bd6c:	6823      	ldr	r3, [r4, #0]
 800bd6e:	2202      	movs	r2, #2
 800bd70:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800bd72:	2301      	movs	r3, #1
 800bd74:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800bd78:	2300      	movs	r3, #0
 800bd7a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800bd7e:	b002      	add	sp, #8
 800bd80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800bd84:	4633      	mov	r3, r6
 800bd86:	2201      	movs	r2, #1
 800bd88:	2104      	movs	r1, #4
 800bd8a:	4620      	mov	r0, r4
 800bd8c:	9700      	str	r7, [sp, #0]
 800bd8e:	f7ff ff01 	bl	800bb94 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800bd92:	2800      	cmp	r0, #0
 800bd94:	d1ed      	bne.n	800bd72 <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800bd96:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bd98:	781b      	ldrb	r3, [r3, #0]
 800bd9a:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 800bd9e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bda0:	3301      	adds	r3, #1
 800bda2:	6263      	str	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 800bda4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800bda6:	3b01      	subs	r3, #1
 800bda8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bdaa:	e7d5      	b.n	800bd58 <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800bdac:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800bdae:	f043 0308 	orr.w	r3, r3, #8
 800bdb2:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800bdb4:	e7e0      	b.n	800bd78 <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 800bdb6:	2002      	movs	r0, #2
 800bdb8:	e7de      	b.n	800bd78 <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 800bdba:	2002      	movs	r0, #2
 800bdbc:	e7df      	b.n	800bd7e <HAL_QSPI_Transmit+0x78>

0800bdbe <HAL_QSPI_Receive>:
{
 800bdbe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bdc2:	4604      	mov	r4, r0
 800bdc4:	4617      	mov	r7, r2
 800bdc6:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800bdc8:	f7fc ff58 	bl	8008c7c <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800bdcc:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800bdce:	4606      	mov	r6, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800bdd0:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 800bdd2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800bdd6:	2b01      	cmp	r3, #1
 800bdd8:	d04f      	beq.n	800be7a <HAL_QSPI_Receive+0xbc>
 800bdda:	2301      	movs	r3, #1
 800bddc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800bde0:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800bde4:	2b01      	cmp	r3, #1
 800bde6:	b2d8      	uxtb	r0, r3
 800bde8:	d145      	bne.n	800be76 <HAL_QSPI_Receive+0xb8>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800bdea:	2300      	movs	r3, #0
 800bdec:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800bdee:	f1b8 0f00 	cmp.w	r8, #0
 800bdf2:	d03b      	beq.n	800be6c <HAL_QSPI_Receive+0xae>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800bdf4:	2322      	movs	r3, #34	@ 0x22
 800bdf6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800bdfa:	692b      	ldr	r3, [r5, #16]
 800bdfc:	3301      	adds	r3, #1
 800bdfe:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800be00:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800be02:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800be06:	3301      	adds	r3, #1
 800be08:	6363      	str	r3, [r4, #52]	@ 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800be0a:	6969      	ldr	r1, [r5, #20]
 800be0c:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 800be10:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 800be14:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800be16:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800be18:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800be1a:	b99b      	cbnz	r3, 800be44 <HAL_QSPI_Receive+0x86>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800be1c:	4633      	mov	r3, r6
 800be1e:	2201      	movs	r2, #1
 800be20:	2102      	movs	r1, #2
 800be22:	4620      	mov	r0, r4
 800be24:	9700      	str	r7, [sp, #0]
 800be26:	f7ff feb5 	bl	800bb94 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800be2a:	b910      	cbnz	r0, 800be32 <HAL_QSPI_Receive+0x74>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800be2c:	6823      	ldr	r3, [r4, #0]
 800be2e:	2202      	movs	r2, #2
 800be30:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800be32:	2301      	movs	r3, #1
 800be34:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800be38:	2300      	movs	r3, #0
 800be3a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800be3e:	b002      	add	sp, #8
 800be40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800be44:	4633      	mov	r3, r6
 800be46:	2201      	movs	r2, #1
 800be48:	2106      	movs	r1, #6
 800be4a:	4620      	mov	r0, r4
 800be4c:	9700      	str	r7, [sp, #0]
 800be4e:	f7ff fea1 	bl	800bb94 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800be52:	2800      	cmp	r0, #0
 800be54:	d1ed      	bne.n	800be32 <HAL_QSPI_Receive+0x74>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800be56:	f895 2020 	ldrb.w	r2, [r5, #32]
 800be5a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800be5c:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800be5e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800be60:	3301      	adds	r3, #1
 800be62:	6323      	str	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 800be64:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800be66:	3b01      	subs	r3, #1
 800be68:	63a3      	str	r3, [r4, #56]	@ 0x38
 800be6a:	e7d5      	b.n	800be18 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800be6c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800be6e:	f043 0308 	orr.w	r3, r3, #8
 800be72:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800be74:	e7e0      	b.n	800be38 <HAL_QSPI_Receive+0x7a>
    status = HAL_BUSY;
 800be76:	2002      	movs	r0, #2
 800be78:	e7de      	b.n	800be38 <HAL_QSPI_Receive+0x7a>
  __HAL_LOCK(hqspi);
 800be7a:	2002      	movs	r0, #2
 800be7c:	e7df      	b.n	800be3e <HAL_QSPI_Receive+0x80>

0800be7e <HAL_QSPI_AutoPolling>:
{
 800be7e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800be82:	4604      	mov	r4, r0
 800be84:	461f      	mov	r7, r3
 800be86:	4689      	mov	r9, r1
 800be88:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800be8a:	f7fc fef7 	bl	8008c7c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800be8e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800be92:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 800be94:	2b01      	cmp	r3, #1
 800be96:	d041      	beq.n	800bf1c <HAL_QSPI_AutoPolling+0x9e>
 800be98:	2301      	movs	r3, #1
 800be9a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800be9e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800bea2:	2b01      	cmp	r3, #1
 800bea4:	fa5f f883 	uxtb.w	r8, r3
 800bea8:	d136      	bne.n	800bf18 <HAL_QSPI_AutoPolling+0x9a>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800beaa:	2342      	movs	r3, #66	@ 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800beac:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800beae:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800beb0:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800beb2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800beb6:	4603      	mov	r3, r0
 800beb8:	9700      	str	r7, [sp, #0]
 800beba:	4620      	mov	r0, r4
 800bebc:	f7ff fe6a 	bl	800bb94 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800bec0:	bb20      	cbnz	r0, 800bf0c <HAL_QSPI_AutoPolling+0x8e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800bec2:	6822      	ldr	r2, [r4, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800bec4:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800bec6:	682b      	ldr	r3, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800bec8:	6929      	ldr	r1, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800beca:	6293      	str	r3, [r2, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800becc:	686b      	ldr	r3, [r5, #4]
 800bece:	6253      	str	r3, [r2, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800bed0:	68ab      	ldr	r3, [r5, #8]
 800bed2:	62d3      	str	r3, [r2, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800bed4:	6813      	ldr	r3, [r2, #0]
 800bed6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800beda:	430b      	orrs	r3, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800bedc:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800bede:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800bee2:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800bee4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 800bee8:	68eb      	ldr	r3, [r5, #12]
 800beea:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800beee:	f7ff fd95 	bl	800ba1c <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800bef2:	4633      	mov	r3, r6
 800bef4:	4642      	mov	r2, r8
 800bef6:	2108      	movs	r1, #8
 800bef8:	4620      	mov	r0, r4
 800befa:	9700      	str	r7, [sp, #0]
 800befc:	f7ff fe4a 	bl	800bb94 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800bf00:	b920      	cbnz	r0, 800bf0c <HAL_QSPI_AutoPolling+0x8e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800bf02:	6823      	ldr	r3, [r4, #0]
 800bf04:	2208      	movs	r2, #8
 800bf06:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800bf08:	f884 8041 	strb.w	r8, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800bf12:	b003      	add	sp, #12
 800bf14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800bf18:	2002      	movs	r0, #2
 800bf1a:	e7f7      	b.n	800bf0c <HAL_QSPI_AutoPolling+0x8e>
  __HAL_LOCK(hqspi);
 800bf1c:	2002      	movs	r0, #2
 800bf1e:	e7f8      	b.n	800bf12 <HAL_QSPI_AutoPolling+0x94>

0800bf20 <HAL_QSPI_MemoryMapped>:
{
 800bf20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf22:	4604      	mov	r4, r0
 800bf24:	4616      	mov	r6, r2
 800bf26:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800bf28:	f7fc fea8 	bl	8008c7c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800bf2c:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800bf30:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800bf32:	2a01      	cmp	r2, #1
 800bf34:	d033      	beq.n	800bf9e <HAL_QSPI_MemoryMapped+0x7e>
 800bf36:	2201      	movs	r2, #1
 800bf38:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800bf3c:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 800bf40:	2a01      	cmp	r2, #1
 800bf42:	d12a      	bne.n	800bf9a <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800bf44:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800bf46:	2182      	movs	r1, #130	@ 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800bf48:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800bf4a:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800bf4c:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800bf50:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800bf52:	9100      	str	r1, [sp, #0]
 800bf54:	2120      	movs	r1, #32
 800bf56:	f7ff fe1d 	bl	800bb94 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800bf5a:	4605      	mov	r5, r0
 800bf5c:	b9b8      	cbnz	r0, 800bf8e <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800bf5e:	6823      	ldr	r3, [r4, #0]
 800bf60:	6872      	ldr	r2, [r6, #4]
 800bf62:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800bf64:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800bf66:	f020 0008 	bic.w	r0, r0, #8
 800bf6a:	ea40 0002 	orr.w	r0, r0, r2
 800bf6e:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800bf70:	d107      	bne.n	800bf82 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800bf72:	6832      	ldr	r2, [r6, #0]
 800bf74:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800bf76:	2210      	movs	r2, #16
 800bf78:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800bf7a:	681a      	ldr	r2, [r3, #0]
 800bf7c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800bf80:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800bf82:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800bf86:	4639      	mov	r1, r7
 800bf88:	4620      	mov	r0, r4
 800bf8a:	f7ff fd47 	bl	800ba1c <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 800bf8e:	2300      	movs	r3, #0
 800bf90:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800bf94:	4628      	mov	r0, r5
 800bf96:	b003      	add	sp, #12
 800bf98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 800bf9a:	2502      	movs	r5, #2
 800bf9c:	e7f7      	b.n	800bf8e <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800bf9e:	2502      	movs	r5, #2
 800bfa0:	e7f8      	b.n	800bf94 <HAL_QSPI_MemoryMapped+0x74>
	...

0800bfa4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bfa6:	4604      	mov	r4, r0
 800bfa8:	2800      	cmp	r0, #0
 800bfaa:	d074      	beq.n	800c096 <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bfac:	6803      	ldr	r3, [r0, #0]
 800bfae:	07d8      	lsls	r0, r3, #31
 800bfb0:	d45e      	bmi.n	800c070 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bfb2:	6823      	ldr	r3, [r4, #0]
 800bfb4:	0799      	lsls	r1, r3, #30
 800bfb6:	f100 80ad 	bmi.w	800c114 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800bfba:	6823      	ldr	r3, [r4, #0]
 800bfbc:	06da      	lsls	r2, r3, #27
 800bfbe:	d527      	bpl.n	800c010 <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bfc0:	4a9c      	ldr	r2, [pc, #624]	@ (800c234 <HAL_RCC_OscConfig+0x290>)
 800bfc2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bfc4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bfc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800bfca:	2b08      	cmp	r3, #8
 800bfcc:	d007      	beq.n	800bfde <HAL_RCC_OscConfig+0x3a>
 800bfce:	2b18      	cmp	r3, #24
 800bfd0:	f040 8103 	bne.w	800c1da <HAL_RCC_OscConfig+0x236>
 800bfd4:	f001 0303 	and.w	r3, r1, #3
 800bfd8:	2b01      	cmp	r3, #1
 800bfda:	f040 80fe 	bne.w	800c1da <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bfde:	6813      	ldr	r3, [r2, #0]
 800bfe0:	05db      	lsls	r3, r3, #23
 800bfe2:	d502      	bpl.n	800bfea <HAL_RCC_OscConfig+0x46>
 800bfe4:	69e3      	ldr	r3, [r4, #28]
 800bfe6:	2b80      	cmp	r3, #128	@ 0x80
 800bfe8:	d155      	bne.n	800c096 <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bfea:	f7fc fe5f 	bl	8008cac <HAL_GetREVID>
 800bfee:	f241 0303 	movw	r3, #4099	@ 0x1003
 800bff2:	6a21      	ldr	r1, [r4, #32]
 800bff4:	4298      	cmp	r0, r3
 800bff6:	4b8f      	ldr	r3, [pc, #572]	@ (800c234 <HAL_RCC_OscConfig+0x290>)
 800bff8:	f200 80e8 	bhi.w	800c1cc <HAL_RCC_OscConfig+0x228>
 800bffc:	685a      	ldr	r2, [r3, #4]
 800bffe:	2920      	cmp	r1, #32
 800c000:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 800c004:	bf0c      	ite	eq
 800c006:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
 800c00a:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 800c00e:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c010:	6823      	ldr	r3, [r4, #0]
 800c012:	0719      	lsls	r1, r3, #28
 800c014:	f100 8123 	bmi.w	800c25e <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c018:	6823      	ldr	r3, [r4, #0]
 800c01a:	069a      	lsls	r2, r3, #26
 800c01c:	f100 8144 	bmi.w	800c2a8 <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c020:	6823      	ldr	r3, [r4, #0]
 800c022:	075d      	lsls	r5, r3, #29
 800c024:	d51e      	bpl.n	800c064 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c026:	4d84      	ldr	r5, [pc, #528]	@ (800c238 <HAL_RCC_OscConfig+0x294>)
 800c028:	682b      	ldr	r3, [r5, #0]
 800c02a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c02e:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c030:	f7fc fe24 	bl	8008c7c <HAL_GetTick>
 800c034:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c036:	682b      	ldr	r3, [r5, #0]
 800c038:	05da      	lsls	r2, r3, #23
 800c03a:	f140 815a 	bpl.w	800c2f2 <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c03e:	68a3      	ldr	r3, [r4, #8]
 800c040:	4d7c      	ldr	r5, [pc, #496]	@ (800c234 <HAL_RCC_OscConfig+0x290>)
 800c042:	2b01      	cmp	r3, #1
 800c044:	f040 815c 	bne.w	800c300 <HAL_RCC_OscConfig+0x35c>
 800c048:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800c04a:	f043 0301 	orr.w	r3, r3, #1
 800c04e:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c050:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800c054:	f7fc fe12 	bl	8008c7c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c058:	4e76      	ldr	r6, [pc, #472]	@ (800c234 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 800c05a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c05c:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800c05e:	079b      	lsls	r3, r3, #30
 800c060:	f140 8174 	bpl.w	800c34c <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c064:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c066:	2900      	cmp	r1, #0
 800c068:	f040 8177 	bne.w	800c35a <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 800c06c:	2000      	movs	r0, #0
 800c06e:	e02b      	b.n	800c0c8 <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c070:	4a70      	ldr	r2, [pc, #448]	@ (800c234 <HAL_RCC_OscConfig+0x290>)
 800c072:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c074:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c076:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800c07a:	2b10      	cmp	r3, #16
 800c07c:	d005      	beq.n	800c08a <HAL_RCC_OscConfig+0xe6>
 800c07e:	2b18      	cmp	r3, #24
 800c080:	d10b      	bne.n	800c09a <HAL_RCC_OscConfig+0xf6>
 800c082:	f001 0303 	and.w	r3, r1, #3
 800c086:	2b02      	cmp	r3, #2
 800c088:	d107      	bne.n	800c09a <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c08a:	6813      	ldr	r3, [r2, #0]
 800c08c:	039a      	lsls	r2, r3, #14
 800c08e:	d590      	bpl.n	800bfb2 <HAL_RCC_OscConfig+0xe>
 800c090:	6863      	ldr	r3, [r4, #4]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d18d      	bne.n	800bfb2 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800c096:	2001      	movs	r0, #1
 800c098:	e016      	b.n	800c0c8 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c09a:	6863      	ldr	r3, [r4, #4]
 800c09c:	4d65      	ldr	r5, [pc, #404]	@ (800c234 <HAL_RCC_OscConfig+0x290>)
 800c09e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c0a2:	d112      	bne.n	800c0ca <HAL_RCC_OscConfig+0x126>
 800c0a4:	682b      	ldr	r3, [r5, #0]
 800c0a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c0aa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800c0ac:	f7fc fde6 	bl	8008c7c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c0b0:	4e60      	ldr	r6, [pc, #384]	@ (800c234 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 800c0b2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c0b4:	6833      	ldr	r3, [r6, #0]
 800c0b6:	039b      	lsls	r3, r3, #14
 800c0b8:	f53f af7b 	bmi.w	800bfb2 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c0bc:	f7fc fdde 	bl	8008c7c <HAL_GetTick>
 800c0c0:	1b40      	subs	r0, r0, r5
 800c0c2:	2864      	cmp	r0, #100	@ 0x64
 800c0c4:	d9f6      	bls.n	800c0b4 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 800c0c6:	2003      	movs	r0, #3
}
 800c0c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c0ca:	b9a3      	cbnz	r3, 800c0f6 <HAL_RCC_OscConfig+0x152>
 800c0cc:	682b      	ldr	r3, [r5, #0]
 800c0ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c0d2:	602b      	str	r3, [r5, #0]
 800c0d4:	682b      	ldr	r3, [r5, #0]
 800c0d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c0da:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800c0dc:	f7fc fdce 	bl	8008c7c <HAL_GetTick>
 800c0e0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c0e2:	682b      	ldr	r3, [r5, #0]
 800c0e4:	039f      	lsls	r7, r3, #14
 800c0e6:	f57f af64 	bpl.w	800bfb2 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c0ea:	f7fc fdc7 	bl	8008c7c <HAL_GetTick>
 800c0ee:	1b80      	subs	r0, r0, r6
 800c0f0:	2864      	cmp	r0, #100	@ 0x64
 800c0f2:	d9f6      	bls.n	800c0e2 <HAL_RCC_OscConfig+0x13e>
 800c0f4:	e7e7      	b.n	800c0c6 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c0f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c0fa:	682b      	ldr	r3, [r5, #0]
 800c0fc:	d103      	bne.n	800c106 <HAL_RCC_OscConfig+0x162>
 800c0fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c102:	602b      	str	r3, [r5, #0]
 800c104:	e7ce      	b.n	800c0a4 <HAL_RCC_OscConfig+0x100>
 800c106:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c10a:	602b      	str	r3, [r5, #0]
 800c10c:	682b      	ldr	r3, [r5, #0]
 800c10e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c112:	e7ca      	b.n	800c0aa <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c114:	4947      	ldr	r1, [pc, #284]	@ (800c234 <HAL_RCC_OscConfig+0x290>)
 800c116:	68e2      	ldr	r2, [r4, #12]
 800c118:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c11a:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800c11c:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800c120:	d003      	beq.n	800c12a <HAL_RCC_OscConfig+0x186>
 800c122:	2b18      	cmp	r3, #24
 800c124:	d12a      	bne.n	800c17c <HAL_RCC_OscConfig+0x1d8>
 800c126:	0780      	lsls	r0, r0, #30
 800c128:	d128      	bne.n	800c17c <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c12a:	680b      	ldr	r3, [r1, #0]
 800c12c:	075b      	lsls	r3, r3, #29
 800c12e:	d501      	bpl.n	800c134 <HAL_RCC_OscConfig+0x190>
 800c130:	2a00      	cmp	r2, #0
 800c132:	d0b0      	beq.n	800c096 <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c134:	4d3f      	ldr	r5, [pc, #252]	@ (800c234 <HAL_RCC_OscConfig+0x290>)
 800c136:	682b      	ldr	r3, [r5, #0]
 800c138:	f023 0319 	bic.w	r3, r3, #25
 800c13c:	4313      	orrs	r3, r2
 800c13e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800c140:	f7fc fd9c 	bl	8008c7c <HAL_GetTick>
 800c144:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c146:	682b      	ldr	r3, [r5, #0]
 800c148:	075f      	lsls	r7, r3, #29
 800c14a:	d511      	bpl.n	800c170 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c14c:	f7fc fdae 	bl	8008cac <HAL_GetREVID>
 800c150:	f241 0303 	movw	r3, #4099	@ 0x1003
 800c154:	6922      	ldr	r2, [r4, #16]
 800c156:	4298      	cmp	r0, r3
 800c158:	686b      	ldr	r3, [r5, #4]
 800c15a:	d822      	bhi.n	800c1a2 <HAL_RCC_OscConfig+0x1fe>
 800c15c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800c160:	2a40      	cmp	r2, #64	@ 0x40
 800c162:	bf0c      	ite	eq
 800c164:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 800c168:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800c16c:	606b      	str	r3, [r5, #4]
 800c16e:	e724      	b.n	800bfba <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c170:	f7fc fd84 	bl	8008c7c <HAL_GetTick>
 800c174:	1b80      	subs	r0, r0, r6
 800c176:	2802      	cmp	r0, #2
 800c178:	d9e5      	bls.n	800c146 <HAL_RCC_OscConfig+0x1a2>
 800c17a:	e7a4      	b.n	800c0c6 <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c17c:	4d2d      	ldr	r5, [pc, #180]	@ (800c234 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c17e:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c180:	b1a2      	cbz	r2, 800c1ac <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c182:	f023 0319 	bic.w	r3, r3, #25
 800c186:	4313      	orrs	r3, r2
 800c188:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800c18a:	f7fc fd77 	bl	8008c7c <HAL_GetTick>
 800c18e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c190:	682b      	ldr	r3, [r5, #0]
 800c192:	0758      	lsls	r0, r3, #29
 800c194:	d4da      	bmi.n	800c14c <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c196:	f7fc fd71 	bl	8008c7c <HAL_GetTick>
 800c19a:	1b80      	subs	r0, r0, r6
 800c19c:	2802      	cmp	r0, #2
 800c19e:	d9f7      	bls.n	800c190 <HAL_RCC_OscConfig+0x1ec>
 800c1a0:	e791      	b.n	800c0c6 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c1a2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800c1a6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c1aa:	e7df      	b.n	800c16c <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 800c1ac:	f023 0301 	bic.w	r3, r3, #1
 800c1b0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800c1b2:	f7fc fd63 	bl	8008c7c <HAL_GetTick>
 800c1b6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c1b8:	682b      	ldr	r3, [r5, #0]
 800c1ba:	0759      	lsls	r1, r3, #29
 800c1bc:	f57f aefd 	bpl.w	800bfba <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c1c0:	f7fc fd5c 	bl	8008c7c <HAL_GetTick>
 800c1c4:	1b80      	subs	r0, r0, r6
 800c1c6:	2802      	cmp	r0, #2
 800c1c8:	d9f6      	bls.n	800c1b8 <HAL_RCC_OscConfig+0x214>
 800c1ca:	e77c      	b.n	800c0c6 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c1cc:	68da      	ldr	r2, [r3, #12]
 800c1ce:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 800c1d2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c1d6:	60da      	str	r2, [r3, #12]
 800c1d8:	e71a      	b.n	800c010 <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800c1da:	69e3      	ldr	r3, [r4, #28]
 800c1dc:	4d15      	ldr	r5, [pc, #84]	@ (800c234 <HAL_RCC_OscConfig+0x290>)
 800c1de:	b36b      	cbz	r3, 800c23c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 800c1e0:	682b      	ldr	r3, [r5, #0]
 800c1e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1e6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800c1e8:	f7fc fd48 	bl	8008c7c <HAL_GetTick>
 800c1ec:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c1ee:	682b      	ldr	r3, [r5, #0]
 800c1f0:	05df      	lsls	r7, r3, #23
 800c1f2:	d511      	bpl.n	800c218 <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c1f4:	f7fc fd5a 	bl	8008cac <HAL_GetREVID>
 800c1f8:	f241 0303 	movw	r3, #4099	@ 0x1003
 800c1fc:	6a22      	ldr	r2, [r4, #32]
 800c1fe:	4298      	cmp	r0, r3
 800c200:	d810      	bhi.n	800c224 <HAL_RCC_OscConfig+0x280>
 800c202:	686b      	ldr	r3, [r5, #4]
 800c204:	2a20      	cmp	r2, #32
 800c206:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800c20a:	bf0c      	ite	eq
 800c20c:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 800c210:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800c214:	606b      	str	r3, [r5, #4]
 800c216:	e6fb      	b.n	800c010 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800c218:	f7fc fd30 	bl	8008c7c <HAL_GetTick>
 800c21c:	1b80      	subs	r0, r0, r6
 800c21e:	2802      	cmp	r0, #2
 800c220:	d9e5      	bls.n	800c1ee <HAL_RCC_OscConfig+0x24a>
 800c222:	e750      	b.n	800c0c6 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c224:	68eb      	ldr	r3, [r5, #12]
 800c226:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800c22a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c22e:	60eb      	str	r3, [r5, #12]
 800c230:	e6ee      	b.n	800c010 <HAL_RCC_OscConfig+0x6c>
 800c232:	bf00      	nop
 800c234:	58024400 	.word	0x58024400
 800c238:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 800c23c:	682b      	ldr	r3, [r5, #0]
 800c23e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c242:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800c244:	f7fc fd1a 	bl	8008c7c <HAL_GetTick>
 800c248:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c24a:	682b      	ldr	r3, [r5, #0]
 800c24c:	05d8      	lsls	r0, r3, #23
 800c24e:	f57f aedf 	bpl.w	800c010 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800c252:	f7fc fd13 	bl	8008c7c <HAL_GetTick>
 800c256:	1b80      	subs	r0, r0, r6
 800c258:	2802      	cmp	r0, #2
 800c25a:	d9f6      	bls.n	800c24a <HAL_RCC_OscConfig+0x2a6>
 800c25c:	e733      	b.n	800c0c6 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c25e:	6963      	ldr	r3, [r4, #20]
 800c260:	4da5      	ldr	r5, [pc, #660]	@ (800c4f8 <HAL_RCC_OscConfig+0x554>)
 800c262:	b183      	cbz	r3, 800c286 <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 800c264:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800c266:	f043 0301 	orr.w	r3, r3, #1
 800c26a:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800c26c:	f7fc fd06 	bl	8008c7c <HAL_GetTick>
 800c270:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c272:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800c274:	079b      	lsls	r3, r3, #30
 800c276:	f53f aecf 	bmi.w	800c018 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c27a:	f7fc fcff 	bl	8008c7c <HAL_GetTick>
 800c27e:	1b80      	subs	r0, r0, r6
 800c280:	2802      	cmp	r0, #2
 800c282:	d9f6      	bls.n	800c272 <HAL_RCC_OscConfig+0x2ce>
 800c284:	e71f      	b.n	800c0c6 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 800c286:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800c288:	f023 0301 	bic.w	r3, r3, #1
 800c28c:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800c28e:	f7fc fcf5 	bl	8008c7c <HAL_GetTick>
 800c292:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c294:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800c296:	079f      	lsls	r7, r3, #30
 800c298:	f57f aebe 	bpl.w	800c018 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c29c:	f7fc fcee 	bl	8008c7c <HAL_GetTick>
 800c2a0:	1b80      	subs	r0, r0, r6
 800c2a2:	2802      	cmp	r0, #2
 800c2a4:	d9f6      	bls.n	800c294 <HAL_RCC_OscConfig+0x2f0>
 800c2a6:	e70e      	b.n	800c0c6 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800c2a8:	69a3      	ldr	r3, [r4, #24]
 800c2aa:	4d93      	ldr	r5, [pc, #588]	@ (800c4f8 <HAL_RCC_OscConfig+0x554>)
 800c2ac:	b183      	cbz	r3, 800c2d0 <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 800c2ae:	682b      	ldr	r3, [r5, #0]
 800c2b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c2b4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800c2b6:	f7fc fce1 	bl	8008c7c <HAL_GetTick>
 800c2ba:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c2bc:	682b      	ldr	r3, [r5, #0]
 800c2be:	0498      	lsls	r0, r3, #18
 800c2c0:	f53f aeae 	bmi.w	800c020 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c2c4:	f7fc fcda 	bl	8008c7c <HAL_GetTick>
 800c2c8:	1b80      	subs	r0, r0, r6
 800c2ca:	2802      	cmp	r0, #2
 800c2cc:	d9f6      	bls.n	800c2bc <HAL_RCC_OscConfig+0x318>
 800c2ce:	e6fa      	b.n	800c0c6 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 800c2d0:	682b      	ldr	r3, [r5, #0]
 800c2d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c2d6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800c2d8:	f7fc fcd0 	bl	8008c7c <HAL_GetTick>
 800c2dc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c2de:	682b      	ldr	r3, [r5, #0]
 800c2e0:	0499      	lsls	r1, r3, #18
 800c2e2:	f57f ae9d 	bpl.w	800c020 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c2e6:	f7fc fcc9 	bl	8008c7c <HAL_GetTick>
 800c2ea:	1b80      	subs	r0, r0, r6
 800c2ec:	2802      	cmp	r0, #2
 800c2ee:	d9f6      	bls.n	800c2de <HAL_RCC_OscConfig+0x33a>
 800c2f0:	e6e9      	b.n	800c0c6 <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c2f2:	f7fc fcc3 	bl	8008c7c <HAL_GetTick>
 800c2f6:	1b80      	subs	r0, r0, r6
 800c2f8:	2864      	cmp	r0, #100	@ 0x64
 800c2fa:	f67f ae9c 	bls.w	800c036 <HAL_RCC_OscConfig+0x92>
 800c2fe:	e6e2      	b.n	800c0c6 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c300:	b9b3      	cbnz	r3, 800c330 <HAL_RCC_OscConfig+0x38c>
 800c302:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c304:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c308:	f023 0301 	bic.w	r3, r3, #1
 800c30c:	672b      	str	r3, [r5, #112]	@ 0x70
 800c30e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800c310:	f023 0304 	bic.w	r3, r3, #4
 800c314:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800c316:	f7fc fcb1 	bl	8008c7c <HAL_GetTick>
 800c31a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c31c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800c31e:	0798      	lsls	r0, r3, #30
 800c320:	f57f aea0 	bpl.w	800c064 <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c324:	f7fc fcaa 	bl	8008c7c <HAL_GetTick>
 800c328:	1b80      	subs	r0, r0, r6
 800c32a:	42b8      	cmp	r0, r7
 800c32c:	d9f6      	bls.n	800c31c <HAL_RCC_OscConfig+0x378>
 800c32e:	e6ca      	b.n	800c0c6 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c330:	2b05      	cmp	r3, #5
 800c332:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800c334:	d103      	bne.n	800c33e <HAL_RCC_OscConfig+0x39a>
 800c336:	f043 0304 	orr.w	r3, r3, #4
 800c33a:	672b      	str	r3, [r5, #112]	@ 0x70
 800c33c:	e684      	b.n	800c048 <HAL_RCC_OscConfig+0xa4>
 800c33e:	f023 0301 	bic.w	r3, r3, #1
 800c342:	672b      	str	r3, [r5, #112]	@ 0x70
 800c344:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800c346:	f023 0304 	bic.w	r3, r3, #4
 800c34a:	e680      	b.n	800c04e <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c34c:	f7fc fc96 	bl	8008c7c <HAL_GetTick>
 800c350:	1b40      	subs	r0, r0, r5
 800c352:	42b8      	cmp	r0, r7
 800c354:	f67f ae82 	bls.w	800c05c <HAL_RCC_OscConfig+0xb8>
 800c358:	e6b5      	b.n	800c0c6 <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800c35a:	4d67      	ldr	r5, [pc, #412]	@ (800c4f8 <HAL_RCC_OscConfig+0x554>)
 800c35c:	692b      	ldr	r3, [r5, #16]
 800c35e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c362:	2b18      	cmp	r3, #24
 800c364:	d07a      	beq.n	800c45c <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 800c366:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c368:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 800c36a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c36e:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c370:	d167      	bne.n	800c442 <HAL_RCC_OscConfig+0x49e>
        tickstart = HAL_GetTick();
 800c372:	f7fc fc83 	bl	8008c7c <HAL_GetTick>
 800c376:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c378:	682b      	ldr	r3, [r5, #0]
 800c37a:	0199      	lsls	r1, r3, #6
 800c37c:	d45b      	bmi.n	800c436 <HAL_RCC_OscConfig+0x492>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c37e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800c380:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800c382:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 800c386:	f023 0303 	bic.w	r3, r3, #3
 800c38a:	4313      	orrs	r3, r2
 800c38c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c38e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800c392:	62ab      	str	r3, [r5, #40]	@ 0x28
 800c394:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c396:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800c398:	3b01      	subs	r3, #1
 800c39a:	3a01      	subs	r2, #1
 800c39c:	025b      	lsls	r3, r3, #9
 800c39e:	0412      	lsls	r2, r2, #16
 800c3a0:	b29b      	uxth	r3, r3
 800c3a2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800c3a6:	4313      	orrs	r3, r2
 800c3a8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800c3aa:	3a01      	subs	r2, #1
 800c3ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c3b0:	4313      	orrs	r3, r2
 800c3b2:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800c3b4:	3a01      	subs	r2, #1
 800c3b6:	0612      	lsls	r2, r2, #24
 800c3b8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800c3bc:	4313      	orrs	r3, r2
 800c3be:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800c3c0:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800c3c2:	f023 0301 	bic.w	r3, r3, #1
 800c3c6:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c3c8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800c3ca:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800c3cc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c3d0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800c3d4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800c3d8:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800c3da:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800c3dc:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800c3de:	f023 030c 	bic.w	r3, r3, #12
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800c3e6:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800c3e8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800c3ea:	f023 0302 	bic.w	r3, r3, #2
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c3f2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800c3f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c3f8:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3fa:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800c3fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c400:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c402:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800c404:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c408:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800c40a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800c40c:	f043 0301 	orr.w	r3, r3, #1
 800c410:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800c412:	682b      	ldr	r3, [r5, #0]
 800c414:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c418:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800c41a:	f7fc fc2f 	bl	8008c7c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c41e:	4d36      	ldr	r5, [pc, #216]	@ (800c4f8 <HAL_RCC_OscConfig+0x554>)
        tickstart = HAL_GetTick();
 800c420:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c422:	682b      	ldr	r3, [r5, #0]
 800c424:	019a      	lsls	r2, r3, #6
 800c426:	f53f ae21 	bmi.w	800c06c <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c42a:	f7fc fc27 	bl	8008c7c <HAL_GetTick>
 800c42e:	1b00      	subs	r0, r0, r4
 800c430:	2802      	cmp	r0, #2
 800c432:	d9f6      	bls.n	800c422 <HAL_RCC_OscConfig+0x47e>
 800c434:	e647      	b.n	800c0c6 <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c436:	f7fc fc21 	bl	8008c7c <HAL_GetTick>
 800c43a:	1b80      	subs	r0, r0, r6
 800c43c:	2802      	cmp	r0, #2
 800c43e:	d99b      	bls.n	800c378 <HAL_RCC_OscConfig+0x3d4>
 800c440:	e641      	b.n	800c0c6 <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 800c442:	f7fc fc1b 	bl	8008c7c <HAL_GetTick>
 800c446:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c448:	682b      	ldr	r3, [r5, #0]
 800c44a:	019b      	lsls	r3, r3, #6
 800c44c:	f57f ae0e 	bpl.w	800c06c <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c450:	f7fc fc14 	bl	8008c7c <HAL_GetTick>
 800c454:	1b00      	subs	r0, r0, r4
 800c456:	2802      	cmp	r0, #2
 800c458:	d9f6      	bls.n	800c448 <HAL_RCC_OscConfig+0x4a4>
 800c45a:	e634      	b.n	800c0c6 <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c45c:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800c45e:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c460:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c462:	f43f ae18 	beq.w	800c096 <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c466:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c46a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800c46c:	4281      	cmp	r1, r0
 800c46e:	f47f ae12 	bne.w	800c096 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c472:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c476:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c478:	428a      	cmp	r2, r1
 800c47a:	f47f ae0c 	bne.w	800c096 <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c47e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800c480:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800c484:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c486:	4291      	cmp	r1, r2
 800c488:	f47f ae05 	bne.w	800c096 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c48c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800c48e:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800c492:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c494:	4291      	cmp	r1, r2
 800c496:	f47f adfe 	bne.w	800c096 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c49a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800c49c:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800c4a0:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c4a2:	4291      	cmp	r1, r2
 800c4a4:	f47f adf7 	bne.w	800c096 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800c4a8:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800c4aa:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800c4ae:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	f47f adf0 	bne.w	800c096 <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800c4b6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800c4b8:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800c4ba:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800c4be:	429a      	cmp	r2, r3
 800c4c0:	f43f add4 	beq.w	800c06c <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
 800c4c4:	4d0c      	ldr	r5, [pc, #48]	@ (800c4f8 <HAL_RCC_OscConfig+0x554>)
 800c4c6:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800c4c8:	f023 0301 	bic.w	r3, r3, #1
 800c4cc:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 800c4ce:	f7fc fbd5 	bl	8008c7c <HAL_GetTick>
 800c4d2:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800c4d4:	f7fc fbd2 	bl	8008c7c <HAL_GetTick>
 800c4d8:	42b0      	cmp	r0, r6
 800c4da:	d0fb      	beq.n	800c4d4 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c4dc:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800c4de:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800c4e0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c4e4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800c4e8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800c4ec:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800c4ee:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800c4f0:	f043 0301 	orr.w	r3, r3, #1
 800c4f4:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800c4f6:	e5b9      	b.n	800c06c <HAL_RCC_OscConfig+0xc8>
 800c4f8:	58024400 	.word	0x58024400

0800c4fc <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800c4fc:	b570      	push	{r4, r5, r6, lr}
 800c4fe:	4c23      	ldr	r4, [pc, #140]	@ (800c58c <HAL_RCC_MCOConfig+0x90>)
 800c500:	b088      	sub	sp, #32
 800c502:	460e      	mov	r6, r1
 800c504:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800c506:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  if (RCC_MCOx == RCC_MCO1)
 800c50a:	b9f8      	cbnz	r0, 800c54c <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 800c50c:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c510:	f44f 7c80 	mov.w	ip, #256	@ 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800c514:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 800c516:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800c51a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800c51e:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 800c520:	f003 0301 	and.w	r3, r3, #1
 800c524:	9301      	str	r3, [sp, #4]
 800c526:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c528:	2302      	movs	r3, #2
 800c52a:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c52e:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c530:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800c534:	4816      	ldr	r0, [pc, #88]	@ (800c590 <HAL_RCC_MCOConfig+0x94>)
 800c536:	f7fd fa27 	bl	8009988 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800c53a:	6923      	ldr	r3, [r4, #16]
 800c53c:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 800c540:	ea43 0106 	orr.w	r1, r3, r6
 800c544:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800c546:	6121      	str	r1, [r4, #16]
  }
}
 800c548:	b008      	add	sp, #32
 800c54a:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 800c54c:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c550:	f44f 7200 	mov.w	r2, #512	@ 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c554:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800c556:	480f      	ldr	r0, [pc, #60]	@ (800c594 <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 800c558:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800c55c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800c560:	f003 0304 	and.w	r3, r3, #4
 800c564:	9302      	str	r3, [sp, #8]
 800c566:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c568:	2302      	movs	r3, #2
 800c56a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c56e:	2300      	movs	r3, #0
 800c570:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800c574:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800c576:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800c578:	f7fd fa06 	bl	8009988 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800c57c:	6923      	ldr	r3, [r4, #16]
 800c57e:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800c582:	ea43 0106 	orr.w	r1, r3, r6
 800c586:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 800c58a:	e7dc      	b.n	800c546 <HAL_RCC_MCOConfig+0x4a>
 800c58c:	58024400 	.word	0x58024400
 800c590:	58020000 	.word	0x58020000
 800c594:	58020800 	.word	0x58020800

0800c598 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c598:	4b49      	ldr	r3, [pc, #292]	@ (800c6c0 <HAL_RCC_GetSysClockFreq+0x128>)
 800c59a:	691a      	ldr	r2, [r3, #16]
 800c59c:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800c5a0:	2a10      	cmp	r2, #16
{
 800c5a2:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c5a4:	f000 8088 	beq.w	800c6b8 <HAL_RCC_GetSysClockFreq+0x120>
 800c5a8:	2a18      	cmp	r2, #24
 800c5aa:	d00c      	beq.n	800c5c6 <HAL_RCC_GetSysClockFreq+0x2e>
 800c5ac:	2a00      	cmp	r2, #0
 800c5ae:	f040 8085 	bne.w	800c6bc <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c5b2:	681a      	ldr	r2, [r3, #0]
 800c5b4:	4843      	ldr	r0, [pc, #268]	@ (800c6c4 <HAL_RCC_GetSysClockFreq+0x12c>)
 800c5b6:	f012 0f20 	tst.w	r2, #32
 800c5ba:	d003      	beq.n	800c5c4 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c5c2:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800c5c4:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c5c6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c5c8:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c5ca:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 800c5cc:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c5d0:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c5d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 800c5d6:	d0f5      	beq.n	800c5c4 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c5d8:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c5dc:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c5e0:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c5e4:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c5e8:	4362      	muls	r2, r4
 800c5ea:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800c5ee:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c5f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c5f4:	ee06 2a90 	vmov	s13, r2
 800c5f8:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800c5fc:	d04e      	beq.n	800c69c <HAL_RCC_GetSysClockFreq+0x104>
 800c5fe:	2902      	cmp	r1, #2
 800c600:	d03e      	beq.n	800c680 <HAL_RCC_GetSysClockFreq+0xe8>
 800c602:	2900      	cmp	r1, #0
 800c604:	d14a      	bne.n	800c69c <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c606:	681a      	ldr	r2, [r3, #0]
 800c608:	0692      	lsls	r2, r2, #26
 800c60a:	d527      	bpl.n	800c65c <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c60c:	6819      	ldr	r1, [r3, #0]
 800c60e:	4a2d      	ldr	r2, [pc, #180]	@ (800c6c4 <HAL_RCC_GetSysClockFreq+0x12c>)
 800c610:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c616:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c61c:	ee07 2a90 	vmov	s15, r2
 800c620:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800c624:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800c628:	ee07 3a10 	vmov	s14, r3
 800c62c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c630:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c634:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c638:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c63c:	4b20      	ldr	r3, [pc, #128]	@ (800c6c0 <HAL_RCC_GetSysClockFreq+0x128>)
 800c63e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c640:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800c644:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c646:	ee07 3a10 	vmov	s14, r3
 800c64a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800c64e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c652:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800c656:	ee17 0a90 	vmov	r0, s15
 800c65a:	e7b3      	b.n	800c5c4 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c65c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c65e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c662:	ee07 3a90 	vmov	s15, r3
 800c666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c66a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c66e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c672:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800c6c8 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c676:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800c67a:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 800c67e:	e7dd      	b.n	800c63c <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c686:	ee07 3a90 	vmov	s15, r3
 800c68a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c68e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c692:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c696:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 800c6cc <HAL_RCC_GetSysClockFreq+0x134>
 800c69a:	e7ec      	b.n	800c676 <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c69c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c69e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6a2:	ee07 3a90 	vmov	s15, r3
 800c6a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c6aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6ae:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c6b2:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 800c6d0 <HAL_RCC_GetSysClockFreq+0x138>
 800c6b6:	e7de      	b.n	800c676 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c6b8:	4806      	ldr	r0, [pc, #24]	@ (800c6d4 <HAL_RCC_GetSysClockFreq+0x13c>)
 800c6ba:	e783      	b.n	800c5c4 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 800c6bc:	4806      	ldr	r0, [pc, #24]	@ (800c6d8 <HAL_RCC_GetSysClockFreq+0x140>)
 800c6be:	e781      	b.n	800c5c4 <HAL_RCC_GetSysClockFreq+0x2c>
 800c6c0:	58024400 	.word	0x58024400
 800c6c4:	03d09000 	.word	0x03d09000
 800c6c8:	4c742400 	.word	0x4c742400
 800c6cc:	4bbebc20 	.word	0x4bbebc20
 800c6d0:	4a742400 	.word	0x4a742400
 800c6d4:	017d7840 	.word	0x017d7840
 800c6d8:	003d0900 	.word	0x003d0900

0800c6dc <HAL_RCC_ClockConfig>:
{
 800c6dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6e0:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800c6e2:	4604      	mov	r4, r0
 800c6e4:	b910      	cbnz	r0, 800c6ec <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800c6e6:	2001      	movs	r0, #1
}
 800c6e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c6ec:	4a88      	ldr	r2, [pc, #544]	@ (800c910 <HAL_RCC_ClockConfig+0x234>)
 800c6ee:	6813      	ldr	r3, [r2, #0]
 800c6f0:	f003 030f 	and.w	r3, r3, #15
 800c6f4:	428b      	cmp	r3, r1
 800c6f6:	f0c0 8093 	bcc.w	800c820 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c6fa:	6823      	ldr	r3, [r4, #0]
 800c6fc:	075f      	lsls	r7, r3, #29
 800c6fe:	f100 809b 	bmi.w	800c838 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c702:	071e      	lsls	r6, r3, #28
 800c704:	d50b      	bpl.n	800c71e <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c706:	4983      	ldr	r1, [pc, #524]	@ (800c914 <HAL_RCC_ClockConfig+0x238>)
 800c708:	6960      	ldr	r0, [r4, #20]
 800c70a:	69ca      	ldr	r2, [r1, #28]
 800c70c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800c710:	4290      	cmp	r0, r2
 800c712:	d904      	bls.n	800c71e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c714:	69ca      	ldr	r2, [r1, #28]
 800c716:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800c71a:	4302      	orrs	r2, r0
 800c71c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c71e:	06d8      	lsls	r0, r3, #27
 800c720:	d50b      	bpl.n	800c73a <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c722:	497c      	ldr	r1, [pc, #496]	@ (800c914 <HAL_RCC_ClockConfig+0x238>)
 800c724:	69a0      	ldr	r0, [r4, #24]
 800c726:	69ca      	ldr	r2, [r1, #28]
 800c728:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800c72c:	4290      	cmp	r0, r2
 800c72e:	d904      	bls.n	800c73a <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c730:	69ca      	ldr	r2, [r1, #28]
 800c732:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800c736:	4302      	orrs	r2, r0
 800c738:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c73a:	0699      	lsls	r1, r3, #26
 800c73c:	d50b      	bpl.n	800c756 <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c73e:	4975      	ldr	r1, [pc, #468]	@ (800c914 <HAL_RCC_ClockConfig+0x238>)
 800c740:	69e0      	ldr	r0, [r4, #28]
 800c742:	6a0a      	ldr	r2, [r1, #32]
 800c744:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800c748:	4290      	cmp	r0, r2
 800c74a:	d904      	bls.n	800c756 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c74c:	6a0a      	ldr	r2, [r1, #32]
 800c74e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800c752:	4302      	orrs	r2, r0
 800c754:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c756:	079a      	lsls	r2, r3, #30
 800c758:	d50b      	bpl.n	800c772 <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c75a:	496e      	ldr	r1, [pc, #440]	@ (800c914 <HAL_RCC_ClockConfig+0x238>)
 800c75c:	68e0      	ldr	r0, [r4, #12]
 800c75e:	698a      	ldr	r2, [r1, #24]
 800c760:	f002 020f 	and.w	r2, r2, #15
 800c764:	4290      	cmp	r0, r2
 800c766:	d904      	bls.n	800c772 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c768:	698a      	ldr	r2, [r1, #24]
 800c76a:	f022 020f 	bic.w	r2, r2, #15
 800c76e:	4302      	orrs	r2, r0
 800c770:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c772:	07df      	lsls	r7, r3, #31
 800c774:	d46e      	bmi.n	800c854 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c776:	6823      	ldr	r3, [r4, #0]
 800c778:	079e      	lsls	r6, r3, #30
 800c77a:	f100 80a1 	bmi.w	800c8c0 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c77e:	4964      	ldr	r1, [pc, #400]	@ (800c910 <HAL_RCC_ClockConfig+0x234>)
 800c780:	680a      	ldr	r2, [r1, #0]
 800c782:	f002 020f 	and.w	r2, r2, #15
 800c786:	42aa      	cmp	r2, r5
 800c788:	f200 80a8 	bhi.w	800c8dc <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c78c:	0758      	lsls	r0, r3, #29
 800c78e:	f100 80b1 	bmi.w	800c8f4 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c792:	0719      	lsls	r1, r3, #28
 800c794:	d50b      	bpl.n	800c7ae <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c796:	495f      	ldr	r1, [pc, #380]	@ (800c914 <HAL_RCC_ClockConfig+0x238>)
 800c798:	6960      	ldr	r0, [r4, #20]
 800c79a:	69ca      	ldr	r2, [r1, #28]
 800c79c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800c7a0:	4290      	cmp	r0, r2
 800c7a2:	d204      	bcs.n	800c7ae <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c7a4:	69ca      	ldr	r2, [r1, #28]
 800c7a6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800c7aa:	4302      	orrs	r2, r0
 800c7ac:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c7ae:	06da      	lsls	r2, r3, #27
 800c7b0:	d50b      	bpl.n	800c7ca <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c7b2:	4958      	ldr	r1, [pc, #352]	@ (800c914 <HAL_RCC_ClockConfig+0x238>)
 800c7b4:	69a0      	ldr	r0, [r4, #24]
 800c7b6:	69ca      	ldr	r2, [r1, #28]
 800c7b8:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800c7bc:	4290      	cmp	r0, r2
 800c7be:	d204      	bcs.n	800c7ca <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c7c0:	69ca      	ldr	r2, [r1, #28]
 800c7c2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800c7c6:	4302      	orrs	r2, r0
 800c7c8:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c7ca:	069b      	lsls	r3, r3, #26
 800c7cc:	d50b      	bpl.n	800c7e6 <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c7ce:	4a51      	ldr	r2, [pc, #324]	@ (800c914 <HAL_RCC_ClockConfig+0x238>)
 800c7d0:	69e1      	ldr	r1, [r4, #28]
 800c7d2:	6a13      	ldr	r3, [r2, #32]
 800c7d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c7d8:	4299      	cmp	r1, r3
 800c7da:	d204      	bcs.n	800c7e6 <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c7dc:	6a13      	ldr	r3, [r2, #32]
 800c7de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7e2:	430b      	orrs	r3, r1
 800c7e4:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c7e6:	f7ff fed7 	bl	800c598 <HAL_RCC_GetSysClockFreq>
 800c7ea:	494a      	ldr	r1, [pc, #296]	@ (800c914 <HAL_RCC_ClockConfig+0x238>)
 800c7ec:	4a4a      	ldr	r2, [pc, #296]	@ (800c918 <HAL_RCC_ClockConfig+0x23c>)
 800c7ee:	698b      	ldr	r3, [r1, #24]
 800c7f0:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800c7f4:	5cd3      	ldrb	r3, [r2, r3]
 800c7f6:	f003 031f 	and.w	r3, r3, #31
 800c7fa:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c7fc:	698b      	ldr	r3, [r1, #24]
 800c7fe:	f003 030f 	and.w	r3, r3, #15
 800c802:	5cd3      	ldrb	r3, [r2, r3]
 800c804:	4a45      	ldr	r2, [pc, #276]	@ (800c91c <HAL_RCC_ClockConfig+0x240>)
 800c806:	f003 031f 	and.w	r3, r3, #31
 800c80a:	fa20 f303 	lsr.w	r3, r0, r3
 800c80e:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800c810:	4b43      	ldr	r3, [pc, #268]	@ (800c920 <HAL_RCC_ClockConfig+0x244>)
 800c812:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 800c814:	4b43      	ldr	r3, [pc, #268]	@ (800c924 <HAL_RCC_ClockConfig+0x248>)
}
 800c816:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800c81a:	6818      	ldr	r0, [r3, #0]
 800c81c:	f7f5 b856 	b.w	80018cc <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c820:	6813      	ldr	r3, [r2, #0]
 800c822:	f023 030f 	bic.w	r3, r3, #15
 800c826:	430b      	orrs	r3, r1
 800c828:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c82a:	6813      	ldr	r3, [r2, #0]
 800c82c:	f003 030f 	and.w	r3, r3, #15
 800c830:	428b      	cmp	r3, r1
 800c832:	f47f af58 	bne.w	800c6e6 <HAL_RCC_ClockConfig+0xa>
 800c836:	e760      	b.n	800c6fa <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c838:	4936      	ldr	r1, [pc, #216]	@ (800c914 <HAL_RCC_ClockConfig+0x238>)
 800c83a:	6920      	ldr	r0, [r4, #16]
 800c83c:	698a      	ldr	r2, [r1, #24]
 800c83e:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800c842:	4290      	cmp	r0, r2
 800c844:	f67f af5d 	bls.w	800c702 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c848:	698a      	ldr	r2, [r1, #24]
 800c84a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800c84e:	4302      	orrs	r2, r0
 800c850:	618a      	str	r2, [r1, #24]
 800c852:	e756      	b.n	800c702 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800c854:	4b2f      	ldr	r3, [pc, #188]	@ (800c914 <HAL_RCC_ClockConfig+0x238>)
 800c856:	68a1      	ldr	r1, [r4, #8]
 800c858:	699a      	ldr	r2, [r3, #24]
 800c85a:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 800c85e:	430a      	orrs	r2, r1
 800c860:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c862:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c864:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c866:	2902      	cmp	r1, #2
 800c868:	d11d      	bne.n	800c8a6 <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c86a:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c86e:	f43f af3a 	beq.w	800c6e6 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c872:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c874:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c878:	4f26      	ldr	r7, [pc, #152]	@ (800c914 <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c87a:	f022 0207 	bic.w	r2, r2, #7
 800c87e:	430a      	orrs	r2, r1
 800c880:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 800c882:	f7fc f9fb 	bl	8008c7c <HAL_GetTick>
 800c886:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	6862      	ldr	r2, [r4, #4]
 800c88c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c890:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800c894:	f43f af6f 	beq.w	800c776 <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c898:	f7fc f9f0 	bl	8008c7c <HAL_GetTick>
 800c89c:	1b80      	subs	r0, r0, r6
 800c89e:	4540      	cmp	r0, r8
 800c8a0:	d9f2      	bls.n	800c888 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 800c8a2:	2003      	movs	r0, #3
 800c8a4:	e720      	b.n	800c6e8 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c8a6:	2903      	cmp	r1, #3
 800c8a8:	d102      	bne.n	800c8b0 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c8aa:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800c8ae:	e7de      	b.n	800c86e <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c8b0:	2901      	cmp	r1, #1
 800c8b2:	d102      	bne.n	800c8ba <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c8b4:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800c8b8:	e7d9      	b.n	800c86e <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c8ba:	f012 0f04 	tst.w	r2, #4
 800c8be:	e7d6      	b.n	800c86e <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c8c0:	4914      	ldr	r1, [pc, #80]	@ (800c914 <HAL_RCC_ClockConfig+0x238>)
 800c8c2:	68e0      	ldr	r0, [r4, #12]
 800c8c4:	698a      	ldr	r2, [r1, #24]
 800c8c6:	f002 020f 	and.w	r2, r2, #15
 800c8ca:	4290      	cmp	r0, r2
 800c8cc:	f4bf af57 	bcs.w	800c77e <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c8d0:	698a      	ldr	r2, [r1, #24]
 800c8d2:	f022 020f 	bic.w	r2, r2, #15
 800c8d6:	4302      	orrs	r2, r0
 800c8d8:	618a      	str	r2, [r1, #24]
 800c8da:	e750      	b.n	800c77e <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c8dc:	680a      	ldr	r2, [r1, #0]
 800c8de:	f022 020f 	bic.w	r2, r2, #15
 800c8e2:	432a      	orrs	r2, r5
 800c8e4:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c8e6:	680a      	ldr	r2, [r1, #0]
 800c8e8:	f002 020f 	and.w	r2, r2, #15
 800c8ec:	42aa      	cmp	r2, r5
 800c8ee:	f47f aefa 	bne.w	800c6e6 <HAL_RCC_ClockConfig+0xa>
 800c8f2:	e74b      	b.n	800c78c <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c8f4:	4907      	ldr	r1, [pc, #28]	@ (800c914 <HAL_RCC_ClockConfig+0x238>)
 800c8f6:	6920      	ldr	r0, [r4, #16]
 800c8f8:	698a      	ldr	r2, [r1, #24]
 800c8fa:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800c8fe:	4290      	cmp	r0, r2
 800c900:	f4bf af47 	bcs.w	800c792 <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c904:	698a      	ldr	r2, [r1, #24]
 800c906:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800c90a:	4302      	orrs	r2, r0
 800c90c:	618a      	str	r2, [r1, #24]
 800c90e:	e740      	b.n	800c792 <HAL_RCC_ClockConfig+0xb6>
 800c910:	52002000 	.word	0x52002000
 800c914:	58024400 	.word	0x58024400
 800c918:	08028d68 	.word	0x08028d68
 800c91c:	24000068 	.word	0x24000068
 800c920:	2400006c 	.word	0x2400006c
 800c924:	24000074 	.word	0x24000074

0800c928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c928:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c92a:	f7ff fe35 	bl	800c598 <HAL_RCC_GetSysClockFreq>
 800c92e:	4a0b      	ldr	r2, [pc, #44]	@ (800c95c <HAL_RCC_GetHCLKFreq+0x34>)
 800c930:	490b      	ldr	r1, [pc, #44]	@ (800c960 <HAL_RCC_GetHCLKFreq+0x38>)
 800c932:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c934:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c936:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c93a:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c93e:	5ccb      	ldrb	r3, [r1, r3]
 800c940:	f003 031f 	and.w	r3, r3, #31
 800c944:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c948:	5c88      	ldrb	r0, [r1, r2]
 800c94a:	4a06      	ldr	r2, [pc, #24]	@ (800c964 <HAL_RCC_GetHCLKFreq+0x3c>)
 800c94c:	f000 001f 	and.w	r0, r0, #31
 800c950:	fa23 f000 	lsr.w	r0, r3, r0
 800c954:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c956:	4a04      	ldr	r2, [pc, #16]	@ (800c968 <HAL_RCC_GetHCLKFreq+0x40>)
 800c958:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800c95a:	bd08      	pop	{r3, pc}
 800c95c:	58024400 	.word	0x58024400
 800c960:	08028d68 	.word	0x08028d68
 800c964:	24000068 	.word	0x24000068
 800c968:	2400006c 	.word	0x2400006c

0800c96c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c96c:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c96e:	f7ff ffdb 	bl	800c928 <HAL_RCC_GetHCLKFreq>
 800c972:	4b05      	ldr	r3, [pc, #20]	@ (800c988 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800c974:	4a05      	ldr	r2, [pc, #20]	@ (800c98c <HAL_RCC_GetPCLK1Freq+0x20>)
 800c976:	69db      	ldr	r3, [r3, #28]
 800c978:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800c97c:	5cd3      	ldrb	r3, [r2, r3]
 800c97e:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c982:	40d8      	lsrs	r0, r3
 800c984:	bd08      	pop	{r3, pc}
 800c986:	bf00      	nop
 800c988:	58024400 	.word	0x58024400
 800c98c:	08028d68 	.word	0x08028d68

0800c990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c990:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c992:	f7ff ffc9 	bl	800c928 <HAL_RCC_GetHCLKFreq>
 800c996:	4b05      	ldr	r3, [pc, #20]	@ (800c9ac <HAL_RCC_GetPCLK2Freq+0x1c>)
 800c998:	4a05      	ldr	r2, [pc, #20]	@ (800c9b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c99a:	69db      	ldr	r3, [r3, #28]
 800c99c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800c9a0:	5cd3      	ldrb	r3, [r2, r3]
 800c9a2:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c9a6:	40d8      	lsrs	r0, r3
 800c9a8:	bd08      	pop	{r3, pc}
 800c9aa:	bf00      	nop
 800c9ac:	58024400 	.word	0x58024400
 800c9b0:	08028d68 	.word	0x08028d68

0800c9b4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800c9b4:	233f      	movs	r3, #63	@ 0x3f
 800c9b6:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c9b8:	4b11      	ldr	r3, [pc, #68]	@ (800ca00 <HAL_RCC_GetClockConfig+0x4c>)
 800c9ba:	691a      	ldr	r2, [r3, #16]
 800c9bc:	f002 0207 	and.w	r2, r2, #7
 800c9c0:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800c9c2:	699a      	ldr	r2, [r3, #24]
 800c9c4:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800c9c8:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800c9ca:	699a      	ldr	r2, [r3, #24]
 800c9cc:	f002 020f 	and.w	r2, r2, #15
 800c9d0:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800c9d2:	699a      	ldr	r2, [r3, #24]
 800c9d4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800c9d8:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800c9da:	69da      	ldr	r2, [r3, #28]
 800c9dc:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800c9e0:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800c9e2:	69da      	ldr	r2, [r3, #28]
 800c9e4:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800c9e8:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800c9ea:	6a1b      	ldr	r3, [r3, #32]
 800c9ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c9f0:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c9f2:	4b04      	ldr	r3, [pc, #16]	@ (800ca04 <HAL_RCC_GetClockConfig+0x50>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f003 030f 	and.w	r3, r3, #15
 800c9fa:	600b      	str	r3, [r1, #0]
}
 800c9fc:	4770      	bx	lr
 800c9fe:	bf00      	nop
 800ca00:	58024400 	.word	0x58024400
 800ca04:	52002000 	.word	0x52002000

0800ca08 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ca08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ca0a:	4c3a      	ldr	r4, [pc, #232]	@ (800caf4 <RCCEx_PLL2_Config+0xec>)
{
 800ca0c:	4606      	mov	r6, r0
 800ca0e:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ca10:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ca12:	f003 0303 	and.w	r3, r3, #3
 800ca16:	2b03      	cmp	r3, #3
 800ca18:	d069      	beq.n	800caee <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ca1a:	6823      	ldr	r3, [r4, #0]
 800ca1c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ca20:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca22:	f7fc f92b 	bl	8008c7c <HAL_GetTick>
 800ca26:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ca28:	6823      	ldr	r3, [r4, #0]
 800ca2a:	011a      	lsls	r2, r3, #4
 800ca2c:	d44b      	bmi.n	800cac6 <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ca2e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ca30:	6832      	ldr	r2, [r6, #0]
 800ca32:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800ca36:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800ca3a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ca3c:	68b3      	ldr	r3, [r6, #8]
 800ca3e:	68f2      	ldr	r2, [r6, #12]
 800ca40:	3b01      	subs	r3, #1
 800ca42:	3a01      	subs	r2, #1
 800ca44:	025b      	lsls	r3, r3, #9
 800ca46:	0412      	lsls	r2, r2, #16
 800ca48:	b29b      	uxth	r3, r3
 800ca4a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800ca4e:	4313      	orrs	r3, r2
 800ca50:	6872      	ldr	r2, [r6, #4]
 800ca52:	3a01      	subs	r2, #1
 800ca54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ca58:	4313      	orrs	r3, r2
 800ca5a:	6932      	ldr	r2, [r6, #16]
 800ca5c:	3a01      	subs	r2, #1
 800ca5e:	0612      	lsls	r2, r2, #24
 800ca60:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800ca64:	4313      	orrs	r3, r2
 800ca66:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ca68:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ca6a:	6972      	ldr	r2, [r6, #20]
 800ca6c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ca70:	4313      	orrs	r3, r2
 800ca72:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ca74:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ca76:	69b2      	ldr	r2, [r6, #24]
 800ca78:	f023 0320 	bic.w	r3, r3, #32
 800ca7c:	4313      	orrs	r3, r2
 800ca7e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ca80:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ca82:	f023 0310 	bic.w	r3, r3, #16
 800ca86:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ca88:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ca8a:	69f2      	ldr	r2, [r6, #28]
 800ca8c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ca90:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800ca94:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800ca98:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ca9a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ca9c:	f043 0310 	orr.w	r3, r3, #16
 800caa0:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800caa2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800caa4:	b9b5      	cbnz	r5, 800cad4 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800caa6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800caaa:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800caac:	4c11      	ldr	r4, [pc, #68]	@ (800caf4 <RCCEx_PLL2_Config+0xec>)
 800caae:	6823      	ldr	r3, [r4, #0]
 800cab0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800cab4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cab6:	f7fc f8e1 	bl	8008c7c <HAL_GetTick>
 800caba:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cabc:	6823      	ldr	r3, [r4, #0]
 800cabe:	011b      	lsls	r3, r3, #4
 800cac0:	d50f      	bpl.n	800cae2 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 800cac2:	2000      	movs	r0, #0
 800cac4:	e005      	b.n	800cad2 <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cac6:	f7fc f8d9 	bl	8008c7c <HAL_GetTick>
 800caca:	1bc0      	subs	r0, r0, r7
 800cacc:	2802      	cmp	r0, #2
 800cace:	d9ab      	bls.n	800ca28 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 800cad0:	2003      	movs	r0, #3
}
 800cad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800cad4:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cad6:	bf0c      	ite	eq
 800cad8:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cadc:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 800cae0:	e7e3      	b.n	800caaa <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cae2:	f7fc f8cb 	bl	8008c7c <HAL_GetTick>
 800cae6:	1b40      	subs	r0, r0, r5
 800cae8:	2802      	cmp	r0, #2
 800caea:	d9e7      	bls.n	800cabc <RCCEx_PLL2_Config+0xb4>
 800caec:	e7f0      	b.n	800cad0 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 800caee:	2001      	movs	r0, #1
 800caf0:	e7ef      	b.n	800cad2 <RCCEx_PLL2_Config+0xca>
 800caf2:	bf00      	nop
 800caf4:	58024400 	.word	0x58024400

0800caf8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800caf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cafa:	4c3a      	ldr	r4, [pc, #232]	@ (800cbe4 <RCCEx_PLL3_Config+0xec>)
{
 800cafc:	4606      	mov	r6, r0
 800cafe:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cb00:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800cb02:	f003 0303 	and.w	r3, r3, #3
 800cb06:	2b03      	cmp	r3, #3
 800cb08:	d069      	beq.n	800cbde <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cb0a:	6823      	ldr	r3, [r4, #0]
 800cb0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cb10:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb12:	f7fc f8b3 	bl	8008c7c <HAL_GetTick>
 800cb16:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cb18:	6823      	ldr	r3, [r4, #0]
 800cb1a:	009a      	lsls	r2, r3, #2
 800cb1c:	d44b      	bmi.n	800cbb6 <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cb1e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800cb20:	6832      	ldr	r2, [r6, #0]
 800cb22:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 800cb26:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800cb2a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cb2c:	68b3      	ldr	r3, [r6, #8]
 800cb2e:	68f2      	ldr	r2, [r6, #12]
 800cb30:	3b01      	subs	r3, #1
 800cb32:	3a01      	subs	r2, #1
 800cb34:	025b      	lsls	r3, r3, #9
 800cb36:	0412      	lsls	r2, r2, #16
 800cb38:	b29b      	uxth	r3, r3
 800cb3a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800cb3e:	4313      	orrs	r3, r2
 800cb40:	6872      	ldr	r2, [r6, #4]
 800cb42:	3a01      	subs	r2, #1
 800cb44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cb48:	4313      	orrs	r3, r2
 800cb4a:	6932      	ldr	r2, [r6, #16]
 800cb4c:	3a01      	subs	r2, #1
 800cb4e:	0612      	lsls	r2, r2, #24
 800cb50:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800cb54:	4313      	orrs	r3, r2
 800cb56:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cb58:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cb5a:	6972      	ldr	r2, [r6, #20]
 800cb5c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800cb60:	4313      	orrs	r3, r2
 800cb62:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cb64:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cb66:	69b2      	ldr	r2, [r6, #24]
 800cb68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cb6c:	4313      	orrs	r3, r2
 800cb6e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cb70:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cb72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cb76:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cb78:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800cb7a:	69f2      	ldr	r2, [r6, #28]
 800cb7c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cb80:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800cb84:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800cb88:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cb8a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cb8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cb90:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cb92:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800cb94:	b9b5      	cbnz	r5, 800cbc4 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cb96:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cb9a:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cb9c:	4c11      	ldr	r4, [pc, #68]	@ (800cbe4 <RCCEx_PLL3_Config+0xec>)
 800cb9e:	6823      	ldr	r3, [r4, #0]
 800cba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cba4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cba6:	f7fc f869 	bl	8008c7c <HAL_GetTick>
 800cbaa:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cbac:	6823      	ldr	r3, [r4, #0]
 800cbae:	009b      	lsls	r3, r3, #2
 800cbb0:	d50f      	bpl.n	800cbd2 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 800cbb2:	2000      	movs	r0, #0
 800cbb4:	e005      	b.n	800cbc2 <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cbb6:	f7fc f861 	bl	8008c7c <HAL_GetTick>
 800cbba:	1bc0      	subs	r0, r0, r7
 800cbbc:	2802      	cmp	r0, #2
 800cbbe:	d9ab      	bls.n	800cb18 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 800cbc0:	2003      	movs	r0, #3
}
 800cbc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800cbc4:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cbc6:	bf0c      	ite	eq
 800cbc8:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cbcc:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 800cbd0:	e7e3      	b.n	800cb9a <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cbd2:	f7fc f853 	bl	8008c7c <HAL_GetTick>
 800cbd6:	1b40      	subs	r0, r0, r5
 800cbd8:	2802      	cmp	r0, #2
 800cbda:	d9e7      	bls.n	800cbac <RCCEx_PLL3_Config+0xb4>
 800cbdc:	e7f0      	b.n	800cbc0 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 800cbde:	2001      	movs	r0, #1
 800cbe0:	e7ef      	b.n	800cbc2 <RCCEx_PLL3_Config+0xca>
 800cbe2:	bf00      	nop
 800cbe4:	58024400 	.word	0x58024400

0800cbe8 <HAL_RCCEx_PeriphCLKConfig>:
{
 800cbe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800cbec:	6803      	ldr	r3, [r0, #0]
{
 800cbee:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800cbf0:	011c      	lsls	r4, r3, #4
 800cbf2:	d51e      	bpl.n	800cc32 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800cbf4:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800cbf6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cbfa:	d02a      	beq.n	800cc52 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800cbfc:	d80f      	bhi.n	800cc1e <HAL_RCCEx_PeriphCLKConfig+0x36>
 800cbfe:	b1d3      	cbz	r3, 800cc36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800cc00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cc04:	d01d      	beq.n	800cc42 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800cc06:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800cc08:	682b      	ldr	r3, [r5, #0]
 800cc0a:	05d8      	lsls	r0, r3, #23
 800cc0c:	d54f      	bpl.n	800ccae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai1ClockSelection)
 800cc0e:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 800cc10:	2b04      	cmp	r3, #4
 800cc12:	d84b      	bhi.n	800ccac <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800cc14:	e8df f003 	tbb	[pc, r3]
 800cc18:	27443d22 	.word	0x27443d22
 800cc1c:	27          	.byte	0x27
 800cc1d:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 800cc1e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800cc22:	d1f0      	bne.n	800cc06 <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800cc24:	4a86      	ldr	r2, [pc, #536]	@ (800ce40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800cc26:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 800cc28:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800cc2a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800cc2e:	430b      	orrs	r3, r1
 800cc30:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800cc32:	2600      	movs	r6, #0
 800cc34:	e7e8      	b.n	800cc08 <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc36:	4a82      	ldr	r2, [pc, #520]	@ (800ce40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800cc38:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800cc3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cc3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800cc40:	e7f0      	b.n	800cc24 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cc42:	2102      	movs	r1, #2
 800cc44:	3008      	adds	r0, #8
 800cc46:	f7ff fedf 	bl	800ca08 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cc4a:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800cc4c:	2800      	cmp	r0, #0
 800cc4e:	d1db      	bne.n	800cc08 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800cc50:	e7e8      	b.n	800cc24 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cc52:	2102      	movs	r1, #2
 800cc54:	3028      	adds	r0, #40	@ 0x28
 800cc56:	f7ff ff4f 	bl	800caf8 <RCCEx_PLL3_Config>
 800cc5a:	e7f6      	b.n	800cc4a <HAL_RCCEx_PeriphCLKConfig+0x62>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc5c:	4a78      	ldr	r2, [pc, #480]	@ (800ce40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800cc5e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800cc60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cc64:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 800cc66:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 800cc68:	bb1c      	cbnz	r4, 800ccb2 <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cc6a:	4a75      	ldr	r2, [pc, #468]	@ (800ce40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800cc6c:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 800cc6e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800cc70:	f023 0307 	bic.w	r3, r3, #7
 800cc74:	430b      	orrs	r3, r1
 800cc76:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800cc78:	682b      	ldr	r3, [r5, #0]
 800cc7a:	0599      	lsls	r1, r3, #22
 800cc7c:	d528      	bpl.n	800ccd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai23ClockSelection)
 800cc7e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800cc80:	2b80      	cmp	r3, #128	@ 0x80
 800cc82:	d043      	beq.n	800cd0c <HAL_RCCEx_PeriphCLKConfig+0x124>
 800cc84:	d817      	bhi.n	800ccb6 <HAL_RCCEx_PeriphCLKConfig+0xce>
 800cc86:	b3a3      	cbz	r3, 800ccf2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 800cc88:	2b40      	cmp	r3, #64	@ 0x40
 800cc8a:	d038      	beq.n	800ccfe <HAL_RCCEx_PeriphCLKConfig+0x116>
 800cc8c:	2601      	movs	r6, #1
 800cc8e:	4634      	mov	r4, r6
 800cc90:	e01e      	b.n	800ccd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cc92:	2100      	movs	r1, #0
 800cc94:	f105 0008 	add.w	r0, r5, #8
 800cc98:	f7ff feb6 	bl	800ca08 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cc9c:	4604      	mov	r4, r0
        break;
 800cc9e:	e7e3      	b.n	800cc68 <HAL_RCCEx_PeriphCLKConfig+0x80>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cca0:	2100      	movs	r1, #0
 800cca2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800cca6:	f7ff ff27 	bl	800caf8 <RCCEx_PLL3_Config>
 800ccaa:	e7f7      	b.n	800cc9c <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch (PeriphClkInit->Sai1ClockSelection)
 800ccac:	2601      	movs	r6, #1
 800ccae:	4634      	mov	r4, r6
 800ccb0:	e7e2      	b.n	800cc78 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ccb2:	4626      	mov	r6, r4
 800ccb4:	e7e0      	b.n	800cc78 <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch (PeriphClkInit->Sai23ClockSelection)
 800ccb6:	2bc0      	cmp	r3, #192	@ 0xc0
 800ccb8:	d002      	beq.n	800ccc0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800ccba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ccbe:	d1e5      	bne.n	800cc8c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    if (ret == HAL_OK)
 800ccc0:	bb54      	cbnz	r4, 800cd18 <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ccc2:	4a5f      	ldr	r2, [pc, #380]	@ (800ce40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ccc4:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800ccc6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800ccc8:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 800cccc:	430b      	orrs	r3, r1
 800ccce:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ccd0:	682b      	ldr	r3, [r5, #0]
 800ccd2:	055a      	lsls	r2, r3, #21
 800ccd4:	d531      	bpl.n	800cd3a <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4AClockSelection)
 800ccd6:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 800ccda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ccde:	d049      	beq.n	800cd74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800cce0:	d81c      	bhi.n	800cd1c <HAL_RCCEx_PeriphCLKConfig+0x134>
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d039      	beq.n	800cd5a <HAL_RCCEx_PeriphCLKConfig+0x172>
 800cce6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ccea:	d03c      	beq.n	800cd66 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800ccec:	2601      	movs	r6, #1
 800ccee:	4634      	mov	r4, r6
 800ccf0:	e023      	b.n	800cd3a <HAL_RCCEx_PeriphCLKConfig+0x152>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ccf2:	4a53      	ldr	r2, [pc, #332]	@ (800ce40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ccf4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ccf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ccfa:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800ccfc:	e7e0      	b.n	800ccc0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ccfe:	2100      	movs	r1, #0
 800cd00:	f105 0008 	add.w	r0, r5, #8
 800cd04:	f7ff fe80 	bl	800ca08 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cd08:	4604      	mov	r4, r0
        break;
 800cd0a:	e7d9      	b.n	800ccc0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cd0c:	2100      	movs	r1, #0
 800cd0e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800cd12:	f7ff fef1 	bl	800caf8 <RCCEx_PLL3_Config>
 800cd16:	e7f7      	b.n	800cd08 <HAL_RCCEx_PeriphCLKConfig+0x120>
 800cd18:	4626      	mov	r6, r4
 800cd1a:	e7d9      	b.n	800ccd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai4AClockSelection)
 800cd1c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800cd20:	d002      	beq.n	800cd28 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800cd22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cd26:	d1e1      	bne.n	800ccec <HAL_RCCEx_PeriphCLKConfig+0x104>
    if (ret == HAL_OK)
 800cd28:	bb54      	cbnz	r4, 800cd80 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800cd2a:	4a45      	ldr	r2, [pc, #276]	@ (800ce40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800cd2c:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 800cd30:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800cd32:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800cd36:	430b      	orrs	r3, r1
 800cd38:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800cd3a:	682b      	ldr	r3, [r5, #0]
 800cd3c:	051b      	lsls	r3, r3, #20
 800cd3e:	d530      	bpl.n	800cda2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->Sai4BClockSelection)
 800cd40:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 800cd44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cd48:	d045      	beq.n	800cdd6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800cd4a:	d81b      	bhi.n	800cd84 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800cd4c:	b3b3      	cbz	r3, 800cdbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800cd4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cd52:	d039      	beq.n	800cdc8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800cd54:	2601      	movs	r6, #1
 800cd56:	4634      	mov	r4, r6
 800cd58:	e023      	b.n	800cda2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cd5a:	4a39      	ldr	r2, [pc, #228]	@ (800ce40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800cd5c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800cd5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cd62:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800cd64:	e7e0      	b.n	800cd28 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cd66:	2100      	movs	r1, #0
 800cd68:	f105 0008 	add.w	r0, r5, #8
 800cd6c:	f7ff fe4c 	bl	800ca08 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cd70:	4604      	mov	r4, r0
        break;
 800cd72:	e7d9      	b.n	800cd28 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cd74:	2100      	movs	r1, #0
 800cd76:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800cd7a:	f7ff febd 	bl	800caf8 <RCCEx_PLL3_Config>
 800cd7e:	e7f7      	b.n	800cd70 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800cd80:	4626      	mov	r6, r4
 800cd82:	e7da      	b.n	800cd3a <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4BClockSelection)
 800cd84:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800cd88:	d002      	beq.n	800cd90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800cd8a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cd8e:	d1e1      	bne.n	800cd54 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if (ret == HAL_OK)
 800cd90:	bb3c      	cbnz	r4, 800cde2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800cd92:	4a2b      	ldr	r2, [pc, #172]	@ (800ce40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800cd94:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 800cd98:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800cd9a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800cd9e:	430b      	orrs	r3, r1
 800cda0:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800cda2:	682b      	ldr	r3, [r5, #0]
 800cda4:	019f      	lsls	r7, r3, #6
 800cda6:	d528      	bpl.n	800cdfa <HAL_RCCEx_PeriphCLKConfig+0x212>
    switch (PeriphClkInit->QspiClockSelection)
 800cda8:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800cdaa:	2b20      	cmp	r3, #32
 800cdac:	d03e      	beq.n	800ce2c <HAL_RCCEx_PeriphCLKConfig+0x244>
 800cdae:	d81a      	bhi.n	800cde6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800cdb0:	b1db      	cbz	r3, 800cdea <HAL_RCCEx_PeriphCLKConfig+0x202>
 800cdb2:	2b10      	cmp	r3, #16
 800cdb4:	d034      	beq.n	800ce20 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800cdb6:	2601      	movs	r6, #1
 800cdb8:	4634      	mov	r4, r6
 800cdba:	e01e      	b.n	800cdfa <HAL_RCCEx_PeriphCLKConfig+0x212>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cdbc:	4a20      	ldr	r2, [pc, #128]	@ (800ce40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800cdbe:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800cdc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cdc4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800cdc6:	e7e3      	b.n	800cd90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cdc8:	2100      	movs	r1, #0
 800cdca:	f105 0008 	add.w	r0, r5, #8
 800cdce:	f7ff fe1b 	bl	800ca08 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cdd2:	4604      	mov	r4, r0
        break;
 800cdd4:	e7dc      	b.n	800cd90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cdd6:	2100      	movs	r1, #0
 800cdd8:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800cddc:	f7ff fe8c 	bl	800caf8 <RCCEx_PLL3_Config>
 800cde0:	e7f7      	b.n	800cdd2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800cde2:	4626      	mov	r6, r4
 800cde4:	e7dd      	b.n	800cda2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->QspiClockSelection)
 800cde6:	2b30      	cmp	r3, #48	@ 0x30
 800cde8:	d1e5      	bne.n	800cdb6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    if (ret == HAL_OK)
 800cdea:	bb34      	cbnz	r4, 800ce3a <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800cdec:	4a14      	ldr	r2, [pc, #80]	@ (800ce40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800cdee:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800cdf0:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800cdf2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800cdf6:	430b      	orrs	r3, r1
 800cdf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800cdfa:	682b      	ldr	r3, [r5, #0]
 800cdfc:	04d8      	lsls	r0, r3, #19
 800cdfe:	d530      	bpl.n	800ce62 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi123ClockSelection)
 800ce00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ce06:	f000 8097 	beq.w	800cf38 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800ce0a:	d81b      	bhi.n	800ce44 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	f000 8086 	beq.w	800cf1e <HAL_RCCEx_PeriphCLKConfig+0x336>
 800ce12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ce16:	f000 8088 	beq.w	800cf2a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800ce1a:	2601      	movs	r6, #1
 800ce1c:	4634      	mov	r4, r6
 800ce1e:	e020      	b.n	800ce62 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce20:	4a07      	ldr	r2, [pc, #28]	@ (800ce40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ce22:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ce24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ce28:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800ce2a:	e7de      	b.n	800cdea <HAL_RCCEx_PeriphCLKConfig+0x202>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ce2c:	2102      	movs	r1, #2
 800ce2e:	f105 0008 	add.w	r0, r5, #8
 800ce32:	f7ff fde9 	bl	800ca08 <RCCEx_PLL2_Config>
 800ce36:	4604      	mov	r4, r0
        break;
 800ce38:	e7d7      	b.n	800cdea <HAL_RCCEx_PeriphCLKConfig+0x202>
 800ce3a:	4626      	mov	r6, r4
 800ce3c:	e7dd      	b.n	800cdfa <HAL_RCCEx_PeriphCLKConfig+0x212>
 800ce3e:	bf00      	nop
 800ce40:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 800ce44:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ce48:	d002      	beq.n	800ce50 <HAL_RCCEx_PeriphCLKConfig+0x268>
 800ce4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ce4e:	d1e4      	bne.n	800ce1a <HAL_RCCEx_PeriphCLKConfig+0x232>
    if (ret == HAL_OK)
 800ce50:	2c00      	cmp	r4, #0
 800ce52:	d177      	bne.n	800cf44 <HAL_RCCEx_PeriphCLKConfig+0x35c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ce54:	4a9e      	ldr	r2, [pc, #632]	@ (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800ce56:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 800ce58:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800ce5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ce5e:	430b      	orrs	r3, r1
 800ce60:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ce62:	682b      	ldr	r3, [r5, #0]
 800ce64:	0499      	lsls	r1, r3, #18
 800ce66:	d50c      	bpl.n	800ce82 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800ce68:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 800ce6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ce6e:	f000 8083 	beq.w	800cf78 <HAL_RCCEx_PeriphCLKConfig+0x390>
 800ce72:	d869      	bhi.n	800cf48 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d06f      	beq.n	800cf58 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800ce78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ce7c:	d075      	beq.n	800cf6a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800ce7e:	2601      	movs	r6, #1
 800ce80:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ce82:	682b      	ldr	r3, [r5, #0]
 800ce84:	045a      	lsls	r2, r3, #17
 800ce86:	d50e      	bpl.n	800cea6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->Spi6ClockSelection)
 800ce88:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 800ce8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ce90:	f000 8093 	beq.w	800cfba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800ce94:	d878      	bhi.n	800cf88 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d07e      	beq.n	800cf98 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800ce9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ce9e:	f000 8085 	beq.w	800cfac <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 800cea2:	2601      	movs	r6, #1
 800cea4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800cea6:	682b      	ldr	r3, [r5, #0]
 800cea8:	015b      	lsls	r3, r3, #5
 800ceaa:	d515      	bpl.n	800ced8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->DsiClockSelection)
 800ceac:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800ceae:	b14b      	cbz	r3, 800cec4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800ceb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ceb4:	f040 8089 	bne.w	800cfca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ceb8:	2101      	movs	r1, #1
 800ceba:	f105 0008 	add.w	r0, r5, #8
 800cebe:	f7ff fda3 	bl	800ca08 <RCCEx_PLL2_Config>
 800cec2:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800cec4:	2c00      	cmp	r4, #0
 800cec6:	f040 8083 	bne.w	800cfd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800ceca:	4a81      	ldr	r2, [pc, #516]	@ (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800cecc:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800cece:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800ced0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ced4:	430b      	orrs	r3, r1
 800ced6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ced8:	682b      	ldr	r3, [r5, #0]
 800ceda:	041f      	lsls	r7, r3, #16
 800cedc:	d511      	bpl.n	800cf02 <HAL_RCCEx_PeriphCLKConfig+0x31a>
    switch (PeriphClkInit->FdcanClockSelection)
 800cede:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800cee0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cee4:	d076      	beq.n	800cfd4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800cee6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ceea:	d079      	beq.n	800cfe0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d17e      	bne.n	800cfee <HAL_RCCEx_PeriphCLKConfig+0x406>
    if (ret == HAL_OK)
 800cef0:	2c00      	cmp	r4, #0
 800cef2:	d17f      	bne.n	800cff4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800cef4:	4a76      	ldr	r2, [pc, #472]	@ (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800cef6:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800cef8:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800cefa:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800cefe:	430b      	orrs	r3, r1
 800cf00:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800cf02:	682b      	ldr	r3, [r5, #0]
 800cf04:	01d8      	lsls	r0, r3, #7
 800cf06:	f140 8085 	bpl.w	800d014 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    switch (PeriphClkInit->FmcClockSelection)
 800cf0a:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800cf0c:	2b03      	cmp	r3, #3
 800cf0e:	f200 80e5 	bhi.w	800d0dc <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800cf12:	e8df f013 	tbh	[pc, r3, lsl #1]
 800cf16:	0076      	.short	0x0076
 800cf18:	00d50071 	.word	0x00d50071
 800cf1c:	0076      	.short	0x0076
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cf1e:	4a6c      	ldr	r2, [pc, #432]	@ (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800cf20:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800cf22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cf26:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800cf28:	e792      	b.n	800ce50 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cf2a:	2100      	movs	r1, #0
 800cf2c:	f105 0008 	add.w	r0, r5, #8
 800cf30:	f7ff fd6a 	bl	800ca08 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cf34:	4604      	mov	r4, r0
        break;
 800cf36:	e78b      	b.n	800ce50 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cf38:	2100      	movs	r1, #0
 800cf3a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800cf3e:	f7ff fddb 	bl	800caf8 <RCCEx_PLL3_Config>
 800cf42:	e7f7      	b.n	800cf34 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800cf44:	4626      	mov	r6, r4
 800cf46:	e78c      	b.n	800ce62 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800cf48:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800cf4c:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800cf50:	d002      	beq.n	800cf58 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800cf52:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cf56:	d192      	bne.n	800ce7e <HAL_RCCEx_PeriphCLKConfig+0x296>
    if (ret == HAL_OK)
 800cf58:	b9a4      	cbnz	r4, 800cf84 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800cf5a:	4a5d      	ldr	r2, [pc, #372]	@ (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800cf5c:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 800cf5e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800cf60:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800cf64:	430b      	orrs	r3, r1
 800cf66:	6513      	str	r3, [r2, #80]	@ 0x50
 800cf68:	e78b      	b.n	800ce82 <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cf6a:	2101      	movs	r1, #1
 800cf6c:	f105 0008 	add.w	r0, r5, #8
 800cf70:	f7ff fd4a 	bl	800ca08 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cf74:	4604      	mov	r4, r0
        break;
 800cf76:	e7ef      	b.n	800cf58 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cf78:	2101      	movs	r1, #1
 800cf7a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800cf7e:	f7ff fdbb 	bl	800caf8 <RCCEx_PLL3_Config>
 800cf82:	e7f7      	b.n	800cf74 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800cf84:	4626      	mov	r6, r4
 800cf86:	e77c      	b.n	800ce82 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 800cf88:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800cf8c:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800cf90:	d002      	beq.n	800cf98 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800cf92:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cf96:	d184      	bne.n	800cea2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    if (ret == HAL_OK)
 800cf98:	b9ac      	cbnz	r4, 800cfc6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800cf9a:	4a4d      	ldr	r2, [pc, #308]	@ (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800cf9c:	f8d5 10b4 	ldr.w	r1, [r5, #180]	@ 0xb4
 800cfa0:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800cfa2:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800cfa6:	430b      	orrs	r3, r1
 800cfa8:	6593      	str	r3, [r2, #88]	@ 0x58
 800cfaa:	e77c      	b.n	800cea6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cfac:	2101      	movs	r1, #1
 800cfae:	f105 0008 	add.w	r0, r5, #8
 800cfb2:	f7ff fd29 	bl	800ca08 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cfb6:	4604      	mov	r4, r0
        break;
 800cfb8:	e7ee      	b.n	800cf98 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cfba:	2101      	movs	r1, #1
 800cfbc:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800cfc0:	f7ff fd9a 	bl	800caf8 <RCCEx_PLL3_Config>
 800cfc4:	e7f7      	b.n	800cfb6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800cfc6:	4626      	mov	r6, r4
 800cfc8:	e76d      	b.n	800cea6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->DsiClockSelection)
 800cfca:	2601      	movs	r6, #1
 800cfcc:	4634      	mov	r4, r6
 800cfce:	e783      	b.n	800ced8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 800cfd0:	4626      	mov	r6, r4
 800cfd2:	e781      	b.n	800ced8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cfd4:	4a3e      	ldr	r2, [pc, #248]	@ (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800cfd6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800cfd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cfdc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800cfde:	e787      	b.n	800cef0 <HAL_RCCEx_PeriphCLKConfig+0x308>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cfe0:	2101      	movs	r1, #1
 800cfe2:	f105 0008 	add.w	r0, r5, #8
 800cfe6:	f7ff fd0f 	bl	800ca08 <RCCEx_PLL2_Config>
 800cfea:	4604      	mov	r4, r0
        break;
 800cfec:	e780      	b.n	800cef0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    switch (PeriphClkInit->FdcanClockSelection)
 800cfee:	2601      	movs	r6, #1
 800cff0:	4634      	mov	r4, r6
 800cff2:	e786      	b.n	800cf02 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 800cff4:	4626      	mov	r6, r4
 800cff6:	e784      	b.n	800cf02 <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cff8:	4a35      	ldr	r2, [pc, #212]	@ (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800cffa:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800cffc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d000:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800d002:	2c00      	cmp	r4, #0
 800d004:	d16d      	bne.n	800d0e2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800d006:	4a32      	ldr	r2, [pc, #200]	@ (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800d008:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 800d00a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800d00c:	f023 0303 	bic.w	r3, r3, #3
 800d010:	430b      	orrs	r3, r1
 800d012:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d014:	682b      	ldr	r3, [r5, #0]
 800d016:	0259      	lsls	r1, r3, #9
 800d018:	d539      	bpl.n	800d08e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d01a:	4f2e      	ldr	r7, [pc, #184]	@ (800d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d022:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800d024:	f7fb fe2a 	bl	8008c7c <HAL_GetTick>
 800d028:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	05da      	lsls	r2, r3, #23
 800d02e:	d55a      	bpl.n	800d0e6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    if (ret == HAL_OK)
 800d030:	2c00      	cmp	r4, #0
 800d032:	d176      	bne.n	800d122 <HAL_RCCEx_PeriphCLKConfig+0x53a>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800d034:	4b26      	ldr	r3, [pc, #152]	@ (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800d036:	f8d5 00b8 	ldr.w	r0, [r5, #184]	@ 0xb8
 800d03a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d03c:	4042      	eors	r2, r0
 800d03e:	f412 7f40 	tst.w	r2, #768	@ 0x300
 800d042:	d00b      	beq.n	800d05c <HAL_RCCEx_PeriphCLKConfig+0x474>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d044:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800d046:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d048:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800d04c:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800d050:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d052:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800d054:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800d058:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800d05a:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800d05c:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800d060:	d04a      	beq.n	800d0f8 <HAL_RCCEx_PeriphCLKConfig+0x510>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d062:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 800d066:	491a      	ldr	r1, [pc, #104]	@ (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800d068:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800d06c:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800d070:	d153      	bne.n	800d11a <HAL_RCCEx_PeriphCLKConfig+0x532>
 800d072:	6908      	ldr	r0, [r1, #16]
 800d074:	4a18      	ldr	r2, [pc, #96]	@ (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800d076:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 800d07a:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800d07e:	4302      	orrs	r2, r0
 800d080:	610a      	str	r2, [r1, #16]
 800d082:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d086:	4a12      	ldr	r2, [pc, #72]	@ (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800d088:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800d08a:	430b      	orrs	r3, r1
 800d08c:	6713      	str	r3, [r2, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800d08e:	682b      	ldr	r3, [r5, #0]
 800d090:	07d8      	lsls	r0, r3, #31
 800d092:	d50a      	bpl.n	800d0aa <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    switch (PeriphClkInit->Usart16ClockSelection)
 800d094:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800d098:	2b10      	cmp	r3, #16
 800d09a:	d05b      	beq.n	800d154 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 800d09c:	d843      	bhi.n	800d126 <HAL_RCCEx_PeriphCLKConfig+0x53e>
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d047      	beq.n	800d132 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800d0a2:	2b08      	cmp	r3, #8
 800d0a4:	d04f      	beq.n	800d146 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 800d0a6:	2601      	movs	r6, #1
 800d0a8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800d0aa:	682b      	ldr	r3, [r5, #0]
 800d0ac:	0799      	lsls	r1, r3, #30
 800d0ae:	d567      	bpl.n	800d180 <HAL_RCCEx_PeriphCLKConfig+0x598>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800d0b0:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800d0b2:	2b05      	cmp	r3, #5
 800d0b4:	d87a      	bhi.n	800d1ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800d0b6:	e8df f003 	tbb	[pc, r3]
 800d0ba:	555b      	.short	0x555b
 800d0bc:	5b5b5b73 	.word	0x5b5b5b73
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d0c0:	2102      	movs	r1, #2
 800d0c2:	f105 0008 	add.w	r0, r5, #8
 800d0c6:	f7ff fc9f 	bl	800ca08 <RCCEx_PLL2_Config>
 800d0ca:	4604      	mov	r4, r0
        break;
 800d0cc:	e799      	b.n	800d002 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800d0ce:	bf00      	nop
 800d0d0:	58024400 	.word	0x58024400
 800d0d4:	58024800 	.word	0x58024800
 800d0d8:	00ffffcf 	.word	0x00ffffcf
    switch (PeriphClkInit->FmcClockSelection)
 800d0dc:	2601      	movs	r6, #1
 800d0de:	4634      	mov	r4, r6
 800d0e0:	e798      	b.n	800d014 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800d0e2:	4626      	mov	r6, r4
 800d0e4:	e796      	b.n	800d014 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d0e6:	f7fb fdc9 	bl	8008c7c <HAL_GetTick>
 800d0ea:	eba0 0008 	sub.w	r0, r0, r8
 800d0ee:	2864      	cmp	r0, #100	@ 0x64
 800d0f0:	d99b      	bls.n	800d02a <HAL_RCCEx_PeriphCLKConfig+0x442>
        ret = HAL_TIMEOUT;
 800d0f2:	2603      	movs	r6, #3
 800d0f4:	4634      	mov	r4, r6
 800d0f6:	e7ca      	b.n	800d08e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
        tickstart = HAL_GetTick();
 800d0f8:	f7fb fdc0 	bl	8008c7c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d0fc:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 800d1b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
        tickstart = HAL_GetTick();
 800d100:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d102:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d106:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800d10a:	079b      	lsls	r3, r3, #30
 800d10c:	d4a9      	bmi.n	800d062 <HAL_RCCEx_PeriphCLKConfig+0x47a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d10e:	f7fb fdb5 	bl	8008c7c <HAL_GetTick>
 800d112:	1bc0      	subs	r0, r0, r7
 800d114:	4548      	cmp	r0, r9
 800d116:	d9f6      	bls.n	800d106 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800d118:	e7eb      	b.n	800d0f2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d11a:	690a      	ldr	r2, [r1, #16]
 800d11c:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800d120:	e7ae      	b.n	800d080 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800d122:	4626      	mov	r6, r4
 800d124:	e7b3      	b.n	800d08e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Usart16ClockSelection)
 800d126:	f023 0208 	bic.w	r2, r3, #8
 800d12a:	2a20      	cmp	r2, #32
 800d12c:	d001      	beq.n	800d132 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800d12e:	2b18      	cmp	r3, #24
 800d130:	d1b9      	bne.n	800d0a6 <HAL_RCCEx_PeriphCLKConfig+0x4be>
    if (ret == HAL_OK)
 800d132:	b9ac      	cbnz	r4, 800d160 <HAL_RCCEx_PeriphCLKConfig+0x578>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800d134:	4a20      	ldr	r2, [pc, #128]	@ (800d1b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800d136:	f8d5 1080 	ldr.w	r1, [r5, #128]	@ 0x80
 800d13a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800d13c:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800d140:	430b      	orrs	r3, r1
 800d142:	6553      	str	r3, [r2, #84]	@ 0x54
 800d144:	e7b1      	b.n	800d0aa <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d146:	2101      	movs	r1, #1
 800d148:	f105 0008 	add.w	r0, r5, #8
 800d14c:	f7ff fc5c 	bl	800ca08 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d150:	4604      	mov	r4, r0
        break;
 800d152:	e7ee      	b.n	800d132 <HAL_RCCEx_PeriphCLKConfig+0x54a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d154:	2101      	movs	r1, #1
 800d156:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d15a:	f7ff fccd 	bl	800caf8 <RCCEx_PLL3_Config>
 800d15e:	e7f7      	b.n	800d150 <HAL_RCCEx_PeriphCLKConfig+0x568>
 800d160:	4626      	mov	r6, r4
 800d162:	e7a2      	b.n	800d0aa <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d164:	2101      	movs	r1, #1
 800d166:	f105 0008 	add.w	r0, r5, #8
 800d16a:	f7ff fc4d 	bl	800ca08 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d16e:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800d170:	b9fc      	cbnz	r4, 800d1b2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800d172:	4a11      	ldr	r2, [pc, #68]	@ (800d1b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800d174:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 800d176:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800d178:	f023 0307 	bic.w	r3, r3, #7
 800d17c:	430b      	orrs	r3, r1
 800d17e:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d180:	682b      	ldr	r3, [r5, #0]
 800d182:	075a      	lsls	r2, r3, #29
 800d184:	d52b      	bpl.n	800d1de <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d186:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800d18a:	2b05      	cmp	r3, #5
 800d18c:	f200 816e 	bhi.w	800d46c <HAL_RCCEx_PeriphCLKConfig+0x884>
 800d190:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d194:	0014001a 	.word	0x0014001a
 800d198:	001a0166 	.word	0x001a0166
 800d19c:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d1a0:	2101      	movs	r1, #1
 800d1a2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d1a6:	f7ff fca7 	bl	800caf8 <RCCEx_PLL3_Config>
 800d1aa:	e7e0      	b.n	800d16e <HAL_RCCEx_PeriphCLKConfig+0x586>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800d1ac:	2601      	movs	r6, #1
 800d1ae:	4634      	mov	r4, r6
 800d1b0:	e7e6      	b.n	800d180 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800d1b2:	4626      	mov	r6, r4
 800d1b4:	e7e4      	b.n	800d180 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800d1b6:	bf00      	nop
 800d1b8:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d1bc:	2101      	movs	r1, #1
 800d1be:	f105 0008 	add.w	r0, r5, #8
 800d1c2:	f7ff fc21 	bl	800ca08 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d1c6:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800d1c8:	2c00      	cmp	r4, #0
 800d1ca:	f040 8152 	bne.w	800d472 <HAL_RCCEx_PeriphCLKConfig+0x88a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d1ce:	4aaa      	ldr	r2, [pc, #680]	@ (800d478 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800d1d0:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 800d1d4:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800d1d6:	f023 0307 	bic.w	r3, r3, #7
 800d1da:	430b      	orrs	r3, r1
 800d1dc:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d1de:	682b      	ldr	r3, [r5, #0]
 800d1e0:	069b      	lsls	r3, r3, #26
 800d1e2:	d510      	bpl.n	800d206 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d1e4:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800d1e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d1ec:	f000 8160 	beq.w	800d4b0 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
 800d1f0:	f200 8144 	bhi.w	800d47c <HAL_RCCEx_PeriphCLKConfig+0x894>
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	f000 814a 	beq.w	800d48e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800d1fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d1fe:	f000 8150 	beq.w	800d4a2 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 800d202:	2601      	movs	r6, #1
 800d204:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d206:	682b      	ldr	r3, [r5, #0]
 800d208:	065f      	lsls	r7, r3, #25
 800d20a:	d510      	bpl.n	800d22e <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d20c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 800d210:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d214:	f000 816e 	beq.w	800d4f4 <HAL_RCCEx_PeriphCLKConfig+0x90c>
 800d218:	f200 8152 	bhi.w	800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	f000 8158 	beq.w	800d4d2 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800d222:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d226:	f000 815e 	beq.w	800d4e6 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800d22a:	2601      	movs	r6, #1
 800d22c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d22e:	682b      	ldr	r3, [r5, #0]
 800d230:	0618      	lsls	r0, r3, #24
 800d232:	d510      	bpl.n	800d256 <HAL_RCCEx_PeriphCLKConfig+0x66e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d234:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
 800d238:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d23c:	f000 817c 	beq.w	800d538 <HAL_RCCEx_PeriphCLKConfig+0x950>
 800d240:	f200 8160 	bhi.w	800d504 <HAL_RCCEx_PeriphCLKConfig+0x91c>
 800d244:	2b00      	cmp	r3, #0
 800d246:	f000 8166 	beq.w	800d516 <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800d24a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d24e:	f000 816c 	beq.w	800d52a <HAL_RCCEx_PeriphCLKConfig+0x942>
 800d252:	2601      	movs	r6, #1
 800d254:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800d256:	682b      	ldr	r3, [r5, #0]
 800d258:	0719      	lsls	r1, r3, #28
 800d25a:	d514      	bpl.n	800d286 <HAL_RCCEx_PeriphCLKConfig+0x69e>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800d25c:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 800d260:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d264:	d107      	bne.n	800d276 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d266:	2102      	movs	r1, #2
 800d268:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d26c:	f7ff fc44 	bl	800caf8 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800d270:	2800      	cmp	r0, #0
 800d272:	bf18      	it	ne
 800d274:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800d276:	4a80      	ldr	r2, [pc, #512]	@ (800d478 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800d278:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 800d27c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800d27e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800d282:	430b      	orrs	r3, r1
 800d284:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d286:	682b      	ldr	r3, [r5, #0]
 800d288:	06da      	lsls	r2, r3, #27
 800d28a:	d514      	bpl.n	800d2b6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800d28c:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800d290:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d294:	d107      	bne.n	800d2a6 <HAL_RCCEx_PeriphCLKConfig+0x6be>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d296:	2102      	movs	r1, #2
 800d298:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d29c:	f7ff fc2c 	bl	800caf8 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800d2a0:	2800      	cmp	r0, #0
 800d2a2:	bf18      	it	ne
 800d2a4:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d2a6:	4a74      	ldr	r2, [pc, #464]	@ (800d478 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800d2a8:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 800d2ac:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800d2ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d2b2:	430b      	orrs	r3, r1
 800d2b4:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d2b6:	682b      	ldr	r3, [r5, #0]
 800d2b8:	031b      	lsls	r3, r3, #12
 800d2ba:	d51b      	bpl.n	800d2f4 <HAL_RCCEx_PeriphCLKConfig+0x70c>
    switch (PeriphClkInit->AdcClockSelection)
 800d2bc:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800d2c0:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800d2c4:	f000 8140 	beq.w	800d548 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800d2c8:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800d2cc:	d007      	beq.n	800d2de <HAL_RCCEx_PeriphCLKConfig+0x6f6>
 800d2ce:	2900      	cmp	r1, #0
 800d2d0:	f040 8140 	bne.w	800d554 <HAL_RCCEx_PeriphCLKConfig+0x96c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d2d4:	f105 0008 	add.w	r0, r5, #8
 800d2d8:	f7ff fb96 	bl	800ca08 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d2dc:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800d2de:	2c00      	cmp	r4, #0
 800d2e0:	f040 813b 	bne.w	800d55a <HAL_RCCEx_PeriphCLKConfig+0x972>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d2e4:	4a64      	ldr	r2, [pc, #400]	@ (800d478 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800d2e6:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800d2ea:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800d2ec:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800d2f0:	430b      	orrs	r3, r1
 800d2f2:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d2f4:	682b      	ldr	r3, [r5, #0]
 800d2f6:	035f      	lsls	r7, r3, #13
 800d2f8:	d50f      	bpl.n	800d31a <HAL_RCCEx_PeriphCLKConfig+0x732>
    switch (PeriphClkInit->UsbClockSelection)
 800d2fa:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 800d2fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d302:	f000 813b 	beq.w	800d57c <HAL_RCCEx_PeriphCLKConfig+0x994>
 800d306:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d30a:	f000 812d 	beq.w	800d568 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800d30e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d312:	f000 8124 	beq.w	800d55e <HAL_RCCEx_PeriphCLKConfig+0x976>
 800d316:	2601      	movs	r6, #1
 800d318:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d31a:	682b      	ldr	r3, [r5, #0]
 800d31c:	03d8      	lsls	r0, r3, #15
 800d31e:	d509      	bpl.n	800d334 <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch (PeriphClkInit->SdmmcClockSelection)
 800d320:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800d322:	2b00      	cmp	r3, #0
 800d324:	f000 8133 	beq.w	800d58e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 800d328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d32c:	f000 813d 	beq.w	800d5aa <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800d330:	2601      	movs	r6, #1
 800d332:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d334:	682b      	ldr	r3, [r5, #0]
 800d336:	0099      	lsls	r1, r3, #2
 800d338:	d507      	bpl.n	800d34a <HAL_RCCEx_PeriphCLKConfig+0x762>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d33a:	2102      	movs	r1, #2
 800d33c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d340:	f7ff fbda 	bl	800caf8 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 800d344:	2800      	cmp	r0, #0
 800d346:	bf18      	it	ne
 800d348:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d34a:	e9d5 3100 	ldrd	r3, r1, [r5]
 800d34e:	039a      	lsls	r2, r3, #14
 800d350:	f140 8143 	bpl.w	800d5da <HAL_RCCEx_PeriphCLKConfig+0x9f2>
    switch (PeriphClkInit->RngClockSelection)
 800d354:	f8d5 0084 	ldr.w	r0, [r5, #132]	@ 0x84
 800d358:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800d35c:	f000 813f 	beq.w	800d5de <HAL_RCCEx_PeriphCLKConfig+0x9f6>
 800d360:	f200 812c 	bhi.w	800d5bc <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800d364:	2800      	cmp	r0, #0
 800d366:	f000 812f 	beq.w	800d5c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
 800d36a:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d36c:	02df      	lsls	r7, r3, #11
 800d36e:	d506      	bpl.n	800d37e <HAL_RCCEx_PeriphCLKConfig+0x796>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d370:	4841      	ldr	r0, [pc, #260]	@ (800d478 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800d372:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 800d374:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800d376:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800d37a:	4332      	orrs	r2, r6
 800d37c:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800d37e:	00de      	lsls	r6, r3, #3
 800d380:	d507      	bpl.n	800d392 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800d382:	483d      	ldr	r0, [pc, #244]	@ (800d478 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800d384:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 800d388:	6902      	ldr	r2, [r0, #16]
 800d38a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800d38e:	4332      	orrs	r2, r6
 800d390:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d392:	0298      	lsls	r0, r3, #10
 800d394:	d506      	bpl.n	800d3a4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d396:	4838      	ldr	r0, [pc, #224]	@ (800d478 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800d398:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
 800d39a:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800d39c:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800d3a0:	4332      	orrs	r2, r6
 800d3a2:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d3a4:	005a      	lsls	r2, r3, #1
 800d3a6:	d509      	bpl.n	800d3bc <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d3a8:	4a33      	ldr	r2, [pc, #204]	@ (800d478 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800d3aa:	6910      	ldr	r0, [r2, #16]
 800d3ac:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800d3b0:	6110      	str	r0, [r2, #16]
 800d3b2:	6910      	ldr	r0, [r2, #16]
 800d3b4:	f8d5 60c0 	ldr.w	r6, [r5, #192]	@ 0xc0
 800d3b8:	4330      	orrs	r0, r6
 800d3ba:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	da06      	bge.n	800d3ce <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d3c0:	482d      	ldr	r0, [pc, #180]	@ (800d478 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800d3c2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800d3c4:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800d3c6:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800d3ca:	4332      	orrs	r2, r6
 800d3cc:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d3ce:	021f      	lsls	r7, r3, #8
 800d3d0:	d507      	bpl.n	800d3e2 <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d3d2:	4a29      	ldr	r2, [pc, #164]	@ (800d478 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800d3d4:	f8d5 0090 	ldr.w	r0, [r5, #144]	@ 0x90
 800d3d8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800d3da:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800d3de:	4303      	orrs	r3, r0
 800d3e0:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800d3e2:	07ce      	lsls	r6, r1, #31
 800d3e4:	d506      	bpl.n	800d3f4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d3e6:	2100      	movs	r1, #0
 800d3e8:	f105 0008 	add.w	r0, r5, #8
 800d3ec:	f7ff fb0c 	bl	800ca08 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800d3f0:	4607      	mov	r7, r0
 800d3f2:	b900      	cbnz	r0, 800d3f6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
    switch (PeriphClkInit->RngClockSelection)
 800d3f4:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800d3f6:	686b      	ldr	r3, [r5, #4]
 800d3f8:	079c      	lsls	r4, r3, #30
 800d3fa:	d506      	bpl.n	800d40a <HAL_RCCEx_PeriphCLKConfig+0x822>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d3fc:	2101      	movs	r1, #1
 800d3fe:	f105 0008 	add.w	r0, r5, #8
 800d402:	f7ff fb01 	bl	800ca08 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800d406:	4606      	mov	r6, r0
 800d408:	b900      	cbnz	r0, 800d40c <HAL_RCCEx_PeriphCLKConfig+0x824>
    switch (PeriphClkInit->RngClockSelection)
 800d40a:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800d40c:	686b      	ldr	r3, [r5, #4]
 800d40e:	0758      	lsls	r0, r3, #29
 800d410:	d506      	bpl.n	800d420 <HAL_RCCEx_PeriphCLKConfig+0x838>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d412:	2102      	movs	r1, #2
 800d414:	f105 0008 	add.w	r0, r5, #8
 800d418:	f7ff faf6 	bl	800ca08 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800d41c:	4604      	mov	r4, r0
 800d41e:	b900      	cbnz	r0, 800d422 <HAL_RCCEx_PeriphCLKConfig+0x83a>
    switch (PeriphClkInit->RngClockSelection)
 800d420:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800d422:	686b      	ldr	r3, [r5, #4]
 800d424:	0719      	lsls	r1, r3, #28
 800d426:	d506      	bpl.n	800d436 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d428:	2100      	movs	r1, #0
 800d42a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d42e:	f7ff fb63 	bl	800caf8 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800d432:	4606      	mov	r6, r0
 800d434:	b900      	cbnz	r0, 800d438 <HAL_RCCEx_PeriphCLKConfig+0x850>
    switch (PeriphClkInit->RngClockSelection)
 800d436:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800d438:	686b      	ldr	r3, [r5, #4]
 800d43a:	06da      	lsls	r2, r3, #27
 800d43c:	d506      	bpl.n	800d44c <HAL_RCCEx_PeriphCLKConfig+0x864>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d43e:	2101      	movs	r1, #1
 800d440:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d444:	f7ff fb58 	bl	800caf8 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800d448:	4604      	mov	r4, r0
 800d44a:	b900      	cbnz	r0, 800d44e <HAL_RCCEx_PeriphCLKConfig+0x866>
    switch (PeriphClkInit->RngClockSelection)
 800d44c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800d44e:	686b      	ldr	r3, [r5, #4]
 800d450:	069b      	lsls	r3, r3, #26
 800d452:	f100 80ca 	bmi.w	800d5ea <HAL_RCCEx_PeriphCLKConfig+0xa02>
  if (status == HAL_OK)
 800d456:	1e20      	subs	r0, r4, #0
 800d458:	bf18      	it	ne
 800d45a:	2001      	movne	r0, #1
}
 800d45c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d460:	2101      	movs	r1, #1
 800d462:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d466:	f7ff fb47 	bl	800caf8 <RCCEx_PLL3_Config>
 800d46a:	e6ac      	b.n	800d1c6 <HAL_RCCEx_PeriphCLKConfig+0x5de>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d46c:	2601      	movs	r6, #1
 800d46e:	4634      	mov	r4, r6
 800d470:	e6b5      	b.n	800d1de <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800d472:	4626      	mov	r6, r4
 800d474:	e6b3      	b.n	800d1de <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800d476:	bf00      	nop
 800d478:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d47c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800d480:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800d484:	d003      	beq.n	800d48e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800d486:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d48a:	f47f aeba 	bne.w	800d202 <HAL_RCCEx_PeriphCLKConfig+0x61a>
    if (ret == HAL_OK)
 800d48e:	b9ac      	cbnz	r4, 800d4bc <HAL_RCCEx_PeriphCLKConfig+0x8d4>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d490:	4a5b      	ldr	r2, [pc, #364]	@ (800d600 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800d492:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 800d496:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800d498:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800d49c:	430b      	orrs	r3, r1
 800d49e:	6553      	str	r3, [r2, #84]	@ 0x54
 800d4a0:	e6b1      	b.n	800d206 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d4a2:	2100      	movs	r1, #0
 800d4a4:	f105 0008 	add.w	r0, r5, #8
 800d4a8:	f7ff faae 	bl	800ca08 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d4ac:	4604      	mov	r4, r0
        break;
 800d4ae:	e7ee      	b.n	800d48e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d4b0:	2102      	movs	r1, #2
 800d4b2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d4b6:	f7ff fb1f 	bl	800caf8 <RCCEx_PLL3_Config>
 800d4ba:	e7f7      	b.n	800d4ac <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800d4bc:	4626      	mov	r6, r4
 800d4be:	e6a2      	b.n	800d206 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d4c0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800d4c4:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 800d4c8:	d003      	beq.n	800d4d2 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800d4ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d4ce:	f47f aeac 	bne.w	800d22a <HAL_RCCEx_PeriphCLKConfig+0x642>
    if (ret == HAL_OK)
 800d4d2:	b9ac      	cbnz	r4, 800d500 <HAL_RCCEx_PeriphCLKConfig+0x918>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d4d4:	4a4a      	ldr	r2, [pc, #296]	@ (800d600 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800d4d6:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 800d4da:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800d4dc:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800d4e0:	430b      	orrs	r3, r1
 800d4e2:	6593      	str	r3, [r2, #88]	@ 0x58
 800d4e4:	e6a3      	b.n	800d22e <HAL_RCCEx_PeriphCLKConfig+0x646>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d4e6:	2100      	movs	r1, #0
 800d4e8:	f105 0008 	add.w	r0, r5, #8
 800d4ec:	f7ff fa8c 	bl	800ca08 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d4f0:	4604      	mov	r4, r0
        break;
 800d4f2:	e7ee      	b.n	800d4d2 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d4f4:	2102      	movs	r1, #2
 800d4f6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d4fa:	f7ff fafd 	bl	800caf8 <RCCEx_PLL3_Config>
 800d4fe:	e7f7      	b.n	800d4f0 <HAL_RCCEx_PeriphCLKConfig+0x908>
 800d500:	4626      	mov	r6, r4
 800d502:	e694      	b.n	800d22e <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d504:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800d508:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800d50c:	d003      	beq.n	800d516 <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800d50e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d512:	f47f ae9e 	bne.w	800d252 <HAL_RCCEx_PeriphCLKConfig+0x66a>
    if (ret == HAL_OK)
 800d516:	b9ac      	cbnz	r4, 800d544 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d518:	4a39      	ldr	r2, [pc, #228]	@ (800d600 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800d51a:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 800d51e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800d520:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800d524:	430b      	orrs	r3, r1
 800d526:	6593      	str	r3, [r2, #88]	@ 0x58
 800d528:	e695      	b.n	800d256 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d52a:	2100      	movs	r1, #0
 800d52c:	f105 0008 	add.w	r0, r5, #8
 800d530:	f7ff fa6a 	bl	800ca08 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d534:	4604      	mov	r4, r0
        break;
 800d536:	e7ee      	b.n	800d516 <HAL_RCCEx_PeriphCLKConfig+0x92e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d538:	2102      	movs	r1, #2
 800d53a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d53e:	f7ff fadb 	bl	800caf8 <RCCEx_PLL3_Config>
 800d542:	e7f7      	b.n	800d534 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800d544:	4626      	mov	r6, r4
 800d546:	e686      	b.n	800d256 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d548:	2102      	movs	r1, #2
 800d54a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d54e:	f7ff fad3 	bl	800caf8 <RCCEx_PLL3_Config>
 800d552:	e6c3      	b.n	800d2dc <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch (PeriphClkInit->AdcClockSelection)
 800d554:	2601      	movs	r6, #1
 800d556:	4634      	mov	r4, r6
 800d558:	e6cc      	b.n	800d2f4 <HAL_RCCEx_PeriphCLKConfig+0x70c>
 800d55a:	4626      	mov	r6, r4
 800d55c:	e6ca      	b.n	800d2f4 <HAL_RCCEx_PeriphCLKConfig+0x70c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d55e:	4a28      	ldr	r2, [pc, #160]	@ (800d600 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800d560:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800d562:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d566:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800d568:	b97c      	cbnz	r4, 800d58a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d56a:	4a25      	ldr	r2, [pc, #148]	@ (800d600 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800d56c:	f8d5 108c 	ldr.w	r1, [r5, #140]	@ 0x8c
 800d570:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800d572:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800d576:	430b      	orrs	r3, r1
 800d578:	6553      	str	r3, [r2, #84]	@ 0x54
 800d57a:	e6ce      	b.n	800d31a <HAL_RCCEx_PeriphCLKConfig+0x732>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d57c:	2101      	movs	r1, #1
 800d57e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d582:	f7ff fab9 	bl	800caf8 <RCCEx_PLL3_Config>
 800d586:	4604      	mov	r4, r0
        break;
 800d588:	e7ee      	b.n	800d568 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800d58a:	4626      	mov	r6, r4
 800d58c:	e6c5      	b.n	800d31a <HAL_RCCEx_PeriphCLKConfig+0x732>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d58e:	4a1c      	ldr	r2, [pc, #112]	@ (800d600 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800d590:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800d592:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d596:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800d598:	b974      	cbnz	r4, 800d5b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d59a:	4a19      	ldr	r2, [pc, #100]	@ (800d600 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800d59c:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 800d59e:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800d5a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d5a4:	430b      	orrs	r3, r1
 800d5a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d5a8:	e6c4      	b.n	800d334 <HAL_RCCEx_PeriphCLKConfig+0x74c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d5aa:	2102      	movs	r1, #2
 800d5ac:	f105 0008 	add.w	r0, r5, #8
 800d5b0:	f7ff fa2a 	bl	800ca08 <RCCEx_PLL2_Config>
 800d5b4:	4604      	mov	r4, r0
        break;
 800d5b6:	e7ef      	b.n	800d598 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 800d5b8:	4626      	mov	r6, r4
 800d5ba:	e6bb      	b.n	800d334 <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch (PeriphClkInit->RngClockSelection)
 800d5bc:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 800d5c0:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800d5c4:	f47f aed1 	bne.w	800d36a <HAL_RCCEx_PeriphCLKConfig+0x782>
    if (ret == HAL_OK)
 800d5c8:	2c00      	cmp	r4, #0
 800d5ca:	f47f aecf 	bne.w	800d36c <HAL_RCCEx_PeriphCLKConfig+0x784>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d5ce:	4c0c      	ldr	r4, [pc, #48]	@ (800d600 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800d5d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d5d2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800d5d6:	4302      	orrs	r2, r0
 800d5d8:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 800d5da:	4634      	mov	r4, r6
 800d5dc:	e6c6      	b.n	800d36c <HAL_RCCEx_PeriphCLKConfig+0x784>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d5de:	4f08      	ldr	r7, [pc, #32]	@ (800d600 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800d5e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d5e2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800d5e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 800d5e8:	e7ee      	b.n	800d5c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d5ea:	2102      	movs	r1, #2
 800d5ec:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d5f0:	f7ff fa82 	bl	800caf8 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800d5f4:	2800      	cmp	r0, #0
 800d5f6:	f43f af2e 	beq.w	800d456 <HAL_RCCEx_PeriphCLKConfig+0x86e>
  return HAL_ERROR;
 800d5fa:	2001      	movs	r0, #1
 800d5fc:	e72e      	b.n	800d45c <HAL_RCCEx_PeriphCLKConfig+0x874>
 800d5fe:	bf00      	nop
 800d600:	58024400 	.word	0x58024400

0800d604 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800d604:	b538      	push	{r3, r4, r5, lr}
 800d606:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800d608:	4604      	mov	r4, r0
 800d60a:	b1f0      	cbz	r0, 800d64a <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800d60c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800d610:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800d614:	b91b      	cbnz	r3, 800d61e <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d616:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d61a:	f7f4 f873 	bl	8001704 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d61e:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d620:	1d21      	adds	r1, r4, #4
 800d622:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d624:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d628:	f000 fc29 	bl	800de7e <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800d62c:	6862      	ldr	r2, [r4, #4]
 800d62e:	4629      	mov	r1, r5
 800d630:	6820      	ldr	r0, [r4, #0]
 800d632:	f000 fc5c 	bl	800deee <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800d636:	4a06      	ldr	r2, [pc, #24]	@ (800d650 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 800d638:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800d63a:	6813      	ldr	r3, [r2, #0]
 800d63c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d640:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d642:	2301      	movs	r3, #1
 800d644:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 800d648:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800d64a:	2001      	movs	r0, #1
 800d64c:	e7fc      	b.n	800d648 <HAL_SDRAM_Init+0x44>
 800d64e:	bf00      	nop
 800d650:	52004000 	.word	0x52004000

0800d654 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 800d654:	b510      	push	{r4, lr}
 800d656:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 800d658:	f7f4 f8ee 	bl	8001838 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 800d65c:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d660:	f000 fc7b 	bl	800df5a <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 800d664:	2000      	movs	r0, #0
 800d666:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 800d66a:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d

  return HAL_OK;
}
 800d66e:	bd10      	pop	{r4, pc}

0800d670 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800d670:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800d672:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800d676:	4605      	mov	r5, r0
 800d678:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800d67a:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800d67c:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800d67e:	d010      	beq.n	800d6a2 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800d680:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 800d684:	2c01      	cmp	r4, #1
 800d686:	d110      	bne.n	800d6aa <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d688:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d68a:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d68c:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d690:	f000 fc72 	bl	800df78 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d694:	6833      	ldr	r3, [r6, #0]
 800d696:	2b02      	cmp	r3, #2
 800d698:	d104      	bne.n	800d6a4 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800d69a:	2305      	movs	r3, #5
 800d69c:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800d6a0:	2000      	movs	r0, #0
}
 800d6a2:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800d6a4:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 800d6a8:	e7fa      	b.n	800d6a0 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800d6aa:	2001      	movs	r0, #1
 800d6ac:	e7f9      	b.n	800d6a2 <HAL_SDRAM_SendCommand+0x32>

0800d6ae <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800d6ae:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d6b0:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800d6b4:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d6b6:	2b02      	cmp	r3, #2
 800d6b8:	b2d8      	uxtb	r0, r3
 800d6ba:	d00d      	beq.n	800d6d8 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800d6bc:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800d6c0:	2b01      	cmp	r3, #1
 800d6c2:	b2dd      	uxtb	r5, r3
 800d6c4:	d109      	bne.n	800d6da <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d6c6:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800d6c8:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d6ca:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800d6ce:	f000 fc65 	bl	800df9c <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800d6d2:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800d6d4:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 800d6d8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800d6da:	2001      	movs	r0, #1
 800d6dc:	e7fc      	b.n	800d6d8 <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800d6de <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 800d6de:	6803      	ldr	r3, [r0, #0]
 800d6e0:	6959      	ldr	r1, [r3, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d6e2:	699a      	ldr	r2, [r3, #24]
 800d6e4:	f042 0208 	orr.w	r2, r2, #8
 800d6e8:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d6ea:	699a      	ldr	r2, [r3, #24]
 800d6ec:	f042 0210 	orr.w	r2, r2, #16
 800d6f0:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d6f2:	681a      	ldr	r2, [r3, #0]
 800d6f4:	f022 0201 	bic.w	r2, r2, #1
 800d6f8:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d6fa:	691a      	ldr	r2, [r3, #16]
 800d6fc:	f422 725b 	bic.w	r2, r2, #876	@ 0x36c
 800d700:	f022 0203 	bic.w	r2, r2, #3
 800d704:	611a      	str	r2, [r3, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d706:	689a      	ldr	r2, [r3, #8]
 800d708:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800d70c:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d70e:	f890 2081 	ldrb.w	r2, [r0, #129]	@ 0x81
 800d712:	2a04      	cmp	r2, #4
 800d714:	d00b      	beq.n	800d72e <SPI_CloseTransfer+0x50>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d716:	068a      	lsls	r2, r1, #26
 800d718:	d509      	bpl.n	800d72e <SPI_CloseTransfer+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d71a:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 800d71e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800d722:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d726:	699a      	ldr	r2, [r3, #24]
 800d728:	f042 0220 	orr.w	r2, r2, #32
 800d72c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d72e:	f890 2081 	ldrb.w	r2, [r0, #129]	@ 0x81
 800d732:	2a03      	cmp	r2, #3
 800d734:	d00b      	beq.n	800d74e <SPI_CloseTransfer+0x70>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d736:	064a      	lsls	r2, r1, #25
 800d738:	d509      	bpl.n	800d74e <SPI_CloseTransfer+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d73a:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 800d73e:	f042 0204 	orr.w	r2, r2, #4
 800d742:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d746:	699a      	ldr	r2, [r3, #24]
 800d748:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d74c:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d74e:	058a      	lsls	r2, r1, #22
 800d750:	d509      	bpl.n	800d766 <SPI_CloseTransfer+0x88>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d752:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 800d756:	f042 0201 	orr.w	r2, r2, #1
 800d75a:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d75e:	699a      	ldr	r2, [r3, #24]
 800d760:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d764:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d766:	05ca      	lsls	r2, r1, #23
 800d768:	d509      	bpl.n	800d77e <SPI_CloseTransfer+0xa0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d76a:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 800d76e:	f042 0208 	orr.w	r2, r2, #8
 800d772:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d776:	699a      	ldr	r2, [r3, #24]
 800d778:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d77c:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d77e:	2300      	movs	r3, #0
 800d780:	f8a0 3062 	strh.w	r3, [r0, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d784:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
}
 800d788:	4770      	bx	lr
	...

0800d78c <HAL_SPI_Init>:
{
 800d78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi == NULL)
 800d78e:	4604      	mov	r4, r0
 800d790:	b908      	cbnz	r0, 800d796 <HAL_SPI_Init+0xa>
    return HAL_ERROR;
 800d792:	2001      	movs	r0, #1
}
 800d794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d796:	6802      	ldr	r2, [r0, #0]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d798:	2300      	movs	r3, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d79a:	494d      	ldr	r1, [pc, #308]	@ (800d8d0 <HAL_SPI_Init+0x144>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d79c:	6283      	str	r3, [r0, #40]	@ 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d79e:	428a      	cmp	r2, r1
 800d7a0:	68c3      	ldr	r3, [r0, #12]
 800d7a2:	d009      	beq.n	800d7b8 <HAL_SPI_Init+0x2c>
 800d7a4:	f5a1 4178 	sub.w	r1, r1, #63488	@ 0xf800
 800d7a8:	428a      	cmp	r2, r1
 800d7aa:	d005      	beq.n	800d7b8 <HAL_SPI_Init+0x2c>
 800d7ac:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800d7b0:	428a      	cmp	r2, r1
 800d7b2:	d001      	beq.n	800d7b8 <HAL_SPI_Init+0x2c>
 800d7b4:	2b0f      	cmp	r3, #15
 800d7b6:	d8ec      	bhi.n	800d792 <HAL_SPI_Init+0x6>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d7b8:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d7ba:	3308      	adds	r3, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d7bc:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800d7be:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 800d7c0:	fb01 3303 	mla	r3, r1, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d7c4:	4942      	ldr	r1, [pc, #264]	@ (800d8d0 <HAL_SPI_Init+0x144>)
 800d7c6:	428a      	cmp	r2, r1
 800d7c8:	d073      	beq.n	800d8b2 <HAL_SPI_Init+0x126>
 800d7ca:	f5a1 4178 	sub.w	r1, r1, #63488	@ 0xf800
 800d7ce:	428a      	cmp	r2, r1
 800d7d0:	d06f      	beq.n	800d8b2 <HAL_SPI_Init+0x126>
 800d7d2:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800d7d6:	428a      	cmp	r2, r1
 800d7d8:	d06b      	beq.n	800d8b2 <HAL_SPI_Init+0x126>
 800d7da:	2b08      	cmp	r3, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d7dc:	d8d9      	bhi.n	800d792 <HAL_SPI_Init+0x6>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800d7de:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 800d7e2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800d7e6:	b923      	cbnz	r3, 800d7f2 <HAL_SPI_Init+0x66>
    HAL_SPI_MspInit(hspi);
 800d7e8:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800d7ea:	f884 2080 	strb.w	r2, [r4, #128]	@ 0x80
    HAL_SPI_MspInit(hspi);
 800d7ee:	f7f3 ff25 	bl	800163c <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800d7f2:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800d7f4:	2302      	movs	r3, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d7f6:	6861      	ldr	r1, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 800d7f8:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  __HAL_SPI_DISABLE(hspi);
 800d7fc:	6813      	ldr	r3, [r2, #0]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d7fe:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
  __HAL_SPI_DISABLE(hspi);
 800d800:	f023 0301 	bic.w	r3, r3, #1
 800d804:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800d806:	6893      	ldr	r3, [r2, #8]
 800d808:	f403 1cf8 	and.w	ip, r3, #2031616	@ 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d80c:	69a3      	ldr	r3, [r4, #24]
 800d80e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d812:	d104      	bne.n	800d81e <HAL_SPI_Init+0x92>
 800d814:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 800d818:	d14d      	bne.n	800d8b6 <HAL_SPI_Init+0x12a>
 800d81a:	2e00      	cmp	r6, #0
 800d81c:	d050      	beq.n	800d8c0 <HAL_SPI_Init+0x134>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800d81e:	f411 0080 	ands.w	r0, r1, #4194304	@ 0x400000
 800d822:	68e5      	ldr	r5, [r4, #12]
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800d824:	6817      	ldr	r7, [r2, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800d826:	d050      	beq.n	800d8ca <HAL_SPI_Init+0x13e>
 800d828:	2d06      	cmp	r5, #6
 800d82a:	d94e      	bls.n	800d8ca <HAL_SPI_Init+0x13e>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800d82c:	f427 7e80 	bic.w	lr, r7, #256	@ 0x100
 800d830:	6d27      	ldr	r7, [r4, #80]	@ 0x50
 800d832:	ea4e 0707 	orr.w	r7, lr, r7
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800d836:	6017      	str	r7, [r2, #0]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800d838:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d83a:	69e7      	ldr	r7, [r4, #28]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800d83c:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d83e:	433d      	orrs	r5, r7
 800d840:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 800d842:	433d      	orrs	r5, r7
 800d844:	6be7      	ldr	r7, [r4, #60]	@ 0x3c
 800d846:	433d      	orrs	r5, r7
 800d848:	ea45 050c 	orr.w	r5, r5, ip
 800d84c:	6095      	str	r5, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800d84e:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 800d850:	432b      	orrs	r3, r5
 800d852:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800d854:	432b      	orrs	r3, r5
 800d856:	6925      	ldr	r5, [r4, #16]
 800d858:	432b      	orrs	r3, r5
 800d85a:	6965      	ldr	r5, [r4, #20]
 800d85c:	432b      	orrs	r3, r5
 800d85e:	6a25      	ldr	r5, [r4, #32]
 800d860:	432b      	orrs	r3, r5
 800d862:	6ce5      	ldr	r5, [r4, #76]	@ 0x4c
 800d864:	432b      	orrs	r3, r5
 800d866:	68a5      	ldr	r5, [r4, #8]
 800d868:	432b      	orrs	r3, r5
 800d86a:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 800d86c:	432b      	orrs	r3, r5
 800d86e:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 800d870:	432b      	orrs	r3, r5
 800d872:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d874:	b959      	cbnz	r1, 800d88e <HAL_SPI_Init+0x102>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d876:	6893      	ldr	r3, [r2, #8]
 800d878:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 800d87c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d880:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d882:	6893      	ldr	r3, [r2, #8]
 800d884:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800d888:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d88c:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d88e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800d890:	f023 0301 	bic.w	r3, r3, #1
 800d894:	6513      	str	r3, [r2, #80]	@ 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d896:	b128      	cbz	r0, 800d8a4 <HAL_SPI_Init+0x118>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d898:	68d3      	ldr	r3, [r2, #12]
 800d89a:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800d89c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d8a0:	430b      	orrs	r3, r1
 800d8a2:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d8a4:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800d8a6:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d8a8:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d8ac:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  return HAL_OK;
 800d8b0:	e770      	b.n	800d794 <HAL_SPI_Init+0x8>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d8b2:	2b10      	cmp	r3, #16
 800d8b4:	e792      	b.n	800d7dc <HAL_SPI_Init+0x50>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d8b6:	2900      	cmp	r1, #0
 800d8b8:	d1b1      	bne.n	800d81e <HAL_SPI_Init+0x92>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d8ba:	f1b6 5f80 	cmp.w	r6, #268435456	@ 0x10000000
 800d8be:	d1ae      	bne.n	800d81e <HAL_SPI_Init+0x92>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d8c0:	6810      	ldr	r0, [r2, #0]
 800d8c2:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 800d8c6:	6010      	str	r0, [r2, #0]
 800d8c8:	e7a9      	b.n	800d81e <HAL_SPI_Init+0x92>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800d8ca:	f427 7780 	bic.w	r7, r7, #256	@ 0x100
 800d8ce:	e7b2      	b.n	800d836 <HAL_SPI_Init+0xaa>
 800d8d0:	40013000 	.word	0x40013000

0800d8d4 <HAL_SPI_Transmit>:
{
 800d8d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8d8:	4604      	mov	r4, r0
 800d8da:	461d      	mov	r5, r3
 800d8dc:	4689      	mov	r9, r1
 800d8de:	4690      	mov	r8, r2
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d8e0:	6807      	ldr	r7, [r0, #0]
  tickstart = HAL_GetTick();
 800d8e2:	f7fb f9cb 	bl	8008c7c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800d8e6:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
  tickstart = HAL_GetTick();
 800d8ea:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800d8ec:	2b01      	cmp	r3, #1
 800d8ee:	b2d8      	uxtb	r0, r3
 800d8f0:	f040 8108 	bne.w	800db04 <HAL_SPI_Transmit+0x230>
  if ((pData == NULL) || (Size == 0UL))
 800d8f4:	f1b9 0f00 	cmp.w	r9, #0
 800d8f8:	f000 80a3 	beq.w	800da42 <HAL_SPI_Transmit+0x16e>
 800d8fc:	f1b8 0f00 	cmp.w	r8, #0
 800d900:	f000 809f 	beq.w	800da42 <HAL_SPI_Transmit+0x16e>
  __HAL_LOCK(hspi);
 800d904:	f894 3080 	ldrb.w	r3, [r4, #128]	@ 0x80
 800d908:	2b01      	cmp	r3, #1
 800d90a:	f000 80fb 	beq.w	800db04 <HAL_SPI_Transmit+0x230>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d90e:	2303      	movs	r3, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d910:	68a2      	ldr	r2, [r4, #8]
  __HAL_LOCK(hspi);
 800d912:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d916:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d91a:	f5b2 2fc0 	cmp.w	r2, #393216	@ 0x60000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d91e:	f04f 0300 	mov.w	r3, #0
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800d922:	f8c4 905c 	str.w	r9, [r4, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800d926:	f8a4 8060 	strh.w	r8, [r4, #96]	@ 0x60
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d92a:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  hspi->pRxBuffPtr  = NULL;
 800d92e:	6663      	str	r3, [r4, #100]	@ 0x64
  hspi->TxXferCount = Size;
 800d930:	f8a4 8062 	strh.w	r8, [r4, #98]	@ 0x62
  hspi->RxXferSize  = (uint16_t) 0UL;
 800d934:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800d938:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 800d93c:	e9c4 331c 	strd	r3, r3, [r4, #112]	@ 0x70
    SPI_1LINE_TX(hspi);
 800d940:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d942:	d139      	bne.n	800d9b8 <HAL_SPI_Transmit+0xe4>
    SPI_1LINE_TX(hspi);
 800d944:	681a      	ldr	r2, [r3, #0]
 800d946:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d94a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d94c:	6859      	ldr	r1, [r3, #4]
 800d94e:	0c09      	lsrs	r1, r1, #16
 800d950:	0409      	lsls	r1, r1, #16
 800d952:	ea41 0108 	orr.w	r1, r1, r8
 800d956:	6059      	str	r1, [r3, #4]
  __HAL_SPI_ENABLE(hspi);
 800d958:	681a      	ldr	r2, [r3, #0]
 800d95a:	f042 0201 	orr.w	r2, r2, #1
 800d95e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d960:	6862      	ldr	r2, [r4, #4]
 800d962:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 800d966:	d103      	bne.n	800d970 <HAL_SPI_Transmit+0x9c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d968:	681a      	ldr	r2, [r3, #0]
 800d96a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d96e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d970:	68e3      	ldr	r3, [r4, #12]
 800d972:	2b0f      	cmp	r3, #15
 800d974:	d835      	bhi.n	800d9e2 <HAL_SPI_Transmit+0x10e>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d976:	2b07      	cmp	r3, #7
 800d978:	d87a      	bhi.n	800da70 <HAL_SPI_Transmit+0x19c>
    while (hspi->TxXferCount > 0UL)
 800d97a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d97e:	6821      	ldr	r1, [r4, #0]
    while (hspi->TxXferCount > 0UL)
 800d980:	b29b      	uxth	r3, r3
 800d982:	2b00      	cmp	r3, #0
 800d984:	d033      	beq.n	800d9ee <HAL_SPI_Transmit+0x11a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d986:	694b      	ldr	r3, [r1, #20]
 800d988:	0798      	lsls	r0, r3, #30
 800d98a:	f140 80a1 	bpl.w	800dad0 <HAL_SPI_Transmit+0x1fc>
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d98e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d992:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d994:	b29b      	uxth	r3, r3
 800d996:	2b03      	cmp	r3, #3
 800d998:	f240 8081 	bls.w	800da9e <HAL_SPI_Transmit+0x1ca>
 800d99c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d99e:	2b40      	cmp	r3, #64	@ 0x40
 800d9a0:	d97d      	bls.n	800da9e <HAL_SPI_Transmit+0x1ca>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d9a2:	f852 3b04 	ldr.w	r3, [r2], #4
 800d9a6:	620b      	str	r3, [r1, #32]
          hspi->TxXferCount -= (uint16_t)4UL;
 800d9a8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d9ac:	65e2      	str	r2, [r4, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d9ae:	3b04      	subs	r3, #4
          hspi->TxXferCount -= (uint16_t)2UL;
 800d9b0:	b29b      	uxth	r3, r3
 800d9b2:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
 800d9b6:	e7e0      	b.n	800d97a <HAL_SPI_Transmit+0xa6>
    SPI_2LINES_TX(hspi);
 800d9b8:	68da      	ldr	r2, [r3, #12]
 800d9ba:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800d9be:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800d9c2:	60da      	str	r2, [r3, #12]
 800d9c4:	e7c2      	b.n	800d94c <HAL_SPI_Transmit+0x78>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d9c6:	6953      	ldr	r3, [r2, #20]
 800d9c8:	0798      	lsls	r0, r3, #30
 800d9ca:	d523      	bpl.n	800da14 <HAL_SPI_Transmit+0x140>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d9cc:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800d9ce:	f853 1b04 	ldr.w	r1, [r3], #4
 800d9d2:	6211      	str	r1, [r2, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d9d4:	65e3      	str	r3, [r4, #92]	@ 0x5c
        hspi->TxXferCount--;
 800d9d6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800d9da:	3b01      	subs	r3, #1
 800d9dc:	b29b      	uxth	r3, r3
 800d9de:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
    while (hspi->TxXferCount > 0UL)
 800d9e2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d9e6:	6822      	ldr	r2, [r4, #0]
    while (hspi->TxXferCount > 0UL)
 800d9e8:	b29b      	uxth	r3, r3
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d1eb      	bne.n	800d9c6 <HAL_SPI_Transmit+0xf2>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d9ee:	6823      	ldr	r3, [r4, #0]
 800d9f0:	695b      	ldr	r3, [r3, #20]
 800d9f2:	071b      	lsls	r3, r3, #28
 800d9f4:	d576      	bpl.n	800dae4 <HAL_SPI_Transmit+0x210>
  SPI_CloseTransfer(hspi);
 800d9f6:	4620      	mov	r0, r4
 800d9f8:	f7ff fe71 	bl	800d6de <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 800d9fc:	2301      	movs	r3, #1
 800d9fe:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  __HAL_UNLOCK(hspi);
 800da02:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800da04:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  __HAL_UNLOCK(hspi);
 800da08:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800da0c:	1ac0      	subs	r0, r0, r3
 800da0e:	bf18      	it	ne
 800da10:	2001      	movne	r0, #1
 800da12:	e016      	b.n	800da42 <HAL_SPI_Transmit+0x16e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800da14:	f7fb f932 	bl	8008c7c <HAL_GetTick>
 800da18:	1b80      	subs	r0, r0, r6
 800da1a:	42a8      	cmp	r0, r5
 800da1c:	d3e1      	bcc.n	800d9e2 <HAL_SPI_Transmit+0x10e>
 800da1e:	1c69      	adds	r1, r5, #1
 800da20:	d0df      	beq.n	800d9e2 <HAL_SPI_Transmit+0x10e>
          SPI_CloseTransfer(hspi);
 800da22:	4620      	mov	r0, r4
 800da24:	f7ff fe5b 	bl	800d6de <SPI_CloseTransfer>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800da28:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 800da2c:	2003      	movs	r0, #3
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800da2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800da32:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800da36:	2301      	movs	r3, #1
 800da38:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
          __HAL_UNLOCK(hspi);
 800da3c:	2300      	movs	r3, #0
 800da3e:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
}
 800da42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800da46:	694b      	ldr	r3, [r1, #20]
 800da48:	079a      	lsls	r2, r3, #30
 800da4a:	d520      	bpl.n	800da8e <HAL_SPI_Transmit+0x1ba>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800da4c:	f8b4 2062 	ldrh.w	r2, [r4, #98]	@ 0x62
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800da50:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800da52:	b292      	uxth	r2, r2
 800da54:	2a01      	cmp	r2, #1
 800da56:	d912      	bls.n	800da7e <HAL_SPI_Transmit+0x1aa>
 800da58:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800da5a:	b182      	cbz	r2, 800da7e <HAL_SPI_Transmit+0x1aa>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800da5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800da60:	620a      	str	r2, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800da62:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800da64:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800da68:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 800da6a:	b29b      	uxth	r3, r3
 800da6c:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
    while (hspi->TxXferCount > 0UL)
 800da70:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800da74:	6821      	ldr	r1, [r4, #0]
    while (hspi->TxXferCount > 0UL)
 800da76:	b29b      	uxth	r3, r3
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d1e4      	bne.n	800da46 <HAL_SPI_Transmit+0x172>
 800da7c:	e7b7      	b.n	800d9ee <HAL_SPI_Transmit+0x11a>
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800da7e:	f833 2b02 	ldrh.w	r2, [r3], #2
 800da82:	843a      	strh	r2, [r7, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800da84:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount--;
 800da86:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800da8a:	3b01      	subs	r3, #1
 800da8c:	e7ed      	b.n	800da6a <HAL_SPI_Transmit+0x196>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800da8e:	f7fb f8f5 	bl	8008c7c <HAL_GetTick>
 800da92:	1b80      	subs	r0, r0, r6
 800da94:	42a8      	cmp	r0, r5
 800da96:	d3eb      	bcc.n	800da70 <HAL_SPI_Transmit+0x19c>
 800da98:	1c6b      	adds	r3, r5, #1
 800da9a:	d0e9      	beq.n	800da70 <HAL_SPI_Transmit+0x19c>
 800da9c:	e7c1      	b.n	800da22 <HAL_SPI_Transmit+0x14e>
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800da9e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800daa2:	b29b      	uxth	r3, r3
 800daa4:	2b01      	cmp	r3, #1
 800daa6:	d909      	bls.n	800dabc <HAL_SPI_Transmit+0x1e8>
 800daa8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800daaa:	b13b      	cbz	r3, 800dabc <HAL_SPI_Transmit+0x1e8>
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800daac:	f832 3b02 	ldrh.w	r3, [r2], #2
 800dab0:	843b      	strh	r3, [r7, #32]
          hspi->TxXferCount -= (uint16_t)2UL;
 800dab2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dab6:	65e2      	str	r2, [r4, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800dab8:	3b02      	subs	r3, #2
 800daba:	e779      	b.n	800d9b0 <HAL_SPI_Transmit+0xdc>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800dabc:	7813      	ldrb	r3, [r2, #0]
 800dabe:	f881 3020 	strb.w	r3, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800dac2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800dac4:	3301      	adds	r3, #1
 800dac6:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount--;
 800dac8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800dacc:	3b01      	subs	r3, #1
 800dace:	e76f      	b.n	800d9b0 <HAL_SPI_Transmit+0xdc>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dad0:	f7fb f8d4 	bl	8008c7c <HAL_GetTick>
 800dad4:	1b80      	subs	r0, r0, r6
 800dad6:	42a8      	cmp	r0, r5
 800dad8:	f4ff af4f 	bcc.w	800d97a <HAL_SPI_Transmit+0xa6>
 800dadc:	1c69      	adds	r1, r5, #1
 800dade:	f43f af4c 	beq.w	800d97a <HAL_SPI_Transmit+0xa6>
 800dae2:	e79e      	b.n	800da22 <HAL_SPI_Transmit+0x14e>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dae4:	f7fb f8ca 	bl	8008c7c <HAL_GetTick>
 800dae8:	1b80      	subs	r0, r0, r6
 800daea:	4285      	cmp	r5, r0
 800daec:	f63f af7f 	bhi.w	800d9ee <HAL_SPI_Transmit+0x11a>
 800daf0:	1c6a      	adds	r2, r5, #1
 800daf2:	f43f af7c 	beq.w	800d9ee <HAL_SPI_Transmit+0x11a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800daf6:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800dafa:	f043 0320 	orr.w	r3, r3, #32
 800dafe:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 800db02:	e778      	b.n	800d9f6 <HAL_SPI_Transmit+0x122>
    return HAL_BUSY;
 800db04:	2002      	movs	r0, #2
 800db06:	e79c      	b.n	800da42 <HAL_SPI_Transmit+0x16e>

0800db08 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800db08:	4770      	bx	lr
	...

0800db0c <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800db0c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800db10:	2b01      	cmp	r3, #1
 800db12:	d12f      	bne.n	800db74 <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db14:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800db16:	4a18      	ldr	r2, [pc, #96]	@ (800db78 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800db18:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800db1c:	6803      	ldr	r3, [r0, #0]
 800db1e:	4293      	cmp	r3, r2
 800db20:	d01a      	beq.n	800db58 <HAL_TIM_Base_Start+0x4c>
 800db22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db26:	d017      	beq.n	800db58 <HAL_TIM_Base_Start+0x4c>
 800db28:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800db2c:	4293      	cmp	r3, r2
 800db2e:	d013      	beq.n	800db58 <HAL_TIM_Base_Start+0x4c>
 800db30:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800db34:	4293      	cmp	r3, r2
 800db36:	d00f      	beq.n	800db58 <HAL_TIM_Base_Start+0x4c>
 800db38:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800db3c:	4293      	cmp	r3, r2
 800db3e:	d00b      	beq.n	800db58 <HAL_TIM_Base_Start+0x4c>
 800db40:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800db44:	4293      	cmp	r3, r2
 800db46:	d007      	beq.n	800db58 <HAL_TIM_Base_Start+0x4c>
 800db48:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800db4c:	4293      	cmp	r3, r2
 800db4e:	d003      	beq.n	800db58 <HAL_TIM_Base_Start+0x4c>
 800db50:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800db54:	4293      	cmp	r3, r2
 800db56:	d107      	bne.n	800db68 <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800db58:	6899      	ldr	r1, [r3, #8]
 800db5a:	4a08      	ldr	r2, [pc, #32]	@ (800db7c <HAL_TIM_Base_Start+0x70>)
 800db5c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db5e:	2a06      	cmp	r2, #6
 800db60:	d006      	beq.n	800db70 <HAL_TIM_Base_Start+0x64>
 800db62:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800db66:	d003      	beq.n	800db70 <HAL_TIM_Base_Start+0x64>
    {
      __HAL_TIM_ENABLE(htim);
 800db68:	681a      	ldr	r2, [r3, #0]
 800db6a:	f042 0201 	orr.w	r2, r2, #1
 800db6e:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800db70:	2000      	movs	r0, #0
 800db72:	4770      	bx	lr
    return HAL_ERROR;
 800db74:	2001      	movs	r0, #1
}
 800db76:	4770      	bx	lr
 800db78:	40010000 	.word	0x40010000
 800db7c:	00010007 	.word	0x00010007

0800db80 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800db80:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800db84:	2b01      	cmp	r3, #1
 800db86:	d133      	bne.n	800dbf0 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db88:	2302      	movs	r3, #2
 800db8a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800db8e:	6803      	ldr	r3, [r0, #0]
 800db90:	68da      	ldr	r2, [r3, #12]
 800db92:	f042 0201 	orr.w	r2, r2, #1
 800db96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800db98:	4a16      	ldr	r2, [pc, #88]	@ (800dbf4 <HAL_TIM_Base_Start_IT+0x74>)
 800db9a:	4293      	cmp	r3, r2
 800db9c:	d01a      	beq.n	800dbd4 <HAL_TIM_Base_Start_IT+0x54>
 800db9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dba2:	d017      	beq.n	800dbd4 <HAL_TIM_Base_Start_IT+0x54>
 800dba4:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	d013      	beq.n	800dbd4 <HAL_TIM_Base_Start_IT+0x54>
 800dbac:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800dbb0:	4293      	cmp	r3, r2
 800dbb2:	d00f      	beq.n	800dbd4 <HAL_TIM_Base_Start_IT+0x54>
 800dbb4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800dbb8:	4293      	cmp	r3, r2
 800dbba:	d00b      	beq.n	800dbd4 <HAL_TIM_Base_Start_IT+0x54>
 800dbbc:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800dbc0:	4293      	cmp	r3, r2
 800dbc2:	d007      	beq.n	800dbd4 <HAL_TIM_Base_Start_IT+0x54>
 800dbc4:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800dbc8:	4293      	cmp	r3, r2
 800dbca:	d003      	beq.n	800dbd4 <HAL_TIM_Base_Start_IT+0x54>
 800dbcc:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800dbd0:	4293      	cmp	r3, r2
 800dbd2:	d107      	bne.n	800dbe4 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dbd4:	6899      	ldr	r1, [r3, #8]
 800dbd6:	4a08      	ldr	r2, [pc, #32]	@ (800dbf8 <HAL_TIM_Base_Start_IT+0x78>)
 800dbd8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbda:	2a06      	cmp	r2, #6
 800dbdc:	d006      	beq.n	800dbec <HAL_TIM_Base_Start_IT+0x6c>
 800dbde:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800dbe2:	d003      	beq.n	800dbec <HAL_TIM_Base_Start_IT+0x6c>
    {
      __HAL_TIM_ENABLE(htim);
 800dbe4:	681a      	ldr	r2, [r3, #0]
 800dbe6:	f042 0201 	orr.w	r2, r2, #1
 800dbea:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800dbec:	2000      	movs	r0, #0
 800dbee:	4770      	bx	lr
    return HAL_ERROR;
 800dbf0:	2001      	movs	r0, #1
}
 800dbf2:	4770      	bx	lr
 800dbf4:	40010000 	.word	0x40010000
 800dbf8:	00010007 	.word	0x00010007

0800dbfc <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800dbfc:	4770      	bx	lr

0800dbfe <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800dbfe:	4770      	bx	lr

0800dc00 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800dc00:	4770      	bx	lr

0800dc02 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800dc02:	4770      	bx	lr

0800dc04 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 800dc04:	6803      	ldr	r3, [r0, #0]
{
 800dc06:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800dc08:	68dd      	ldr	r5, [r3, #12]
{
 800dc0a:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 800dc0c:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800dc0e:	07b2      	lsls	r2, r6, #30
 800dc10:	d50d      	bpl.n	800dc2e <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800dc12:	07a9      	lsls	r1, r5, #30
 800dc14:	d50b      	bpl.n	800dc2e <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800dc16:	f06f 0202 	mvn.w	r2, #2
 800dc1a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dc1c:	2201      	movs	r2, #1
 800dc1e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dc20:	699b      	ldr	r3, [r3, #24]
 800dc22:	079a      	lsls	r2, r3, #30
 800dc24:	d075      	beq.n	800dd12 <HAL_TIM_IRQHandler+0x10e>
          HAL_TIM_IC_CaptureCallback(htim);
 800dc26:	f7ff ffea 	bl	800dbfe <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800dc2e:	0773      	lsls	r3, r6, #29
 800dc30:	d510      	bpl.n	800dc54 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800dc32:	0768      	lsls	r0, r5, #29
 800dc34:	d50e      	bpl.n	800dc54 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800dc36:	6823      	ldr	r3, [r4, #0]
 800dc38:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800dc3c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800dc3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dc40:	2202      	movs	r2, #2
 800dc42:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dc44:	699b      	ldr	r3, [r3, #24]
 800dc46:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800dc4a:	d068      	beq.n	800dd1e <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 800dc4c:	f7ff ffd7 	bl	800dbfe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc50:	2300      	movs	r3, #0
 800dc52:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800dc54:	0731      	lsls	r1, r6, #28
 800dc56:	d50f      	bpl.n	800dc78 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800dc58:	072a      	lsls	r2, r5, #28
 800dc5a:	d50d      	bpl.n	800dc78 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800dc5c:	6823      	ldr	r3, [r4, #0]
 800dc5e:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800dc62:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800dc64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dc66:	2204      	movs	r2, #4
 800dc68:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dc6a:	69db      	ldr	r3, [r3, #28]
 800dc6c:	079b      	lsls	r3, r3, #30
 800dc6e:	d05c      	beq.n	800dd2a <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800dc70:	f7ff ffc5 	bl	800dbfe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc74:	2300      	movs	r3, #0
 800dc76:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800dc78:	06f1      	lsls	r1, r6, #27
 800dc7a:	d510      	bpl.n	800dc9e <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800dc7c:	06ea      	lsls	r2, r5, #27
 800dc7e:	d50e      	bpl.n	800dc9e <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800dc80:	6823      	ldr	r3, [r4, #0]
 800dc82:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800dc86:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800dc88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dc8a:	2208      	movs	r2, #8
 800dc8c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dc8e:	69db      	ldr	r3, [r3, #28]
 800dc90:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800dc94:	d04f      	beq.n	800dd36 <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 800dc96:	f7ff ffb2 	bl	800dbfe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800dc9e:	07f3      	lsls	r3, r6, #31
 800dca0:	d508      	bpl.n	800dcb4 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800dca2:	07e8      	lsls	r0, r5, #31
 800dca4:	d506      	bpl.n	800dcb4 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800dca6:	6823      	ldr	r3, [r4, #0]
 800dca8:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800dcac:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800dcae:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800dcb0:	f7f3 fa8c 	bl	80011cc <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dcb4:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 800dcb8:	d008      	beq.n	800dccc <HAL_TIM_IRQHandler+0xc8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dcba:	0629      	lsls	r1, r5, #24
 800dcbc:	d506      	bpl.n	800dccc <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800dcbe:	6823      	ldr	r3, [r4, #0]
 800dcc0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 800dcc4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800dcc6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800dcc8:	f000 f8d7 	bl	800de7a <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800dccc:	05f2      	lsls	r2, r6, #23
 800dcce:	d508      	bpl.n	800dce2 <HAL_TIM_IRQHandler+0xde>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dcd0:	062b      	lsls	r3, r5, #24
 800dcd2:	d506      	bpl.n	800dce2 <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dcd4:	6823      	ldr	r3, [r4, #0]
 800dcd6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800dcda:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dcdc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800dcde:	f000 f8cd 	bl	800de7c <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800dce2:	0670      	lsls	r0, r6, #25
 800dce4:	d508      	bpl.n	800dcf8 <HAL_TIM_IRQHandler+0xf4>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800dce6:	0669      	lsls	r1, r5, #25
 800dce8:	d506      	bpl.n	800dcf8 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800dcea:	6823      	ldr	r3, [r4, #0]
 800dcec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800dcf0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800dcf2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800dcf4:	f7ff ff85 	bl	800dc02 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800dcf8:	06b2      	lsls	r2, r6, #26
 800dcfa:	d522      	bpl.n	800dd42 <HAL_TIM_IRQHandler+0x13e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800dcfc:	06ab      	lsls	r3, r5, #26
 800dcfe:	d520      	bpl.n	800dd42 <HAL_TIM_IRQHandler+0x13e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800dd00:	6823      	ldr	r3, [r4, #0]
 800dd02:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800dd06:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800dd08:	611a      	str	r2, [r3, #16]
}
 800dd0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 800dd0e:	f000 b8b3 	b.w	800de78 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd12:	f7ff ff73 	bl	800dbfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd16:	4620      	mov	r0, r4
 800dd18:	f7ff ff72 	bl	800dc00 <HAL_TIM_PWM_PulseFinishedCallback>
 800dd1c:	e785      	b.n	800dc2a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd1e:	f7ff ff6d 	bl	800dbfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd22:	4620      	mov	r0, r4
 800dd24:	f7ff ff6c 	bl	800dc00 <HAL_TIM_PWM_PulseFinishedCallback>
 800dd28:	e792      	b.n	800dc50 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd2a:	f7ff ff67 	bl	800dbfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd2e:	4620      	mov	r0, r4
 800dd30:	f7ff ff66 	bl	800dc00 <HAL_TIM_PWM_PulseFinishedCallback>
 800dd34:	e79e      	b.n	800dc74 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd36:	f7ff ff61 	bl	800dbfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd3a:	4620      	mov	r0, r4
 800dd3c:	f7ff ff60 	bl	800dc00 <HAL_TIM_PWM_PulseFinishedCallback>
 800dd40:	e7ab      	b.n	800dc9a <HAL_TIM_IRQHandler+0x96>
}
 800dd42:	bd70      	pop	{r4, r5, r6, pc}

0800dd44 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dd44:	4a32      	ldr	r2, [pc, #200]	@ (800de10 <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 800dd46:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dd48:	4290      	cmp	r0, r2
 800dd4a:	d012      	beq.n	800dd72 <TIM_Base_SetConfig+0x2e>
 800dd4c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800dd50:	d00f      	beq.n	800dd72 <TIM_Base_SetConfig+0x2e>
 800dd52:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800dd56:	4290      	cmp	r0, r2
 800dd58:	d00b      	beq.n	800dd72 <TIM_Base_SetConfig+0x2e>
 800dd5a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800dd5e:	4290      	cmp	r0, r2
 800dd60:	d007      	beq.n	800dd72 <TIM_Base_SetConfig+0x2e>
 800dd62:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800dd66:	4290      	cmp	r0, r2
 800dd68:	d003      	beq.n	800dd72 <TIM_Base_SetConfig+0x2e>
 800dd6a:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800dd6e:	4290      	cmp	r0, r2
 800dd70:	d119      	bne.n	800dda6 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800dd72:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dd74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800dd78:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dd7a:	4a25      	ldr	r2, [pc, #148]	@ (800de10 <TIM_Base_SetConfig+0xcc>)
 800dd7c:	4290      	cmp	r0, r2
 800dd7e:	d01d      	beq.n	800ddbc <TIM_Base_SetConfig+0x78>
 800dd80:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800dd84:	d01a      	beq.n	800ddbc <TIM_Base_SetConfig+0x78>
 800dd86:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800dd8a:	4290      	cmp	r0, r2
 800dd8c:	d016      	beq.n	800ddbc <TIM_Base_SetConfig+0x78>
 800dd8e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800dd92:	4290      	cmp	r0, r2
 800dd94:	d012      	beq.n	800ddbc <TIM_Base_SetConfig+0x78>
 800dd96:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800dd9a:	4290      	cmp	r0, r2
 800dd9c:	d00e      	beq.n	800ddbc <TIM_Base_SetConfig+0x78>
 800dd9e:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800dda2:	4290      	cmp	r0, r2
 800dda4:	d00a      	beq.n	800ddbc <TIM_Base_SetConfig+0x78>
 800dda6:	4a1b      	ldr	r2, [pc, #108]	@ (800de14 <TIM_Base_SetConfig+0xd0>)
 800dda8:	4290      	cmp	r0, r2
 800ddaa:	d007      	beq.n	800ddbc <TIM_Base_SetConfig+0x78>
 800ddac:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ddb0:	4290      	cmp	r0, r2
 800ddb2:	d003      	beq.n	800ddbc <TIM_Base_SetConfig+0x78>
 800ddb4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ddb8:	4290      	cmp	r0, r2
 800ddba:	d103      	bne.n	800ddc4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ddbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ddc0:	68ca      	ldr	r2, [r1, #12]
 800ddc2:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ddc4:	694a      	ldr	r2, [r1, #20]
 800ddc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ddca:	4313      	orrs	r3, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ddcc:	688a      	ldr	r2, [r1, #8]
 800ddce:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ddd0:	680a      	ldr	r2, [r1, #0]
 800ddd2:	6282      	str	r2, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ddd4:	4a0e      	ldr	r2, [pc, #56]	@ (800de10 <TIM_Base_SetConfig+0xcc>)
 800ddd6:	4290      	cmp	r0, r2
 800ddd8:	d00f      	beq.n	800ddfa <TIM_Base_SetConfig+0xb6>
 800ddda:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ddde:	4290      	cmp	r0, r2
 800dde0:	d00b      	beq.n	800ddfa <TIM_Base_SetConfig+0xb6>
 800dde2:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800dde6:	4290      	cmp	r0, r2
 800dde8:	d007      	beq.n	800ddfa <TIM_Base_SetConfig+0xb6>
 800ddea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ddee:	4290      	cmp	r0, r2
 800ddf0:	d003      	beq.n	800ddfa <TIM_Base_SetConfig+0xb6>
 800ddf2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ddf6:	4290      	cmp	r0, r2
 800ddf8:	d101      	bne.n	800ddfe <TIM_Base_SetConfig+0xba>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ddfa:	690a      	ldr	r2, [r1, #16]
 800ddfc:	6302      	str	r2, [r0, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ddfe:	6802      	ldr	r2, [r0, #0]
 800de00:	f042 0204 	orr.w	r2, r2, #4
 800de04:	6002      	str	r2, [r0, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800de06:	2201      	movs	r2, #1
 800de08:	6142      	str	r2, [r0, #20]

  TIMx->CR1 = tmpcr1;
 800de0a:	6003      	str	r3, [r0, #0]
}
 800de0c:	4770      	bx	lr
 800de0e:	bf00      	nop
 800de10:	40010000 	.word	0x40010000
 800de14:	40014000 	.word	0x40014000

0800de18 <HAL_TIM_Base_Init>:
{
 800de18:	b510      	push	{r4, lr}
  if (htim == NULL)
 800de1a:	4604      	mov	r4, r0
 800de1c:	b350      	cbz	r0, 800de74 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800de1e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800de22:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800de26:	b91b      	cbnz	r3, 800de30 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800de28:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800de2c:	f7ff fe6c 	bl	800db08 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800de30:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800de32:	6820      	ldr	r0, [r4, #0]
 800de34:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800de36:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800de3a:	f7ff ff83 	bl	800dd44 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800de3e:	2301      	movs	r3, #1
  return HAL_OK;
 800de40:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800de42:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de46:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800de4a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800de4e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800de52:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800de56:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800de5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de5e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800de62:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800de66:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800de6a:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800de6e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800de72:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800de74:	2001      	movs	r0, #1
 800de76:	e7fc      	b.n	800de72 <HAL_TIM_Base_Init+0x5a>

0800de78 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800de78:	4770      	bx	lr

0800de7a <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800de7a:	4770      	bx	lr

0800de7c <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800de7c:	4770      	bx	lr

0800de7e <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800de7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800de82:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800de86:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800de8a:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 800de8e:	ea43 0308 	orr.w	r3, r3, r8
 800de92:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800de96:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800de9a:	6809      	ldr	r1, [r1, #0]
 800de9c:	b991      	cbnz	r1, 800dec4 <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800de9e:	ea43 030e 	orr.w	r3, r3, lr
 800dea2:	6801      	ldr	r1, [r0, #0]
 800dea4:	4313      	orrs	r3, r2
 800dea6:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 800deaa:	ea43 030c 	orr.w	r3, r3, ip
 800deae:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 800deb2:	433b      	orrs	r3, r7
 800deb4:	4333      	orrs	r3, r6
 800deb6:	432b      	orrs	r3, r5
 800deb8:	4323      	orrs	r3, r4
 800deba:	430b      	orrs	r3, r1
 800debc:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800debe:	2000      	movs	r0, #0
 800dec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800dec4:	6801      	ldr	r1, [r0, #0]
 800dec6:	ea43 030e 	orr.w	r3, r3, lr
 800deca:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 800dece:	430b      	orrs	r3, r1
 800ded0:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800ded2:	ea42 030c 	orr.w	r3, r2, ip
 800ded6:	6841      	ldr	r1, [r0, #4]
 800ded8:	433b      	orrs	r3, r7
 800deda:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 800dede:	4333      	orrs	r3, r6
 800dee0:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800dee4:	432b      	orrs	r3, r5
 800dee6:	4323      	orrs	r3, r4
 800dee8:	4313      	orrs	r3, r2
 800deea:	6043      	str	r3, [r0, #4]
 800deec:	e7e7      	b.n	800debe <FMC_SDRAM_Init+0x40>

0800deee <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800deee:	68cb      	ldr	r3, [r1, #12]
 800def0:	f103 3cff 	add.w	ip, r3, #4294967295
 800def4:	694b      	ldr	r3, [r1, #20]
{
 800def6:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800def8:	3b01      	subs	r3, #1
 800defa:	680f      	ldr	r7, [r1, #0]
 800defc:	684c      	ldr	r4, [r1, #4]
 800defe:	688e      	ldr	r6, [r1, #8]
 800df00:	051b      	lsls	r3, r3, #20
 800df02:	690d      	ldr	r5, [r1, #16]
 800df04:	3c01      	subs	r4, #1
 800df06:	6989      	ldr	r1, [r1, #24]
 800df08:	3e01      	subs	r6, #1
 800df0a:	3d01      	subs	r5, #1
 800df0c:	3f01      	subs	r7, #1
 800df0e:	3901      	subs	r1, #1
 800df10:	0124      	lsls	r4, r4, #4
 800df12:	0236      	lsls	r6, r6, #8
 800df14:	042d      	lsls	r5, r5, #16
 800df16:	0609      	lsls	r1, r1, #24
 800df18:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800df1c:	b95a      	cbnz	r2, 800df36 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800df1e:	433b      	orrs	r3, r7
 800df20:	6882      	ldr	r2, [r0, #8]
 800df22:	4323      	orrs	r3, r4
 800df24:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800df28:	4333      	orrs	r3, r6
 800df2a:	432b      	orrs	r3, r5
 800df2c:	430b      	orrs	r3, r1
 800df2e:	4313      	orrs	r3, r2
 800df30:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800df32:	2000      	movs	r0, #0
 800df34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800df36:	6882      	ldr	r2, [r0, #8]
 800df38:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800df3c:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 800df40:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800df42:	ea44 0306 	orr.w	r3, r4, r6
 800df46:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800df48:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800df4a:	68c2      	ldr	r2, [r0, #12]
 800df4c:	432b      	orrs	r3, r5
 800df4e:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800df52:	430b      	orrs	r3, r1
 800df54:	4313      	orrs	r3, r2
 800df56:	60c3      	str	r3, [r0, #12]
 800df58:	e7eb      	b.n	800df32 <FMC_SDRAM_Timing_Init+0x44>

0800df5a <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 800df5a:	4603      	mov	r3, r0
 800df5c:	eb00 0281 	add.w	r2, r0, r1, lsl #2
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 800df60:	f44f 7034 	mov.w	r0, #720	@ 0x2d0
 800df64:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
 800df68:	2000      	movs	r0, #0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 800df6a:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800df6e:	6091      	str	r1, [r2, #8]
  Device->SDCMR      = 0x00000000U;
 800df70:	6118      	str	r0, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 800df72:	6158      	str	r0, [r3, #20]
  Device->SDSR       = 0x00000000U;
 800df74:	6198      	str	r0, [r3, #24]

  return HAL_OK;
}
 800df76:	4770      	bx	lr

0800df78 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800df78:	6902      	ldr	r2, [r0, #16]
{
 800df7a:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800df7c:	e9d1 3400 	ldrd	r3, r4, [r1]
 800df80:	0d92      	lsrs	r2, r2, #22
 800df82:	4323      	orrs	r3, r4
 800df84:	68cc      	ldr	r4, [r1, #12]
 800df86:	0592      	lsls	r2, r2, #22
 800df88:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800df8c:	4313      	orrs	r3, r2
 800df8e:	688a      	ldr	r2, [r1, #8]
 800df90:	3a01      	subs	r2, #1
 800df92:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800df96:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800df98:	2000      	movs	r0, #0
 800df9a:	bd10      	pop	{r4, pc}

0800df9c <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800df9c:	6943      	ldr	r3, [r0, #20]
 800df9e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800dfa2:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800dfa6:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800dfaa:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 800dfac:	2000      	movs	r0, #0
 800dfae:	4770      	bx	lr

0800dfb0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800dfb0:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800dfb2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dfb6:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800dfb8:	f001 fede 	bl	800fd78 <xTaskGetSchedulerState>
 800dfbc:	2801      	cmp	r0, #1
 800dfbe:	d003      	beq.n	800dfc8 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800dfc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800dfc4:	f000 bc46 	b.w	800e854 <xPortSysTickHandler>
}
 800dfc8:	bd08      	pop	{r3, pc}
	...

0800dfcc <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dfcc:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800dfd0:	b92b      	cbnz	r3, 800dfde <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800dfd2:	4b06      	ldr	r3, [pc, #24]	@ (800dfec <osKernelInitialize+0x20>)
 800dfd4:	6818      	ldr	r0, [r3, #0]
 800dfd6:	b928      	cbnz	r0, 800dfe4 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800dfd8:	2201      	movs	r2, #1
 800dfda:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800dfdc:	4770      	bx	lr
    stat = osErrorISR;
 800dfde:	f06f 0005 	mvn.w	r0, #5
 800dfe2:	4770      	bx	lr
    } else {
      stat = osError;
 800dfe4:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800dfe8:	4770      	bx	lr
 800dfea:	bf00      	nop
 800dfec:	2400d6d8 	.word	0x2400d6d8

0800dff0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800dff0:	b510      	push	{r4, lr}
 800dff2:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800dff6:	b95c      	cbnz	r4, 800e010 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800dff8:	4b08      	ldr	r3, [pc, #32]	@ (800e01c <osKernelStart+0x2c>)
 800dffa:	681a      	ldr	r2, [r3, #0]
 800dffc:	2a01      	cmp	r2, #1
 800dffe:	d10a      	bne.n	800e016 <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e000:	4a07      	ldr	r2, [pc, #28]	@ (800e020 <osKernelStart+0x30>)
 800e002:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e004:	2202      	movs	r2, #2
 800e006:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e008:	f001 fd56 	bl	800fab8 <vTaskStartScheduler>
      stat = osOK;
 800e00c:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800e00e:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800e010:	f06f 0005 	mvn.w	r0, #5
 800e014:	e7fb      	b.n	800e00e <osKernelStart+0x1e>
      stat = osError;
 800e016:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800e01a:	e7f8      	b.n	800e00e <osKernelStart+0x1e>
 800e01c:	2400d6d8 	.word	0x2400d6d8
 800e020:	e000ed00 	.word	0xe000ed00

0800e024 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e024:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e026:	4614      	mov	r4, r2
 800e028:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e02a:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e02c:	460b      	mov	r3, r1
  hTask = NULL;
 800e02e:	9205      	str	r2, [sp, #20]
 800e030:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800e034:	b9ca      	cbnz	r2, 800e06a <osThreadNew+0x46>
 800e036:	b1c0      	cbz	r0, 800e06a <osThreadNew+0x46>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800e038:	b36c      	cbz	r4, 800e096 <osThreadNew+0x72>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800e03a:	69a5      	ldr	r5, [r4, #24]
 800e03c:	2d00      	cmp	r5, #0
 800e03e:	bf08      	it	eq
 800e040:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e042:	1e69      	subs	r1, r5, #1
 800e044:	46ac      	mov	ip, r5
 800e046:	2937      	cmp	r1, #55	@ 0x37
 800e048:	d82a      	bhi.n	800e0a0 <osThreadNew+0x7c>
 800e04a:	6861      	ldr	r1, [r4, #4]
 800e04c:	07c9      	lsls	r1, r1, #31
 800e04e:	d427      	bmi.n	800e0a0 <osThreadNew+0x7c>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800e050:	6966      	ldr	r6, [r4, #20]
 800e052:	b16e      	cbz	r6, 800e070 <osThreadNew+0x4c>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e054:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800e056:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e058:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800e05c:	b157      	cbz	r7, 800e074 <osThreadNew+0x50>
 800e05e:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800e062:	d902      	bls.n	800e06a <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e064:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e066:	b104      	cbz	r4, 800e06a <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e068:	b9e6      	cbnz	r6, 800e0a4 <osThreadNew+0x80>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e06a:	9805      	ldr	r0, [sp, #20]
}
 800e06c:	b007      	add	sp, #28
 800e06e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800e070:	2280      	movs	r2, #128	@ 0x80
 800e072:	e7f0      	b.n	800e056 <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e074:	f1be 0f00 	cmp.w	lr, #0
 800e078:	d1f7      	bne.n	800e06a <osThreadNew+0x46>
      if (mem == 0) {
 800e07a:	6924      	ldr	r4, [r4, #16]
 800e07c:	2c00      	cmp	r4, #0
 800e07e:	d1f4      	bne.n	800e06a <osThreadNew+0x46>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e080:	ac05      	add	r4, sp, #20
 800e082:	b292      	uxth	r2, r2
 800e084:	e9cd c400 	strd	ip, r4, [sp]
 800e088:	f001 fbb3 	bl	800f7f2 <xTaskCreate>
 800e08c:	2801      	cmp	r0, #1
            hTask = NULL;
 800e08e:	bf1c      	itt	ne
 800e090:	2300      	movne	r3, #0
 800e092:	9305      	strne	r3, [sp, #20]
 800e094:	e7e9      	b.n	800e06a <osThreadNew+0x46>
    name = NULL;
 800e096:	4621      	mov	r1, r4
    prio  = (UBaseType_t)osPriorityNormal;
 800e098:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800e09c:	2280      	movs	r2, #128	@ 0x80
 800e09e:	e7ef      	b.n	800e080 <osThreadNew+0x5c>
        return (NULL);
 800e0a0:	4610      	mov	r0, r2
 800e0a2:	e7e3      	b.n	800e06c <osThreadNew+0x48>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e0a4:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800e0a8:	9500      	str	r5, [sp, #0]
 800e0aa:	f001 fb6a 	bl	800f782 <xTaskCreateStatic>
 800e0ae:	9005      	str	r0, [sp, #20]
 800e0b0:	e7db      	b.n	800e06a <osThreadNew+0x46>

0800e0b2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800e0b2:	b570      	push	{r4, r5, r6, lr}
 800e0b4:	4605      	mov	r5, r0
 800e0b6:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800e0ba:	b116      	cbz	r6, 800e0c2 <osMutexNew+0x10>
  hMutex = NULL;
 800e0bc:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800e0be:	4620      	mov	r0, r4
 800e0c0:	bd70      	pop	{r4, r5, r6, pc}
    if (attr != NULL) {
 800e0c2:	b110      	cbz	r0, 800e0ca <osMutexNew+0x18>
      type = attr->attr_bits;
 800e0c4:	6846      	ldr	r6, [r0, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 800e0c6:	0733      	lsls	r3, r6, #28
 800e0c8:	d4f8      	bmi.n	800e0bc <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800e0ca:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 800e0ce:	b17d      	cbz	r5, 800e0f0 <osMutexNew+0x3e>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e0d0:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 800e0d4:	b151      	cbz	r1, 800e0ec <osMutexNew+0x3a>
 800e0d6:	2b4f      	cmp	r3, #79	@ 0x4f
 800e0d8:	d9f0      	bls.n	800e0bc <osMutexNew+0xa>
          if (rmtx != 0U) {
 800e0da:	b1de      	cbz	r6, 800e114 <osMutexNew+0x62>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800e0dc:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800e0de:	f000 fec2 	bl	800ee66 <xQueueCreateMutexStatic>
 800e0e2:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800e0e4:	2800      	cmp	r0, #0
 800e0e6:	d0e9      	beq.n	800e0bc <osMutexNew+0xa>
          name = attr->name;
 800e0e8:	682d      	ldr	r5, [r5, #0]
 800e0ea:	e00a      	b.n	800e102 <osMutexNew+0x50>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d1e5      	bne.n	800e0bc <osMutexNew+0xa>
            if (rmtx != 0U) {
 800e0f0:	b196      	cbz	r6, 800e118 <osMutexNew+0x66>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800e0f2:	2004      	movs	r0, #4
              hMutex = xSemaphoreCreateMutex ();
 800e0f4:	f000 feeb 	bl	800eece <xQueueCreateMutex>
 800e0f8:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800e0fa:	2800      	cmp	r0, #0
 800e0fc:	d0de      	beq.n	800e0bc <osMutexNew+0xa>
        if (attr != NULL) {
 800e0fe:	2d00      	cmp	r5, #0
 800e100:	d1f2      	bne.n	800e0e8 <osMutexNew+0x36>
        vQueueAddToRegistry (hMutex, name);
 800e102:	4629      	mov	r1, r5
 800e104:	4620      	mov	r0, r4
 800e106:	f001 f977 	bl	800f3f8 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800e10a:	2e00      	cmp	r6, #0
 800e10c:	d0d7      	beq.n	800e0be <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800e10e:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 800e112:	e7d4      	b.n	800e0be <osMutexNew+0xc>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800e114:	2001      	movs	r0, #1
 800e116:	e7e2      	b.n	800e0de <osMutexNew+0x2c>
              hMutex = xSemaphoreCreateMutex ();
 800e118:	2001      	movs	r0, #1
 800e11a:	e7eb      	b.n	800e0f4 <osMutexNew+0x42>

0800e11c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800e11c:	b538      	push	{r3, r4, r5, lr}
 800e11e:	4603      	mov	r3, r0
 800e120:	460c      	mov	r4, r1
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e122:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800e126:	f003 0201 	and.w	r2, r3, #1
 800e12a:	f3ef 8505 	mrs	r5, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800e12e:	b995      	cbnz	r5, 800e156 <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800e130:	2b01      	cmp	r3, #1
 800e132:	d913      	bls.n	800e15c <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800e134:	b162      	cbz	r2, 800e150 <osMutexAcquire+0x34>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800e136:	f001 f8f0 	bl	800f31a <xQueueTakeMutexRecursive>
 800e13a:	2801      	cmp	r0, #1
 800e13c:	d101      	bne.n	800e142 <osMutexAcquire+0x26>
  stat = osOK;
 800e13e:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800e140:	bd38      	pop	{r3, r4, r5, pc}
          stat = osErrorResource;
 800e142:	2c00      	cmp	r4, #0
 800e144:	bf14      	ite	ne
 800e146:	f06f 0001 	mvnne.w	r0, #1
 800e14a:	f06f 0002 	mvneq.w	r0, #2
 800e14e:	e7f7      	b.n	800e140 <osMutexAcquire+0x24>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800e150:	f001 f826 	bl	800f1a0 <xQueueSemaphoreTake>
 800e154:	e7f1      	b.n	800e13a <osMutexAcquire+0x1e>
    stat = osErrorISR;
 800e156:	f06f 0005 	mvn.w	r0, #5
 800e15a:	e7f1      	b.n	800e140 <osMutexAcquire+0x24>
    stat = osErrorParameter;
 800e15c:	f06f 0003 	mvn.w	r0, #3
 800e160:	e7ee      	b.n	800e140 <osMutexAcquire+0x24>

0800e162 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800e162:	4602      	mov	r2, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e164:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800e168:	b508      	push	{r3, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800e16a:	f002 0301 	and.w	r3, r2, #1
 800e16e:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800e172:	b979      	cbnz	r1, 800e194 <osMutexRelease+0x32>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800e174:	2a01      	cmp	r2, #1
 800e176:	d910      	bls.n	800e19a <osMutexRelease+0x38>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800e178:	b13b      	cbz	r3, 800e18a <osMutexRelease+0x28>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800e17a:	f000 fe89 	bl	800ee90 <xQueueGiveMutexRecursive>
 800e17e:	2801      	cmp	r0, #1
  stat = osOK;
 800e180:	bf0c      	ite	eq
 800e182:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800e184:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 800e188:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800e18a:	461a      	mov	r2, r3
 800e18c:	4619      	mov	r1, r3
 800e18e:	f000 fdb8 	bl	800ed02 <xQueueGenericSend>
 800e192:	e7f4      	b.n	800e17e <osMutexRelease+0x1c>
    stat = osErrorISR;
 800e194:	f06f 0005 	mvn.w	r0, #5
 800e198:	e7f6      	b.n	800e188 <osMutexRelease+0x26>
    stat = osErrorParameter;
 800e19a:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800e19e:	e7f3      	b.n	800e188 <osMutexRelease+0x26>

0800e1a0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800e1a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e1a2:	4604      	mov	r4, r0
 800e1a4:	460e      	mov	r6, r1
 800e1a6:	4615      	mov	r5, r2
 800e1a8:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800e1ac:	b942      	cbnz	r2, 800e1c0 <osSemaphoreNew+0x20>
 800e1ae:	b138      	cbz	r0, 800e1c0 <osSemaphoreNew+0x20>
 800e1b0:	4288      	cmp	r0, r1
 800e1b2:	d305      	bcc.n	800e1c0 <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 800e1b4:	b155      	cbz	r5, 800e1cc <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e1b6:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800e1ba:	b12b      	cbz	r3, 800e1c8 <osSemaphoreNew+0x28>
 800e1bc:	2f4f      	cmp	r7, #79	@ 0x4f
 800e1be:	d822      	bhi.n	800e206 <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 800e1c0:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800e1c2:	4620      	mov	r0, r4
 800e1c4:	b003      	add	sp, #12
 800e1c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e1c8:	2f00      	cmp	r7, #0
 800e1ca:	d1f9      	bne.n	800e1c0 <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 800e1cc:	2c01      	cmp	r4, #1
 800e1ce:	d00c      	beq.n	800e1ea <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800e1d0:	4620      	mov	r0, r4
 800e1d2:	4631      	mov	r1, r6
 800e1d4:	f000 fd77 	bl	800ecc6 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800e1d8:	4604      	mov	r4, r0
 800e1da:	2800      	cmp	r0, #0
 800e1dc:	d0f0      	beq.n	800e1c0 <osSemaphoreNew+0x20>
        if (attr != NULL) {
 800e1de:	b985      	cbnz	r5, 800e202 <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 800e1e0:	4629      	mov	r1, r5
 800e1e2:	4620      	mov	r0, r4
 800e1e4:	f001 f908 	bl	800f3f8 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800e1e8:	e7eb      	b.n	800e1c2 <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 800e1ea:	2203      	movs	r2, #3
 800e1ec:	2100      	movs	r1, #0
 800e1ee:	2001      	movs	r0, #1
 800e1f0:	f000 fd20 	bl	800ec34 <xQueueGenericCreate>
 800e1f4:	e00e      	b.n	800e214 <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800e1f6:	461a      	mov	r2, r3
 800e1f8:	f000 fd43 	bl	800ec82 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800e1fc:	4604      	mov	r4, r0
 800e1fe:	2800      	cmp	r0, #0
 800e200:	d0de      	beq.n	800e1c0 <osSemaphoreNew+0x20>
          name = attr->name;
 800e202:	682d      	ldr	r5, [r5, #0]
 800e204:	e7ec      	b.n	800e1e0 <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 800e206:	2801      	cmp	r0, #1
 800e208:	d1f5      	bne.n	800e1f6 <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800e20a:	2103      	movs	r1, #3
 800e20c:	9100      	str	r1, [sp, #0]
 800e20e:	4611      	mov	r1, r2
 800e210:	f000 fcc2 	bl	800eb98 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800e214:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800e216:	2800      	cmp	r0, #0
 800e218:	d0d2      	beq.n	800e1c0 <osSemaphoreNew+0x20>
 800e21a:	2e00      	cmp	r6, #0
 800e21c:	d0df      	beq.n	800e1de <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e21e:	2300      	movs	r3, #0
 800e220:	461a      	mov	r2, r3
 800e222:	4619      	mov	r1, r3
 800e224:	f000 fd6d 	bl	800ed02 <xQueueGenericSend>
 800e228:	2801      	cmp	r0, #1
 800e22a:	d0d8      	beq.n	800e1de <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 800e22c:	4620      	mov	r0, r4
 800e22e:	f001 f90d 	bl	800f44c <vQueueDelete>
      if (hSemaphore != NULL) {
 800e232:	e7c5      	b.n	800e1c0 <osSemaphoreNew+0x20>

0800e234 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800e234:	b513      	push	{r0, r1, r4, lr}
 800e236:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800e238:	b328      	cbz	r0, 800e286 <osSemaphoreAcquire+0x52>
 800e23a:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800e23e:	b1cb      	cbz	r3, 800e274 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 800e240:	bb09      	cbnz	r1, 800e286 <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800e242:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800e244:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800e246:	f001 f889 	bl	800f35c <xQueueReceiveFromISR>
 800e24a:	2801      	cmp	r0, #1
 800e24c:	d003      	beq.n	800e256 <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 800e24e:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800e252:	b002      	add	sp, #8
 800e254:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800e256:	9b01      	ldr	r3, [sp, #4]
 800e258:	b90b      	cbnz	r3, 800e25e <osSemaphoreAcquire+0x2a>
  stat = osOK;
 800e25a:	2000      	movs	r0, #0
 800e25c:	e7f9      	b.n	800e252 <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 800e25e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e262:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e266:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e26a:	f3bf 8f4f 	dsb	sy
 800e26e:	f3bf 8f6f 	isb	sy
 800e272:	e7f2      	b.n	800e25a <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800e274:	f000 ff94 	bl	800f1a0 <xQueueSemaphoreTake>
 800e278:	2801      	cmp	r0, #1
 800e27a:	d0ee      	beq.n	800e25a <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 800e27c:	2c00      	cmp	r4, #0
 800e27e:	d0e6      	beq.n	800e24e <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 800e280:	f06f 0001 	mvn.w	r0, #1
 800e284:	e7e5      	b.n	800e252 <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 800e286:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800e28a:	e7e2      	b.n	800e252 <osSemaphoreAcquire+0x1e>

0800e28c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800e28c:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800e28e:	b318      	cbz	r0, 800e2d8 <osSemaphoreRelease+0x4c>
 800e290:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800e294:	b1cb      	cbz	r3, 800e2ca <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 800e296:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e298:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800e29a:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e29c:	f000 fe91 	bl	800efc2 <xQueueGiveFromISR>
 800e2a0:	2801      	cmp	r0, #1
 800e2a2:	d004      	beq.n	800e2ae <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800e2a4:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 800e2a8:	b003      	add	sp, #12
 800e2aa:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 800e2ae:	9b01      	ldr	r3, [sp, #4]
 800e2b0:	b14b      	cbz	r3, 800e2c6 <osSemaphoreRelease+0x3a>
 800e2b2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e2b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e2ba:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e2be:	f3bf 8f4f 	dsb	sy
 800e2c2:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800e2c6:	2000      	movs	r0, #0
 800e2c8:	e7ee      	b.n	800e2a8 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e2ca:	461a      	mov	r2, r3
 800e2cc:	4619      	mov	r1, r3
 800e2ce:	f000 fd18 	bl	800ed02 <xQueueGenericSend>
 800e2d2:	2801      	cmp	r0, #1
 800e2d4:	d0f7      	beq.n	800e2c6 <osSemaphoreRelease+0x3a>
 800e2d6:	e7e5      	b.n	800e2a4 <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 800e2d8:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800e2dc:	e7e4      	b.n	800e2a8 <osSemaphoreRelease+0x1c>

0800e2de <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e2de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e2e0:	4605      	mov	r5, r0
 800e2e2:	460e      	mov	r6, r1
 800e2e4:	4614      	mov	r4, r2
 800e2e6:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e2ea:	b11f      	cbz	r7, 800e2f4 <osMessageQueueNew+0x16>
  hQueue = NULL;
 800e2ec:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800e2ee:	4628      	mov	r0, r5
 800e2f0:	b003      	add	sp, #12
 800e2f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e2f4:	2800      	cmp	r0, #0
 800e2f6:	d0f9      	beq.n	800e2ec <osMessageQueueNew+0xe>
 800e2f8:	2900      	cmp	r1, #0
 800e2fa:	d0f7      	beq.n	800e2ec <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800e2fc:	b1da      	cbz	r2, 800e336 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e2fe:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800e302:	b183      	cbz	r3, 800e326 <osMessageQueueNew+0x48>
 800e304:	2a4f      	cmp	r2, #79	@ 0x4f
 800e306:	d9f1      	bls.n	800e2ec <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e308:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e30a:	2a00      	cmp	r2, #0
 800e30c:	d0ee      	beq.n	800e2ec <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e30e:	434d      	muls	r5, r1
 800e310:	6966      	ldr	r6, [r4, #20]
 800e312:	42ae      	cmp	r6, r5
 800e314:	d3ea      	bcc.n	800e2ec <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e316:	9700      	str	r7, [sp, #0]
 800e318:	f000 fc3e 	bl	800eb98 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800e31c:	4605      	mov	r5, r0
 800e31e:	2800      	cmp	r0, #0
 800e320:	d0e4      	beq.n	800e2ec <osMessageQueueNew+0xe>
        name = attr->name;
 800e322:	6824      	ldr	r4, [r4, #0]
 800e324:	e011      	b.n	800e34a <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e326:	2a00      	cmp	r2, #0
 800e328:	d1e0      	bne.n	800e2ec <osMessageQueueNew+0xe>
 800e32a:	6923      	ldr	r3, [r4, #16]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d1dd      	bne.n	800e2ec <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e330:	6963      	ldr	r3, [r4, #20]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d1da      	bne.n	800e2ec <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800e336:	4628      	mov	r0, r5
 800e338:	2200      	movs	r2, #0
 800e33a:	4631      	mov	r1, r6
 800e33c:	f000 fc7a 	bl	800ec34 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800e340:	4605      	mov	r5, r0
 800e342:	2800      	cmp	r0, #0
 800e344:	d0d2      	beq.n	800e2ec <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800e346:	2c00      	cmp	r4, #0
 800e348:	d1eb      	bne.n	800e322 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800e34a:	4621      	mov	r1, r4
 800e34c:	4628      	mov	r0, r5
 800e34e:	f001 f853 	bl	800f3f8 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800e352:	e7cc      	b.n	800e2ee <osMessageQueueNew+0x10>

0800e354 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e354:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e356:	461c      	mov	r4, r3
 800e358:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800e35c:	b1de      	cbz	r6, 800e396 <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e35e:	b338      	cbz	r0, 800e3b0 <osMessageQueuePut+0x5c>
 800e360:	b331      	cbz	r1, 800e3b0 <osMessageQueuePut+0x5c>
 800e362:	bb2b      	cbnz	r3, 800e3b0 <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e364:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800e366:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e368:	f000 fdce 	bl	800ef08 <xQueueGenericSendFromISR>
 800e36c:	2801      	cmp	r0, #1
 800e36e:	d003      	beq.n	800e378 <osMessageQueuePut+0x24>
        stat = osErrorResource;
 800e370:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800e374:	b002      	add	sp, #8
 800e376:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800e378:	9b01      	ldr	r3, [sp, #4]
 800e37a:	b90b      	cbnz	r3, 800e380 <osMessageQueuePut+0x2c>
  stat = osOK;
 800e37c:	2000      	movs	r0, #0
 800e37e:	e7f9      	b.n	800e374 <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 800e380:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e384:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e388:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e38c:	f3bf 8f4f 	dsb	sy
 800e390:	f3bf 8f6f 	isb	sy
 800e394:	e7f2      	b.n	800e37c <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e396:	b158      	cbz	r0, 800e3b0 <osMessageQueuePut+0x5c>
 800e398:	b151      	cbz	r1, 800e3b0 <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e39a:	4633      	mov	r3, r6
 800e39c:	4622      	mov	r2, r4
 800e39e:	f000 fcb0 	bl	800ed02 <xQueueGenericSend>
 800e3a2:	2801      	cmp	r0, #1
 800e3a4:	d0ea      	beq.n	800e37c <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 800e3a6:	2c00      	cmp	r4, #0
 800e3a8:	d0e2      	beq.n	800e370 <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 800e3aa:	f06f 0001 	mvn.w	r0, #1
 800e3ae:	e7e1      	b.n	800e374 <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 800e3b0:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800e3b4:	e7de      	b.n	800e374 <osMessageQueuePut+0x20>

0800e3b6 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e3b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e3b8:	461c      	mov	r4, r3
 800e3ba:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800e3be:	b1db      	cbz	r3, 800e3f8 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e3c0:	b330      	cbz	r0, 800e410 <osMessageQueueGet+0x5a>
 800e3c2:	b329      	cbz	r1, 800e410 <osMessageQueueGet+0x5a>
 800e3c4:	bb24      	cbnz	r4, 800e410 <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e3c6:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800e3c8:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e3ca:	f000 ffc7 	bl	800f35c <xQueueReceiveFromISR>
 800e3ce:	2801      	cmp	r0, #1
 800e3d0:	d003      	beq.n	800e3da <osMessageQueueGet+0x24>
        stat = osErrorResource;
 800e3d2:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800e3d6:	b003      	add	sp, #12
 800e3d8:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800e3da:	9b01      	ldr	r3, [sp, #4]
 800e3dc:	b90b      	cbnz	r3, 800e3e2 <osMessageQueueGet+0x2c>
  stat = osOK;
 800e3de:	2000      	movs	r0, #0
 800e3e0:	e7f9      	b.n	800e3d6 <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 800e3e2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e3e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e3ea:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e3ee:	f3bf 8f4f 	dsb	sy
 800e3f2:	f3bf 8f6f 	isb	sy
 800e3f6:	e7f2      	b.n	800e3de <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e3f8:	b150      	cbz	r0, 800e410 <osMessageQueueGet+0x5a>
 800e3fa:	b149      	cbz	r1, 800e410 <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e3fc:	4622      	mov	r2, r4
 800e3fe:	f000 fe31 	bl	800f064 <xQueueReceive>
 800e402:	2801      	cmp	r0, #1
 800e404:	d0eb      	beq.n	800e3de <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 800e406:	2c00      	cmp	r4, #0
 800e408:	d0e3      	beq.n	800e3d2 <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 800e40a:	f06f 0001 	mvn.w	r0, #1
 800e40e:	e7e2      	b.n	800e3d6 <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 800e410:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800e414:	e7df      	b.n	800e3d6 <osMessageQueueGet+0x20>
	...

0800e418 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e418:	4b03      	ldr	r3, [pc, #12]	@ (800e428 <vApplicationGetIdleTaskMemory+0x10>)
 800e41a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e41c:	4b03      	ldr	r3, [pc, #12]	@ (800e42c <vApplicationGetIdleTaskMemory+0x14>)
 800e41e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e420:	2380      	movs	r3, #128	@ 0x80
 800e422:	6013      	str	r3, [r2, #0]
}
 800e424:	4770      	bx	lr
 800e426:	bf00      	nop
 800e428:	2400d678 	.word	0x2400d678
 800e42c:	2400d478 	.word	0x2400d478

0800e430 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e430:	4b03      	ldr	r3, [pc, #12]	@ (800e440 <vApplicationGetTimerTaskMemory+0x10>)
 800e432:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e434:	4b03      	ldr	r3, [pc, #12]	@ (800e444 <vApplicationGetTimerTaskMemory+0x14>)
 800e436:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e438:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e43c:	6013      	str	r3, [r2, #0]
}
 800e43e:	4770      	bx	lr
 800e440:	2400d418 	.word	0x2400d418
 800e444:	2400d018 	.word	0x2400d018

0800e448 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e448:	4b10      	ldr	r3, [pc, #64]	@ (800e48c <prvInsertBlockIntoFreeList+0x44>)
{
 800e44a:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e44c:	461a      	mov	r2, r3
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	4283      	cmp	r3, r0
 800e452:	d3fb      	bcc.n	800e44c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e454:	6854      	ldr	r4, [r2, #4]
 800e456:	1911      	adds	r1, r2, r4
 800e458:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e45a:	bf01      	itttt	eq
 800e45c:	6841      	ldreq	r1, [r0, #4]
 800e45e:	4610      	moveq	r0, r2
 800e460:	1909      	addeq	r1, r1, r4
 800e462:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e464:	6844      	ldr	r4, [r0, #4]
 800e466:	1901      	adds	r1, r0, r4
 800e468:	428b      	cmp	r3, r1
 800e46a:	d10c      	bne.n	800e486 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e46c:	4908      	ldr	r1, [pc, #32]	@ (800e490 <prvInsertBlockIntoFreeList+0x48>)
 800e46e:	6809      	ldr	r1, [r1, #0]
 800e470:	428b      	cmp	r3, r1
 800e472:	d003      	beq.n	800e47c <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e474:	6859      	ldr	r1, [r3, #4]
 800e476:	4421      	add	r1, r4
 800e478:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e47a:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e47c:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e47e:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e480:	bf18      	it	ne
 800e482:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e484:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e486:	4619      	mov	r1, r3
 800e488:	e7f8      	b.n	800e47c <prvInsertBlockIntoFreeList+0x34>
 800e48a:	bf00      	nop
 800e48c:	2400d6f4 	.word	0x2400d6f4
 800e490:	2400d6f0 	.word	0x2400d6f0

0800e494 <pvPortMalloc>:
{
 800e494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e498:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800e49a:	f001 f9d9 	bl	800f850 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800e49e:	4940      	ldr	r1, [pc, #256]	@ (800e5a0 <pvPortMalloc+0x10c>)
 800e4a0:	4d40      	ldr	r5, [pc, #256]	@ (800e5a4 <pvPortMalloc+0x110>)
 800e4a2:	680b      	ldr	r3, [r1, #0]
 800e4a4:	b9f3      	cbnz	r3, 800e4e4 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800e4a6:	4a40      	ldr	r2, [pc, #256]	@ (800e5a8 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 800e4a8:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e4aa:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e4ac:	4e3f      	ldr	r6, [pc, #252]	@ (800e5ac <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e4ae:	bf1b      	ittet	ne
 800e4b0:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e4b2:	4b3f      	ldrne	r3, [pc, #252]	@ (800e5b0 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e4b4:	4b3f      	ldreq	r3, [pc, #252]	@ (800e5b4 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e4b6:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 800e4ba:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e4bc:	bf18      	it	ne
 800e4be:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e4c0:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e4c2:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800e4c4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e4c6:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800e4ca:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e4ce:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800e4d0:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e4d2:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e4d6:	4b38      	ldr	r3, [pc, #224]	@ (800e5b8 <pvPortMalloc+0x124>)
 800e4d8:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e4da:	4b38      	ldr	r3, [pc, #224]	@ (800e5bc <pvPortMalloc+0x128>)
 800e4dc:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e4de:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e4e2:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e4e4:	682e      	ldr	r6, [r5, #0]
 800e4e6:	4226      	tst	r6, r4
 800e4e8:	d155      	bne.n	800e596 <pvPortMalloc+0x102>
			if( xWantedSize > 0 )
 800e4ea:	2c00      	cmp	r4, #0
 800e4ec:	d046      	beq.n	800e57c <pvPortMalloc+0xe8>
				xWantedSize += xHeapStructSize;
 800e4ee:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e4f2:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e4f4:	bf1c      	itt	ne
 800e4f6:	f023 0307 	bicne.w	r3, r3, #7
 800e4fa:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d04a      	beq.n	800e596 <pvPortMalloc+0x102>
 800e500:	4f2e      	ldr	r7, [pc, #184]	@ (800e5bc <pvPortMalloc+0x128>)
 800e502:	683c      	ldr	r4, [r7, #0]
 800e504:	429c      	cmp	r4, r3
 800e506:	d346      	bcc.n	800e596 <pvPortMalloc+0x102>
				pxBlock = xStart.pxNextFreeBlock;
 800e508:	4a28      	ldr	r2, [pc, #160]	@ (800e5ac <pvPortMalloc+0x118>)
 800e50a:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e50c:	6868      	ldr	r0, [r5, #4]
 800e50e:	4298      	cmp	r0, r3
 800e510:	d204      	bcs.n	800e51c <pvPortMalloc+0x88>
 800e512:	f8d5 c000 	ldr.w	ip, [r5]
 800e516:	f1bc 0f00 	cmp.w	ip, #0
 800e51a:	d115      	bne.n	800e548 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 800e51c:	6809      	ldr	r1, [r1, #0]
 800e51e:	42a9      	cmp	r1, r5
 800e520:	d039      	beq.n	800e596 <pvPortMalloc+0x102>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e522:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e524:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e528:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e52a:	1ac2      	subs	r2, r0, r3
 800e52c:	2a10      	cmp	r2, #16
 800e52e:	d912      	bls.n	800e556 <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e530:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e532:	0741      	lsls	r1, r0, #29
 800e534:	d00b      	beq.n	800e54e <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e53a:	f383 8811 	msr	BASEPRI, r3
 800e53e:	f3bf 8f6f 	isb	sy
 800e542:	f3bf 8f4f 	dsb	sy
 800e546:	e7fe      	b.n	800e546 <pvPortMalloc+0xb2>
 800e548:	462a      	mov	r2, r5
 800e54a:	4665      	mov	r5, ip
 800e54c:	e7de      	b.n	800e50c <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e54e:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e550:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e552:	f7ff ff79 	bl	800e448 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e556:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e558:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e55a:	4917      	ldr	r1, [pc, #92]	@ (800e5b8 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e55c:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e55e:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e560:	6808      	ldr	r0, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 800e562:	4a17      	ldr	r2, [pc, #92]	@ (800e5c0 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e564:	4284      	cmp	r4, r0
					pxBlock->pxNextFreeBlock = NULL;
 800e566:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800e568:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e56a:	603c      	str	r4, [r7, #0]
					xNumberOfSuccessfulAllocations++;
 800e56c:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e570:	bf38      	it	cc
 800e572:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e574:	f108 0408 	add.w	r4, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e578:	606e      	str	r6, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800e57a:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800e57c:	f001 fa0c 	bl	800f998 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e580:	0763      	lsls	r3, r4, #29
 800e582:	d00a      	beq.n	800e59a <pvPortMalloc+0x106>
 800e584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e588:	f383 8811 	msr	BASEPRI, r3
 800e58c:	f3bf 8f6f 	isb	sy
 800e590:	f3bf 8f4f 	dsb	sy
 800e594:	e7fe      	b.n	800e594 <pvPortMalloc+0x100>
void *pvReturn = NULL;
 800e596:	2400      	movs	r4, #0
 800e598:	e7f0      	b.n	800e57c <pvPortMalloc+0xe8>
}
 800e59a:	4620      	mov	r0, r4
 800e59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5a0:	2400d6f0 	.word	0x2400d6f0
 800e5a4:	2400d6dc 	.word	0x2400d6dc
 800e5a8:	2400d6fc 	.word	0x2400d6fc
 800e5ac:	2400d6f4 	.word	0x2400d6f4
 800e5b0:	24025d9c 	.word	0x24025d9c
 800e5b4:	000186a0 	.word	0x000186a0
 800e5b8:	2400d6e8 	.word	0x2400d6e8
 800e5bc:	2400d6ec 	.word	0x2400d6ec
 800e5c0:	2400d6e4 	.word	0x2400d6e4

0800e5c4 <vPortFree>:
{
 800e5c4:	b510      	push	{r4, lr}
	if( pv != NULL )
 800e5c6:	4604      	mov	r4, r0
 800e5c8:	b390      	cbz	r0, 800e630 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e5ca:	4a1a      	ldr	r2, [pc, #104]	@ (800e634 <vPortFree+0x70>)
 800e5cc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e5d0:	6812      	ldr	r2, [r2, #0]
 800e5d2:	4213      	tst	r3, r2
 800e5d4:	d108      	bne.n	800e5e8 <vPortFree+0x24>
 800e5d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5da:	f383 8811 	msr	BASEPRI, r3
 800e5de:	f3bf 8f6f 	isb	sy
 800e5e2:	f3bf 8f4f 	dsb	sy
 800e5e6:	e7fe      	b.n	800e5e6 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e5e8:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800e5ec:	b141      	cbz	r1, 800e600 <vPortFree+0x3c>
 800e5ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5f2:	f383 8811 	msr	BASEPRI, r3
 800e5f6:	f3bf 8f6f 	isb	sy
 800e5fa:	f3bf 8f4f 	dsb	sy
 800e5fe:	e7fe      	b.n	800e5fe <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e600:	ea23 0302 	bic.w	r3, r3, r2
 800e604:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800e608:	f001 f922 	bl	800f850 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e60c:	4a0a      	ldr	r2, [pc, #40]	@ (800e638 <vPortFree+0x74>)
 800e60e:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e612:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e616:	6811      	ldr	r1, [r2, #0]
 800e618:	440b      	add	r3, r1
 800e61a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e61c:	f7ff ff14 	bl	800e448 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e620:	4a06      	ldr	r2, [pc, #24]	@ (800e63c <vPortFree+0x78>)
 800e622:	6813      	ldr	r3, [r2, #0]
 800e624:	3301      	adds	r3, #1
}
 800e626:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800e62a:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800e62c:	f001 b9b4 	b.w	800f998 <xTaskResumeAll>
}
 800e630:	bd10      	pop	{r4, pc}
 800e632:	bf00      	nop
 800e634:	2400d6dc 	.word	0x2400d6dc
 800e638:	2400d6ec 	.word	0x2400d6ec
 800e63c:	2400d6e0 	.word	0x2400d6e0

0800e640 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e640:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e644:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e648:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e64a:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e64c:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e650:	2300      	movs	r3, #0
 800e652:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e654:	4770      	bx	lr

0800e656 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e656:	2300      	movs	r3, #0
 800e658:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e65a:	4770      	bx	lr

0800e65c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800e65c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e65e:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800e660:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e662:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e664:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e666:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800e668:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800e66a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800e66c:	3301      	adds	r3, #1
 800e66e:	6003      	str	r3, [r0, #0]
}
 800e670:	4770      	bx	lr

0800e672 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e672:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e674:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e676:	1c63      	adds	r3, r4, #1
 800e678:	d10a      	bne.n	800e690 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e67a:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e67c:	685a      	ldr	r2, [r3, #4]
 800e67e:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e680:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e682:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800e684:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800e686:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800e688:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800e68a:	3301      	adds	r3, #1
 800e68c:	6003      	str	r3, [r0, #0]
}
 800e68e:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e690:	f100 0208 	add.w	r2, r0, #8
 800e694:	4613      	mov	r3, r2
 800e696:	6852      	ldr	r2, [r2, #4]
 800e698:	6815      	ldr	r5, [r2, #0]
 800e69a:	42a5      	cmp	r5, r4
 800e69c:	d9fa      	bls.n	800e694 <vListInsert+0x22>
 800e69e:	e7ed      	b.n	800e67c <vListInsert+0xa>

0800e6a0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e6a0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e6a2:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800e6a6:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e6a8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e6aa:	6859      	ldr	r1, [r3, #4]
 800e6ac:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e6ae:	bf08      	it	eq
 800e6b0:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800e6b6:	681a      	ldr	r2, [r3, #0]
 800e6b8:	3a01      	subs	r2, #1
 800e6ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e6bc:	6818      	ldr	r0, [r3, #0]
}
 800e6be:	4770      	bx	lr

0800e6c0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e6c0:	4808      	ldr	r0, [pc, #32]	@ (800e6e4 <prvPortStartFirstTask+0x24>)
 800e6c2:	6800      	ldr	r0, [r0, #0]
 800e6c4:	6800      	ldr	r0, [r0, #0]
 800e6c6:	f380 8808 	msr	MSP, r0
 800e6ca:	f04f 0000 	mov.w	r0, #0
 800e6ce:	f380 8814 	msr	CONTROL, r0
 800e6d2:	b662      	cpsie	i
 800e6d4:	b661      	cpsie	f
 800e6d6:	f3bf 8f4f 	dsb	sy
 800e6da:	f3bf 8f6f 	isb	sy
 800e6de:	df00      	svc	0
 800e6e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e6e2:	0000      	.short	0x0000
 800e6e4:	e000ed08 	.word	0xe000ed08

0800e6e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e6e8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e6f8 <vPortEnableVFP+0x10>
 800e6ec:	6801      	ldr	r1, [r0, #0]
 800e6ee:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e6f2:	6001      	str	r1, [r0, #0]
 800e6f4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e6f6:	0000      	.short	0x0000
 800e6f8:	e000ed88 	.word	0xe000ed88

0800e6fc <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800e6fc:	2300      	movs	r3, #0
{
 800e6fe:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800e700:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800e702:	4b0d      	ldr	r3, [pc, #52]	@ (800e738 <prvTaskExitError+0x3c>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	3301      	adds	r3, #1
 800e708:	d008      	beq.n	800e71c <prvTaskExitError+0x20>
 800e70a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e70e:	f383 8811 	msr	BASEPRI, r3
 800e712:	f3bf 8f6f 	isb	sy
 800e716:	f3bf 8f4f 	dsb	sy
 800e71a:	e7fe      	b.n	800e71a <prvTaskExitError+0x1e>
 800e71c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e720:	f383 8811 	msr	BASEPRI, r3
 800e724:	f3bf 8f6f 	isb	sy
 800e728:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800e72c:	9b01      	ldr	r3, [sp, #4]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d0fc      	beq.n	800e72c <prvTaskExitError+0x30>
}
 800e732:	b002      	add	sp, #8
 800e734:	4770      	bx	lr
 800e736:	bf00      	nop
 800e738:	24000078 	.word	0x24000078

0800e73c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e73c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e740:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e744:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800e748:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e74a:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e74c:	4b03      	ldr	r3, [pc, #12]	@ (800e75c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e74e:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e750:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e752:	f06f 0302 	mvn.w	r3, #2
 800e756:	6203      	str	r3, [r0, #32]
}
 800e758:	4770      	bx	lr
 800e75a:	bf00      	nop
 800e75c:	0800e6fd 	.word	0x0800e6fd

0800e760 <SVC_Handler>:
	__asm volatile (
 800e760:	4b07      	ldr	r3, [pc, #28]	@ (800e780 <pxCurrentTCBConst2>)
 800e762:	6819      	ldr	r1, [r3, #0]
 800e764:	6808      	ldr	r0, [r1, #0]
 800e766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e76a:	f380 8809 	msr	PSP, r0
 800e76e:	f3bf 8f6f 	isb	sy
 800e772:	f04f 0000 	mov.w	r0, #0
 800e776:	f380 8811 	msr	BASEPRI, r0
 800e77a:	4770      	bx	lr
 800e77c:	f3af 8000 	nop.w

0800e780 <pxCurrentTCBConst2>:
 800e780:	240262dc 	.word	0x240262dc

0800e784 <vPortEnterCritical>:
 800e784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e788:	f383 8811 	msr	BASEPRI, r3
 800e78c:	f3bf 8f6f 	isb	sy
 800e790:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800e794:	4a0a      	ldr	r2, [pc, #40]	@ (800e7c0 <vPortEnterCritical+0x3c>)
 800e796:	6813      	ldr	r3, [r2, #0]
 800e798:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800e79a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800e79c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800e79e:	d10e      	bne.n	800e7be <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e7a0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e7a4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800e7a8:	b2db      	uxtb	r3, r3
 800e7aa:	b143      	cbz	r3, 800e7be <vPortEnterCritical+0x3a>
 800e7ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7b0:	f383 8811 	msr	BASEPRI, r3
 800e7b4:	f3bf 8f6f 	isb	sy
 800e7b8:	f3bf 8f4f 	dsb	sy
 800e7bc:	e7fe      	b.n	800e7bc <vPortEnterCritical+0x38>
}
 800e7be:	4770      	bx	lr
 800e7c0:	24000078 	.word	0x24000078

0800e7c4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800e7c4:	4a08      	ldr	r2, [pc, #32]	@ (800e7e8 <vPortExitCritical+0x24>)
 800e7c6:	6813      	ldr	r3, [r2, #0]
 800e7c8:	b943      	cbnz	r3, 800e7dc <vPortExitCritical+0x18>
 800e7ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7ce:	f383 8811 	msr	BASEPRI, r3
 800e7d2:	f3bf 8f6f 	isb	sy
 800e7d6:	f3bf 8f4f 	dsb	sy
 800e7da:	e7fe      	b.n	800e7da <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800e7dc:	3b01      	subs	r3, #1
 800e7de:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e7e0:	b90b      	cbnz	r3, 800e7e6 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e7e2:	f383 8811 	msr	BASEPRI, r3
}
 800e7e6:	4770      	bx	lr
 800e7e8:	24000078 	.word	0x24000078
 800e7ec:	00000000 	.word	0x00000000

0800e7f0 <PendSV_Handler>:
	__asm volatile
 800e7f0:	f3ef 8009 	mrs	r0, PSP
 800e7f4:	f3bf 8f6f 	isb	sy
 800e7f8:	4b15      	ldr	r3, [pc, #84]	@ (800e850 <pxCurrentTCBConst>)
 800e7fa:	681a      	ldr	r2, [r3, #0]
 800e7fc:	f01e 0f10 	tst.w	lr, #16
 800e800:	bf08      	it	eq
 800e802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e80a:	6010      	str	r0, [r2, #0]
 800e80c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e810:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e814:	f380 8811 	msr	BASEPRI, r0
 800e818:	f3bf 8f4f 	dsb	sy
 800e81c:	f3bf 8f6f 	isb	sy
 800e820:	f001 f998 	bl	800fb54 <vTaskSwitchContext>
 800e824:	f04f 0000 	mov.w	r0, #0
 800e828:	f380 8811 	msr	BASEPRI, r0
 800e82c:	bc09      	pop	{r0, r3}
 800e82e:	6819      	ldr	r1, [r3, #0]
 800e830:	6808      	ldr	r0, [r1, #0]
 800e832:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e836:	f01e 0f10 	tst.w	lr, #16
 800e83a:	bf08      	it	eq
 800e83c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e840:	f380 8809 	msr	PSP, r0
 800e844:	f3bf 8f6f 	isb	sy
 800e848:	4770      	bx	lr
 800e84a:	bf00      	nop
 800e84c:	f3af 8000 	nop.w

0800e850 <pxCurrentTCBConst>:
 800e850:	240262dc 	.word	0x240262dc

0800e854 <xPortSysTickHandler>:
{
 800e854:	b508      	push	{r3, lr}
	__asm volatile
 800e856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e85a:	f383 8811 	msr	BASEPRI, r3
 800e85e:	f3bf 8f6f 	isb	sy
 800e862:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800e866:	f001 f801 	bl	800f86c <xTaskIncrementTick>
 800e86a:	b128      	cbz	r0, 800e878 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e86c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e870:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e874:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800e878:	2300      	movs	r3, #0
 800e87a:	f383 8811 	msr	BASEPRI, r3
}
 800e87e:	bd08      	pop	{r3, pc}

0800e880 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e880:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800e884:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e886:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e88a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e88c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e88e:	4b04      	ldr	r3, [pc, #16]	@ (800e8a0 <vPortSetupTimerInterrupt+0x20>)
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	fbb3 f3f1 	udiv	r3, r3, r1
 800e896:	3b01      	subs	r3, #1
 800e898:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e89a:	2307      	movs	r3, #7
 800e89c:	6113      	str	r3, [r2, #16]
}
 800e89e:	4770      	bx	lr
 800e8a0:	2400006c 	.word	0x2400006c

0800e8a4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e8a4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 800e8a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e8aa:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800e8ae:	4a38      	ldr	r2, [pc, #224]	@ (800e990 <xPortStartScheduler+0xec>)
 800e8b0:	4291      	cmp	r1, r2
 800e8b2:	d108      	bne.n	800e8c6 <xPortStartScheduler+0x22>
	__asm volatile
 800e8b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8b8:	f383 8811 	msr	BASEPRI, r3
 800e8bc:	f3bf 8f6f 	isb	sy
 800e8c0:	f3bf 8f4f 	dsb	sy
 800e8c4:	e7fe      	b.n	800e8c4 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e8c6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800e8ca:	4b32      	ldr	r3, [pc, #200]	@ (800e994 <xPortStartScheduler+0xf0>)
 800e8cc:	429a      	cmp	r2, r3
 800e8ce:	d108      	bne.n	800e8e2 <xPortStartScheduler+0x3e>
 800e8d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8d4:	f383 8811 	msr	BASEPRI, r3
 800e8d8:	f3bf 8f6f 	isb	sy
 800e8dc:	f3bf 8f4f 	dsb	sy
 800e8e0:	e7fe      	b.n	800e8e0 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e8e2:	4b2d      	ldr	r3, [pc, #180]	@ (800e998 <xPortStartScheduler+0xf4>)
 800e8e4:	781a      	ldrb	r2, [r3, #0]
 800e8e6:	b2d2      	uxtb	r2, r2
 800e8e8:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e8ea:	22ff      	movs	r2, #255	@ 0xff
 800e8ec:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e8ee:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e8f0:	4a2a      	ldr	r2, [pc, #168]	@ (800e99c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e8f2:	b2db      	uxtb	r3, r3
 800e8f4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e8f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e8fc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e900:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e902:	2307      	movs	r3, #7
 800e904:	4a26      	ldr	r2, [pc, #152]	@ (800e9a0 <xPortStartScheduler+0xfc>)
 800e906:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e908:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800e90c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e90e:	0609      	lsls	r1, r1, #24
 800e910:	d40a      	bmi.n	800e928 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e912:	2b03      	cmp	r3, #3
 800e914:	d011      	beq.n	800e93a <xPortStartScheduler+0x96>
 800e916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e91a:	f383 8811 	msr	BASEPRI, r3
 800e91e:	f3bf 8f6f 	isb	sy
 800e922:	f3bf 8f4f 	dsb	sy
 800e926:	e7fe      	b.n	800e926 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 800e928:	3b01      	subs	r3, #1
 800e92a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e92c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e930:	005b      	lsls	r3, r3, #1
 800e932:	b2db      	uxtb	r3, r3
 800e934:	f88d 3003 	strb.w	r3, [sp, #3]
 800e938:	e7e6      	b.n	800e908 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e93a:	f44f 7340 	mov.w	r3, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e93e:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 800e942:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e944:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e946:	9b01      	ldr	r3, [sp, #4]
 800e948:	4a13      	ldr	r2, [pc, #76]	@ (800e998 <xPortStartScheduler+0xf4>)
 800e94a:	b2db      	uxtb	r3, r3
 800e94c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e94e:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800e952:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e956:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e95a:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800e95e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e962:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800e966:	f7ff ff8b 	bl	800e880 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800e96a:	4b0e      	ldr	r3, [pc, #56]	@ (800e9a4 <xPortStartScheduler+0x100>)
 800e96c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800e96e:	f7ff febb 	bl	800e6e8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e972:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800e976:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e97a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800e97e:	f7ff fe9f 	bl	800e6c0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800e982:	f001 f8e7 	bl	800fb54 <vTaskSwitchContext>
}
 800e986:	4628      	mov	r0, r5
	prvTaskExitError();
 800e988:	f7ff feb8 	bl	800e6fc <prvTaskExitError>
}
 800e98c:	b003      	add	sp, #12
 800e98e:	bd30      	pop	{r4, r5, pc}
 800e990:	410fc271 	.word	0x410fc271
 800e994:	410fc270 	.word	0x410fc270
 800e998:	e000e400 	.word	0xe000e400
 800e99c:	24025da0 	.word	0x24025da0
 800e9a0:	24025d9c 	.word	0x24025d9c
 800e9a4:	24000078 	.word	0x24000078

0800e9a8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e9a8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e9ac:	2b0f      	cmp	r3, #15
 800e9ae:	d90e      	bls.n	800e9ce <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e9b0:	4a11      	ldr	r2, [pc, #68]	@ (800e9f8 <vPortValidateInterruptPriority+0x50>)
 800e9b2:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e9b4:	4a11      	ldr	r2, [pc, #68]	@ (800e9fc <vPortValidateInterruptPriority+0x54>)
 800e9b6:	7812      	ldrb	r2, [r2, #0]
 800e9b8:	429a      	cmp	r2, r3
 800e9ba:	d908      	bls.n	800e9ce <vPortValidateInterruptPriority+0x26>
 800e9bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9c0:	f383 8811 	msr	BASEPRI, r3
 800e9c4:	f3bf 8f6f 	isb	sy
 800e9c8:	f3bf 8f4f 	dsb	sy
 800e9cc:	e7fe      	b.n	800e9cc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e9ce:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e9d2:	4a0b      	ldr	r2, [pc, #44]	@ (800ea00 <vPortValidateInterruptPriority+0x58>)
 800e9d4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800e9d8:	6812      	ldr	r2, [r2, #0]
 800e9da:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e9de:	4293      	cmp	r3, r2
 800e9e0:	d908      	bls.n	800e9f4 <vPortValidateInterruptPriority+0x4c>
 800e9e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9e6:	f383 8811 	msr	BASEPRI, r3
 800e9ea:	f3bf 8f6f 	isb	sy
 800e9ee:	f3bf 8f4f 	dsb	sy
 800e9f2:	e7fe      	b.n	800e9f2 <vPortValidateInterruptPriority+0x4a>
	}
 800e9f4:	4770      	bx	lr
 800e9f6:	bf00      	nop
 800e9f8:	e000e3f0 	.word	0xe000e3f0
 800e9fc:	24025da0 	.word	0x24025da0
 800ea00:	24025d9c 	.word	0x24025d9c

0800ea04 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ea04:	b510      	push	{r4, lr}
 800ea06:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ea08:	f7ff febc 	bl	800e784 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ea0c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800ea0e:	f7ff fed9 	bl	800e7c4 <vPortExitCritical>

	return xReturn;
}
 800ea12:	fab4 f084 	clz	r0, r4
 800ea16:	0940      	lsrs	r0, r0, #5
 800ea18:	bd10      	pop	{r4, pc}

0800ea1a <prvCopyDataToQueue>:
{
 800ea1a:	b570      	push	{r4, r5, r6, lr}
 800ea1c:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ea1e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 800ea20:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ea22:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ea24:	b942      	cbnz	r2, 800ea38 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ea26:	6806      	ldr	r6, [r0, #0]
 800ea28:	b99e      	cbnz	r6, 800ea52 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ea2a:	6880      	ldr	r0, [r0, #8]
 800ea2c:	f001 f9f2 	bl	800fe14 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ea30:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ea32:	3501      	adds	r5, #1
 800ea34:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800ea36:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800ea38:	b96e      	cbnz	r6, 800ea56 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ea3a:	6840      	ldr	r0, [r0, #4]
 800ea3c:	f016 ff49 	bl	80258d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ea40:	6863      	ldr	r3, [r4, #4]
 800ea42:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800ea44:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ea46:	68a2      	ldr	r2, [r4, #8]
 800ea48:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ea4a:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ea4c:	bf24      	itt	cs
 800ea4e:	6823      	ldrcs	r3, [r4, #0]
 800ea50:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800ea52:	2000      	movs	r0, #0
 800ea54:	e7ed      	b.n	800ea32 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ea56:	68c0      	ldr	r0, [r0, #12]
 800ea58:	f016 ff3b 	bl	80258d2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ea5c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800ea5e:	68e3      	ldr	r3, [r4, #12]
 800ea60:	4251      	negs	r1, r2
 800ea62:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ea64:	6822      	ldr	r2, [r4, #0]
 800ea66:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ea68:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ea6a:	bf3e      	ittt	cc
 800ea6c:	68a3      	ldrcc	r3, [r4, #8]
 800ea6e:	185b      	addcc	r3, r3, r1
 800ea70:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800ea72:	2e02      	cmp	r6, #2
 800ea74:	d1ed      	bne.n	800ea52 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ea76:	b10d      	cbz	r5, 800ea7c <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800ea78:	3d01      	subs	r5, #1
 800ea7a:	e7ea      	b.n	800ea52 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800ea7c:	4628      	mov	r0, r5
 800ea7e:	e7d8      	b.n	800ea32 <prvCopyDataToQueue+0x18>

0800ea80 <prvCopyDataFromQueue>:
{
 800ea80:	4603      	mov	r3, r0
 800ea82:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ea84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800ea86:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ea88:	b162      	cbz	r2, 800eaa4 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ea8a:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ea8c:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ea8e:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ea90:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ea92:	60dc      	str	r4, [r3, #12]
}
 800ea94:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ea98:	bf24      	itt	cs
 800ea9a:	6819      	ldrcs	r1, [r3, #0]
 800ea9c:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ea9e:	68d9      	ldr	r1, [r3, #12]
 800eaa0:	f016 bf17 	b.w	80258d2 <memcpy>
}
 800eaa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eaa8:	4770      	bx	lr

0800eaaa <prvUnlockQueue>:
{
 800eaaa:	b570      	push	{r4, r5, r6, lr}
 800eaac:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800eaae:	f7ff fe69 	bl	800e784 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800eab2:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eab6:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800eaba:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800eabc:	2d00      	cmp	r5, #0
 800eabe:	dc14      	bgt.n	800eaea <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800eac0:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eac2:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800eac6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800eaca:	f7ff fe7b 	bl	800e7c4 <vPortExitCritical>
	taskENTER_CRITICAL();
 800eace:	f7ff fe59 	bl	800e784 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800ead2:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 800ead6:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ead8:	2d00      	cmp	r5, #0
 800eada:	dc12      	bgt.n	800eb02 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800eadc:	23ff      	movs	r3, #255	@ 0xff
 800eade:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 800eae2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800eae6:	f7ff be6d 	b.w	800e7c4 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eaea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d0e7      	beq.n	800eac0 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eaf0:	4630      	mov	r0, r6
 800eaf2:	f001 f8ab 	bl	800fc4c <xTaskRemoveFromEventList>
 800eaf6:	b108      	cbz	r0, 800eafc <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800eaf8:	f001 f932 	bl	800fd60 <vTaskMissedYield>
			--cTxLock;
 800eafc:	3d01      	subs	r5, #1
 800eafe:	b26d      	sxtb	r5, r5
 800eb00:	e7dc      	b.n	800eabc <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb02:	6923      	ldr	r3, [r4, #16]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d0e9      	beq.n	800eadc <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb08:	4630      	mov	r0, r6
 800eb0a:	f001 f89f 	bl	800fc4c <xTaskRemoveFromEventList>
 800eb0e:	b108      	cbz	r0, 800eb14 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800eb10:	f001 f926 	bl	800fd60 <vTaskMissedYield>
				--cRxLock;
 800eb14:	3d01      	subs	r5, #1
 800eb16:	b26d      	sxtb	r5, r5
 800eb18:	e7de      	b.n	800ead8 <prvUnlockQueue+0x2e>

0800eb1a <xQueueGenericReset>:
{
 800eb1a:	b538      	push	{r3, r4, r5, lr}
 800eb1c:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800eb1e:	4604      	mov	r4, r0
 800eb20:	b940      	cbnz	r0, 800eb34 <xQueueGenericReset+0x1a>
 800eb22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb26:	f383 8811 	msr	BASEPRI, r3
 800eb2a:	f3bf 8f6f 	isb	sy
 800eb2e:	f3bf 8f4f 	dsb	sy
 800eb32:	e7fe      	b.n	800eb32 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800eb34:	f7ff fe26 	bl	800e784 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eb38:	6822      	ldr	r2, [r4, #0]
 800eb3a:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800eb3e:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eb40:	434b      	muls	r3, r1
 800eb42:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eb44:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eb46:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eb48:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800eb4a:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800eb4c:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eb4e:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800eb50:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800eb52:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800eb56:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800eb5a:	b9a5      	cbnz	r5, 800eb86 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb5c:	6923      	ldr	r3, [r4, #16]
 800eb5e:	b173      	cbz	r3, 800eb7e <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb60:	f104 0010 	add.w	r0, r4, #16
 800eb64:	f001 f872 	bl	800fc4c <xTaskRemoveFromEventList>
 800eb68:	b148      	cbz	r0, 800eb7e <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800eb6a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800eb6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb72:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800eb76:	f3bf 8f4f 	dsb	sy
 800eb7a:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800eb7e:	f7ff fe21 	bl	800e7c4 <vPortExitCritical>
}
 800eb82:	2001      	movs	r0, #1
 800eb84:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800eb86:	f104 0010 	add.w	r0, r4, #16
 800eb8a:	f7ff fd59 	bl	800e640 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800eb8e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800eb92:	f7ff fd55 	bl	800e640 <vListInitialise>
 800eb96:	e7f2      	b.n	800eb7e <xQueueGenericReset+0x64>

0800eb98 <xQueueGenericCreateStatic>:
	{
 800eb98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb9a:	460d      	mov	r5, r1
 800eb9c:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800eb9e:	b940      	cbnz	r0, 800ebb2 <xQueueGenericCreateStatic+0x1a>
 800eba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eba4:	f383 8811 	msr	BASEPRI, r3
 800eba8:	f3bf 8f6f 	isb	sy
 800ebac:	f3bf 8f4f 	dsb	sy
 800ebb0:	e7fe      	b.n	800ebb0 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 800ebb2:	b943      	cbnz	r3, 800ebc6 <xQueueGenericCreateStatic+0x2e>
 800ebb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebb8:	f383 8811 	msr	BASEPRI, r3
 800ebbc:	f3bf 8f6f 	isb	sy
 800ebc0:	f3bf 8f4f 	dsb	sy
 800ebc4:	e7fe      	b.n	800ebc4 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ebc6:	b14a      	cbz	r2, 800ebdc <xQueueGenericCreateStatic+0x44>
 800ebc8:	b991      	cbnz	r1, 800ebf0 <xQueueGenericCreateStatic+0x58>
 800ebca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebce:	f383 8811 	msr	BASEPRI, r3
 800ebd2:	f3bf 8f6f 	isb	sy
 800ebd6:	f3bf 8f4f 	dsb	sy
 800ebda:	e7fe      	b.n	800ebda <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ebdc:	b141      	cbz	r1, 800ebf0 <xQueueGenericCreateStatic+0x58>
 800ebde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebe2:	f383 8811 	msr	BASEPRI, r3
 800ebe6:	f3bf 8f6f 	isb	sy
 800ebea:	f3bf 8f4f 	dsb	sy
 800ebee:	e7fe      	b.n	800ebee <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ebf0:	2350      	movs	r3, #80	@ 0x50
 800ebf2:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ebf4:	9b01      	ldr	r3, [sp, #4]
 800ebf6:	2b50      	cmp	r3, #80	@ 0x50
 800ebf8:	d008      	beq.n	800ec0c <xQueueGenericCreateStatic+0x74>
 800ebfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebfe:	f383 8811 	msr	BASEPRI, r3
 800ec02:	f3bf 8f6f 	isb	sy
 800ec06:	f3bf 8f4f 	dsb	sy
 800ec0a:	e7fe      	b.n	800ec0a <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ec0c:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ec0e:	2d00      	cmp	r5, #0
 800ec10:	bf08      	it	eq
 800ec12:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ec14:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ec16:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800ec1a:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800ec1c:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ec20:	4620      	mov	r0, r4
 800ec22:	f7ff ff7a 	bl	800eb1a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800ec26:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 800ec2a:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800ec2c:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 800ec30:	b003      	add	sp, #12
 800ec32:	bd30      	pop	{r4, r5, pc}

0800ec34 <xQueueGenericCreate>:
	{
 800ec34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec36:	460d      	mov	r5, r1
 800ec38:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ec3a:	4606      	mov	r6, r0
 800ec3c:	b940      	cbnz	r0, 800ec50 <xQueueGenericCreate+0x1c>
 800ec3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec42:	f383 8811 	msr	BASEPRI, r3
 800ec46:	f3bf 8f6f 	isb	sy
 800ec4a:	f3bf 8f4f 	dsb	sy
 800ec4e:	e7fe      	b.n	800ec4e <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec50:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ec52:	3050      	adds	r0, #80	@ 0x50
 800ec54:	f7ff fc1e 	bl	800e494 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800ec58:	4604      	mov	r4, r0
 800ec5a:	b170      	cbz	r0, 800ec7a <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800ec62:	b165      	cbz	r5, 800ec7e <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ec64:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ec68:	2101      	movs	r1, #1
 800ec6a:	4620      	mov	r0, r4
 800ec6c:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800ec6e:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ec72:	f7ff ff52 	bl	800eb1a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800ec76:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 800ec7a:	4620      	mov	r0, r4
 800ec7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ec7e:	4603      	mov	r3, r0
 800ec80:	e7f2      	b.n	800ec68 <xQueueGenericCreate+0x34>

0800ec82 <xQueueCreateCountingSemaphoreStatic>:
	{
 800ec82:	b513      	push	{r0, r1, r4, lr}
 800ec84:	4613      	mov	r3, r2
 800ec86:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800ec88:	b940      	cbnz	r0, 800ec9c <xQueueCreateCountingSemaphoreStatic+0x1a>
 800ec8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec8e:	f383 8811 	msr	BASEPRI, r3
 800ec92:	f3bf 8f6f 	isb	sy
 800ec96:	f3bf 8f4f 	dsb	sy
 800ec9a:	e7fe      	b.n	800ec9a <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ec9c:	4288      	cmp	r0, r1
 800ec9e:	d208      	bcs.n	800ecb2 <xQueueCreateCountingSemaphoreStatic+0x30>
 800eca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eca4:	f383 8811 	msr	BASEPRI, r3
 800eca8:	f3bf 8f6f 	isb	sy
 800ecac:	f3bf 8f4f 	dsb	sy
 800ecb0:	e7fe      	b.n	800ecb0 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ecb2:	2202      	movs	r2, #2
 800ecb4:	9200      	str	r2, [sp, #0]
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	4611      	mov	r1, r2
 800ecba:	f7ff ff6d 	bl	800eb98 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800ecbe:	b100      	cbz	r0, 800ecc2 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ecc0:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800ecc2:	b002      	add	sp, #8
 800ecc4:	bd10      	pop	{r4, pc}

0800ecc6 <xQueueCreateCountingSemaphore>:
	{
 800ecc6:	b510      	push	{r4, lr}
 800ecc8:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800ecca:	b940      	cbnz	r0, 800ecde <xQueueCreateCountingSemaphore+0x18>
 800eccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecd0:	f383 8811 	msr	BASEPRI, r3
 800ecd4:	f3bf 8f6f 	isb	sy
 800ecd8:	f3bf 8f4f 	dsb	sy
 800ecdc:	e7fe      	b.n	800ecdc <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ecde:	4288      	cmp	r0, r1
 800ece0:	d208      	bcs.n	800ecf4 <xQueueCreateCountingSemaphore+0x2e>
 800ece2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ece6:	f383 8811 	msr	BASEPRI, r3
 800ecea:	f3bf 8f6f 	isb	sy
 800ecee:	f3bf 8f4f 	dsb	sy
 800ecf2:	e7fe      	b.n	800ecf2 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ecf4:	2202      	movs	r2, #2
 800ecf6:	2100      	movs	r1, #0
 800ecf8:	f7ff ff9c 	bl	800ec34 <xQueueGenericCreate>
		if( xHandle != NULL )
 800ecfc:	b100      	cbz	r0, 800ed00 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ecfe:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800ed00:	bd10      	pop	{r4, pc}

0800ed02 <xQueueGenericSend>:
{
 800ed02:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800ed06:	460f      	mov	r7, r1
 800ed08:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800ed0a:	4604      	mov	r4, r0
{
 800ed0c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800ed0e:	b940      	cbnz	r0, 800ed22 <xQueueGenericSend+0x20>
 800ed10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed14:	f383 8811 	msr	BASEPRI, r3
 800ed18:	f3bf 8f6f 	isb	sy
 800ed1c:	f3bf 8f4f 	dsb	sy
 800ed20:	e7fe      	b.n	800ed20 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ed22:	b951      	cbnz	r1, 800ed3a <xQueueGenericSend+0x38>
 800ed24:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800ed26:	b143      	cbz	r3, 800ed3a <xQueueGenericSend+0x38>
 800ed28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed2c:	f383 8811 	msr	BASEPRI, r3
 800ed30:	f3bf 8f6f 	isb	sy
 800ed34:	f3bf 8f4f 	dsb	sy
 800ed38:	e7fe      	b.n	800ed38 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ed3a:	2e02      	cmp	r6, #2
 800ed3c:	d10b      	bne.n	800ed56 <xQueueGenericSend+0x54>
 800ed3e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ed40:	2b01      	cmp	r3, #1
 800ed42:	d008      	beq.n	800ed56 <xQueueGenericSend+0x54>
 800ed44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed48:	f383 8811 	msr	BASEPRI, r3
 800ed4c:	f3bf 8f6f 	isb	sy
 800ed50:	f3bf 8f4f 	dsb	sy
 800ed54:	e7fe      	b.n	800ed54 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ed56:	f001 f80f 	bl	800fd78 <xTaskGetSchedulerState>
 800ed5a:	4605      	mov	r5, r0
 800ed5c:	b330      	cbz	r0, 800edac <xQueueGenericSend+0xaa>
 800ed5e:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800ed60:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800ed64:	f7ff fd0e 	bl	800e784 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ed68:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800ed6a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ed6c:	429a      	cmp	r2, r3
 800ed6e:	d301      	bcc.n	800ed74 <xQueueGenericSend+0x72>
 800ed70:	2e02      	cmp	r6, #2
 800ed72:	d127      	bne.n	800edc4 <xQueueGenericSend+0xc2>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ed74:	4632      	mov	r2, r6
 800ed76:	4639      	mov	r1, r7
 800ed78:	4620      	mov	r0, r4
 800ed7a:	f7ff fe4e 	bl	800ea1a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ed7e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ed80:	b11b      	cbz	r3, 800ed8a <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ed82:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800ed86:	f000 ff61 	bl	800fc4c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800ed8a:	b148      	cbz	r0, 800eda0 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800ed8c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ed90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ed94:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ed98:	f3bf 8f4f 	dsb	sy
 800ed9c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800eda0:	f7ff fd10 	bl	800e7c4 <vPortExitCritical>
				return pdPASS;
 800eda4:	2001      	movs	r0, #1
}
 800eda6:	b004      	add	sp, #16
 800eda8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800edac:	9b01      	ldr	r3, [sp, #4]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d0d6      	beq.n	800ed60 <xQueueGenericSend+0x5e>
 800edb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edb6:	f383 8811 	msr	BASEPRI, r3
 800edba:	f3bf 8f6f 	isb	sy
 800edbe:	f3bf 8f4f 	dsb	sy
 800edc2:	e7fe      	b.n	800edc2 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 800edc4:	9b01      	ldr	r3, [sp, #4]
 800edc6:	b91b      	cbnz	r3, 800edd0 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 800edc8:	f7ff fcfc 	bl	800e7c4 <vPortExitCritical>
					return errQUEUE_FULL;
 800edcc:	2000      	movs	r0, #0
 800edce:	e7ea      	b.n	800eda6 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 800edd0:	b915      	cbnz	r5, 800edd8 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800edd2:	a802      	add	r0, sp, #8
 800edd4:	f000 ff7c 	bl	800fcd0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800edd8:	f7ff fcf4 	bl	800e7c4 <vPortExitCritical>
		vTaskSuspendAll();
 800eddc:	f000 fd38 	bl	800f850 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ede0:	f7ff fcd0 	bl	800e784 <vPortEnterCritical>
 800ede4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ede8:	2bff      	cmp	r3, #255	@ 0xff
 800edea:	d101      	bne.n	800edf0 <xQueueGenericSend+0xee>
 800edec:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800edf0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800edf4:	2bff      	cmp	r3, #255	@ 0xff
 800edf6:	d101      	bne.n	800edfc <xQueueGenericSend+0xfa>
 800edf8:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800edfc:	f7ff fce2 	bl	800e7c4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ee00:	a901      	add	r1, sp, #4
 800ee02:	a802      	add	r0, sp, #8
 800ee04:	f000 ff70 	bl	800fce8 <xTaskCheckForTimeOut>
 800ee08:	bb38      	cbnz	r0, 800ee5a <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ee0a:	f7ff fcbb 	bl	800e784 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ee0e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800ee10:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ee12:	429a      	cmp	r2, r3
 800ee14:	d10e      	bne.n	800ee34 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800ee16:	f7ff fcd5 	bl	800e7c4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ee1a:	9901      	ldr	r1, [sp, #4]
 800ee1c:	f104 0010 	add.w	r0, r4, #16
 800ee20:	f000 fedc 	bl	800fbdc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ee24:	4620      	mov	r0, r4
 800ee26:	f7ff fe40 	bl	800eaaa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ee2a:	f000 fdb5 	bl	800f998 <xTaskResumeAll>
 800ee2e:	b148      	cbz	r0, 800ee44 <xQueueGenericSend+0x142>
 800ee30:	2501      	movs	r5, #1
 800ee32:	e797      	b.n	800ed64 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 800ee34:	f7ff fcc6 	bl	800e7c4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800ee38:	4620      	mov	r0, r4
 800ee3a:	f7ff fe36 	bl	800eaaa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ee3e:	f000 fdab 	bl	800f998 <xTaskResumeAll>
 800ee42:	e7f5      	b.n	800ee30 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 800ee44:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ee48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee4c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ee50:	f3bf 8f4f 	dsb	sy
 800ee54:	f3bf 8f6f 	isb	sy
 800ee58:	e7ea      	b.n	800ee30 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 800ee5a:	4620      	mov	r0, r4
 800ee5c:	f7ff fe25 	bl	800eaaa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ee60:	f000 fd9a 	bl	800f998 <xTaskResumeAll>
			return errQUEUE_FULL;
 800ee64:	e7b2      	b.n	800edcc <xQueueGenericSend+0xca>

0800ee66 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ee66:	2200      	movs	r2, #0
	{
 800ee68:	460b      	mov	r3, r1
 800ee6a:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ee6c:	4611      	mov	r1, r2
 800ee6e:	9000      	str	r0, [sp, #0]
 800ee70:	2001      	movs	r0, #1
 800ee72:	f7ff fe91 	bl	800eb98 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 800ee76:	4604      	mov	r4, r0
 800ee78:	b138      	cbz	r0, 800ee8a <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ee7a:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ee7c:	461a      	mov	r2, r3
 800ee7e:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ee80:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ee82:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ee84:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ee86:	f7ff ff3c 	bl	800ed02 <xQueueGenericSend>
	}
 800ee8a:	4620      	mov	r0, r4
 800ee8c:	b002      	add	sp, #8
 800ee8e:	bd10      	pop	{r4, pc}

0800ee90 <xQueueGiveMutexRecursive>:
	{
 800ee90:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800ee92:	4604      	mov	r4, r0
 800ee94:	b940      	cbnz	r0, 800eea8 <xQueueGiveMutexRecursive+0x18>
 800ee96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee9a:	f383 8811 	msr	BASEPRI, r3
 800ee9e:	f3bf 8f6f 	isb	sy
 800eea2:	f3bf 8f4f 	dsb	sy
 800eea6:	e7fe      	b.n	800eea6 <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800eea8:	6885      	ldr	r5, [r0, #8]
 800eeaa:	f000 ff5f 	bl	800fd6c <xTaskGetCurrentTaskHandle>
 800eeae:	4285      	cmp	r5, r0
 800eeb0:	d10b      	bne.n	800eeca <xQueueGiveMutexRecursive+0x3a>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800eeb2:	68e3      	ldr	r3, [r4, #12]
 800eeb4:	3b01      	subs	r3, #1
 800eeb6:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800eeb8:	b10b      	cbz	r3, 800eebe <xQueueGiveMutexRecursive+0x2e>
			xReturn = pdPASS;
 800eeba:	2001      	movs	r0, #1
	}
 800eebc:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800eebe:	461a      	mov	r2, r3
 800eec0:	4619      	mov	r1, r3
 800eec2:	4620      	mov	r0, r4
 800eec4:	f7ff ff1d 	bl	800ed02 <xQueueGenericSend>
 800eec8:	e7f7      	b.n	800eeba <xQueueGiveMutexRecursive+0x2a>
			xReturn = pdFAIL;
 800eeca:	2000      	movs	r0, #0
		return xReturn;
 800eecc:	e7f6      	b.n	800eebc <xQueueGiveMutexRecursive+0x2c>

0800eece <xQueueCreateMutex>:
	{
 800eece:	b570      	push	{r4, r5, r6, lr}
 800eed0:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800eed2:	2050      	movs	r0, #80	@ 0x50
 800eed4:	f7ff fade 	bl	800e494 <pvPortMalloc>
 800eed8:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 800eeda:	b198      	cbz	r0, 800ef04 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800eedc:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800eede:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800eee0:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800eee2:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800eee6:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800eeea:	f7ff fe16 	bl	800eb1a <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800eeee:	462b      	mov	r3, r5
 800eef0:	462a      	mov	r2, r5
 800eef2:	4629      	mov	r1, r5
 800eef4:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800eef6:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800eefa:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800eefc:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800eefe:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ef00:	f7ff feff 	bl	800ed02 <xQueueGenericSend>
	}
 800ef04:	4620      	mov	r0, r4
 800ef06:	bd70      	pop	{r4, r5, r6, pc}

0800ef08 <xQueueGenericSendFromISR>:
{
 800ef08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef0c:	4689      	mov	r9, r1
 800ef0e:	4617      	mov	r7, r2
 800ef10:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800ef12:	4604      	mov	r4, r0
 800ef14:	b940      	cbnz	r0, 800ef28 <xQueueGenericSendFromISR+0x20>
 800ef16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef1a:	f383 8811 	msr	BASEPRI, r3
 800ef1e:	f3bf 8f6f 	isb	sy
 800ef22:	f3bf 8f4f 	dsb	sy
 800ef26:	e7fe      	b.n	800ef26 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ef28:	b951      	cbnz	r1, 800ef40 <xQueueGenericSendFromISR+0x38>
 800ef2a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800ef2c:	b143      	cbz	r3, 800ef40 <xQueueGenericSendFromISR+0x38>
 800ef2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef32:	f383 8811 	msr	BASEPRI, r3
 800ef36:	f3bf 8f6f 	isb	sy
 800ef3a:	f3bf 8f4f 	dsb	sy
 800ef3e:	e7fe      	b.n	800ef3e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ef40:	2e02      	cmp	r6, #2
 800ef42:	d10b      	bne.n	800ef5c <xQueueGenericSendFromISR+0x54>
 800ef44:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ef46:	2b01      	cmp	r3, #1
 800ef48:	d008      	beq.n	800ef5c <xQueueGenericSendFromISR+0x54>
 800ef4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef4e:	f383 8811 	msr	BASEPRI, r3
 800ef52:	f3bf 8f6f 	isb	sy
 800ef56:	f3bf 8f4f 	dsb	sy
 800ef5a:	e7fe      	b.n	800ef5a <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ef5c:	f7ff fd24 	bl	800e9a8 <vPortValidateInterruptPriority>
	__asm volatile
 800ef60:	f3ef 8811 	mrs	r8, BASEPRI
 800ef64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef68:	f383 8811 	msr	BASEPRI, r3
 800ef6c:	f3bf 8f6f 	isb	sy
 800ef70:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ef74:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800ef76:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ef78:	429a      	cmp	r2, r3
 800ef7a:	d301      	bcc.n	800ef80 <xQueueGenericSendFromISR+0x78>
 800ef7c:	2e02      	cmp	r6, #2
 800ef7e:	d11e      	bne.n	800efbe <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 800ef80:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ef84:	4632      	mov	r2, r6
 800ef86:	4649      	mov	r1, r9
 800ef88:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800ef8a:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ef8c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ef8e:	f7ff fd44 	bl	800ea1a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800ef92:	1c6b      	adds	r3, r5, #1
 800ef94:	d10e      	bne.n	800efb4 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ef96:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ef98:	b13b      	cbz	r3, 800efaa <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ef9a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800ef9e:	f000 fe55 	bl	800fc4c <xTaskRemoveFromEventList>
 800efa2:	b110      	cbz	r0, 800efaa <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 800efa4:	b10f      	cbz	r7, 800efaa <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800efa6:	2301      	movs	r3, #1
 800efa8:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800efaa:	2001      	movs	r0, #1
	__asm volatile
 800efac:	f388 8811 	msr	BASEPRI, r8
}
 800efb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800efb4:	3501      	adds	r5, #1
 800efb6:	b26d      	sxtb	r5, r5
 800efb8:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 800efbc:	e7f5      	b.n	800efaa <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 800efbe:	2000      	movs	r0, #0
 800efc0:	e7f4      	b.n	800efac <xQueueGenericSendFromISR+0xa4>

0800efc2 <xQueueGiveFromISR>:
{
 800efc2:	b570      	push	{r4, r5, r6, lr}
 800efc4:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800efc6:	4604      	mov	r4, r0
 800efc8:	b940      	cbnz	r0, 800efdc <xQueueGiveFromISR+0x1a>
	__asm volatile
 800efca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efce:	f383 8811 	msr	BASEPRI, r3
 800efd2:	f3bf 8f6f 	isb	sy
 800efd6:	f3bf 8f4f 	dsb	sy
 800efda:	e7fe      	b.n	800efda <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800efdc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800efde:	b143      	cbz	r3, 800eff2 <xQueueGiveFromISR+0x30>
 800efe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efe4:	f383 8811 	msr	BASEPRI, r3
 800efe8:	f3bf 8f6f 	isb	sy
 800efec:	f3bf 8f4f 	dsb	sy
 800eff0:	e7fe      	b.n	800eff0 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800eff2:	6803      	ldr	r3, [r0, #0]
 800eff4:	b953      	cbnz	r3, 800f00c <xQueueGiveFromISR+0x4a>
 800eff6:	6883      	ldr	r3, [r0, #8]
 800eff8:	b143      	cbz	r3, 800f00c <xQueueGiveFromISR+0x4a>
 800effa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800effe:	f383 8811 	msr	BASEPRI, r3
 800f002:	f3bf 8f6f 	isb	sy
 800f006:	f3bf 8f4f 	dsb	sy
 800f00a:	e7fe      	b.n	800f00a <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f00c:	f7ff fccc 	bl	800e9a8 <vPortValidateInterruptPriority>
	__asm volatile
 800f010:	f3ef 8611 	mrs	r6, BASEPRI
 800f014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f018:	f383 8811 	msr	BASEPRI, r3
 800f01c:	f3bf 8f6f 	isb	sy
 800f020:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f024:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f026:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f028:	4293      	cmp	r3, r2
 800f02a:	d919      	bls.n	800f060 <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 800f02c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f030:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800f032:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800f034:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f036:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800f038:	d10d      	bne.n	800f056 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f03a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800f03c:	b13b      	cbz	r3, 800f04e <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f03e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800f042:	f000 fe03 	bl	800fc4c <xTaskRemoveFromEventList>
 800f046:	b110      	cbz	r0, 800f04e <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 800f048:	b10d      	cbz	r5, 800f04e <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f04a:	2301      	movs	r3, #1
 800f04c:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 800f04e:	2001      	movs	r0, #1
	__asm volatile
 800f050:	f386 8811 	msr	BASEPRI, r6
}
 800f054:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f056:	3301      	adds	r3, #1
 800f058:	b25b      	sxtb	r3, r3
 800f05a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800f05e:	e7f6      	b.n	800f04e <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 800f060:	2000      	movs	r0, #0
 800f062:	e7f5      	b.n	800f050 <xQueueGiveFromISR+0x8e>

0800f064 <xQueueReceive>:
{
 800f064:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800f068:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 800f06a:	4604      	mov	r4, r0
{
 800f06c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800f06e:	b940      	cbnz	r0, 800f082 <xQueueReceive+0x1e>
	__asm volatile
 800f070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f074:	f383 8811 	msr	BASEPRI, r3
 800f078:	f3bf 8f6f 	isb	sy
 800f07c:	f3bf 8f4f 	dsb	sy
 800f080:	e7fe      	b.n	800f080 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f082:	b951      	cbnz	r1, 800f09a <xQueueReceive+0x36>
 800f084:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800f086:	b143      	cbz	r3, 800f09a <xQueueReceive+0x36>
 800f088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f08c:	f383 8811 	msr	BASEPRI, r3
 800f090:	f3bf 8f6f 	isb	sy
 800f094:	f3bf 8f4f 	dsb	sy
 800f098:	e7fe      	b.n	800f098 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f09a:	f000 fe6d 	bl	800fd78 <xTaskGetSchedulerState>
 800f09e:	4605      	mov	r5, r0
 800f0a0:	b318      	cbz	r0, 800f0ea <xQueueReceive+0x86>
 800f0a2:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800f0a4:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800f0a8:	f7ff fb6c 	bl	800e784 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f0ac:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f0ae:	b347      	cbz	r7, 800f102 <xQueueReceive+0x9e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f0b0:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f0b2:	4631      	mov	r1, r6
 800f0b4:	4620      	mov	r0, r4
 800f0b6:	f7ff fce3 	bl	800ea80 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f0ba:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f0bc:	6923      	ldr	r3, [r4, #16]
 800f0be:	b173      	cbz	r3, 800f0de <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f0c0:	f104 0010 	add.w	r0, r4, #16
 800f0c4:	f000 fdc2 	bl	800fc4c <xTaskRemoveFromEventList>
 800f0c8:	b148      	cbz	r0, 800f0de <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 800f0ca:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f0ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f0d2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f0d6:	f3bf 8f4f 	dsb	sy
 800f0da:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800f0de:	f7ff fb71 	bl	800e7c4 <vPortExitCritical>
				return pdPASS;
 800f0e2:	2001      	movs	r0, #1
}
 800f0e4:	b004      	add	sp, #16
 800f0e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f0ea:	9b01      	ldr	r3, [sp, #4]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d0d9      	beq.n	800f0a4 <xQueueReceive+0x40>
 800f0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0f4:	f383 8811 	msr	BASEPRI, r3
 800f0f8:	f3bf 8f6f 	isb	sy
 800f0fc:	f3bf 8f4f 	dsb	sy
 800f100:	e7fe      	b.n	800f100 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800f102:	9b01      	ldr	r3, [sp, #4]
 800f104:	b91b      	cbnz	r3, 800f10e <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 800f106:	f7ff fb5d 	bl	800e7c4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800f10a:	2000      	movs	r0, #0
 800f10c:	e7ea      	b.n	800f0e4 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 800f10e:	b915      	cbnz	r5, 800f116 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f110:	a802      	add	r0, sp, #8
 800f112:	f000 fddd 	bl	800fcd0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800f116:	f7ff fb55 	bl	800e7c4 <vPortExitCritical>
		vTaskSuspendAll();
 800f11a:	f000 fb99 	bl	800f850 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f11e:	f7ff fb31 	bl	800e784 <vPortEnterCritical>
 800f122:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f126:	2bff      	cmp	r3, #255	@ 0xff
 800f128:	d101      	bne.n	800f12e <xQueueReceive+0xca>
 800f12a:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800f12e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800f132:	2bff      	cmp	r3, #255	@ 0xff
 800f134:	d101      	bne.n	800f13a <xQueueReceive+0xd6>
 800f136:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800f13a:	f7ff fb43 	bl	800e7c4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f13e:	a901      	add	r1, sp, #4
 800f140:	a802      	add	r0, sp, #8
 800f142:	f000 fdd1 	bl	800fce8 <xTaskCheckForTimeOut>
 800f146:	bb00      	cbnz	r0, 800f18a <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f148:	4620      	mov	r0, r4
 800f14a:	f7ff fc5b 	bl	800ea04 <prvIsQueueEmpty>
 800f14e:	b1b0      	cbz	r0, 800f17e <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f150:	9901      	ldr	r1, [sp, #4]
 800f152:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800f156:	f000 fd41 	bl	800fbdc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f15a:	4620      	mov	r0, r4
 800f15c:	f7ff fca5 	bl	800eaaa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f160:	f000 fc1a 	bl	800f998 <xTaskResumeAll>
 800f164:	b948      	cbnz	r0, 800f17a <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 800f166:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f16a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f16e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f172:	f3bf 8f4f 	dsb	sy
 800f176:	f3bf 8f6f 	isb	sy
 800f17a:	2501      	movs	r5, #1
 800f17c:	e794      	b.n	800f0a8 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 800f17e:	4620      	mov	r0, r4
 800f180:	f7ff fc93 	bl	800eaaa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f184:	f000 fc08 	bl	800f998 <xTaskResumeAll>
 800f188:	e7f7      	b.n	800f17a <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 800f18a:	4620      	mov	r0, r4
 800f18c:	f7ff fc8d 	bl	800eaaa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f190:	f000 fc02 	bl	800f998 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f194:	4620      	mov	r0, r4
 800f196:	f7ff fc35 	bl	800ea04 <prvIsQueueEmpty>
 800f19a:	2800      	cmp	r0, #0
 800f19c:	d0ed      	beq.n	800f17a <xQueueReceive+0x116>
 800f19e:	e7b4      	b.n	800f10a <xQueueReceive+0xa6>

0800f1a0 <xQueueSemaphoreTake>:
{
 800f1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1a2:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800f1a4:	4604      	mov	r4, r0
{
 800f1a6:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800f1a8:	b940      	cbnz	r0, 800f1bc <xQueueSemaphoreTake+0x1c>
 800f1aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1ae:	f383 8811 	msr	BASEPRI, r3
 800f1b2:	f3bf 8f6f 	isb	sy
 800f1b6:	f3bf 8f4f 	dsb	sy
 800f1ba:	e7fe      	b.n	800f1ba <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800f1bc:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800f1be:	b145      	cbz	r5, 800f1d2 <xQueueSemaphoreTake+0x32>
 800f1c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1c4:	f383 8811 	msr	BASEPRI, r3
 800f1c8:	f3bf 8f6f 	isb	sy
 800f1cc:	f3bf 8f4f 	dsb	sy
 800f1d0:	e7fe      	b.n	800f1d0 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f1d2:	f000 fdd1 	bl	800fd78 <xTaskGetSchedulerState>
 800f1d6:	4606      	mov	r6, r0
 800f1d8:	b320      	cbz	r0, 800f224 <xQueueSemaphoreTake+0x84>
 800f1da:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800f1dc:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 800f1de:	f7ff fad1 	bl	800e784 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f1e2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f1e4:	b353      	cbz	r3, 800f23c <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f1e6:	3b01      	subs	r3, #1
 800f1e8:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f1ea:	6823      	ldr	r3, [r4, #0]
 800f1ec:	b913      	cbnz	r3, 800f1f4 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f1ee:	f000 fea1 	bl	800ff34 <pvTaskIncrementMutexHeldCount>
 800f1f2:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f1f4:	6923      	ldr	r3, [r4, #16]
 800f1f6:	b173      	cbz	r3, 800f216 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f1f8:	f104 0010 	add.w	r0, r4, #16
 800f1fc:	f000 fd26 	bl	800fc4c <xTaskRemoveFromEventList>
 800f200:	b148      	cbz	r0, 800f216 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 800f202:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f206:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f20a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f20e:	f3bf 8f4f 	dsb	sy
 800f212:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800f216:	f7ff fad5 	bl	800e7c4 <vPortExitCritical>
				return pdPASS;
 800f21a:	2001      	movs	r0, #1
}
 800f21c:	b005      	add	sp, #20
 800f21e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f220:	4635      	mov	r5, r6
 800f222:	e7db      	b.n	800f1dc <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f224:	9b01      	ldr	r3, [sp, #4]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d0fa      	beq.n	800f220 <xQueueSemaphoreTake+0x80>
 800f22a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f22e:	f383 8811 	msr	BASEPRI, r3
 800f232:	f3bf 8f6f 	isb	sy
 800f236:	f3bf 8f4f 	dsb	sy
 800f23a:	e7fe      	b.n	800f23a <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800f23c:	9b01      	ldr	r3, [sp, #4]
 800f23e:	b953      	cbnz	r3, 800f256 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f240:	2d00      	cmp	r5, #0
 800f242:	d066      	beq.n	800f312 <xQueueSemaphoreTake+0x172>
 800f244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f248:	f383 8811 	msr	BASEPRI, r3
 800f24c:	f3bf 8f6f 	isb	sy
 800f250:	f3bf 8f4f 	dsb	sy
 800f254:	e7fe      	b.n	800f254 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 800f256:	b916      	cbnz	r6, 800f25e <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f258:	a802      	add	r0, sp, #8
 800f25a:	f000 fd39 	bl	800fcd0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800f25e:	f7ff fab1 	bl	800e7c4 <vPortExitCritical>
		vTaskSuspendAll();
 800f262:	f000 faf5 	bl	800f850 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f266:	f7ff fa8d 	bl	800e784 <vPortEnterCritical>
 800f26a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f26e:	2bff      	cmp	r3, #255	@ 0xff
 800f270:	d101      	bne.n	800f276 <xQueueSemaphoreTake+0xd6>
 800f272:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 800f276:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800f27a:	2bff      	cmp	r3, #255	@ 0xff
 800f27c:	d101      	bne.n	800f282 <xQueueSemaphoreTake+0xe2>
 800f27e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f282:	f7ff fa9f 	bl	800e7c4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f286:	a901      	add	r1, sp, #4
 800f288:	a802      	add	r0, sp, #8
 800f28a:	f000 fd2d 	bl	800fce8 <xTaskCheckForTimeOut>
 800f28e:	bb50      	cbnz	r0, 800f2e6 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f290:	4620      	mov	r0, r4
 800f292:	f7ff fbb7 	bl	800ea04 <prvIsQueueEmpty>
 800f296:	b300      	cbz	r0, 800f2da <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f298:	6823      	ldr	r3, [r4, #0]
 800f29a:	b93b      	cbnz	r3, 800f2ac <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 800f29c:	f7ff fa72 	bl	800e784 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f2a0:	68a0      	ldr	r0, [r4, #8]
 800f2a2:	f000 fd79 	bl	800fd98 <xTaskPriorityInherit>
 800f2a6:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800f2a8:	f7ff fa8c 	bl	800e7c4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f2ac:	9901      	ldr	r1, [sp, #4]
 800f2ae:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800f2b2:	f000 fc93 	bl	800fbdc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f2b6:	4620      	mov	r0, r4
 800f2b8:	f7ff fbf7 	bl	800eaaa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f2bc:	f000 fb6c 	bl	800f998 <xTaskResumeAll>
 800f2c0:	b948      	cbnz	r0, 800f2d6 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 800f2c2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f2c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f2ca:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f2ce:	f3bf 8f4f 	dsb	sy
 800f2d2:	f3bf 8f6f 	isb	sy
 800f2d6:	2601      	movs	r6, #1
 800f2d8:	e781      	b.n	800f1de <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 800f2da:	4620      	mov	r0, r4
 800f2dc:	f7ff fbe5 	bl	800eaaa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f2e0:	f000 fb5a 	bl	800f998 <xTaskResumeAll>
 800f2e4:	e7f7      	b.n	800f2d6 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 800f2e6:	4620      	mov	r0, r4
 800f2e8:	f7ff fbdf 	bl	800eaaa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f2ec:	f000 fb54 	bl	800f998 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f2f0:	4620      	mov	r0, r4
 800f2f2:	f7ff fb87 	bl	800ea04 <prvIsQueueEmpty>
 800f2f6:	2800      	cmp	r0, #0
 800f2f8:	d0ed      	beq.n	800f2d6 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 800f2fa:	b165      	cbz	r5, 800f316 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 800f2fc:	f7ff fa42 	bl	800e784 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f300:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800f302:	b119      	cbz	r1, 800f30c <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f304:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f306:	6819      	ldr	r1, [r3, #0]
 800f308:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f30c:	68a0      	ldr	r0, [r4, #8]
 800f30e:	f000 fdc3 	bl	800fe98 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800f312:	f7ff fa57 	bl	800e7c4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800f316:	2000      	movs	r0, #0
 800f318:	e780      	b.n	800f21c <xQueueSemaphoreTake+0x7c>

0800f31a <xQueueTakeMutexRecursive>:
	{
 800f31a:	b570      	push	{r4, r5, r6, lr}
 800f31c:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 800f31e:	4604      	mov	r4, r0
 800f320:	b940      	cbnz	r0, 800f334 <xQueueTakeMutexRecursive+0x1a>
 800f322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f326:	f383 8811 	msr	BASEPRI, r3
 800f32a:	f3bf 8f6f 	isb	sy
 800f32e:	f3bf 8f4f 	dsb	sy
 800f332:	e7fe      	b.n	800f332 <xQueueTakeMutexRecursive+0x18>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f334:	6886      	ldr	r6, [r0, #8]
 800f336:	f000 fd19 	bl	800fd6c <xTaskGetCurrentTaskHandle>
 800f33a:	4286      	cmp	r6, r0
 800f33c:	d104      	bne.n	800f348 <xQueueTakeMutexRecursive+0x2e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f33e:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800f340:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f342:	3301      	adds	r3, #1
 800f344:	60e3      	str	r3, [r4, #12]
	}
 800f346:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800f348:	4629      	mov	r1, r5
 800f34a:	4620      	mov	r0, r4
 800f34c:	f7ff ff28 	bl	800f1a0 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800f350:	2800      	cmp	r0, #0
 800f352:	d0f8      	beq.n	800f346 <xQueueTakeMutexRecursive+0x2c>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f354:	68e3      	ldr	r3, [r4, #12]
 800f356:	3301      	adds	r3, #1
 800f358:	60e3      	str	r3, [r4, #12]
 800f35a:	e7f4      	b.n	800f346 <xQueueTakeMutexRecursive+0x2c>

0800f35c <xQueueReceiveFromISR>:
{
 800f35c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f360:	4689      	mov	r9, r1
 800f362:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800f364:	4604      	mov	r4, r0
 800f366:	b940      	cbnz	r0, 800f37a <xQueueReceiveFromISR+0x1e>
 800f368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f36c:	f383 8811 	msr	BASEPRI, r3
 800f370:	f3bf 8f6f 	isb	sy
 800f374:	f3bf 8f4f 	dsb	sy
 800f378:	e7fe      	b.n	800f378 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f37a:	b951      	cbnz	r1, 800f392 <xQueueReceiveFromISR+0x36>
 800f37c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800f37e:	b143      	cbz	r3, 800f392 <xQueueReceiveFromISR+0x36>
 800f380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f384:	f383 8811 	msr	BASEPRI, r3
 800f388:	f3bf 8f6f 	isb	sy
 800f38c:	f3bf 8f4f 	dsb	sy
 800f390:	e7fe      	b.n	800f390 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f392:	f7ff fb09 	bl	800e9a8 <vPortValidateInterruptPriority>
	__asm volatile
 800f396:	f3ef 8711 	mrs	r7, BASEPRI
 800f39a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f39e:	f383 8811 	msr	BASEPRI, r3
 800f3a2:	f3bf 8f6f 	isb	sy
 800f3a6:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f3aa:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f3ac:	b30d      	cbz	r5, 800f3f2 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 800f3ae:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f3b2:	4649      	mov	r1, r9
 800f3b4:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f3b6:	3d01      	subs	r5, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800f3b8:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f3ba:	f7ff fb61 	bl	800ea80 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f3be:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800f3c0:	1c73      	adds	r3, r6, #1
 800f3c2:	d111      	bne.n	800f3e8 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f3c4:	6923      	ldr	r3, [r4, #16]
 800f3c6:	b153      	cbz	r3, 800f3de <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f3c8:	f104 0010 	add.w	r0, r4, #16
 800f3cc:	f000 fc3e 	bl	800fc4c <xTaskRemoveFromEventList>
 800f3d0:	b128      	cbz	r0, 800f3de <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 800f3d2:	f1b8 0f00 	cmp.w	r8, #0
 800f3d6:	d002      	beq.n	800f3de <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f3d8:	2301      	movs	r3, #1
 800f3da:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 800f3de:	2001      	movs	r0, #1
	__asm volatile
 800f3e0:	f387 8811 	msr	BASEPRI, r7
}
 800f3e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f3e8:	3601      	adds	r6, #1
 800f3ea:	b276      	sxtb	r6, r6
 800f3ec:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 800f3f0:	e7f5      	b.n	800f3de <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 800f3f2:	4628      	mov	r0, r5
 800f3f4:	e7f4      	b.n	800f3e0 <xQueueReceiveFromISR+0x84>
	...

0800f3f8 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f3f8:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f3fa:	4a07      	ldr	r2, [pc, #28]	@ (800f418 <vQueueAddToRegistry+0x20>)
	{
 800f3fc:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f3fe:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800f402:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800f406:	b91d      	cbnz	r5, 800f410 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f408:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f40c:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f40e:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f410:	3301      	adds	r3, #1
 800f412:	2b08      	cmp	r3, #8
 800f414:	d1f3      	bne.n	800f3fe <vQueueAddToRegistry+0x6>
 800f416:	e7fa      	b.n	800f40e <vQueueAddToRegistry+0x16>
 800f418:	24025da4 	.word	0x24025da4

0800f41c <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f41c:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f41e:	4a09      	ldr	r2, [pc, #36]	@ (800f444 <vQueueUnregisterQueue+0x28>)
	{
 800f420:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f422:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800f426:	00dc      	lsls	r4, r3, #3
 800f428:	4281      	cmp	r1, r0
 800f42a:	d106      	bne.n	800f43a <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f42c:	4a06      	ldr	r2, [pc, #24]	@ (800f448 <vQueueUnregisterQueue+0x2c>)
 800f42e:	2100      	movs	r1, #0
 800f430:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f434:	4422      	add	r2, r4
 800f436:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f438:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f43a:	3301      	adds	r3, #1
 800f43c:	2b08      	cmp	r3, #8
 800f43e:	d1f0      	bne.n	800f422 <vQueueUnregisterQueue+0x6>
 800f440:	e7fa      	b.n	800f438 <vQueueUnregisterQueue+0x1c>
 800f442:	bf00      	nop
 800f444:	24025da8 	.word	0x24025da8
 800f448:	24025da4 	.word	0x24025da4

0800f44c <vQueueDelete>:
{
 800f44c:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800f44e:	b940      	cbnz	r0, 800f462 <vQueueDelete+0x16>
	__asm volatile
 800f450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f454:	f383 8811 	msr	BASEPRI, r3
 800f458:	f3bf 8f6f 	isb	sy
 800f45c:	f3bf 8f4f 	dsb	sy
 800f460:	e7fe      	b.n	800f460 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 800f462:	f7ff ffdb 	bl	800f41c <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f466:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 800f46a:	b91b      	cbnz	r3, 800f474 <vQueueDelete+0x28>
}
 800f46c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800f470:	f7ff b8a8 	b.w	800e5c4 <vPortFree>
}
 800f474:	bd10      	pop	{r4, pc}

0800f476 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f476:	b570      	push	{r4, r5, r6, lr}
 800f478:	4604      	mov	r4, r0
 800f47a:	460d      	mov	r5, r1
 800f47c:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f47e:	f7ff f981 	bl	800e784 <vPortEnterCritical>
 800f482:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f486:	2bff      	cmp	r3, #255	@ 0xff
 800f488:	d102      	bne.n	800f490 <vQueueWaitForMessageRestricted+0x1a>
 800f48a:	2300      	movs	r3, #0
 800f48c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800f490:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800f494:	2bff      	cmp	r3, #255	@ 0xff
 800f496:	d102      	bne.n	800f49e <vQueueWaitForMessageRestricted+0x28>
 800f498:	2300      	movs	r3, #0
 800f49a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800f49e:	f7ff f991 	bl	800e7c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f4a2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800f4a4:	b92b      	cbnz	r3, 800f4b2 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f4a6:	4632      	mov	r2, r6
 800f4a8:	4629      	mov	r1, r5
 800f4aa:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800f4ae:	f000 fbaf 	bl	800fc10 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f4b2:	4620      	mov	r0, r4
	}
 800f4b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800f4b8:	f7ff baf7 	b.w	800eaaa <prvUnlockQueue>

0800f4bc <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f4bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4c0:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f4c2:	f7ff f95f 	bl	800e784 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f4c6:	4b2f      	ldr	r3, [pc, #188]	@ (800f584 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800f4c8:	4e2f      	ldr	r6, [pc, #188]	@ (800f588 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800f4ca:	681a      	ldr	r2, [r3, #0]
 800f4cc:	4f2f      	ldr	r7, [pc, #188]	@ (800f58c <prvAddNewTaskToReadyList+0xd0>)
 800f4ce:	3201      	adds	r2, #1
 800f4d0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800f4d2:	6835      	ldr	r5, [r6, #0]
 800f4d4:	2d00      	cmp	r5, #0
 800f4d6:	d14a      	bne.n	800f56e <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f4d8:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	2b01      	cmp	r3, #1
 800f4de:	d11f      	bne.n	800f520 <prvAddNewTaskToReadyList+0x64>
 800f4e0:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f4e2:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f4e4:	4640      	mov	r0, r8
 800f4e6:	f7ff f8ab 	bl	800e640 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f4ea:	f108 0814 	add.w	r8, r8, #20
 800f4ee:	2d38      	cmp	r5, #56	@ 0x38
 800f4f0:	d1f7      	bne.n	800f4e2 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f4f2:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 800f5b4 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800f4f6:	4d26      	ldr	r5, [pc, #152]	@ (800f590 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800f4f8:	4640      	mov	r0, r8
 800f4fa:	f7ff f8a1 	bl	800e640 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f4fe:	4628      	mov	r0, r5
 800f500:	f7ff f89e 	bl	800e640 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f504:	4823      	ldr	r0, [pc, #140]	@ (800f594 <prvAddNewTaskToReadyList+0xd8>)
 800f506:	f7ff f89b 	bl	800e640 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f50a:	4823      	ldr	r0, [pc, #140]	@ (800f598 <prvAddNewTaskToReadyList+0xdc>)
 800f50c:	f7ff f898 	bl	800e640 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f510:	4822      	ldr	r0, [pc, #136]	@ (800f59c <prvAddNewTaskToReadyList+0xe0>)
 800f512:	f7ff f895 	bl	800e640 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f516:	4b22      	ldr	r3, [pc, #136]	@ (800f5a0 <prvAddNewTaskToReadyList+0xe4>)
 800f518:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f51c:	4b21      	ldr	r3, [pc, #132]	@ (800f5a4 <prvAddNewTaskToReadyList+0xe8>)
 800f51e:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800f520:	4a21      	ldr	r2, [pc, #132]	@ (800f5a8 <prvAddNewTaskToReadyList+0xec>)
 800f522:	6813      	ldr	r3, [r2, #0]
 800f524:	3301      	adds	r3, #1
 800f526:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800f528:	4a20      	ldr	r2, [pc, #128]	@ (800f5ac <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f52a:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800f52c:	6811      	ldr	r1, [r2, #0]
 800f52e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800f530:	428b      	cmp	r3, r1
 800f532:	d900      	bls.n	800f536 <prvAddNewTaskToReadyList+0x7a>
 800f534:	6013      	str	r3, [r2, #0]
 800f536:	2014      	movs	r0, #20
 800f538:	1d21      	adds	r1, r4, #4
 800f53a:	fb00 7003 	mla	r0, r0, r3, r7
 800f53e:	f7ff f88d 	bl	800e65c <vListInsertEnd>
	taskEXIT_CRITICAL();
 800f542:	f7ff f93f 	bl	800e7c4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800f546:	4b1a      	ldr	r3, [pc, #104]	@ (800f5b0 <prvAddNewTaskToReadyList+0xf4>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	b173      	cbz	r3, 800f56a <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f54c:	6833      	ldr	r3, [r6, #0]
 800f54e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f550:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800f552:	429a      	cmp	r2, r3
 800f554:	d209      	bcs.n	800f56a <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800f556:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f55a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f55e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f562:	f3bf 8f4f 	dsb	sy
 800f566:	f3bf 8f6f 	isb	sy
}
 800f56a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800f56e:	4b10      	ldr	r3, [pc, #64]	@ (800f5b0 <prvAddNewTaskToReadyList+0xf4>)
 800f570:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f572:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800f574:	2a00      	cmp	r2, #0
 800f576:	d1d3      	bne.n	800f520 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f578:	6832      	ldr	r2, [r6, #0]
 800f57a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800f57c:	429a      	cmp	r2, r3
 800f57e:	d8cf      	bhi.n	800f520 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800f580:	6034      	str	r4, [r6, #0]
 800f582:	e7cd      	b.n	800f520 <prvAddNewTaskToReadyList+0x64>
 800f584:	24025e08 	.word	0x24025e08
 800f588:	240262dc 	.word	0x240262dc
 800f58c:	24025e7c 	.word	0x24025e7c
 800f590:	24025e54 	.word	0x24025e54
 800f594:	24025e38 	.word	0x24025e38
 800f598:	24025e24 	.word	0x24025e24
 800f59c:	24025e0c 	.word	0x24025e0c
 800f5a0:	24025e50 	.word	0x24025e50
 800f5a4:	24025e4c 	.word	0x24025e4c
 800f5a8:	24025dec 	.word	0x24025dec
 800f5ac:	24025e00 	.word	0x24025e00
 800f5b0:	24025dfc 	.word	0x24025dfc
 800f5b4:	24025e68 	.word	0x24025e68

0800f5b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f5ba:	4b15      	ldr	r3, [pc, #84]	@ (800f610 <prvAddCurrentTaskToDelayedList+0x58>)
{
 800f5bc:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f5be:	4d15      	ldr	r5, [pc, #84]	@ (800f614 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800f5c0:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800f5c2:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f5c4:	6828      	ldr	r0, [r5, #0]
 800f5c6:	3004      	adds	r0, #4
 800f5c8:	f7ff f86a 	bl	800e6a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f5cc:	1c73      	adds	r3, r6, #1
 800f5ce:	d107      	bne.n	800f5e0 <prvAddCurrentTaskToDelayedList+0x28>
 800f5d0:	b137      	cbz	r7, 800f5e0 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f5d2:	6829      	ldr	r1, [r5, #0]
 800f5d4:	4810      	ldr	r0, [pc, #64]	@ (800f618 <prvAddCurrentTaskToDelayedList+0x60>)
 800f5d6:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f5d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f5dc:	f7ff b83e 	b.w	800e65c <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f5e0:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f5e2:	682b      	ldr	r3, [r5, #0]
 800f5e4:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f5e6:	d307      	bcc.n	800f5f8 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f5e8:	4b0c      	ldr	r3, [pc, #48]	@ (800f61c <prvAddCurrentTaskToDelayedList+0x64>)
 800f5ea:	6818      	ldr	r0, [r3, #0]
 800f5ec:	6829      	ldr	r1, [r5, #0]
}
 800f5ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f5f2:	3104      	adds	r1, #4
 800f5f4:	f7ff b83d 	b.w	800e672 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f5f8:	4b09      	ldr	r3, [pc, #36]	@ (800f620 <prvAddCurrentTaskToDelayedList+0x68>)
 800f5fa:	6818      	ldr	r0, [r3, #0]
 800f5fc:	6829      	ldr	r1, [r5, #0]
 800f5fe:	3104      	adds	r1, #4
 800f600:	f7ff f837 	bl	800e672 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f604:	4b07      	ldr	r3, [pc, #28]	@ (800f624 <prvAddCurrentTaskToDelayedList+0x6c>)
 800f606:	681a      	ldr	r2, [r3, #0]
 800f608:	42a2      	cmp	r2, r4
 800f60a:	d900      	bls.n	800f60e <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800f60c:	601c      	str	r4, [r3, #0]
}
 800f60e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f610:	24025e04 	.word	0x24025e04
 800f614:	240262dc 	.word	0x240262dc
 800f618:	24025e0c 	.word	0x24025e0c
 800f61c:	24025e4c 	.word	0x24025e4c
 800f620:	24025e50 	.word	0x24025e50
 800f624:	24025de8 	.word	0x24025de8

0800f628 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f628:	4a06      	ldr	r2, [pc, #24]	@ (800f644 <prvResetNextTaskUnblockTime+0x1c>)
 800f62a:	6813      	ldr	r3, [r2, #0]
 800f62c:	6819      	ldr	r1, [r3, #0]
 800f62e:	4b06      	ldr	r3, [pc, #24]	@ (800f648 <prvResetNextTaskUnblockTime+0x20>)
 800f630:	b919      	cbnz	r1, 800f63a <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800f632:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f636:	601a      	str	r2, [r3, #0]
}
 800f638:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f63a:	6812      	ldr	r2, [r2, #0]
 800f63c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f63e:	68d2      	ldr	r2, [r2, #12]
 800f640:	6852      	ldr	r2, [r2, #4]
 800f642:	e7f8      	b.n	800f636 <prvResetNextTaskUnblockTime+0xe>
 800f644:	24025e50 	.word	0x24025e50
 800f648:	24025de8 	.word	0x24025de8

0800f64c <prvDeleteTCB>:
	{
 800f64c:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f64e:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 800f652:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f654:	b93b      	cbnz	r3, 800f666 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800f656:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800f658:	f7fe ffb4 	bl	800e5c4 <vPortFree>
				vPortFree( pxTCB );
 800f65c:	4620      	mov	r0, r4
	}
 800f65e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800f662:	f7fe bfaf 	b.w	800e5c4 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f666:	2b01      	cmp	r3, #1
 800f668:	d0f9      	beq.n	800f65e <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f66a:	2b02      	cmp	r3, #2
 800f66c:	d008      	beq.n	800f680 <prvDeleteTCB+0x34>
 800f66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f672:	f383 8811 	msr	BASEPRI, r3
 800f676:	f3bf 8f6f 	isb	sy
 800f67a:	f3bf 8f4f 	dsb	sy
 800f67e:	e7fe      	b.n	800f67e <prvDeleteTCB+0x32>
	}
 800f680:	bd10      	pop	{r4, pc}
	...

0800f684 <prvIdleTask>:
{
 800f684:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f686:	4c14      	ldr	r4, [pc, #80]	@ (800f6d8 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f688:	4f14      	ldr	r7, [pc, #80]	@ (800f6dc <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800f68a:	4d15      	ldr	r5, [pc, #84]	@ (800f6e0 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f68c:	6823      	ldr	r3, [r4, #0]
 800f68e:	b983      	cbnz	r3, 800f6b2 <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f690:	4b14      	ldr	r3, [pc, #80]	@ (800f6e4 <prvIdleTask+0x60>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	2b01      	cmp	r3, #1
 800f696:	d909      	bls.n	800f6ac <prvIdleTask+0x28>
				taskYIELD();
 800f698:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f69c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f6a0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f6a4:	f3bf 8f4f 	dsb	sy
 800f6a8:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800f6ac:	f7f1 f824 	bl	80006f8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800f6b0:	e7eb      	b.n	800f68a <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800f6b2:	f7ff f867 	bl	800e784 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f6ba:	1d30      	adds	r0, r6, #4
 800f6bc:	f7fe fff0 	bl	800e6a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f6c0:	682b      	ldr	r3, [r5, #0]
 800f6c2:	3b01      	subs	r3, #1
 800f6c4:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f6c6:	6823      	ldr	r3, [r4, #0]
 800f6c8:	3b01      	subs	r3, #1
 800f6ca:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800f6cc:	f7ff f87a 	bl	800e7c4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800f6d0:	4630      	mov	r0, r6
 800f6d2:	f7ff ffbb 	bl	800f64c <prvDeleteTCB>
 800f6d6:	e7d9      	b.n	800f68c <prvIdleTask+0x8>
 800f6d8:	24025e20 	.word	0x24025e20
 800f6dc:	24025e24 	.word	0x24025e24
 800f6e0:	24025e08 	.word	0x24025e08
 800f6e4:	24025e7c 	.word	0x24025e7c

0800f6e8 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800f6e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f6ec:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800f6ee:	4607      	mov	r7, r0
 800f6f0:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f6f2:	21a5      	movs	r1, #165	@ 0xa5
 800f6f4:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800f6f6:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f6f8:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800f6fa:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f6fe:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800f700:	f016 f806 	bl	8025710 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f704:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f706:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f708:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 800f70c:	b3b5      	cbz	r5, 800f77c <prvInitialiseNewTask.constprop.0+0x94>
 800f70e:	1e6b      	subs	r3, r5, #1
 800f710:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 800f714:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f716:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800f71a:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800f71e:	b109      	cbz	r1, 800f724 <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f720:	42ab      	cmp	r3, r5
 800f722:	d1f8      	bne.n	800f716 <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f724:	2300      	movs	r3, #0
 800f726:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f72a:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800f72c:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f730:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f732:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800f734:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f738:	bf28      	it	cs
 800f73a:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800f73c:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800f73e:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f740:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f744:	f7fe ff87 	bl	800e656 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f748:	f104 0018 	add.w	r0, r4, #24
 800f74c:	f7fe ff83 	bl	800e656 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800f750:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f754:	4642      	mov	r2, r8
 800f756:	4639      	mov	r1, r7
 800f758:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f75a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f75c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f75e:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 800f760:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f764:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f768:	f7fe ffe8 	bl	800e73c <pxPortInitialiseStack>
 800f76c:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800f76e:	f1b9 0f00 	cmp.w	r9, #0
 800f772:	d001      	beq.n	800f778 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f774:	f8c9 4000 	str.w	r4, [r9]
}
 800f778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f77c:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 800f780:	e7d3      	b.n	800f72a <prvInitialiseNewTask.constprop.0+0x42>

0800f782 <xTaskCreateStatic>:
	{
 800f782:	b570      	push	{r4, r5, r6, lr}
 800f784:	b086      	sub	sp, #24
 800f786:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800f78a:	b945      	cbnz	r5, 800f79e <xTaskCreateStatic+0x1c>
 800f78c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f790:	f383 8811 	msr	BASEPRI, r3
 800f794:	f3bf 8f6f 	isb	sy
 800f798:	f3bf 8f4f 	dsb	sy
 800f79c:	e7fe      	b.n	800f79c <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800f79e:	b944      	cbnz	r4, 800f7b2 <xTaskCreateStatic+0x30>
 800f7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7a4:	f383 8811 	msr	BASEPRI, r3
 800f7a8:	f3bf 8f6f 	isb	sy
 800f7ac:	f3bf 8f4f 	dsb	sy
 800f7b0:	e7fe      	b.n	800f7b0 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800f7b2:	2660      	movs	r6, #96	@ 0x60
 800f7b4:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f7b6:	9e05      	ldr	r6, [sp, #20]
 800f7b8:	2e60      	cmp	r6, #96	@ 0x60
 800f7ba:	d008      	beq.n	800f7ce <xTaskCreateStatic+0x4c>
 800f7bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7c0:	f383 8811 	msr	BASEPRI, r3
 800f7c4:	f3bf 8f6f 	isb	sy
 800f7c8:	f3bf 8f4f 	dsb	sy
 800f7cc:	e7fe      	b.n	800f7cc <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f7ce:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f7d0:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f7d2:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f7d4:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f7d8:	ad04      	add	r5, sp, #16
 800f7da:	9402      	str	r4, [sp, #8]
 800f7dc:	9501      	str	r5, [sp, #4]
 800f7de:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800f7e0:	9500      	str	r5, [sp, #0]
 800f7e2:	f7ff ff81 	bl	800f6e8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f7e6:	4620      	mov	r0, r4
 800f7e8:	f7ff fe68 	bl	800f4bc <prvAddNewTaskToReadyList>
	}
 800f7ec:	9804      	ldr	r0, [sp, #16]
 800f7ee:	b006      	add	sp, #24
 800f7f0:	bd70      	pop	{r4, r5, r6, pc}

0800f7f2 <xTaskCreate>:
	{
 800f7f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f7f6:	4607      	mov	r7, r0
 800f7f8:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f7fa:	0090      	lsls	r0, r2, #2
	{
 800f7fc:	4688      	mov	r8, r1
 800f7fe:	4616      	mov	r6, r2
 800f800:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f802:	f7fe fe47 	bl	800e494 <pvPortMalloc>
			if( pxStack != NULL )
 800f806:	4605      	mov	r5, r0
 800f808:	b920      	cbnz	r0, 800f814 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f80a:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800f80e:	b005      	add	sp, #20
 800f810:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f814:	2060      	movs	r0, #96	@ 0x60
 800f816:	f7fe fe3d 	bl	800e494 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800f81a:	4604      	mov	r4, r0
 800f81c:	b198      	cbz	r0, 800f846 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f81e:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800f820:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f822:	4632      	mov	r2, r6
 800f824:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f826:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f82a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f82c:	9002      	str	r0, [sp, #8]
 800f82e:	4638      	mov	r0, r7
 800f830:	9301      	str	r3, [sp, #4]
 800f832:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f834:	9300      	str	r3, [sp, #0]
 800f836:	464b      	mov	r3, r9
 800f838:	f7ff ff56 	bl	800f6e8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f83c:	4620      	mov	r0, r4
 800f83e:	f7ff fe3d 	bl	800f4bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f842:	2001      	movs	r0, #1
 800f844:	e7e3      	b.n	800f80e <xTaskCreate+0x1c>
					vPortFree( pxStack );
 800f846:	4628      	mov	r0, r5
 800f848:	f7fe febc 	bl	800e5c4 <vPortFree>
		if( pxNewTCB != NULL )
 800f84c:	e7dd      	b.n	800f80a <xTaskCreate+0x18>
	...

0800f850 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800f850:	4a02      	ldr	r2, [pc, #8]	@ (800f85c <vTaskSuspendAll+0xc>)
 800f852:	6813      	ldr	r3, [r2, #0]
 800f854:	3301      	adds	r3, #1
 800f856:	6013      	str	r3, [r2, #0]
}
 800f858:	4770      	bx	lr
 800f85a:	bf00      	nop
 800f85c:	24025de4 	.word	0x24025de4

0800f860 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800f860:	4b01      	ldr	r3, [pc, #4]	@ (800f868 <xTaskGetTickCount+0x8>)
 800f862:	6818      	ldr	r0, [r3, #0]
}
 800f864:	4770      	bx	lr
 800f866:	bf00      	nop
 800f868:	24025e04 	.word	0x24025e04

0800f86c <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f86c:	4b3f      	ldr	r3, [pc, #252]	@ (800f96c <xTaskIncrementTick+0x100>)
 800f86e:	681b      	ldr	r3, [r3, #0]
{
 800f870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f874:	2b00      	cmp	r3, #0
 800f876:	d172      	bne.n	800f95e <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f878:	4b3d      	ldr	r3, [pc, #244]	@ (800f970 <xTaskIncrementTick+0x104>)
 800f87a:	681c      	ldr	r4, [r3, #0]
 800f87c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800f87e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f880:	b9bc      	cbnz	r4, 800f8b2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800f882:	4b3c      	ldr	r3, [pc, #240]	@ (800f974 <xTaskIncrementTick+0x108>)
 800f884:	681a      	ldr	r2, [r3, #0]
 800f886:	6812      	ldr	r2, [r2, #0]
 800f888:	b142      	cbz	r2, 800f89c <xTaskIncrementTick+0x30>
 800f88a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f88e:	f383 8811 	msr	BASEPRI, r3
 800f892:	f3bf 8f6f 	isb	sy
 800f896:	f3bf 8f4f 	dsb	sy
 800f89a:	e7fe      	b.n	800f89a <xTaskIncrementTick+0x2e>
 800f89c:	4a36      	ldr	r2, [pc, #216]	@ (800f978 <xTaskIncrementTick+0x10c>)
 800f89e:	6819      	ldr	r1, [r3, #0]
 800f8a0:	6810      	ldr	r0, [r2, #0]
 800f8a2:	6018      	str	r0, [r3, #0]
 800f8a4:	6011      	str	r1, [r2, #0]
 800f8a6:	4a35      	ldr	r2, [pc, #212]	@ (800f97c <xTaskIncrementTick+0x110>)
 800f8a8:	6813      	ldr	r3, [r2, #0]
 800f8aa:	3301      	adds	r3, #1
 800f8ac:	6013      	str	r3, [r2, #0]
 800f8ae:	f7ff febb 	bl	800f628 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f8b2:	4d33      	ldr	r5, [pc, #204]	@ (800f980 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800f8b4:	f04f 0b00 	mov.w	fp, #0
 800f8b8:	4e32      	ldr	r6, [pc, #200]	@ (800f984 <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f8ba:	682b      	ldr	r3, [r5, #0]
 800f8bc:	4f32      	ldr	r7, [pc, #200]	@ (800f988 <xTaskIncrementTick+0x11c>)
 800f8be:	429c      	cmp	r4, r3
 800f8c0:	d212      	bcs.n	800f8e8 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f8c2:	683a      	ldr	r2, [r7, #0]
 800f8c4:	2114      	movs	r1, #20
 800f8c6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800f8c8:	434a      	muls	r2, r1
 800f8ca:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 800f8cc:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 800f8ce:	4a2f      	ldr	r2, [pc, #188]	@ (800f98c <xTaskIncrementTick+0x120>)
 800f8d0:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 800f8d2:	bf28      	it	cs
 800f8d4:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 800f8d8:	2a00      	cmp	r2, #0
 800f8da:	bf18      	it	ne
 800f8dc:	f04f 0b01 	movne.w	fp, #1
}
 800f8e0:	4658      	mov	r0, fp
 800f8e2:	b003      	add	sp, #12
 800f8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f8e8:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 800f974 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800f8ec:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 800f994 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f8f0:	f8d9 2000 	ldr.w	r2, [r9]
 800f8f4:	6812      	ldr	r2, [r2, #0]
 800f8f6:	b91a      	cbnz	r2, 800f900 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f8f8:	f04f 32ff 	mov.w	r2, #4294967295
 800f8fc:	602a      	str	r2, [r5, #0]
					break;
 800f8fe:	e7e0      	b.n	800f8c2 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f900:	f8d9 2000 	ldr.w	r2, [r9]
 800f904:	68d2      	ldr	r2, [r2, #12]
 800f906:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f90a:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 800f90e:	428c      	cmp	r4, r1
 800f910:	d201      	bcs.n	800f916 <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 800f912:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f914:	e7d5      	b.n	800f8c2 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f916:	f108 0304 	add.w	r3, r8, #4
 800f91a:	4618      	mov	r0, r3
 800f91c:	9301      	str	r3, [sp, #4]
 800f91e:	f7fe febf 	bl	800e6a0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f922:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 800f926:	b119      	cbz	r1, 800f930 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f928:	f108 0018 	add.w	r0, r8, #24
 800f92c:	f7fe feb8 	bl	800e6a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f930:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800f934:	f8da 1000 	ldr.w	r1, [sl]
 800f938:	4288      	cmp	r0, r1
 800f93a:	d901      	bls.n	800f940 <xTaskIncrementTick+0xd4>
 800f93c:	f8ca 0000 	str.w	r0, [sl]
 800f940:	2314      	movs	r3, #20
 800f942:	9901      	ldr	r1, [sp, #4]
 800f944:	fb03 6000 	mla	r0, r3, r0, r6
 800f948:	f7fe fe88 	bl	800e65c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f94c:	6838      	ldr	r0, [r7, #0]
 800f94e:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800f952:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 800f954:	4291      	cmp	r1, r2
 800f956:	bf28      	it	cs
 800f958:	f04f 0b01 	movcs.w	fp, #1
 800f95c:	e7c8      	b.n	800f8f0 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 800f95e:	4a0c      	ldr	r2, [pc, #48]	@ (800f990 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 800f960:	f04f 0b00 	mov.w	fp, #0
		++xPendedTicks;
 800f964:	6813      	ldr	r3, [r2, #0]
 800f966:	3301      	adds	r3, #1
 800f968:	6013      	str	r3, [r2, #0]
 800f96a:	e7b9      	b.n	800f8e0 <xTaskIncrementTick+0x74>
 800f96c:	24025de4 	.word	0x24025de4
 800f970:	24025e04 	.word	0x24025e04
 800f974:	24025e50 	.word	0x24025e50
 800f978:	24025e4c 	.word	0x24025e4c
 800f97c:	24025df0 	.word	0x24025df0
 800f980:	24025de8 	.word	0x24025de8
 800f984:	24025e7c 	.word	0x24025e7c
 800f988:	240262dc 	.word	0x240262dc
 800f98c:	24025df4 	.word	0x24025df4
 800f990:	24025df8 	.word	0x24025df8
 800f994:	24025e00 	.word	0x24025e00

0800f998 <xTaskResumeAll>:
{
 800f998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 800f99c:	4c30      	ldr	r4, [pc, #192]	@ (800fa60 <xTaskResumeAll+0xc8>)
 800f99e:	6823      	ldr	r3, [r4, #0]
 800f9a0:	b943      	cbnz	r3, 800f9b4 <xTaskResumeAll+0x1c>
 800f9a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9a6:	f383 8811 	msr	BASEPRI, r3
 800f9aa:	f3bf 8f6f 	isb	sy
 800f9ae:	f3bf 8f4f 	dsb	sy
 800f9b2:	e7fe      	b.n	800f9b2 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800f9b4:	f7fe fee6 	bl	800e784 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800f9b8:	6823      	ldr	r3, [r4, #0]
 800f9ba:	3b01      	subs	r3, #1
 800f9bc:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f9be:	6824      	ldr	r4, [r4, #0]
 800f9c0:	b12c      	cbz	r4, 800f9ce <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800f9c2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800f9c4:	f7fe fefe 	bl	800e7c4 <vPortExitCritical>
}
 800f9c8:	4620      	mov	r0, r4
 800f9ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f9ce:	4b25      	ldr	r3, [pc, #148]	@ (800fa64 <xTaskResumeAll+0xcc>)
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d0f5      	beq.n	800f9c2 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f9d6:	4d24      	ldr	r5, [pc, #144]	@ (800fa68 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800f9d8:	4e24      	ldr	r6, [pc, #144]	@ (800fa6c <xTaskResumeAll+0xd4>)
 800f9da:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 800fa7c <xTaskResumeAll+0xe4>
 800f9de:	e01d      	b.n	800fa1c <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9e0:	68eb      	ldr	r3, [r5, #12]
 800f9e2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f9e4:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f9e6:	f104 0018 	add.w	r0, r4, #24
 800f9ea:	f7fe fe59 	bl	800e6a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f9ee:	4638      	mov	r0, r7
 800f9f0:	f7fe fe56 	bl	800e6a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f9f4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800f9f6:	6832      	ldr	r2, [r6, #0]
 800f9f8:	4293      	cmp	r3, r2
 800f9fa:	d900      	bls.n	800f9fe <xTaskResumeAll+0x66>
 800f9fc:	6033      	str	r3, [r6, #0]
 800f9fe:	2014      	movs	r0, #20
 800fa00:	4639      	mov	r1, r7
 800fa02:	fb00 8003 	mla	r0, r0, r3, r8
 800fa06:	f7fe fe29 	bl	800e65c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fa0a:	4b19      	ldr	r3, [pc, #100]	@ (800fa70 <xTaskResumeAll+0xd8>)
 800fa0c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa12:	429a      	cmp	r2, r3
 800fa14:	d302      	bcc.n	800fa1c <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 800fa16:	4b17      	ldr	r3, [pc, #92]	@ (800fa74 <xTaskResumeAll+0xdc>)
 800fa18:	2201      	movs	r2, #1
 800fa1a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fa1c:	682b      	ldr	r3, [r5, #0]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d1de      	bne.n	800f9e0 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800fa22:	b10c      	cbz	r4, 800fa28 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 800fa24:	f7ff fe00 	bl	800f628 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fa28:	4d13      	ldr	r5, [pc, #76]	@ (800fa78 <xTaskResumeAll+0xe0>)
 800fa2a:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800fa2c:	b144      	cbz	r4, 800fa40 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800fa2e:	4e11      	ldr	r6, [pc, #68]	@ (800fa74 <xTaskResumeAll+0xdc>)
 800fa30:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800fa32:	f7ff ff1b 	bl	800f86c <xTaskIncrementTick>
 800fa36:	b100      	cbz	r0, 800fa3a <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 800fa38:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fa3a:	3c01      	subs	r4, #1
 800fa3c:	d1f9      	bne.n	800fa32 <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 800fa3e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800fa40:	4b0c      	ldr	r3, [pc, #48]	@ (800fa74 <xTaskResumeAll+0xdc>)
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d0bc      	beq.n	800f9c2 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800fa48:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800fa4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa50:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800fa54:	f3bf 8f4f 	dsb	sy
 800fa58:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800fa5c:	2401      	movs	r4, #1
 800fa5e:	e7b1      	b.n	800f9c4 <xTaskResumeAll+0x2c>
 800fa60:	24025de4 	.word	0x24025de4
 800fa64:	24025e08 	.word	0x24025e08
 800fa68:	24025e38 	.word	0x24025e38
 800fa6c:	24025e00 	.word	0x24025e00
 800fa70:	240262dc 	.word	0x240262dc
 800fa74:	24025df4 	.word	0x24025df4
 800fa78:	24025df8 	.word	0x24025df8
 800fa7c:	24025e7c 	.word	0x24025e7c

0800fa80 <vTaskSetApplicationTaskTag>:
	{
 800fa80:	b538      	push	{r3, r4, r5, lr}
 800fa82:	460d      	mov	r5, r1
		if( xTask == NULL )
 800fa84:	4604      	mov	r4, r0
 800fa86:	b908      	cbnz	r0, 800fa8c <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800fa88:	4b04      	ldr	r3, [pc, #16]	@ (800fa9c <vTaskSetApplicationTaskTag+0x1c>)
 800fa8a:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800fa8c:	f7fe fe7a 	bl	800e784 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800fa90:	6565      	str	r5, [r4, #84]	@ 0x54
	}
 800fa92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800fa96:	f7fe be95 	b.w	800e7c4 <vPortExitCritical>
 800fa9a:	bf00      	nop
 800fa9c:	240262dc 	.word	0x240262dc

0800faa0 <xTaskCallApplicationTaskHook>:
	{
 800faa0:	4603      	mov	r3, r0
 800faa2:	4608      	mov	r0, r1
		if( xTask == NULL )
 800faa4:	b90b      	cbnz	r3, 800faaa <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800faa6:	4b03      	ldr	r3, [pc, #12]	@ (800fab4 <xTaskCallApplicationTaskHook+0x14>)
 800faa8:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800faaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800faac:	b103      	cbz	r3, 800fab0 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800faae:	4718      	bx	r3
	}
 800fab0:	4618      	mov	r0, r3
 800fab2:	4770      	bx	lr
 800fab4:	240262dc 	.word	0x240262dc

0800fab8 <vTaskStartScheduler>:
{
 800fab8:	b510      	push	{r4, lr}
 800faba:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fabc:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fabe:	aa07      	add	r2, sp, #28
 800fac0:	a906      	add	r1, sp, #24
 800fac2:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fac4:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fac8:	f7fe fca6 	bl	800e418 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800facc:	9b05      	ldr	r3, [sp, #20]
 800face:	9a07      	ldr	r2, [sp, #28]
 800fad0:	9302      	str	r3, [sp, #8]
 800fad2:	9b06      	ldr	r3, [sp, #24]
 800fad4:	4919      	ldr	r1, [pc, #100]	@ (800fb3c <vTaskStartScheduler+0x84>)
 800fad6:	481a      	ldr	r0, [pc, #104]	@ (800fb40 <vTaskStartScheduler+0x88>)
 800fad8:	e9cd 4300 	strd	r4, r3, [sp]
 800fadc:	4623      	mov	r3, r4
 800fade:	f7ff fe50 	bl	800f782 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800fae2:	b340      	cbz	r0, 800fb36 <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 800fae4:	f000 fa84 	bl	800fff0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800fae8:	2801      	cmp	r0, #1
 800faea:	d119      	bne.n	800fb20 <vTaskStartScheduler+0x68>
 800faec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800faf0:	f383 8811 	msr	BASEPRI, r3
 800faf4:	f3bf 8f6f 	isb	sy
 800faf8:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800fafc:	f04f 32ff 	mov.w	r2, #4294967295
 800fb00:	4b10      	ldr	r3, [pc, #64]	@ (800fb44 <vTaskStartScheduler+0x8c>)
		traceTASK_SWITCHED_IN();
 800fb02:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 800fb04:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fb06:	4b10      	ldr	r3, [pc, #64]	@ (800fb48 <vTaskStartScheduler+0x90>)
 800fb08:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fb0a:	4b10      	ldr	r3, [pc, #64]	@ (800fb4c <vTaskStartScheduler+0x94>)
 800fb0c:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800fb0e:	4b10      	ldr	r3, [pc, #64]	@ (800fb50 <vTaskStartScheduler+0x98>)
 800fb10:	6818      	ldr	r0, [r3, #0]
 800fb12:	f7ff ffc5 	bl	800faa0 <xTaskCallApplicationTaskHook>
}
 800fb16:	b008      	add	sp, #32
 800fb18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800fb1c:	f7fe bec2 	b.w	800e8a4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fb20:	3001      	adds	r0, #1
 800fb22:	d108      	bne.n	800fb36 <vTaskStartScheduler+0x7e>
 800fb24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb28:	f383 8811 	msr	BASEPRI, r3
 800fb2c:	f3bf 8f6f 	isb	sy
 800fb30:	f3bf 8f4f 	dsb	sy
 800fb34:	e7fe      	b.n	800fb34 <vTaskStartScheduler+0x7c>
}
 800fb36:	b008      	add	sp, #32
 800fb38:	bd10      	pop	{r4, pc}
 800fb3a:	bf00      	nop
 800fb3c:	08028fd4 	.word	0x08028fd4
 800fb40:	0800f685 	.word	0x0800f685
 800fb44:	24025de8 	.word	0x24025de8
 800fb48:	24025dfc 	.word	0x24025dfc
 800fb4c:	24025e04 	.word	0x24025e04
 800fb50:	240262dc 	.word	0x240262dc

0800fb54 <vTaskSwitchContext>:
{
 800fb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fb56:	4b1c      	ldr	r3, [pc, #112]	@ (800fbc8 <vTaskSwitchContext+0x74>)
 800fb58:	681a      	ldr	r2, [r3, #0]
 800fb5a:	4b1c      	ldr	r3, [pc, #112]	@ (800fbcc <vTaskSwitchContext+0x78>)
 800fb5c:	b112      	cbz	r2, 800fb64 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800fb5e:	2201      	movs	r2, #1
 800fb60:	601a      	str	r2, [r3, #0]
}
 800fb62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800fb64:	4c1a      	ldr	r4, [pc, #104]	@ (800fbd0 <vTaskSwitchContext+0x7c>)
 800fb66:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb68:	4e1a      	ldr	r6, [pc, #104]	@ (800fbd4 <vTaskSwitchContext+0x80>)
 800fb6a:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800fb6c:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800fb6e:	6820      	ldr	r0, [r4, #0]
 800fb70:	f7ff ff96 	bl	800faa0 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb74:	6832      	ldr	r2, [r6, #0]
 800fb76:	4918      	ldr	r1, [pc, #96]	@ (800fbd8 <vTaskSwitchContext+0x84>)
 800fb78:	fb07 f302 	mul.w	r3, r7, r2
 800fb7c:	58cd      	ldr	r5, [r1, r3]
 800fb7e:	18c8      	adds	r0, r1, r3
 800fb80:	b1ad      	cbz	r5, 800fbae <vTaskSwitchContext+0x5a>
 800fb82:	6845      	ldr	r5, [r0, #4]
 800fb84:	3308      	adds	r3, #8
 800fb86:	686d      	ldr	r5, [r5, #4]
 800fb88:	440b      	add	r3, r1
 800fb8a:	429d      	cmp	r5, r3
 800fb8c:	6045      	str	r5, [r0, #4]
 800fb8e:	bf04      	itt	eq
 800fb90:	686b      	ldreq	r3, [r5, #4]
 800fb92:	6043      	streq	r3, [r0, #4]
 800fb94:	2314      	movs	r3, #20
 800fb96:	fb03 1102 	mla	r1, r3, r2, r1
 800fb9a:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800fb9c:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb9e:	68db      	ldr	r3, [r3, #12]
 800fba0:	6023      	str	r3, [r4, #0]
 800fba2:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800fba4:	6820      	ldr	r0, [r4, #0]
}
 800fba6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800fbaa:	f7ff bf79 	b.w	800faa0 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fbae:	b942      	cbnz	r2, 800fbc2 <vTaskSwitchContext+0x6e>
 800fbb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbb4:	f383 8811 	msr	BASEPRI, r3
 800fbb8:	f3bf 8f6f 	isb	sy
 800fbbc:	f3bf 8f4f 	dsb	sy
 800fbc0:	e7fe      	b.n	800fbc0 <vTaskSwitchContext+0x6c>
 800fbc2:	3a01      	subs	r2, #1
 800fbc4:	e7d8      	b.n	800fb78 <vTaskSwitchContext+0x24>
 800fbc6:	bf00      	nop
 800fbc8:	24025de4 	.word	0x24025de4
 800fbcc:	24025df4 	.word	0x24025df4
 800fbd0:	240262dc 	.word	0x240262dc
 800fbd4:	24025e00 	.word	0x24025e00
 800fbd8:	24025e7c 	.word	0x24025e7c

0800fbdc <vTaskPlaceOnEventList>:
{
 800fbdc:	b510      	push	{r4, lr}
 800fbde:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800fbe0:	b940      	cbnz	r0, 800fbf4 <vTaskPlaceOnEventList+0x18>
 800fbe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbe6:	f383 8811 	msr	BASEPRI, r3
 800fbea:	f3bf 8f6f 	isb	sy
 800fbee:	f3bf 8f4f 	dsb	sy
 800fbf2:	e7fe      	b.n	800fbf2 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fbf4:	4b05      	ldr	r3, [pc, #20]	@ (800fc0c <vTaskPlaceOnEventList+0x30>)
 800fbf6:	6819      	ldr	r1, [r3, #0]
 800fbf8:	3118      	adds	r1, #24
 800fbfa:	f7fe fd3a 	bl	800e672 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fbfe:	4620      	mov	r0, r4
 800fc00:	2101      	movs	r1, #1
}
 800fc02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fc06:	f7ff bcd7 	b.w	800f5b8 <prvAddCurrentTaskToDelayedList>
 800fc0a:	bf00      	nop
 800fc0c:	240262dc 	.word	0x240262dc

0800fc10 <vTaskPlaceOnEventListRestricted>:
	{
 800fc10:	b538      	push	{r3, r4, r5, lr}
 800fc12:	460d      	mov	r5, r1
 800fc14:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800fc16:	b940      	cbnz	r0, 800fc2a <vTaskPlaceOnEventListRestricted+0x1a>
 800fc18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc1c:	f383 8811 	msr	BASEPRI, r3
 800fc20:	f3bf 8f6f 	isb	sy
 800fc24:	f3bf 8f4f 	dsb	sy
 800fc28:	e7fe      	b.n	800fc28 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fc2a:	4b07      	ldr	r3, [pc, #28]	@ (800fc48 <vTaskPlaceOnEventListRestricted+0x38>)
 800fc2c:	6819      	ldr	r1, [r3, #0]
 800fc2e:	3118      	adds	r1, #24
 800fc30:	f7fe fd14 	bl	800e65c <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800fc34:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fc36:	4621      	mov	r1, r4
 800fc38:	bf0c      	ite	eq
 800fc3a:	4628      	moveq	r0, r5
 800fc3c:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800fc40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fc44:	f7ff bcb8 	b.w	800f5b8 <prvAddCurrentTaskToDelayedList>
 800fc48:	240262dc 	.word	0x240262dc

0800fc4c <xTaskRemoveFromEventList>:
{
 800fc4c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc4e:	68c3      	ldr	r3, [r0, #12]
 800fc50:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800fc52:	b944      	cbnz	r4, 800fc66 <xTaskRemoveFromEventList+0x1a>
 800fc54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc58:	f383 8811 	msr	BASEPRI, r3
 800fc5c:	f3bf 8f6f 	isb	sy
 800fc60:	f3bf 8f4f 	dsb	sy
 800fc64:	e7fe      	b.n	800fc64 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fc66:	f104 0518 	add.w	r5, r4, #24
 800fc6a:	4628      	mov	r0, r5
 800fc6c:	f7fe fd18 	bl	800e6a0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc70:	4b11      	ldr	r3, [pc, #68]	@ (800fcb8 <xTaskRemoveFromEventList+0x6c>)
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	b9d3      	cbnz	r3, 800fcac <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fc76:	1d25      	adds	r5, r4, #4
 800fc78:	4628      	mov	r0, r5
 800fc7a:	f7fe fd11 	bl	800e6a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fc7e:	4a0f      	ldr	r2, [pc, #60]	@ (800fcbc <xTaskRemoveFromEventList+0x70>)
 800fc80:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800fc82:	6811      	ldr	r1, [r2, #0]
 800fc84:	428b      	cmp	r3, r1
 800fc86:	d900      	bls.n	800fc8a <xTaskRemoveFromEventList+0x3e>
 800fc88:	6013      	str	r3, [r2, #0]
 800fc8a:	2014      	movs	r0, #20
 800fc8c:	4a0c      	ldr	r2, [pc, #48]	@ (800fcc0 <xTaskRemoveFromEventList+0x74>)
 800fc8e:	4629      	mov	r1, r5
 800fc90:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fc94:	f7fe fce2 	bl	800e65c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fc98:	4b0a      	ldr	r3, [pc, #40]	@ (800fcc4 <xTaskRemoveFromEventList+0x78>)
 800fc9a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fca0:	429a      	cmp	r2, r3
 800fca2:	d906      	bls.n	800fcb2 <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 800fca4:	2001      	movs	r0, #1
 800fca6:	4b08      	ldr	r3, [pc, #32]	@ (800fcc8 <xTaskRemoveFromEventList+0x7c>)
 800fca8:	6018      	str	r0, [r3, #0]
}
 800fcaa:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fcac:	4629      	mov	r1, r5
 800fcae:	4807      	ldr	r0, [pc, #28]	@ (800fccc <xTaskRemoveFromEventList+0x80>)
 800fcb0:	e7f0      	b.n	800fc94 <xTaskRemoveFromEventList+0x48>
		xReturn = pdFALSE;
 800fcb2:	2000      	movs	r0, #0
	return xReturn;
 800fcb4:	e7f9      	b.n	800fcaa <xTaskRemoveFromEventList+0x5e>
 800fcb6:	bf00      	nop
 800fcb8:	24025de4 	.word	0x24025de4
 800fcbc:	24025e00 	.word	0x24025e00
 800fcc0:	24025e7c 	.word	0x24025e7c
 800fcc4:	240262dc 	.word	0x240262dc
 800fcc8:	24025df4 	.word	0x24025df4
 800fccc:	24025e38 	.word	0x24025e38

0800fcd0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fcd0:	4b03      	ldr	r3, [pc, #12]	@ (800fce0 <vTaskInternalSetTimeOutState+0x10>)
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fcd6:	4b03      	ldr	r3, [pc, #12]	@ (800fce4 <vTaskInternalSetTimeOutState+0x14>)
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	6043      	str	r3, [r0, #4]
}
 800fcdc:	4770      	bx	lr
 800fcde:	bf00      	nop
 800fce0:	24025df0 	.word	0x24025df0
 800fce4:	24025e04 	.word	0x24025e04

0800fce8 <xTaskCheckForTimeOut>:
{
 800fce8:	b570      	push	{r4, r5, r6, lr}
 800fcea:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800fcec:	4605      	mov	r5, r0
 800fcee:	b940      	cbnz	r0, 800fd02 <xTaskCheckForTimeOut+0x1a>
 800fcf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcf4:	f383 8811 	msr	BASEPRI, r3
 800fcf8:	f3bf 8f6f 	isb	sy
 800fcfc:	f3bf 8f4f 	dsb	sy
 800fd00:	e7fe      	b.n	800fd00 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800fd02:	b941      	cbnz	r1, 800fd16 <xTaskCheckForTimeOut+0x2e>
 800fd04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd08:	f383 8811 	msr	BASEPRI, r3
 800fd0c:	f3bf 8f6f 	isb	sy
 800fd10:	f3bf 8f4f 	dsb	sy
 800fd14:	e7fe      	b.n	800fd14 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800fd16:	f7fe fd35 	bl	800e784 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800fd1a:	4b0f      	ldr	r3, [pc, #60]	@ (800fd58 <xTaskCheckForTimeOut+0x70>)
 800fd1c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800fd1e:	6823      	ldr	r3, [r4, #0]
 800fd20:	1c5a      	adds	r2, r3, #1
 800fd22:	d010      	beq.n	800fd46 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fd24:	480d      	ldr	r0, [pc, #52]	@ (800fd5c <xTaskCheckForTimeOut+0x74>)
 800fd26:	682e      	ldr	r6, [r5, #0]
 800fd28:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fd2a:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fd2c:	4286      	cmp	r6, r0
 800fd2e:	d001      	beq.n	800fd34 <xTaskCheckForTimeOut+0x4c>
 800fd30:	428a      	cmp	r2, r1
 800fd32:	d90f      	bls.n	800fd54 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fd34:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fd36:	4283      	cmp	r3, r0
 800fd38:	d90a      	bls.n	800fd50 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800fd3a:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fd3c:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800fd3e:	4413      	add	r3, r2
 800fd40:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fd42:	f7ff ffc5 	bl	800fcd0 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800fd46:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800fd48:	f7fe fd3c 	bl	800e7c4 <vPortExitCritical>
}
 800fd4c:	4620      	mov	r0, r4
 800fd4e:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800fd50:	2300      	movs	r3, #0
 800fd52:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800fd54:	2401      	movs	r4, #1
 800fd56:	e7f7      	b.n	800fd48 <xTaskCheckForTimeOut+0x60>
 800fd58:	24025e04 	.word	0x24025e04
 800fd5c:	24025df0 	.word	0x24025df0

0800fd60 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800fd60:	4b01      	ldr	r3, [pc, #4]	@ (800fd68 <vTaskMissedYield+0x8>)
 800fd62:	2201      	movs	r2, #1
 800fd64:	601a      	str	r2, [r3, #0]
}
 800fd66:	4770      	bx	lr
 800fd68:	24025df4 	.word	0x24025df4

0800fd6c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800fd6c:	4b01      	ldr	r3, [pc, #4]	@ (800fd74 <xTaskGetCurrentTaskHandle+0x8>)
 800fd6e:	6818      	ldr	r0, [r3, #0]
	}
 800fd70:	4770      	bx	lr
 800fd72:	bf00      	nop
 800fd74:	240262dc 	.word	0x240262dc

0800fd78 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800fd78:	4b05      	ldr	r3, [pc, #20]	@ (800fd90 <xTaskGetSchedulerState+0x18>)
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	b133      	cbz	r3, 800fd8c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fd7e:	4b05      	ldr	r3, [pc, #20]	@ (800fd94 <xTaskGetSchedulerState+0x1c>)
 800fd80:	6818      	ldr	r0, [r3, #0]
 800fd82:	fab0 f080 	clz	r0, r0
 800fd86:	0940      	lsrs	r0, r0, #5
 800fd88:	0040      	lsls	r0, r0, #1
 800fd8a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fd8c:	2001      	movs	r0, #1
	}
 800fd8e:	4770      	bx	lr
 800fd90:	24025dfc 	.word	0x24025dfc
 800fd94:	24025de4 	.word	0x24025de4

0800fd98 <xTaskPriorityInherit>:
	{
 800fd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800fd9a:	4604      	mov	r4, r0
 800fd9c:	b338      	cbz	r0, 800fdee <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fd9e:	4d1a      	ldr	r5, [pc, #104]	@ (800fe08 <xTaskPriorityInherit+0x70>)
 800fda0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800fda2:	682a      	ldr	r2, [r5, #0]
 800fda4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800fda6:	4293      	cmp	r3, r2
 800fda8:	d226      	bcs.n	800fdf8 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fdaa:	6982      	ldr	r2, [r0, #24]
 800fdac:	2a00      	cmp	r2, #0
 800fdae:	db04      	blt.n	800fdba <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fdb0:	682a      	ldr	r2, [r5, #0]
 800fdb2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800fdb4:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800fdb8:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800fdba:	2214      	movs	r2, #20
 800fdbc:	4e13      	ldr	r6, [pc, #76]	@ (800fe0c <xTaskPriorityInherit+0x74>)
 800fdbe:	fb02 6303 	mla	r3, r2, r3, r6
 800fdc2:	6962      	ldr	r2, [r4, #20]
 800fdc4:	429a      	cmp	r2, r3
 800fdc6:	d113      	bne.n	800fdf0 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fdc8:	1d27      	adds	r7, r4, #4
 800fdca:	4638      	mov	r0, r7
 800fdcc:	f7fe fc68 	bl	800e6a0 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fdd0:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fdd2:	4a0f      	ldr	r2, [pc, #60]	@ (800fe10 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fdd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fdd6:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fdd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fdda:	428b      	cmp	r3, r1
 800fddc:	d900      	bls.n	800fde0 <xTaskPriorityInherit+0x48>
 800fdde:	6013      	str	r3, [r2, #0]
 800fde0:	2014      	movs	r0, #20
 800fde2:	4639      	mov	r1, r7
 800fde4:	fb00 6003 	mla	r0, r0, r3, r6
 800fde8:	f7fe fc38 	bl	800e65c <vListInsertEnd>
				xReturn = pdTRUE;
 800fdec:	2001      	movs	r0, #1
	}
 800fdee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fdf0:	682b      	ldr	r3, [r5, #0]
 800fdf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdf4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fdf6:	e7f9      	b.n	800fdec <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fdf8:	682b      	ldr	r3, [r5, #0]
 800fdfa:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 800fdfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdfe:	4298      	cmp	r0, r3
 800fe00:	bf2c      	ite	cs
 800fe02:	2000      	movcs	r0, #0
 800fe04:	2001      	movcc	r0, #1
 800fe06:	e7f2      	b.n	800fdee <xTaskPriorityInherit+0x56>
 800fe08:	240262dc 	.word	0x240262dc
 800fe0c:	24025e7c 	.word	0x24025e7c
 800fe10:	24025e00 	.word	0x24025e00

0800fe14 <xTaskPriorityDisinherit>:
	{
 800fe14:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800fe16:	b908      	cbnz	r0, 800fe1c <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 800fe18:	2000      	movs	r0, #0
	}
 800fe1a:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800fe1c:	4b1b      	ldr	r3, [pc, #108]	@ (800fe8c <xTaskPriorityDisinherit+0x78>)
 800fe1e:	681c      	ldr	r4, [r3, #0]
 800fe20:	4284      	cmp	r4, r0
 800fe22:	d008      	beq.n	800fe36 <xTaskPriorityDisinherit+0x22>
 800fe24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe28:	f383 8811 	msr	BASEPRI, r3
 800fe2c:	f3bf 8f6f 	isb	sy
 800fe30:	f3bf 8f4f 	dsb	sy
 800fe34:	e7fe      	b.n	800fe34 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800fe36:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800fe38:	b943      	cbnz	r3, 800fe4c <xTaskPriorityDisinherit+0x38>
 800fe3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe3e:	f383 8811 	msr	BASEPRI, r3
 800fe42:	f3bf 8f6f 	isb	sy
 800fe46:	f3bf 8f4f 	dsb	sy
 800fe4a:	e7fe      	b.n	800fe4a <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fe4c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 800fe4e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fe50:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 800fe52:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fe54:	4291      	cmp	r1, r2
 800fe56:	d0df      	beq.n	800fe18 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d1dd      	bne.n	800fe18 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fe5c:	1d25      	adds	r5, r4, #4
 800fe5e:	4628      	mov	r0, r5
 800fe60:	f7fe fc1e 	bl	800e6a0 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fe64:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe66:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fe6a:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe6c:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800fe6e:	4a08      	ldr	r2, [pc, #32]	@ (800fe90 <xTaskPriorityDisinherit+0x7c>)
 800fe70:	6811      	ldr	r1, [r2, #0]
 800fe72:	428b      	cmp	r3, r1
 800fe74:	d900      	bls.n	800fe78 <xTaskPriorityDisinherit+0x64>
 800fe76:	6013      	str	r3, [r2, #0]
 800fe78:	4a06      	ldr	r2, [pc, #24]	@ (800fe94 <xTaskPriorityDisinherit+0x80>)
 800fe7a:	2014      	movs	r0, #20
 800fe7c:	4629      	mov	r1, r5
 800fe7e:	fb00 2003 	mla	r0, r0, r3, r2
 800fe82:	f7fe fbeb 	bl	800e65c <vListInsertEnd>
					xReturn = pdTRUE;
 800fe86:	2001      	movs	r0, #1
		return xReturn;
 800fe88:	e7c7      	b.n	800fe1a <xTaskPriorityDisinherit+0x6>
 800fe8a:	bf00      	nop
 800fe8c:	240262dc 	.word	0x240262dc
 800fe90:	24025e00 	.word	0x24025e00
 800fe94:	24025e7c 	.word	0x24025e7c

0800fe98 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800fe98:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800fe9a:	4604      	mov	r4, r0
 800fe9c:	2800      	cmp	r0, #0
 800fe9e:	d042      	beq.n	800ff26 <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 800fea0:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800fea2:	b942      	cbnz	r2, 800feb6 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800fea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fea8:	f383 8811 	msr	BASEPRI, r3
 800feac:	f3bf 8f6f 	isb	sy
 800feb0:	f3bf 8f4f 	dsb	sy
 800feb4:	e7fe      	b.n	800feb4 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800feb6:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800feb8:	4299      	cmp	r1, r3
 800feba:	bf38      	it	cc
 800febc:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800febe:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800fec0:	428b      	cmp	r3, r1
 800fec2:	d030      	beq.n	800ff26 <vTaskPriorityDisinheritAfterTimeout+0x8e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800fec4:	2a01      	cmp	r2, #1
 800fec6:	d12e      	bne.n	800ff26 <vTaskPriorityDisinheritAfterTimeout+0x8e>
					configASSERT( pxTCB != pxCurrentTCB );
 800fec8:	4a17      	ldr	r2, [pc, #92]	@ (800ff28 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 800feca:	6812      	ldr	r2, [r2, #0]
 800fecc:	4282      	cmp	r2, r0
 800fece:	d108      	bne.n	800fee2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800fed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fed4:	f383 8811 	msr	BASEPRI, r3
 800fed8:	f3bf 8f6f 	isb	sy
 800fedc:	f3bf 8f4f 	dsb	sy
 800fee0:	e7fe      	b.n	800fee0 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fee2:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fee4:	4d11      	ldr	r5, [pc, #68]	@ (800ff2c <vTaskPriorityDisinheritAfterTimeout+0x94>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fee6:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fee8:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800feec:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800feee:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fef2:	bfa8      	it	ge
 800fef4:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fef8:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fefa:	bfa8      	it	ge
 800fefc:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fefe:	429a      	cmp	r2, r3
 800ff00:	d111      	bne.n	800ff26 <vTaskPriorityDisinheritAfterTimeout+0x8e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff02:	1d06      	adds	r6, r0, #4
 800ff04:	4630      	mov	r0, r6
 800ff06:	f7fe fbcb 	bl	800e6a0 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800ff0a:	4a09      	ldr	r2, [pc, #36]	@ (800ff30 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800ff0c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ff0e:	6811      	ldr	r1, [r2, #0]
 800ff10:	428b      	cmp	r3, r1
 800ff12:	d900      	bls.n	800ff16 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800ff14:	6013      	str	r3, [r2, #0]
 800ff16:	2014      	movs	r0, #20
 800ff18:	4631      	mov	r1, r6
 800ff1a:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800ff1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 800ff22:	f7fe bb9b 	b.w	800e65c <vListInsertEnd>
	}
 800ff26:	bd70      	pop	{r4, r5, r6, pc}
 800ff28:	240262dc 	.word	0x240262dc
 800ff2c:	24025e7c 	.word	0x24025e7c
 800ff30:	24025e00 	.word	0x24025e00

0800ff34 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800ff34:	4b04      	ldr	r3, [pc, #16]	@ (800ff48 <pvTaskIncrementMutexHeldCount+0x14>)
 800ff36:	681a      	ldr	r2, [r3, #0]
 800ff38:	b11a      	cbz	r2, 800ff42 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800ff3a:	6819      	ldr	r1, [r3, #0]
 800ff3c:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 800ff3e:	3201      	adds	r2, #1
 800ff40:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 800ff42:	6818      	ldr	r0, [r3, #0]
	}
 800ff44:	4770      	bx	lr
 800ff46:	bf00      	nop
 800ff48:	240262dc 	.word	0x240262dc

0800ff4c <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 800ff4c:	4291      	cmp	r1, r2
{
 800ff4e:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ff50:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ff52:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800ff54:	d80a      	bhi.n	800ff6c <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff56:	1ad2      	subs	r2, r2, r3
 800ff58:	6983      	ldr	r3, [r0, #24]
 800ff5a:	429a      	cmp	r2, r3
 800ff5c:	d20d      	bcs.n	800ff7a <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ff5e:	1d01      	adds	r1, r0, #4
 800ff60:	4b07      	ldr	r3, [pc, #28]	@ (800ff80 <prvInsertTimerInActiveList+0x34>)
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ff62:	6818      	ldr	r0, [r3, #0]
 800ff64:	f7fe fb85 	bl	800e672 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800ff68:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800ff6a:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ff6c:	429a      	cmp	r2, r3
 800ff6e:	d201      	bcs.n	800ff74 <prvInsertTimerInActiveList+0x28>
 800ff70:	4299      	cmp	r1, r3
 800ff72:	d202      	bcs.n	800ff7a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ff74:	1d01      	adds	r1, r0, #4
 800ff76:	4b03      	ldr	r3, [pc, #12]	@ (800ff84 <prvInsertTimerInActiveList+0x38>)
 800ff78:	e7f3      	b.n	800ff62 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800ff7a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800ff7c:	e7f5      	b.n	800ff6a <prvInsertTimerInActiveList+0x1e>
 800ff7e:	bf00      	nop
 800ff80:	240263dc 	.word	0x240263dc
 800ff84:	240263e0 	.word	0x240263e0

0800ff88 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ff88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800ff8a:	4c11      	ldr	r4, [pc, #68]	@ (800ffd0 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800ff8c:	f7fe fbfa 	bl	800e784 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800ff90:	6825      	ldr	r5, [r4, #0]
 800ff92:	b9bd      	cbnz	r5, 800ffc4 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800ff94:	4f0f      	ldr	r7, [pc, #60]	@ (800ffd4 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800ff96:	4e10      	ldr	r6, [pc, #64]	@ (800ffd8 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800ff98:	4638      	mov	r0, r7
 800ff9a:	f7fe fb51 	bl	800e640 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ff9e:	4630      	mov	r0, r6
 800ffa0:	f7fe fb4e 	bl	800e640 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ffa4:	4b0d      	ldr	r3, [pc, #52]	@ (800ffdc <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ffa6:	4a0e      	ldr	r2, [pc, #56]	@ (800ffe0 <prvCheckForValidListAndQueue+0x58>)
 800ffa8:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800ffaa:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ffac:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800ffae:	4b0d      	ldr	r3, [pc, #52]	@ (800ffe4 <prvCheckForValidListAndQueue+0x5c>)
 800ffb0:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ffb2:	4b0d      	ldr	r3, [pc, #52]	@ (800ffe8 <prvCheckForValidListAndQueue+0x60>)
 800ffb4:	9500      	str	r5, [sp, #0]
 800ffb6:	f7fe fdef 	bl	800eb98 <xQueueGenericCreateStatic>
 800ffba:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ffbc:	b110      	cbz	r0, 800ffc4 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ffbe:	490b      	ldr	r1, [pc, #44]	@ (800ffec <prvCheckForValidListAndQueue+0x64>)
 800ffc0:	f7ff fa1a 	bl	800f3f8 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800ffc4:	b003      	add	sp, #12
 800ffc6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800ffca:	f7fe bbfb 	b.w	800e7c4 <vPortExitCritical>
 800ffce:	bf00      	nop
 800ffd0:	240263d8 	.word	0x240263d8
 800ffd4:	240263f8 	.word	0x240263f8
 800ffd8:	240263e4 	.word	0x240263e4
 800ffdc:	240263e0 	.word	0x240263e0
 800ffe0:	24026330 	.word	0x24026330
 800ffe4:	240263dc 	.word	0x240263dc
 800ffe8:	240262e0 	.word	0x240262e0
 800ffec:	08028fd9 	.word	0x08028fd9

0800fff0 <xTimerCreateTimerTask>:
{
 800fff0:	b510      	push	{r4, lr}
 800fff2:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800fff4:	f7ff ffc8 	bl	800ff88 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800fff8:	4b12      	ldr	r3, [pc, #72]	@ (8010044 <xTimerCreateTimerTask+0x54>)
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	b1b3      	cbz	r3, 801002c <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fffe:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010000:	aa07      	add	r2, sp, #28
 8010002:	a906      	add	r1, sp, #24
 8010004:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010006:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801000a:	f7fe fa11 	bl	800e430 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801000e:	9b05      	ldr	r3, [sp, #20]
 8010010:	9a07      	ldr	r2, [sp, #28]
 8010012:	9302      	str	r3, [sp, #8]
 8010014:	9b06      	ldr	r3, [sp, #24]
 8010016:	490c      	ldr	r1, [pc, #48]	@ (8010048 <xTimerCreateTimerTask+0x58>)
 8010018:	9301      	str	r3, [sp, #4]
 801001a:	2302      	movs	r3, #2
 801001c:	480b      	ldr	r0, [pc, #44]	@ (801004c <xTimerCreateTimerTask+0x5c>)
 801001e:	9300      	str	r3, [sp, #0]
 8010020:	4623      	mov	r3, r4
 8010022:	f7ff fbae 	bl	800f782 <xTaskCreateStatic>
 8010026:	4b0a      	ldr	r3, [pc, #40]	@ (8010050 <xTimerCreateTimerTask+0x60>)
 8010028:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 801002a:	b940      	cbnz	r0, 801003e <xTimerCreateTimerTask+0x4e>
 801002c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010030:	f383 8811 	msr	BASEPRI, r3
 8010034:	f3bf 8f6f 	isb	sy
 8010038:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 801003c:	e7fe      	b.n	801003c <xTimerCreateTimerTask+0x4c>
}
 801003e:	2001      	movs	r0, #1
 8010040:	b008      	add	sp, #32
 8010042:	bd10      	pop	{r4, pc}
 8010044:	240263d8 	.word	0x240263d8
 8010048:	08028fde 	.word	0x08028fde
 801004c:	0801014d 	.word	0x0801014d
 8010050:	240263d4 	.word	0x240263d4

08010054 <xTimerGenericCommand>:
{
 8010054:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010056:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8010058:	4604      	mov	r4, r0
{
 801005a:	461a      	mov	r2, r3
	configASSERT( xTimer );
 801005c:	b940      	cbnz	r0, 8010070 <xTimerGenericCommand+0x1c>
 801005e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010062:	f383 8811 	msr	BASEPRI, r3
 8010066:	f3bf 8f6f 	isb	sy
 801006a:	f3bf 8f4f 	dsb	sy
 801006e:	e7fe      	b.n	801006e <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8010070:	4d0c      	ldr	r5, [pc, #48]	@ (80100a4 <xTimerGenericCommand+0x50>)
 8010072:	6828      	ldr	r0, [r5, #0]
 8010074:	b178      	cbz	r0, 8010096 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010076:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010078:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801007a:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801007e:	dc0c      	bgt.n	801009a <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010080:	f7ff fe7a 	bl	800fd78 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010084:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010086:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010088:	4669      	mov	r1, sp
 801008a:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801008c:	bf0c      	ite	eq
 801008e:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010090:	461a      	movne	r2, r3
 8010092:	f7fe fe36 	bl	800ed02 <xQueueGenericSend>
}
 8010096:	b004      	add	sp, #16
 8010098:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801009a:	2300      	movs	r3, #0
 801009c:	4669      	mov	r1, sp
 801009e:	f7fe ff33 	bl	800ef08 <xQueueGenericSendFromISR>
 80100a2:	e7f8      	b.n	8010096 <xTimerGenericCommand+0x42>
 80100a4:	240263d8 	.word	0x240263d8

080100a8 <prvSampleTimeNow>:
{
 80100a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 80100ac:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8010148 <prvSampleTimeNow+0xa0>
{
 80100b0:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 80100b2:	f7ff fbd5 	bl	800f860 <xTaskGetTickCount>
 80100b6:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 80100b8:	f8d8 3000 	ldr.w	r3, [r8]
 80100bc:	4283      	cmp	r3, r0
 80100be:	d909      	bls.n	80100d4 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80100c0:	4f1f      	ldr	r7, [pc, #124]	@ (8010140 <prvSampleTimeNow+0x98>)
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	681a      	ldr	r2, [r3, #0]
 80100c6:	b96a      	cbnz	r2, 80100e4 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 80100c8:	4a1e      	ldr	r2, [pc, #120]	@ (8010144 <prvSampleTimeNow+0x9c>)
 80100ca:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80100cc:	6013      	str	r3, [r2, #0]
 80100ce:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 80100d0:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 80100d2:	e000      	b.n	80100d6 <prvSampleTimeNow+0x2e>
 80100d4:	2300      	movs	r3, #0
}
 80100d6:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 80100d8:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 80100da:	f8c8 5000 	str.w	r5, [r8]
}
 80100de:	b002      	add	sp, #8
 80100e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80100e4:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80100e6:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80100e8:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80100ec:	f104 0a04 	add.w	sl, r4, #4
 80100f0:	4650      	mov	r0, sl
 80100f2:	f7fe fad5 	bl	800e6a0 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80100f6:	6a23      	ldr	r3, [r4, #32]
 80100f8:	4620      	mov	r0, r4
 80100fa:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80100fc:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8010100:	075b      	lsls	r3, r3, #29
 8010102:	d5de      	bpl.n	80100c2 <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010104:	69a3      	ldr	r3, [r4, #24]
 8010106:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 8010108:	4599      	cmp	r9, r3
 801010a:	d206      	bcs.n	801011a <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801010c:	4651      	mov	r1, sl
 801010e:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010110:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010112:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010114:	f7fe faad 	bl	800e672 <vListInsert>
 8010118:	e7d3      	b.n	80100c2 <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801011a:	2300      	movs	r3, #0
 801011c:	464a      	mov	r2, r9
 801011e:	4620      	mov	r0, r4
 8010120:	4619      	mov	r1, r3
 8010122:	9300      	str	r3, [sp, #0]
 8010124:	f7ff ff96 	bl	8010054 <xTimerGenericCommand>
				configASSERT( xResult );
 8010128:	2800      	cmp	r0, #0
 801012a:	d1ca      	bne.n	80100c2 <prvSampleTimeNow+0x1a>
 801012c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010130:	f383 8811 	msr	BASEPRI, r3
 8010134:	f3bf 8f6f 	isb	sy
 8010138:	f3bf 8f4f 	dsb	sy
 801013c:	e7fe      	b.n	801013c <prvSampleTimeNow+0x94>
 801013e:	bf00      	nop
 8010140:	240263e0 	.word	0x240263e0
 8010144:	240263dc 	.word	0x240263dc
 8010148:	240263d0 	.word	0x240263d0

0801014c <prvTimerTask>:
{
 801014c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010150:	4d6e      	ldr	r5, [pc, #440]	@ (801030c <prvTimerTask+0x1c0>)
{
 8010152:	b089      	sub	sp, #36	@ 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010154:	4e6e      	ldr	r6, [pc, #440]	@ (8010310 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010156:	682b      	ldr	r3, [r5, #0]
 8010158:	f8d3 8000 	ldr.w	r8, [r3]
 801015c:	f1b8 0f00 	cmp.w	r8, #0
 8010160:	d035      	beq.n	80101ce <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010162:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010164:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010166:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 801016a:	f7ff fb71 	bl	800f850 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801016e:	a804      	add	r0, sp, #16
 8010170:	f7ff ff9a 	bl	80100a8 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8010174:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010176:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8010178:	2b00      	cmp	r3, #0
 801017a:	d169      	bne.n	8010250 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801017c:	2c00      	cmp	r4, #0
 801017e:	d14c      	bne.n	801021a <prvTimerTask+0xce>
 8010180:	4540      	cmp	r0, r8
 8010182:	d350      	bcc.n	8010226 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 8010184:	f7ff fc08 	bl	800f998 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010188:	682b      	ldr	r3, [r5, #0]
 801018a:	68db      	ldr	r3, [r3, #12]
 801018c:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801018e:	1d38      	adds	r0, r7, #4
 8010190:	f7fe fa86 	bl	800e6a0 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010194:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010198:	0758      	lsls	r0, r3, #29
 801019a:	d51a      	bpl.n	80101d2 <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801019c:	69b9      	ldr	r1, [r7, #24]
 801019e:	4643      	mov	r3, r8
 80101a0:	464a      	mov	r2, r9
 80101a2:	4638      	mov	r0, r7
 80101a4:	4441      	add	r1, r8
 80101a6:	f7ff fed1 	bl	800ff4c <prvInsertTimerInActiveList>
 80101aa:	b1b0      	cbz	r0, 80101da <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80101ac:	4623      	mov	r3, r4
 80101ae:	4642      	mov	r2, r8
 80101b0:	4621      	mov	r1, r4
 80101b2:	4638      	mov	r0, r7
 80101b4:	9400      	str	r4, [sp, #0]
 80101b6:	f7ff ff4d 	bl	8010054 <xTimerGenericCommand>
			configASSERT( xResult );
 80101ba:	b970      	cbnz	r0, 80101da <prvTimerTask+0x8e>
 80101bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101c0:	f383 8811 	msr	BASEPRI, r3
 80101c4:	f3bf 8f6f 	isb	sy
 80101c8:	f3bf 8f4f 	dsb	sy
 80101cc:	e7fe      	b.n	80101cc <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80101ce:	2401      	movs	r4, #1
 80101d0:	e7cb      	b.n	801016a <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80101d2:	f023 0301 	bic.w	r3, r3, #1
 80101d6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80101da:	6a3b      	ldr	r3, [r7, #32]
 80101dc:	4638      	mov	r0, r7
 80101de:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80101e0:	2200      	movs	r2, #0
 80101e2:	a904      	add	r1, sp, #16
 80101e4:	6830      	ldr	r0, [r6, #0]
 80101e6:	f7fe ff3d 	bl	800f064 <xQueueReceive>
 80101ea:	2800      	cmp	r0, #0
 80101ec:	d0b3      	beq.n	8010156 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80101ee:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80101f0:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	db2f      	blt.n	8010256 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80101f6:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80101f8:	6963      	ldr	r3, [r4, #20]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d132      	bne.n	8010264 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80101fe:	a803      	add	r0, sp, #12
 8010200:	f7ff ff52 	bl	80100a8 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8010204:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010206:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8010208:	2b09      	cmp	r3, #9
 801020a:	d8e9      	bhi.n	80101e0 <prvTimerTask+0x94>
 801020c:	e8df f003 	tbb	[pc, r3]
 8010210:	572e2e2e 	.word	0x572e2e2e
 8010214:	2e2e765e 	.word	0x2e2e765e
 8010218:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801021a:	4b3e      	ldr	r3, [pc, #248]	@ (8010314 <prvTimerTask+0x1c8>)
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	681c      	ldr	r4, [r3, #0]
 8010220:	fab4 f484 	clz	r4, r4
 8010224:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010226:	4622      	mov	r2, r4
 8010228:	eba8 0109 	sub.w	r1, r8, r9
 801022c:	6830      	ldr	r0, [r6, #0]
 801022e:	f7ff f922 	bl	800f476 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010232:	f7ff fbb1 	bl	800f998 <xTaskResumeAll>
 8010236:	2800      	cmp	r0, #0
 8010238:	d1d2      	bne.n	80101e0 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 801023a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801023e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010242:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8010246:	f3bf 8f4f 	dsb	sy
 801024a:	f3bf 8f6f 	isb	sy
 801024e:	e7c7      	b.n	80101e0 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 8010250:	f7ff fba2 	bl	800f998 <xTaskResumeAll>
}
 8010254:	e7c4      	b.n	80101e0 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010256:	9b05      	ldr	r3, [sp, #20]
 8010258:	9907      	ldr	r1, [sp, #28]
 801025a:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801025c:	9b04      	ldr	r3, [sp, #16]
 801025e:	2b00      	cmp	r3, #0
 8010260:	dbbe      	blt.n	80101e0 <prvTimerTask+0x94>
 8010262:	e7c8      	b.n	80101f6 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010264:	1d20      	adds	r0, r4, #4
 8010266:	f7fe fa1b 	bl	800e6a0 <uxListRemove>
 801026a:	e7c8      	b.n	80101fe <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801026c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010270:	4620      	mov	r0, r4
 8010272:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010274:	f043 0301 	orr.w	r3, r3, #1
 8010278:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801027c:	9b05      	ldr	r3, [sp, #20]
 801027e:	4419      	add	r1, r3
 8010280:	f7ff fe64 	bl	800ff4c <prvInsertTimerInActiveList>
 8010284:	2800      	cmp	r0, #0
 8010286:	d0ab      	beq.n	80101e0 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010288:	6a23      	ldr	r3, [r4, #32]
 801028a:	4620      	mov	r0, r4
 801028c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801028e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8010292:	0759      	lsls	r1, r3, #29
 8010294:	d5a4      	bpl.n	80101e0 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010296:	69a2      	ldr	r2, [r4, #24]
 8010298:	2300      	movs	r3, #0
 801029a:	9905      	ldr	r1, [sp, #20]
 801029c:	4620      	mov	r0, r4
 801029e:	9300      	str	r3, [sp, #0]
 80102a0:	440a      	add	r2, r1
 80102a2:	4619      	mov	r1, r3
 80102a4:	f7ff fed6 	bl	8010054 <xTimerGenericCommand>
							configASSERT( xResult );
 80102a8:	2800      	cmp	r0, #0
 80102aa:	d199      	bne.n	80101e0 <prvTimerTask+0x94>
 80102ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102b0:	f383 8811 	msr	BASEPRI, r3
 80102b4:	f3bf 8f6f 	isb	sy
 80102b8:	f3bf 8f4f 	dsb	sy
 80102bc:	e7fe      	b.n	80102bc <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80102be:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80102c2:	f023 0301 	bic.w	r3, r3, #1
 80102c6:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 80102ca:	e789      	b.n	80101e0 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80102cc:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80102d0:	f043 0301 	orr.w	r3, r3, #1
 80102d4:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80102d8:	9905      	ldr	r1, [sp, #20]
 80102da:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80102dc:	b941      	cbnz	r1, 80102f0 <prvTimerTask+0x1a4>
 80102de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102e2:	f383 8811 	msr	BASEPRI, r3
 80102e6:	f3bf 8f6f 	isb	sy
 80102ea:	f3bf 8f4f 	dsb	sy
 80102ee:	e7fe      	b.n	80102ee <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80102f0:	4603      	mov	r3, r0
 80102f2:	4401      	add	r1, r0
 80102f4:	4620      	mov	r0, r4
 80102f6:	f7ff fe29 	bl	800ff4c <prvInsertTimerInActiveList>
					break;
 80102fa:	e771      	b.n	80101e0 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80102fc:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8010300:	079a      	lsls	r2, r3, #30
 8010302:	d4de      	bmi.n	80102c2 <prvTimerTask+0x176>
							vPortFree( pxTimer );
 8010304:	4620      	mov	r0, r4
 8010306:	f7fe f95d 	bl	800e5c4 <vPortFree>
 801030a:	e769      	b.n	80101e0 <prvTimerTask+0x94>
 801030c:	240263e0 	.word	0x240263e0
 8010310:	240263d8 	.word	0x240263d8
 8010314:	240263dc 	.word	0x240263dc

08010318 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8010318:	8880      	ldrh	r0, [r0, #4]
 801031a:	4770      	bx	lr

0801031c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801031c:	b570      	push	{r4, r5, r6, lr}
 801031e:	6803      	ldr	r3, [r0, #0]
 8010320:	460c      	mov	r4, r1
 8010322:	2100      	movs	r1, #0
 8010324:	4605      	mov	r5, r0
 8010326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010328:	4798      	blx	r3
 801032a:	4606      	mov	r6, r0
 801032c:	682b      	ldr	r3, [r5, #0]
 801032e:	4628      	mov	r0, r5
 8010330:	1ba4      	subs	r4, r4, r6
 8010332:	6a1b      	ldr	r3, [r3, #32]
 8010334:	b2a4      	uxth	r4, r4
 8010336:	4798      	blx	r3
 8010338:	fbb4 f0f0 	udiv	r0, r4, r0
 801033c:	bd70      	pop	{r4, r5, r6, pc}

0801033e <_ZN8touchgfx17AbstractPartition5clearEv>:
 801033e:	2300      	movs	r3, #0
 8010340:	8083      	strh	r3, [r0, #4]
 8010342:	4770      	bx	lr

08010344 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8010344:	b510      	push	{r4, lr}
 8010346:	6803      	ldr	r3, [r0, #0]
 8010348:	4604      	mov	r4, r0
 801034a:	8881      	ldrh	r1, [r0, #4]
 801034c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801034e:	4798      	blx	r3
 8010350:	88a3      	ldrh	r3, [r4, #4]
 8010352:	3301      	adds	r3, #1
 8010354:	80a3      	strh	r3, [r4, #4]
 8010356:	bd10      	pop	{r4, pc}

08010358 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8010358:	6803      	ldr	r3, [r0, #0]
 801035a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801035c:	4718      	bx	r3

0801035e <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801035e:	4770      	bx	lr

08010360 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8010360:	4a02      	ldr	r2, [pc, #8]	@ (801036c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8010362:	6002      	str	r2, [r0, #0]
 8010364:	2200      	movs	r2, #0
 8010366:	8082      	strh	r2, [r0, #4]
 8010368:	4770      	bx	lr
 801036a:	bf00      	nop
 801036c:	08028ff0 	.word	0x08028ff0

08010370 <_ZN8touchgfx9Container13getFirstChildEv>:
 8010370:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8010372:	4770      	bx	lr

08010374 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv>:
 8010374:	b510      	push	{r4, lr}
 8010376:	6803      	ldr	r3, [r0, #0]
 8010378:	4604      	mov	r4, r0
 801037a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 801037e:	4798      	blx	r3
 8010380:	b110      	cbz	r0, 8010388 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv+0x14>
 8010382:	4620      	mov	r0, r4
 8010384:	f7f3 f9bf 	bl	8003706 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8010388:	bd10      	pop	{r4, pc}

0801038a <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 801038a:	f8c0 10e0 	str.w	r1, [r0, #224]	@ 0xe0
 801038e:	4770      	bx	lr

08010390 <_ZNK8touchgfx11BoxProgress8getColorEv>:
 8010390:	f8d0 00e0 	ldr.w	r0, [r0, #224]	@ 0xe0
 8010394:	4770      	bx	lr

08010396 <_ZN8touchgfx11BoxProgressD1Ev>:
 8010396:	4770      	bx	lr

08010398 <_ZN8touchgfx11BoxProgressD0Ev>:
 8010398:	b510      	push	{r4, lr}
 801039a:	4604      	mov	r4, r0
 801039c:	21e4      	movs	r1, #228	@ 0xe4
 801039e:	f014 fba4 	bl	8024aea <_ZdlPvj>
 80103a2:	4620      	mov	r0, r4
 80103a4:	bd10      	pop	{r4, pc}

080103a6 <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 80103a6:	b538      	push	{r3, r4, r5, lr}
 80103a8:	4604      	mov	r4, r0
 80103aa:	460d      	mov	r5, r1
 80103ac:	f000 f97c 	bl	80106a8 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 80103b0:	f884 50de 	strb.w	r5, [r4, #222]	@ 0xde
 80103b4:	bd38      	pop	{r3, r4, r5, pc}

080103b6 <_ZN8touchgfx8Drawable11setPositionEssss>:
 80103b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103ba:	461e      	mov	r6, r3
 80103bc:	6803      	ldr	r3, [r0, #0]
 80103be:	4604      	mov	r4, r0
 80103c0:	4617      	mov	r7, r2
 80103c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103c4:	f9bd 5018 	ldrsh.w	r5, [sp, #24]
 80103c8:	4798      	blx	r3
 80103ca:	6823      	ldr	r3, [r4, #0]
 80103cc:	4639      	mov	r1, r7
 80103ce:	4620      	mov	r0, r4
 80103d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80103d2:	4798      	blx	r3
 80103d4:	6823      	ldr	r3, [r4, #0]
 80103d6:	4631      	mov	r1, r6
 80103d8:	4620      	mov	r0, r4
 80103da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80103dc:	4790      	blx	r2
 80103de:	6823      	ldr	r3, [r4, #0]
 80103e0:	4629      	mov	r1, r5
 80103e2:	4620      	mov	r0, r4
 80103e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80103ea:	4718      	bx	r3

080103ec <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 80103ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80103f0:	4617      	mov	r7, r2
 80103f2:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 80103f6:	2200      	movs	r2, #0
 80103f8:	4604      	mov	r4, r0
 80103fa:	460e      	mov	r6, r1
 80103fc:	4698      	mov	r8, r3
 80103fe:	4611      	mov	r1, r2
 8010400:	9500      	str	r5, [sp, #0]
 8010402:	30b8      	adds	r0, #184	@ 0xb8
 8010404:	f7ff ffd7 	bl	80103b6 <_ZN8touchgfx8Drawable11setPositionEssss>
 8010408:	4643      	mov	r3, r8
 801040a:	463a      	mov	r2, r7
 801040c:	4631      	mov	r1, r6
 801040e:	4620      	mov	r0, r4
 8010410:	9508      	str	r5, [sp, #32]
 8010412:	b002      	add	sp, #8
 8010414:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010418:	f000 ba3b 	b.w	8010892 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

0801041c <_ZN8touchgfx11BoxProgress8setValueEi>:
 801041c:	b530      	push	{r4, r5, lr}
 801041e:	4604      	mov	r4, r0
 8010420:	b085      	sub	sp, #20
 8010422:	f000 f994 	bl	801074e <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8010426:	f894 30b4 	ldrb.w	r3, [r4, #180]	@ 0xb4
 801042a:	2b03      	cmp	r3, #3
 801042c:	d814      	bhi.n	8010458 <_ZN8touchgfx11BoxProgress8setValueEi+0x3c>
 801042e:	e8df f003 	tbb	[pc, r3]
 8010432:	0202      	.short	0x0202
 8010434:	1010      	.short	0x1010
 8010436:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 801043a:	4620      	mov	r0, r4
 801043c:	f000 f9a9 	bl	8010792 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8010440:	b200      	sxth	r0, r0
 8010442:	f894 30b4 	ldrb.w	r3, [r4, #180]	@ 0xb4
 8010446:	2b03      	cmp	r3, #3
 8010448:	d830      	bhi.n	80104ac <_ZN8touchgfx11BoxProgress8setValueEi+0x90>
 801044a:	e8df f003 	tbb	[pc, r3]
 801044e:	3107      	.short	0x3107
 8010450:	6442      	.short	0x6442
 8010452:	f8b4 1062 	ldrh.w	r1, [r4, #98]	@ 0x62
 8010456:	e7f0      	b.n	801043a <_ZN8touchgfx11BoxProgress8setValueEi+0x1e>
 8010458:	2000      	movs	r0, #0
 801045a:	e7f2      	b.n	8010442 <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 801045c:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	@ 0x62
 8010460:	2200      	movs	r2, #0
 8010462:	f9b4 50c0 	ldrsh.w	r5, [r4, #192]	@ 0xc0
 8010466:	9300      	str	r3, [sp, #0]
 8010468:	4611      	mov	r1, r2
 801046a:	4603      	mov	r3, r0
 801046c:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 8010470:	f7ff ffa1 	bl	80103b6 <_ZN8touchgfx8Drawable11setPositionEssss>
 8010474:	f9b4 30c0 	ldrsh.w	r3, [r4, #192]	@ 0xc0
 8010478:	4629      	mov	r1, r5
 801047a:	429d      	cmp	r5, r3
 801047c:	eba5 0503 	sub.w	r5, r5, r3
 8010480:	f9b4 20c2 	ldrsh.w	r2, [r4, #194]	@ 0xc2
 8010484:	bfa8      	it	ge
 8010486:	4619      	movge	r1, r3
 8010488:	2d00      	cmp	r5, #0
 801048a:	f8ad 200e 	strh.w	r2, [sp, #14]
 801048e:	f8ad 1008 	strh.w	r1, [sp, #8]
 8010492:	f04f 0100 	mov.w	r1, #0
 8010496:	bfb8      	it	lt
 8010498:	426d      	neglt	r5, r5
 801049a:	f8ad 100a 	strh.w	r1, [sp, #10]
 801049e:	f8ad 500c 	strh.w	r5, [sp, #12]
 80104a2:	a902      	add	r1, sp, #8
 80104a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80104a8:	f007 fc48 	bl	8017d3c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>
 80104ac:	b005      	add	sp, #20
 80104ae:	bd30      	pop	{r4, r5, pc}
 80104b0:	8921      	ldrh	r1, [r4, #8]
 80104b2:	2200      	movs	r2, #0
 80104b4:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	@ 0x62
 80104b8:	1a09      	subs	r1, r1, r0
 80104ba:	f9b4 50bc 	ldrsh.w	r5, [r4, #188]	@ 0xbc
 80104be:	9300      	str	r3, [sp, #0]
 80104c0:	4603      	mov	r3, r0
 80104c2:	b209      	sxth	r1, r1
 80104c4:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 80104c8:	f7ff ff75 	bl	80103b6 <_ZN8touchgfx8Drawable11setPositionEssss>
 80104cc:	f9b4 30bc 	ldrsh.w	r3, [r4, #188]	@ 0xbc
 80104d0:	e7d2      	b.n	8010478 <_ZN8touchgfx11BoxProgress8setValueEi+0x5c>
 80104d2:	2200      	movs	r2, #0
 80104d4:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 80104d8:	9000      	str	r0, [sp, #0]
 80104da:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 80104de:	4611      	mov	r1, r2
 80104e0:	f9b4 50c2 	ldrsh.w	r5, [r4, #194]	@ 0xc2
 80104e4:	f7ff ff67 	bl	80103b6 <_ZN8touchgfx8Drawable11setPositionEssss>
 80104e8:	f9b4 30c2 	ldrsh.w	r3, [r4, #194]	@ 0xc2
 80104ec:	2100      	movs	r1, #0
 80104ee:	429d      	cmp	r5, r3
 80104f0:	f9b4 20c0 	ldrsh.w	r2, [r4, #192]	@ 0xc0
 80104f4:	f8ad 1008 	strh.w	r1, [sp, #8]
 80104f8:	4629      	mov	r1, r5
 80104fa:	eba5 0503 	sub.w	r5, r5, r3
 80104fe:	bfa8      	it	ge
 8010500:	4619      	movge	r1, r3
 8010502:	f8ad 200c 	strh.w	r2, [sp, #12]
 8010506:	2d00      	cmp	r5, #0
 8010508:	f8ad 100a 	strh.w	r1, [sp, #10]
 801050c:	bfb8      	it	lt
 801050e:	426d      	neglt	r5, r5
 8010510:	f8ad 500e 	strh.w	r5, [sp, #14]
 8010514:	e7c5      	b.n	80104a2 <_ZN8touchgfx11BoxProgress8setValueEi+0x86>
 8010516:	f8b4 2062 	ldrh.w	r2, [r4, #98]	@ 0x62
 801051a:	2100      	movs	r1, #0
 801051c:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 8010520:	1a12      	subs	r2, r2, r0
 8010522:	9000      	str	r0, [sp, #0]
 8010524:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 8010528:	f9b4 50be 	ldrsh.w	r5, [r4, #190]	@ 0xbe
 801052c:	b212      	sxth	r2, r2
 801052e:	f7ff ff42 	bl	80103b6 <_ZN8touchgfx8Drawable11setPositionEssss>
 8010532:	f9b4 30be 	ldrsh.w	r3, [r4, #190]	@ 0xbe
 8010536:	e7d9      	b.n	80104ec <_ZN8touchgfx11BoxProgress8setValueEi+0xd0>

08010538 <_ZN8touchgfx11BoxProgressC1Ev>:
 8010538:	b510      	push	{r4, lr}
 801053a:	4604      	mov	r4, r0
 801053c:	f000 f85a 	bl	80105f4 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8010540:	2201      	movs	r2, #1
 8010542:	4b17      	ldr	r3, [pc, #92]	@ (80105a0 <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 8010544:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010548:	f104 01b8 	add.w	r1, r4, #184	@ 0xb8
 801054c:	f884 20dd 	strb.w	r2, [r4, #221]	@ 0xdd
 8010550:	4a14      	ldr	r2, [pc, #80]	@ (80105a4 <_ZN8touchgfx11BoxProgressC1Ev+0x6c>)
 8010552:	6023      	str	r3, [r4, #0]
 8010554:	2300      	movs	r3, #0
 8010556:	f8c4 20b8 	str.w	r2, [r4, #184]	@ 0xb8
 801055a:	22ff      	movs	r2, #255	@ 0xff
 801055c:	f8a4 30bc 	strh.w	r3, [r4, #188]	@ 0xbc
 8010560:	f8a4 30be 	strh.w	r3, [r4, #190]	@ 0xbe
 8010564:	f8a4 30c0 	strh.w	r3, [r4, #192]	@ 0xc0
 8010568:	f8a4 30c2 	strh.w	r3, [r4, #194]	@ 0xc2
 801056c:	f8a4 30c4 	strh.w	r3, [r4, #196]	@ 0xc4
 8010570:	f8a4 30c6 	strh.w	r3, [r4, #198]	@ 0xc6
 8010574:	f8a4 30c8 	strh.w	r3, [r4, #200]	@ 0xc8
 8010578:	f8a4 30ca 	strh.w	r3, [r4, #202]	@ 0xca
 801057c:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 8010580:	f8a4 30d8 	strh.w	r3, [r4, #216]	@ 0xd8
 8010584:	f8a4 30da 	strh.w	r3, [r4, #218]	@ 0xda
 8010588:	f884 30dc 	strb.w	r3, [r4, #220]	@ 0xdc
 801058c:	f884 20de 	strb.w	r2, [r4, #222]	@ 0xde
 8010590:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8010594:	e9c4 3333 	strd	r3, r3, [r4, #204]	@ 0xcc
 8010598:	f000 fa08 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801059c:	4620      	mov	r0, r4
 801059e:	bd10      	pop	{r4, pc}
 80105a0:	08029024 	.word	0x08029024
 80105a4:	08029618 	.word	0x08029618

080105a8 <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 80105a8:	f890 00b4 	ldrb.w	r0, [r0, #180]	@ 0xb4
 80105ac:	4770      	bx	lr

080105ae <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
 80105ae:	4770      	bx	lr

080105b0 <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 80105b0:	b510      	push	{r4, lr}
 80105b2:	4604      	mov	r4, r0
 80105b4:	21b8      	movs	r1, #184	@ 0xb8
 80105b6:	f014 fa98 	bl	8024aea <_ZdlPvj>
 80105ba:	4620      	mov	r0, r4
 80105bc:	bd10      	pop	{r4, pc}

080105be <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE.part.0>:
 80105be:	b570      	push	{r4, r5, r6, lr}
 80105c0:	4604      	mov	r4, r0
 80105c2:	f880 10b4 	strb.w	r1, [r0, #180]	@ 0xb4
 80105c6:	3058      	adds	r0, #88	@ 0x58
 80105c8:	f007 fb67 	bl	8017c9a <_ZNK8touchgfx8Drawable10invalidateEv>
 80105cc:	6823      	ldr	r3, [r4, #0]
 80105ce:	4620      	mov	r0, r4
 80105d0:	f8d3 50b0 	ldr.w	r5, [r3, #176]	@ 0xb0
 80105d4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80105d8:	4798      	blx	r3
 80105da:	462b      	mov	r3, r5
 80105dc:	4601      	mov	r1, r0
 80105de:	4620      	mov	r0, r4
 80105e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80105e4:	4718      	bx	r3

080105e6 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 80105e6:	f890 30b4 	ldrb.w	r3, [r0, #180]	@ 0xb4
 80105ea:	428b      	cmp	r3, r1
 80105ec:	d001      	beq.n	80105f2 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE+0xc>
 80105ee:	f7ff bfe6 	b.w	80105be <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE.part.0>
 80105f2:	4770      	bx	lr

080105f4 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 80105f4:	b510      	push	{r4, lr}
 80105f6:	4604      	mov	r4, r0
 80105f8:	f000 f978 	bl	80108ec <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 80105fc:	4b03      	ldr	r3, [pc, #12]	@ (801060c <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 80105fe:	4620      	mov	r0, r4
 8010600:	6023      	str	r3, [r4, #0]
 8010602:	2300      	movs	r3, #0
 8010604:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8010608:	bd10      	pop	{r4, pc}
 801060a:	bf00      	nop
 801060c:	08029108 	.word	0x08029108

08010610 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8010610:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	@ 0x5c
 8010614:	4770      	bx	lr

08010616 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8010616:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	@ 0x5e
 801061a:	4770      	bx	lr

0801061c <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 801061c:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	@ 0x60
 8010620:	4770      	bx	lr

08010622 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8010622:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	@ 0x62
 8010626:	4770      	bx	lr

08010628 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 8010628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801062a:	461e      	mov	r6, r3
 801062c:	6803      	ldr	r3, [r0, #0]
 801062e:	460f      	mov	r7, r1
 8010630:	4604      	mov	r4, r0
 8010632:	4615      	mov	r5, r2
 8010634:	e9c0 1221 	strd	r1, r2, [r0, #132]	@ 0x84
 8010638:	f8d0 108c 	ldr.w	r1, [r0, #140]	@ 0x8c
 801063c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8010640:	4798      	blx	r3
 8010642:	b93e      	cbnz	r6, 8010654 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x2c>
 8010644:	1bed      	subs	r5, r5, r7
 8010646:	f8a4 5090 	strh.w	r5, [r4, #144]	@ 0x90
 801064a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801064e:	f8a4 3092 	strh.w	r3, [r4, #146]	@ 0x92
 8010652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010654:	f8a4 6090 	strh.w	r6, [r4, #144]	@ 0x90
 8010658:	e7f7      	b.n	801064a <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x22>

0801065a <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 801065a:	b510      	push	{r4, lr}
 801065c:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
 8010660:	600c      	str	r4, [r1, #0]
 8010662:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 8010666:	6011      	str	r1, [r2, #0]
 8010668:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 801066c:	801a      	strh	r2, [r3, #0]
 801066e:	9b02      	ldr	r3, [sp, #8]
 8010670:	f8b0 2092 	ldrh.w	r2, [r0, #146]	@ 0x92
 8010674:	801a      	strh	r2, [r3, #0]
 8010676:	bd10      	pop	{r4, pc}

08010678 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 8010678:	b510      	push	{r4, lr}
 801067a:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
 801067e:	600c      	str	r4, [r1, #0]
 8010680:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 8010684:	6011      	str	r1, [r2, #0]
 8010686:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 801068a:	801a      	strh	r2, [r3, #0]
 801068c:	bd10      	pop	{r4, pc}

0801068e <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 801068e:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8010692:	600b      	str	r3, [r1, #0]
 8010694:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8010698:	6013      	str	r3, [r2, #0]
 801069a:	4770      	bx	lr

0801069c <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 801069c:	f8c0 1094 	str.w	r1, [r0, #148]	@ 0x94
 80106a0:	4770      	bx	lr

080106a2 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 80106a2:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
 80106a6:	4770      	bx	lr

080106a8 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 80106a8:	f880 1054 	strb.w	r1, [r0, #84]	@ 0x54
 80106ac:	4770      	bx	lr

080106ae <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 80106ae:	f890 0054 	ldrb.w	r0, [r0, #84]	@ 0x54
 80106b2:	4770      	bx	lr

080106b4 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 80106b4:	4770      	bx	lr

080106b6 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 80106b6:	b510      	push	{r4, lr}
 80106b8:	4604      	mov	r4, r0
 80106ba:	21b4      	movs	r1, #180	@ 0xb4
 80106bc:	f014 fa15 	bl	8024aea <_ZdlPvj>
 80106c0:	4620      	mov	r0, r4
 80106c2:	bd10      	pop	{r4, pc}

080106c4 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 80106c4:	b570      	push	{r4, r5, r6, lr}
 80106c6:	f8d0 5084 	ldr.w	r5, [r0, #132]	@ 0x84
 80106ca:	4604      	mov	r4, r0
 80106cc:	4616      	mov	r6, r2
 80106ce:	428d      	cmp	r5, r1
 80106d0:	bfb8      	it	lt
 80106d2:	460d      	movlt	r5, r1
 80106d4:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 80106d8:	428d      	cmp	r5, r1
 80106da:	bfa8      	it	ge
 80106dc:	460d      	movge	r5, r1
 80106de:	b99a      	cbnz	r2, 8010708 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 80106e0:	6803      	ldr	r3, [r0, #0]
 80106e2:	4629      	mov	r1, r5
 80106e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80106e8:	4798      	blx	r3
 80106ea:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 80106ee:	b368      	cbz	r0, 801074c <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 80106f0:	6803      	ldr	r3, [r0, #0]
 80106f2:	68db      	ldr	r3, [r3, #12]
 80106f4:	4798      	blx	r3
 80106f6:	b348      	cbz	r0, 801074c <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 80106f8:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 80106fc:	4621      	mov	r1, r4
 80106fe:	6803      	ldr	r3, [r0, #0]
 8010700:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010704:	689b      	ldr	r3, [r3, #8]
 8010706:	4718      	bx	r3
 8010708:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 801070c:	2b00      	cmp	r3, #0
 801070e:	dd08      	ble.n	8010722 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5e>
 8010710:	f006 fa00 	bl	8016b14 <_ZN8touchgfx11Application11getInstanceEv>
 8010714:	4621      	mov	r1, r4
 8010716:	3004      	adds	r0, #4
 8010718:	f006 fa21 	bl	8016b5e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 801071c:	2300      	movs	r3, #0
 801071e:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
 8010722:	6823      	ldr	r3, [r4, #0]
 8010724:	4620      	mov	r0, r4
 8010726:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801072a:	4798      	blx	r3
 801072c:	2300      	movs	r3, #0
 801072e:	f8c4 60a4 	str.w	r6, [r4, #164]	@ 0xa4
 8010732:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
 8010736:	e9c4 0527 	strd	r0, r5, [r4, #156]	@ 0x9c
 801073a:	f006 f9eb 	bl	8016b14 <_ZN8touchgfx11Application11getInstanceEv>
 801073e:	4621      	mov	r1, r4
 8010740:	3004      	adds	r0, #4
 8010742:	f006 fab5 	bl	8016cb0 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 8010746:	2301      	movs	r3, #1
 8010748:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
 801074c:	bd70      	pop	{r4, r5, r6, pc}

0801074e <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 801074e:	b510      	push	{r4, lr}
 8010750:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8010754:	4604      	mov	r4, r0
 8010756:	4299      	cmp	r1, r3
 8010758:	bfb8      	it	lt
 801075a:	4619      	movlt	r1, r3
 801075c:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8010760:	4299      	cmp	r1, r3
 8010762:	bfa8      	it	ge
 8010764:	4619      	movge	r1, r3
 8010766:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 801076a:	428b      	cmp	r3, r1
 801076c:	d010      	beq.n	8010790 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 801076e:	f8c0 108c 	str.w	r1, [r0, #140]	@ 0x8c
 8010772:	f8d0 00ac 	ldr.w	r0, [r0, #172]	@ 0xac
 8010776:	b158      	cbz	r0, 8010790 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8010778:	6803      	ldr	r3, [r0, #0]
 801077a:	68db      	ldr	r3, [r3, #12]
 801077c:	4798      	blx	r3
 801077e:	b138      	cbz	r0, 8010790 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8010780:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 8010784:	4621      	mov	r1, r4
 8010786:	6803      	ldr	r3, [r0, #0]
 8010788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801078c:	689b      	ldr	r3, [r3, #8]
 801078e:	4718      	bx	r3
 8010790:	bd10      	pop	{r4, pc}

08010792 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 8010792:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010794:	4604      	mov	r4, r0
 8010796:	460d      	mov	r5, r1
 8010798:	b1a9      	cbz	r1, 80107c6 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 801079a:	f8b0 6092 	ldrh.w	r6, [r0, #146]	@ 0x92
 801079e:	ab01      	add	r3, sp, #4
 80107a0:	f8b4 1090 	ldrh.w	r1, [r4, #144]	@ 0x90
 80107a4:	f8d4 708c 	ldr.w	r7, [r4, #140]	@ 0x8c
 80107a8:	1b89      	subs	r1, r1, r6
 80107aa:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	@ 0x84
 80107ae:	1a12      	subs	r2, r2, r0
 80107b0:	1a38      	subs	r0, r7, r0
 80107b2:	f007 ff41 	bl	8018638 <_ZN8touchgfx6muldivElllRl>
 80107b6:	4629      	mov	r1, r5
 80107b8:	ab01      	add	r3, sp, #4
 80107ba:	f8b4 2090 	ldrh.w	r2, [r4, #144]	@ 0x90
 80107be:	4430      	add	r0, r6
 80107c0:	f007 ff3a 	bl	8018638 <_ZN8touchgfx6muldivElllRl>
 80107c4:	b285      	uxth	r5, r0
 80107c6:	4628      	mov	r0, r5
 80107c8:	b003      	add	sp, #12
 80107ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080107cc <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 80107cc:	b570      	push	{r4, r5, r6, lr}
 80107ce:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 80107d2:	4604      	mov	r4, r0
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d035      	beq.n	8010844 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 80107d8:	f8d0 00a8 	ldr.w	r0, [r0, #168]	@ 0xa8
 80107dc:	2100      	movs	r1, #0
 80107de:	f8d4 5094 	ldr.w	r5, [r4, #148]	@ 0x94
 80107e2:	3001      	adds	r0, #1
 80107e4:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	@ 0x9c
 80107e8:	f8c4 00a8 	str.w	r0, [r4, #168]	@ 0xa8
 80107ec:	b280      	uxth	r0, r0
 80107ee:	1ad2      	subs	r2, r2, r3
 80107f0:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 80107f4:	b212      	sxth	r2, r2
 80107f6:	47a8      	blx	r5
 80107f8:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 80107fc:	6823      	ldr	r3, [r4, #0]
 80107fe:	4401      	add	r1, r0
 8010800:	4620      	mov	r0, r4
 8010802:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8010806:	4798      	blx	r3
 8010808:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	@ 0xa4
 801080c:	429a      	cmp	r2, r3
 801080e:	db19      	blt.n	8010844 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 8010810:	2500      	movs	r5, #0
 8010812:	e9c4 5529 	strd	r5, r5, [r4, #164]	@ 0xa4
 8010816:	f006 f97d 	bl	8016b14 <_ZN8touchgfx11Application11getInstanceEv>
 801081a:	4621      	mov	r1, r4
 801081c:	3004      	adds	r0, #4
 801081e:	f006 f99e 	bl	8016b5e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8010822:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8010826:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 801082a:	b158      	cbz	r0, 8010844 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 801082c:	6803      	ldr	r3, [r0, #0]
 801082e:	68db      	ldr	r3, [r3, #12]
 8010830:	4798      	blx	r3
 8010832:	b138      	cbz	r0, 8010844 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 8010834:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8010838:	4621      	mov	r1, r4
 801083a:	6803      	ldr	r3, [r0, #0]
 801083c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010840:	689b      	ldr	r3, [r3, #8]
 8010842:	4718      	bx	r3
 8010844:	bd70      	pop	{r4, r5, r6, pc}
	...

08010848 <_ZN8touchgfx8DrawableC1Ev>:
 8010848:	4a0a      	ldr	r2, [pc, #40]	@ (8010874 <_ZN8touchgfx8DrawableC1Ev+0x2c>)
 801084a:	6002      	str	r2, [r0, #0]
 801084c:	2200      	movs	r2, #0
 801084e:	8082      	strh	r2, [r0, #4]
 8010850:	80c2      	strh	r2, [r0, #6]
 8010852:	8102      	strh	r2, [r0, #8]
 8010854:	8142      	strh	r2, [r0, #10]
 8010856:	8182      	strh	r2, [r0, #12]
 8010858:	81c2      	strh	r2, [r0, #14]
 801085a:	8202      	strh	r2, [r0, #16]
 801085c:	8242      	strh	r2, [r0, #18]
 801085e:	61c2      	str	r2, [r0, #28]
 8010860:	8402      	strh	r2, [r0, #32]
 8010862:	8442      	strh	r2, [r0, #34]	@ 0x22
 8010864:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8010868:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801086c:	2201      	movs	r2, #1
 801086e:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
 8010872:	4770      	bx	lr
 8010874:	080298ac 	.word	0x080298ac

08010878 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 8010878:	b570      	push	{r4, r5, r6, lr}
 801087a:	6803      	ldr	r3, [r0, #0]
 801087c:	4604      	mov	r4, r0
 801087e:	4615      	mov	r5, r2
 8010880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010882:	4798      	blx	r3
 8010884:	6823      	ldr	r3, [r4, #0]
 8010886:	4629      	mov	r1, r5
 8010888:	4620      	mov	r0, r4
 801088a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801088c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010890:	4718      	bx	r3

08010892 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8010892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010896:	4604      	mov	r4, r0
 8010898:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 801089c:	4698      	mov	r8, r3
 801089e:	460e      	mov	r6, r1
 80108a0:	4615      	mov	r5, r2
 80108a2:	f8a4 105c 	strh.w	r1, [r4, #92]	@ 0x5c
 80108a6:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 80108aa:	4619      	mov	r1, r3
 80108ac:	463a      	mov	r2, r7
 80108ae:	3058      	adds	r0, #88	@ 0x58
 80108b0:	f7ff ffe2 	bl	8010878 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80108b4:	4446      	add	r6, r8
 80108b6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80108ba:	443d      	add	r5, r7
 80108bc:	42b3      	cmp	r3, r6
 80108be:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80108c2:	bfb8      	it	lt
 80108c4:	8126      	strhlt	r6, [r4, #8]
 80108c6:	42ab      	cmp	r3, r5
 80108c8:	bfb8      	it	lt
 80108ca:	8165      	strhlt	r5, [r4, #10]
 80108cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080108d0 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 80108d0:	b510      	push	{r4, lr}
 80108d2:	4604      	mov	r4, r0
 80108d4:	302c      	adds	r0, #44	@ 0x2c
 80108d6:	f003 fb5a 	bl	8013f8e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80108da:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	@ 0x36
 80108de:	4620      	mov	r0, r4
 80108e0:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	@ 0x34
 80108e4:	f7ff ffc8 	bl	8010878 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80108e8:	bd10      	pop	{r4, pc}
	...

080108ec <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 80108ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80108ee:	4604      	mov	r4, r0
 80108f0:	2500      	movs	r5, #0
 80108f2:	f7ff ffa9 	bl	8010848 <_ZN8touchgfx8DrawableC1Ev>
 80108f6:	4b24      	ldr	r3, [pc, #144]	@ (8010988 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 80108f8:	4626      	mov	r6, r4
 80108fa:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 80108fe:	2226      	movs	r2, #38	@ 0x26
 8010900:	4629      	mov	r1, r5
 8010902:	62a5      	str	r5, [r4, #40]	@ 0x28
 8010904:	f846 3b2c 	str.w	r3, [r6], #44
 8010908:	4630      	mov	r0, r6
 801090a:	f8ad 7004 	strh.w	r7, [sp, #4]
 801090e:	f014 feff 	bl	8025710 <memset>
 8010912:	4630      	mov	r0, r6
 8010914:	f7ff ff98 	bl	8010848 <_ZN8touchgfx8DrawableC1Ev>
 8010918:	a902      	add	r1, sp, #8
 801091a:	4b1c      	ldr	r3, [pc, #112]	@ (801098c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 801091c:	4630      	mov	r0, r6
 801091e:	f884 7054 	strb.w	r7, [r4, #84]	@ 0x54
 8010922:	f104 0758 	add.w	r7, r4, #88	@ 0x58
 8010926:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010928:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 801092c:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 8010930:	f003 fb2d 	bl	8013f8e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8010934:	4638      	mov	r0, r7
 8010936:	f7ff ff87 	bl	8010848 <_ZN8touchgfx8DrawableC1Ev>
 801093a:	4b15      	ldr	r3, [pc, #84]	@ (8010990 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 801093c:	4629      	mov	r1, r5
 801093e:	4630      	mov	r0, r6
 8010940:	65a3      	str	r3, [r4, #88]	@ 0x58
 8010942:	2364      	movs	r3, #100	@ 0x64
 8010944:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 8010948:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 801094c:	e9c4 3522 	strd	r3, r5, [r4, #136]	@ 0x88
 8010950:	4b10      	ldr	r3, [pc, #64]	@ (8010994 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 8010952:	e9c4 5520 	strd	r5, r5, [r4, #128]	@ 0x80
 8010956:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 801095a:	e9c4 5527 	strd	r5, r5, [r4, #156]	@ 0x9c
 801095e:	e9c4 5529 	strd	r5, r5, [r4, #164]	@ 0xa4
 8010962:	e9c4 552b 	strd	r5, r5, [r4, #172]	@ 0xac
 8010966:	f7f2 fe05 	bl	8003574 <_ZN8touchgfx8Drawable4setXEs>
 801096a:	4629      	mov	r1, r5
 801096c:	4630      	mov	r0, r6
 801096e:	f7f2 fe03 	bl	8003578 <_ZN8touchgfx8Drawable4setYEs>
 8010972:	4631      	mov	r1, r6
 8010974:	4620      	mov	r0, r4
 8010976:	f000 f819 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801097a:	4620      	mov	r0, r4
 801097c:	4639      	mov	r1, r7
 801097e:	f000 f815 	bl	80109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8010982:	4620      	mov	r0, r4
 8010984:	b003      	add	sp, #12
 8010986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010988:	080291e4 	.word	0x080291e4
 801098c:	080296f4 	.word	0x080296f4
 8010990:	080292b8 	.word	0x080292b8
 8010994:	08018d13 	.word	0x08018d13

08010998 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8010998:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801099a:	2000      	movs	r0, #0
 801099c:	b12b      	cbz	r3, 80109aa <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801099e:	b920      	cbnz	r0, 80109aa <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80109a0:	1a5a      	subs	r2, r3, r1
 80109a2:	699b      	ldr	r3, [r3, #24]
 80109a4:	4250      	negs	r0, r2
 80109a6:	4150      	adcs	r0, r2
 80109a8:	e7f8      	b.n	801099c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80109aa:	4770      	bx	lr

080109ac <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80109ac:	2300      	movs	r3, #0
 80109ae:	6148      	str	r0, [r1, #20]
 80109b0:	618b      	str	r3, [r1, #24]
 80109b2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80109b4:	b913      	cbnz	r3, 80109bc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 80109b6:	6281      	str	r1, [r0, #40]	@ 0x28
 80109b8:	4770      	bx	lr
 80109ba:	4613      	mov	r3, r2
 80109bc:	699a      	ldr	r2, [r3, #24]
 80109be:	2a00      	cmp	r2, #0
 80109c0:	d1fb      	bne.n	80109ba <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 80109c2:	6199      	str	r1, [r3, #24]
 80109c4:	4770      	bx	lr

080109c6 <_ZN8touchgfx9Container9removeAllEv>:
 80109c6:	2200      	movs	r2, #0
 80109c8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80109ca:	b123      	cbz	r3, 80109d6 <_ZN8touchgfx9Container9removeAllEv+0x10>
 80109cc:	6999      	ldr	r1, [r3, #24]
 80109ce:	6281      	str	r1, [r0, #40]	@ 0x28
 80109d0:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80109d4:	e7f8      	b.n	80109c8 <_ZN8touchgfx9Container9removeAllEv+0x2>
 80109d6:	4770      	bx	lr

080109d8 <_ZN8touchgfx9Container6unlinkEv>:
 80109d8:	2300      	movs	r3, #0
 80109da:	6283      	str	r3, [r0, #40]	@ 0x28
 80109dc:	4770      	bx	lr

080109de <_ZNK8touchgfx9Container12getSolidRectEv>:
 80109de:	2200      	movs	r2, #0
 80109e0:	8002      	strh	r2, [r0, #0]
 80109e2:	8042      	strh	r2, [r0, #2]
 80109e4:	8082      	strh	r2, [r0, #4]
 80109e6:	80c2      	strh	r2, [r0, #6]
 80109e8:	4770      	bx	lr

080109ea <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80109ea:	b570      	push	{r4, r5, r6, lr}
 80109ec:	460d      	mov	r5, r1
 80109ee:	4616      	mov	r6, r2
 80109f0:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80109f2:	b13c      	cbz	r4, 8010a04 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 80109f4:	6823      	ldr	r3, [r4, #0]
 80109f6:	4620      	mov	r0, r4
 80109f8:	4632      	mov	r2, r6
 80109fa:	4629      	mov	r1, r5
 80109fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80109fe:	4798      	blx	r3
 8010a00:	69a4      	ldr	r4, [r4, #24]
 8010a02:	e7f6      	b.n	80109f2 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8010a04:	bd70      	pop	{r4, r5, r6, pc}

08010a06 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8010a06:	b538      	push	{r3, r4, r5, lr}
 8010a08:	460d      	mov	r5, r1
 8010a0a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8010a0c:	b134      	cbz	r4, 8010a1c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8010a0e:	682b      	ldr	r3, [r5, #0]
 8010a10:	4621      	mov	r1, r4
 8010a12:	4628      	mov	r0, r5
 8010a14:	689b      	ldr	r3, [r3, #8]
 8010a16:	4798      	blx	r3
 8010a18:	69a4      	ldr	r4, [r4, #24]
 8010a1a:	e7f7      	b.n	8010a0c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8010a1c:	bd38      	pop	{r3, r4, r5, pc}

08010a1e <_ZN8touchgfx9ContainerD1Ev>:
 8010a1e:	4770      	bx	lr

08010a20 <_ZN8touchgfx9ContainerD0Ev>:
 8010a20:	b510      	push	{r4, lr}
 8010a22:	4604      	mov	r4, r0
 8010a24:	212c      	movs	r1, #44	@ 0x2c
 8010a26:	f014 f860 	bl	8024aea <_ZdlPvj>
 8010a2a:	4620      	mov	r0, r4
 8010a2c:	bd10      	pop	{r4, pc}

08010a2e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8010a2e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8010a30:	b19b      	cbz	r3, 8010a5a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8010a32:	428b      	cmp	r3, r1
 8010a34:	d109      	bne.n	8010a4a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8010a36:	699a      	ldr	r2, [r3, #24]
 8010a38:	2100      	movs	r1, #0
 8010a3a:	6159      	str	r1, [r3, #20]
 8010a3c:	6282      	str	r2, [r0, #40]	@ 0x28
 8010a3e:	b902      	cbnz	r2, 8010a42 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8010a40:	4770      	bx	lr
 8010a42:	6199      	str	r1, [r3, #24]
 8010a44:	4770      	bx	lr
 8010a46:	4613      	mov	r3, r2
 8010a48:	b13a      	cbz	r2, 8010a5a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8010a4a:	699a      	ldr	r2, [r3, #24]
 8010a4c:	428a      	cmp	r2, r1
 8010a4e:	d1fa      	bne.n	8010a46 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8010a50:	698a      	ldr	r2, [r1, #24]
 8010a52:	619a      	str	r2, [r3, #24]
 8010a54:	2300      	movs	r3, #0
 8010a56:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8010a5a:	4770      	bx	lr

08010a5c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8010a5c:	b410      	push	{r4}
 8010a5e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8010a60:	4604      	mov	r4, r0
 8010a62:	b92b      	cbnz	r3, 8010a70 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8010a64:	6803      	ldr	r3, [r0, #0]
 8010a66:	4611      	mov	r1, r2
 8010a68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010a6e:	4718      	bx	r3
 8010a70:	b941      	cbnz	r1, 8010a84 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8010a72:	6193      	str	r3, [r2, #24]
 8010a74:	6282      	str	r2, [r0, #40]	@ 0x28
 8010a76:	6154      	str	r4, [r2, #20]
 8010a78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a7c:	4770      	bx	lr
 8010a7e:	4603      	mov	r3, r0
 8010a80:	2800      	cmp	r0, #0
 8010a82:	d0f9      	beq.n	8010a78 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8010a84:	4299      	cmp	r1, r3
 8010a86:	6998      	ldr	r0, [r3, #24]
 8010a88:	d1f9      	bne.n	8010a7e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8010a8a:	6190      	str	r0, [r2, #24]
 8010a8c:	618a      	str	r2, [r1, #24]
 8010a8e:	e7f2      	b.n	8010a76 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08010a90 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8010a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a94:	461f      	mov	r7, r3
 8010a96:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8010a9a:	460d      	mov	r5, r1
 8010a9c:	4616      	mov	r6, r2
 8010a9e:	b103      	cbz	r3, 8010aa2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8010aa0:	6038      	str	r0, [r7, #0]
 8010aa2:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8010aa4:	b314      	cbz	r4, 8010aec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8010aa6:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8010aaa:	b1eb      	cbz	r3, 8010ae8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8010aac:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8010ab0:	428d      	cmp	r5, r1
 8010ab2:	db19      	blt.n	8010ae8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8010ab4:	b289      	uxth	r1, r1
 8010ab6:	8923      	ldrh	r3, [r4, #8]
 8010ab8:	440b      	add	r3, r1
 8010aba:	b21b      	sxth	r3, r3
 8010abc:	429d      	cmp	r5, r3
 8010abe:	da13      	bge.n	8010ae8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8010ac0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8010ac4:	4296      	cmp	r6, r2
 8010ac6:	db0f      	blt.n	8010ae8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8010ac8:	b292      	uxth	r2, r2
 8010aca:	8963      	ldrh	r3, [r4, #10]
 8010acc:	4413      	add	r3, r2
 8010ace:	b21b      	sxth	r3, r3
 8010ad0:	429e      	cmp	r6, r3
 8010ad2:	da09      	bge.n	8010ae8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8010ad4:	6823      	ldr	r3, [r4, #0]
 8010ad6:	1ab2      	subs	r2, r6, r2
 8010ad8:	1a69      	subs	r1, r5, r1
 8010ada:	4620      	mov	r0, r4
 8010adc:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 8010ae0:	b212      	sxth	r2, r2
 8010ae2:	463b      	mov	r3, r7
 8010ae4:	b209      	sxth	r1, r1
 8010ae6:	47c0      	blx	r8
 8010ae8:	69a4      	ldr	r4, [r4, #24]
 8010aea:	e7db      	b.n	8010aa4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8010aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010af0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8010af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010af4:	4c6d      	ldr	r4, [pc, #436]	@ (8010cac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8010af6:	b0a1      	sub	sp, #132	@ 0x84
 8010af8:	4606      	mov	r6, r0
 8010afa:	6824      	ldr	r4, [r4, #0]
 8010afc:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8010afe:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8010b02:	2400      	movs	r4, #0
 8010b04:	9303      	str	r3, [sp, #12]
 8010b06:	802c      	strh	r4, [r5, #0]
 8010b08:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8010b0a:	802c      	strh	r4, [r5, #0]
 8010b0c:	601c      	str	r4, [r3, #0]
 8010b0e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8010b12:	f7ff ffbd 	bl	8010a90 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8010b16:	f1b9 0f03 	cmp.w	r9, #3
 8010b1a:	f340 80c1 	ble.w	8010ca0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8010b1e:	4631      	mov	r1, r6
 8010b20:	a80c      	add	r0, sp, #48	@ 0x30
 8010b22:	f007 f955 	bl	8017dd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010b26:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8010b2a:	9306      	str	r3, [sp, #24]
 8010b2c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8010b30:	9307      	str	r3, [sp, #28]
 8010b32:	9b03      	ldr	r3, [sp, #12]
 8010b34:	f8d3 a000 	ldr.w	sl, [r3]
 8010b38:	f1ba 0f00 	cmp.w	sl, #0
 8010b3c:	f000 80b3 	beq.w	8010ca6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8010b40:	4651      	mov	r1, sl
 8010b42:	a810      	add	r0, sp, #64	@ 0x40
 8010b44:	f007 f944 	bl	8017dd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010b48:	2002      	movs	r0, #2
 8010b4a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 8010b4e:	9b01      	ldr	r3, [sp, #4]
 8010b50:	9a06      	ldr	r2, [sp, #24]
 8010b52:	fb91 f1f0 	sdiv	r1, r1, r0
 8010b56:	189d      	adds	r5, r3, r2
 8010b58:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 8010b5c:	9a07      	ldr	r2, [sp, #28]
 8010b5e:	4419      	add	r1, r3
 8010b60:	9b02      	ldr	r3, [sp, #8]
 8010b62:	4413      	add	r3, r2
 8010b64:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 8010b68:	1a6d      	subs	r5, r5, r1
 8010b6a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 8010b6e:	fb92 f2f0 	sdiv	r2, r2, r0
 8010b72:	440a      	add	r2, r1
 8010b74:	1a9b      	subs	r3, r3, r2
 8010b76:	435b      	muls	r3, r3
 8010b78:	fb05 3505 	mla	r5, r5, r5, r3
 8010b7c:	4f4c      	ldr	r7, [pc, #304]	@ (8010cb0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8010b7e:	ac10      	add	r4, sp, #64	@ 0x40
 8010b80:	f1b9 0f0c 	cmp.w	r9, #12
 8010b84:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010b86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010b88:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010b8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010b8c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010b90:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8010b94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010b98:	f04f 0303 	mov.w	r3, #3
 8010b9c:	bfd8      	it	le
 8010b9e:	f109 32ff 	addle.w	r2, r9, #4294967295
 8010ba2:	f04f 0400 	mov.w	r4, #0
 8010ba6:	f8cd 9000 	str.w	r9, [sp]
 8010baa:	bfcc      	ite	gt
 8010bac:	4698      	movgt	r8, r3
 8010bae:	fb92 f8f3 	sdivle	r8, r2, r3
 8010bb2:	1c63      	adds	r3, r4, #1
 8010bb4:	aa10      	add	r2, sp, #64	@ 0x40
 8010bb6:	f004 0401 	and.w	r4, r4, #1
 8010bba:	f04f 0b00 	mov.w	fp, #0
 8010bbe:	9308      	str	r3, [sp, #32]
 8010bc0:	9b00      	ldr	r3, [sp, #0]
 8010bc2:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8010bc6:	fb93 f3f8 	sdiv	r3, r3, r8
 8010bca:	3404      	adds	r4, #4
 8010bcc:	b29b      	uxth	r3, r3
 8010bce:	9304      	str	r3, [sp, #16]
 8010bd0:	9a04      	ldr	r2, [sp, #16]
 8010bd2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010bd6:	fb13 f302 	smulbb	r3, r3, r2
 8010bda:	9a01      	ldr	r2, [sp, #4]
 8010bdc:	b29b      	uxth	r3, r3
 8010bde:	1899      	adds	r1, r3, r2
 8010be0:	9305      	str	r3, [sp, #20]
 8010be2:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8010be6:	b209      	sxth	r1, r1
 8010be8:	4299      	cmp	r1, r3
 8010bea:	db4d      	blt.n	8010c88 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8010bec:	8932      	ldrh	r2, [r6, #8]
 8010bee:	4413      	add	r3, r2
 8010bf0:	b21b      	sxth	r3, r3
 8010bf2:	4299      	cmp	r1, r3
 8010bf4:	da48      	bge.n	8010c88 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8010bf6:	9b04      	ldr	r3, [sp, #16]
 8010bf8:	6827      	ldr	r7, [r4, #0]
 8010bfa:	fb17 f703 	smulbb	r7, r7, r3
 8010bfe:	9b02      	ldr	r3, [sp, #8]
 8010c00:	b2bf      	uxth	r7, r7
 8010c02:	18fa      	adds	r2, r7, r3
 8010c04:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8010c08:	b212      	sxth	r2, r2
 8010c0a:	429a      	cmp	r2, r3
 8010c0c:	db3c      	blt.n	8010c88 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8010c0e:	8970      	ldrh	r0, [r6, #10]
 8010c10:	4403      	add	r3, r0
 8010c12:	b21b      	sxth	r3, r3
 8010c14:	429a      	cmp	r2, r3
 8010c16:	da37      	bge.n	8010c88 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8010c18:	2300      	movs	r3, #0
 8010c1a:	4630      	mov	r0, r6
 8010c1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010c1e:	ab0b      	add	r3, sp, #44	@ 0x2c
 8010c20:	f7ff ff36 	bl	8010a90 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8010c24:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010c26:	b37a      	cbz	r2, 8010c88 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8010c28:	4552      	cmp	r2, sl
 8010c2a:	d02d      	beq.n	8010c88 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8010c2c:	4611      	mov	r1, r2
 8010c2e:	a80e      	add	r0, sp, #56	@ 0x38
 8010c30:	9209      	str	r2, [sp, #36]	@ 0x24
 8010c32:	f007 f8cd 	bl	8017dd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010c36:	f04f 0e02 	mov.w	lr, #2
 8010c3a:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8010c3e:	9a06      	ldr	r2, [sp, #24]
 8010c40:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8010c44:	9b01      	ldr	r3, [sp, #4]
 8010c46:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 8010c4a:	4413      	add	r3, r2
 8010c4c:	9a07      	ldr	r2, [sp, #28]
 8010c4e:	fb91 f1fe 	sdiv	r1, r1, lr
 8010c52:	fb9c fcfe 	sdiv	ip, ip, lr
 8010c56:	4401      	add	r1, r0
 8010c58:	1a58      	subs	r0, r3, r1
 8010c5a:	9b02      	ldr	r3, [sp, #8]
 8010c5c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 8010c60:	4413      	add	r3, r2
 8010c62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010c64:	448c      	add	ip, r1
 8010c66:	eba3 030c 	sub.w	r3, r3, ip
 8010c6a:	435b      	muls	r3, r3
 8010c6c:	fb00 3300 	mla	r3, r0, r0, r3
 8010c70:	42ab      	cmp	r3, r5
 8010c72:	d208      	bcs.n	8010c86 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8010c74:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010c76:	461d      	mov	r5, r3
 8010c78:	9803      	ldr	r0, [sp, #12]
 8010c7a:	6001      	str	r1, [r0, #0]
 8010c7c:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8010c7e:	9805      	ldr	r0, [sp, #20]
 8010c80:	8008      	strh	r0, [r1, #0]
 8010c82:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8010c84:	800f      	strh	r7, [r1, #0]
 8010c86:	4692      	mov	sl, r2
 8010c88:	f10b 0b01 	add.w	fp, fp, #1
 8010c8c:	3408      	adds	r4, #8
 8010c8e:	f1bb 0f04 	cmp.w	fp, #4
 8010c92:	d19d      	bne.n	8010bd0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8010c94:	9b00      	ldr	r3, [sp, #0]
 8010c96:	9c08      	ldr	r4, [sp, #32]
 8010c98:	444b      	add	r3, r9
 8010c9a:	4544      	cmp	r4, r8
 8010c9c:	9300      	str	r3, [sp, #0]
 8010c9e:	d188      	bne.n	8010bb2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8010ca0:	b021      	add	sp, #132	@ 0x84
 8010ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ca6:	f04f 35ff 	mov.w	r5, #4294967295
 8010caa:	e767      	b.n	8010b7c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8010cac:	24026418 	.word	0x24026418
 8010cb0:	08026258 	.word	0x08026258

08010cb4 <_ZN8touchgfx4RectaNERKS0_>:
 8010cb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010cb8:	f9b1 7000 	ldrsh.w	r7, [r1]
 8010cbc:	888c      	ldrh	r4, [r1, #4]
 8010cbe:	f9b0 9000 	ldrsh.w	r9, [r0]
 8010cc2:	443c      	add	r4, r7
 8010cc4:	b2a4      	uxth	r4, r4
 8010cc6:	fa0f f884 	sxth.w	r8, r4
 8010cca:	45c1      	cmp	r9, r8
 8010ccc:	da2f      	bge.n	8010d2e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8010cce:	8882      	ldrh	r2, [r0, #4]
 8010cd0:	444a      	add	r2, r9
 8010cd2:	b292      	uxth	r2, r2
 8010cd4:	fa0f fe82 	sxth.w	lr, r2
 8010cd8:	4577      	cmp	r7, lr
 8010cda:	da28      	bge.n	8010d2e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8010cdc:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8010ce0:	88cb      	ldrh	r3, [r1, #6]
 8010ce2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8010ce6:	442b      	add	r3, r5
 8010ce8:	b21b      	sxth	r3, r3
 8010cea:	429e      	cmp	r6, r3
 8010cec:	da1f      	bge.n	8010d2e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8010cee:	88c3      	ldrh	r3, [r0, #6]
 8010cf0:	4433      	add	r3, r6
 8010cf2:	b29b      	uxth	r3, r3
 8010cf4:	fa0f fc83 	sxth.w	ip, r3
 8010cf8:	4565      	cmp	r5, ip
 8010cfa:	da18      	bge.n	8010d2e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8010cfc:	454f      	cmp	r7, r9
 8010cfe:	bfb8      	it	lt
 8010d00:	464f      	movlt	r7, r9
 8010d02:	42b5      	cmp	r5, r6
 8010d04:	bfb8      	it	lt
 8010d06:	4635      	movlt	r5, r6
 8010d08:	45f0      	cmp	r8, lr
 8010d0a:	bfd8      	it	le
 8010d0c:	4622      	movle	r2, r4
 8010d0e:	1bd2      	subs	r2, r2, r7
 8010d10:	8082      	strh	r2, [r0, #4]
 8010d12:	884a      	ldrh	r2, [r1, #2]
 8010d14:	88c9      	ldrh	r1, [r1, #6]
 8010d16:	8007      	strh	r7, [r0, #0]
 8010d18:	440a      	add	r2, r1
 8010d1a:	8045      	strh	r5, [r0, #2]
 8010d1c:	b292      	uxth	r2, r2
 8010d1e:	b211      	sxth	r1, r2
 8010d20:	458c      	cmp	ip, r1
 8010d22:	bfa8      	it	ge
 8010d24:	4613      	movge	r3, r2
 8010d26:	1b5b      	subs	r3, r3, r5
 8010d28:	80c3      	strh	r3, [r0, #6]
 8010d2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d2e:	2300      	movs	r3, #0
 8010d30:	8003      	strh	r3, [r0, #0]
 8010d32:	8043      	strh	r3, [r0, #2]
 8010d34:	8083      	strh	r3, [r0, #4]
 8010d36:	80c3      	strh	r3, [r0, #6]
 8010d38:	e7f7      	b.n	8010d2a <_ZN8touchgfx4RectaNERKS0_+0x76>

08010d3a <_ZNK8touchgfx4Rect7isEmptyEv>:
 8010d3a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	dd06      	ble.n	8010d50 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8010d42:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8010d46:	2800      	cmp	r0, #0
 8010d48:	bfcc      	ite	gt
 8010d4a:	2000      	movgt	r0, #0
 8010d4c:	2001      	movle	r0, #1
 8010d4e:	4770      	bx	lr
 8010d50:	2001      	movs	r0, #1
 8010d52:	4770      	bx	lr

08010d54 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8010d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d58:	2300      	movs	r3, #0
 8010d5a:	4604      	mov	r4, r0
 8010d5c:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8010d5e:	8003      	strh	r3, [r0, #0]
 8010d60:	8043      	strh	r3, [r0, #2]
 8010d62:	8083      	strh	r3, [r0, #4]
 8010d64:	80c3      	strh	r3, [r0, #6]
 8010d66:	2d00      	cmp	r5, #0
 8010d68:	d040      	beq.n	8010dec <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8010d6a:	1d28      	adds	r0, r5, #4
 8010d6c:	f7ff ffe5 	bl	8010d3a <_ZNK8touchgfx4Rect7isEmptyEv>
 8010d70:	b988      	cbnz	r0, 8010d96 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8010d72:	4620      	mov	r0, r4
 8010d74:	f7ff ffe1 	bl	8010d3a <_ZNK8touchgfx4Rect7isEmptyEv>
 8010d78:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8010d7c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8010d80:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8010d84:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8010d88:	b138      	cbz	r0, 8010d9a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8010d8a:	8022      	strh	r2, [r4, #0]
 8010d8c:	8063      	strh	r3, [r4, #2]
 8010d8e:	f8a4 e004 	strh.w	lr, [r4, #4]
 8010d92:	f8a4 c006 	strh.w	ip, [r4, #6]
 8010d96:	69ad      	ldr	r5, [r5, #24]
 8010d98:	e7e5      	b.n	8010d66 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8010d9a:	f9b4 0000 	ldrsh.w	r0, [r4]
 8010d9e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8010da2:	4290      	cmp	r0, r2
 8010da4:	4607      	mov	r7, r0
 8010da6:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8010daa:	460e      	mov	r6, r1
 8010dac:	bfa8      	it	ge
 8010dae:	4617      	movge	r7, r2
 8010db0:	4299      	cmp	r1, r3
 8010db2:	4472      	add	r2, lr
 8010db4:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8010db8:	bfa8      	it	ge
 8010dba:	461e      	movge	r6, r3
 8010dbc:	4440      	add	r0, r8
 8010dbe:	4471      	add	r1, lr
 8010dc0:	4463      	add	r3, ip
 8010dc2:	b200      	sxth	r0, r0
 8010dc4:	8027      	strh	r7, [r4, #0]
 8010dc6:	b212      	sxth	r2, r2
 8010dc8:	8066      	strh	r6, [r4, #2]
 8010dca:	b209      	sxth	r1, r1
 8010dcc:	b21b      	sxth	r3, r3
 8010dce:	4290      	cmp	r0, r2
 8010dd0:	bfac      	ite	ge
 8010dd2:	ebc7 0200 	rsbge	r2, r7, r0
 8010dd6:	ebc7 0202 	rsblt	r2, r7, r2
 8010dda:	4299      	cmp	r1, r3
 8010ddc:	bfac      	ite	ge
 8010dde:	ebc6 0301 	rsbge	r3, r6, r1
 8010de2:	ebc6 0303 	rsblt	r3, r6, r3
 8010de6:	80a2      	strh	r2, [r4, #4]
 8010de8:	80e3      	strh	r3, [r4, #6]
 8010dea:	e7d4      	b.n	8010d96 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8010dec:	4620      	mov	r0, r4
 8010dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010df2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8010df2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010df6:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8010dfa:	b383      	cbz	r3, 8010e5e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8010dfc:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8010dfe:	b374      	cbz	r4, 8010e5e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8010e00:	f9b1 5000 	ldrsh.w	r5, [r1]
 8010e04:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8010e08:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8010e0c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8010e10:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8010e14:	b303      	cbz	r3, 8010e58 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8010e16:	4668      	mov	r0, sp
 8010e18:	1d21      	adds	r1, r4, #4
 8010e1a:	f8ad 5000 	strh.w	r5, [sp]
 8010e1e:	f8ad 6002 	strh.w	r6, [sp, #2]
 8010e22:	f8ad 7004 	strh.w	r7, [sp, #4]
 8010e26:	f8ad 8006 	strh.w	r8, [sp, #6]
 8010e2a:	f7ff ff43 	bl	8010cb4 <_ZN8touchgfx4RectaNERKS0_>
 8010e2e:	4668      	mov	r0, sp
 8010e30:	f7ff ff83 	bl	8010d3a <_ZNK8touchgfx4Rect7isEmptyEv>
 8010e34:	b980      	cbnz	r0, 8010e58 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8010e36:	f8bd 3000 	ldrh.w	r3, [sp]
 8010e3a:	4669      	mov	r1, sp
 8010e3c:	88a2      	ldrh	r2, [r4, #4]
 8010e3e:	4620      	mov	r0, r4
 8010e40:	1a9b      	subs	r3, r3, r2
 8010e42:	88e2      	ldrh	r2, [r4, #6]
 8010e44:	f8ad 3000 	strh.w	r3, [sp]
 8010e48:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010e4c:	1a9b      	subs	r3, r3, r2
 8010e4e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8010e52:	6823      	ldr	r3, [r4, #0]
 8010e54:	689b      	ldr	r3, [r3, #8]
 8010e56:	4798      	blx	r3
 8010e58:	69a4      	ldr	r4, [r4, #24]
 8010e5a:	2c00      	cmp	r4, #0
 8010e5c:	d1d8      	bne.n	8010e10 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8010e5e:	b002      	add	sp, #8
 8010e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010e64 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8010e64:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010e66:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8010e6a:	460d      	mov	r5, r1
 8010e6c:	4616      	mov	r6, r2
 8010e6e:	b323      	cbz	r3, 8010eba <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8010e70:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8010e72:	b314      	cbz	r4, 8010eba <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8010e74:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8010e78:	b1eb      	cbz	r3, 8010eb6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8010e7a:	6828      	ldr	r0, [r5, #0]
 8010e7c:	466b      	mov	r3, sp
 8010e7e:	6869      	ldr	r1, [r5, #4]
 8010e80:	c303      	stmia	r3!, {r0, r1}
 8010e82:	4668      	mov	r0, sp
 8010e84:	1d21      	adds	r1, r4, #4
 8010e86:	f7ff ff15 	bl	8010cb4 <_ZN8touchgfx4RectaNERKS0_>
 8010e8a:	4668      	mov	r0, sp
 8010e8c:	f7ff ff55 	bl	8010d3a <_ZNK8touchgfx4Rect7isEmptyEv>
 8010e90:	b988      	cbnz	r0, 8010eb6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8010e92:	f8bd 3000 	ldrh.w	r3, [sp]
 8010e96:	4669      	mov	r1, sp
 8010e98:	88a2      	ldrh	r2, [r4, #4]
 8010e9a:	4620      	mov	r0, r4
 8010e9c:	1a9b      	subs	r3, r3, r2
 8010e9e:	88e2      	ldrh	r2, [r4, #6]
 8010ea0:	f8ad 3000 	strh.w	r3, [sp]
 8010ea4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010ea8:	1a9b      	subs	r3, r3, r2
 8010eaa:	4632      	mov	r2, r6
 8010eac:	f8ad 3002 	strh.w	r3, [sp, #2]
 8010eb0:	6823      	ldr	r3, [r4, #0]
 8010eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010eb4:	4798      	blx	r3
 8010eb6:	69a4      	ldr	r4, [r4, #24]
 8010eb8:	e7db      	b.n	8010e72 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8010eba:	b002      	add	sp, #8
 8010ebc:	bd70      	pop	{r4, r5, r6, pc}

08010ebe <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8010ebe:	6803      	ldr	r3, [r0, #0]
 8010ec0:	b513      	push	{r0, r1, r4, lr}
 8010ec2:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	e9cd 3300 	strd	r3, r3, [sp]
 8010ecc:	466b      	mov	r3, sp
 8010ece:	47a0      	blx	r4
 8010ed0:	b002      	add	sp, #8
 8010ed2:	bd10      	pop	{r4, pc}

08010ed4 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8010ed4:	2301      	movs	r3, #1
 8010ed6:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8010eda:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8010ede:	4770      	bx	lr

08010ee0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8010ee0:	2301      	movs	r3, #1
 8010ee2:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8010ee6:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8010eea:	4770      	bx	lr

08010eec <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8010eec:	6843      	ldr	r3, [r0, #4]
 8010eee:	2201      	movs	r2, #1
 8010ef0:	725a      	strb	r2, [r3, #9]
 8010ef2:	6840      	ldr	r0, [r0, #4]
 8010ef4:	6803      	ldr	r3, [r0, #0]
 8010ef6:	691b      	ldr	r3, [r3, #16]
 8010ef8:	4718      	bx	r3

08010efa <_ZN8touchgfx3HAL8flushDMAEv>:
 8010efa:	6840      	ldr	r0, [r0, #4]
 8010efc:	6803      	ldr	r3, [r0, #0]
 8010efe:	689b      	ldr	r3, [r3, #8]
 8010f00:	4718      	bx	r3

08010f02 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8010f02:	b530      	push	{r4, r5, lr}
 8010f04:	b08b      	sub	sp, #44	@ 0x2c
 8010f06:	6804      	ldr	r4, [r0, #0]
 8010f08:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8010f0c:	9509      	str	r5, [sp, #36]	@ 0x24
 8010f0e:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8010f12:	9508      	str	r5, [sp, #32]
 8010f14:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8010f18:	9507      	str	r5, [sp, #28]
 8010f1a:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8010f1e:	9506      	str	r5, [sp, #24]
 8010f20:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8010f24:	9505      	str	r5, [sp, #20]
 8010f26:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8010f2a:	9504      	str	r5, [sp, #16]
 8010f2c:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8010f30:	9503      	str	r5, [sp, #12]
 8010f32:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8010f36:	9502      	str	r5, [sp, #8]
 8010f38:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8010f3c:	e9cd 3500 	strd	r3, r5, [sp]
 8010f40:	4613      	mov	r3, r2
 8010f42:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 8010f44:	2200      	movs	r2, #0
 8010f46:	47a0      	blx	r4
 8010f48:	b00b      	add	sp, #44	@ 0x2c
 8010f4a:	bd30      	pop	{r4, r5, pc}

08010f4c <_ZN8touchgfx3HAL10beginFrameEv>:
 8010f4c:	4b04      	ldr	r3, [pc, #16]	@ (8010f60 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8010f4e:	781b      	ldrb	r3, [r3, #0]
 8010f50:	b123      	cbz	r3, 8010f5c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8010f52:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 8010f56:	f080 0001 	eor.w	r0, r0, #1
 8010f5a:	4770      	bx	lr
 8010f5c:	2001      	movs	r0, #1
 8010f5e:	4770      	bx	lr
 8010f60:	24026416 	.word	0x24026416

08010f64 <_ZN8touchgfx3HAL8endFrameEv>:
 8010f64:	b510      	push	{r4, lr}
 8010f66:	4604      	mov	r4, r0
 8010f68:	6840      	ldr	r0, [r0, #4]
 8010f6a:	6803      	ldr	r3, [r0, #0]
 8010f6c:	689b      	ldr	r3, [r3, #8]
 8010f6e:	4798      	blx	r3
 8010f70:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8010f74:	b113      	cbz	r3, 8010f7c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8010f76:	2301      	movs	r3, #1
 8010f78:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8010f7c:	bd10      	pop	{r4, pc}

08010f7e <_ZN8touchgfx3HAL10initializeEv>:
 8010f7e:	b510      	push	{r4, lr}
 8010f80:	4604      	mov	r4, r0
 8010f82:	f7f1 fea9 	bl	8002cd8 <_ZN8touchgfx10OSWrappers10initializeEv>
 8010f86:	f7f0 feff 	bl	8001d88 <_ZN8touchgfx4GPIO4initEv>
 8010f8a:	6860      	ldr	r0, [r4, #4]
 8010f8c:	6803      	ldr	r3, [r0, #0]
 8010f8e:	68db      	ldr	r3, [r3, #12]
 8010f90:	4798      	blx	r3
 8010f92:	68e0      	ldr	r0, [r4, #12]
 8010f94:	6803      	ldr	r3, [r0, #0]
 8010f96:	689b      	ldr	r3, [r3, #8]
 8010f98:	4798      	blx	r3
 8010f9a:	6823      	ldr	r3, [r4, #0]
 8010f9c:	4620      	mov	r0, r4
 8010f9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010fa4:	4718      	bx	r3
	...

08010fa8 <_ZN8touchgfx3HAL4tickEv>:
 8010fa8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010faa:	6803      	ldr	r3, [r0, #0]
 8010fac:	4604      	mov	r4, r0
 8010fae:	4d5b      	ldr	r5, [pc, #364]	@ (801111c <_ZN8touchgfx3HAL4tickEv+0x174>)
 8010fb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8010fb4:	4798      	blx	r3
 8010fb6:	2800      	cmp	r0, #0
 8010fb8:	f000 8095 	beq.w	80110e6 <_ZN8touchgfx3HAL4tickEv+0x13e>
 8010fbc:	2001      	movs	r0, #1
 8010fbe:	2600      	movs	r6, #0
 8010fc0:	f7f0 fe48 	bl	8001c54 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8010fc4:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8010fc8:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8010fcc:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8010fd0:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8010fd4:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8010fd8:	b133      	cbz	r3, 8010fe8 <_ZN8touchgfx3HAL4tickEv+0x40>
 8010fda:	6823      	ldr	r3, [r4, #0]
 8010fdc:	4620      	mov	r0, r4
 8010fde:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8010fe2:	4798      	blx	r3
 8010fe4:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8010fe8:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8010fec:	2601      	movs	r6, #1
 8010fee:	6862      	ldr	r2, [r4, #4]
 8010ff0:	f083 0301 	eor.w	r3, r3, #1
 8010ff4:	702e      	strb	r6, [r5, #0]
 8010ff6:	7253      	strb	r3, [r2, #9]
 8010ff8:	f005 fd8c 	bl	8016b14 <_ZN8touchgfx11Application11getInstanceEv>
 8010ffc:	6803      	ldr	r3, [r0, #0]
 8010ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011000:	4798      	blx	r3
 8011002:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8011006:	b90b      	cbnz	r3, 801100c <_ZN8touchgfx3HAL4tickEv+0x64>
 8011008:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 801100c:	f005 fd82 	bl	8016b14 <_ZN8touchgfx11Application11getInstanceEv>
 8011010:	6803      	ldr	r3, [r0, #0]
 8011012:	695b      	ldr	r3, [r3, #20]
 8011014:	4798      	blx	r3
 8011016:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8011018:	6803      	ldr	r3, [r0, #0]
 801101a:	691b      	ldr	r3, [r3, #16]
 801101c:	4798      	blx	r3
 801101e:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8011022:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 8011026:	3b01      	subs	r3, #1
 8011028:	b2db      	uxtb	r3, r3
 801102a:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 801102e:	b10a      	cbz	r2, 8011034 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8011030:	2b00      	cmp	r3, #0
 8011032:	d1eb      	bne.n	801100c <_ZN8touchgfx3HAL4tickEv+0x64>
 8011034:	4a3a      	ldr	r2, [pc, #232]	@ (8011120 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8011036:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 801103a:	7813      	ldrb	r3, [r2, #0]
 801103c:	3301      	adds	r3, #1
 801103e:	b25b      	sxtb	r3, r3
 8011040:	4299      	cmp	r1, r3
 8011042:	7013      	strb	r3, [r2, #0]
 8011044:	dc10      	bgt.n	8011068 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8011046:	2300      	movs	r3, #0
 8011048:	68e0      	ldr	r0, [r4, #12]
 801104a:	a902      	add	r1, sp, #8
 801104c:	7013      	strb	r3, [r2, #0]
 801104e:	aa03      	add	r2, sp, #12
 8011050:	6803      	ldr	r3, [r0, #0]
 8011052:	68db      	ldr	r3, [r3, #12]
 8011054:	4798      	blx	r3
 8011056:	6823      	ldr	r3, [r4, #0]
 8011058:	2800      	cmp	r0, #0
 801105a:	d050      	beq.n	80110fe <_ZN8touchgfx3HAL4tickEv+0x156>
 801105c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8011060:	4620      	mov	r0, r4
 8011062:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8011066:	4798      	blx	r3
 8011068:	2300      	movs	r3, #0
 801106a:	6960      	ldr	r0, [r4, #20]
 801106c:	f88d 3007 	strb.w	r3, [sp, #7]
 8011070:	b158      	cbz	r0, 801108a <_ZN8touchgfx3HAL4tickEv+0xe2>
 8011072:	6803      	ldr	r3, [r0, #0]
 8011074:	f10d 0107 	add.w	r1, sp, #7
 8011078:	68db      	ldr	r3, [r3, #12]
 801107a:	4798      	blx	r3
 801107c:	b128      	cbz	r0, 801108a <_ZN8touchgfx3HAL4tickEv+0xe2>
 801107e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8011080:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011084:	6803      	ldr	r3, [r0, #0]
 8011086:	68db      	ldr	r3, [r3, #12]
 8011088:	4798      	blx	r3
 801108a:	f104 001c 	add.w	r0, r4, #28
 801108e:	f012 ff2f 	bl	8023ef0 <_ZN8touchgfx8Gestures4tickEv>
 8011092:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8011096:	b30b      	cbz	r3, 80110dc <_ZN8touchgfx3HAL4tickEv+0x134>
 8011098:	6920      	ldr	r0, [r4, #16]
 801109a:	6803      	ldr	r3, [r0, #0]
 801109c:	691b      	ldr	r3, [r3, #16]
 801109e:	4798      	blx	r3
 80110a0:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80110a2:	4606      	mov	r6, r0
 80110a4:	b903      	cbnz	r3, 80110a8 <_ZN8touchgfx3HAL4tickEv+0x100>
 80110a6:	6760      	str	r0, [r4, #116]	@ 0x74
 80110a8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80110aa:	4a1e      	ldr	r2, [pc, #120]	@ (8011124 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80110ac:	1af3      	subs	r3, r6, r3
 80110ae:	4293      	cmp	r3, r2
 80110b0:	d914      	bls.n	80110dc <_ZN8touchgfx3HAL4tickEv+0x134>
 80110b2:	6920      	ldr	r0, [r4, #16]
 80110b4:	6803      	ldr	r3, [r0, #0]
 80110b6:	699b      	ldr	r3, [r3, #24]
 80110b8:	4798      	blx	r3
 80110ba:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80110bc:	2264      	movs	r2, #100	@ 0x64
 80110be:	1af3      	subs	r3, r6, r3
 80110c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80110c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80110c8:	2800      	cmp	r0, #0
 80110ca:	dc1d      	bgt.n	8011108 <_ZN8touchgfx3HAL4tickEv+0x160>
 80110cc:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 80110d0:	6920      	ldr	r0, [r4, #16]
 80110d2:	2100      	movs	r1, #0
 80110d4:	6803      	ldr	r3, [r0, #0]
 80110d6:	69db      	ldr	r3, [r3, #28]
 80110d8:	4798      	blx	r3
 80110da:	6766      	str	r6, [r4, #116]	@ 0x74
 80110dc:	f005 fd1a 	bl	8016b14 <_ZN8touchgfx11Application11getInstanceEv>
 80110e0:	6803      	ldr	r3, [r0, #0]
 80110e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80110e4:	4798      	blx	r3
 80110e6:	6823      	ldr	r3, [r4, #0]
 80110e8:	4620      	mov	r0, r4
 80110ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80110ee:	4798      	blx	r3
 80110f0:	2001      	movs	r0, #1
 80110f2:	f7f0 fddf 	bl	8001cb4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80110f6:	2300      	movs	r3, #0
 80110f8:	702b      	strb	r3, [r5, #0]
 80110fa:	b004      	add	sp, #16
 80110fc:	bd70      	pop	{r4, r5, r6, pc}
 80110fe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8011102:	4620      	mov	r0, r4
 8011104:	4798      	blx	r3
 8011106:	e7af      	b.n	8011068 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8011108:	2863      	cmp	r0, #99	@ 0x63
 801110a:	bfcb      	itete	gt
 801110c:	2300      	movgt	r3, #0
 801110e:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 8011112:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 8011116:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 801111a:	e7d9      	b.n	80110d0 <_ZN8touchgfx3HAL4tickEv+0x128>
 801111c:	2402641c 	.word	0x2402641c
 8011120:	2402641d 	.word	0x2402641d
 8011124:	05f5e100 	.word	0x05f5e100

08011128 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8011128:	b510      	push	{r4, lr}
 801112a:	4604      	mov	r4, r0
 801112c:	f7f1 fe04 	bl	8002d38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8011130:	2200      	movs	r2, #0
 8011132:	6863      	ldr	r3, [r4, #4]
 8011134:	729a      	strb	r2, [r3, #10]
 8011136:	bd10      	pop	{r4, pc}

08011138 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8011138:	65c1      	str	r1, [r0, #92]	@ 0x5c
 801113a:	301c      	adds	r0, #28
 801113c:	f012 bed6 	b.w	8023eec <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08011140 <_ZN8touchgfx3HAL5touchEll>:
 8011140:	b530      	push	{r4, r5, lr}
 8011142:	b087      	sub	sp, #28
 8011144:	4604      	mov	r4, r0
 8011146:	a804      	add	r0, sp, #16
 8011148:	e9cd 1204 	strd	r1, r2, [sp, #16]
 801114c:	f005 faca 	bl	80166e4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8011150:	9b04      	ldr	r3, [sp, #16]
 8011152:	a906      	add	r1, sp, #24
 8011154:	a803      	add	r0, sp, #12
 8011156:	f8ad 300c 	strh.w	r3, [sp, #12]
 801115a:	9b05      	ldr	r3, [sp, #20]
 801115c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8011160:	f005 fb12 	bl	8016788 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8011164:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8011168:	f104 001c 	add.w	r0, r4, #28
 801116c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8011170:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8011174:	b189      	cbz	r1, 801119a <_ZN8touchgfx3HAL5touchEll+0x5a>
 8011176:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 801117a:	9300      	str	r3, [sp, #0]
 801117c:	4613      	mov	r3, r2
 801117e:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 8011182:	462a      	mov	r2, r5
 8011184:	f012 fec2 	bl	8023f0c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8011188:	b128      	cbz	r0, 8011196 <_ZN8touchgfx3HAL5touchEll+0x56>
 801118a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801118e:	6623      	str	r3, [r4, #96]	@ 0x60
 8011190:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8011194:	6663      	str	r3, [r4, #100]	@ 0x64
 8011196:	b007      	add	sp, #28
 8011198:	bd30      	pop	{r4, r5, pc}
 801119a:	f012 fef7 	bl	8023f8c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801119e:	2301      	movs	r3, #1
 80111a0:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 80111a4:	e7f1      	b.n	801118a <_ZN8touchgfx3HAL5touchEll+0x4a>

080111a6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80111a6:	b510      	push	{r4, lr}
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d046      	beq.n	801123a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80111ac:	ea81 0002 	eor.w	r0, r1, r2
 80111b0:	07c4      	lsls	r4, r0, #31
 80111b2:	d508      	bpl.n	80111c6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80111b4:	440b      	add	r3, r1
 80111b6:	3a01      	subs	r2, #1
 80111b8:	428b      	cmp	r3, r1
 80111ba:	d93e      	bls.n	801123a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80111bc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80111c0:	f801 0b01 	strb.w	r0, [r1], #1
 80111c4:	e7f8      	b.n	80111b8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80111c6:	07d0      	lsls	r0, r2, #31
 80111c8:	bf42      	ittt	mi
 80111ca:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80111ce:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80111d2:	f801 0b01 	strbmi.w	r0, [r1], #1
 80111d6:	2b01      	cmp	r3, #1
 80111d8:	d911      	bls.n	80111fe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80111da:	ea81 0402 	eor.w	r4, r1, r2
 80111de:	4610      	mov	r0, r2
 80111e0:	07a4      	lsls	r4, r4, #30
 80111e2:	d022      	beq.n	801122a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 80111e4:	f023 0401 	bic.w	r4, r3, #1
 80111e8:	440c      	add	r4, r1
 80111ea:	428c      	cmp	r4, r1
 80111ec:	4602      	mov	r2, r0
 80111ee:	d904      	bls.n	80111fa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 80111f0:	8812      	ldrh	r2, [r2, #0]
 80111f2:	3002      	adds	r0, #2
 80111f4:	f821 2b02 	strh.w	r2, [r1], #2
 80111f8:	e7f7      	b.n	80111ea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 80111fa:	f003 0301 	and.w	r3, r3, #1
 80111fe:	f023 0003 	bic.w	r0, r3, #3
 8011202:	4408      	add	r0, r1
 8011204:	4288      	cmp	r0, r1
 8011206:	4614      	mov	r4, r2
 8011208:	d904      	bls.n	8011214 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 801120a:	6824      	ldr	r4, [r4, #0]
 801120c:	3204      	adds	r2, #4
 801120e:	f841 4b04 	str.w	r4, [r1], #4
 8011212:	e7f7      	b.n	8011204 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8011214:	f003 0303 	and.w	r3, r3, #3
 8011218:	3a01      	subs	r2, #1
 801121a:	440b      	add	r3, r1
 801121c:	428b      	cmp	r3, r1
 801121e:	d90c      	bls.n	801123a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8011220:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8011224:	f801 0b01 	strb.w	r0, [r1], #1
 8011228:	e7f8      	b.n	801121c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 801122a:	0790      	lsls	r0, r2, #30
 801122c:	d0e7      	beq.n	80111fe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801122e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8011232:	3b02      	subs	r3, #2
 8011234:	f821 0b02 	strh.w	r0, [r1], #2
 8011238:	e7e1      	b.n	80111fe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801123a:	2001      	movs	r0, #1
 801123c:	bd10      	pop	{r4, pc}

0801123e <_ZN8touchgfx3HAL7noTouchEv>:
 801123e:	b510      	push	{r4, lr}
 8011240:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 8011244:	4604      	mov	r4, r0
 8011246:	b153      	cbz	r3, 801125e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8011248:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 801124c:	2101      	movs	r1, #1
 801124e:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 8011252:	301c      	adds	r0, #28
 8011254:	f012 fe9a 	bl	8023f8c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8011258:	2300      	movs	r3, #0
 801125a:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 801125e:	bd10      	pop	{r4, pc}

08011260 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8011260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011264:	b085      	sub	sp, #20
 8011266:	4604      	mov	r4, r0
 8011268:	2000      	movs	r0, #0
 801126a:	4699      	mov	r9, r3
 801126c:	ad04      	add	r5, sp, #16
 801126e:	460f      	mov	r7, r1
 8011270:	4690      	mov	r8, r2
 8011272:	f845 0d04 	str.w	r0, [r5, #-4]!
 8011276:	69a0      	ldr	r0, [r4, #24]
 8011278:	6806      	ldr	r6, [r0, #0]
 801127a:	9501      	str	r5, [sp, #4]
 801127c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8011280:	9500      	str	r5, [sp, #0]
 8011282:	6835      	ldr	r5, [r6, #0]
 8011284:	47a8      	blx	r5
 8011286:	4d10      	ldr	r5, [pc, #64]	@ (80112c8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8011288:	4606      	mov	r6, r0
 801128a:	f8a5 9000 	strh.w	r9, [r5]
 801128e:	f7f3 f83f 	bl	8004310 <_ZN8touchgfx3HAL3lcdEv>
 8011292:	6803      	ldr	r3, [r0, #0]
 8011294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011296:	4798      	blx	r3
 8011298:	b128      	cbz	r0, 80112a6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 801129a:	2801      	cmp	r0, #1
 801129c:	d00b      	beq.n	80112b6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 801129e:	4630      	mov	r0, r6
 80112a0:	b005      	add	sp, #20
 80112a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80112a6:	882b      	ldrh	r3, [r5, #0]
 80112a8:	fb08 7203 	mla	r2, r8, r3, r7
 80112ac:	9b03      	ldr	r3, [sp, #12]
 80112ae:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80112b2:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80112b4:	e7f3      	b.n	801129e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80112b6:	882a      	ldrh	r2, [r5, #0]
 80112b8:	9b03      	ldr	r3, [sp, #12]
 80112ba:	fb08 7202 	mla	r2, r8, r2, r7
 80112be:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80112c2:	1a9a      	subs	r2, r3, r2
 80112c4:	63e2      	str	r2, [r4, #60]	@ 0x3c
 80112c6:	e7ea      	b.n	801129e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80112c8:	24026412 	.word	0x24026412

080112cc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 80112cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112ce:	b08b      	sub	sp, #44	@ 0x2c
 80112d0:	4617      	mov	r7, r2
 80112d2:	4604      	mov	r4, r0
 80112d4:	460e      	mov	r6, r1
 80112d6:	461d      	mov	r5, r3
 80112d8:	f7f3 f81a 	bl	8004310 <_ZN8touchgfx3HAL3lcdEv>
 80112dc:	6803      	ldr	r3, [r0, #0]
 80112de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112e0:	4798      	blx	r3
 80112e2:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 80112e6:	9007      	str	r0, [sp, #28]
 80112e8:	4631      	mov	r1, r6
 80112ea:	6822      	ldr	r2, [r4, #0]
 80112ec:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80112f0:	4b0c      	ldr	r3, [pc, #48]	@ (8011324 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 80112f2:	4620      	mov	r0, r4
 80112f4:	881b      	ldrh	r3, [r3, #0]
 80112f6:	9306      	str	r3, [sp, #24]
 80112f8:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80112fc:	9305      	str	r3, [sp, #20]
 80112fe:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8011302:	9304      	str	r3, [sp, #16]
 8011304:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8011308:	9303      	str	r3, [sp, #12]
 801130a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801130e:	9302      	str	r3, [sp, #8]
 8011310:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8011314:	e9cd 5300 	strd	r5, r3, [sp]
 8011318:	463b      	mov	r3, r7
 801131a:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 801131c:	2200      	movs	r2, #0
 801131e:	47a8      	blx	r5
 8011320:	b00b      	add	sp, #44	@ 0x2c
 8011322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011324:	24026412 	.word	0x24026412

08011328 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8011328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801132c:	4698      	mov	r8, r3
 801132e:	6803      	ldr	r3, [r0, #0]
 8011330:	b08b      	sub	sp, #44	@ 0x2c
 8011332:	4617      	mov	r7, r2
 8011334:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 8011336:	460e      	mov	r6, r1
 8011338:	4b13      	ldr	r3, [pc, #76]	@ (8011388 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 801133a:	4604      	mov	r4, r0
 801133c:	f8b3 9000 	ldrh.w	r9, [r3]
 8011340:	f7f2 ffe6 	bl	8004310 <_ZN8touchgfx3HAL3lcdEv>
 8011344:	6803      	ldr	r3, [r0, #0]
 8011346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011348:	4798      	blx	r3
 801134a:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 801134e:	2200      	movs	r2, #0
 8011350:	4631      	mov	r1, r6
 8011352:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8011356:	2302      	movs	r3, #2
 8011358:	4620      	mov	r0, r4
 801135a:	e9cd 9306 	strd	r9, r3, [sp, #24]
 801135e:	2301      	movs	r3, #1
 8011360:	9305      	str	r3, [sp, #20]
 8011362:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8011366:	9304      	str	r3, [sp, #16]
 8011368:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 801136c:	9303      	str	r3, [sp, #12]
 801136e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8011372:	9302      	str	r3, [sp, #8]
 8011374:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8011378:	e9cd 8300 	strd	r8, r3, [sp]
 801137c:	463b      	mov	r3, r7
 801137e:	47a8      	blx	r5
 8011380:	b00b      	add	sp, #44	@ 0x2c
 8011382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011386:	bf00      	nop
 8011388:	24026412 	.word	0x24026412

0801138c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 801138c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011390:	4698      	mov	r8, r3
 8011392:	6803      	ldr	r3, [r0, #0]
 8011394:	b087      	sub	sp, #28
 8011396:	460e      	mov	r6, r1
 8011398:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 801139a:	4617      	mov	r7, r2
 801139c:	4b0f      	ldr	r3, [pc, #60]	@ (80113dc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 801139e:	4604      	mov	r4, r0
 80113a0:	f8b3 9000 	ldrh.w	r9, [r3]
 80113a4:	f7f2 ffb4 	bl	8004310 <_ZN8touchgfx3HAL3lcdEv>
 80113a8:	6803      	ldr	r3, [r0, #0]
 80113aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113ac:	4798      	blx	r3
 80113ae:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 80113b2:	463a      	mov	r2, r7
 80113b4:	4631      	mov	r1, r6
 80113b6:	f8cd 900c 	str.w	r9, [sp, #12]
 80113ba:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80113be:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 80113c2:	4620      	mov	r0, r4
 80113c4:	9302      	str	r3, [sp, #8]
 80113c6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 80113ca:	9301      	str	r3, [sp, #4]
 80113cc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80113d0:	9300      	str	r3, [sp, #0]
 80113d2:	4643      	mov	r3, r8
 80113d4:	47a8      	blx	r5
 80113d6:	b007      	add	sp, #28
 80113d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113dc:	24026412 	.word	0x24026412

080113e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80113e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113e4:	4604      	mov	r4, r0
 80113e6:	b08f      	sub	sp, #60	@ 0x3c
 80113e8:	4610      	mov	r0, r2
 80113ea:	460d      	mov	r5, r1
 80113ec:	4691      	mov	r9, r2
 80113ee:	461e      	mov	r6, r3
 80113f0:	f008 fc68 	bl	8019cc4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80113f4:	2800      	cmp	r0, #0
 80113f6:	f000 809d 	beq.w	8011534 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 80113fa:	6823      	ldr	r3, [r4, #0]
 80113fc:	4620      	mov	r0, r4
 80113fe:	f8df b198 	ldr.w	fp, [pc, #408]	@ 8011598 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8011402:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8011406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011408:	4798      	blx	r3
 801140a:	6823      	ldr	r3, [r4, #0]
 801140c:	4620      	mov	r0, r4
 801140e:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 801159c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8011412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011414:	4798      	blx	r3
 8011416:	f8bb 3000 	ldrh.w	r3, [fp]
 801141a:	4f5c      	ldr	r7, [pc, #368]	@ (801158c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801141c:	9301      	str	r3, [sp, #4]
 801141e:	f8ba 3000 	ldrh.w	r3, [sl]
 8011422:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8011426:	4640      	mov	r0, r8
 8011428:	9302      	str	r3, [sp, #8]
 801142a:	883b      	ldrh	r3, [r7, #0]
 801142c:	9303      	str	r3, [sp, #12]
 801142e:	4b58      	ldr	r3, [pc, #352]	@ (8011590 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8011430:	881a      	ldrh	r2, [r3, #0]
 8011432:	9305      	str	r3, [sp, #20]
 8011434:	9204      	str	r2, [sp, #16]
 8011436:	f008 fd95 	bl	8019f64 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801143a:	8038      	strh	r0, [r7, #0]
 801143c:	4640      	mov	r0, r8
 801143e:	f008 fdc5 	bl	8019fcc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011442:	9b05      	ldr	r3, [sp, #20]
 8011444:	b280      	uxth	r0, r0
 8011446:	8018      	strh	r0, [r3, #0]
 8011448:	4b52      	ldr	r3, [pc, #328]	@ (8011594 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 801144a:	781b      	ldrb	r3, [r3, #0]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d174      	bne.n	801153a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8011450:	883b      	ldrh	r3, [r7, #0]
 8011452:	f8aa 0000 	strh.w	r0, [sl]
 8011456:	f8ab 3000 	strh.w	r3, [fp]
 801145a:	4648      	mov	r0, r9
 801145c:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 8011460:	f008 fc30 	bl	8019cc4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8011464:	2200      	movs	r2, #0
 8011466:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 801146a:	4611      	mov	r1, r2
 801146c:	4628      	mov	r0, r5
 801146e:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8011472:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8011476:	f7f3 f85a 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
 801147a:	2301      	movs	r3, #1
 801147c:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 8011480:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8011484:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8011488:	2b00      	cmp	r3, #0
 801148a:	dd5c      	ble.n	8011546 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 801148c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8011490:	2b00      	cmp	r3, #0
 8011492:	dd58      	ble.n	8011546 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8011494:	462a      	mov	r2, r5
 8011496:	ab0a      	add	r3, sp, #40	@ 0x28
 8011498:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801149c:	6851      	ldr	r1, [r2, #4]
 801149e:	c303      	stmia	r3!, {r0, r1}
 80114a0:	4631      	mov	r1, r6
 80114a2:	a80a      	add	r0, sp, #40	@ 0x28
 80114a4:	f7ff fc06 	bl	8010cb4 <_ZN8touchgfx4RectaNERKS0_>
 80114a8:	4b38      	ldr	r3, [pc, #224]	@ (801158c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80114aa:	2100      	movs	r1, #0
 80114ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80114b0:	4b37      	ldr	r3, [pc, #220]	@ (8011590 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80114b2:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 80114b6:	aa0a      	add	r2, sp, #40	@ 0x28
 80114b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80114bc:	910c      	str	r1, [sp, #48]	@ 0x30
 80114be:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80114c2:	ab08      	add	r3, sp, #32
 80114c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80114c8:	e883 0003 	stmia.w	r3, {r0, r1}
 80114cc:	4618      	mov	r0, r3
 80114ce:	a90c      	add	r1, sp, #48	@ 0x30
 80114d0:	f7ff fbf0 	bl	8010cb4 <_ZN8touchgfx4RectaNERKS0_>
 80114d4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d13c      	bne.n	8011554 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 80114da:	2000      	movs	r0, #0
 80114dc:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 80114e0:	2600      	movs	r6, #0
 80114e2:	696b      	ldr	r3, [r5, #20]
 80114e4:	a908      	add	r1, sp, #32
 80114e6:	682a      	ldr	r2, [r5, #0]
 80114e8:	4628      	mov	r0, r5
 80114ea:	9305      	str	r3, [sp, #20]
 80114ec:	616e      	str	r6, [r5, #20]
 80114ee:	6892      	ldr	r2, [r2, #8]
 80114f0:	4790      	blx	r2
 80114f2:	9b05      	ldr	r3, [sp, #20]
 80114f4:	4652      	mov	r2, sl
 80114f6:	4649      	mov	r1, r9
 80114f8:	616b      	str	r3, [r5, #20]
 80114fa:	4628      	mov	r0, r5
 80114fc:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 8011500:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 8011504:	f7f3 f813 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
 8011508:	9a01      	ldr	r2, [sp, #4]
 801150a:	4b23      	ldr	r3, [pc, #140]	@ (8011598 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 801150c:	4620      	mov	r0, r4
 801150e:	801a      	strh	r2, [r3, #0]
 8011510:	9a02      	ldr	r2, [sp, #8]
 8011512:	4b22      	ldr	r3, [pc, #136]	@ (801159c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8011514:	801a      	strh	r2, [r3, #0]
 8011516:	9a03      	ldr	r2, [sp, #12]
 8011518:	4b1c      	ldr	r3, [pc, #112]	@ (801158c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801151a:	801a      	strh	r2, [r3, #0]
 801151c:	4b1c      	ldr	r3, [pc, #112]	@ (8011590 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801151e:	9a04      	ldr	r2, [sp, #16]
 8011520:	801a      	strh	r2, [r3, #0]
 8011522:	6823      	ldr	r3, [r4, #0]
 8011524:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 8011528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801152a:	4798      	blx	r3
 801152c:	6823      	ldr	r3, [r4, #0]
 801152e:	4620      	mov	r0, r4
 8011530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011532:	4798      	blx	r3
 8011534:	b00f      	add	sp, #60	@ 0x3c
 8011536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801153a:	883b      	ldrh	r3, [r7, #0]
 801153c:	f8ab 0000 	strh.w	r0, [fp]
 8011540:	f8aa 3000 	strh.w	r3, [sl]
 8011544:	e789      	b.n	801145a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8011546:	462a      	mov	r2, r5
 8011548:	ab0a      	add	r3, sp, #40	@ 0x28
 801154a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801154e:	6851      	ldr	r1, [r2, #4]
 8011550:	c303      	stmia	r3!, {r0, r1}
 8011552:	e7a9      	b.n	80114a8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8011554:	a807      	add	r0, sp, #28
 8011556:	f008 fe43 	bl	801a1e0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801155a:	4606      	mov	r6, r0
 801155c:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 801155e:	6803      	ldr	r3, [r0, #0]
 8011560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011562:	4798      	blx	r3
 8011564:	4286      	cmp	r6, r0
 8011566:	d1b8      	bne.n	80114da <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8011568:	f7f2 fed2 	bl	8004310 <_ZN8touchgfx3HAL3lcdEv>
 801156c:	6803      	ldr	r3, [r0, #0]
 801156e:	4606      	mov	r6, r0
 8011570:	a807      	add	r0, sp, #28
 8011572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011574:	9305      	str	r3, [sp, #20]
 8011576:	f008 fe33 	bl	801a1e0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801157a:	9b05      	ldr	r3, [sp, #20]
 801157c:	4601      	mov	r1, r0
 801157e:	4630      	mov	r0, r6
 8011580:	4798      	blx	r3
 8011582:	f080 0001 	eor.w	r0, r0, #1
 8011586:	b2c0      	uxtb	r0, r0
 8011588:	e7a8      	b.n	80114dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 801158a:	bf00      	nop
 801158c:	2402640c 	.word	0x2402640c
 8011590:	2402640e 	.word	0x2402640e
 8011594:	24026410 	.word	0x24026410
 8011598:	24026412 	.word	0x24026412
 801159c:	24026414 	.word	0x24026414

080115a0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80115a0:	4b07      	ldr	r3, [pc, #28]	@ (80115c0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80115a2:	b510      	push	{r4, lr}
 80115a4:	781b      	ldrb	r3, [r3, #0]
 80115a6:	4604      	mov	r4, r0
 80115a8:	b13b      	cbz	r3, 80115ba <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80115aa:	6803      	ldr	r3, [r0, #0]
 80115ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80115ae:	4798      	blx	r3
 80115b0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80115b2:	4283      	cmp	r3, r0
 80115b4:	d101      	bne.n	80115ba <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80115b6:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80115b8:	bd10      	pop	{r4, pc}
 80115ba:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80115bc:	e7fc      	b.n	80115b8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80115be:	bf00      	nop
 80115c0:	24026416 	.word	0x24026416

080115c4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 80115c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115c8:	461d      	mov	r5, r3
 80115ca:	b08a      	sub	sp, #40	@ 0x28
 80115cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80115d0:	4690      	mov	r8, r2
 80115d2:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 80115d6:	2400      	movs	r4, #0
 80115d8:	4607      	mov	r7, r0
 80115da:	fb06 8505 	mla	r5, r6, r5, r8
 80115de:	9404      	str	r4, [sp, #16]
 80115e0:	f88d 4020 	strb.w	r4, [sp, #32]
 80115e4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80115e8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80115ec:	f8ad 3018 	strh.w	r3, [sp, #24]
 80115f0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80115f4:	f8ad 301a 	strh.w	r3, [sp, #26]
 80115f8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80115fc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011600:	f7ff ffce 	bl	80115a0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011604:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8011608:	6878      	ldr	r0, [r7, #4]
 801160a:	f8ad 601e 	strh.w	r6, [sp, #30]
 801160e:	a901      	add	r1, sp, #4
 8011610:	9505      	str	r5, [sp, #20]
 8011612:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8011616:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 801161a:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 801161e:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8011622:	6803      	ldr	r3, [r0, #0]
 8011624:	685b      	ldr	r3, [r3, #4]
 8011626:	4798      	blx	r3
 8011628:	b00a      	add	sp, #40	@ 0x28
 801162a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801162e <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801162e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011632:	b08b      	sub	sp, #44	@ 0x2c
 8011634:	2400      	movs	r4, #0
 8011636:	4691      	mov	r9, r2
 8011638:	461d      	mov	r5, r3
 801163a:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 801163e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011642:	4688      	mov	r8, r1
 8011644:	4607      	mov	r7, r0
 8011646:	9404      	str	r4, [sp, #16]
 8011648:	fb06 9505 	mla	r5, r6, r5, r9
 801164c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011650:	f7ff ffa6 	bl	80115a0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011654:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8011658:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801165c:	6878      	ldr	r0, [r7, #4]
 801165e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011662:	a901      	add	r1, sp, #4
 8011664:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8011668:	9505      	str	r5, [sp, #20]
 801166a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801166e:	f8ad 401c 	strh.w	r4, [sp, #28]
 8011672:	f8ad 601e 	strh.w	r6, [sp, #30]
 8011676:	f8cd 8010 	str.w	r8, [sp, #16]
 801167a:	f8ad 4020 	strh.w	r4, [sp, #32]
 801167e:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8011682:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8011686:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 801168a:	6803      	ldr	r3, [r0, #0]
 801168c:	685b      	ldr	r3, [r3, #4]
 801168e:	4798      	blx	r3
 8011690:	b00b      	add	sp, #44	@ 0x2c
 8011692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08011698 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8011698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801169c:	b08a      	sub	sp, #40	@ 0x28
 801169e:	4698      	mov	r8, r3
 80116a0:	2300      	movs	r3, #0
 80116a2:	4606      	mov	r6, r0
 80116a4:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 80116a8:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 80116ac:	2d0b      	cmp	r5, #11
 80116ae:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 80116b2:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 80116b6:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 80116ba:	9304      	str	r3, [sp, #16]
 80116bc:	d137      	bne.n	801172e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 80116be:	2380      	movs	r3, #128	@ 0x80
 80116c0:	f88d 0020 	strb.w	r0, [sp, #32]
 80116c4:	4630      	mov	r0, r6
 80116c6:	9203      	str	r2, [sp, #12]
 80116c8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80116cc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80116d0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80116d4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80116d8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80116dc:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80116e0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80116e4:	f7ff ff5c 	bl	80115a0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80116e8:	2c0b      	cmp	r4, #11
 80116ea:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80116ee:	f8ad 701e 	strh.w	r7, [sp, #30]
 80116f2:	bf94      	ite	ls
 80116f4:	4b19      	ldrls	r3, [pc, #100]	@ (801175c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 80116f6:	2100      	movhi	r1, #0
 80116f8:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 80116fc:	bf98      	it	ls
 80116fe:	5d19      	ldrbls	r1, [r3, r4]
 8011700:	fb02 8307 	mla	r3, r2, r7, r8
 8011704:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8011708:	10c9      	asrs	r1, r1, #3
 801170a:	fb01 0003 	mla	r0, r1, r3, r0
 801170e:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8011712:	a901      	add	r1, sp, #4
 8011714:	9005      	str	r0, [sp, #20]
 8011716:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 801171a:	2300      	movs	r3, #0
 801171c:	6870      	ldr	r0, [r6, #4]
 801171e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8011722:	6803      	ldr	r3, [r0, #0]
 8011724:	685b      	ldr	r3, [r3, #4]
 8011726:	4798      	blx	r3
 8011728:	b00a      	add	sp, #40	@ 0x28
 801172a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801172e:	2d02      	cmp	r5, #2
 8011730:	d109      	bne.n	8011746 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8011732:	28ff      	cmp	r0, #255	@ 0xff
 8011734:	d105      	bne.n	8011742 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8011736:	f1bc 0f00 	cmp.w	ip, #0
 801173a:	bf14      	ite	ne
 801173c:	2340      	movne	r3, #64	@ 0x40
 801173e:	2320      	moveq	r3, #32
 8011740:	e7be      	b.n	80116c0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8011742:	2340      	movs	r3, #64	@ 0x40
 8011744:	e7bc      	b.n	80116c0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8011746:	28ff      	cmp	r0, #255	@ 0xff
 8011748:	d105      	bne.n	8011756 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 801174a:	f1bc 0f00 	cmp.w	ip, #0
 801174e:	bf14      	ite	ne
 8011750:	2304      	movne	r3, #4
 8011752:	2301      	moveq	r3, #1
 8011754:	e7b4      	b.n	80116c0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8011756:	2304      	movs	r3, #4
 8011758:	e7b2      	b.n	80116c0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801175a:	bf00      	nop
 801175c:	08029340 	.word	0x08029340

08011760 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8011760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011764:	b08b      	sub	sp, #44	@ 0x2c
 8011766:	461d      	mov	r5, r3
 8011768:	2400      	movs	r4, #0
 801176a:	4688      	mov	r8, r1
 801176c:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 8011770:	4693      	mov	fp, r2
 8011772:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8011776:	4607      	mov	r7, r0
 8011778:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801177c:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 8011780:	9404      	str	r4, [sp, #16]
 8011782:	bf14      	ite	ne
 8011784:	2308      	movne	r3, #8
 8011786:	2302      	moveq	r3, #2
 8011788:	fb05 b50a 	mla	r5, r5, sl, fp
 801178c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011790:	f7ff ff06 	bl	80115a0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011794:	2e0b      	cmp	r6, #11
 8011796:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801179a:	a901      	add	r1, sp, #4
 801179c:	bf98      	it	ls
 801179e:	4b13      	ldrls	r3, [pc, #76]	@ (80117ec <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 80117a0:	f8ad a01e 	strh.w	sl, [sp, #30]
 80117a4:	bf98      	it	ls
 80117a6:	5d9c      	ldrbls	r4, [r3, r6]
 80117a8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 80117ac:	10e4      	asrs	r4, r4, #3
 80117ae:	f8cd 8010 	str.w	r8, [sp, #16]
 80117b2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80117b6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 80117ba:	fb04 0405 	mla	r4, r4, r5, r0
 80117be:	6878      	ldr	r0, [r7, #4]
 80117c0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80117c4:	2300      	movs	r3, #0
 80117c6:	9405      	str	r4, [sp, #20]
 80117c8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80117cc:	f88d 9020 	strb.w	r9, [sp, #32]
 80117d0:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 80117d4:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80117d8:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 80117dc:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 80117e0:	6803      	ldr	r3, [r0, #0]
 80117e2:	685b      	ldr	r3, [r3, #4]
 80117e4:	4798      	blx	r3
 80117e6:	b00b      	add	sp, #44	@ 0x2c
 80117e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117ec:	08029340 	.word	0x08029340

080117f0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80117f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117f4:	461e      	mov	r6, r3
 80117f6:	4b0a      	ldr	r3, [pc, #40]	@ (8011820 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 80117f8:	460f      	mov	r7, r1
 80117fa:	4690      	mov	r8, r2
 80117fc:	881d      	ldrh	r5, [r3, #0]
 80117fe:	f7f2 fd87 	bl	8004310 <_ZN8touchgfx3HAL3lcdEv>
 8011802:	6803      	ldr	r3, [r0, #0]
 8011804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011806:	4798      	blx	r3
 8011808:	280b      	cmp	r0, #11
 801180a:	bf96      	itet	ls
 801180c:	4b05      	ldrls	r3, [pc, #20]	@ (8011824 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801180e:	2400      	movhi	r4, #0
 8011810:	5c1c      	ldrbls	r4, [r3, r0]
 8011812:	fb08 7005 	mla	r0, r8, r5, r7
 8011816:	10e4      	asrs	r4, r4, #3
 8011818:	fb04 6000 	mla	r0, r4, r0, r6
 801181c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011820:	24026412 	.word	0x24026412
 8011824:	08029340 	.word	0x08029340

08011828 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8011828:	b5f0      	push	{r4, r5, r6, r7, lr}
 801182a:	b08b      	sub	sp, #44	@ 0x2c
 801182c:	461f      	mov	r7, r3
 801182e:	4604      	mov	r4, r0
 8011830:	4616      	mov	r6, r2
 8011832:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8011836:	2500      	movs	r5, #0
 8011838:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801183c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8011840:	9504      	str	r5, [sp, #16]
 8011842:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011846:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801184a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801184e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8011852:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011856:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 801185a:	f88d 3020 	strb.w	r3, [sp, #32]
 801185e:	f7ff fe9f 	bl	80115a0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011862:	463a      	mov	r2, r7
 8011864:	4631      	mov	r1, r6
 8011866:	4603      	mov	r3, r0
 8011868:	4620      	mov	r0, r4
 801186a:	f7ff ffc1 	bl	80117f0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801186e:	4b0e      	ldr	r3, [pc, #56]	@ (80118a8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8011870:	9005      	str	r0, [sp, #20]
 8011872:	881b      	ldrh	r3, [r3, #0]
 8011874:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011878:	f7f2 fd4a 	bl	8004310 <_ZN8touchgfx3HAL3lcdEv>
 801187c:	6803      	ldr	r3, [r0, #0]
 801187e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011880:	4798      	blx	r3
 8011882:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011884:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 8011888:	a901      	add	r1, sp, #4
 801188a:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 801188e:	9304      	str	r3, [sp, #16]
 8011890:	6860      	ldr	r0, [r4, #4]
 8011892:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8011896:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 801189a:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 801189e:	6803      	ldr	r3, [r0, #0]
 80118a0:	685b      	ldr	r3, [r3, #4]
 80118a2:	4798      	blx	r3
 80118a4:	b00b      	add	sp, #44	@ 0x2c
 80118a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118a8:	24026412 	.word	0x24026412

080118ac <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80118ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118ae:	b08d      	sub	sp, #52	@ 0x34
 80118b0:	2501      	movs	r5, #1
 80118b2:	4604      	mov	r4, r0
 80118b4:	466b      	mov	r3, sp
 80118b6:	9503      	str	r5, [sp, #12]
 80118b8:	e883 0006 	stmia.w	r3, {r1, r2}
 80118bc:	2300      	movs	r3, #0
 80118be:	f8bd 6000 	ldrh.w	r6, [sp]
 80118c2:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80118c6:	9306      	str	r3, [sp, #24]
 80118c8:	6803      	ldr	r3, [r0, #0]
 80118ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80118cc:	4798      	blx	r3
 80118ce:	463a      	mov	r2, r7
 80118d0:	4631      	mov	r1, r6
 80118d2:	4603      	mov	r3, r0
 80118d4:	4620      	mov	r0, r4
 80118d6:	f7ff ff8b 	bl	80117f0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80118da:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80118dc:	9004      	str	r0, [sp, #16]
 80118de:	9307      	str	r3, [sp, #28]
 80118e0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80118e4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80118e8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80118ec:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80118f0:	4b0e      	ldr	r3, [pc, #56]	@ (801192c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 80118f2:	881b      	ldrh	r3, [r3, #0]
 80118f4:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80118f8:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 80118fc:	f7f2 fd08 	bl	8004310 <_ZN8touchgfx3HAL3lcdEv>
 8011900:	6803      	ldr	r3, [r0, #0]
 8011902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011904:	4798      	blx	r3
 8011906:	23ff      	movs	r3, #255	@ 0xff
 8011908:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 801190c:	a903      	add	r1, sp, #12
 801190e:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8011912:	6860      	ldr	r0, [r4, #4]
 8011914:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8011918:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 801191c:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8011920:	6803      	ldr	r3, [r0, #0]
 8011922:	685b      	ldr	r3, [r3, #4]
 8011924:	4798      	blx	r3
 8011926:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8011928:	b00d      	add	sp, #52	@ 0x34
 801192a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801192c:	24026412 	.word	0x24026412

08011930 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8011930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011934:	b08c      	sub	sp, #48	@ 0x30
 8011936:	461e      	mov	r6, r3
 8011938:	2300      	movs	r3, #0
 801193a:	4604      	mov	r4, r0
 801193c:	466d      	mov	r5, sp
 801193e:	9306      	str	r3, [sp, #24]
 8011940:	6803      	ldr	r3, [r0, #0]
 8011942:	e885 0006 	stmia.w	r5, {r1, r2}
 8011946:	2501      	movs	r5, #1
 8011948:	f8bd 7000 	ldrh.w	r7, [sp]
 801194c:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8011950:	9503      	str	r5, [sp, #12]
 8011952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011954:	4798      	blx	r3
 8011956:	4642      	mov	r2, r8
 8011958:	4639      	mov	r1, r7
 801195a:	4603      	mov	r3, r0
 801195c:	4620      	mov	r0, r4
 801195e:	f7ff ff47 	bl	80117f0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8011962:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011966:	9004      	str	r0, [sp, #16]
 8011968:	f8ad 3020 	strh.w	r3, [sp, #32]
 801196c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8011970:	9607      	str	r6, [sp, #28]
 8011972:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8011976:	4b10      	ldr	r3, [pc, #64]	@ (80119b8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8011978:	881b      	ldrh	r3, [r3, #0]
 801197a:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 801197e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011980:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8011984:	f7f2 fcc4 	bl	8004310 <_ZN8touchgfx3HAL3lcdEv>
 8011988:	6803      	ldr	r3, [r0, #0]
 801198a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801198c:	4798      	blx	r3
 801198e:	23ff      	movs	r3, #255	@ 0xff
 8011990:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8011994:	a903      	add	r1, sp, #12
 8011996:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 801199a:	6860      	ldr	r0, [r4, #4]
 801199c:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 80119a0:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 80119a4:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 80119a8:	6803      	ldr	r3, [r0, #0]
 80119aa:	685b      	ldr	r3, [r3, #4]
 80119ac:	4798      	blx	r3
 80119ae:	4630      	mov	r0, r6
 80119b0:	b00c      	add	sp, #48	@ 0x30
 80119b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119b6:	bf00      	nop
 80119b8:	24026412 	.word	0x24026412

080119bc <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80119bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119be:	b085      	sub	sp, #20
 80119c0:	4605      	mov	r5, r0
 80119c2:	ac02      	add	r4, sp, #8
 80119c4:	e884 0006 	stmia.w	r4, {r1, r2}
 80119c8:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 80119cc:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 80119d0:	f7ff fde6 	bl	80115a0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80119d4:	4631      	mov	r1, r6
 80119d6:	4603      	mov	r3, r0
 80119d8:	463a      	mov	r2, r7
 80119da:	4628      	mov	r0, r5
 80119dc:	f7ff ff08 	bl	80117f0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80119e0:	4a05      	ldr	r2, [pc, #20]	@ (80119f8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 80119e2:	682b      	ldr	r3, [r5, #0]
 80119e4:	8812      	ldrh	r2, [r2, #0]
 80119e6:	9200      	str	r2, [sp, #0]
 80119e8:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 80119ea:	4603      	mov	r3, r0
 80119ec:	4628      	mov	r0, r5
 80119ee:	e894 0006 	ldmia.w	r4, {r1, r2}
 80119f2:	47b0      	blx	r6
 80119f4:	b005      	add	sp, #20
 80119f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119f8:	24026412 	.word	0x24026412

080119fc <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80119fc:	b570      	push	{r4, r5, r6, lr}
 80119fe:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 8011a02:	4604      	mov	r4, r0
 8011a04:	b19b      	cbz	r3, 8011a2e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8011a06:	2002      	movs	r0, #2
 8011a08:	f7f0 f984 	bl	8001d14 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	4620      	mov	r0, r4
 8011a10:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8011a14:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8011a18:	6823      	ldr	r3, [r4, #0]
 8011a1a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 8011a1e:	f7ff fdbf 	bl	80115a0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011a22:	4601      	mov	r1, r0
 8011a24:	4620      	mov	r0, r4
 8011a26:	462b      	mov	r3, r5
 8011a28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011a2c:	4718      	bx	r3
 8011a2e:	bd70      	pop	{r4, r5, r6, pc}

08011a30 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8011a30:	b570      	push	{r4, r5, r6, lr}
 8011a32:	4605      	mov	r5, r0
 8011a34:	460c      	mov	r4, r1
 8011a36:	2003      	movs	r0, #3
 8011a38:	b149      	cbz	r1, 8011a4e <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 8011a3a:	f7f0 f90b 	bl	8001c54 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8011a3e:	6928      	ldr	r0, [r5, #16]
 8011a40:	b168      	cbz	r0, 8011a5e <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8011a42:	6803      	ldr	r3, [r0, #0]
 8011a44:	2101      	movs	r1, #1
 8011a46:	695b      	ldr	r3, [r3, #20]
 8011a48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011a4c:	4718      	bx	r3
 8011a4e:	f7f0 f931 	bl	8001cb4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8011a52:	6928      	ldr	r0, [r5, #16]
 8011a54:	b118      	cbz	r0, 8011a5e <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8011a56:	6803      	ldr	r3, [r0, #0]
 8011a58:	4621      	mov	r1, r4
 8011a5a:	695b      	ldr	r3, [r3, #20]
 8011a5c:	e7f4      	b.n	8011a48 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 8011a5e:	bd70      	pop	{r4, r5, r6, pc}

08011a60 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8011a60:	b538      	push	{r3, r4, r5, lr}
 8011a62:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8011a66:	4604      	mov	r4, r0
 8011a68:	460d      	mov	r5, r1
 8011a6a:	428b      	cmp	r3, r1
 8011a6c:	d006      	beq.n	8011a7c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8011a6e:	6803      	ldr	r3, [r0, #0]
 8011a70:	b929      	cbnz	r1, 8011a7e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8011a72:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8011a76:	4798      	blx	r3
 8011a78:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 8011a7c:	bd38      	pop	{r3, r4, r5, pc}
 8011a7e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8011a82:	e7f8      	b.n	8011a76 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08011a84 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8011a84:	4b0d      	ldr	r3, [pc, #52]	@ (8011abc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8011a86:	b510      	push	{r4, lr}
 8011a88:	781b      	ldrb	r3, [r3, #0]
 8011a8a:	4604      	mov	r4, r0
 8011a8c:	b95b      	cbnz	r3, 8011aa6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8011a8e:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8011a92:	2b02      	cmp	r3, #2
 8011a94:	d007      	beq.n	8011aa6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8011a96:	6840      	ldr	r0, [r0, #4]
 8011a98:	f000 f91a 	bl	8011cd0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8011a9c:	b118      	cbz	r0, 8011aa6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8011a9e:	6862      	ldr	r2, [r4, #4]
 8011aa0:	7a53      	ldrb	r3, [r2, #9]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d0fc      	beq.n	8011aa0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8011aa6:	f7f1 f93f 	bl	8002d28 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8011aaa:	4620      	mov	r0, r4
 8011aac:	2100      	movs	r1, #0
 8011aae:	f7ff ffd7 	bl	8011a60 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8011ab2:	4620      	mov	r0, r4
 8011ab4:	f7ff fd74 	bl	80115a0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011ab8:	bd10      	pop	{r4, pc}
 8011aba:	bf00      	nop
 8011abc:	24026416 	.word	0x24026416

08011ac0 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 8011ac0:	b570      	push	{r4, r5, r6, lr}
 8011ac2:	4604      	mov	r4, r0
 8011ac4:	6803      	ldr	r3, [r0, #0]
 8011ac6:	b919      	cbnz	r1, 8011ad0 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8011ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011aca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011ace:	4718      	bx	r3
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 8011ad6:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 8011ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011adc:	4798      	blx	r3
 8011ade:	6863      	ldr	r3, [r4, #4]
 8011ae0:	2101      	movs	r1, #1
 8011ae2:	4605      	mov	r5, r0
 8011ae4:	4620      	mov	r0, r4
 8011ae6:	7299      	strb	r1, [r3, #10]
 8011ae8:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 8011aec:	f7ff ffb8 	bl	8011a60 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8011af0:	4628      	mov	r0, r5
 8011af2:	bd70      	pop	{r4, r5, r6, pc}

08011af4 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8011af4:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8011af8:	1a13      	subs	r3, r2, r0
 8011afa:	4258      	negs	r0, r3
 8011afc:	4158      	adcs	r0, r3
 8011afe:	4770      	bx	lr

08011b00 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8011b00:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8011b04:	1a9b      	subs	r3, r3, r2
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	bfdc      	itt	le
 8011b0a:	6882      	ldrle	r2, [r0, #8]
 8011b0c:	189b      	addle	r3, r3, r2
 8011b0e:	2b01      	cmp	r3, #1
 8011b10:	bfcc      	ite	gt
 8011b12:	2000      	movgt	r0, #0
 8011b14:	2001      	movle	r0, #1
 8011b16:	4770      	bx	lr

08011b18 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8011b18:	6902      	ldr	r2, [r0, #16]
 8011b1a:	6843      	ldr	r3, [r0, #4]
 8011b1c:	2024      	movs	r0, #36	@ 0x24
 8011b1e:	fb00 3002 	mla	r0, r0, r2, r3
 8011b22:	4770      	bx	lr

08011b24 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8011b24:	6803      	ldr	r3, [r0, #0]
 8011b26:	691b      	ldr	r3, [r3, #16]
 8011b28:	4718      	bx	r3

08011b2a <_ZN8touchgfx13DMA_Interface7executeEv>:
 8011b2a:	2301      	movs	r3, #1
 8011b2c:	b570      	push	{r4, r5, r6, lr}
 8011b2e:	7203      	strb	r3, [r0, #8]
 8011b30:	4604      	mov	r4, r0
 8011b32:	6840      	ldr	r0, [r0, #4]
 8011b34:	6803      	ldr	r3, [r0, #0]
 8011b36:	699b      	ldr	r3, [r3, #24]
 8011b38:	4798      	blx	r3
 8011b3a:	6803      	ldr	r3, [r0, #0]
 8011b3c:	4605      	mov	r5, r0
 8011b3e:	2b40      	cmp	r3, #64	@ 0x40
 8011b40:	d00c      	beq.n	8011b5c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011b42:	d810      	bhi.n	8011b66 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8011b44:	2b04      	cmp	r3, #4
 8011b46:	d01d      	beq.n	8011b84 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8011b48:	d804      	bhi.n	8011b54 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8011b4a:	2b01      	cmp	r3, #1
 8011b4c:	d006      	beq.n	8011b5c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011b4e:	2b02      	cmp	r3, #2
 8011b50:	d02c      	beq.n	8011bac <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8011b52:	bd70      	pop	{r4, r5, r6, pc}
 8011b54:	2b08      	cmp	r3, #8
 8011b56:	d01d      	beq.n	8011b94 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8011b58:	2b20      	cmp	r3, #32
 8011b5a:	d1fa      	bne.n	8011b52 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8011b5c:	6823      	ldr	r3, [r4, #0]
 8011b5e:	4620      	mov	r0, r4
 8011b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011b62:	4798      	blx	r3
 8011b64:	e013      	b.n	8011b8e <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8011b66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011b6a:	d0f7      	beq.n	8011b5c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011b6c:	d804      	bhi.n	8011b78 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8011b6e:	2b80      	cmp	r3, #128	@ 0x80
 8011b70:	d0f4      	beq.n	8011b5c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011b72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011b76:	e7f0      	b.n	8011b5a <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8011b78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011b7c:	d0ee      	beq.n	8011b5c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011b7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011b82:	e7e5      	b.n	8011b50 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8011b84:	6823      	ldr	r3, [r4, #0]
 8011b86:	7f01      	ldrb	r1, [r0, #28]
 8011b88:	4620      	mov	r0, r4
 8011b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b8c:	4798      	blx	r3
 8011b8e:	6823      	ldr	r3, [r4, #0]
 8011b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b92:	e006      	b.n	8011ba2 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8011b94:	6823      	ldr	r3, [r4, #0]
 8011b96:	7f01      	ldrb	r1, [r0, #28]
 8011b98:	4620      	mov	r0, r4
 8011b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b9c:	4798      	blx	r3
 8011b9e:	6823      	ldr	r3, [r4, #0]
 8011ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011ba2:	4629      	mov	r1, r5
 8011ba4:	4620      	mov	r0, r4
 8011ba6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011baa:	4718      	bx	r3
 8011bac:	6823      	ldr	r3, [r4, #0]
 8011bae:	4620      	mov	r0, r4
 8011bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011bb2:	4798      	blx	r3
 8011bb4:	e7f3      	b.n	8011b9e <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08011bb6 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8011bb6:	4770      	bx	lr

08011bb8 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8011bb8:	4770      	bx	lr

08011bba <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8011bba:	4770      	bx	lr

08011bbc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8011bbc:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8011bc0:	b510      	push	{r4, lr}
 8011bc2:	1ad2      	subs	r2, r2, r3
 8011bc4:	2a00      	cmp	r2, #0
 8011bc6:	bfdc      	itt	le
 8011bc8:	6884      	ldrle	r4, [r0, #8]
 8011bca:	1912      	addle	r2, r2, r4
 8011bcc:	2a01      	cmp	r2, #1
 8011bce:	dd16      	ble.n	8011bfe <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8011bd0:	6842      	ldr	r2, [r0, #4]
 8011bd2:	2424      	movs	r4, #36	@ 0x24
 8011bd4:	fb04 2303 	mla	r3, r4, r3, r2
 8011bd8:	f101 0220 	add.w	r2, r1, #32
 8011bdc:	f851 4b04 	ldr.w	r4, [r1], #4
 8011be0:	4291      	cmp	r1, r2
 8011be2:	f843 4b04 	str.w	r4, [r3], #4
 8011be6:	d1f9      	bne.n	8011bdc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8011be8:	780a      	ldrb	r2, [r1, #0]
 8011bea:	701a      	strb	r2, [r3, #0]
 8011bec:	68c3      	ldr	r3, [r0, #12]
 8011bee:	6882      	ldr	r2, [r0, #8]
 8011bf0:	f3bf 8f5b 	dmb	ish
 8011bf4:	3301      	adds	r3, #1
 8011bf6:	429a      	cmp	r2, r3
 8011bf8:	bfd8      	it	le
 8011bfa:	1a9b      	suble	r3, r3, r2
 8011bfc:	60c3      	str	r3, [r0, #12]
 8011bfe:	bd10      	pop	{r4, pc}

08011c00 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8011c00:	6903      	ldr	r3, [r0, #16]
 8011c02:	6882      	ldr	r2, [r0, #8]
 8011c04:	f3bf 8f5b 	dmb	ish
 8011c08:	3301      	adds	r3, #1
 8011c0a:	429a      	cmp	r2, r3
 8011c0c:	bfd8      	it	le
 8011c0e:	1a9b      	suble	r3, r3, r2
 8011c10:	6103      	str	r3, [r0, #16]
 8011c12:	4770      	bx	lr

08011c14 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8011c14:	b570      	push	{r4, r5, r6, lr}
 8011c16:	4604      	mov	r4, r0
 8011c18:	460e      	mov	r6, r1
 8011c1a:	6860      	ldr	r0, [r4, #4]
 8011c1c:	6803      	ldr	r3, [r0, #0]
 8011c1e:	685b      	ldr	r3, [r3, #4]
 8011c20:	4798      	blx	r3
 8011c22:	2800      	cmp	r0, #0
 8011c24:	d1f9      	bne.n	8011c1a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8011c26:	4d0d      	ldr	r5, [pc, #52]	@ (8011c5c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8011c28:	6828      	ldr	r0, [r5, #0]
 8011c2a:	6803      	ldr	r3, [r0, #0]
 8011c2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011c2e:	4798      	blx	r3
 8011c30:	f7f1 f888 	bl	8002d44 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8011c34:	6828      	ldr	r0, [r5, #0]
 8011c36:	2101      	movs	r1, #1
 8011c38:	f7ff ff12 	bl	8011a60 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8011c3c:	6860      	ldr	r0, [r4, #4]
 8011c3e:	4631      	mov	r1, r6
 8011c40:	6803      	ldr	r3, [r0, #0]
 8011c42:	689b      	ldr	r3, [r3, #8]
 8011c44:	4798      	blx	r3
 8011c46:	6823      	ldr	r3, [r4, #0]
 8011c48:	4620      	mov	r0, r4
 8011c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c4c:	4798      	blx	r3
 8011c4e:	6828      	ldr	r0, [r5, #0]
 8011c50:	6803      	ldr	r3, [r0, #0]
 8011c52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011c58:	4718      	bx	r3
 8011c5a:	bf00      	nop
 8011c5c:	24026418 	.word	0x24026418

08011c60 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8011c60:	b508      	push	{r3, lr}
 8011c62:	f7f1 f861 	bl	8002d28 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8011c66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011c6a:	f7f1 b865 	b.w	8002d38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08011c6e <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8011c6e:	b510      	push	{r4, lr}
 8011c70:	4604      	mov	r4, r0
 8011c72:	2114      	movs	r1, #20
 8011c74:	f012 ff39 	bl	8024aea <_ZdlPvj>
 8011c78:	4620      	mov	r0, r4
 8011c7a:	bd10      	pop	{r4, pc}

08011c7c <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8011c7c:	b570      	push	{r4, r5, r6, lr}
 8011c7e:	4604      	mov	r4, r0
 8011c80:	6840      	ldr	r0, [r0, #4]
 8011c82:	6803      	ldr	r3, [r0, #0]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	4798      	blx	r3
 8011c88:	4605      	mov	r5, r0
 8011c8a:	b930      	cbnz	r0, 8011c9a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8011c8c:	7a23      	ldrb	r3, [r4, #8]
 8011c8e:	b123      	cbz	r3, 8011c9a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8011c90:	6860      	ldr	r0, [r4, #4]
 8011c92:	6803      	ldr	r3, [r0, #0]
 8011c94:	695b      	ldr	r3, [r3, #20]
 8011c96:	4798      	blx	r3
 8011c98:	7225      	strb	r5, [r4, #8]
 8011c9a:	6860      	ldr	r0, [r4, #4]
 8011c9c:	6803      	ldr	r3, [r0, #0]
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	4798      	blx	r3
 8011ca2:	b928      	cbnz	r0, 8011cb0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8011ca4:	6823      	ldr	r3, [r4, #0]
 8011ca6:	4620      	mov	r0, r4
 8011ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011caa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011cae:	4718      	bx	r3
 8011cb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011cb4:	f7f1 b84e 	b.w	8002d54 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08011cb8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8011cb8:	b510      	push	{r4, lr}
 8011cba:	6082      	str	r2, [r0, #8]
 8011cbc:	2200      	movs	r2, #0
 8011cbe:	4c03      	ldr	r4, [pc, #12]	@ (8011ccc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8011cc0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8011cc4:	e9c0 4100 	strd	r4, r1, [r0]
 8011cc8:	bd10      	pop	{r4, pc}
 8011cca:	bf00      	nop
 8011ccc:	08029354 	.word	0x08029354

08011cd0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8011cd0:	6840      	ldr	r0, [r0, #4]
 8011cd2:	6803      	ldr	r3, [r0, #0]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	4718      	bx	r3

08011cd8 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 8011cd8:	2300      	movs	r3, #0
 8011cda:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8011cdc:	8503      	strh	r3, [r0, #40]	@ 0x28
 8011cde:	8543      	strh	r3, [r0, #42]	@ 0x2a
 8011ce0:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8011ce2:	6980      	ldr	r0, [r0, #24]
 8011ce4:	b110      	cbz	r0, 8011cec <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 8011ce6:	6803      	ldr	r3, [r0, #0]
 8011ce8:	691b      	ldr	r3, [r3, #16]
 8011cea:	4718      	bx	r3
 8011cec:	4770      	bx	lr

08011cee <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 8011cee:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 8011cf2:	4770      	bx	lr

08011cf4 <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 8011cf4:	b538      	push	{r3, r4, r5, lr}
 8011cf6:	0e0b      	lsrs	r3, r1, #24
 8011cf8:	4604      	mov	r4, r0
 8011cfa:	460d      	mov	r5, r1
 8011cfc:	7783      	strb	r3, [r0, #30]
 8011cfe:	6803      	ldr	r3, [r0, #0]
 8011d00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011d02:	4798      	blx	r3
 8011d04:	6803      	ldr	r3, [r0, #0]
 8011d06:	4629      	mov	r1, r5
 8011d08:	689b      	ldr	r3, [r3, #8]
 8011d0a:	4798      	blx	r3
 8011d0c:	6823      	ldr	r3, [r4, #0]
 8011d0e:	4620      	mov	r0, r4
 8011d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011d12:	4798      	blx	r3
 8011d14:	61a0      	str	r0, [r4, #24]
 8011d16:	bd38      	pop	{r3, r4, r5, pc}

08011d18 <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 8011d18:	7741      	strb	r1, [r0, #29]
 8011d1a:	4770      	bx	lr

08011d1c <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 8011d1c:	b530      	push	{r4, r5, lr}
 8011d1e:	460d      	mov	r5, r1
 8011d20:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 8011d24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011d26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011d28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011d2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011d2c:	682b      	ldr	r3, [r5, #0]
 8011d2e:	6023      	str	r3, [r4, #0]
 8011d30:	bd30      	pop	{r4, r5, pc}

08011d32 <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 8011d32:	b538      	push	{r3, r4, r5, lr}
 8011d34:	4604      	mov	r4, r0
 8011d36:	1d03      	adds	r3, r0, #4
 8011d38:	6808      	ldr	r0, [r1, #0]
 8011d3a:	2500      	movs	r5, #0
 8011d3c:	6849      	ldr	r1, [r1, #4]
 8011d3e:	c303      	stmia	r3!, {r0, r1}
 8011d40:	6813      	ldr	r3, [r2, #0]
 8011d42:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8011d46:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 8011d4a:	6853      	ldr	r3, [r2, #4]
 8011d4c:	61a5      	str	r5, [r4, #24]
 8011d4e:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 8011d52:	f006 faa9 	bl	80182a8 <_ZN8touchgfx9Matrix3x35resetEv>
 8011d56:	23ff      	movs	r3, #255	@ 0xff
 8011d58:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 8011d5c:	7763      	strb	r3, [r4, #29]
 8011d5e:	77a3      	strb	r3, [r4, #30]
 8011d60:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8011d64:	6323      	str	r3, [r4, #48]	@ 0x30
 8011d66:	2301      	movs	r3, #1
 8011d68:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8011d6c:	bd38      	pop	{r3, r4, r5, pc}
	...

08011d70 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 8011d70:	ee70 7a41 	vsub.f32	s15, s0, s2
 8011d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d78:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011d7c:	4605      	mov	r5, r0
 8011d7e:	ed2d 8b0a 	vpush	{d8-d12}
 8011d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d86:	b086      	sub	sp, #24
 8011d88:	eeb0 ba40 	vmov.f32	s22, s0
 8011d8c:	6802      	ldr	r2, [r0, #0]
 8011d8e:	eef0 ba60 	vmov.f32	s23, s1
 8011d92:	f89d 6058 	ldrb.w	r6, [sp, #88]	@ 0x58
 8011d96:	eef0 aa41 	vmov.f32	s21, s2
 8011d9a:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8011d9c:	eeb0 aa61 	vmov.f32	s20, s3
 8011da0:	eeb0 ca42 	vmov.f32	s24, s4
 8011da4:	eef0 ca62 	vmov.f32	s25, s5
 8011da8:	d112      	bne.n	8011dd0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 8011daa:	ee70 7ae1 	vsub.f32	s15, s1, s3
 8011dae:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011db6:	d10b      	bne.n	8011dd0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 8011db8:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8011dbc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8011dbe:	3901      	subs	r1, #1
 8011dc0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8011dc4:	b006      	add	sp, #24
 8011dc6:	ecbd 8b0a 	vpop	{d8-d12}
 8011dca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011dce:	4710      	bx	r2
 8011dd0:	23ff      	movs	r3, #255	@ 0xff
 8011dd2:	4628      	mov	r0, r5
 8011dd4:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 8011dd8:	77ab      	strb	r3, [r5, #30]
 8011dda:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8011ddc:	4798      	blx	r3
 8011dde:	eeb0 0a4b 	vmov.f32	s0, s22
 8011de2:	eef0 0a6b 	vmov.f32	s1, s23
 8011de6:	4604      	mov	r4, r0
 8011de8:	4640      	mov	r0, r8
 8011dea:	f006 fb0c 	bl	8018406 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011dee:	eef0 8a40 	vmov.f32	s17, s0
 8011df2:	ed8d 0a00 	vstr	s0, [sp]
 8011df6:	eeb0 0a6a 	vmov.f32	s0, s21
 8011dfa:	eef0 9a60 	vmov.f32	s19, s1
 8011dfe:	edcd 0a01 	vstr	s1, [sp, #4]
 8011e02:	4640      	mov	r0, r8
 8011e04:	eef0 0a4a 	vmov.f32	s1, s20
 8011e08:	f006 fafd 	bl	8018406 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011e0c:	eef4 8a40 	vcmp.f32	s17, s0
 8011e10:	eeb0 8a40 	vmov.f32	s16, s0
 8011e14:	ed8d 0a02 	vstr	s0, [sp, #8]
 8011e18:	eeb0 9a60 	vmov.f32	s18, s1
 8011e1c:	edcd 0a03 	vstr	s1, [sp, #12]
 8011e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e24:	eef4 9a60 	vcmp.f32	s19, s1
 8011e28:	bf0c      	ite	eq
 8011e2a:	2301      	moveq	r3, #1
 8011e2c:	2300      	movne	r3, #0
 8011e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e32:	eef4 8a40 	vcmp.f32	s17, s0
 8011e36:	7463      	strb	r3, [r4, #17]
 8011e38:	bf0c      	ite	eq
 8011e3a:	2301      	moveq	r3, #1
 8011e3c:	2300      	movne	r3, #0
 8011e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e42:	74a3      	strb	r3, [r4, #18]
 8011e44:	d024      	beq.n	8011e90 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8011e46:	eef4 9a60 	vcmp.f32	s19, s1
 8011e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e4e:	d01f      	beq.n	8011e90 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8011e50:	ee3a aa6b 	vsub.f32	s20, s20, s23
 8011e54:	4640      	mov	r0, r8
 8011e56:	ee7a aacb 	vsub.f32	s21, s21, s22
 8011e5a:	eeb0 0a4b 	vmov.f32	s0, s22
 8011e5e:	eeca 7a2c 	vdiv.f32	s15, s20, s25
 8011e62:	ee8a 7a8c 	vdiv.f32	s14, s21, s24
 8011e66:	eef0 0a6b 	vmov.f32	s1, s23
 8011e6a:	eea7 0acc 	vfms.f32	s0, s15, s24
 8011e6e:	eeec 0a87 	vfma.f32	s1, s25, s14
 8011e72:	f006 fac8 	bl	8018406 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011e76:	ed8d 0a04 	vstr	s0, [sp, #16]
 8011e7a:	ee30 0a68 	vsub.f32	s0, s0, s17
 8011e7e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8011e82:	edcd 0a05 	vstr	s1, [sp, #20]
 8011e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e8a:	d121      	bne.n	8011ed0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x160>
 8011e8c:	2301      	movs	r3, #1
 8011e8e:	74a3      	strb	r3, [r4, #18]
 8011e90:	7c63      	ldrb	r3, [r4, #17]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d051      	beq.n	8011f3a <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ca>
 8011e96:	ee39 7a69 	vsub.f32	s14, s18, s19
 8011e9a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8011f90 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 8011e9e:	eef4 9ac9 	vcmpe.f32	s19, s18
 8011ea2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eaa:	edc4 7a08 	vstr	s15, [r4, #32]
 8011eae:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 8011eb2:	ee17 3a90 	vmov	r3, s15
 8011eb6:	eefd 7ae9 	vcvt.s32.f32	s15, s19
 8011eba:	b21a      	sxth	r2, r3
 8011ebc:	ee17 3a90 	vmov	r3, s15
 8011ec0:	bf48      	it	mi
 8011ec2:	8122      	strhmi	r2, [r4, #8]
 8011ec4:	b21b      	sxth	r3, r3
 8011ec6:	bf56      	itet	pl
 8011ec8:	80e2      	strhpl	r2, [r4, #6]
 8011eca:	80e3      	strhmi	r3, [r4, #6]
 8011ecc:	8123      	strhpl	r3, [r4, #8]
 8011ece:	e02c      	b.n	8011f2a <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8011ed0:	ee70 0ae9 	vsub.f32	s1, s1, s19
 8011ed4:	eec0 7a80 	vdiv.f32	s15, s1, s0
 8011ed8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011edc:	edc4 7a05 	vstr	s15, [r4, #20]
 8011ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ee4:	d102      	bne.n	8011eec <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x17c>
 8011ee6:	2301      	movs	r3, #1
 8011ee8:	7463      	strb	r3, [r4, #17]
 8011eea:	e7d1      	b.n	8011e90 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8011eec:	eeb0 7a69 	vmov.f32	s14, s19
 8011ef0:	ee39 9a69 	vsub.f32	s18, s18, s19
 8011ef4:	ee38 8a68 	vsub.f32	s16, s16, s17
 8011ef8:	eea8 7ae7 	vfms.f32	s14, s17, s15
 8011efc:	ed84 7a06 	vstr	s14, [r4, #24]
 8011f00:	ee89 7a27 	vdiv.f32	s14, s18, s15
 8011f04:	ee38 8a47 	vsub.f32	s16, s16, s14
 8011f08:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8011f94 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x224>
 8011f0c:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8011f10:	ed84 8a07 	vstr	s16, [r4, #28]
 8011f14:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f1c:	edc4 7a08 	vstr	s15, [r4, #32]
 8011f20:	d503      	bpl.n	8011f2a <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8011f22:	eeb1 8a48 	vneg.f32	s16, s16
 8011f26:	ed84 8a07 	vstr	s16, [r4, #28]
 8011f2a:	60e7      	str	r7, [r4, #12]
 8011f2c:	7426      	strb	r6, [r4, #16]
 8011f2e:	61ac      	str	r4, [r5, #24]
 8011f30:	b006      	add	sp, #24
 8011f32:	ecbd 8b0a 	vpop	{d8-d12}
 8011f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f3a:	7ca3      	ldrb	r3, [r4, #18]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d0f4      	beq.n	8011f2a <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8011f40:	ee38 7a68 	vsub.f32	s14, s16, s17
 8011f44:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8011f90 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 8011f48:	eef4 8ac8 	vcmpe.f32	s17, s16
 8011f4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f54:	edc4 7a08 	vstr	s15, [r4, #32]
 8011f58:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8011f5c:	ee17 3a90 	vmov	r3, s15
 8011f60:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 8011f64:	b21a      	sxth	r2, r3
 8011f66:	ee17 3a90 	vmov	r3, s15
 8011f6a:	bf48      	it	mi
 8011f6c:	8122      	strhmi	r2, [r4, #8]
 8011f6e:	b21b      	sxth	r3, r3
 8011f70:	bf56      	itet	pl
 8011f72:	80e2      	strhpl	r2, [r4, #6]
 8011f74:	80e3      	strhmi	r3, [r4, #6]
 8011f76:	8123      	strhpl	r3, [r4, #8]
 8011f78:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8011f7c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8011f80:	1a9b      	subs	r3, r3, r2
 8011f82:	ee07 3a90 	vmov	s15, r3
 8011f86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011f8a:	edc4 7a07 	vstr	s15, [r4, #28]
 8011f8e:	e7cc      	b.n	8011f2a <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8011f90:	447ffffe 	.word	0x447ffffe
 8011f94:	44800000 	.word	0x44800000

08011f98 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 8011f98:	b510      	push	{r4, lr}
 8011f9a:	ed2d 8b02 	vpush	{d8}
 8011f9e:	eef0 8a62 	vmov.f32	s17, s5
 8011fa2:	2100      	movs	r1, #0
 8011fa4:	4604      	mov	r4, r0
 8011fa6:	eeb0 8a42 	vmov.f32	s16, s4
 8011faa:	f012 fb2f 	bl	802460c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 8011fae:	eef0 7a68 	vmov.f32	s15, s17
 8011fb2:	6823      	ldr	r3, [r4, #0]
 8011fb4:	4620      	mov	r0, r4
 8011fb6:	689b      	ldr	r3, [r3, #8]
 8011fb8:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011fbc:	ee17 2a90 	vmov	r2, s15
 8011fc0:	eef0 7a48 	vmov.f32	s15, s16
 8011fc4:	ecbd 8b02 	vpop	{d8}
 8011fc8:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011fd0:	ee17 1a90 	vmov	r1, s15
 8011fd4:	4718      	bx	r3

08011fd6 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 8011fd6:	b510      	push	{r4, lr}
 8011fd8:	ed2d 8b02 	vpush	{d8}
 8011fdc:	eef0 8a63 	vmov.f32	s17, s7
 8011fe0:	2100      	movs	r1, #0
 8011fe2:	4604      	mov	r4, r0
 8011fe4:	eeb0 8a43 	vmov.f32	s16, s6
 8011fe8:	f012 fbd2 	bl	8024790 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8011fec:	eef0 7a68 	vmov.f32	s15, s17
 8011ff0:	6823      	ldr	r3, [r4, #0]
 8011ff2:	4620      	mov	r0, r4
 8011ff4:	689b      	ldr	r3, [r3, #8]
 8011ff6:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011ffa:	ee17 2a90 	vmov	r2, s15
 8011ffe:	eef0 7a48 	vmov.f32	s15, s16
 8012002:	ecbd 8b02 	vpop	{d8}
 8012006:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801200a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801200e:	ee17 1a90 	vmov	r1, s15
 8012012:	4718      	bx	r3

08012014 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 8012014:	b513      	push	{r0, r1, r4, lr}
 8012016:	4604      	mov	r4, r0
 8012018:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 801201a:	f006 f9f4 	bl	8018406 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801201e:	eef0 7a60 	vmov.f32	s15, s1
 8012022:	4620      	mov	r0, r4
 8012024:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8012028:	ee17 2a90 	vmov	r2, s15
 801202c:	eef0 7a40 	vmov.f32	s15, s0
 8012030:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8012034:	ee17 1a90 	vmov	r1, s15
 8012038:	b002      	add	sp, #8
 801203a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801203e:	f012 ba3f 	b.w	80244c0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

08012042 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 8012042:	b513      	push	{r0, r1, r4, lr}
 8012044:	4604      	mov	r4, r0
 8012046:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8012048:	f006 f9dd 	bl	8018406 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801204c:	eef0 7a60 	vmov.f32	s15, s1
 8012050:	4620      	mov	r0, r4
 8012052:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8012056:	ee17 2a90 	vmov	r2, s15
 801205a:	eef0 7a40 	vmov.f32	s15, s0
 801205e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8012062:	ee17 1a90 	vmov	r1, s15
 8012066:	b002      	add	sp, #8
 8012068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801206c:	f012 ba75 	b.w	802455a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

08012070 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 8012070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012072:	2400      	movs	r4, #0
 8012074:	9f07      	ldr	r7, [sp, #28]
 8012076:	f04f 0e01 	mov.w	lr, #1
 801207a:	4626      	mov	r6, r4
 801207c:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 8012080:	4463      	add	r3, ip
 8012082:	4563      	cmp	r3, ip
 8012084:	d02d      	beq.n	80120e2 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 8012086:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 801208a:	2d06      	cmp	r5, #6
 801208c:	d8f9      	bhi.n	8012082 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 801208e:	fa0e f505 	lsl.w	r5, lr, r5
 8012092:	f015 0f66 	tst.w	r5, #102	@ 0x66
 8012096:	d10d      	bne.n	80120b4 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 8012098:	f015 0f10 	tst.w	r5, #16
 801209c:	d117      	bne.n	80120ce <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 801209e:	072d      	lsls	r5, r5, #28
 80120a0:	d5ef      	bpl.n	8012082 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 80120a2:	3801      	subs	r0, #1
 80120a4:	b91e      	cbnz	r6, 80120ae <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 80120a6:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 80120aa:	682d      	ldr	r5, [r5, #0]
 80120ac:	600d      	str	r5, [r1, #0]
 80120ae:	b96c      	cbnz	r4, 80120cc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 80120b0:	2601      	movs	r6, #1
 80120b2:	e7e6      	b.n	8012082 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 80120b4:	b926      	cbnz	r6, 80120c0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 80120b6:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 80120ba:	f853 3c08 	ldr.w	r3, [r3, #-8]
 80120be:	600b      	str	r3, [r1, #0]
 80120c0:	b924      	cbnz	r4, 80120cc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 80120c2:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 80120c6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80120ca:	6013      	str	r3, [r2, #0]
 80120cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120ce:	3801      	subs	r0, #1
 80120d0:	b91c      	cbnz	r4, 80120da <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 80120d2:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 80120d6:	6824      	ldr	r4, [r4, #0]
 80120d8:	6014      	str	r4, [r2, #0]
 80120da:	2e00      	cmp	r6, #0
 80120dc:	d1f6      	bne.n	80120cc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 80120de:	2401      	movs	r4, #1
 80120e0:	e7cf      	b.n	8012082 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 80120e2:	b90e      	cbnz	r6, 80120e8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 80120e4:	2300      	movs	r3, #0
 80120e6:	600b      	str	r3, [r1, #0]
 80120e8:	2c00      	cmp	r4, #0
 80120ea:	d1ef      	bne.n	80120cc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 80120ec:	2300      	movs	r3, #0
 80120ee:	e7ec      	b.n	80120ca <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

080120f0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 80120f0:	b538      	push	{r3, r4, r5, lr}
 80120f2:	ed2d 8b0a 	vpush	{d8-d12}
 80120f6:	eef0 ba40 	vmov.f32	s23, s0
 80120fa:	4604      	mov	r4, r0
 80120fc:	eeb0 ca60 	vmov.f32	s24, s1
 8012100:	460d      	mov	r5, r1
 8012102:	eef0 aa41 	vmov.f32	s21, s2
 8012106:	eeb0 ba61 	vmov.f32	s22, s3
 801210a:	eeb0 9a42 	vmov.f32	s18, s4
 801210e:	eef0 9a62 	vmov.f32	s19, s5
 8012112:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 8012116:	ee7b 8a29 	vadd.f32	s17, s22, s19
 801211a:	ee3a 8a89 	vadd.f32	s16, s21, s18
 801211e:	ee68 8a8a 	vmul.f32	s17, s17, s20
 8012122:	ee28 8a0a 	vmul.f32	s16, s16, s20
 8012126:	ee3c 0a68 	vsub.f32	s0, s24, s17
 801212a:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 801212e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8012132:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8012136:	f012 fd03 	bl	8024b40 <sqrtf>
 801213a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801213e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012142:	d12e      	bne.n	80121a2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 8012144:	ee79 7a6a 	vsub.f32	s15, s18, s21
 8012148:	ee39 7acb 	vsub.f32	s14, s19, s22
 801214c:	eeb0 8a6a 	vmov.f32	s16, s21
 8012150:	eef0 8a4b 	vmov.f32	s17, s22
 8012154:	eea7 8a8a 	vfma.f32	s16, s15, s20
 8012158:	eee7 8a0a 	vfma.f32	s17, s14, s20
 801215c:	eea7 8a0a 	vfma.f32	s16, s14, s20
 8012160:	eee7 8aca 	vfms.f32	s17, s15, s20
 8012164:	2d02      	cmp	r5, #2
 8012166:	dc2f      	bgt.n	80121c8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 8012168:	3501      	adds	r5, #1
 801216a:	eef0 1a4b 	vmov.f32	s3, s22
 801216e:	eeb0 1a6a 	vmov.f32	s2, s21
 8012172:	4620      	mov	r0, r4
 8012174:	4629      	mov	r1, r5
 8012176:	eef0 2a68 	vmov.f32	s5, s17
 801217a:	eeb0 2a48 	vmov.f32	s4, s16
 801217e:	eef0 0a4c 	vmov.f32	s1, s24
 8012182:	eeb0 0a6b 	vmov.f32	s0, s23
 8012186:	f7ff ffb3 	bl	80120f0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 801218a:	eef0 0a68 	vmov.f32	s1, s17
 801218e:	eeb0 0a48 	vmov.f32	s0, s16
 8012192:	4620      	mov	r0, r4
 8012194:	f7ff ff55 	bl	8012042 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8012198:	eeb0 ba68 	vmov.f32	s22, s17
 801219c:	eef0 aa48 	vmov.f32	s21, s16
 80121a0:	e7b9      	b.n	8012116 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 80121a2:	ee38 8a6b 	vsub.f32	s16, s16, s23
 80121a6:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 80121aa:	ee78 8acc 	vsub.f32	s17, s17, s24
 80121ae:	ee28 7a27 	vmul.f32	s14, s16, s15
 80121b2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80121b6:	ee87 8a00 	vdiv.f32	s16, s14, s0
 80121ba:	eec7 8a80 	vdiv.f32	s17, s15, s0
 80121be:	ee3b 8a88 	vadd.f32	s16, s23, s16
 80121c2:	ee7c 8a28 	vadd.f32	s17, s24, s17
 80121c6:	e7cd      	b.n	8012164 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 80121c8:	eef0 0a68 	vmov.f32	s1, s17
 80121cc:	4620      	mov	r0, r4
 80121ce:	eeb0 0a48 	vmov.f32	s0, s16
 80121d2:	f7ff ff36 	bl	8012042 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80121d6:	ecbd 8b0a 	vpop	{d8-d12}
 80121da:	bd38      	pop	{r3, r4, r5, pc}

080121dc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 80121dc:	b510      	push	{r4, lr}
 80121de:	ed2d 8b0a 	vpush	{d8-d12}
 80121e2:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 80121e6:	4604      	mov	r4, r0
 80121e8:	eeb0 ca40 	vmov.f32	s24, s0
 80121ec:	2b02      	cmp	r3, #2
 80121ee:	eeb0 9a60 	vmov.f32	s18, s1
 80121f2:	eef0 9a41 	vmov.f32	s19, s2
 80121f6:	eef0 8a61 	vmov.f32	s17, s3
 80121fa:	eeb0 ba42 	vmov.f32	s22, s4
 80121fe:	eef0 ba62 	vmov.f32	s23, s5
 8012202:	eeb0 aa43 	vmov.f32	s20, s6
 8012206:	eef0 aa63 	vmov.f32	s21, s7
 801220a:	eeb0 8a44 	vmov.f32	s16, s8
 801220e:	eef0 ca64 	vmov.f32	s25, s9
 8012212:	d12c      	bne.n	801226e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 8012214:	eef0 0a62 	vmov.f32	s1, s5
 8012218:	eeb0 0a42 	vmov.f32	s0, s4
 801221c:	f7ff ff11 	bl	8012042 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8012220:	ee79 9acb 	vsub.f32	s19, s19, s22
 8012224:	ee7a caec 	vsub.f32	s25, s21, s25
 8012228:	ee78 8aeb 	vsub.f32	s17, s17, s23
 801222c:	ee3a 8a48 	vsub.f32	s16, s20, s16
 8012230:	ee69 9aac 	vmul.f32	s19, s19, s25
 8012234:	ee28 8a88 	vmul.f32	s16, s17, s16
 8012238:	eef4 9ac8 	vcmpe.f32	s19, s16
 801223c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012240:	db0f      	blt.n	8012262 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 8012242:	2101      	movs	r1, #1
 8012244:	eef0 2a6a 	vmov.f32	s5, s21
 8012248:	eeb0 2a4a 	vmov.f32	s4, s20
 801224c:	4620      	mov	r0, r4
 801224e:	eef0 1a6b 	vmov.f32	s3, s23
 8012252:	eeb0 1a4b 	vmov.f32	s2, s22
 8012256:	eef0 0a49 	vmov.f32	s1, s18
 801225a:	eeb0 0a4c 	vmov.f32	s0, s24
 801225e:	f7ff ff47 	bl	80120f0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 8012262:	eef0 0a6a 	vmov.f32	s1, s21
 8012266:	4620      	mov	r0, r4
 8012268:	eeb0 0a4a 	vmov.f32	s0, s20
 801226c:	e035      	b.n	80122da <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 801226e:	2b01      	cmp	r3, #1
 8012270:	d138      	bne.n	80122e4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8012272:	ee31 4ae2 	vsub.f32	s8, s3, s5
 8012276:	ee33 6a48 	vsub.f32	s12, s6, s16
 801227a:	ee71 7a42 	vsub.f32	s15, s2, s4
 801227e:	ee73 6ae4 	vsub.f32	s13, s7, s9
 8012282:	ee26 7a44 	vnmul.f32	s14, s12, s8
 8012286:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801228a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801228e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012292:	d027      	beq.n	80122e4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8012294:	ee28 8a63 	vnmul.f32	s16, s16, s7
 8012298:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 801229c:	eea4 8a83 	vfma.f32	s16, s9, s6
 80122a0:	eee1 8a22 	vfma.f32	s17, s2, s5
 80122a4:	ee68 7a67 	vnmul.f32	s15, s16, s15
 80122a8:	ee28 8a44 	vnmul.f32	s16, s16, s8
 80122ac:	eee6 7a28 	vfma.f32	s15, s12, s17
 80122b0:	eea6 8aa8 	vfma.f32	s16, s13, s17
 80122b4:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80122b8:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 80122bc:	eec8 0a07 	vdiv.f32	s1, s16, s14
 80122c0:	ee3c ca40 	vsub.f32	s24, s24, s0
 80122c4:	ee39 9a60 	vsub.f32	s18, s18, s1
 80122c8:	ee29 9a09 	vmul.f32	s18, s18, s18
 80122cc:	eeac 9a0c 	vfma.f32	s18, s24, s24
 80122d0:	eef4 7ac9 	vcmpe.f32	s15, s18
 80122d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122d8:	db04      	blt.n	80122e4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 80122da:	f7ff feb2 	bl	8012042 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80122de:	ecbd 8b0a 	vpop	{d8-d12}
 80122e2:	bd10      	pop	{r4, pc}
 80122e4:	eef0 0a6b 	vmov.f32	s1, s23
 80122e8:	4620      	mov	r0, r4
 80122ea:	eeb0 0a4b 	vmov.f32	s0, s22
 80122ee:	f7ff fea8 	bl	8012042 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80122f2:	e7b6      	b.n	8012262 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

080122f4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 80122f4:	b510      	push	{r4, lr}
 80122f6:	ed2d 8b0c 	vpush	{d8-d13}
 80122fa:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 80122fe:	4604      	mov	r4, r0
 8012300:	eeb0 9a40 	vmov.f32	s18, s0
 8012304:	eef0 9a60 	vmov.f32	s19, s1
 8012308:	eef0 aa41 	vmov.f32	s21, s2
 801230c:	eeb0 ba61 	vmov.f32	s22, s3
 8012310:	b933      	cbnz	r3, 8012320 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 8012312:	f7ff fe96 	bl	8012042 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8012316:	eef0 0a4b 	vmov.f32	s1, s22
 801231a:	eeb0 0a6a 	vmov.f32	s0, s21
 801231e:	e015      	b.n	801234c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 8012320:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8012324:	2b02      	cmp	r3, #2
 8012326:	ee71 8a40 	vsub.f32	s17, s2, s0
 801232a:	ee31 8ae0 	vsub.f32	s16, s3, s1
 801232e:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8012332:	ee28 8a27 	vmul.f32	s16, s16, s15
 8012336:	d10f      	bne.n	8012358 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 8012338:	ee70 0ae8 	vsub.f32	s1, s1, s17
 801233c:	ee30 0a08 	vadd.f32	s0, s0, s16
 8012340:	f7ff fe7f 	bl	8012042 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8012344:	ee7b 0a68 	vsub.f32	s1, s22, s17
 8012348:	ee3a 0a88 	vadd.f32	s0, s21, s16
 801234c:	4620      	mov	r0, r4
 801234e:	f7ff fe78 	bl	8012042 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8012352:	ecbd 8b0c 	vpop	{d8-d13}
 8012356:	bd10      	pop	{r4, pc}
 8012358:	f7ff fe73 	bl	8012042 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801235c:	eef0 0a69 	vmov.f32	s1, s19
 8012360:	eeb0 0a49 	vmov.f32	s0, s18
 8012364:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 8012494 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 8012368:	eeb1 aa68 	vneg.f32	s20, s17
 801236c:	eddf ba4a 	vldr	s23, [pc, #296]	@ 8012498 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 8012370:	eee8 0a27 	vfma.f32	s1, s16, s15
 8012374:	4620      	mov	r0, r4
 8012376:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801237a:	ed9f ca48 	vldr	s24, [pc, #288]	@ 801249c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 801237e:	eddf ca48 	vldr	s25, [pc, #288]	@ 80124a0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 8012382:	ed9f da48 	vldr	s26, [pc, #288]	@ 80124a4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 8012386:	eeea 0a2b 	vfma.f32	s1, s20, s23
 801238a:	eea8 0a2b 	vfma.f32	s0, s16, s23
 801238e:	f7ff fe58 	bl	8012042 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8012392:	eef0 0a69 	vmov.f32	s1, s19
 8012396:	eeb0 0a49 	vmov.f32	s0, s18
 801239a:	eddf 7a43 	vldr	s15, [pc, #268]	@ 80124a8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 801239e:	4620      	mov	r0, r4
 80123a0:	eee8 0a27 	vfma.f32	s1, s16, s15
 80123a4:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80123a8:	eeea 0a0c 	vfma.f32	s1, s20, s24
 80123ac:	eea8 0a0c 	vfma.f32	s0, s16, s24
 80123b0:	f7ff fe47 	bl	8012042 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80123b4:	eef0 0a69 	vmov.f32	s1, s19
 80123b8:	eeb0 0a49 	vmov.f32	s0, s18
 80123bc:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 80124ac <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 80123c0:	4620      	mov	r0, r4
 80123c2:	eee8 0a27 	vfma.f32	s1, s16, s15
 80123c6:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80123ca:	eeea 0a2c 	vfma.f32	s1, s20, s25
 80123ce:	eea8 0a2c 	vfma.f32	s0, s16, s25
 80123d2:	f7ff fe36 	bl	8012042 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80123d6:	eef0 0a69 	vmov.f32	s1, s19
 80123da:	eeb0 0a49 	vmov.f32	s0, s18
 80123de:	eddf 7a34 	vldr	s15, [pc, #208]	@ 80124b0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 80123e2:	4620      	mov	r0, r4
 80123e4:	eee8 0a27 	vfma.f32	s1, s16, s15
 80123e8:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80123ec:	eeea 0a0d 	vfma.f32	s1, s20, s26
 80123f0:	eea8 0a0d 	vfma.f32	s0, s16, s26
 80123f4:	f7ff fe25 	bl	8012042 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80123f8:	ee79 0a88 	vadd.f32	s1, s19, s16
 80123fc:	ee39 0a28 	vadd.f32	s0, s18, s17
 8012400:	4620      	mov	r0, r4
 8012402:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8012406:	ee30 0a08 	vadd.f32	s0, s0, s16
 801240a:	f7ff fe1a 	bl	8012042 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801240e:	eef0 0a69 	vmov.f32	s1, s19
 8012412:	eeb0 0a49 	vmov.f32	s0, s18
 8012416:	eddf 7a27 	vldr	s15, [pc, #156]	@ 80124b4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 801241a:	4620      	mov	r0, r4
 801241c:	eee8 0a27 	vfma.f32	s1, s16, s15
 8012420:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8012424:	eeea 0a0d 	vfma.f32	s1, s20, s26
 8012428:	eea8 0a0d 	vfma.f32	s0, s16, s26
 801242c:	f7ff fe09 	bl	8012042 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8012430:	eef0 0a69 	vmov.f32	s1, s19
 8012434:	eeb0 0a49 	vmov.f32	s0, s18
 8012438:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 80124b8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 801243c:	4620      	mov	r0, r4
 801243e:	eee8 0a27 	vfma.f32	s1, s16, s15
 8012442:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8012446:	eeea 0a2c 	vfma.f32	s1, s20, s25
 801244a:	eea8 0a2c 	vfma.f32	s0, s16, s25
 801244e:	f7ff fdf8 	bl	8012042 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8012452:	eef0 0a69 	vmov.f32	s1, s19
 8012456:	eeb0 0a49 	vmov.f32	s0, s18
 801245a:	eddf 7a18 	vldr	s15, [pc, #96]	@ 80124bc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 801245e:	4620      	mov	r0, r4
 8012460:	eee8 0a27 	vfma.f32	s1, s16, s15
 8012464:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8012468:	eeea 0a0c 	vfma.f32	s1, s20, s24
 801246c:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8012470:	f7ff fde7 	bl	8012042 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8012474:	eef0 0a69 	vmov.f32	s1, s19
 8012478:	eeb0 0a49 	vmov.f32	s0, s18
 801247c:	eddf 7a10 	vldr	s15, [pc, #64]	@ 80124c0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 8012480:	4620      	mov	r0, r4
 8012482:	eee8 0a27 	vfma.f32	s1, s16, s15
 8012486:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801248a:	eeea 0a2b 	vfma.f32	s1, s20, s23
 801248e:	eea8 0a2b 	vfma.f32	s0, s16, s23
 8012492:	e73e      	b.n	8012312 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 8012494:	3d23d70a 	.word	0x3d23d70a
 8012498:	3e8f5c29 	.word	0x3e8f5c29
 801249c:	3f19999a 	.word	0x3f19999a
 80124a0:	3f4ccccd 	.word	0x3f4ccccd
 80124a4:	3f75c28f 	.word	0x3f75c28f
 80124a8:	3e4ccccd 	.word	0x3e4ccccd
 80124ac:	3ecccccd 	.word	0x3ecccccd
 80124b0:	3f3851ec 	.word	0x3f3851ec
 80124b4:	3fa3d70a 	.word	0x3fa3d70a
 80124b8:	3fcccccd 	.word	0x3fcccccd
 80124bc:	3fe66666 	.word	0x3fe66666
 80124c0:	3ffae148 	.word	0x3ffae148

080124c4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 80124c4:	b570      	push	{r4, r5, r6, lr}
 80124c6:	ed2d 8b06 	vpush	{d8-d10}
 80124ca:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 80124ce:	eef0 aa40 	vmov.f32	s21, s0
 80124d2:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 80124d6:	4604      	mov	r4, r0
 80124d8:	ee30 8ac8 	vsub.f32	s16, s1, s16
 80124dc:	ee30 9a49 	vsub.f32	s18, s0, s18
 80124e0:	eeb0 aa60 	vmov.f32	s20, s1
 80124e4:	ee28 0a08 	vmul.f32	s0, s16, s16
 80124e8:	eea9 0a09 	vfma.f32	s0, s18, s18
 80124ec:	f012 fb28 	bl	8024b40 <sqrtf>
 80124f0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80124f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124f8:	dd36      	ble.n	8012568 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 80124fa:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 80124fe:	2600      	movs	r6, #0
 8012500:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 8012504:	eec0 6a27 	vdiv.f32	s13, s0, s15
 8012508:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 801250c:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 8012510:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8012514:	eec8 8a26 	vdiv.f32	s17, s16, s13
 8012518:	ee89 8a26 	vdiv.f32	s16, s18, s13
 801251c:	ee70 9a28 	vadd.f32	s19, s0, s17
 8012520:	ee78 8aaa 	vadd.f32	s17, s17, s21
 8012524:	ee30 9ac8 	vsub.f32	s18, s1, s16
 8012528:	ee3a 8a48 	vsub.f32	s16, s20, s16
 801252c:	b1fd      	cbz	r5, 801256e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 801252e:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 8012532:	eef0 0a49 	vmov.f32	s1, s18
 8012536:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 801253a:	eeb0 0a69 	vmov.f32	s0, s19
 801253e:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 8012542:	4620      	mov	r0, r4
 8012544:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 8012548:	f7ff fd64 	bl	8012014 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 801254c:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 8012550:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 8012554:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 8012558:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 801255c:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 8012560:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 8012564:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 8012568:	ecbd 8b06 	vpop	{d8-d10}
 801256c:	bd70      	pop	{r4, r5, r6, pc}
 801256e:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 8012572:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 8012576:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 801257a:	b16b      	cbz	r3, 8012598 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 801257c:	eef0 1a49 	vmov.f32	s3, s18
 8012580:	4620      	mov	r0, r4
 8012582:	eeb0 1a69 	vmov.f32	s2, s19
 8012586:	eef0 0a62 	vmov.f32	s1, s5
 801258a:	eeb0 0a42 	vmov.f32	s0, s4
 801258e:	f7ff feb1 	bl	80122f4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8012592:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 8012596:	e7db      	b.n	8012550 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 8012598:	eef0 4a48 	vmov.f32	s9, s16
 801259c:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 80125a0:	eeb0 4a68 	vmov.f32	s8, s17
 80125a4:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 80125a8:	eef0 3a49 	vmov.f32	s7, s18
 80125ac:	4620      	mov	r0, r4
 80125ae:	eeb0 3a69 	vmov.f32	s6, s19
 80125b2:	f7ff fe13 	bl	80121dc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 80125b6:	e7cb      	b.n	8012550 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

080125b8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 80125b8:	ee07 2a90 	vmov	s15, r2
 80125bc:	ee07 1a10 	vmov	s14, r1
 80125c0:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 80125c4:	eddf 7a04 	vldr	s15, [pc, #16]	@ 80125d8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 80125c8:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 80125cc:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80125d0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80125d4:	f7ff bf76 	b.w	80124c4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 80125d8:	3d000000 	.word	0x3d000000

080125dc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 80125dc:	b538      	push	{r3, r4, r5, lr}
 80125de:	ed2d 8b02 	vpush	{d8}
 80125e2:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 80125e6:	4604      	mov	r4, r0
 80125e8:	b31d      	cbz	r5, 8012632 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 80125ea:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 80125ee:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 80125f2:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 80125f6:	ee78 8a67 	vsub.f32	s17, s16, s15
 80125fa:	ee38 8a27 	vadd.f32	s16, s16, s15
 80125fe:	eef0 0a68 	vmov.f32	s1, s17
 8012602:	f7ff fd07 	bl	8012014 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8012606:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 801260a:	eef0 1a48 	vmov.f32	s3, s16
 801260e:	4620      	mov	r0, r4
 8012610:	eeb0 0a41 	vmov.f32	s0, s2
 8012614:	eef0 0a68 	vmov.f32	s1, s17
 8012618:	f7ff fe6c 	bl	80122f4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 801261c:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8012620:	eef0 1a68 	vmov.f32	s3, s17
 8012624:	4620      	mov	r0, r4
 8012626:	eef0 0a48 	vmov.f32	s1, s16
 801262a:	eeb0 0a41 	vmov.f32	s0, s2
 801262e:	f7ff fe61 	bl	80122f4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8012632:	4628      	mov	r0, r5
 8012634:	ecbd 8b02 	vpop	{d8}
 8012638:	bd38      	pop	{r3, r4, r5, pc}

0801263a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 801263a:	b510      	push	{r4, lr}
 801263c:	ed2d 8b02 	vpush	{d8}
 8012640:	4604      	mov	r4, r0
 8012642:	eeb0 8a40 	vmov.f32	s16, s0
 8012646:	eef0 8a60 	vmov.f32	s17, s1
 801264a:	f7ff ffc7 	bl	80125dc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 801264e:	b9d0      	cbnz	r0, 8012686 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 8012650:	4620      	mov	r0, r4
 8012652:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 8012656:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 801265a:	eef0 0a68 	vmov.f32	s1, s17
 801265e:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 8012662:	eeb0 0a48 	vmov.f32	s0, s16
 8012666:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 801266a:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 801266e:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 8012672:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 8012676:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 801267a:	f7ff fdaf 	bl	80121dc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 801267e:	2001      	movs	r0, #1
 8012680:	ecbd 8b02 	vpop	{d8}
 8012684:	bd10      	pop	{r4, pc}
 8012686:	2000      	movs	r0, #0
 8012688:	e7fa      	b.n	8012680 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

0801268a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 801268a:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 801268e:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 8012692:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 8012696:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 801269a:	f7ff be2b 	b.w	80122f4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

080126a0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 80126a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126a4:	b089      	sub	sp, #36	@ 0x24
 80126a6:	461c      	mov	r4, r3
 80126a8:	4682      	mov	sl, r0
 80126aa:	4615      	mov	r5, r2
 80126ac:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80126b0:	f10d 0820 	add.w	r8, sp, #32
 80126b4:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80126b6:	9304      	str	r3, [sp, #16]
 80126b8:	2300      	movs	r3, #0
 80126ba:	9105      	str	r1, [sp, #20]
 80126bc:	9306      	str	r3, [sp, #24]
 80126be:	f848 3d04 	str.w	r3, [r8, #-4]!
 80126c2:	9b04      	ldr	r3, [sp, #16]
 80126c4:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 80126c8:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 80126cc:	9b05      	ldr	r3, [sp, #20]
 80126ce:	429d      	cmp	r5, r3
 80126d0:	d96d      	bls.n	80127ae <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 80126d2:	3d01      	subs	r5, #1
 80126d4:	f819 3005 	ldrb.w	r3, [r9, r5]
 80126d8:	2b06      	cmp	r3, #6
 80126da:	d8f7      	bhi.n	80126cc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 80126dc:	a201      	add	r2, pc, #4	@ (adr r2, 80126e4 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 80126de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126e2:	bf00      	nop
 80126e4:	08012703 	.word	0x08012703
 80126e8:	080126cd 	.word	0x080126cd
 80126ec:	08012701 	.word	0x08012701
 80126f0:	08012725 	.word	0x08012725
 80126f4:	08012725 	.word	0x08012725
 80126f8:	08012729 	.word	0x08012729
 80126fc:	08012769 	.word	0x08012769
 8012700:	3c02      	subs	r4, #2
 8012702:	4650      	mov	r0, sl
 8012704:	9400      	str	r4, [sp, #0]
 8012706:	462b      	mov	r3, r5
 8012708:	4642      	mov	r2, r8
 801270a:	a906      	add	r1, sp, #24
 801270c:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8012710:	f7ff fcae 	bl	8012070 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8012714:	eddd 0a07 	vldr	s1, [sp, #28]
 8012718:	ed9d 0a06 	vldr	s0, [sp, #24]
 801271c:	4630      	mov	r0, r6
 801271e:	f7ff fed1 	bl	80124c4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8012722:	e7d3      	b.n	80126cc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8012724:	3c01      	subs	r4, #1
 8012726:	e7ec      	b.n	8012702 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 8012728:	f1a4 0b04 	sub.w	fp, r4, #4
 801272c:	3c02      	subs	r4, #2
 801272e:	4650      	mov	r0, sl
 8012730:	462b      	mov	r3, r5
 8012732:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8012736:	f8cd b000 	str.w	fp, [sp]
 801273a:	4642      	mov	r2, r8
 801273c:	a906      	add	r1, sp, #24
 801273e:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8012742:	f7ff fc95 	bl	8012070 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8012746:	eddd 2a07 	vldr	s5, [sp, #28]
 801274a:	ed9d 2a06 	vldr	s4, [sp, #24]
 801274e:	4630      	mov	r0, r6
 8012750:	ed54 1a01 	vldr	s3, [r4, #-4]
 8012754:	ed14 1a02 	vldr	s2, [r4, #-8]
 8012758:	edd4 0a01 	vldr	s1, [r4, #4]
 801275c:	ed94 0a00 	vldr	s0, [r4]
 8012760:	f7ff fc1a 	bl	8011f98 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8012764:	465c      	mov	r4, fp
 8012766:	e7b1      	b.n	80126cc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8012768:	f1a4 0b06 	sub.w	fp, r4, #6
 801276c:	3c02      	subs	r4, #2
 801276e:	4650      	mov	r0, sl
 8012770:	462b      	mov	r3, r5
 8012772:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8012776:	f8cd b000 	str.w	fp, [sp]
 801277a:	4642      	mov	r2, r8
 801277c:	a906      	add	r1, sp, #24
 801277e:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8012782:	f7ff fc75 	bl	8012070 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8012786:	eddd 3a07 	vldr	s7, [sp, #28]
 801278a:	ed9d 3a06 	vldr	s6, [sp, #24]
 801278e:	4630      	mov	r0, r6
 8012790:	ed54 2a03 	vldr	s5, [r4, #-12]
 8012794:	ed14 2a04 	vldr	s4, [r4, #-16]
 8012798:	ed54 1a01 	vldr	s3, [r4, #-4]
 801279c:	ed14 1a02 	vldr	s2, [r4, #-8]
 80127a0:	edd4 0a01 	vldr	s1, [r4, #4]
 80127a4:	ed94 0a00 	vldr	s0, [r4]
 80127a8:	f7ff fc15 	bl	8011fd6 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 80127ac:	e7da      	b.n	8012764 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 80127ae:	9b04      	ldr	r3, [sp, #16]
 80127b0:	b113      	cbz	r3, 80127b8 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 80127b2:	4630      	mov	r0, r6
 80127b4:	f7ff ff69 	bl	801268a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 80127b8:	b009      	add	sp, #36	@ 0x24
 80127ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127be:	bf00      	nop

080127c0 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 80127c0:	eef0 7a60 	vmov.f32	s15, s1
 80127c4:	6803      	ldr	r3, [r0, #0]
 80127c6:	689b      	ldr	r3, [r3, #8]
 80127c8:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80127cc:	ee17 2a90 	vmov	r2, s15
 80127d0:	eef0 7a40 	vmov.f32	s15, s0
 80127d4:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80127d8:	ee17 1a90 	vmov	r1, s15
 80127dc:	4718      	bx	r3
	...

080127e0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 80127e0:	4b04      	ldr	r3, [pc, #16]	@ (80127f4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 80127e2:	b510      	push	{r4, lr}
 80127e4:	4604      	mov	r4, r0
 80127e6:	f840 3b14 	str.w	r3, [r0], #20
 80127ea:	f001 fe28 	bl	801443e <_ZN8touchgfx7OutlineD1Ev>
 80127ee:	4620      	mov	r0, r4
 80127f0:	bd10      	pop	{r4, pc}
 80127f2:	bf00      	nop
 80127f4:	08029c48 	.word	0x08029c48

080127f8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 80127f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127fc:	ed2d 8b04 	vpush	{d8-d9}
 8012800:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 8012804:	b0b5      	sub	sp, #212	@ 0xd4
 8012806:	4605      	mov	r5, r0
 8012808:	468b      	mov	fp, r1
 801280a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801280e:	9206      	str	r2, [sp, #24]
 8012810:	461e      	mov	r6, r3
 8012812:	2400      	movs	r4, #0
 8012814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012818:	f240 814f 	bls.w	8012aba <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 801281c:	23ff      	movs	r3, #255	@ 0xff
 801281e:	1d02      	adds	r2, r0, #4
 8012820:	ed9f 9aa7 	vldr	s18, [pc, #668]	@ 8012ac0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 8012824:	f04f 0800 	mov.w	r8, #0
 8012828:	9300      	str	r3, [sp, #0]
 801282a:	af08      	add	r7, sp, #32
 801282c:	6981      	ldr	r1, [r0, #24]
 801282e:	a808      	add	r0, sp, #32
 8012830:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8012832:	eef0 9a49 	vmov.f32	s19, s18
 8012836:	f011 fcf7 	bl	8024228 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 801283a:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 801283e:	4ba1      	ldr	r3, [pc, #644]	@ (8012ac4 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 8012840:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8012844:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012848:	2201      	movs	r2, #1
 801284a:	9308      	str	r3, [sp, #32]
 801284c:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 8012850:	edd5 6a08 	vldr	s13, [r5, #32]
 8012854:	eeb0 8a49 	vmov.f32	s16, s18
 8012858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801285c:	9325      	str	r3, [sp, #148]	@ 0x94
 801285e:	f04f 0300 	mov.w	r3, #0
 8012862:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 8012866:	7f6a      	ldrb	r2, [r5, #29]
 8012868:	eef0 8a49 	vmov.f32	s17, s18
 801286c:	bf48      	it	mi
 801286e:	eef1 7a67 	vnegmi.f32	s15, s15
 8012872:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 8012876:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 801287a:	46c1      	mov	r9, r8
 801287c:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8012880:	f04f 0a01 	mov.w	sl, #1
 8012884:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012888:	7fab      	ldrb	r3, [r5, #30]
 801288a:	942a      	str	r4, [sp, #168]	@ 0xa8
 801288c:	435a      	muls	r2, r3
 801288e:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 8012892:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8012896:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 801289a:	1c53      	adds	r3, r2, #1
 801289c:	942b      	str	r4, [sp, #172]	@ 0xac
 801289e:	942c      	str	r4, [sp, #176]	@ 0xb0
 80128a0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80128a4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80128a8:	942d      	str	r4, [sp, #180]	@ 0xb4
 80128aa:	942e      	str	r4, [sp, #184]	@ 0xb8
 80128ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80128b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80128b4:	942f      	str	r4, [sp, #188]	@ 0xbc
 80128b6:	9430      	str	r4, [sp, #192]	@ 0xc0
 80128b8:	9431      	str	r4, [sp, #196]	@ 0xc4
 80128ba:	9432      	str	r4, [sp, #200]	@ 0xc8
 80128bc:	9433      	str	r4, [sp, #204]	@ 0xcc
 80128be:	4644      	mov	r4, r8
 80128c0:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 80128c4:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 80128c8:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 80128cc:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 80128d0:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 80128d4:	9b06      	ldr	r3, [sp, #24]
 80128d6:	454b      	cmp	r3, r9
 80128d8:	f000 80cc 	beq.w	8012a74 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 80128dc:	f109 0301 	add.w	r3, r9, #1
 80128e0:	9305      	str	r3, [sp, #20]
 80128e2:	f81b 3009 	ldrb.w	r3, [fp, r9]
 80128e6:	2b06      	cmp	r3, #6
 80128e8:	d839      	bhi.n	801295e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 80128ea:	e8df f003 	tbb	[pc, r3]
 80128ee:	3b04      	.short	0x3b04
 80128f0:	817c6f60 	.word	0x817c6f60
 80128f4:	a0          	.byte	0xa0
 80128f5:	00          	.byte	0x00
 80128f6:	45c1      	cmp	r9, r8
 80128f8:	d92b      	bls.n	8012952 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 80128fa:	eef0 0a49 	vmov.f32	s1, s18
 80128fe:	4638      	mov	r0, r7
 8012900:	eeb0 0a69 	vmov.f32	s0, s19
 8012904:	f7ff fdde 	bl	80124c4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8012908:	4638      	mov	r0, r7
 801290a:	f7ff fe67 	bl	80125dc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 801290e:	4681      	mov	r9, r0
 8012910:	b9f8      	cbnz	r0, 8012952 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 8012912:	eef0 0a49 	vmov.f32	s1, s18
 8012916:	4638      	mov	r0, r7
 8012918:	eeb0 0a69 	vmov.f32	s0, s19
 801291c:	f7ff fe8d 	bl	801263a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8012920:	4628      	mov	r0, r5
 8012922:	4623      	mov	r3, r4
 8012924:	9a05      	ldr	r2, [sp, #20]
 8012926:	4641      	mov	r1, r8
 8012928:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 801292c:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 8012930:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8012934:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8012938:	e9cd 9702 	strd	r9, r7, [sp, #8]
 801293c:	e9cd b600 	strd	fp, r6, [sp]
 8012940:	f7ff feae 	bl	80126a0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8012944:	eef0 0a49 	vmov.f32	s1, s18
 8012948:	eeb0 0a69 	vmov.f32	s0, s19
 801294c:	4638      	mov	r0, r7
 801294e:	f7ff fe74 	bl	801263a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8012952:	eeb0 8a49 	vmov.f32	s16, s18
 8012956:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801295a:	eef0 8a69 	vmov.f32	s17, s19
 801295e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8012962:	e7b7      	b.n	80128d4 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 8012964:	45c1      	cmp	r9, r8
 8012966:	d90d      	bls.n	8012984 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8012968:	4638      	mov	r0, r7
 801296a:	f7ff fe37 	bl	80125dc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 801296e:	b948      	cbnz	r0, 8012984 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8012970:	4623      	mov	r3, r4
 8012972:	464a      	mov	r2, r9
 8012974:	4641      	mov	r1, r8
 8012976:	4628      	mov	r0, r5
 8012978:	e9cd a702 	strd	sl, r7, [sp, #8]
 801297c:	e9cd b600 	strd	fp, r6, [sp]
 8012980:	f7ff fe8e 	bl	80126a0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8012984:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012988:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 801298c:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8012990:	3402      	adds	r4, #2
 8012992:	edd3 8a00 	vldr	s17, [r3]
 8012996:	46c8      	mov	r8, r9
 8012998:	ed93 8a01 	vldr	s16, [r3, #4]
 801299c:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 80129a0:	eef0 9a68 	vmov.f32	s19, s17
 80129a4:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 80129a8:	eeb0 9a48 	vmov.f32	s18, s16
 80129ac:	e7d7      	b.n	801295e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 80129ae:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80129b2:	4638      	mov	r0, r7
 80129b4:	3402      	adds	r4, #2
 80129b6:	edd3 8a00 	vldr	s17, [r3]
 80129ba:	ed93 8a01 	vldr	s16, [r3, #4]
 80129be:	eeb0 0a68 	vmov.f32	s0, s17
 80129c2:	eef0 0a48 	vmov.f32	s1, s16
 80129c6:	f7ff fd7d 	bl	80124c4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 80129ca:	e7c8      	b.n	801295e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 80129cc:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80129d0:	edd3 8a00 	vldr	s17, [r3]
 80129d4:	eef0 0a48 	vmov.f32	s1, s16
 80129d8:	4638      	mov	r0, r7
 80129da:	eeb0 0a68 	vmov.f32	s0, s17
 80129de:	3401      	adds	r4, #1
 80129e0:	f7ff fd70 	bl	80124c4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 80129e4:	e7bb      	b.n	801295e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 80129e6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80129ea:	ed93 8a00 	vldr	s16, [r3]
 80129ee:	e7f1      	b.n	80129d4 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 80129f0:	00a3      	lsls	r3, r4, #2
 80129f2:	eef0 0a48 	vmov.f32	s1, s16
 80129f6:	eeb0 0a68 	vmov.f32	s0, s17
 80129fa:	4638      	mov	r0, r7
 80129fc:	f103 0208 	add.w	r2, r3, #8
 8012a00:	f103 090c 	add.w	r9, r3, #12
 8012a04:	4433      	add	r3, r6
 8012a06:	3404      	adds	r4, #4
 8012a08:	4432      	add	r2, r6
 8012a0a:	44b1      	add	r9, r6
 8012a0c:	edd3 1a01 	vldr	s3, [r3, #4]
 8012a10:	ed92 2a00 	vldr	s4, [r2]
 8012a14:	edd9 2a00 	vldr	s5, [r9]
 8012a18:	ed93 1a00 	vldr	s2, [r3]
 8012a1c:	9207      	str	r2, [sp, #28]
 8012a1e:	f7ff fabb 	bl	8011f98 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8012a22:	9a07      	ldr	r2, [sp, #28]
 8012a24:	ed99 8a00 	vldr	s16, [r9]
 8012a28:	edd2 8a00 	vldr	s17, [r2]
 8012a2c:	e797      	b.n	801295e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8012a2e:	00a3      	lsls	r3, r4, #2
 8012a30:	eef0 0a48 	vmov.f32	s1, s16
 8012a34:	eeb0 0a68 	vmov.f32	s0, s17
 8012a38:	4638      	mov	r0, r7
 8012a3a:	f103 0210 	add.w	r2, r3, #16
 8012a3e:	f103 0914 	add.w	r9, r3, #20
 8012a42:	4433      	add	r3, r6
 8012a44:	3406      	adds	r4, #6
 8012a46:	4432      	add	r2, r6
 8012a48:	44b1      	add	r9, r6
 8012a4a:	edd3 2a03 	vldr	s5, [r3, #12]
 8012a4e:	ed92 3a00 	vldr	s6, [r2]
 8012a52:	edd9 3a00 	vldr	s7, [r9]
 8012a56:	ed93 2a02 	vldr	s4, [r3, #8]
 8012a5a:	edd3 1a01 	vldr	s3, [r3, #4]
 8012a5e:	ed93 1a00 	vldr	s2, [r3]
 8012a62:	9207      	str	r2, [sp, #28]
 8012a64:	f7ff fab7 	bl	8011fd6 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8012a68:	9a07      	ldr	r2, [sp, #28]
 8012a6a:	ed99 8a00 	vldr	s16, [r9]
 8012a6e:	edd2 8a00 	vldr	s17, [r2]
 8012a72:	e774      	b.n	801295e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8012a74:	9b06      	ldr	r3, [sp, #24]
 8012a76:	af08      	add	r7, sp, #32
 8012a78:	4543      	cmp	r3, r8
 8012a7a:	d90f      	bls.n	8012a9c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8012a7c:	4638      	mov	r0, r7
 8012a7e:	f7ff fdad 	bl	80125dc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8012a82:	b958      	cbnz	r0, 8012a9c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8012a84:	2301      	movs	r3, #1
 8012a86:	9703      	str	r7, [sp, #12]
 8012a88:	f8cd b000 	str.w	fp, [sp]
 8012a8c:	4641      	mov	r1, r8
 8012a8e:	9a06      	ldr	r2, [sp, #24]
 8012a90:	4628      	mov	r0, r5
 8012a92:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8012a96:	4623      	mov	r3, r4
 8012a98:	f7ff fe02 	bl	80126a0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8012a9c:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 8012aa0:	4638      	mov	r0, r7
 8012aa2:	f011 fc55 	bl	8024350 <_ZN8touchgfx6Canvas6renderEh>
 8012aa6:	4604      	mov	r4, r0
 8012aa8:	4638      	mov	r0, r7
 8012aaa:	f7ff fe99 	bl	80127e0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8012aae:	4620      	mov	r0, r4
 8012ab0:	b035      	add	sp, #212	@ 0xd4
 8012ab2:	ecbd 8b04 	vpop	{d8-d9}
 8012ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012aba:	2401      	movs	r4, #1
 8012abc:	e7f7      	b.n	8012aae <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 8012abe:	bf00      	nop
 8012ac0:	00000000 	.word	0x00000000
 8012ac4:	08029378 	.word	0x08029378

08012ac8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 8012ac8:	b510      	push	{r4, lr}
 8012aca:	4604      	mov	r4, r0
 8012acc:	f7ff fe88 	bl	80127e0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8012ad0:	21b0      	movs	r1, #176	@ 0xb0
 8012ad2:	4620      	mov	r0, r4
 8012ad4:	f012 f809 	bl	8024aea <_ZdlPvj>
 8012ad8:	4620      	mov	r0, r4
 8012ada:	bd10      	pop	{r4, pc}

08012adc <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 8012adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ae0:	4698      	mov	r8, r3
 8012ae2:	23ff      	movs	r3, #255	@ 0xff
 8012ae4:	4607      	mov	r7, r0
 8012ae6:	4689      	mov	r9, r1
 8012ae8:	4692      	mov	sl, r2
 8012aea:	1d02      	adds	r2, r0, #4
 8012aec:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8012af0:	2400      	movs	r4, #0
 8012af2:	44ca      	add	sl, r9
 8012af4:	ed2d 8b06 	vpush	{d8-d10}
 8012af8:	b0aa      	sub	sp, #168	@ 0xa8
 8012afa:	ed9f 8a81 	vldr	s16, [pc, #516]	@ 8012d00 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8012afe:	9300      	str	r3, [sp, #0]
 8012b00:	eef0 8a48 	vmov.f32	s17, s16
 8012b04:	6981      	ldr	r1, [r0, #24]
 8012b06:	a80d      	add	r0, sp, #52	@ 0x34
 8012b08:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8012b0a:	f011 fb8d 	bl	8024228 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8012b0e:	7f3b      	ldrb	r3, [r7, #28]
 8012b10:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 8012d00 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8012b14:	4628      	mov	r0, r5
 8012b16:	1e5a      	subs	r2, r3, #1
 8012b18:	eeb0 0a60 	vmov.f32	s0, s1
 8012b1c:	4253      	negs	r3, r2
 8012b1e:	4153      	adcs	r3, r2
 8012b20:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 8012b24:	f005 fc6f 	bl	8018406 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012b28:	eeb0 9a40 	vmov.f32	s18, s0
 8012b2c:	eef0 9a60 	vmov.f32	s19, s1
 8012b30:	45ca      	cmp	sl, r9
 8012b32:	f000 80cd 	beq.w	8012cd0 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 8012b36:	f819 3b01 	ldrb.w	r3, [r9], #1
 8012b3a:	2b06      	cmp	r3, #6
 8012b3c:	d8f8      	bhi.n	8012b30 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8012b3e:	e8df f003 	tbb	[pc, r3]
 8012b42:	0804      	.short	0x0804
 8012b44:	58533f2a 	.word	0x58533f2a
 8012b48:	8a          	.byte	0x8a
 8012b49:	00          	.byte	0x00
 8012b4a:	a80d      	add	r0, sp, #52	@ 0x34
 8012b4c:	f011 fbde 	bl	802430c <_ZN8touchgfx6Canvas5closeEv>
 8012b50:	e7ee      	b.n	8012b30 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8012b52:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8012b56:	4628      	mov	r0, r5
 8012b58:	ed93 8a01 	vldr	s16, [r3, #4]
 8012b5c:	edd3 8a00 	vldr	s17, [r3]
 8012b60:	eef0 0a48 	vmov.f32	s1, s16
 8012b64:	eeb0 0a68 	vmov.f32	s0, s17
 8012b68:	f005 fc4d 	bl	8018406 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012b6c:	a80d      	add	r0, sp, #52	@ 0x34
 8012b6e:	eef0 7a60 	vmov.f32	s15, s1
 8012b72:	eeb0 9a40 	vmov.f32	s18, s0
 8012b76:	eef0 9a60 	vmov.f32	s19, s1
 8012b7a:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8012b7e:	ee17 2a90 	vmov	r2, s15
 8012b82:	eef0 7a40 	vmov.f32	s15, s0
 8012b86:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8012b8a:	ee17 1a90 	vmov	r1, s15
 8012b8e:	f011 fc97 	bl	80244c0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8012b92:	3402      	adds	r4, #2
 8012b94:	e7cc      	b.n	8012b30 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8012b96:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8012b9a:	4628      	mov	r0, r5
 8012b9c:	edd3 8a00 	vldr	s17, [r3]
 8012ba0:	ed93 8a01 	vldr	s16, [r3, #4]
 8012ba4:	eeb0 0a68 	vmov.f32	s0, s17
 8012ba8:	eef0 0a48 	vmov.f32	s1, s16
 8012bac:	f005 fc2b 	bl	8018406 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012bb0:	a80d      	add	r0, sp, #52	@ 0x34
 8012bb2:	eeb0 9a40 	vmov.f32	s18, s0
 8012bb6:	eef0 9a60 	vmov.f32	s19, s1
 8012bba:	f7ff fe01 	bl	80127c0 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8012bbe:	e7e8      	b.n	8012b92 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 8012bc0:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8012bc4:	edd3 8a00 	vldr	s17, [r3]
 8012bc8:	eef0 0a48 	vmov.f32	s1, s16
 8012bcc:	4628      	mov	r0, r5
 8012bce:	eeb0 0a68 	vmov.f32	s0, s17
 8012bd2:	3401      	adds	r4, #1
 8012bd4:	f005 fc17 	bl	8018406 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012bd8:	a80d      	add	r0, sp, #52	@ 0x34
 8012bda:	eef0 9a60 	vmov.f32	s19, s1
 8012bde:	eeb0 9a40 	vmov.f32	s18, s0
 8012be2:	f7ff fded 	bl	80127c0 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8012be6:	e7a3      	b.n	8012b30 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8012be8:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8012bec:	ed93 8a00 	vldr	s16, [r3]
 8012bf0:	e7ea      	b.n	8012bc8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 8012bf2:	1ca3      	adds	r3, r4, #2
 8012bf4:	4628      	mov	r0, r5
 8012bf6:	3404      	adds	r4, #4
 8012bf8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8012bfc:	ed53 0a01 	vldr	s1, [r3, #-4]
 8012c00:	ed13 0a02 	vldr	s0, [r3, #-8]
 8012c04:	edd3 8a00 	vldr	s17, [r3]
 8012c08:	ed93 8a01 	vldr	s16, [r3, #4]
 8012c0c:	f005 fbfb 	bl	8018406 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012c10:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8012c14:	eeb0 0a68 	vmov.f32	s0, s17
 8012c18:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 8012c1c:	eef0 0a48 	vmov.f32	s1, s16
 8012c20:	4628      	mov	r0, r5
 8012c22:	f005 fbf0 	bl	8018406 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012c26:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 8012c2a:	eef0 2a60 	vmov.f32	s5, s1
 8012c2e:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 8012c32:	eeb0 2a40 	vmov.f32	s4, s0
 8012c36:	a80d      	add	r0, sp, #52	@ 0x34
 8012c38:	eeb0 aa40 	vmov.f32	s20, s0
 8012c3c:	eef0 aa60 	vmov.f32	s21, s1
 8012c40:	eeb0 0a49 	vmov.f32	s0, s18
 8012c44:	eef0 0a69 	vmov.f32	s1, s19
 8012c48:	f7ff f9a6 	bl	8011f98 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8012c4c:	eef0 9a6a 	vmov.f32	s19, s21
 8012c50:	eeb0 9a4a 	vmov.f32	s18, s20
 8012c54:	e76c      	b.n	8012b30 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8012c56:	1d26      	adds	r6, r4, #4
 8012c58:	4628      	mov	r0, r5
 8012c5a:	3406      	adds	r4, #6
 8012c5c:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012c60:	ed56 0a03 	vldr	s1, [r6, #-12]
 8012c64:	ed16 0a04 	vldr	s0, [r6, #-16]
 8012c68:	edd6 8a00 	vldr	s17, [r6]
 8012c6c:	ed96 8a01 	vldr	s16, [r6, #4]
 8012c70:	f005 fbc9 	bl	8018406 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012c74:	ed8d 0a07 	vstr	s0, [sp, #28]
 8012c78:	4628      	mov	r0, r5
 8012c7a:	ed16 0a02 	vldr	s0, [r6, #-8]
 8012c7e:	edcd 0a08 	vstr	s1, [sp, #32]
 8012c82:	ed56 0a01 	vldr	s1, [r6, #-4]
 8012c86:	f005 fbbe 	bl	8018406 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012c8a:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8012c8e:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 8012c92:	eeb0 0a68 	vmov.f32	s0, s17
 8012c96:	eef0 0a48 	vmov.f32	s1, s16
 8012c9a:	4628      	mov	r0, r5
 8012c9c:	f005 fbb3 	bl	8018406 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012ca0:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 8012ca4:	eeb0 3a40 	vmov.f32	s6, s0
 8012ca8:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 8012cac:	eef0 3a60 	vmov.f32	s7, s1
 8012cb0:	eddd 1a08 	vldr	s3, [sp, #32]
 8012cb4:	eeb0 aa40 	vmov.f32	s20, s0
 8012cb8:	ed9d 1a07 	vldr	s2, [sp, #28]
 8012cbc:	eef0 aa60 	vmov.f32	s21, s1
 8012cc0:	a80d      	add	r0, sp, #52	@ 0x34
 8012cc2:	eef0 0a69 	vmov.f32	s1, s19
 8012cc6:	eeb0 0a49 	vmov.f32	s0, s18
 8012cca:	f7ff f984 	bl	8011fd6 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8012cce:	e7bd      	b.n	8012c4c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 8012cd0:	7f7b      	ldrb	r3, [r7, #29]
 8012cd2:	a80d      	add	r0, sp, #52	@ 0x34
 8012cd4:	7fb9      	ldrb	r1, [r7, #30]
 8012cd6:	4359      	muls	r1, r3
 8012cd8:	1c4b      	adds	r3, r1, #1
 8012cda:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8012cde:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8012ce2:	f011 fb35 	bl	8024350 <_ZN8touchgfx6Canvas6renderEh>
 8012ce6:	4b07      	ldr	r3, [pc, #28]	@ (8012d04 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 8012ce8:	4604      	mov	r4, r0
 8012cea:	a812      	add	r0, sp, #72	@ 0x48
 8012cec:	930d      	str	r3, [sp, #52]	@ 0x34
 8012cee:	f001 fba6 	bl	801443e <_ZN8touchgfx7OutlineD1Ev>
 8012cf2:	4620      	mov	r0, r4
 8012cf4:	b02a      	add	sp, #168	@ 0xa8
 8012cf6:	ecbd 8b06 	vpop	{d8-d10}
 8012cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cfe:	bf00      	nop
 8012d00:	00000000 	.word	0x00000000
 8012d04:	08029c48 	.word	0x08029c48

08012d08 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 8012d08:	b410      	push	{r4}
 8012d0a:	7f04      	ldrb	r4, [r0, #28]
 8012d0c:	b11c      	cbz	r4, 8012d16 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 8012d0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012d12:	f7ff bee3 	b.w	8012adc <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 8012d16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012d1a:	f7ff bd6d 	b.w	80127f8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>

08012d1e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 8012d1e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012d22:	4691      	mov	r9, r2
 8012d24:	4602      	mov	r2, r0
 8012d26:	4606      	mov	r6, r0
 8012d28:	4688      	mov	r8, r1
 8012d2a:	f852 0f26 	ldr.w	r0, [r2, #38]!
 8012d2e:	469a      	mov	sl, r3
 8012d30:	ab02      	add	r3, sp, #8
 8012d32:	af02      	add	r7, sp, #8
 8012d34:	6851      	ldr	r1, [r2, #4]
 8012d36:	c303      	stmia	r3!, {r0, r1}
 8012d38:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	dd2f      	ble.n	8012da0 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8012d40:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 8012d44:	2c00      	cmp	r4, #0
 8012d46:	dd2b      	ble.n	8012da0 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8012d48:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8012d4c:	441c      	add	r4, r3
 8012d4e:	b2a4      	uxth	r4, r4
 8012d50:	b225      	sxth	r5, r4
 8012d52:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8012d56:	42ab      	cmp	r3, r5
 8012d58:	da22      	bge.n	8012da0 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8012d5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012d5c:	464a      	mov	r2, r9
 8012d5e:	9701      	str	r7, [sp, #4]
 8012d60:	4641      	mov	r1, r8
 8012d62:	9300      	str	r3, [sp, #0]
 8012d64:	4630      	mov	r0, r6
 8012d66:	4653      	mov	r3, sl
 8012d68:	f7ff ffce 	bl	8012d08 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 8012d6c:	b940      	cbnz	r0, 8012d80 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 8012d6e:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8012d72:	2b01      	cmp	r3, #1
 8012d74:	d004      	beq.n	8012d80 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 8012d76:	3301      	adds	r3, #1
 8012d78:	105b      	asrs	r3, r3, #1
 8012d7a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012d7e:	e7ec      	b.n	8012d5a <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3c>
 8012d80:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8012d84:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8012d88:	4413      	add	r3, r2
 8012d8a:	b29b      	uxth	r3, r3
 8012d8c:	441a      	add	r2, r3
 8012d8e:	f8ad 300a 	strh.w	r3, [sp, #10]
 8012d92:	b212      	sxth	r2, r2
 8012d94:	4295      	cmp	r5, r2
 8012d96:	dadc      	bge.n	8012d52 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 8012d98:	1ae3      	subs	r3, r4, r3
 8012d9a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012d9e:	e7d8      	b.n	8012d52 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 8012da0:	b004      	add	sp, #16
 8012da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012da6 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 8012da6:	0c0b      	lsrs	r3, r1, #16
 8012da8:	60c1      	str	r1, [r0, #12]
 8012daa:	7481      	strb	r1, [r0, #18]
 8012dac:	7403      	strb	r3, [r0, #16]
 8012dae:	0a0b      	lsrs	r3, r1, #8
 8012db0:	7443      	strb	r3, [r0, #17]
 8012db2:	4770      	bx	lr

08012db4 <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 8012db4:	f1a0 0008 	sub.w	r0, r0, #8
 8012db8:	e7f5      	b.n	8012da6 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	...

08012dbc <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 8012dbc:	b508      	push	{r3, lr}
 8012dbe:	4b05      	ldr	r3, [pc, #20]	@ (8012dd4 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 8012dc0:	6818      	ldr	r0, [r3, #0]
 8012dc2:	6803      	ldr	r3, [r0, #0]
 8012dc4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012dc8:	4798      	blx	r3
 8012dca:	1e43      	subs	r3, r0, #1
 8012dcc:	4258      	negs	r0, r3
 8012dce:	4158      	adcs	r0, r3
 8012dd0:	bd08      	pop	{r3, pc}
 8012dd2:	bf00      	nop
 8012dd4:	24026418 	.word	0x24026418

08012dd8 <_ZN8touchgfx13PainterRGB888D1Ev>:
 8012dd8:	4770      	bx	lr

08012dda <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 8012dda:	3808      	subs	r0, #8
 8012ddc:	4770      	bx	lr

08012dde <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 8012dde:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012de2:	b410      	push	{r4}
 8012de4:	188c      	adds	r4, r1, r2
 8012de6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8012dea:	68c2      	ldr	r2, [r0, #12]
 8012dec:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8012df0:	4620      	mov	r0, r4
 8012df2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012df6:	f7f0 ba0b 	b.w	8003210 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

08012dfa <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 8012dfa:	f7f0 b9e5 	b.w	80031c8 <_ZN8touchgfx5paint8tearDownEv>

08012dfe <_ZN8touchgfx13PainterRGB888D0Ev>:
 8012dfe:	b510      	push	{r4, lr}
 8012e00:	4604      	mov	r4, r0
 8012e02:	2114      	movs	r1, #20
 8012e04:	f011 fe71 	bl	8024aea <_ZdlPvj>
 8012e08:	4620      	mov	r0, r4
 8012e0a:	bd10      	pop	{r4, pc}

08012e0c <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 8012e0c:	f1a0 0008 	sub.w	r0, r0, #8
 8012e10:	e7f5      	b.n	8012dfe <_ZN8touchgfx13PainterRGB888D0Ev>
	...

08012e14 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh>:
 8012e14:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e1c:	4411      	add	r1, r2
 8012e1e:	7c42      	ldrb	r2, [r0, #17]
 8012e20:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 8012e24:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 8012e28:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 8012e2c:	2a00      	cmp	r2, #0
 8012e2e:	f000 8084 	beq.w	8012f3a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x126>
 8012e32:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8012e36:	ed90 7a08 	vldr	s14, [r0, #32]
 8012e3a:	42a2      	cmp	r2, r4
 8012e3c:	68c3      	ldr	r3, [r0, #12]
 8012e3e:	db20      	blt.n	8012e82 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x6e>
 8012e40:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012e44:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8012e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e4c:	bfc8      	it	gt
 8012e4e:	2200      	movgt	r2, #0
 8012e50:	589a      	ldr	r2, [r3, r2]
 8012e52:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8012e56:	7c03      	ldrb	r3, [r0, #16]
 8012e58:	fa5f fc82 	uxtb.w	ip, r2
 8012e5c:	f3c2 2707 	ubfx	r7, r2, #8, #8
 8012e60:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8012e64:	440e      	add	r6, r1
 8012e66:	b36b      	cbz	r3, 8012ec4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 8012e68:	2dff      	cmp	r5, #255	@ 0xff
 8012e6a:	d12b      	bne.n	8012ec4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 8012e6c:	42b1      	cmp	r1, r6
 8012e6e:	f080 8204 	bcs.w	801327a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8012e72:	f881 c000 	strb.w	ip, [r1]
 8012e76:	3103      	adds	r1, #3
 8012e78:	f801 7c02 	strb.w	r7, [r1, #-2]
 8012e7c:	f801 4c01 	strb.w	r4, [r1, #-1]
 8012e80:	e7f4      	b.n	8012e6c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x58>
 8012e82:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8012e86:	42a7      	cmp	r7, r4
 8012e88:	dc08      	bgt.n	8012e9c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x88>
 8012e8a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012e8e:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8012e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e96:	bfd8      	it	le
 8012e98:	2200      	movle	r2, #0
 8012e9a:	e7d9      	b.n	8012e50 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 8012e9c:	1aa2      	subs	r2, r4, r2
 8012e9e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012ea2:	ee07 2a90 	vmov	s15, r2
 8012ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012eae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012eb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012eb6:	ee17 2a90 	vmov	r2, s15
 8012eba:	bfd8      	it	le
 8012ebc:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 8012ec0:	0092      	lsls	r2, r2, #2
 8012ec2:	e7c5      	b.n	8012e50 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 8012ec4:	0e12      	lsrs	r2, r2, #24
 8012ec6:	4355      	muls	r5, r2
 8012ec8:	1c6a      	adds	r2, r5, #1
 8012eca:	eb02 2525 	add.w	r5, r2, r5, asr #8
 8012ece:	122d      	asrs	r5, r5, #8
 8012ed0:	43e8      	mvns	r0, r5
 8012ed2:	b2ad      	uxth	r5, r5
 8012ed4:	fb1c fc05 	smulbb	ip, ip, r5
 8012ed8:	b2c0      	uxtb	r0, r0
 8012eda:	fb17 f705 	smulbb	r7, r7, r5
 8012ede:	fb14 f505 	smulbb	r5, r4, r5
 8012ee2:	fa1f fc8c 	uxth.w	ip, ip
 8012ee6:	b2bf      	uxth	r7, r7
 8012ee8:	b2ad      	uxth	r5, r5
 8012eea:	428e      	cmp	r6, r1
 8012eec:	f101 0303 	add.w	r3, r1, #3
 8012ef0:	f240 81c3 	bls.w	801327a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8012ef4:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8012ef8:	fb02 c200 	mla	r2, r2, r0, ip
 8012efc:	b292      	uxth	r2, r2
 8012efe:	1c51      	adds	r1, r2, #1
 8012f00:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8012f04:	1212      	asrs	r2, r2, #8
 8012f06:	f803 2c03 	strb.w	r2, [r3, #-3]
 8012f0a:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8012f0e:	fb02 7200 	mla	r2, r2, r0, r7
 8012f12:	b292      	uxth	r2, r2
 8012f14:	1c51      	adds	r1, r2, #1
 8012f16:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8012f1a:	1212      	asrs	r2, r2, #8
 8012f1c:	f803 2c02 	strb.w	r2, [r3, #-2]
 8012f20:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8012f24:	fb02 5200 	mla	r2, r2, r0, r5
 8012f28:	b292      	uxth	r2, r2
 8012f2a:	1c51      	adds	r1, r2, #1
 8012f2c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8012f30:	4619      	mov	r1, r3
 8012f32:	1212      	asrs	r2, r2, #8
 8012f34:	f803 2c01 	strb.w	r2, [r3, #-1]
 8012f38:	e7d7      	b.n	8012eea <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xd6>
 8012f3a:	7c82      	ldrb	r2, [r0, #18]
 8012f3c:	2a00      	cmp	r2, #0
 8012f3e:	d047      	beq.n	8012fd0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1bc>
 8012f40:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8012f44:	ee07 2a10 	vmov	s14, r2
 8012f48:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012f4c:	ee07 3a90 	vmov	s15, r3
 8012f50:	461a      	mov	r2, r3
 8012f52:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8012f56:	eef4 6ac7 	vcmpe.f32	s13, s14
 8012f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f5e:	f200 808e 	bhi.w	801307e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x26a>
 8012f62:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012f66:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8012f6a:	68c7      	ldr	r7, [r0, #12]
 8012f6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012f70:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012f74:	ee06 6a90 	vmov	s13, r6
 8012f78:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012f7c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f84:	bf4a      	itet	mi
 8012f86:	eefd 7ae7 	vcvtmi.s32.f32	s15, s15
 8012f8a:	4634      	movpl	r4, r6
 8012f8c:	ee17 4a90 	vmovmi	r4, s15
 8012f90:	edd0 7a08 	vldr	s15, [r0, #32]
 8012f94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012f98:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8012f9c:	448e      	add	lr, r1
 8012f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fa2:	bfc8      	it	gt
 8012fa4:	2200      	movgt	r2, #0
 8012fa6:	58bf      	ldr	r7, [r7, r2]
 8012fa8:	7c02      	ldrb	r2, [r0, #16]
 8012faa:	fa5f f987 	uxtb.w	r9, r7
 8012fae:	f3c7 2807 	ubfx	r8, r7, #8, #8
 8012fb2:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 8012fb6:	b31a      	cbz	r2, 8013000 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 8012fb8:	2dff      	cmp	r5, #255	@ 0xff
 8012fba:	d121      	bne.n	8013000 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 8012fbc:	4571      	cmp	r1, lr
 8012fbe:	d25d      	bcs.n	801307c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 8012fc0:	f881 9000 	strb.w	r9, [r1]
 8012fc4:	3103      	adds	r1, #3
 8012fc6:	f801 8c02 	strb.w	r8, [r1, #-2]
 8012fca:	f801 cc01 	strb.w	ip, [r1, #-1]
 8012fce:	e7f5      	b.n	8012fbc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1a8>
 8012fd0:	ee07 4a90 	vmov	s15, r4
 8012fd4:	ed90 7a06 	vldr	s14, [r0, #24]
 8012fd8:	edd0 6a05 	vldr	s13, [r0, #20]
 8012fdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012fe0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012fe4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8012fe8:	edd0 7a08 	vldr	s15, [r0, #32]
 8012fec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ff4:	bf44      	itt	mi
 8012ff6:	edd0 7a07 	vldrmi	s15, [r0, #28]
 8012ffa:	ee37 7a67 	vsubmi.f32	s14, s14, s15
 8012ffe:	e7a5      	b.n	8012f4c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x138>
 8013000:	0e3f      	lsrs	r7, r7, #24
 8013002:	436f      	muls	r7, r5
 8013004:	1c7a      	adds	r2, r7, #1
 8013006:	eb02 2227 	add.w	r2, r2, r7, asr #8
 801300a:	1212      	asrs	r2, r2, #8
 801300c:	ea6f 0a02 	mvn.w	sl, r2
 8013010:	b292      	uxth	r2, r2
 8013012:	fb19 f902 	smulbb	r9, r9, r2
 8013016:	fa5f fa8a 	uxtb.w	sl, sl
 801301a:	fb18 f802 	smulbb	r8, r8, r2
 801301e:	fb1c fc02 	smulbb	ip, ip, r2
 8013022:	fa1f f989 	uxth.w	r9, r9
 8013026:	fa1f f888 	uxth.w	r8, r8
 801302a:	fa1f fc8c 	uxth.w	ip, ip
 801302e:	458e      	cmp	lr, r1
 8013030:	f101 0203 	add.w	r2, r1, #3
 8013034:	d922      	bls.n	801307c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 8013036:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 801303a:	fb01 910a 	mla	r1, r1, sl, r9
 801303e:	b289      	uxth	r1, r1
 8013040:	1c4f      	adds	r7, r1, #1
 8013042:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8013046:	1209      	asrs	r1, r1, #8
 8013048:	f802 1c03 	strb.w	r1, [r2, #-3]
 801304c:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8013050:	fb01 810a 	mla	r1, r1, sl, r8
 8013054:	b289      	uxth	r1, r1
 8013056:	1c4f      	adds	r7, r1, #1
 8013058:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801305c:	1209      	asrs	r1, r1, #8
 801305e:	f802 1c02 	strb.w	r1, [r2, #-2]
 8013062:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8013066:	fb01 c10a 	mla	r1, r1, sl, ip
 801306a:	b289      	uxth	r1, r1
 801306c:	1c4f      	adds	r7, r1, #1
 801306e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8013072:	1209      	asrs	r1, r1, #8
 8013074:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013078:	4611      	mov	r1, r2
 801307a:	e7d8      	b.n	801302e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x21a>
 801307c:	191a      	adds	r2, r3, r4
 801307e:	4433      	add	r3, r6
 8013080:	b21b      	sxth	r3, r3
 8013082:	4293      	cmp	r3, r2
 8013084:	f340 80f9 	ble.w	801327a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8013088:	edd0 7a07 	vldr	s15, [r0, #28]
 801308c:	ee06 2a90 	vmov	s13, r2
 8013090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013094:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013098:	eef4 7ae6 	vcmpe.f32	s15, s13
 801309c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130a0:	f340 80b0 	ble.w	8013204 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f0>
 80130a4:	ee06 3a10 	vmov	s12, r3
 80130a8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80130ac:	eddf 5a74 	vldr	s11, [pc, #464]	@ 8013280 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x46c>
 80130b0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80130b4:	eef4 7ac6 	vcmpe.f32	s15, s12
 80130b8:	ed90 6a08 	vldr	s12, [r0, #32]
 80130bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130c0:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 80130c4:	bfd6      	itet	le
 80130c6:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 80130ca:	469c      	movgt	ip, r3
 80130cc:	ee17 ca90 	vmovle	ip, s15
 80130d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130d4:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 8013284 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x470>
 80130d8:	ebac 0202 	sub.w	r2, ip, r2
 80130dc:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 80130e0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80130e4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80130e8:	188c      	adds	r4, r1, r2
 80130ea:	7c02      	ldrb	r2, [r0, #16]
 80130ec:	b1d2      	cbz	r2, 8013124 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 80130ee:	2dff      	cmp	r5, #255	@ 0xff
 80130f0:	d118      	bne.n	8013124 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 80130f2:	42a1      	cmp	r1, r4
 80130f4:	d261      	bcs.n	80131ba <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 80130f6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80130fa:	68c6      	ldr	r6, [r0, #12]
 80130fc:	3103      	adds	r1, #3
 80130fe:	ee17 7a10 	vmov	r7, s14
 8013102:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 8013106:	f816 6027 	ldrb.w	r6, [r6, r7, lsl #2]
 801310a:	f801 6c03 	strb.w	r6, [r1, #-3]
 801310e:	7856      	ldrb	r6, [r2, #1]
 8013110:	f801 6c02 	strb.w	r6, [r1, #-2]
 8013114:	7892      	ldrb	r2, [r2, #2]
 8013116:	f801 2c01 	strb.w	r2, [r1, #-1]
 801311a:	ed90 7a08 	vldr	s14, [r0, #32]
 801311e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013122:	e7e6      	b.n	80130f2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x2de>
 8013124:	68c2      	ldr	r2, [r0, #12]
 8013126:	428c      	cmp	r4, r1
 8013128:	f101 0e03 	add.w	lr, r1, #3
 801312c:	d945      	bls.n	80131ba <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 801312e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013132:	ee17 9a10 	vmov	r9, s14
 8013136:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 801313a:	f898 7003 	ldrb.w	r7, [r8, #3]
 801313e:	fb07 f605 	mul.w	r6, r7, r5
 8013142:	1c77      	adds	r7, r6, #1
 8013144:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8013148:	123f      	asrs	r7, r7, #8
 801314a:	b2b9      	uxth	r1, r7
 801314c:	43ff      	mvns	r7, r7
 801314e:	b2fe      	uxtb	r6, r7
 8013150:	f812 7029 	ldrb.w	r7, [r2, r9, lsl #2]
 8013154:	f81e 9c03 	ldrb.w	r9, [lr, #-3]
 8013158:	fb19 f906 	smulbb	r9, r9, r6
 801315c:	fb07 9701 	mla	r7, r7, r1, r9
 8013160:	b2bf      	uxth	r7, r7
 8013162:	f107 0901 	add.w	r9, r7, #1
 8013166:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801316a:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 801316e:	fb19 f906 	smulbb	r9, r9, r6
 8013172:	123f      	asrs	r7, r7, #8
 8013174:	f80e 7c03 	strb.w	r7, [lr, #-3]
 8013178:	f898 7001 	ldrb.w	r7, [r8, #1]
 801317c:	fb07 9701 	mla	r7, r7, r1, r9
 8013180:	b2bf      	uxth	r7, r7
 8013182:	f107 0901 	add.w	r9, r7, #1
 8013186:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801318a:	123f      	asrs	r7, r7, #8
 801318c:	f80e 7c02 	strb.w	r7, [lr, #-2]
 8013190:	f81e 7c01 	ldrb.w	r7, [lr, #-1]
 8013194:	f898 8002 	ldrb.w	r8, [r8, #2]
 8013198:	fb17 f606 	smulbb	r6, r7, r6
 801319c:	fb08 6601 	mla	r6, r8, r1, r6
 80131a0:	b2b6      	uxth	r6, r6
 80131a2:	1c71      	adds	r1, r6, #1
 80131a4:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 80131a8:	4671      	mov	r1, lr
 80131aa:	1236      	asrs	r6, r6, #8
 80131ac:	f80e 6c01 	strb.w	r6, [lr, #-1]
 80131b0:	ed90 7a08 	vldr	s14, [r0, #32]
 80131b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80131b8:	e7b5      	b.n	8013126 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x312>
 80131ba:	4563      	cmp	r3, ip
 80131bc:	dd5d      	ble.n	801327a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80131be:	edd0 7a08 	vldr	s15, [r0, #32]
 80131c2:	eba3 030c 	sub.w	r3, r3, ip
 80131c6:	68c4      	ldr	r4, [r0, #12]
 80131c8:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80131cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80131d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80131d4:	7c00      	ldrb	r0, [r0, #16]
 80131d6:	440b      	add	r3, r1
 80131d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131dc:	bfd8      	it	le
 80131de:	2200      	movle	r2, #0
 80131e0:	58a2      	ldr	r2, [r4, r2]
 80131e2:	b2d4      	uxtb	r4, r2
 80131e4:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 80131e8:	f3c2 4707 	ubfx	r7, r2, #16, #8
 80131ec:	b160      	cbz	r0, 8013208 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 80131ee:	2dff      	cmp	r5, #255	@ 0xff
 80131f0:	d10a      	bne.n	8013208 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 80131f2:	4299      	cmp	r1, r3
 80131f4:	d241      	bcs.n	801327a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80131f6:	700c      	strb	r4, [r1, #0]
 80131f8:	3103      	adds	r1, #3
 80131fa:	f801 cc02 	strb.w	ip, [r1, #-2]
 80131fe:	f801 7c01 	strb.w	r7, [r1, #-1]
 8013202:	e7f6      	b.n	80131f2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3de>
 8013204:	4694      	mov	ip, r2
 8013206:	e7da      	b.n	80131be <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3aa>
 8013208:	0e12      	lsrs	r2, r2, #24
 801320a:	436a      	muls	r2, r5
 801320c:	1c55      	adds	r5, r2, #1
 801320e:	eb05 2522 	add.w	r5, r5, r2, asr #8
 8013212:	122d      	asrs	r5, r5, #8
 8013214:	43ee      	mvns	r6, r5
 8013216:	b2ad      	uxth	r5, r5
 8013218:	fb14 f405 	smulbb	r4, r4, r5
 801321c:	b2f6      	uxtb	r6, r6
 801321e:	fb1c f005 	smulbb	r0, ip, r5
 8013222:	fb17 f505 	smulbb	r5, r7, r5
 8013226:	b2a4      	uxth	r4, r4
 8013228:	b280      	uxth	r0, r0
 801322a:	b2ad      	uxth	r5, r5
 801322c:	428b      	cmp	r3, r1
 801322e:	f101 0203 	add.w	r2, r1, #3
 8013232:	d922      	bls.n	801327a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8013234:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8013238:	fb01 4106 	mla	r1, r1, r6, r4
 801323c:	b289      	uxth	r1, r1
 801323e:	1c4f      	adds	r7, r1, #1
 8013240:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8013244:	1209      	asrs	r1, r1, #8
 8013246:	f802 1c03 	strb.w	r1, [r2, #-3]
 801324a:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 801324e:	fb01 0106 	mla	r1, r1, r6, r0
 8013252:	b289      	uxth	r1, r1
 8013254:	1c4f      	adds	r7, r1, #1
 8013256:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801325a:	1209      	asrs	r1, r1, #8
 801325c:	f802 1c02 	strb.w	r1, [r2, #-2]
 8013260:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8013264:	fb01 5106 	mla	r1, r1, r6, r5
 8013268:	b289      	uxth	r1, r1
 801326a:	1c4f      	adds	r7, r1, #1
 801326c:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8013270:	1209      	asrs	r1, r1, #8
 8013272:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013276:	4611      	mov	r1, r2
 8013278:	e7d8      	b.n	801322c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x418>
 801327a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801327e:	bf00      	nop
 8013280:	447ffffe 	.word	0x447ffffe
 8013284:	00000000 	.word	0x00000000

08013288 <_ZNK8touchgfx27PainterRGB888LinearGradient8tearDownEv>:
 8013288:	4770      	bx	lr

0801328a <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev>:
 801328a:	4770      	bx	lr

0801328c <_ZN8touchgfx27PainterRGB888LinearGradientD0Ev>:
 801328c:	b510      	push	{r4, lr}
 801328e:	4604      	mov	r4, r0
 8013290:	2124      	movs	r1, #36	@ 0x24
 8013292:	f011 fc2a 	bl	8024aea <_ZdlPvj>
 8013296:	4620      	mov	r0, r4
 8013298:	bd10      	pop	{r4, pc}
	...

0801329c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 801329c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801329e:	6803      	ldr	r3, [r0, #0]
 80132a0:	460d      	mov	r5, r1
 80132a2:	4604      	mov	r4, r0
 80132a4:	4601      	mov	r1, r0
 80132a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80132a8:	a802      	add	r0, sp, #8
 80132aa:	4798      	blx	r3
 80132ac:	6828      	ldr	r0, [r5, #0]
 80132ae:	6869      	ldr	r1, [r5, #4]
 80132b0:	466b      	mov	r3, sp
 80132b2:	c303      	stmia	r3!, {r0, r1}
 80132b4:	4668      	mov	r0, sp
 80132b6:	4619      	mov	r1, r3
 80132b8:	f7fd fcfc 	bl	8010cb4 <_ZN8touchgfx4RectaNERKS0_>
 80132bc:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80132be:	b188      	cbz	r0, 80132e4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80132c0:	6803      	ldr	r3, [r0, #0]
 80132c2:	1d21      	adds	r1, r4, #4
 80132c4:	68db      	ldr	r3, [r3, #12]
 80132c6:	4798      	blx	r3
 80132c8:	b160      	cbz	r0, 80132e4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80132ca:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	dd08      	ble.n	80132e4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80132d2:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 80132d6:	2d00      	cmp	r5, #0
 80132d8:	dd04      	ble.n	80132e4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80132da:	4a2b      	ldr	r2, [pc, #172]	@ (8013388 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 80132dc:	7812      	ldrb	r2, [r2, #0]
 80132de:	b11a      	cbz	r2, 80132e8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 80132e0:	2a01      	cmp	r2, #1
 80132e2:	d029      	beq.n	8013338 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 80132e4:	b004      	add	sp, #16
 80132e6:	bd70      	pop	{r4, r5, r6, pc}
 80132e8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80132ec:	441d      	add	r5, r3
 80132ee:	b2ad      	uxth	r5, r5
 80132f0:	b22e      	sxth	r6, r5
 80132f2:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80132f6:	42b3      	cmp	r3, r6
 80132f8:	daf4      	bge.n	80132e4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80132fa:	6823      	ldr	r3, [r4, #0]
 80132fc:	4669      	mov	r1, sp
 80132fe:	4620      	mov	r0, r4
 8013300:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013302:	4798      	blx	r3
 8013304:	b940      	cbnz	r0, 8013318 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8013306:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801330a:	2b01      	cmp	r3, #1
 801330c:	d004      	beq.n	8013318 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 801330e:	3301      	adds	r3, #1
 8013310:	105b      	asrs	r3, r3, #1
 8013312:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013316:	e7f0      	b.n	80132fa <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8013318:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801331c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013320:	4413      	add	r3, r2
 8013322:	b29b      	uxth	r3, r3
 8013324:	441a      	add	r2, r3
 8013326:	f8ad 3002 	strh.w	r3, [sp, #2]
 801332a:	b212      	sxth	r2, r2
 801332c:	4296      	cmp	r6, r2
 801332e:	dae0      	bge.n	80132f2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8013330:	1aeb      	subs	r3, r5, r3
 8013332:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013336:	e7dc      	b.n	80132f2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8013338:	f8bd 5000 	ldrh.w	r5, [sp]
 801333c:	441d      	add	r5, r3
 801333e:	b2ad      	uxth	r5, r5
 8013340:	b22e      	sxth	r6, r5
 8013342:	f9bd 3000 	ldrsh.w	r3, [sp]
 8013346:	42b3      	cmp	r3, r6
 8013348:	dacc      	bge.n	80132e4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801334a:	6823      	ldr	r3, [r4, #0]
 801334c:	4669      	mov	r1, sp
 801334e:	4620      	mov	r0, r4
 8013350:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013352:	4798      	blx	r3
 8013354:	b940      	cbnz	r0, 8013368 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8013356:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801335a:	2b01      	cmp	r3, #1
 801335c:	d004      	beq.n	8013368 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 801335e:	3301      	adds	r3, #1
 8013360:	105b      	asrs	r3, r3, #1
 8013362:	f8ad 3004 	strh.w	r3, [sp, #4]
 8013366:	e7f0      	b.n	801334a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8013368:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801336c:	f8bd 3000 	ldrh.w	r3, [sp]
 8013370:	4413      	add	r3, r2
 8013372:	b29b      	uxth	r3, r3
 8013374:	441a      	add	r2, r3
 8013376:	f8ad 3000 	strh.w	r3, [sp]
 801337a:	b212      	sxth	r2, r2
 801337c:	4296      	cmp	r6, r2
 801337e:	dae0      	bge.n	8013342 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8013380:	1aeb      	subs	r3, r5, r3
 8013382:	f8ad 3004 	strh.w	r3, [sp, #4]
 8013386:	e7dc      	b.n	8013342 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8013388:	24026410 	.word	0x24026410

0801338c <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801338c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801338e:	6803      	ldr	r3, [r0, #0]
 8013390:	4604      	mov	r4, r0
 8013392:	4601      	mov	r1, r0
 8013394:	4668      	mov	r0, sp
 8013396:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013398:	4798      	blx	r3
 801339a:	2100      	movs	r1, #0
 801339c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80133a0:	4668      	mov	r0, sp
 80133a2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80133a6:	9102      	str	r1, [sp, #8]
 80133a8:	a902      	add	r1, sp, #8
 80133aa:	f8ad 200c 	strh.w	r2, [sp, #12]
 80133ae:	f8ad 300e 	strh.w	r3, [sp, #14]
 80133b2:	f7fd fc7f 	bl	8010cb4 <_ZN8touchgfx4RectaNERKS0_>
 80133b6:	6823      	ldr	r3, [r4, #0]
 80133b8:	4669      	mov	r1, sp
 80133ba:	4620      	mov	r0, r4
 80133bc:	691b      	ldr	r3, [r3, #16]
 80133be:	4798      	blx	r3
 80133c0:	b004      	add	sp, #16
 80133c2:	bd10      	pop	{r4, pc}

080133c4 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 80133c4:	2101      	movs	r1, #1
 80133c6:	2200      	movs	r2, #0
 80133c8:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 80133cc:	490a      	ldr	r1, [pc, #40]	@ (80133f8 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 80133ce:	8082      	strh	r2, [r0, #4]
 80133d0:	6001      	str	r1, [r0, #0]
 80133d2:	21ff      	movs	r1, #255	@ 0xff
 80133d4:	80c2      	strh	r2, [r0, #6]
 80133d6:	8102      	strh	r2, [r0, #8]
 80133d8:	8142      	strh	r2, [r0, #10]
 80133da:	8182      	strh	r2, [r0, #12]
 80133dc:	81c2      	strh	r2, [r0, #14]
 80133de:	8202      	strh	r2, [r0, #16]
 80133e0:	8242      	strh	r2, [r0, #18]
 80133e2:	61c2      	str	r2, [r0, #28]
 80133e4:	8402      	strh	r2, [r0, #32]
 80133e6:	8442      	strh	r2, [r0, #34]	@ 0x22
 80133e8:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 80133ec:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 80133f0:	6282      	str	r2, [r0, #40]	@ 0x28
 80133f2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80133f6:	4770      	bx	lr
 80133f8:	08029430 	.word	0x08029430

080133fc <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 80133fc:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8013400:	4770      	bx	lr

08013402 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8013402:	b510      	push	{r4, lr}
 8013404:	4604      	mov	r4, r0
 8013406:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8013408:	b150      	cbz	r0, 8013420 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801340a:	6803      	ldr	r3, [r0, #0]
 801340c:	68db      	ldr	r3, [r3, #12]
 801340e:	4798      	blx	r3
 8013410:	b130      	cbz	r0, 8013420 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8013412:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8013414:	4621      	mov	r1, r4
 8013416:	6803      	ldr	r3, [r0, #0]
 8013418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801341c:	689b      	ldr	r3, [r3, #8]
 801341e:	4718      	bx	r3
 8013420:	bd10      	pop	{r4, pc}

08013422 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8013422:	790b      	ldrb	r3, [r1, #4]
 8013424:	2b00      	cmp	r3, #0
 8013426:	bf0c      	ite	eq
 8013428:	2301      	moveq	r3, #1
 801342a:	2300      	movne	r3, #0
 801342c:	b570      	push	{r4, r5, r6, lr}
 801342e:	4604      	mov	r4, r0
 8013430:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8013434:	460e      	mov	r6, r1
 8013436:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 801343a:	d109      	bne.n	8013450 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 801343c:	b14d      	cbz	r5, 8013452 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 801343e:	7933      	ldrb	r3, [r6, #4]
 8013440:	2b01      	cmp	r3, #1
 8013442:	d10c      	bne.n	801345e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8013444:	6823      	ldr	r3, [r4, #0]
 8013446:	4620      	mov	r0, r4
 8013448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801344a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801344e:	4718      	bx	r3
 8013450:	b12d      	cbz	r5, 801345e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8013452:	6823      	ldr	r3, [r4, #0]
 8013454:	4620      	mov	r0, r4
 8013456:	695b      	ldr	r3, [r3, #20]
 8013458:	4798      	blx	r3
 801345a:	2d00      	cmp	r5, #0
 801345c:	d1ef      	bne.n	801343e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801345e:	bd70      	pop	{r4, r5, r6, pc}

08013460 <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv>:
 8013460:	b508      	push	{r3, lr}
 8013462:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8013466:	b10b      	cbz	r3, 801346c <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv+0xc>
 8013468:	f7f0 f94d 	bl	8003706 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 801346c:	bd08      	pop	{r3, pc}

0801346e <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 801346e:	6803      	ldr	r3, [r0, #0]
 8013470:	f64f 71fe 	movw	r1, #65534	@ 0xfffe
 8013474:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013476:	4718      	bx	r3

08013478 <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 8013478:	4770      	bx	lr

0801347a <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 801347a:	b510      	push	{r4, lr}
 801347c:	4604      	mov	r4, r0
 801347e:	212c      	movs	r1, #44	@ 0x2c
 8013480:	f011 fb33 	bl	8024aea <_ZdlPvj>
 8013484:	4620      	mov	r0, r4
 8013486:	bd10      	pop	{r4, pc}

08013488 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 8013488:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 801348c:	2bff      	cmp	r3, #255	@ 0xff
 801348e:	b510      	push	{r4, lr}
 8013490:	d104      	bne.n	801349c <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 8013492:	8cca      	ldrh	r2, [r1, #38]	@ 0x26
 8013494:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013498:	429a      	cmp	r2, r3
 801349a:	d105      	bne.n	80134a8 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 801349c:	2300      	movs	r3, #0
 801349e:	8003      	strh	r3, [r0, #0]
 80134a0:	8043      	strh	r3, [r0, #2]
 80134a2:	8083      	strh	r3, [r0, #4]
 80134a4:	80c3      	strh	r3, [r0, #6]
 80134a6:	bd10      	pop	{r4, pc}
 80134a8:	2300      	movs	r3, #0
 80134aa:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 80134ae:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 80134b2:	8003      	strh	r3, [r0, #0]
 80134b4:	8043      	strh	r3, [r0, #2]
 80134b6:	8084      	strh	r4, [r0, #4]
 80134b8:	80c2      	strh	r2, [r0, #6]
 80134ba:	e7f4      	b.n	80134a6 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

080134bc <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 80134bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80134c0:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 80134c4:	b087      	sub	sp, #28
 80134c6:	4604      	mov	r4, r0
 80134c8:	4689      	mov	r9, r1
 80134ca:	b363      	cbz	r3, 8013526 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 80134cc:	8cc2      	ldrh	r2, [r0, #38]	@ 0x26
 80134ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80134d2:	429a      	cmp	r2, r3
 80134d4:	d027      	beq.n	8013526 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 80134d6:	ad06      	add	r5, sp, #24
 80134d8:	2700      	movs	r7, #0
 80134da:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 80134de:	4628      	mov	r0, r5
 80134e0:	f006 fd40 	bl	8019f64 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80134e4:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80134e8:	a904      	add	r1, sp, #16
 80134ea:	f8ad 0014 	strh.w	r0, [sp, #20]
 80134ee:	f8ad 3016 	strh.w	r3, [sp, #22]
 80134f2:	4620      	mov	r0, r4
 80134f4:	6823      	ldr	r3, [r4, #0]
 80134f6:	9704      	str	r7, [sp, #16]
 80134f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134fa:	4798      	blx	r3
 80134fc:	f7f0 ff08 	bl	8004310 <_ZN8touchgfx3HAL3lcdEv>
 8013500:	6803      	ldr	r3, [r0, #0]
 8013502:	4606      	mov	r6, r0
 8013504:	4628      	mov	r0, r5
 8013506:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801350a:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 801350c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013510:	f006 fde2 	bl	801a0d8 <_ZNK8touchgfx6Bitmap7getDataEv>
 8013514:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8013518:	4601      	mov	r1, r0
 801351a:	9701      	str	r7, [sp, #4]
 801351c:	aa04      	add	r2, sp, #16
 801351e:	9300      	str	r3, [sp, #0]
 8013520:	4630      	mov	r0, r6
 8013522:	464b      	mov	r3, r9
 8013524:	47c0      	blx	r8
 8013526:	b007      	add	sp, #28
 8013528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801352c <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 801352c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801352e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8013532:	460d      	mov	r5, r1
 8013534:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8013538:	2100      	movs	r1, #0
 801353a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801353e:	4604      	mov	r4, r0
 8013540:	6803      	ldr	r3, [r0, #0]
 8013542:	f8ad 2004 	strh.w	r2, [sp, #4]
 8013546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013548:	9100      	str	r1, [sp, #0]
 801354a:	4669      	mov	r1, sp
 801354c:	4798      	blx	r3
 801354e:	4621      	mov	r1, r4
 8013550:	a802      	add	r0, sp, #8
 8013552:	f004 fc3d 	bl	8017dd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013556:	f7f0 fedb 	bl	8004310 <_ZN8touchgfx3HAL3lcdEv>
 801355a:	6803      	ldr	r3, [r0, #0]
 801355c:	aa02      	add	r2, sp, #8
 801355e:	4669      	mov	r1, sp
 8013560:	695e      	ldr	r6, [r3, #20]
 8013562:	462b      	mov	r3, r5
 8013564:	47b0      	blx	r6
 8013566:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801356a:	2800      	cmp	r0, #0
 801356c:	bf08      	it	eq
 801356e:	461d      	moveq	r5, r3
 8013570:	84e5      	strh	r5, [r4, #38]	@ 0x26
 8013572:	b004      	add	sp, #16
 8013574:	bd70      	pop	{r4, r5, r6, pc}
	...

08013578 <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 8013578:	2200      	movs	r2, #0
 801357a:	8082      	strh	r2, [r0, #4]
 801357c:	80c2      	strh	r2, [r0, #6]
 801357e:	8102      	strh	r2, [r0, #8]
 8013580:	8142      	strh	r2, [r0, #10]
 8013582:	8182      	strh	r2, [r0, #12]
 8013584:	81c2      	strh	r2, [r0, #14]
 8013586:	8202      	strh	r2, [r0, #16]
 8013588:	8242      	strh	r2, [r0, #18]
 801358a:	61c2      	str	r2, [r0, #28]
 801358c:	8402      	strh	r2, [r0, #32]
 801358e:	8442      	strh	r2, [r0, #34]	@ 0x22
 8013590:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8013594:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8013598:	2201      	movs	r2, #1
 801359a:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
 801359e:	4a04      	ldr	r2, [pc, #16]	@ (80135b0 <_ZN8touchgfx14SnapshotWidgetC1Ev+0x38>)
 80135a0:	6002      	str	r2, [r0, #0]
 80135a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80135a6:	84c2      	strh	r2, [r0, #38]	@ 0x26
 80135a8:	f880 2028 	strb.w	r2, [r0, #40]	@ 0x28
 80135ac:	4770      	bx	lr
 80135ae:	bf00      	nop
 80135b0:	08029518 	.word	0x08029518

080135b4 <_ZN8touchgfx8TextArea8setWidthEs>:
 80135b4:	b530      	push	{r4, r5, lr}
 80135b6:	b085      	sub	sp, #20
 80135b8:	6803      	ldr	r3, [r0, #0]
 80135ba:	4604      	mov	r4, r0
 80135bc:	8101      	strh	r1, [r0, #8]
 80135be:	466d      	mov	r5, sp
 80135c0:	4601      	mov	r1, r0
 80135c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80135c6:	343c      	adds	r4, #60	@ 0x3c
 80135c8:	4628      	mov	r0, r5
 80135ca:	4798      	blx	r3
 80135cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80135d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80135d4:	b005      	add	sp, #20
 80135d6:	bd30      	pop	{r4, r5, pc}

080135d8 <_ZN8touchgfx8TextArea9setHeightEs>:
 80135d8:	b530      	push	{r4, r5, lr}
 80135da:	b085      	sub	sp, #20
 80135dc:	6803      	ldr	r3, [r0, #0]
 80135de:	4604      	mov	r4, r0
 80135e0:	8141      	strh	r1, [r0, #10]
 80135e2:	466d      	mov	r5, sp
 80135e4:	4601      	mov	r1, r0
 80135e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80135ea:	343c      	adds	r4, #60	@ 0x3c
 80135ec:	4628      	mov	r0, r5
 80135ee:	4798      	blx	r3
 80135f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80135f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80135f8:	b005      	add	sp, #20
 80135fa:	bd30      	pop	{r4, r5, pc}

080135fc <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 80135fc:	2200      	movs	r2, #0
 80135fe:	8002      	strh	r2, [r0, #0]
 8013600:	8042      	strh	r2, [r0, #2]
 8013602:	8082      	strh	r2, [r0, #4]
 8013604:	80c2      	strh	r2, [r0, #6]
 8013606:	4770      	bx	lr

08013608 <_ZN8touchgfx8TextArea8setAlphaEh>:
 8013608:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
 801360c:	4770      	bx	lr
	...

08013610 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8013610:	b570      	push	{r4, r5, r6, lr}
 8013612:	6803      	ldr	r3, [r0, #0]
 8013614:	4604      	mov	r4, r0
 8013616:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8013618:	460d      	mov	r5, r1
 801361a:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 801361c:	4b08      	ldr	r3, [pc, #32]	@ (8013640 <_ZN8touchgfx8TextArea12setBaselineYEs+0x30>)
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8013624:	4b07      	ldr	r3, [pc, #28]	@ (8013644 <_ZN8touchgfx8TextArea12setBaselineYEs+0x34>)
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801362c:	6803      	ldr	r3, [r0, #0]
 801362e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013630:	4798      	blx	r3
 8013632:	1a29      	subs	r1, r5, r0
 8013634:	4633      	mov	r3, r6
 8013636:	4620      	mov	r0, r4
 8013638:	b209      	sxth	r1, r1
 801363a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801363e:	4718      	bx	r3
 8013640:	24026470 	.word	0x24026470
 8013644:	24026478 	.word	0x24026478

08013648 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8013648:	b570      	push	{r4, r5, r6, lr}
 801364a:	6803      	ldr	r3, [r0, #0]
 801364c:	4604      	mov	r4, r0
 801364e:	4615      	mov	r5, r2
 8013650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013652:	4798      	blx	r3
 8013654:	6823      	ldr	r3, [r4, #0]
 8013656:	4629      	mov	r1, r5
 8013658:	4620      	mov	r0, r4
 801365a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801365c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013660:	4718      	bx	r3

08013662 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8013662:	2000      	movs	r0, #0
 8013664:	4770      	bx	lr

08013666 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
 8013666:	2000      	movs	r0, #0
 8013668:	4770      	bx	lr
	...

0801366c <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 801366c:	4b07      	ldr	r3, [pc, #28]	@ (801368c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 801366e:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8013670:	881b      	ldrh	r3, [r3, #0]
 8013672:	4293      	cmp	r3, r2
 8013674:	bf81      	itttt	hi
 8013676:	4b06      	ldrhi	r3, [pc, #24]	@ (8013690 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8013678:	681b      	ldrhi	r3, [r3, #0]
 801367a:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 801367e:	7858      	ldrbhi	r0, [r3, #1]
 8013680:	bf8c      	ite	hi
 8013682:	f000 0003 	andhi.w	r0, r0, #3
 8013686:	2000      	movls	r0, #0
 8013688:	4770      	bx	lr
 801368a:	bf00      	nop
 801368c:	24026474 	.word	0x24026474
 8013690:	24026470 	.word	0x24026470

08013694 <_ZN8touchgfx8TextAreaD1Ev>:
 8013694:	4770      	bx	lr
	...

08013698 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8013698:	4b11      	ldr	r3, [pc, #68]	@ (80136e0 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 801369a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801369e:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80136a0:	4604      	mov	r4, r0
 80136a2:	881b      	ldrh	r3, [r3, #0]
 80136a4:	428b      	cmp	r3, r1
 80136a6:	d918      	bls.n	80136da <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 80136a8:	6803      	ldr	r3, [r0, #0]
 80136aa:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 80136ac:	4b0d      	ldr	r3, [pc, #52]	@ (80136e4 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 80136ae:	6818      	ldr	r0, [r3, #0]
 80136b0:	f7f3 f9d6 	bl	8006a60 <_ZNK8touchgfx5Texts7getTextEt>
 80136b4:	6823      	ldr	r3, [r4, #0]
 80136b6:	4606      	mov	r6, r0
 80136b8:	4620      	mov	r0, r4
 80136ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80136bc:	4798      	blx	r3
 80136be:	6823      	ldr	r3, [r4, #0]
 80136c0:	4607      	mov	r7, r0
 80136c2:	4620      	mov	r0, r4
 80136c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80136c8:	4798      	blx	r3
 80136ca:	463a      	mov	r2, r7
 80136cc:	4603      	mov	r3, r0
 80136ce:	4631      	mov	r1, r6
 80136d0:	4620      	mov	r0, r4
 80136d2:	46ac      	mov	ip, r5
 80136d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80136d8:	4760      	bx	ip
 80136da:	2000      	movs	r0, #0
 80136dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136e0:	24026474 	.word	0x24026474
 80136e4:	2402647c 	.word	0x2402647c

080136e8 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 80136e8:	4b18      	ldr	r3, [pc, #96]	@ (801374c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 80136ea:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80136ee:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80136f0:	4604      	mov	r4, r0
 80136f2:	881b      	ldrh	r3, [r3, #0]
 80136f4:	428b      	cmp	r3, r1
 80136f6:	d926      	bls.n	8013746 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 80136f8:	4b15      	ldr	r3, [pc, #84]	@ (8013750 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8013700:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8013704:	4b13      	ldr	r3, [pc, #76]	@ (8013754 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8013706:	7855      	ldrb	r5, [r2, #1]
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	f3c5 0581 	ubfx	r5, r5, #2, #2
 801370e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8013712:	6833      	ldr	r3, [r6, #0]
 8013714:	69df      	ldr	r7, [r3, #28]
 8013716:	4b10      	ldr	r3, [pc, #64]	@ (8013758 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8013718:	6818      	ldr	r0, [r3, #0]
 801371a:	f7f3 f9a1 	bl	8006a60 <_ZNK8touchgfx5Texts7getTextEt>
 801371e:	6823      	ldr	r3, [r4, #0]
 8013720:	4680      	mov	r8, r0
 8013722:	4620      	mov	r0, r4
 8013724:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013726:	4798      	blx	r3
 8013728:	6823      	ldr	r3, [r4, #0]
 801372a:	4681      	mov	r9, r0
 801372c:	4620      	mov	r0, r4
 801372e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013732:	4798      	blx	r3
 8013734:	464b      	mov	r3, r9
 8013736:	9000      	str	r0, [sp, #0]
 8013738:	4642      	mov	r2, r8
 801373a:	4629      	mov	r1, r5
 801373c:	4630      	mov	r0, r6
 801373e:	47b8      	blx	r7
 8013740:	b003      	add	sp, #12
 8013742:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013746:	2000      	movs	r0, #0
 8013748:	e7fa      	b.n	8013740 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 801374a:	bf00      	nop
 801374c:	24026474 	.word	0x24026474
 8013750:	24026470 	.word	0x24026470
 8013754:	24026478 	.word	0x24026478
 8013758:	2402647c 	.word	0x2402647c

0801375c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801375c:	b40e      	push	{r1, r2, r3}
 801375e:	4b30      	ldr	r3, [pc, #192]	@ (8013820 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8013760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013764:	881a      	ldrh	r2, [r3, #0]
 8013766:	b09d      	sub	sp, #116	@ 0x74
 8013768:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 801376a:	4604      	mov	r4, r0
 801376c:	429a      	cmp	r2, r3
 801376e:	d954      	bls.n	801381a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8013770:	aa26      	add	r2, sp, #152	@ 0x98
 8013772:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8013824 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8013776:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 8013828 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 801377a:	9202      	str	r2, [sp, #8]
 801377c:	f8d9 2000 	ldr.w	r2, [r9]
 8013780:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8013784:	f8d8 3000 	ldr.w	r3, [r8]
 8013788:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801378c:	682b      	ldr	r3, [r5, #0]
 801378e:	4628      	mov	r0, r5
 8013790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013792:	4798      	blx	r3
 8013794:	4606      	mov	r6, r0
 8013796:	b207      	sxth	r7, r0
 8013798:	a803      	add	r0, sp, #12
 801379a:	f005 fae7 	bl	8018d6c <_ZN8touchgfx12TextProviderC1Ev>
 801379e:	682b      	ldr	r3, [r5, #0]
 80137a0:	4628      	mov	r0, r5
 80137a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80137a4:	4798      	blx	r3
 80137a6:	682b      	ldr	r3, [r5, #0]
 80137a8:	4682      	mov	sl, r0
 80137aa:	4628      	mov	r0, r5
 80137ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80137ae:	4798      	blx	r3
 80137b0:	4653      	mov	r3, sl
 80137b2:	9000      	str	r0, [sp, #0]
 80137b4:	a803      	add	r0, sp, #12
 80137b6:	9a02      	ldr	r2, [sp, #8]
 80137b8:	9925      	ldr	r1, [sp, #148]	@ 0x94
 80137ba:	f005 fb32 	bl	8018e22 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80137be:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 80137c0:	f8d9 3000 	ldr.w	r3, [r9]
 80137c4:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 80137c8:	8925      	ldrh	r5, [r4, #8]
 80137ca:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 80137ce:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 80137d2:	eba5 050c 	sub.w	r5, r5, ip
 80137d6:	784a      	ldrb	r2, [r1, #1]
 80137d8:	f8d8 3000 	ldr.w	r3, [r8]
 80137dc:	b22d      	sxth	r5, r5
 80137de:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 80137e2:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80137e6:	9500      	str	r5, [sp, #0]
 80137e8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80137ec:	a803      	add	r0, sp, #12
 80137ee:	f002 fcff 	bl	80161f0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 80137f2:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 80137f6:	b203      	sxth	r3, r0
 80137f8:	18b9      	adds	r1, r7, r2
 80137fa:	2900      	cmp	r1, #0
 80137fc:	dd0b      	ble.n	8013816 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 80137fe:	3b01      	subs	r3, #1
 8013800:	fb13 f302 	smulbb	r3, r3, r2
 8013804:	fb16 3300 	smlabb	r3, r6, r0, r3
 8013808:	b21f      	sxth	r7, r3
 801380a:	4638      	mov	r0, r7
 801380c:	b01d      	add	sp, #116	@ 0x74
 801380e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013812:	b003      	add	sp, #12
 8013814:	4770      	bx	lr
 8013816:	2b00      	cmp	r3, #0
 8013818:	dcf7      	bgt.n	801380a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801381a:	2700      	movs	r7, #0
 801381c:	e7f5      	b.n	801380a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801381e:	bf00      	nop
 8013820:	24026474 	.word	0x24026474
 8013824:	24026470 	.word	0x24026470
 8013828:	24026478 	.word	0x24026478

0801382c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 801382c:	4bbd      	ldr	r3, [pc, #756]	@ (8013b24 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 801382e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013832:	460c      	mov	r4, r1
 8013834:	881b      	ldrh	r3, [r3, #0]
 8013836:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 8013838:	b0a9      	sub	sp, #164	@ 0xa4
 801383a:	4680      	mov	r8, r0
 801383c:	428b      	cmp	r3, r1
 801383e:	d809      	bhi.n	8013854 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8013840:	2300      	movs	r3, #0
 8013842:	f04f 32ff 	mov.w	r2, #4294967295
 8013846:	6083      	str	r3, [r0, #8]
 8013848:	e9c0 3200 	strd	r3, r2, [r0]
 801384c:	4640      	mov	r0, r8
 801384e:	b029      	add	sp, #164	@ 0xa4
 8013850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013854:	4eb4      	ldr	r6, [pc, #720]	@ (8013b28 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 8013856:	6833      	ldr	r3, [r6, #0]
 8013858:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 801385c:	4bb3      	ldr	r3, [pc, #716]	@ (8013b2c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8013864:	4bb2      	ldr	r3, [pc, #712]	@ (8013b30 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8013866:	6818      	ldr	r0, [r3, #0]
 8013868:	f7f3 f8fa 	bl	8006a60 <_ZNK8touchgfx5Texts7getTextEt>
 801386c:	682b      	ldr	r3, [r5, #0]
 801386e:	4681      	mov	r9, r0
 8013870:	4628      	mov	r0, r5
 8013872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013874:	4798      	blx	r3
 8013876:	8ea7      	ldrh	r7, [r4, #52]	@ 0x34
 8013878:	b203      	sxth	r3, r0
 801387a:	4682      	mov	sl, r0
 801387c:	4407      	add	r7, r0
 801387e:	a80f      	add	r0, sp, #60	@ 0x3c
 8013880:	9304      	str	r3, [sp, #16]
 8013882:	b2bb      	uxth	r3, r7
 8013884:	9303      	str	r3, [sp, #12]
 8013886:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 801388a:	2b00      	cmp	r3, #0
 801388c:	f040 80a5 	bne.w	80139da <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 8013890:	f005 fa6c 	bl	8018d6c <_ZN8touchgfx12TextProviderC1Ev>
 8013894:	682b      	ldr	r3, [r5, #0]
 8013896:	4628      	mov	r0, r5
 8013898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801389a:	4798      	blx	r3
 801389c:	682b      	ldr	r3, [r5, #0]
 801389e:	4606      	mov	r6, r0
 80138a0:	4628      	mov	r0, r5
 80138a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80138a4:	4798      	blx	r3
 80138a6:	6823      	ldr	r3, [r4, #0]
 80138a8:	4607      	mov	r7, r0
 80138aa:	4620      	mov	r0, r4
 80138ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80138ae:	4798      	blx	r3
 80138b0:	6823      	ldr	r3, [r4, #0]
 80138b2:	4683      	mov	fp, r0
 80138b4:	4620      	mov	r0, r4
 80138b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80138ba:	4798      	blx	r3
 80138bc:	463b      	mov	r3, r7
 80138be:	4649      	mov	r1, r9
 80138c0:	4632      	mov	r2, r6
 80138c2:	2600      	movs	r6, #0
 80138c4:	e9cd b000 	strd	fp, r0, [sp]
 80138c8:	a80f      	add	r0, sp, #60	@ 0x3c
 80138ca:	4637      	mov	r7, r6
 80138cc:	f005 fabe 	bl	8018e4c <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80138d0:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80138d4:	f8df b250 	ldr.w	fp, [pc, #592]	@ 8013b28 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 80138d8:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 80138dc:	bf0c      	ite	eq
 80138de:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 80138e2:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 80138e6:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 80138e8:	4629      	mov	r1, r5
 80138ea:	f8db 3000 	ldr.w	r3, [fp]
 80138ee:	a80f      	add	r0, sp, #60	@ 0x3c
 80138f0:	3701      	adds	r7, #1
 80138f2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80138f6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80138fa:	b2bf      	uxth	r7, r7
 80138fc:	785b      	ldrb	r3, [r3, #1]
 80138fe:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8013902:	f002 f97c 	bl	8015bfe <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8013906:	9b03      	ldr	r3, [sp, #12]
 8013908:	4286      	cmp	r6, r0
 801390a:	eba9 0903 	sub.w	r9, r9, r3
 801390e:	bfb8      	it	lt
 8013910:	4606      	movlt	r6, r0
 8013912:	a80f      	add	r0, sp, #60	@ 0x3c
 8013914:	fa0f f989 	sxth.w	r9, r9
 8013918:	b236      	sxth	r6, r6
 801391a:	f005 fa4e 	bl	8018dba <_ZN8touchgfx12TextProvider11endOfStringEv>
 801391e:	b918      	cbnz	r0, 8013928 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8013920:	7a2b      	ldrb	r3, [r5, #8]
 8013922:	444b      	add	r3, r9
 8013924:	2b00      	cmp	r3, #0
 8013926:	dcde      	bgt.n	80138e6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 8013928:	9b03      	ldr	r3, [sp, #12]
 801392a:	4620      	mov	r0, r4
 801392c:	9a04      	ldr	r2, [sp, #16]
 801392e:	fb13 f707 	smulbb	r7, r3, r7
 8013932:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8013934:	f895 9009 	ldrb.w	r9, [r5, #9]
 8013938:	1aff      	subs	r7, r7, r3
 801393a:	b2bf      	uxth	r7, r7
 801393c:	b23b      	sxth	r3, r7
 801393e:	429a      	cmp	r2, r3
 8013940:	bfa8      	it	ge
 8013942:	4657      	movge	r7, sl
 8013944:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8013948:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 801394c:	6823      	ldr	r3, [r4, #0]
 801394e:	444f      	add	r7, r9
 8013950:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013952:	bf08      	it	eq
 8013954:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 8013958:	fa1f f987 	uxth.w	r9, r7
 801395c:	bf18      	it	ne
 801395e:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 8013962:	4798      	blx	r3
 8013964:	2801      	cmp	r0, #1
 8013966:	fa0f f789 	sxth.w	r7, r9
 801396a:	b2b3      	uxth	r3, r6
 801396c:	f000 80e2 	beq.w	8013b34 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 8013970:	2802      	cmp	r0, #2
 8013972:	f894 6037 	ldrb.w	r6, [r4, #55]	@ 0x37
 8013976:	f000 80e3 	beq.w	8013b40 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 801397a:	7aea      	ldrb	r2, [r5, #11]
 801397c:	b236      	sxth	r6, r6
 801397e:	7b2d      	ldrb	r5, [r5, #12]
 8013980:	1ab6      	subs	r6, r6, r2
 8013982:	442a      	add	r2, r5
 8013984:	fa1f fa86 	uxth.w	sl, r6
 8013988:	4413      	add	r3, r2
 801398a:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 801398e:	fa0f fb8a 	sxth.w	fp, sl
 8013992:	b29b      	uxth	r3, r3
 8013994:	2a02      	cmp	r2, #2
 8013996:	b21e      	sxth	r6, r3
 8013998:	f000 80d6 	beq.w	8013b48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 801399c:	2a03      	cmp	r2, #3
 801399e:	f000 80de 	beq.w	8013b5e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 80139a2:	2a01      	cmp	r2, #1
 80139a4:	f040 80e6 	bne.w	8013b74 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 80139a8:	8925      	ldrh	r5, [r4, #8]
 80139aa:	4633      	mov	r3, r6
 80139ac:	463e      	mov	r6, r7
 80139ae:	eba5 0909 	sub.w	r9, r5, r9
 80139b2:	461f      	mov	r7, r3
 80139b4:	465d      	mov	r5, fp
 80139b6:	fa0f fb89 	sxth.w	fp, r9
 80139ba:	4b5d      	ldr	r3, [pc, #372]	@ (8013b30 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 80139bc:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80139be:	6818      	ldr	r0, [r3, #0]
 80139c0:	f7f3 f84e 	bl	8006a60 <_ZNK8touchgfx5Texts7getTextEt>
 80139c4:	f8a8 b000 	strh.w	fp, [r8]
 80139c8:	f8a8 5002 	strh.w	r5, [r8, #2]
 80139cc:	f8a8 6004 	strh.w	r6, [r8, #4]
 80139d0:	f8a8 7006 	strh.w	r7, [r8, #6]
 80139d4:	f8c8 0008 	str.w	r0, [r8, #8]
 80139d8:	e738      	b.n	801384c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 80139da:	f005 f9c7 	bl	8018d6c <_ZN8touchgfx12TextProviderC1Ev>
 80139de:	682b      	ldr	r3, [r5, #0]
 80139e0:	4628      	mov	r0, r5
 80139e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80139e4:	4798      	blx	r3
 80139e6:	682b      	ldr	r3, [r5, #0]
 80139e8:	4607      	mov	r7, r0
 80139ea:	4628      	mov	r0, r5
 80139ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80139ee:	4798      	blx	r3
 80139f0:	6823      	ldr	r3, [r4, #0]
 80139f2:	4683      	mov	fp, r0
 80139f4:	4620      	mov	r0, r4
 80139f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80139f8:	4798      	blx	r3
 80139fa:	6822      	ldr	r2, [r4, #0]
 80139fc:	9005      	str	r0, [sp, #20]
 80139fe:	4620      	mov	r0, r4
 8013a00:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8013a04:	4790      	blx	r2
 8013a06:	9b05      	ldr	r3, [sp, #20]
 8013a08:	463a      	mov	r2, r7
 8013a0a:	4649      	mov	r1, r9
 8013a0c:	9001      	str	r0, [sp, #4]
 8013a0e:	a80f      	add	r0, sp, #60	@ 0x3c
 8013a10:	9300      	str	r3, [sp, #0]
 8013a12:	465b      	mov	r3, fp
 8013a14:	f005 fa1a 	bl	8018e4c <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8013a18:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8013a1c:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 8013a20:	af0f      	add	r7, sp, #60	@ 0x3c
 8013a22:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8013a26:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8013a2a:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8013a2c:	bf0a      	itet	eq
 8013a2e:	464a      	moveq	r2, r9
 8013a30:	461a      	movne	r2, r3
 8013a32:	4699      	moveq	r9, r3
 8013a34:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 8013a38:	f894 0039 	ldrb.w	r0, [r4, #57]	@ 0x39
 8013a3c:	1ad2      	subs	r2, r2, r3
 8013a3e:	6833      	ldr	r3, [r6, #0]
 8013a40:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	@ 0x34
 8013a44:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8013a48:	7859      	ldrb	r1, [r3, #1]
 8013a4a:	2300      	movs	r3, #0
 8013a4c:	9707      	str	r7, [sp, #28]
 8013a4e:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8013a52:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013a56:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8013a5a:	f88d 1020 	strb.w	r1, [sp, #32]
 8013a5e:	9509      	str	r5, [sp, #36]	@ 0x24
 8013a60:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8013a64:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 8013a68:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 8013a6c:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8013a70:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8013a74:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8013a78:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8013a7c:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8013a80:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8013a84:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8013a88:	b350      	cbz	r0, 8013ae0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8013a8a:	682b      	ldr	r3, [r5, #0]
 8013a8c:	4628      	mov	r0, r5
 8013a8e:	695b      	ldr	r3, [r3, #20]
 8013a90:	4798      	blx	r3
 8013a92:	4607      	mov	r7, r0
 8013a94:	b320      	cbz	r0, 8013ae0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8013a96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013a98:	4639      	mov	r1, r7
 8013a9a:	6803      	ldr	r3, [r0, #0]
 8013a9c:	68db      	ldr	r3, [r3, #12]
 8013a9e:	4798      	blx	r3
 8013aa0:	4606      	mov	r6, r0
 8013aa2:	b1e8      	cbz	r0, 8013ae0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8013aa4:	7b43      	ldrb	r3, [r0, #13]
 8013aa6:	7a82      	ldrb	r2, [r0, #10]
 8013aa8:	005b      	lsls	r3, r3, #1
 8013aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013aae:	4313      	orrs	r3, r2
 8013ab0:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8013ab4:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8013ab8:	2b06      	cmp	r3, #6
 8013aba:	d111      	bne.n	8013ae0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8013abc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013abe:	4632      	mov	r2, r6
 8013ac0:	4639      	mov	r1, r7
 8013ac2:	6803      	ldr	r3, [r0, #0]
 8013ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013ac6:	4798      	blx	r3
 8013ac8:	7b73      	ldrb	r3, [r6, #13]
 8013aca:	005b      	lsls	r3, r3, #1
 8013acc:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8013ad0:	7ab3      	ldrb	r3, [r6, #10]
 8013ad2:	4313      	orrs	r3, r2
 8013ad4:	4418      	add	r0, r3
 8013ad6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8013ada:	4418      	add	r0, r3
 8013adc:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 8013ae0:	2600      	movs	r6, #0
 8013ae2:	4637      	mov	r7, r6
 8013ae4:	a806      	add	r0, sp, #24
 8013ae6:	3701      	adds	r7, #1
 8013ae8:	f002 fa7f 	bl	8015fea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8013aec:	f8bd 0036 	ldrh.w	r0, [sp, #54]	@ 0x36
 8013af0:	9b03      	ldr	r3, [sp, #12]
 8013af2:	b2bf      	uxth	r7, r7
 8013af4:	4286      	cmp	r6, r0
 8013af6:	eba9 0903 	sub.w	r9, r9, r3
 8013afa:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8013afe:	bfb8      	it	lt
 8013b00:	4606      	movlt	r6, r0
 8013b02:	fa0f f989 	sxth.w	r9, r9
 8013b06:	b236      	sxth	r6, r6
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	f43f af0d 	beq.w	8013928 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8013b0e:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	f47f af08 	bne.w	8013928 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8013b18:	7a2b      	ldrb	r3, [r5, #8]
 8013b1a:	444b      	add	r3, r9
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	dce1      	bgt.n	8013ae4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 8013b20:	e702      	b.n	8013928 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8013b22:	bf00      	nop
 8013b24:	24026474 	.word	0x24026474
 8013b28:	24026470 	.word	0x24026470
 8013b2c:	24026478 	.word	0x24026478
 8013b30:	2402647c 	.word	0x2402647c
 8013b34:	ebaa 0606 	sub.w	r6, sl, r6
 8013b38:	2002      	movs	r0, #2
 8013b3a:	fb96 f6f0 	sdiv	r6, r6, r0
 8013b3e:	e71c      	b.n	801397a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8013b40:	441e      	add	r6, r3
 8013b42:	ebaa 0606 	sub.w	r6, sl, r6
 8013b46:	e718      	b.n	801397a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8013b48:	8925      	ldrh	r5, [r4, #8]
 8013b4a:	1aed      	subs	r5, r5, r3
 8013b4c:	eba5 050a 	sub.w	r5, r5, sl
 8013b50:	fa0f fb85 	sxth.w	fp, r5
 8013b54:	8965      	ldrh	r5, [r4, #10]
 8013b56:	eba5 0509 	sub.w	r5, r5, r9
 8013b5a:	b22d      	sxth	r5, r5
 8013b5c:	e72d      	b.n	80139ba <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8013b5e:	8965      	ldrh	r5, [r4, #10]
 8013b60:	f04f 0b00 	mov.w	fp, #0
 8013b64:	1aed      	subs	r5, r5, r3
 8013b66:	4633      	mov	r3, r6
 8013b68:	463e      	mov	r6, r7
 8013b6a:	eba5 050a 	sub.w	r5, r5, sl
 8013b6e:	461f      	mov	r7, r3
 8013b70:	b22d      	sxth	r5, r5
 8013b72:	e722      	b.n	80139ba <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8013b74:	2500      	movs	r5, #0
 8013b76:	e720      	b.n	80139ba <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

08013b78 <_ZN8touchgfx8TextAreaD0Ev>:
 8013b78:	b510      	push	{r4, lr}
 8013b7a:	4604      	mov	r4, r0
 8013b7c:	2148      	movs	r1, #72	@ 0x48
 8013b7e:	f010 ffb4 	bl	8024aea <_ZdlPvj>
 8013b82:	4620      	mov	r0, r4
 8013b84:	bd10      	pop	{r4, pc}
	...

08013b88 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8013b88:	b513      	push	{r0, r1, r4, lr}
 8013b8a:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 8013b8e:	4604      	mov	r4, r0
 8013b90:	b1fb      	cbz	r3, 8013bd2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013b92:	4b16      	ldr	r3, [pc, #88]	@ (8013bec <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8013b94:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8013b96:	881b      	ldrh	r3, [r3, #0]
 8013b98:	428b      	cmp	r3, r1
 8013b9a:	d91a      	bls.n	8013bd2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013b9c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	dd16      	ble.n	8013bd2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013ba4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	dd12      	ble.n	8013bd2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013bac:	4b10      	ldr	r3, [pc, #64]	@ (8013bf0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 8013bae:	6818      	ldr	r0, [r3, #0]
 8013bb0:	f7f2 ff56 	bl	8006a60 <_ZNK8touchgfx5Texts7getTextEt>
 8013bb4:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 8013bb8:	6822      	ldr	r2, [r4, #0]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	db06      	blt.n	8013bcc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8013bbe:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	db02      	blt.n	8013bcc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8013bc6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8013bc8:	4298      	cmp	r0, r3
 8013bca:	d004      	beq.n	8013bd6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8013bcc:	6953      	ldr	r3, [r2, #20]
 8013bce:	4620      	mov	r0, r4
 8013bd0:	4798      	blx	r3
 8013bd2:	b002      	add	sp, #8
 8013bd4:	bd10      	pop	{r4, pc}
 8013bd6:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 8013bda:	466b      	mov	r3, sp
 8013bdc:	6912      	ldr	r2, [r2, #16]
 8013bde:	c903      	ldmia	r1, {r0, r1}
 8013be0:	e883 0003 	stmia.w	r3, {r0, r1}
 8013be4:	4619      	mov	r1, r3
 8013be6:	4620      	mov	r0, r4
 8013be8:	4790      	blx	r2
 8013bea:	e7f2      	b.n	8013bd2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013bec:	24026474 	.word	0x24026474
 8013bf0:	2402647c 	.word	0x2402647c

08013bf4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8013bf4:	4b45      	ldr	r3, [pc, #276]	@ (8013d0c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 8013bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bfa:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8013bfc:	b08e      	sub	sp, #56	@ 0x38
 8013bfe:	881b      	ldrh	r3, [r3, #0]
 8013c00:	4604      	mov	r4, r0
 8013c02:	4293      	cmp	r3, r2
 8013c04:	d97e      	bls.n	8013d04 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013c06:	6808      	ldr	r0, [r1, #0]
 8013c08:	ab05      	add	r3, sp, #20
 8013c0a:	6849      	ldr	r1, [r1, #4]
 8013c0c:	4d40      	ldr	r5, [pc, #256]	@ (8013d10 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 8013c0e:	c303      	stmia	r3!, {r0, r1}
 8013c10:	4611      	mov	r1, r2
 8013c12:	6828      	ldr	r0, [r5, #0]
 8013c14:	f7f2 ff24 	bl	8006a60 <_ZNK8touchgfx5Texts7getTextEt>
 8013c18:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	db11      	blt.n	8013c44 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8013c20:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	db0d      	blt.n	8013c44 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8013c28:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8013c2a:	4298      	cmp	r0, r3
 8013c2c:	d10a      	bne.n	8013c44 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8013c2e:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 8013c32:	ab09      	add	r3, sp, #36	@ 0x24
 8013c34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013c38:	e883 0003 	stmia.w	r3, {r0, r1}
 8013c3c:	4619      	mov	r1, r3
 8013c3e:	a805      	add	r0, sp, #20
 8013c40:	f7fd f838 	bl	8010cb4 <_ZN8touchgfx4RectaNERKS0_>
 8013c44:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	dd5b      	ble.n	8013d04 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013c4c:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	dd57      	ble.n	8013d04 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013c54:	4f2f      	ldr	r7, [pc, #188]	@ (8013d14 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8013c56:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8013c58:	683b      	ldr	r3, [r7, #0]
 8013c5a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8013c5e:	4b2e      	ldr	r3, [pc, #184]	@ (8013d18 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8013c66:	2e00      	cmp	r6, #0
 8013c68:	d04c      	beq.n	8013d04 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013c6a:	6823      	ldr	r3, [r4, #0]
 8013c6c:	4620      	mov	r0, r4
 8013c6e:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
 8013c72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013c74:	4798      	blx	r3
 8013c76:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8013c78:	683b      	ldr	r3, [r7, #0]
 8013c7a:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
 8013c7e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8013c82:	f894 e038 	ldrb.w	lr, [r4, #56]	@ 0x38
 8013c86:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 8013c8a:	785b      	ldrb	r3, [r3, #1]
 8013c8c:	f894 7037 	ldrb.w	r7, [r4, #55]	@ 0x37
 8013c90:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8013c94:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013c96:	9609      	str	r6, [sp, #36]	@ 0x24
 8013c98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013c9c:	4b1f      	ldr	r3, [pc, #124]	@ (8013d1c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 8013c9e:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	f88d e02a 	strb.w	lr, [sp, #42]	@ 0x2a
 8013ca8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013caa:	f8ad c030 	strh.w	ip, [sp, #48]	@ 0x30
 8013cae:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 8013cb2:	f88d 7033 	strb.w	r7, [sp, #51]	@ 0x33
 8013cb6:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 8013cba:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8013cbe:	b10a      	cbz	r2, 8013cc4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 8013cc0:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 8013cc2:	b906      	cbnz	r6, 8013cc6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 8013cc4:	689e      	ldr	r6, [r3, #8]
 8013cc6:	af07      	add	r7, sp, #28
 8013cc8:	4621      	mov	r1, r4
 8013cca:	4638      	mov	r0, r7
 8013ccc:	f004 f880 	bl	8017dd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013cd0:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8013cd2:	6828      	ldr	r0, [r5, #0]
 8013cd4:	f7f2 fec4 	bl	8006a60 <_ZNK8touchgfx5Texts7getTextEt>
 8013cd8:	6823      	ldr	r3, [r4, #0]
 8013cda:	4605      	mov	r5, r0
 8013cdc:	4620      	mov	r0, r4
 8013cde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013ce0:	4798      	blx	r3
 8013ce2:	6823      	ldr	r3, [r4, #0]
 8013ce4:	4680      	mov	r8, r0
 8013ce6:	4620      	mov	r0, r4
 8013ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013cec:	4798      	blx	r3
 8013cee:	ab09      	add	r3, sp, #36	@ 0x24
 8013cf0:	9501      	str	r5, [sp, #4]
 8013cf2:	9300      	str	r3, [sp, #0]
 8013cf4:	ab05      	add	r3, sp, #20
 8013cf6:	e9cd 8002 	strd	r8, r0, [sp, #8]
 8013cfa:	4630      	mov	r0, r6
 8013cfc:	e897 0006 	ldmia.w	r7, {r1, r2}
 8013d00:	f7f2 fe60 	bl	80069c4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8013d04:	b00e      	add	sp, #56	@ 0x38
 8013d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d0a:	bf00      	nop
 8013d0c:	24026474 	.word	0x24026474
 8013d10:	2402647c 	.word	0x2402647c
 8013d14:	24026470 	.word	0x24026470
 8013d18:	24026478 	.word	0x24026478
 8013d1c:	24026418 	.word	0x24026418

08013d20 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8013d20:	b538      	push	{r3, r4, r5, lr}
 8013d22:	4b0e      	ldr	r3, [pc, #56]	@ (8013d5c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8013d24:	4604      	mov	r4, r0
 8013d26:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8013d28:	881b      	ldrh	r3, [r3, #0]
 8013d2a:	429a      	cmp	r2, r3
 8013d2c:	d214      	bcs.n	8013d58 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8013d2e:	6803      	ldr	r3, [r0, #0]
 8013d30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013d32:	4798      	blx	r3
 8013d34:	6823      	ldr	r3, [r4, #0]
 8013d36:	4605      	mov	r5, r0
 8013d38:	4620      	mov	r0, r4
 8013d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013d3c:	4798      	blx	r3
 8013d3e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8013d42:	b22d      	sxth	r5, r5
 8013d44:	4601      	mov	r1, r0
 8013d46:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8013d4a:	bf06      	itte	eq
 8013d4c:	4602      	moveq	r2, r0
 8013d4e:	4629      	moveq	r1, r5
 8013d50:	462a      	movne	r2, r5
 8013d52:	4620      	mov	r0, r4
 8013d54:	f7fc fd90 	bl	8010878 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8013d58:	bd38      	pop	{r3, r4, r5, pc}
 8013d5a:	bf00      	nop
 8013d5c:	24026474 	.word	0x24026474

08013d60 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8013d60:	b530      	push	{r4, r5, lr}
 8013d62:	888b      	ldrh	r3, [r1, #4]
 8013d64:	b085      	sub	sp, #20
 8013d66:	4604      	mov	r4, r0
 8013d68:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8013d6a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8013d6e:	b923      	cbnz	r3, 8013d7a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8013d70:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8013d74:	b90b      	cbnz	r3, 8013d7a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8013d76:	f7ff ffd3 	bl	8013d20 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8013d7a:	6823      	ldr	r3, [r4, #0]
 8013d7c:	466d      	mov	r5, sp
 8013d7e:	4621      	mov	r1, r4
 8013d80:	343c      	adds	r4, #60	@ 0x3c
 8013d82:	4628      	mov	r0, r5
 8013d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013d88:	4798      	blx	r3
 8013d8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8013d8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013d92:	b005      	add	sp, #20
 8013d94:	bd30      	pop	{r4, r5, pc}

08013d96 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8013d96:	2300      	movs	r3, #0
 8013d98:	8083      	strh	r3, [r0, #4]
 8013d9a:	80c3      	strh	r3, [r0, #6]
 8013d9c:	8003      	strh	r3, [r0, #0]
 8013d9e:	8043      	strh	r3, [r0, #2]
 8013da0:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 8013da4:	2bff      	cmp	r3, #255	@ 0xff
 8013da6:	bf01      	itttt	eq
 8013da8:	890b      	ldrheq	r3, [r1, #8]
 8013daa:	8083      	strheq	r3, [r0, #4]
 8013dac:	894b      	ldrheq	r3, [r1, #10]
 8013dae:	80c3      	strheq	r3, [r0, #6]
 8013db0:	4770      	bx	lr
	...

08013db4 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8013db4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013db6:	4604      	mov	r4, r0
 8013db8:	466b      	mov	r3, sp
 8013dba:	6808      	ldr	r0, [r1, #0]
 8013dbc:	6849      	ldr	r1, [r1, #4]
 8013dbe:	c303      	stmia	r3!, {r0, r1}
 8013dc0:	6823      	ldr	r3, [r4, #0]
 8013dc2:	4669      	mov	r1, sp
 8013dc4:	4620      	mov	r0, r4
 8013dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013dc8:	4798      	blx	r3
 8013dca:	4b08      	ldr	r3, [pc, #32]	@ (8013dec <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8013dd2:	b10a      	cbz	r2, 8013dd8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8013dd4:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8013dd6:	b900      	cbnz	r0, 8013dda <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8013dd8:	6898      	ldr	r0, [r3, #8]
 8013dda:	6803      	ldr	r3, [r0, #0]
 8013ddc:	4669      	mov	r1, sp
 8013dde:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8013de0:	6a1d      	ldr	r5, [r3, #32]
 8013de2:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8013de6:	47a8      	blx	r5
 8013de8:	b003      	add	sp, #12
 8013dea:	bd30      	pop	{r4, r5, pc}
 8013dec:	24026418 	.word	0x24026418

08013df0 <_ZN8touchgfx3BoxD1Ev>:
 8013df0:	4770      	bx	lr

08013df2 <_ZN8touchgfx3BoxD0Ev>:
 8013df2:	b510      	push	{r4, lr}
 8013df4:	4604      	mov	r4, r0
 8013df6:	212c      	movs	r1, #44	@ 0x2c
 8013df8:	f010 fe77 	bl	8024aea <_ZdlPvj>
 8013dfc:	4620      	mov	r0, r4
 8013dfe:	bd10      	pop	{r4, pc}

08013e00 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8013e00:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8013e04:	b12a      	cbz	r2, 8013e12 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8013e06:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8013e0a:	b112      	cbz	r2, 8013e12 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8013e0c:	6803      	ldr	r3, [r0, #0]
 8013e0e:	695b      	ldr	r3, [r3, #20]
 8013e10:	4718      	bx	r3
 8013e12:	4770      	bx	lr

08013e14 <_ZN8touchgfx6ButtonD1Ev>:
 8013e14:	4770      	bx	lr

08013e16 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8013e16:	b570      	push	{r4, r5, r6, lr}
 8013e18:	880b      	ldrh	r3, [r1, #0]
 8013e1a:	4605      	mov	r5, r0
 8013e1c:	4604      	mov	r4, r0
 8013e1e:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8013e20:	8813      	ldrh	r3, [r2, #0]
 8013e22:	f825 3f30 	strh.w	r3, [r5, #48]!
 8013e26:	4628      	mov	r0, r5
 8013e28:	f006 f89c 	bl	8019f64 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013e2c:	4606      	mov	r6, r0
 8013e2e:	4628      	mov	r0, r5
 8013e30:	f006 f8cc 	bl	8019fcc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013e34:	6823      	ldr	r3, [r4, #0]
 8013e36:	4605      	mov	r5, r0
 8013e38:	4631      	mov	r1, r6
 8013e3a:	4620      	mov	r0, r4
 8013e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e3e:	4798      	blx	r3
 8013e40:	6823      	ldr	r3, [r4, #0]
 8013e42:	4629      	mov	r1, r5
 8013e44:	4620      	mov	r0, r4
 8013e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013e48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013e4c:	4718      	bx	r3

08013e4e <_ZN8touchgfx6ButtonD0Ev>:
 8013e4e:	b510      	push	{r4, lr}
 8013e50:	4604      	mov	r4, r0
 8013e52:	2134      	movs	r1, #52	@ 0x34
 8013e54:	f010 fe49 	bl	8024aea <_ZdlPvj>
 8013e58:	4620      	mov	r0, r4
 8013e5a:	bd10      	pop	{r4, pc}

08013e5c <_ZNK8touchgfx6Button12getSolidRectEv>:
 8013e5c:	b510      	push	{r4, lr}
 8013e5e:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 8013e62:	4604      	mov	r4, r0
 8013e64:	2bff      	cmp	r3, #255	@ 0xff
 8013e66:	d006      	beq.n	8013e76 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8013e68:	2300      	movs	r3, #0
 8013e6a:	8003      	strh	r3, [r0, #0]
 8013e6c:	8043      	strh	r3, [r0, #2]
 8013e6e:	8083      	strh	r3, [r0, #4]
 8013e70:	80c3      	strh	r3, [r0, #6]
 8013e72:	4620      	mov	r0, r4
 8013e74:	bd10      	pop	{r4, pc}
 8013e76:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 8013e7a:	b11b      	cbz	r3, 8013e84 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8013e7c:	3130      	adds	r1, #48	@ 0x30
 8013e7e:	f006 f8d9 	bl	801a034 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8013e82:	e7f6      	b.n	8013e72 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8013e84:	312e      	adds	r1, #46	@ 0x2e
 8013e86:	e7fa      	b.n	8013e7e <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

08013e88 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8013e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e8c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8013e90:	b08a      	sub	sp, #40	@ 0x28
 8013e92:	4604      	mov	r4, r0
 8013e94:	4688      	mov	r8, r1
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d066      	beq.n	8013f68 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8013e9a:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8013e9c:	a805      	add	r0, sp, #20
 8013e9e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013ea2:	f006 f85f 	bl	8019f64 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013ea6:	4607      	mov	r7, r0
 8013ea8:	a805      	add	r0, sp, #20
 8013eaa:	f006 f88f 	bl	8019fcc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013eae:	f9b8 6000 	ldrsh.w	r6, [r8]
 8013eb2:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8013eb6:	2300      	movs	r3, #0
 8013eb8:	4432      	add	r2, r6
 8013eba:	9306      	str	r3, [sp, #24]
 8013ebc:	b292      	uxth	r2, r2
 8013ebe:	fa0f fc82 	sxth.w	ip, r2
 8013ec2:	459c      	cmp	ip, r3
 8013ec4:	dd52      	ble.n	8013f6c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8013ec6:	42b7      	cmp	r7, r6
 8013ec8:	dd50      	ble.n	8013f6c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8013eca:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8013ece:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8013ed2:	442b      	add	r3, r5
 8013ed4:	b29b      	uxth	r3, r3
 8013ed6:	b219      	sxth	r1, r3
 8013ed8:	2900      	cmp	r1, #0
 8013eda:	dd47      	ble.n	8013f6c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8013edc:	42a8      	cmp	r0, r5
 8013ede:	dd45      	ble.n	8013f6c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8013ee0:	4567      	cmp	r7, ip
 8013ee2:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8013ee6:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8013eea:	bfb8      	it	lt
 8013eec:	b2ba      	uxthlt	r2, r7
 8013eee:	4288      	cmp	r0, r1
 8013ef0:	f8ad 6018 	strh.w	r6, [sp, #24]
 8013ef4:	bfb8      	it	lt
 8013ef6:	b283      	uxthlt	r3, r0
 8013ef8:	1b92      	subs	r2, r2, r6
 8013efa:	f8ad 501a 	strh.w	r5, [sp, #26]
 8013efe:	1b5b      	subs	r3, r3, r5
 8013f00:	f8ad 201c 	strh.w	r2, [sp, #28]
 8013f04:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013f08:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8013f0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013f10:	429a      	cmp	r2, r3
 8013f12:	d026      	beq.n	8013f62 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8013f14:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	dd22      	ble.n	8013f62 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8013f1c:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	dd1e      	ble.n	8013f62 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8013f24:	2300      	movs	r3, #0
 8013f26:	a908      	add	r1, sp, #32
 8013f28:	4620      	mov	r0, r4
 8013f2a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8013f2e:	6823      	ldr	r3, [r4, #0]
 8013f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f32:	4798      	blx	r3
 8013f34:	4b0f      	ldr	r3, [pc, #60]	@ (8013f74 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8013f3c:	b10a      	cbz	r2, 8013f42 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8013f3e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8013f40:	b900      	cbnz	r0, 8013f44 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 8013f42:	6898      	ldr	r0, [r3, #8]
 8013f44:	2501      	movs	r5, #1
 8013f46:	6801      	ldr	r1, [r0, #0]
 8013f48:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8013f4c:	9502      	str	r5, [sp, #8]
 8013f4e:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 8013f52:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8013f56:	9401      	str	r4, [sp, #4]
 8013f58:	ac06      	add	r4, sp, #24
 8013f5a:	9400      	str	r4, [sp, #0]
 8013f5c:	688c      	ldr	r4, [r1, #8]
 8013f5e:	a905      	add	r1, sp, #20
 8013f60:	47a0      	blx	r4
 8013f62:	b00a      	add	sp, #40	@ 0x28
 8013f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f68:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8013f6a:	e797      	b.n	8013e9c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8013f6c:	2300      	movs	r3, #0
 8013f6e:	9307      	str	r3, [sp, #28]
 8013f70:	e7ca      	b.n	8013f08 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 8013f72:	bf00      	nop
 8013f74:	24026418 	.word	0x24026418

08013f78 <_ZNK8touchgfx6Button17invalidateContentEv>:
 8013f78:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 8013f7c:	b12a      	cbz	r2, 8013f8a <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8013f7e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8013f82:	b112      	cbz	r2, 8013f8a <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8013f84:	6803      	ldr	r3, [r0, #0]
 8013f86:	695b      	ldr	r3, [r3, #20]
 8013f88:	4718      	bx	r3
 8013f8a:	4770      	bx	lr

08013f8c <_ZN8touchgfx5ImageD1Ev>:
 8013f8c:	4770      	bx	lr

08013f8e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8013f8e:	b570      	push	{r4, r5, r6, lr}
 8013f90:	880b      	ldrh	r3, [r1, #0]
 8013f92:	460d      	mov	r5, r1
 8013f94:	4604      	mov	r4, r0
 8013f96:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8013f98:	4608      	mov	r0, r1
 8013f9a:	f005 ffe3 	bl	8019f64 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013f9e:	4606      	mov	r6, r0
 8013fa0:	4628      	mov	r0, r5
 8013fa2:	f006 f813 	bl	8019fcc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013fa6:	6823      	ldr	r3, [r4, #0]
 8013fa8:	4605      	mov	r5, r0
 8013faa:	4631      	mov	r1, r6
 8013fac:	4620      	mov	r0, r4
 8013fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013fb0:	4798      	blx	r3
 8013fb2:	6823      	ldr	r3, [r4, #0]
 8013fb4:	4629      	mov	r1, r5
 8013fb6:	4620      	mov	r0, r4
 8013fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013fba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013fbe:	4718      	bx	r3

08013fc0 <_ZN8touchgfx5ImageD0Ev>:
 8013fc0:	b510      	push	{r4, lr}
 8013fc2:	4604      	mov	r4, r0
 8013fc4:	212c      	movs	r1, #44	@ 0x2c
 8013fc6:	f010 fd90 	bl	8024aea <_ZdlPvj>
 8013fca:	4620      	mov	r0, r4
 8013fcc:	bd10      	pop	{r4, pc}

08013fce <_ZNK8touchgfx5Image12getSolidRectEv>:
 8013fce:	b510      	push	{r4, lr}
 8013fd0:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8013fd4:	4604      	mov	r4, r0
 8013fd6:	2bff      	cmp	r3, #255	@ 0xff
 8013fd8:	d006      	beq.n	8013fe8 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8013fda:	2300      	movs	r3, #0
 8013fdc:	8003      	strh	r3, [r0, #0]
 8013fde:	8043      	strh	r3, [r0, #2]
 8013fe0:	8083      	strh	r3, [r0, #4]
 8013fe2:	80c3      	strh	r3, [r0, #6]
 8013fe4:	4620      	mov	r0, r4
 8013fe6:	bd10      	pop	{r4, pc}
 8013fe8:	3126      	adds	r1, #38	@ 0x26
 8013fea:	f006 f823 	bl	801a034 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8013fee:	e7f9      	b.n	8013fe4 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08013ff0 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8013ff0:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 8013ff4:	b12a      	cbz	r2, 8014002 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8013ff6:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8013ffa:	b112      	cbz	r2, 8014002 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8013ffc:	6803      	ldr	r3, [r0, #0]
 8013ffe:	695b      	ldr	r3, [r3, #20]
 8014000:	4718      	bx	r3
 8014002:	4770      	bx	lr

08014004 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8014004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014008:	4604      	mov	r4, r0
 801400a:	b088      	sub	sp, #32
 801400c:	2500      	movs	r5, #0
 801400e:	460f      	mov	r7, r1
 8014010:	f854 3b26 	ldr.w	r3, [r4], #38
 8014014:	a904      	add	r1, sp, #16
 8014016:	4606      	mov	r6, r0
 8014018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801401a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801401e:	4798      	blx	r3
 8014020:	4620      	mov	r0, r4
 8014022:	f005 ff9f 	bl	8019f64 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014026:	4680      	mov	r8, r0
 8014028:	4620      	mov	r0, r4
 801402a:	f005 ffcf 	bl	8019fcc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801402e:	9506      	str	r5, [sp, #24]
 8014030:	ad06      	add	r5, sp, #24
 8014032:	f8ad 001e 	strh.w	r0, [sp, #30]
 8014036:	4639      	mov	r1, r7
 8014038:	f8ad 801c 	strh.w	r8, [sp, #28]
 801403c:	4628      	mov	r0, r5
 801403e:	f7fc fe39 	bl	8010cb4 <_ZN8touchgfx4RectaNERKS0_>
 8014042:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8014046:	2b00      	cmp	r3, #0
 8014048:	dd19      	ble.n	801407e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801404a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801404e:	2b00      	cmp	r3, #0
 8014050:	dd15      	ble.n	801407e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8014052:	4b0c      	ldr	r3, [pc, #48]	@ (8014084 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801405a:	b10a      	cbz	r2, 8014060 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 801405c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801405e:	b900      	cbnz	r0, 8014062 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8014060:	6898      	ldr	r0, [r3, #8]
 8014062:	2701      	movs	r7, #1
 8014064:	6801      	ldr	r1, [r0, #0]
 8014066:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801406a:	9702      	str	r7, [sp, #8]
 801406c:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 8014070:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8014074:	e9cd 5600 	strd	r5, r6, [sp]
 8014078:	688d      	ldr	r5, [r1, #8]
 801407a:	4621      	mov	r1, r4
 801407c:	47a8      	blx	r5
 801407e:	b008      	add	sp, #32
 8014080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014084:	24026418 	.word	0x24026418

08014088 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
 8014088:	4770      	bx	lr

0801408a <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 801408a:	b510      	push	{r4, lr}
 801408c:	4604      	mov	r4, r0
 801408e:	2148      	movs	r1, #72	@ 0x48
 8014090:	f010 fd2b 	bl	8024aea <_ZdlPvj>
 8014094:	4620      	mov	r0, r4
 8014096:	bd10      	pop	{r4, pc}

08014098 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 8014098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801409c:	b08d      	sub	sp, #52	@ 0x34
 801409e:	4604      	mov	r4, r0
 80140a0:	460f      	mov	r7, r1
 80140a2:	f7ff fef1 	bl	8013e88 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 80140a6:	4a55      	ldr	r2, [pc, #340]	@ (80141fc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x164>)
 80140a8:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80140aa:	8812      	ldrh	r2, [r2, #0]
 80140ac:	429a      	cmp	r2, r3
 80140ae:	f240 8082 	bls.w	80141b6 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 80140b2:	4d53      	ldr	r5, [pc, #332]	@ (8014200 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>)
 80140b4:	682a      	ldr	r2, [r5, #0]
 80140b6:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80140ba:	4b52      	ldr	r3, [pc, #328]	@ (8014204 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x16c>)
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80140c2:	2200      	movs	r2, #0
 80140c4:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	@ 0x46
 80140c8:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80140cc:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 80140d0:	2a03      	cmp	r2, #3
 80140d2:	d811      	bhi.n	80140f8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 80140d4:	e8df f002 	tbb	[pc, r2]
 80140d8:	89727902 	.word	0x89727902
 80140dc:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80140e0:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80140e4:	1ad2      	subs	r2, r2, r3
 80140e6:	2002      	movs	r0, #2
 80140e8:	f8ad 1010 	strh.w	r1, [sp, #16]
 80140ec:	f8ad 3012 	strh.w	r3, [sp, #18]
 80140f0:	fb92 f2f0 	sdiv	r2, r2, r0
 80140f4:	f8ad 200e 	strh.w	r2, [sp, #14]
 80140f8:	f10d 080c 	add.w	r8, sp, #12
 80140fc:	f10d 0914 	add.w	r9, sp, #20
 8014100:	e898 0003 	ldmia.w	r8, {r0, r1}
 8014104:	e889 0003 	stmia.w	r9, {r0, r1}
 8014108:	4639      	mov	r1, r7
 801410a:	4648      	mov	r0, r9
 801410c:	f7fc fdd2 	bl	8010cb4 <_ZN8touchgfx4RectaNERKS0_>
 8014110:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8014114:	2b00      	cmp	r3, #0
 8014116:	dd4e      	ble.n	80141b6 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8014118:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801411c:	2b00      	cmp	r3, #0
 801411e:	dd4a      	ble.n	80141b6 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8014120:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8014124:	4641      	mov	r1, r8
 8014126:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801412a:	4620      	mov	r0, r4
 801412c:	1a9b      	subs	r3, r3, r2
 801412e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8014132:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014136:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801413a:	1a9b      	subs	r3, r3, r2
 801413c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014140:	6823      	ldr	r3, [r4, #0]
 8014142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014144:	4798      	blx	r3
 8014146:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801414a:	2b00      	cmp	r3, #0
 801414c:	d053      	beq.n	80141f6 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x15e>
 801414e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8014150:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 8014152:	682b      	ldr	r3, [r5, #0]
 8014154:	f894 0032 	ldrb.w	r0, [r4, #50]	@ 0x32
 8014158:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801415c:	f894 4044 	ldrb.w	r4, [r4, #68]	@ 0x44
 8014160:	785b      	ldrb	r3, [r3, #1]
 8014162:	9209      	str	r2, [sp, #36]	@ 0x24
 8014164:	f3c3 0501 	ubfx	r5, r3, #0, #2
 8014168:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801416c:	9607      	str	r6, [sp, #28]
 801416e:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 8014172:	2300      	movs	r3, #0
 8014174:	f88d 5020 	strb.w	r5, [sp, #32]
 8014178:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 801417c:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 8014180:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8014184:	4b20      	ldr	r3, [pc, #128]	@ (8014208 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 8014186:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8014190:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8014194:	b10a      	cbz	r2, 801419a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x102>
 8014196:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8014198:	b904      	cbnz	r4, 801419c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x104>
 801419a:	689c      	ldr	r4, [r3, #8]
 801419c:	4b1b      	ldr	r3, [pc, #108]	@ (801420c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 801419e:	6818      	ldr	r0, [r3, #0]
 80141a0:	f7f2 fc5e 	bl	8006a60 <_ZNK8touchgfx5Texts7getTextEt>
 80141a4:	ab07      	add	r3, sp, #28
 80141a6:	9001      	str	r0, [sp, #4]
 80141a8:	4620      	mov	r0, r4
 80141aa:	9300      	str	r3, [sp, #0]
 80141ac:	464b      	mov	r3, r9
 80141ae:	e898 0006 	ldmia.w	r8, {r1, r2}
 80141b2:	f7f2 fc07 	bl	80069c4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80141b6:	b00d      	add	sp, #52	@ 0x34
 80141b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80141bc:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80141c0:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80141c4:	1ad2      	subs	r2, r2, r3
 80141c6:	3201      	adds	r2, #1
 80141c8:	e78d      	b.n	80140e6 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x4e>
 80141ca:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80141ce:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 80141d2:	1ad2      	subs	r2, r2, r3
 80141d4:	3201      	adds	r2, #1
 80141d6:	2002      	movs	r0, #2
 80141d8:	f8ad 3010 	strh.w	r3, [sp, #16]
 80141dc:	f8ad 1012 	strh.w	r1, [sp, #18]
 80141e0:	fb92 f2f0 	sdiv	r2, r2, r0
 80141e4:	f8ad 200c 	strh.w	r2, [sp, #12]
 80141e8:	e786      	b.n	80140f8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 80141ea:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80141ee:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 80141f2:	1ad2      	subs	r2, r2, r3
 80141f4:	e7ef      	b.n	80141d6 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x13e>
 80141f6:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80141f8:	e7aa      	b.n	8014150 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xb8>
 80141fa:	bf00      	nop
 80141fc:	24026474 	.word	0x24026474
 8014200:	24026470 	.word	0x24026470
 8014204:	24026478 	.word	0x24026478
 8014208:	24026418 	.word	0x24026418
 801420c:	2402647c 	.word	0x2402647c

08014210 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 8014210:	2101      	movs	r1, #1
 8014212:	2200      	movs	r2, #0
 8014214:	b510      	push	{r4, lr}
 8014216:	4c13      	ldr	r4, [pc, #76]	@ (8014264 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 8014218:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 801421c:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8014220:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8014224:	6004      	str	r4, [r0, #0]
 8014226:	4c10      	ldr	r4, [pc, #64]	@ (8014268 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 8014228:	8082      	strh	r2, [r0, #4]
 801422a:	80c2      	strh	r2, [r0, #6]
 801422c:	8102      	strh	r2, [r0, #8]
 801422e:	8142      	strh	r2, [r0, #10]
 8014230:	8182      	strh	r2, [r0, #12]
 8014232:	81c2      	strh	r2, [r0, #14]
 8014234:	8202      	strh	r2, [r0, #16]
 8014236:	8242      	strh	r2, [r0, #18]
 8014238:	61c2      	str	r2, [r0, #28]
 801423a:	8402      	strh	r2, [r0, #32]
 801423c:	8442      	strh	r2, [r0, #34]	@ 0x22
 801423e:	6282      	str	r2, [r0, #40]	@ 0x28
 8014240:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
 8014244:	85c1      	strh	r1, [r0, #46]	@ 0x2e
 8014246:	8601      	strh	r1, [r0, #48]	@ 0x30
 8014248:	f880 1032 	strb.w	r1, [r0, #50]	@ 0x32
 801424c:	6344      	str	r4, [r0, #52]	@ 0x34
 801424e:	8701      	strh	r1, [r0, #56]	@ 0x38
 8014250:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8014254:	f8a0 2046 	strh.w	r2, [r0, #70]	@ 0x46
 8014258:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801425c:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8014260:	bd10      	pop	{r4, pc}
 8014262:	bf00      	nop
 8014264:	08029760 	.word	0x08029760
 8014268:	08027f50 	.word	0x08027f50

0801426c <_ZN8touchgfx11RadioButtonD1Ev>:
 801426c:	4770      	bx	lr

0801426e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>:
 801426e:	b570      	push	{r4, r5, r6, lr}
 8014270:	8809      	ldrh	r1, [r1, #0]
 8014272:	f100 052e 	add.w	r5, r0, #46	@ 0x2e
 8014276:	4604      	mov	r4, r0
 8014278:	85c1      	strh	r1, [r0, #46]	@ 0x2e
 801427a:	8812      	ldrh	r2, [r2, #0]
 801427c:	8602      	strh	r2, [r0, #48]	@ 0x30
 801427e:	881b      	ldrh	r3, [r3, #0]
 8014280:	8643      	strh	r3, [r0, #50]	@ 0x32
 8014282:	9b04      	ldr	r3, [sp, #16]
 8014284:	881b      	ldrh	r3, [r3, #0]
 8014286:	8683      	strh	r3, [r0, #52]	@ 0x34
 8014288:	4628      	mov	r0, r5
 801428a:	f005 fe6b 	bl	8019f64 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801428e:	4606      	mov	r6, r0
 8014290:	4628      	mov	r0, r5
 8014292:	f005 fe9b 	bl	8019fcc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014296:	6823      	ldr	r3, [r4, #0]
 8014298:	4605      	mov	r5, r0
 801429a:	4631      	mov	r1, r6
 801429c:	4620      	mov	r0, r4
 801429e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80142a0:	4798      	blx	r3
 80142a2:	6823      	ldr	r3, [r4, #0]
 80142a4:	4629      	mov	r1, r5
 80142a6:	4620      	mov	r0, r4
 80142a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80142aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80142ae:	4718      	bx	r3

080142b0 <_ZN8touchgfx11RadioButtonD0Ev>:
 80142b0:	b510      	push	{r4, lr}
 80142b2:	4604      	mov	r4, r0
 80142b4:	2140      	movs	r1, #64	@ 0x40
 80142b6:	f010 fc18 	bl	8024aea <_ZdlPvj>
 80142ba:	4620      	mov	r0, r4
 80142bc:	bd10      	pop	{r4, pc}

080142be <_ZNK8touchgfx11RadioButton17invalidateContentEv>:
 80142be:	f890 2036 	ldrb.w	r2, [r0, #54]	@ 0x36
 80142c2:	b12a      	cbz	r2, 80142d0 <_ZNK8touchgfx11RadioButton17invalidateContentEv+0x12>
 80142c4:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80142c8:	b112      	cbz	r2, 80142d0 <_ZNK8touchgfx11RadioButton17invalidateContentEv+0x12>
 80142ca:	6803      	ldr	r3, [r0, #0]
 80142cc:	695b      	ldr	r3, [r3, #20]
 80142ce:	4718      	bx	r3
 80142d0:	4770      	bx	lr

080142d2 <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv>:
 80142d2:	f890 2037 	ldrb.w	r2, [r0, #55]	@ 0x37
 80142d6:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80142da:	b122      	cbz	r2, 80142e6 <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv+0x14>
 80142dc:	b10b      	cbz	r3, 80142e2 <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv+0x10>
 80142de:	8e80      	ldrh	r0, [r0, #52]	@ 0x34
 80142e0:	4770      	bx	lr
 80142e2:	8e40      	ldrh	r0, [r0, #50]	@ 0x32
 80142e4:	4770      	bx	lr
 80142e6:	b10b      	cbz	r3, 80142ec <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv+0x1a>
 80142e8:	8e00      	ldrh	r0, [r0, #48]	@ 0x30
 80142ea:	4770      	bx	lr
 80142ec:	8dc0      	ldrh	r0, [r0, #46]	@ 0x2e
 80142ee:	4770      	bx	lr

080142f0 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE>:
 80142f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142f2:	b08b      	sub	sp, #44	@ 0x2c
 80142f4:	4604      	mov	r4, r0
 80142f6:	460e      	mov	r6, r1
 80142f8:	f7ff ffeb 	bl	80142d2 <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv>
 80142fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014300:	f8ad 0014 	strh.w	r0, [sp, #20]
 8014304:	b280      	uxth	r0, r0
 8014306:	4298      	cmp	r0, r3
 8014308:	d036      	beq.n	8014378 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x88>
 801430a:	2500      	movs	r5, #0
 801430c:	6823      	ldr	r3, [r4, #0]
 801430e:	a906      	add	r1, sp, #24
 8014310:	4620      	mov	r0, r4
 8014312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014314:	e9cd 5506 	strd	r5, r5, [sp, #24]
 8014318:	4798      	blx	r3
 801431a:	a805      	add	r0, sp, #20
 801431c:	f005 fe22 	bl	8019f64 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014320:	4607      	mov	r7, r0
 8014322:	a805      	add	r0, sp, #20
 8014324:	f005 fe52 	bl	8019fcc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014328:	9508      	str	r5, [sp, #32]
 801432a:	ad08      	add	r5, sp, #32
 801432c:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 8014330:	4631      	mov	r1, r6
 8014332:	f8ad 7024 	strh.w	r7, [sp, #36]	@ 0x24
 8014336:	4628      	mov	r0, r5
 8014338:	f7fc fcbc 	bl	8010cb4 <_ZN8touchgfx4RectaNERKS0_>
 801433c:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8014340:	2b00      	cmp	r3, #0
 8014342:	dd19      	ble.n	8014378 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x88>
 8014344:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	@ 0x26
 8014348:	2b00      	cmp	r3, #0
 801434a:	dd15      	ble.n	8014378 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x88>
 801434c:	4b0b      	ldr	r3, [pc, #44]	@ (801437c <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x8c>)
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8014354:	b10a      	cbz	r2, 801435a <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x6a>
 8014356:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8014358:	b900      	cbnz	r0, 801435c <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x6c>
 801435a:	6898      	ldr	r0, [r3, #8]
 801435c:	2601      	movs	r6, #1
 801435e:	6801      	ldr	r1, [r0, #0]
 8014360:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8014364:	9602      	str	r6, [sp, #8]
 8014366:	f894 4036 	ldrb.w	r4, [r4, #54]	@ 0x36
 801436a:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801436e:	e9cd 5400 	strd	r5, r4, [sp]
 8014372:	688c      	ldr	r4, [r1, #8]
 8014374:	a905      	add	r1, sp, #20
 8014376:	47a0      	blx	r4
 8014378:	b00b      	add	sp, #44	@ 0x2c
 801437a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801437c:	24026418 	.word	0x24026418

08014380 <_ZNK8touchgfx11RadioButton12getSolidRectEv>:
 8014380:	b513      	push	{r0, r1, r4, lr}
 8014382:	f891 3036 	ldrb.w	r3, [r1, #54]	@ 0x36
 8014386:	4604      	mov	r4, r0
 8014388:	2bff      	cmp	r3, #255	@ 0xff
 801438a:	d007      	beq.n	801439c <_ZNK8touchgfx11RadioButton12getSolidRectEv+0x1c>
 801438c:	2300      	movs	r3, #0
 801438e:	8003      	strh	r3, [r0, #0]
 8014390:	8043      	strh	r3, [r0, #2]
 8014392:	8083      	strh	r3, [r0, #4]
 8014394:	80c3      	strh	r3, [r0, #6]
 8014396:	4620      	mov	r0, r4
 8014398:	b002      	add	sp, #8
 801439a:	bd10      	pop	{r4, pc}
 801439c:	4608      	mov	r0, r1
 801439e:	f7ff ff98 	bl	80142d2 <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv>
 80143a2:	a902      	add	r1, sp, #8
 80143a4:	f821 0d04 	strh.w	r0, [r1, #-4]!
 80143a8:	4620      	mov	r0, r4
 80143aa:	f005 fe43 	bl	801a034 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80143ae:	e7f2      	b.n	8014396 <_ZNK8touchgfx11RadioButton12getSolidRectEv+0x16>

080143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>:
 80143b0:	b510      	push	{r4, lr}
 80143b2:	f890 3037 	ldrb.w	r3, [r0, #55]	@ 0x37
 80143b6:	4604      	mov	r4, r0
 80143b8:	f880 1037 	strb.w	r1, [r0, #55]	@ 0x37
 80143bc:	b18b      	cbz	r3, 80143e2 <_ZN8touchgfx11RadioButton11setSelectedEb+0x32>
 80143be:	b951      	cbnz	r1, 80143d6 <_ZN8touchgfx11RadioButton11setSelectedEb+0x26>
 80143c0:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 80143c2:	b140      	cbz	r0, 80143d6 <_ZN8touchgfx11RadioButton11setSelectedEb+0x26>
 80143c4:	6803      	ldr	r3, [r0, #0]
 80143c6:	68db      	ldr	r3, [r3, #12]
 80143c8:	4798      	blx	r3
 80143ca:	b120      	cbz	r0, 80143d6 <_ZN8touchgfx11RadioButton11setSelectedEb+0x26>
 80143cc:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80143ce:	4621      	mov	r1, r4
 80143d0:	6803      	ldr	r3, [r0, #0]
 80143d2:	689b      	ldr	r3, [r3, #8]
 80143d4:	4798      	blx	r3
 80143d6:	6823      	ldr	r3, [r4, #0]
 80143d8:	4620      	mov	r0, r4
 80143da:	695b      	ldr	r3, [r3, #20]
 80143dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80143e0:	4718      	bx	r3
 80143e2:	2900      	cmp	r1, #0
 80143e4:	d0f7      	beq.n	80143d6 <_ZN8touchgfx11RadioButton11setSelectedEb+0x26>
 80143e6:	6823      	ldr	r3, [r4, #0]
 80143e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80143ea:	4798      	blx	r3
 80143ec:	e7f3      	b.n	80143d6 <_ZN8touchgfx11RadioButton11setSelectedEb+0x26>

080143ee <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE>:
 80143ee:	b570      	push	{r4, r5, r6, lr}
 80143f0:	790b      	ldrb	r3, [r1, #4]
 80143f2:	4604      	mov	r4, r0
 80143f4:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 80143f8:	460e      	mov	r6, r1
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	bf0c      	ite	eq
 80143fe:	2301      	moveq	r3, #1
 8014400:	2300      	movne	r3, #0
 8014402:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8014406:	d10f      	bne.n	8014428 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x3a>
 8014408:	b17d      	cbz	r5, 801442a <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801440a:	7931      	ldrb	r1, [r6, #4]
 801440c:	2901      	cmp	r1, #1
 801440e:	d112      	bne.n	8014436 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x48>
 8014410:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8014414:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 8014418:	b172      	cbz	r2, 8014438 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801441a:	f083 0101 	eor.w	r1, r3, #1
 801441e:	4620      	mov	r0, r4
 8014420:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014424:	f7ff bfc4 	b.w	80143b0 <_ZN8touchgfx11RadioButton11setSelectedEb>
 8014428:	b12d      	cbz	r5, 8014436 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x48>
 801442a:	6823      	ldr	r3, [r4, #0]
 801442c:	4620      	mov	r0, r4
 801442e:	695b      	ldr	r3, [r3, #20]
 8014430:	4798      	blx	r3
 8014432:	2d00      	cmp	r5, #0
 8014434:	d1e9      	bne.n	801440a <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8014436:	bd70      	pop	{r4, r5, r6, pc}
 8014438:	2b00      	cmp	r3, #0
 801443a:	d1fc      	bne.n	8014436 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x48>
 801443c:	e7ef      	b.n	801441e <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x30>

0801443e <_ZN8touchgfx7OutlineD1Ev>:
 801443e:	4770      	bx	lr

08014440 <_ZN8touchgfx7OutlineD0Ev>:
 8014440:	b510      	push	{r4, lr}
 8014442:	4604      	mov	r4, r0
 8014444:	2130      	movs	r1, #48	@ 0x30
 8014446:	f010 fb50 	bl	8024aea <_ZdlPvj>
 801444a:	4620      	mov	r0, r4
 801444c:	bd10      	pop	{r4, pc}

0801444e <_ZN8touchgfx7Outline5resetEv>:
 801444e:	b510      	push	{r4, lr}
 8014450:	4604      	mov	r4, r0
 8014452:	f000 fe71 	bl	8015138 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8014456:	60e0      	str	r0, [r4, #12]
 8014458:	f000 fe74 	bl	8015144 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 801445c:	68e3      	ldr	r3, [r4, #12]
 801445e:	08c0      	lsrs	r0, r0, #3
 8014460:	2200      	movs	r2, #0
 8014462:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8014466:	6123      	str	r3, [r4, #16]
 8014468:	3801      	subs	r0, #1
 801446a:	60a2      	str	r2, [r4, #8]
 801446c:	6060      	str	r0, [r4, #4]
 801446e:	8019      	strh	r1, [r3, #0]
 8014470:	8059      	strh	r1, [r3, #2]
 8014472:	809a      	strh	r2, [r3, #4]
 8014474:	80da      	strh	r2, [r3, #6]
 8014476:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8014478:	f023 0301 	bic.w	r3, r3, #1
 801447c:	f043 0302 	orr.w	r3, r3, #2
 8014480:	6263      	str	r3, [r4, #36]	@ 0x24
 8014482:	bd10      	pop	{r4, pc}

08014484 <_ZN8touchgfx7OutlineC1Ev>:
 8014484:	4b0a      	ldr	r3, [pc, #40]	@ (80144b0 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8014486:	b510      	push	{r4, lr}
 8014488:	6003      	str	r3, [r0, #0]
 801448a:	2300      	movs	r3, #0
 801448c:	4604      	mov	r4, r0
 801448e:	6243      	str	r3, [r0, #36]	@ 0x24
 8014490:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8014494:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014498:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801449c:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80144a0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80144a4:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 80144a8:	f7ff ffd1 	bl	801444e <_ZN8touchgfx7Outline5resetEv>
 80144ac:	4620      	mov	r0, r4
 80144ae:	bd10      	pop	{r4, pc}
 80144b0:	08029848 	.word	0x08029848

080144b4 <_ZN8touchgfx7Outline10renderLineEiiii>:
 80144b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144b8:	b093      	sub	sp, #76	@ 0x4c
 80144ba:	1156      	asrs	r6, r2, #5
 80144bc:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80144be:	9305      	str	r3, [sp, #20]
 80144c0:	1153      	asrs	r3, r2, #5
 80144c2:	f004 051f 	and.w	r5, r4, #31
 80144c6:	9303      	str	r3, [sp, #12]
 80144c8:	1163      	asrs	r3, r4, #5
 80144ca:	9504      	str	r5, [sp, #16]
 80144cc:	1165      	asrs	r5, r4, #5
 80144ce:	9306      	str	r3, [sp, #24]
 80144d0:	f002 031f 	and.w	r3, r2, #31
 80144d4:	42ae      	cmp	r6, r5
 80144d6:	f040 80f4 	bne.w	80146c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 80144da:	9c04      	ldr	r4, [sp, #16]
 80144dc:	9a05      	ldr	r2, [sp, #20]
 80144de:	42a3      	cmp	r3, r4
 80144e0:	ea4f 1e62 	mov.w	lr, r2, asr #5
 80144e4:	6902      	ldr	r2, [r0, #16]
 80144e6:	d125      	bne.n	8014534 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 80144e8:	f9b2 3000 	ldrsh.w	r3, [r2]
 80144ec:	459e      	cmp	lr, r3
 80144ee:	d103      	bne.n	80144f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 80144f0:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80144f4:	429e      	cmp	r6, r3
 80144f6:	d035      	beq.n	8014564 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80144f8:	88d1      	ldrh	r1, [r2, #6]
 80144fa:	8893      	ldrh	r3, [r2, #4]
 80144fc:	430b      	orrs	r3, r1
 80144fe:	d010      	beq.n	8014522 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8014500:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8014504:	2b00      	cmp	r3, #0
 8014506:	db0c      	blt.n	8014522 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8014508:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801450a:	428b      	cmp	r3, r1
 801450c:	da09      	bge.n	8014522 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801450e:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8014512:	428b      	cmp	r3, r1
 8014514:	f103 0301 	add.w	r3, r3, #1
 8014518:	bf38      	it	cc
 801451a:	3208      	addcc	r2, #8
 801451c:	6083      	str	r3, [r0, #8]
 801451e:	bf38      	it	cc
 8014520:	6102      	strcc	r2, [r0, #16]
 8014522:	6903      	ldr	r3, [r0, #16]
 8014524:	9a03      	ldr	r2, [sp, #12]
 8014526:	f8a3 e000 	strh.w	lr, [r3]
 801452a:	805a      	strh	r2, [r3, #2]
 801452c:	2200      	movs	r2, #0
 801452e:	809a      	strh	r2, [r3, #4]
 8014530:	80da      	strh	r2, [r3, #6]
 8014532:	e017      	b.n	8014564 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8014534:	9c05      	ldr	r4, [sp, #20]
 8014536:	114e      	asrs	r6, r1, #5
 8014538:	f001 0c1f 	and.w	ip, r1, #31
 801453c:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8014540:	f004 041f 	and.w	r4, r4, #31
 8014544:	4576      	cmp	r6, lr
 8014546:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 801454a:	9402      	str	r4, [sp, #8]
 801454c:	9c04      	ldr	r4, [sp, #16]
 801454e:	eba4 0403 	sub.w	r4, r4, r3
 8014552:	d10a      	bne.n	801456a <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 8014554:	9b02      	ldr	r3, [sp, #8]
 8014556:	44a0      	add	r8, r4
 8014558:	449c      	add	ip, r3
 801455a:	f8a2 8004 	strh.w	r8, [r2, #4]
 801455e:	fb04 a40c 	mla	r4, r4, ip, sl
 8014562:	80d4      	strh	r4, [r2, #6]
 8014564:	b013      	add	sp, #76	@ 0x4c
 8014566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801456a:	9d05      	ldr	r5, [sp, #20]
 801456c:	1a69      	subs	r1, r5, r1
 801456e:	bf51      	iteee	pl
 8014570:	f1cc 0520 	rsbpl	r5, ip, #32
 8014574:	fb04 f40c 	mulmi.w	r4, r4, ip
 8014578:	4249      	negmi	r1, r1
 801457a:	2500      	movmi	r5, #0
 801457c:	bf5d      	ittte	pl
 801457e:	436c      	mulpl	r4, r5
 8014580:	2520      	movpl	r5, #32
 8014582:	f04f 0901 	movpl.w	r9, #1
 8014586:	f04f 39ff 	movmi.w	r9, #4294967295
 801458a:	9501      	str	r5, [sp, #4]
 801458c:	9f01      	ldr	r7, [sp, #4]
 801458e:	444e      	add	r6, r9
 8014590:	fb94 f5f1 	sdiv	r5, r4, r1
 8014594:	fb01 4415 	mls	r4, r1, r5, r4
 8014598:	44bc      	add	ip, r7
 801459a:	2c00      	cmp	r4, #0
 801459c:	bfbc      	itt	lt
 801459e:	f105 35ff 	addlt.w	r5, r5, #4294967295
 80145a2:	1864      	addlt	r4, r4, r1
 80145a4:	44a8      	add	r8, r5
 80145a6:	fb05 ac0c 	mla	ip, r5, ip, sl
 80145aa:	f8a2 8004 	strh.w	r8, [r2, #4]
 80145ae:	f8a2 c006 	strh.w	ip, [r2, #6]
 80145b2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80145b6:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 80145ba:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 80145be:	ea58 0202 	orrs.w	r2, r8, r2
 80145c2:	d011      	beq.n	80145e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80145c4:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 80145c8:	f1b8 0f00 	cmp.w	r8, #0
 80145cc:	db0c      	blt.n	80145e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80145ce:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80145d0:	4590      	cmp	r8, r2
 80145d2:	da09      	bge.n	80145e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80145d4:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 80145d8:	4590      	cmp	r8, r2
 80145da:	bf3c      	itt	cc
 80145dc:	f10c 0208 	addcc.w	r2, ip, #8
 80145e0:	6102      	strcc	r2, [r0, #16]
 80145e2:	f108 0201 	add.w	r2, r8, #1
 80145e6:	6082      	str	r2, [r0, #8]
 80145e8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80145ec:	2700      	movs	r7, #0
 80145ee:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80145f2:	45b6      	cmp	lr, r6
 80145f4:	f8ac 6000 	strh.w	r6, [ip]
 80145f8:	442b      	add	r3, r5
 80145fa:	f8ac 2002 	strh.w	r2, [ip, #2]
 80145fe:	f8ac 7004 	strh.w	r7, [ip, #4]
 8014602:	f8ac 7006 	strh.w	r7, [ip, #6]
 8014606:	d04b      	beq.n	80146a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8014608:	9f04      	ldr	r7, [sp, #16]
 801460a:	1a64      	subs	r4, r4, r1
 801460c:	f04f 0a00 	mov.w	sl, #0
 8014610:	1aff      	subs	r7, r7, r3
 8014612:	443d      	add	r5, r7
 8014614:	016d      	lsls	r5, r5, #5
 8014616:	fb95 f8f1 	sdiv	r8, r5, r1
 801461a:	fb01 5518 	mls	r5, r1, r8, r5
 801461e:	2d00      	cmp	r5, #0
 8014620:	bfbc      	itt	lt
 8014622:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8014626:	186d      	addlt	r5, r5, r1
 8014628:	f108 0701 	add.w	r7, r8, #1
 801462c:	9703      	str	r7, [sp, #12]
 801462e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014632:	1964      	adds	r4, r4, r5
 8014634:	444e      	add	r6, r9
 8014636:	bf54      	ite	pl
 8014638:	9f03      	ldrpl	r7, [sp, #12]
 801463a:	4647      	movmi	r7, r8
 801463c:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8014640:	bf58      	it	pl
 8014642:	1a64      	subpl	r4, r4, r1
 8014644:	443b      	add	r3, r7
 8014646:	44bb      	add	fp, r7
 8014648:	f8ac b004 	strh.w	fp, [ip, #4]
 801464c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8014650:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8014654:	f8ac b006 	strh.w	fp, [ip, #6]
 8014658:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801465c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8014660:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8014664:	ea5b 0707 	orrs.w	r7, fp, r7
 8014668:	d011      	beq.n	801468e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801466a:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801466e:	f1bb 0f00 	cmp.w	fp, #0
 8014672:	db0c      	blt.n	801468e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8014674:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8014676:	45bb      	cmp	fp, r7
 8014678:	da09      	bge.n	801468e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801467a:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801467e:	45bb      	cmp	fp, r7
 8014680:	bf3c      	itt	cc
 8014682:	f10c 0708 	addcc.w	r7, ip, #8
 8014686:	6107      	strcc	r7, [r0, #16]
 8014688:	f10b 0701 	add.w	r7, fp, #1
 801468c:	6087      	str	r7, [r0, #8]
 801468e:	6907      	ldr	r7, [r0, #16]
 8014690:	45b6      	cmp	lr, r6
 8014692:	803e      	strh	r6, [r7, #0]
 8014694:	807a      	strh	r2, [r7, #2]
 8014696:	f8a7 a004 	strh.w	sl, [r7, #4]
 801469a:	f8a7 a006 	strh.w	sl, [r7, #6]
 801469e:	d1c6      	bne.n	801462e <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 80146a0:	9a04      	ldr	r2, [sp, #16]
 80146a2:	1ad3      	subs	r3, r2, r3
 80146a4:	6902      	ldr	r2, [r0, #16]
 80146a6:	8891      	ldrh	r1, [r2, #4]
 80146a8:	88d6      	ldrh	r6, [r2, #6]
 80146aa:	4419      	add	r1, r3
 80146ac:	8091      	strh	r1, [r2, #4]
 80146ae:	9902      	ldr	r1, [sp, #8]
 80146b0:	f101 0c20 	add.w	ip, r1, #32
 80146b4:	9901      	ldr	r1, [sp, #4]
 80146b6:	ebac 0c01 	sub.w	ip, ip, r1
 80146ba:	fb03 630c 	mla	r3, r3, ip, r6
 80146be:	80d3      	strh	r3, [r2, #6]
 80146c0:	e750      	b.n	8014564 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80146c2:	9d05      	ldr	r5, [sp, #20]
 80146c4:	1aa2      	subs	r2, r4, r2
 80146c6:	eba5 0501 	sub.w	r5, r5, r1
 80146ca:	9202      	str	r2, [sp, #8]
 80146cc:	9508      	str	r5, [sp, #32]
 80146ce:	f140 8128 	bpl.w	8014922 <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 80146d2:	9a03      	ldr	r2, [sp, #12]
 80146d4:	2a00      	cmp	r2, #0
 80146d6:	f6ff af45 	blt.w	8014564 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80146da:	9a02      	ldr	r2, [sp, #8]
 80146dc:	f04f 34ff 	mov.w	r4, #4294967295
 80146e0:	4252      	negs	r2, r2
 80146e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80146e4:	2400      	movs	r4, #0
 80146e6:	9202      	str	r2, [sp, #8]
 80146e8:	9a06      	ldr	r2, [sp, #24]
 80146ea:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 80146ee:	9206      	str	r2, [sp, #24]
 80146f0:	462a      	mov	r2, r5
 80146f2:	435a      	muls	r2, r3
 80146f4:	9401      	str	r4, [sp, #4]
 80146f6:	9c02      	ldr	r4, [sp, #8]
 80146f8:	9d02      	ldr	r5, [sp, #8]
 80146fa:	fb92 f4f4 	sdiv	r4, r2, r4
 80146fe:	fb05 2214 	mls	r2, r5, r4, r2
 8014702:	2a00      	cmp	r2, #0
 8014704:	9207      	str	r2, [sp, #28]
 8014706:	bfbc      	itt	lt
 8014708:	1952      	addlt	r2, r2, r5
 801470a:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801470e:	6905      	ldr	r5, [r0, #16]
 8014710:	bfb8      	it	lt
 8014712:	9207      	strlt	r2, [sp, #28]
 8014714:	eb04 0901 	add.w	r9, r4, r1
 8014718:	9a01      	ldr	r2, [sp, #4]
 801471a:	ea4f 1669 	mov.w	r6, r9, asr #5
 801471e:	429a      	cmp	r2, r3
 8014720:	f040 8111 	bne.w	8014946 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 8014724:	f9b5 3000 	ldrsh.w	r3, [r5]
 8014728:	429e      	cmp	r6, r3
 801472a:	d104      	bne.n	8014736 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 801472c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8014730:	9a03      	ldr	r2, [sp, #12]
 8014732:	429a      	cmp	r2, r3
 8014734:	d01b      	beq.n	801476e <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8014736:	88ea      	ldrh	r2, [r5, #6]
 8014738:	88ab      	ldrh	r3, [r5, #4]
 801473a:	4313      	orrs	r3, r2
 801473c:	d010      	beq.n	8014760 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801473e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8014742:	2a00      	cmp	r2, #0
 8014744:	db0c      	blt.n	8014760 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8014746:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8014748:	429a      	cmp	r2, r3
 801474a:	da09      	bge.n	8014760 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801474c:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8014750:	429a      	cmp	r2, r3
 8014752:	f102 0201 	add.w	r2, r2, #1
 8014756:	bf38      	it	cc
 8014758:	3508      	addcc	r5, #8
 801475a:	6082      	str	r2, [r0, #8]
 801475c:	bf38      	it	cc
 801475e:	6105      	strcc	r5, [r0, #16]
 8014760:	6903      	ldr	r3, [r0, #16]
 8014762:	9a03      	ldr	r2, [sp, #12]
 8014764:	801e      	strh	r6, [r3, #0]
 8014766:	805a      	strh	r2, [r3, #2]
 8014768:	2200      	movs	r2, #0
 801476a:	809a      	strh	r2, [r3, #4]
 801476c:	80da      	strh	r2, [r3, #6]
 801476e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014770:	9a03      	ldr	r2, [sp, #12]
 8014772:	6901      	ldr	r1, [r0, #16]
 8014774:	441a      	add	r2, r3
 8014776:	f9b1 3000 	ldrsh.w	r3, [r1]
 801477a:	42b3      	cmp	r3, r6
 801477c:	d103      	bne.n	8014786 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 801477e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8014782:	429a      	cmp	r2, r3
 8014784:	d01a      	beq.n	80147bc <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 8014786:	88cc      	ldrh	r4, [r1, #6]
 8014788:	888b      	ldrh	r3, [r1, #4]
 801478a:	4323      	orrs	r3, r4
 801478c:	d010      	beq.n	80147b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801478e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8014792:	2c00      	cmp	r4, #0
 8014794:	db0c      	blt.n	80147b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8014796:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8014798:	429c      	cmp	r4, r3
 801479a:	da09      	bge.n	80147b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801479c:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80147a0:	429c      	cmp	r4, r3
 80147a2:	f104 0401 	add.w	r4, r4, #1
 80147a6:	bf38      	it	cc
 80147a8:	3108      	addcc	r1, #8
 80147aa:	6084      	str	r4, [r0, #8]
 80147ac:	bf38      	it	cc
 80147ae:	6101      	strcc	r1, [r0, #16]
 80147b0:	6903      	ldr	r3, [r0, #16]
 80147b2:	2100      	movs	r1, #0
 80147b4:	801e      	strh	r6, [r3, #0]
 80147b6:	805a      	strh	r2, [r3, #2]
 80147b8:	8099      	strh	r1, [r3, #4]
 80147ba:	80d9      	strh	r1, [r3, #6]
 80147bc:	9b06      	ldr	r3, [sp, #24]
 80147be:	4293      	cmp	r3, r2
 80147c0:	f000 8082 	beq.w	80148c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 80147c4:	9b08      	ldr	r3, [sp, #32]
 80147c6:	9902      	ldr	r1, [sp, #8]
 80147c8:	015b      	lsls	r3, r3, #5
 80147ca:	9c02      	ldr	r4, [sp, #8]
 80147cc:	fb93 f1f1 	sdiv	r1, r3, r1
 80147d0:	fb04 3311 	mls	r3, r4, r1, r3
 80147d4:	9103      	str	r1, [sp, #12]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	9308      	str	r3, [sp, #32]
 80147da:	da04      	bge.n	80147e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 80147dc:	1e4b      	subs	r3, r1, #1
 80147de:	9303      	str	r3, [sp, #12]
 80147e0:	9b08      	ldr	r3, [sp, #32]
 80147e2:	4423      	add	r3, r4
 80147e4:	9308      	str	r3, [sp, #32]
 80147e6:	9b07      	ldr	r3, [sp, #28]
 80147e8:	464f      	mov	r7, r9
 80147ea:	9902      	ldr	r1, [sp, #8]
 80147ec:	2600      	movs	r6, #0
 80147ee:	1a5b      	subs	r3, r3, r1
 80147f0:	9307      	str	r3, [sp, #28]
 80147f2:	9b01      	ldr	r3, [sp, #4]
 80147f4:	f1c3 0320 	rsb	r3, r3, #32
 80147f8:	930e      	str	r3, [sp, #56]	@ 0x38
 80147fa:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80147fc:	9b01      	ldr	r3, [sp, #4]
 80147fe:	1a5b      	subs	r3, r3, r1
 8014800:	930a      	str	r3, [sp, #40]	@ 0x28
 8014802:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8014806:	185b      	adds	r3, r3, r1
 8014808:	bf58      	it	pl
 801480a:	9902      	ldrpl	r1, [sp, #8]
 801480c:	9307      	str	r3, [sp, #28]
 801480e:	bf57      	itett	pl
 8014810:	1a5b      	subpl	r3, r3, r1
 8014812:	9903      	ldrmi	r1, [sp, #12]
 8014814:	9307      	strpl	r3, [sp, #28]
 8014816:	9b03      	ldrpl	r3, [sp, #12]
 8014818:	bf58      	it	pl
 801481a:	1c59      	addpl	r1, r3, #1
 801481c:	2a00      	cmp	r2, #0
 801481e:	4489      	add	r9, r1
 8014820:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8014824:	db2e      	blt.n	8014884 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8014826:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8014828:	4293      	cmp	r3, r2
 801482a:	dd2b      	ble.n	8014884 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801482c:	9c01      	ldr	r4, [sp, #4]
 801482e:	6905      	ldr	r5, [r0, #16]
 8014830:	46a0      	mov	r8, r4
 8014832:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8014834:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8014838:	45a0      	cmp	r8, r4
 801483a:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 801483e:	f040 814c 	bne.w	8014ada <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 8014842:	f9b5 1000 	ldrsh.w	r1, [r5]
 8014846:	4551      	cmp	r1, sl
 8014848:	d103      	bne.n	8014852 <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 801484a:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 801484e:	4291      	cmp	r1, r2
 8014850:	d018      	beq.n	8014884 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8014852:	ea5c 010e 	orrs.w	r1, ip, lr
 8014856:	d00f      	beq.n	8014878 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8014858:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 801485c:	2900      	cmp	r1, #0
 801485e:	db0b      	blt.n	8014878 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8014860:	428b      	cmp	r3, r1
 8014862:	dd09      	ble.n	8014878 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8014864:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8014868:	4299      	cmp	r1, r3
 801486a:	f101 0101 	add.w	r1, r1, #1
 801486e:	bf38      	it	cc
 8014870:	3508      	addcc	r5, #8
 8014872:	6081      	str	r1, [r0, #8]
 8014874:	bf38      	it	cc
 8014876:	6105      	strcc	r5, [r0, #16]
 8014878:	6903      	ldr	r3, [r0, #16]
 801487a:	f8a3 a000 	strh.w	sl, [r3]
 801487e:	805a      	strh	r2, [r3, #2]
 8014880:	809e      	strh	r6, [r3, #4]
 8014882:	80de      	strh	r6, [r3, #6]
 8014884:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014886:	6901      	ldr	r1, [r0, #16]
 8014888:	441a      	add	r2, r3
 801488a:	88cc      	ldrh	r4, [r1, #6]
 801488c:	888b      	ldrh	r3, [r1, #4]
 801488e:	4323      	orrs	r3, r4
 8014890:	d010      	beq.n	80148b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8014892:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8014896:	2c00      	cmp	r4, #0
 8014898:	db0c      	blt.n	80148b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801489a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801489c:	429c      	cmp	r4, r3
 801489e:	da09      	bge.n	80148b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80148a0:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80148a4:	429c      	cmp	r4, r3
 80148a6:	f104 0401 	add.w	r4, r4, #1
 80148aa:	bf38      	it	cc
 80148ac:	3108      	addcc	r1, #8
 80148ae:	6084      	str	r4, [r0, #8]
 80148b0:	bf38      	it	cc
 80148b2:	6101      	strcc	r1, [r0, #16]
 80148b4:	6903      	ldr	r3, [r0, #16]
 80148b6:	464f      	mov	r7, r9
 80148b8:	f8a3 a000 	strh.w	sl, [r3]
 80148bc:	805a      	strh	r2, [r3, #2]
 80148be:	809e      	strh	r6, [r3, #4]
 80148c0:	80de      	strh	r6, [r3, #6]
 80148c2:	9b06      	ldr	r3, [sp, #24]
 80148c4:	4293      	cmp	r3, r2
 80148c6:	d19c      	bne.n	8014802 <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 80148c8:	9b01      	ldr	r3, [sp, #4]
 80148ca:	6907      	ldr	r7, [r0, #16]
 80148cc:	f1c3 0620 	rsb	r6, r3, #32
 80148d0:	9b05      	ldr	r3, [sp, #20]
 80148d2:	ea4f 1e63 	mov.w	lr, r3, asr #5
 80148d6:	9b04      	ldr	r3, [sp, #16]
 80148d8:	429e      	cmp	r6, r3
 80148da:	f040 81c7 	bne.w	8014c6c <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 80148de:	f9b7 3000 	ldrsh.w	r3, [r7]
 80148e2:	459e      	cmp	lr, r3
 80148e4:	d104      	bne.n	80148f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 80148e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80148ea:	429a      	cmp	r2, r3
 80148ec:	f43f ae3a 	beq.w	8014564 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80148f0:	88f9      	ldrh	r1, [r7, #6]
 80148f2:	88bb      	ldrh	r3, [r7, #4]
 80148f4:	430b      	orrs	r3, r1
 80148f6:	d010      	beq.n	801491a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 80148f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	db0c      	blt.n	801491a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8014900:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8014902:	428b      	cmp	r3, r1
 8014904:	da09      	bge.n	801491a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8014906:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801490a:	428b      	cmp	r3, r1
 801490c:	f103 0301 	add.w	r3, r3, #1
 8014910:	bf38      	it	cc
 8014912:	3708      	addcc	r7, #8
 8014914:	6083      	str	r3, [r0, #8]
 8014916:	bf38      	it	cc
 8014918:	6107      	strcc	r7, [r0, #16]
 801491a:	6903      	ldr	r3, [r0, #16]
 801491c:	f8a3 e000 	strh.w	lr, [r3]
 8014920:	e603      	b.n	801452a <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 8014922:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8014924:	9c03      	ldr	r4, [sp, #12]
 8014926:	42a2      	cmp	r2, r4
 8014928:	f6ff ae1c 	blt.w	8014564 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801492c:	9c06      	ldr	r4, [sp, #24]
 801492e:	42a2      	cmp	r2, r4
 8014930:	9c08      	ldr	r4, [sp, #32]
 8014932:	bfbc      	itt	lt
 8014934:	3201      	addlt	r2, #1
 8014936:	9206      	strlt	r2, [sp, #24]
 8014938:	f1c3 0220 	rsb	r2, r3, #32
 801493c:	4362      	muls	r2, r4
 801493e:	2401      	movs	r4, #1
 8014940:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014942:	2420      	movs	r4, #32
 8014944:	e6d6      	b.n	80146f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 8014946:	ea4f 1861 	mov.w	r8, r1, asr #5
 801494a:	f009 021f 	and.w	r2, r9, #31
 801494e:	f001 011f 	and.w	r1, r1, #31
 8014952:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8014956:	920c      	str	r2, [sp, #48]	@ 0x30
 8014958:	45b0      	cmp	r8, r6
 801495a:	9a01      	ldr	r2, [sp, #4]
 801495c:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8014960:	eba2 0203 	sub.w	r2, r2, r3
 8014964:	d108      	bne.n	8014978 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 8014966:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014968:	4496      	add	lr, r2
 801496a:	4419      	add	r1, r3
 801496c:	f8a5 e004 	strh.w	lr, [r5, #4]
 8014970:	fb02 a101 	mla	r1, r2, r1, sl
 8014974:	80e9      	strh	r1, [r5, #6]
 8014976:	e6fa      	b.n	801476e <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8014978:	2c00      	cmp	r4, #0
 801497a:	f2c0 80a7 	blt.w	8014acc <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 801497e:	2701      	movs	r7, #1
 8014980:	f1c1 0c20 	rsb	ip, r1, #32
 8014984:	970a      	str	r7, [sp, #40]	@ 0x28
 8014986:	2720      	movs	r7, #32
 8014988:	fb02 f20c 	mul.w	r2, r2, ip
 801498c:	9709      	str	r7, [sp, #36]	@ 0x24
 801498e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8014990:	fb92 fcf4 	sdiv	ip, r2, r4
 8014994:	fb04 221c 	mls	r2, r4, ip, r2
 8014998:	4439      	add	r1, r7
 801499a:	2a00      	cmp	r2, #0
 801499c:	bfbc      	itt	lt
 801499e:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 80149a2:	1912      	addlt	r2, r2, r4
 80149a4:	fb0c a101 	mla	r1, ip, r1, sl
 80149a8:	44e6      	add	lr, ip
 80149aa:	80e9      	strh	r1, [r5, #6]
 80149ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80149ae:	f8a5 e004 	strh.w	lr, [r5, #4]
 80149b2:	eb08 0501 	add.w	r5, r8, r1
 80149b6:	6901      	ldr	r1, [r0, #16]
 80149b8:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 80149bc:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 80149c0:	ea58 070e 	orrs.w	r7, r8, lr
 80149c4:	d010      	beq.n	80149e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 80149c6:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 80149ca:	f1be 0f00 	cmp.w	lr, #0
 80149ce:	db0b      	blt.n	80149e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 80149d0:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80149d2:	45be      	cmp	lr, r7
 80149d4:	da08      	bge.n	80149e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 80149d6:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 80149da:	45be      	cmp	lr, r7
 80149dc:	bf3c      	itt	cc
 80149de:	3108      	addcc	r1, #8
 80149e0:	6101      	strcc	r1, [r0, #16]
 80149e2:	f10e 0101 	add.w	r1, lr, #1
 80149e6:	6081      	str	r1, [r0, #8]
 80149e8:	6901      	ldr	r1, [r0, #16]
 80149ea:	f04f 0e00 	mov.w	lr, #0
 80149ee:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 80149f2:	42ae      	cmp	r6, r5
 80149f4:	800d      	strh	r5, [r1, #0]
 80149f6:	4463      	add	r3, ip
 80149f8:	f8a1 8002 	strh.w	r8, [r1, #2]
 80149fc:	f8a1 e004 	strh.w	lr, [r1, #4]
 8014a00:	f8a1 e006 	strh.w	lr, [r1, #6]
 8014a04:	d053      	beq.n	8014aae <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 8014a06:	9901      	ldr	r1, [sp, #4]
 8014a08:	1b12      	subs	r2, r2, r4
 8014a0a:	1ac9      	subs	r1, r1, r3
 8014a0c:	4461      	add	r1, ip
 8014a0e:	0149      	lsls	r1, r1, #5
 8014a10:	fb91 fef4 	sdiv	lr, r1, r4
 8014a14:	fb04 111e 	mls	r1, r4, lr, r1
 8014a18:	2900      	cmp	r1, #0
 8014a1a:	bfbc      	itt	lt
 8014a1c:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8014a20:	1909      	addlt	r1, r1, r4
 8014a22:	f10e 0701 	add.w	r7, lr, #1
 8014a26:	970d      	str	r7, [sp, #52]	@ 0x34
 8014a28:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8014a2c:	1852      	adds	r2, r2, r1
 8014a2e:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8014a30:	bf54      	ite	pl
 8014a32:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 8014a36:	46f4      	movmi	ip, lr
 8014a38:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8014a3c:	bf58      	it	pl
 8014a3e:	1b12      	subpl	r2, r2, r4
 8014a40:	4463      	add	r3, ip
 8014a42:	443d      	add	r5, r7
 8014a44:	44e3      	add	fp, ip
 8014a46:	f8aa b004 	strh.w	fp, [sl, #4]
 8014a4a:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8014a4e:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8014a52:	f8aa b006 	strh.w	fp, [sl, #6]
 8014a56:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014a5a:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8014a5e:	f8bc a004 	ldrh.w	sl, [ip, #4]
 8014a62:	ea5b 070a 	orrs.w	r7, fp, sl
 8014a66:	d014      	beq.n	8014a92 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8014a68:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8014a6c:	f1ba 0f00 	cmp.w	sl, #0
 8014a70:	db0f      	blt.n	8014a92 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8014a72:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8014a74:	45ba      	cmp	sl, r7
 8014a76:	da0c      	bge.n	8014a92 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8014a78:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8014a7c:	45ba      	cmp	sl, r7
 8014a7e:	f10a 0a01 	add.w	sl, sl, #1
 8014a82:	bf38      	it	cc
 8014a84:	f10c 0c08 	addcc.w	ip, ip, #8
 8014a88:	f8c0 a008 	str.w	sl, [r0, #8]
 8014a8c:	bf38      	it	cc
 8014a8e:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8014a92:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014a96:	f04f 0700 	mov.w	r7, #0
 8014a9a:	42ae      	cmp	r6, r5
 8014a9c:	f8ac 5000 	strh.w	r5, [ip]
 8014aa0:	f8ac 8002 	strh.w	r8, [ip, #2]
 8014aa4:	f8ac 7004 	strh.w	r7, [ip, #4]
 8014aa8:	f8ac 7006 	strh.w	r7, [ip, #6]
 8014aac:	d1bc      	bne.n	8014a28 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 8014aae:	6904      	ldr	r4, [r0, #16]
 8014ab0:	9a01      	ldr	r2, [sp, #4]
 8014ab2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014ab4:	1ad3      	subs	r3, r2, r3
 8014ab6:	88a2      	ldrh	r2, [r4, #4]
 8014ab8:	3120      	adds	r1, #32
 8014aba:	441a      	add	r2, r3
 8014abc:	80a2      	strh	r2, [r4, #4]
 8014abe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014ac0:	1a89      	subs	r1, r1, r2
 8014ac2:	88e2      	ldrh	r2, [r4, #6]
 8014ac4:	fb03 2301 	mla	r3, r3, r1, r2
 8014ac8:	80e3      	strh	r3, [r4, #6]
 8014aca:	e650      	b.n	801476e <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8014acc:	f04f 37ff 	mov.w	r7, #4294967295
 8014ad0:	434a      	muls	r2, r1
 8014ad2:	4264      	negs	r4, r4
 8014ad4:	970a      	str	r7, [sp, #40]	@ 0x28
 8014ad6:	2700      	movs	r7, #0
 8014ad8:	e758      	b.n	801498c <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 8014ada:	ea4f 1867 	mov.w	r8, r7, asr #5
 8014ade:	f009 031f 	and.w	r3, r9, #31
 8014ae2:	f007 071f 	and.w	r7, r7, #31
 8014ae6:	fa1f fc8c 	uxth.w	ip, ip
 8014aea:	45d0      	cmp	r8, sl
 8014aec:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014aee:	fa1f fe8e 	uxth.w	lr, lr
 8014af2:	d10a      	bne.n	8014b0a <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 8014af4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014af6:	449c      	add	ip, r3
 8014af8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014afa:	441f      	add	r7, r3
 8014afc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014afe:	f8a5 c004 	strh.w	ip, [r5, #4]
 8014b02:	fb03 e707 	mla	r7, r3, r7, lr
 8014b06:	80ef      	strh	r7, [r5, #6]
 8014b08:	e6bc      	b.n	8014884 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8014b0a:	2900      	cmp	r1, #0
 8014b0c:	f2c0 80a6 	blt.w	8014c5c <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8014b10:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8014b12:	f1c7 0320 	rsb	r3, r7, #32
 8014b16:	4363      	muls	r3, r4
 8014b18:	2401      	movs	r4, #1
 8014b1a:	940d      	str	r4, [sp, #52]	@ 0x34
 8014b1c:	2420      	movs	r4, #32
 8014b1e:	940c      	str	r4, [sp, #48]	@ 0x30
 8014b20:	fb93 f4f1 	sdiv	r4, r3, r1
 8014b24:	fb01 3b14 	mls	fp, r1, r4, r3
 8014b28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014b2a:	f1bb 0f00 	cmp.w	fp, #0
 8014b2e:	441f      	add	r7, r3
 8014b30:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014b32:	bfbc      	itt	lt
 8014b34:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8014b38:	448b      	addlt	fp, r1
 8014b3a:	fb04 e707 	mla	r7, r4, r7, lr
 8014b3e:	44a4      	add	ip, r4
 8014b40:	80ef      	strh	r7, [r5, #6]
 8014b42:	f8a5 c004 	strh.w	ip, [r5, #4]
 8014b46:	eb08 0503 	add.w	r5, r8, r3
 8014b4a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014b4e:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8014b52:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8014b56:	ea5e 0307 	orrs.w	r3, lr, r7
 8014b5a:	d011      	beq.n	8014b80 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8014b5c:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8014b60:	f1be 0f00 	cmp.w	lr, #0
 8014b64:	db0c      	blt.n	8014b80 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8014b66:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8014b68:	45be      	cmp	lr, r7
 8014b6a:	da09      	bge.n	8014b80 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8014b6c:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8014b70:	45be      	cmp	lr, r7
 8014b72:	bf3c      	itt	cc
 8014b74:	f10c 0708 	addcc.w	r7, ip, #8
 8014b78:	6107      	strcc	r7, [r0, #16]
 8014b7a:	f10e 0701 	add.w	r7, lr, #1
 8014b7e:	6087      	str	r7, [r0, #8]
 8014b80:	6907      	ldr	r7, [r0, #16]
 8014b82:	b213      	sxth	r3, r2
 8014b84:	4555      	cmp	r5, sl
 8014b86:	9310      	str	r3, [sp, #64]	@ 0x40
 8014b88:	807b      	strh	r3, [r7, #2]
 8014b8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014b8c:	803d      	strh	r5, [r7, #0]
 8014b8e:	80be      	strh	r6, [r7, #4]
 8014b90:	eb04 0c03 	add.w	ip, r4, r3
 8014b94:	80fe      	strh	r6, [r7, #6]
 8014b96:	d050      	beq.n	8014c3a <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 8014b98:	9b01      	ldr	r3, [sp, #4]
 8014b9a:	eba3 070c 	sub.w	r7, r3, ip
 8014b9e:	ebab 0301 	sub.w	r3, fp, r1
 8014ba2:	443c      	add	r4, r7
 8014ba4:	9309      	str	r3, [sp, #36]	@ 0x24
 8014ba6:	0164      	lsls	r4, r4, #5
 8014ba8:	fb94 f8f1 	sdiv	r8, r4, r1
 8014bac:	fb01 4418 	mls	r4, r1, r8, r4
 8014bb0:	2c00      	cmp	r4, #0
 8014bb2:	bfbc      	itt	lt
 8014bb4:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8014bb8:	1864      	addlt	r4, r4, r1
 8014bba:	f108 0701 	add.w	r7, r8, #1
 8014bbe:	9711      	str	r7, [sp, #68]	@ 0x44
 8014bc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014bc2:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8014bc6:	191b      	adds	r3, r3, r4
 8014bc8:	f8be b004 	ldrh.w	fp, [lr, #4]
 8014bcc:	bf54      	ite	pl
 8014bce:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 8014bd0:	4647      	movmi	r7, r8
 8014bd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8014bd4:	bf58      	it	pl
 8014bd6:	1a5b      	subpl	r3, r3, r1
 8014bd8:	44bb      	add	fp, r7
 8014bda:	44bc      	add	ip, r7
 8014bdc:	bf58      	it	pl
 8014bde:	9309      	strpl	r3, [sp, #36]	@ 0x24
 8014be0:	f8ae b004 	strh.w	fp, [lr, #4]
 8014be4:	f8be b006 	ldrh.w	fp, [lr, #6]
 8014be8:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8014bec:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8014bee:	f8ae b006 	strh.w	fp, [lr, #6]
 8014bf2:	443d      	add	r5, r7
 8014bf4:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8014bf8:	f8be b006 	ldrh.w	fp, [lr, #6]
 8014bfc:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8014c00:	ea5b 0307 	orrs.w	r3, fp, r7
 8014c04:	d011      	beq.n	8014c2a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8014c06:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8014c0a:	f1bb 0f00 	cmp.w	fp, #0
 8014c0e:	db0c      	blt.n	8014c2a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8014c10:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8014c12:	45bb      	cmp	fp, r7
 8014c14:	da09      	bge.n	8014c2a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8014c16:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8014c1a:	45bb      	cmp	fp, r7
 8014c1c:	bf3c      	itt	cc
 8014c1e:	f10e 0708 	addcc.w	r7, lr, #8
 8014c22:	6107      	strcc	r7, [r0, #16]
 8014c24:	f10b 0701 	add.w	r7, fp, #1
 8014c28:	6087      	str	r7, [r0, #8]
 8014c2a:	6907      	ldr	r7, [r0, #16]
 8014c2c:	4555      	cmp	r5, sl
 8014c2e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014c30:	803d      	strh	r5, [r7, #0]
 8014c32:	807b      	strh	r3, [r7, #2]
 8014c34:	80be      	strh	r6, [r7, #4]
 8014c36:	80fe      	strh	r6, [r7, #6]
 8014c38:	d1c2      	bne.n	8014bc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 8014c3a:	9b01      	ldr	r3, [sp, #4]
 8014c3c:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8014c3e:	eba3 0c0c 	sub.w	ip, r3, ip
 8014c42:	6903      	ldr	r3, [r0, #16]
 8014c44:	3720      	adds	r7, #32
 8014c46:	8899      	ldrh	r1, [r3, #4]
 8014c48:	4461      	add	r1, ip
 8014c4a:	8099      	strh	r1, [r3, #4]
 8014c4c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014c4e:	1a7f      	subs	r7, r7, r1
 8014c50:	88d9      	ldrh	r1, [r3, #6]
 8014c52:	fb0c 1c07 	mla	ip, ip, r7, r1
 8014c56:	f8a3 c006 	strh.w	ip, [r3, #6]
 8014c5a:	e613      	b.n	8014884 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8014c5c:	f04f 34ff 	mov.w	r4, #4294967295
 8014c60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014c62:	4249      	negs	r1, r1
 8014c64:	940d      	str	r4, [sp, #52]	@ 0x34
 8014c66:	2400      	movs	r4, #0
 8014c68:	437b      	muls	r3, r7
 8014c6a:	e758      	b.n	8014b1e <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 8014c6c:	9905      	ldr	r1, [sp, #20]
 8014c6e:	ea4f 1b69 	mov.w	fp, r9, asr #5
 8014c72:	f009 0c1f 	and.w	ip, r9, #31
 8014c76:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8014c7a:	f001 011f 	and.w	r1, r1, #31
 8014c7e:	45f3      	cmp	fp, lr
 8014c80:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8014c84:	9102      	str	r1, [sp, #8]
 8014c86:	9904      	ldr	r1, [sp, #16]
 8014c88:	eba1 0406 	sub.w	r4, r1, r6
 8014c8c:	d108      	bne.n	8014ca0 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 8014c8e:	9b02      	ldr	r3, [sp, #8]
 8014c90:	44a0      	add	r8, r4
 8014c92:	449c      	add	ip, r3
 8014c94:	f8a7 8004 	strh.w	r8, [r7, #4]
 8014c98:	fb04 a40c 	mla	r4, r4, ip, sl
 8014c9c:	80fc      	strh	r4, [r7, #6]
 8014c9e:	e461      	b.n	8014564 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8014ca0:	9905      	ldr	r1, [sp, #20]
 8014ca2:	ebb1 0109 	subs.w	r1, r1, r9
 8014ca6:	bf51      	iteee	pl
 8014ca8:	f1cc 0520 	rsbpl	r5, ip, #32
 8014cac:	fb04 f40c 	mulmi.w	r4, r4, ip
 8014cb0:	4249      	negmi	r1, r1
 8014cb2:	2500      	movmi	r5, #0
 8014cb4:	bf5d      	ittte	pl
 8014cb6:	436c      	mulpl	r4, r5
 8014cb8:	2520      	movpl	r5, #32
 8014cba:	f04f 0901 	movpl.w	r9, #1
 8014cbe:	f04f 39ff 	movmi.w	r9, #4294967295
 8014cc2:	9501      	str	r5, [sp, #4]
 8014cc4:	9b01      	ldr	r3, [sp, #4]
 8014cc6:	fb94 f5f1 	sdiv	r5, r4, r1
 8014cca:	fb01 4415 	mls	r4, r1, r5, r4
 8014cce:	449c      	add	ip, r3
 8014cd0:	eb0b 0309 	add.w	r3, fp, r9
 8014cd4:	2c00      	cmp	r4, #0
 8014cd6:	bfbc      	itt	lt
 8014cd8:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8014cdc:	1864      	addlt	r4, r4, r1
 8014cde:	44a8      	add	r8, r5
 8014ce0:	fb05 ac0c 	mla	ip, r5, ip, sl
 8014ce4:	f8a7 8004 	strh.w	r8, [r7, #4]
 8014ce8:	f8a7 c006 	strh.w	ip, [r7, #6]
 8014cec:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014cf0:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8014cf4:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8014cf8:	ea58 0707 	orrs.w	r7, r8, r7
 8014cfc:	d011      	beq.n	8014d22 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8014cfe:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8014d02:	f1b8 0f00 	cmp.w	r8, #0
 8014d06:	db0c      	blt.n	8014d22 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8014d08:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8014d0a:	45b8      	cmp	r8, r7
 8014d0c:	da09      	bge.n	8014d22 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8014d0e:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8014d12:	45b8      	cmp	r8, r7
 8014d14:	bf3c      	itt	cc
 8014d16:	f10c 0708 	addcc.w	r7, ip, #8
 8014d1a:	6107      	strcc	r7, [r0, #16]
 8014d1c:	f108 0701 	add.w	r7, r8, #1
 8014d20:	6087      	str	r7, [r0, #8]
 8014d22:	6907      	ldr	r7, [r0, #16]
 8014d24:	f04f 0c00 	mov.w	ip, #0
 8014d28:	b212      	sxth	r2, r2
 8014d2a:	459e      	cmp	lr, r3
 8014d2c:	803b      	strh	r3, [r7, #0]
 8014d2e:	442e      	add	r6, r5
 8014d30:	807a      	strh	r2, [r7, #2]
 8014d32:	f8a7 c004 	strh.w	ip, [r7, #4]
 8014d36:	f8a7 c006 	strh.w	ip, [r7, #6]
 8014d3a:	d04b      	beq.n	8014dd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 8014d3c:	9f04      	ldr	r7, [sp, #16]
 8014d3e:	1a64      	subs	r4, r4, r1
 8014d40:	f04f 0a00 	mov.w	sl, #0
 8014d44:	1bbf      	subs	r7, r7, r6
 8014d46:	443d      	add	r5, r7
 8014d48:	016d      	lsls	r5, r5, #5
 8014d4a:	fb95 f8f1 	sdiv	r8, r5, r1
 8014d4e:	fb01 5518 	mls	r5, r1, r8, r5
 8014d52:	4565      	cmp	r5, ip
 8014d54:	bfbc      	itt	lt
 8014d56:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8014d5a:	186d      	addlt	r5, r5, r1
 8014d5c:	f108 0701 	add.w	r7, r8, #1
 8014d60:	9703      	str	r7, [sp, #12]
 8014d62:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014d66:	1964      	adds	r4, r4, r5
 8014d68:	444b      	add	r3, r9
 8014d6a:	bf54      	ite	pl
 8014d6c:	9f03      	ldrpl	r7, [sp, #12]
 8014d6e:	4647      	movmi	r7, r8
 8014d70:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8014d74:	bf58      	it	pl
 8014d76:	1a64      	subpl	r4, r4, r1
 8014d78:	443e      	add	r6, r7
 8014d7a:	44bb      	add	fp, r7
 8014d7c:	f8ac b004 	strh.w	fp, [ip, #4]
 8014d80:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8014d84:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8014d88:	f8ac b006 	strh.w	fp, [ip, #6]
 8014d8c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014d90:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8014d94:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8014d98:	ea5b 0707 	orrs.w	r7, fp, r7
 8014d9c:	d011      	beq.n	8014dc2 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8014d9e:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8014da2:	f1bb 0f00 	cmp.w	fp, #0
 8014da6:	db0c      	blt.n	8014dc2 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8014da8:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8014daa:	45bb      	cmp	fp, r7
 8014dac:	da09      	bge.n	8014dc2 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8014dae:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8014db2:	45bb      	cmp	fp, r7
 8014db4:	bf3c      	itt	cc
 8014db6:	f10c 0708 	addcc.w	r7, ip, #8
 8014dba:	6107      	strcc	r7, [r0, #16]
 8014dbc:	f10b 0701 	add.w	r7, fp, #1
 8014dc0:	6087      	str	r7, [r0, #8]
 8014dc2:	6907      	ldr	r7, [r0, #16]
 8014dc4:	459e      	cmp	lr, r3
 8014dc6:	803b      	strh	r3, [r7, #0]
 8014dc8:	807a      	strh	r2, [r7, #2]
 8014dca:	f8a7 a004 	strh.w	sl, [r7, #4]
 8014dce:	f8a7 a006 	strh.w	sl, [r7, #6]
 8014dd2:	d1c6      	bne.n	8014d62 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 8014dd4:	9b04      	ldr	r3, [sp, #16]
 8014dd6:	1b9e      	subs	r6, r3, r6
 8014dd8:	6903      	ldr	r3, [r0, #16]
 8014dda:	889a      	ldrh	r2, [r3, #4]
 8014ddc:	4432      	add	r2, r6
 8014dde:	809a      	strh	r2, [r3, #4]
 8014de0:	9a02      	ldr	r2, [sp, #8]
 8014de2:	f102 0c20 	add.w	ip, r2, #32
 8014de6:	9a01      	ldr	r2, [sp, #4]
 8014de8:	ebac 0c02 	sub.w	ip, ip, r2
 8014dec:	88da      	ldrh	r2, [r3, #6]
 8014dee:	fb06 260c 	mla	r6, r6, ip, r2
 8014df2:	80de      	strh	r6, [r3, #6]
 8014df4:	f7ff bbb6 	b.w	8014564 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08014df8 <_ZN8touchgfx7Outline6lineToEii>:
 8014df8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8014dfa:	079b      	lsls	r3, r3, #30
 8014dfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014dfe:	460e      	mov	r6, r1
 8014e00:	4615      	mov	r5, r2
 8014e02:	d511      	bpl.n	8014e28 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8014e04:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8014e08:	ea86 0701 	eor.w	r7, r6, r1
 8014e0c:	ea85 0302 	eor.w	r3, r5, r2
 8014e10:	433b      	orrs	r3, r7
 8014e12:	d009      	beq.n	8014e28 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8014e14:	4633      	mov	r3, r6
 8014e16:	9500      	str	r5, [sp, #0]
 8014e18:	f7ff fb4c 	bl	80144b4 <_ZN8touchgfx7Outline10renderLineEiiii>
 8014e1c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8014e1e:	f043 0301 	orr.w	r3, r3, #1
 8014e22:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8014e26:	6243      	str	r3, [r0, #36]	@ 0x24
 8014e28:	b003      	add	sp, #12
 8014e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014e2c <_ZN8touchgfx7Outline6moveToEii>:
 8014e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e2e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8014e30:	4615      	mov	r5, r2
 8014e32:	4604      	mov	r4, r0
 8014e34:	460e      	mov	r6, r1
 8014e36:	079a      	lsls	r2, r3, #30
 8014e38:	d401      	bmi.n	8014e3e <_ZN8touchgfx7Outline6moveToEii+0x12>
 8014e3a:	f7ff fb08 	bl	801444e <_ZN8touchgfx7Outline5resetEv>
 8014e3e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8014e40:	07db      	lsls	r3, r3, #31
 8014e42:	d504      	bpl.n	8014e4e <_ZN8touchgfx7Outline6moveToEii+0x22>
 8014e44:	4620      	mov	r0, r4
 8014e46:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8014e4a:	f7ff ffd5 	bl	8014df8 <_ZN8touchgfx7Outline6lineToEii>
 8014e4e:	6923      	ldr	r3, [r4, #16]
 8014e50:	1170      	asrs	r0, r6, #5
 8014e52:	1169      	asrs	r1, r5, #5
 8014e54:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014e58:	4290      	cmp	r0, r2
 8014e5a:	d103      	bne.n	8014e64 <_ZN8touchgfx7Outline6moveToEii+0x38>
 8014e5c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8014e60:	4291      	cmp	r1, r2
 8014e62:	d01a      	beq.n	8014e9a <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8014e64:	88df      	ldrh	r7, [r3, #6]
 8014e66:	889a      	ldrh	r2, [r3, #4]
 8014e68:	433a      	orrs	r2, r7
 8014e6a:	d010      	beq.n	8014e8e <_ZN8touchgfx7Outline6moveToEii+0x62>
 8014e6c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8014e70:	2a00      	cmp	r2, #0
 8014e72:	db0c      	blt.n	8014e8e <_ZN8touchgfx7Outline6moveToEii+0x62>
 8014e74:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8014e76:	42ba      	cmp	r2, r7
 8014e78:	da09      	bge.n	8014e8e <_ZN8touchgfx7Outline6moveToEii+0x62>
 8014e7a:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8014e7e:	42ba      	cmp	r2, r7
 8014e80:	f102 0201 	add.w	r2, r2, #1
 8014e84:	bf38      	it	cc
 8014e86:	3308      	addcc	r3, #8
 8014e88:	60a2      	str	r2, [r4, #8]
 8014e8a:	bf38      	it	cc
 8014e8c:	6123      	strcc	r3, [r4, #16]
 8014e8e:	6923      	ldr	r3, [r4, #16]
 8014e90:	2200      	movs	r2, #0
 8014e92:	8018      	strh	r0, [r3, #0]
 8014e94:	8059      	strh	r1, [r3, #2]
 8014e96:	809a      	strh	r2, [r3, #4]
 8014e98:	80da      	strh	r2, [r3, #6]
 8014e9a:	6166      	str	r6, [r4, #20]
 8014e9c:	6225      	str	r5, [r4, #32]
 8014e9e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8014ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014ea4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8014ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ea8:	b0d0      	sub	sp, #320	@ 0x140
 8014eaa:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8014eae:	466c      	mov	r4, sp
 8014eb0:	4627      	mov	r7, r4
 8014eb2:	1a0d      	subs	r5, r1, r0
 8014eb4:	f100 0308 	add.w	r3, r0, #8
 8014eb8:	2d48      	cmp	r5, #72	@ 0x48
 8014eba:	f340 80d5 	ble.w	8015068 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8014ebe:	112d      	asrs	r5, r5, #4
 8014ec0:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8014ec4:	f9b0 9000 	ldrsh.w	r9, [r0]
 8014ec8:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8014ecc:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8014ed0:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8014ed4:	6816      	ldr	r6, [r2, #0]
 8014ed6:	6006      	str	r6, [r0, #0]
 8014ed8:	6856      	ldr	r6, [r2, #4]
 8014eda:	6046      	str	r6, [r0, #4]
 8014edc:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8014ee0:	f8a2 8002 	strh.w	r8, [r2, #2]
 8014ee4:	f8a2 e004 	strh.w	lr, [r2, #4]
 8014ee8:	f8a2 c006 	strh.w	ip, [r2, #6]
 8014eec:	f1a1 0208 	sub.w	r2, r1, #8
 8014ef0:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8014ef4:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8014ef8:	4565      	cmp	r5, ip
 8014efa:	db06      	blt.n	8014f0a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8014efc:	d119      	bne.n	8014f32 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8014efe:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8014f02:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8014f06:	42ae      	cmp	r6, r5
 8014f08:	dd13      	ble.n	8014f32 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8014f0a:	460e      	mov	r6, r1
 8014f0c:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8014f10:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8014f14:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8014f18:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8014f1c:	601d      	str	r5, [r3, #0]
 8014f1e:	6875      	ldr	r5, [r6, #4]
 8014f20:	605d      	str	r5, [r3, #4]
 8014f22:	f821 9c08 	strh.w	r9, [r1, #-8]
 8014f26:	f821 cc06 	strh.w	ip, [r1, #-6]
 8014f2a:	f821 8c04 	strh.w	r8, [r1, #-4]
 8014f2e:	f821 ec02 	strh.w	lr, [r1, #-2]
 8014f32:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8014f36:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8014f3a:	42ae      	cmp	r6, r5
 8014f3c:	db06      	blt.n	8014f4c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8014f3e:	d116      	bne.n	8014f6e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8014f40:	f9b0 c000 	ldrsh.w	ip, [r0]
 8014f44:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8014f48:	45ac      	cmp	ip, r5
 8014f4a:	da10      	bge.n	8014f6e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8014f4c:	681d      	ldr	r5, [r3, #0]
 8014f4e:	f9b0 8000 	ldrsh.w	r8, [r0]
 8014f52:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8014f56:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8014f5a:	6005      	str	r5, [r0, #0]
 8014f5c:	685d      	ldr	r5, [r3, #4]
 8014f5e:	f8a0 8008 	strh.w	r8, [r0, #8]
 8014f62:	6045      	str	r5, [r0, #4]
 8014f64:	8146      	strh	r6, [r0, #10]
 8014f66:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8014f6a:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8014f6e:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8014f72:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8014f76:	4565      	cmp	r5, ip
 8014f78:	db06      	blt.n	8014f88 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8014f7a:	d119      	bne.n	8014fb0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8014f7c:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8014f80:	f9b0 5000 	ldrsh.w	r5, [r0]
 8014f84:	42ae      	cmp	r6, r5
 8014f86:	da13      	bge.n	8014fb0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8014f88:	460e      	mov	r6, r1
 8014f8a:	f9b0 9000 	ldrsh.w	r9, [r0]
 8014f8e:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8014f92:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8014f96:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8014f9a:	6005      	str	r5, [r0, #0]
 8014f9c:	6875      	ldr	r5, [r6, #4]
 8014f9e:	6045      	str	r5, [r0, #4]
 8014fa0:	f821 9c08 	strh.w	r9, [r1, #-8]
 8014fa4:	f821 cc06 	strh.w	ip, [r1, #-6]
 8014fa8:	f821 8c04 	strh.w	r8, [r1, #-4]
 8014fac:	f821 ec02 	strh.w	lr, [r1, #-2]
 8014fb0:	3308      	adds	r3, #8
 8014fb2:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8014fb6:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8014fba:	45e6      	cmp	lr, ip
 8014fbc:	dbf8      	blt.n	8014fb0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8014fbe:	d105      	bne.n	8014fcc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8014fc0:	f9b3 6000 	ldrsh.w	r6, [r3]
 8014fc4:	f9b0 5000 	ldrsh.w	r5, [r0]
 8014fc8:	42ae      	cmp	r6, r5
 8014fca:	dbf1      	blt.n	8014fb0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8014fcc:	4615      	mov	r5, r2
 8014fce:	3a08      	subs	r2, #8
 8014fd0:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8014fd4:	45b4      	cmp	ip, r6
 8014fd6:	dbf9      	blt.n	8014fcc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8014fd8:	d105      	bne.n	8014fe6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 8014fda:	f9b0 8000 	ldrsh.w	r8, [r0]
 8014fde:	f9b2 6000 	ldrsh.w	r6, [r2]
 8014fe2:	45b0      	cmp	r8, r6
 8014fe4:	dbf2      	blt.n	8014fcc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8014fe6:	4293      	cmp	r3, r2
 8014fe8:	f1a5 0608 	sub.w	r6, r5, #8
 8014fec:	d816      	bhi.n	801501c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 8014fee:	f8d6 c000 	ldr.w	ip, [r6]
 8014ff2:	f9b3 a000 	ldrsh.w	sl, [r3]
 8014ff6:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8014ffa:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8014ffe:	f8c3 c000 	str.w	ip, [r3]
 8015002:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8015006:	f8c3 c004 	str.w	ip, [r3, #4]
 801500a:	f825 ac08 	strh.w	sl, [r5, #-8]
 801500e:	f825 ec06 	strh.w	lr, [r5, #-6]
 8015012:	f825 9c04 	strh.w	r9, [r5, #-4]
 8015016:	f825 8c02 	strh.w	r8, [r5, #-2]
 801501a:	e7c9      	b.n	8014fb0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801501c:	f8d6 e000 	ldr.w	lr, [r6]
 8015020:	f9b0 a000 	ldrsh.w	sl, [r0]
 8015024:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8015028:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 801502c:	f8c0 e000 	str.w	lr, [r0]
 8015030:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8015034:	1a16      	subs	r6, r2, r0
 8015036:	f8c0 e004 	str.w	lr, [r0, #4]
 801503a:	f825 ac08 	strh.w	sl, [r5, #-8]
 801503e:	f825 cc06 	strh.w	ip, [r5, #-6]
 8015042:	f825 9c04 	strh.w	r9, [r5, #-4]
 8015046:	f825 8c02 	strh.w	r8, [r5, #-2]
 801504a:	1acd      	subs	r5, r1, r3
 801504c:	10ed      	asrs	r5, r5, #3
 801504e:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8015052:	bfb5      	itete	lt
 8015054:	e9c4 0200 	strdlt	r0, r2, [r4]
 8015058:	e9c4 3100 	strdge	r3, r1, [r4]
 801505c:	460a      	movlt	r2, r1
 801505e:	4603      	movge	r3, r0
 8015060:	3408      	adds	r4, #8
 8015062:	4618      	mov	r0, r3
 8015064:	4611      	mov	r1, r2
 8015066:	e724      	b.n	8014eb2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8015068:	4299      	cmp	r1, r3
 801506a:	d927      	bls.n	80150bc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 801506c:	f1a3 0210 	sub.w	r2, r3, #16
 8015070:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8015074:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8015078:	45ac      	cmp	ip, r5
 801507a:	db06      	blt.n	801508a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 801507c:	d11c      	bne.n	80150b8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801507e:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8015082:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8015086:	42ae      	cmp	r6, r5
 8015088:	da16      	bge.n	80150b8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801508a:	4615      	mov	r5, r2
 801508c:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8015090:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8015094:	3a08      	subs	r2, #8
 8015096:	f855 6f08 	ldr.w	r6, [r5, #8]!
 801509a:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 801509e:	6196      	str	r6, [r2, #24]
 80150a0:	42a8      	cmp	r0, r5
 80150a2:	686e      	ldr	r6, [r5, #4]
 80150a4:	f8a2 9010 	strh.w	r9, [r2, #16]
 80150a8:	61d6      	str	r6, [r2, #28]
 80150aa:	f8a2 c012 	strh.w	ip, [r2, #18]
 80150ae:	f8a2 8014 	strh.w	r8, [r2, #20]
 80150b2:	f8a2 e016 	strh.w	lr, [r2, #22]
 80150b6:	d1db      	bne.n	8015070 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 80150b8:	3308      	adds	r3, #8
 80150ba:	e7d5      	b.n	8015068 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 80150bc:	42bc      	cmp	r4, r7
 80150be:	d903      	bls.n	80150c8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 80150c0:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 80150c4:	3c08      	subs	r4, #8
 80150c6:	e6f4      	b.n	8014eb2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 80150c8:	b050      	add	sp, #320	@ 0x140
 80150ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080150ce <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 80150ce:	b510      	push	{r4, lr}
 80150d0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80150d2:	4604      	mov	r4, r0
 80150d4:	07da      	lsls	r2, r3, #31
 80150d6:	d507      	bpl.n	80150e8 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 80150d8:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 80150dc:	f7ff fe8c 	bl	8014df8 <_ZN8touchgfx7Outline6lineToEii>
 80150e0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80150e2:	f023 0301 	bic.w	r3, r3, #1
 80150e6:	6243      	str	r3, [r0, #36]	@ 0x24
 80150e8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80150ea:	079b      	lsls	r3, r3, #30
 80150ec:	d521      	bpl.n	8015132 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 80150ee:	6923      	ldr	r3, [r4, #16]
 80150f0:	88d9      	ldrh	r1, [r3, #6]
 80150f2:	889a      	ldrh	r2, [r3, #4]
 80150f4:	430a      	orrs	r2, r1
 80150f6:	d010      	beq.n	801511a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80150f8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80150fc:	2a00      	cmp	r2, #0
 80150fe:	db0c      	blt.n	801511a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8015100:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8015102:	428a      	cmp	r2, r1
 8015104:	da09      	bge.n	801511a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8015106:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 801510a:	4291      	cmp	r1, r2
 801510c:	f102 0201 	add.w	r2, r2, #1
 8015110:	bf88      	it	hi
 8015112:	3308      	addhi	r3, #8
 8015114:	60a2      	str	r2, [r4, #8]
 8015116:	bf88      	it	hi
 8015118:	6123      	strhi	r3, [r4, #16]
 801511a:	68a1      	ldr	r1, [r4, #8]
 801511c:	b129      	cbz	r1, 801512a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801511e:	6863      	ldr	r3, [r4, #4]
 8015120:	4299      	cmp	r1, r3
 8015122:	d802      	bhi.n	801512a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8015124:	68e0      	ldr	r0, [r4, #12]
 8015126:	f7ff febd 	bl	8014ea4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 801512a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801512c:	f023 0302 	bic.w	r3, r3, #2
 8015130:	6263      	str	r3, [r4, #36]	@ 0x24
 8015132:	68e0      	ldr	r0, [r4, #12]
 8015134:	bd10      	pop	{r4, pc}
	...

08015138 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8015138:	4b01      	ldr	r3, [pc, #4]	@ (8015140 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801513a:	6818      	ldr	r0, [r3, #0]
 801513c:	4770      	bx	lr
 801513e:	bf00      	nop
 8015140:	24026420 	.word	0x24026420

08015144 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8015144:	4b01      	ldr	r3, [pc, #4]	@ (801514c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8015146:	6818      	ldr	r0, [r3, #0]
 8015148:	4770      	bx	lr
 801514a:	bf00      	nop
 801514c:	24026424 	.word	0x24026424

08015150 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8015150:	b510      	push	{r4, lr}
 8015152:	6803      	ldr	r3, [r0, #0]
 8015154:	460c      	mov	r4, r1
 8015156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015158:	4798      	blx	r3
 801515a:	1b03      	subs	r3, r0, r4
 801515c:	4258      	negs	r0, r3
 801515e:	4158      	adcs	r0, r3
 8015160:	bd10      	pop	{r4, pc}
	...

08015164 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8015164:	4b01      	ldr	r3, [pc, #4]	@ (801516c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8015166:	6019      	str	r1, [r3, #0]
 8015168:	4770      	bx	lr
 801516a:	bf00      	nop
 801516c:	24026428 	.word	0x24026428

08015170 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8015170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015174:	4696      	mov	lr, r2
 8015176:	b097      	sub	sp, #92	@ 0x5c
 8015178:	4605      	mov	r5, r0
 801517a:	4614      	mov	r4, r2
 801517c:	460e      	mov	r6, r1
 801517e:	461f      	mov	r7, r3
 8015180:	f10d 0c1c 	add.w	ip, sp, #28
 8015184:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8015188:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 801518c:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 8015190:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015194:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015198:	f8de 3000 	ldr.w	r3, [lr]
 801519c:	f104 0e14 	add.w	lr, r4, #20
 80151a0:	f8cc 3000 	str.w	r3, [ip]
 80151a4:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80151a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80151ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80151b0:	f8de 3000 	ldr.w	r3, [lr]
 80151b4:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 80151b8:	f8cc 3000 	str.w	r3, [ip]
 80151bc:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80151c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80151c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80151c8:	f8de 3000 	ldr.w	r3, [lr]
 80151cc:	4631      	mov	r1, r6
 80151ce:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80151d0:	4628      	mov	r0, r5
 80151d2:	f8cc 3000 	str.w	r3, [ip]
 80151d6:	682b      	ldr	r3, [r5, #0]
 80151d8:	9201      	str	r2, [sp, #4]
 80151da:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80151dc:	f8cd 8008 	str.w	r8, [sp, #8]
 80151e0:	9200      	str	r2, [sp, #0]
 80151e2:	aa07      	add	r2, sp, #28
 80151e4:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80151e8:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 80151ec:	463b      	mov	r3, r7
 80151ee:	47d8      	blx	fp
 80151f0:	46a6      	mov	lr, r4
 80151f2:	f10d 0c1c 	add.w	ip, sp, #28
 80151f6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80151fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80151fe:	f8de 3000 	ldr.w	r3, [lr]
 8015202:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8015206:	343c      	adds	r4, #60	@ 0x3c
 8015208:	f8cc 3000 	str.w	r3, [ip]
 801520c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8015210:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015214:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015218:	f8de 3000 	ldr.w	r3, [lr]
 801521c:	f8cc 3000 	str.w	r3, [ip]
 8015220:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8015224:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015226:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801522a:	6823      	ldr	r3, [r4, #0]
 801522c:	4631      	mov	r1, r6
 801522e:	4628      	mov	r0, r5
 8015230:	f8cc 3000 	str.w	r3, [ip]
 8015234:	682b      	ldr	r3, [r5, #0]
 8015236:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801523a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801523c:	f8cd 8008 	str.w	r8, [sp, #8]
 8015240:	9201      	str	r2, [sp, #4]
 8015242:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8015244:	9200      	str	r2, [sp, #0]
 8015246:	aa07      	add	r2, sp, #28
 8015248:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 801524a:	463b      	mov	r3, r7
 801524c:	47a0      	blx	r4
 801524e:	b017      	add	sp, #92	@ 0x5c
 8015250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015254 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8015254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015258:	b08d      	sub	sp, #52	@ 0x34
 801525a:	4688      	mov	r8, r1
 801525c:	f8d3 c000 	ldr.w	ip, [r3]
 8015260:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8015262:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8015266:	680f      	ldr	r7, [r1, #0]
 8015268:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 801526c:	eba7 070c 	sub.w	r7, r7, ip
 8015270:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8015274:	edd3 6a07 	vldr	s13, [r3, #28]
 8015278:	42bc      	cmp	r4, r7
 801527a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801527c:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8015280:	bfa8      	it	ge
 8015282:	463c      	movge	r4, r7
 8015284:	f9b1 9000 	ldrsh.w	r9, [r1]
 8015288:	f9ba 1000 	ldrsh.w	r1, [sl]
 801528c:	ee07 4a90 	vmov	s15, r4
 8015290:	eb09 0e0c 	add.w	lr, r9, ip
 8015294:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 8015298:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801529c:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 80152a0:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 80152a4:	4571      	cmp	r1, lr
 80152a6:	ee25 4a04 	vmul.f32	s8, s10, s8
 80152aa:	ee65 4a24 	vmul.f32	s9, s10, s9
 80152ae:	ee25 5a27 	vmul.f32	s10, s10, s15
 80152b2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80152b6:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80152ba:	ee32 1a05 	vadd.f32	s2, s4, s10
 80152be:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80152c2:	ee36 0a84 	vadd.f32	s0, s13, s8
 80152c6:	ee61 1a87 	vmul.f32	s3, s3, s14
 80152ca:	ee22 2a07 	vmul.f32	s4, s4, s14
 80152ce:	f340 808c 	ble.w	80153ea <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80152d2:	eba1 060e 	sub.w	r6, r1, lr
 80152d6:	fb96 f5f4 	sdiv	r5, r6, r4
 80152da:	ee07 5a10 	vmov	s14, r5
 80152de:	2d00      	cmp	r5, #0
 80152e0:	fb04 6615 	mls	r6, r4, r5, r6
 80152e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80152e8:	eea7 0a04 	vfma.f32	s0, s14, s8
 80152ec:	eee7 0a24 	vfma.f32	s1, s14, s9
 80152f0:	eea7 1a05 	vfma.f32	s2, s14, s10
 80152f4:	dd12      	ble.n	801531c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80152f6:	ee70 6a44 	vsub.f32	s13, s0, s8
 80152fa:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80152fe:	ee31 2a45 	vsub.f32	s4, s2, s10
 8015302:	eef5 6a40 	vcmp.f32	s13, #0.0
 8015306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801530a:	bf14      	ite	ne
 801530c:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8015310:	eeb0 7a67 	vmoveq.f32	s14, s15
 8015314:	ee61 1a87 	vmul.f32	s3, s3, s14
 8015318:	ee22 2a07 	vmul.f32	s4, s4, s14
 801531c:	fb05 f204 	mul.w	r2, r5, r4
 8015320:	1abf      	subs	r7, r7, r2
 8015322:	4494      	add	ip, r2
 8015324:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8015328:	4411      	add	r1, r2
 801532a:	eb09 020c 	add.w	r2, r9, ip
 801532e:	b209      	sxth	r1, r1
 8015330:	443a      	add	r2, r7
 8015332:	428a      	cmp	r2, r1
 8015334:	bfc4      	itt	gt
 8015336:	eba1 0209 	subgt.w	r2, r1, r9
 801533a:	eba2 070c 	subgt.w	r7, r2, ip
 801533e:	2f00      	cmp	r7, #0
 8015340:	dd50      	ble.n	80153e4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8015342:	fb97 f1f4 	sdiv	r1, r7, r4
 8015346:	fb04 7211 	mls	r2, r4, r1, r7
 801534a:	b90a      	cbnz	r2, 8015350 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801534c:	3901      	subs	r1, #1
 801534e:	4622      	mov	r2, r4
 8015350:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8015354:	6840      	ldr	r0, [r0, #4]
 8015356:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 801535a:	44b6      	add	lr, r6
 801535c:	f8d0 a000 	ldr.w	sl, [r0]
 8015360:	2900      	cmp	r1, #0
 8015362:	bfcc      	ite	gt
 8015364:	46a1      	movgt	r9, r4
 8015366:	4691      	movle	r9, r2
 8015368:	900b      	str	r0, [sp, #44]	@ 0x2c
 801536a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801536c:	fb04 e505 	mla	r5, r4, r5, lr
 8015370:	eef0 6a42 	vmov.f32	s13, s4
 8015374:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8015378:	9008      	str	r0, [sp, #32]
 801537a:	eeb0 7a61 	vmov.f32	s14, s3
 801537e:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8015380:	695b      	ldr	r3, [r3, #20]
 8015382:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015386:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801538a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801538e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8015390:	445b      	add	r3, fp
 8015392:	9307      	str	r3, [sp, #28]
 8015394:	ee16 3a90 	vmov	r3, s13
 8015398:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801539c:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80153a0:	ee21 3a23 	vmul.f32	s6, s2, s7
 80153a4:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80153a8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80153ac:	ee17 7a90 	vmov	r7, s15
 80153b0:	ee73 7a42 	vsub.f32	s15, s6, s4
 80153b4:	fb97 f7f4 	sdiv	r7, r7, r4
 80153b8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80153bc:	ee17 ca90 	vmov	ip, s15
 80153c0:	fb9c fcf4 	sdiv	ip, ip, r4
 80153c4:	fb0c 3306 	mla	r3, ip, r6, r3
 80153c8:	9302      	str	r3, [sp, #8]
 80153ca:	ee17 3a10 	vmov	r3, s14
 80153ce:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80153d2:	fb07 3706 	mla	r7, r7, r6, r3
 80153d6:	eba9 0306 	sub.w	r3, r9, r6
 80153da:	e9cd 4700 	strd	r4, r7, [sp]
 80153de:	f8da 4008 	ldr.w	r4, [sl, #8]
 80153e2:	47a0      	blx	r4
 80153e4:	b00d      	add	sp, #52	@ 0x34
 80153e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153ea:	2500      	movs	r5, #0
 80153ec:	462e      	mov	r6, r5
 80153ee:	e799      	b.n	8015324 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

080153f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80153f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153f4:	b0db      	sub	sp, #364	@ 0x16c
 80153f6:	461d      	mov	r5, r3
 80153f8:	4614      	mov	r4, r2
 80153fa:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 80153fe:	910f      	str	r1, [sp, #60]	@ 0x3c
 8015400:	4629      	mov	r1, r5
 8015402:	930a      	str	r3, [sp, #40]	@ 0x28
 8015404:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8015408:	9009      	str	r0, [sp, #36]	@ 0x24
 801540a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801540c:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8015410:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8015414:	9310      	str	r3, [sp, #64]	@ 0x40
 8015416:	6803      	ldr	r3, [r0, #0]
 8015418:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 801541a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801541e:	47b8      	blx	r7
 8015420:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015422:	6058      	str	r0, [r3, #4]
 8015424:	2800      	cmp	r0, #0
 8015426:	f000 83a1 	beq.w	8015b6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801542a:	682b      	ldr	r3, [r5, #0]
 801542c:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8015430:	ed94 7a02 	vldr	s14, [r4, #8]
 8015434:	9314      	str	r3, [sp, #80]	@ 0x50
 8015436:	686b      	ldr	r3, [r5, #4]
 8015438:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801543c:	9315      	str	r3, [sp, #84]	@ 0x54
 801543e:	4bc1      	ldr	r3, [pc, #772]	@ (8015744 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8015440:	7819      	ldrb	r1, [r3, #0]
 8015442:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8015446:	2900      	cmp	r1, #0
 8015448:	bf16      	itet	ne
 801544a:	4619      	movne	r1, r3
 801544c:	4611      	moveq	r1, r2
 801544e:	4613      	movne	r3, r2
 8015450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015454:	9116      	str	r1, [sp, #88]	@ 0x58
 8015456:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 801545a:	f240 8387 	bls.w	8015b6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801545e:	ed94 7a07 	vldr	s14, [r4, #28]
 8015462:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801546a:	f240 837f 	bls.w	8015b6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801546e:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 8015472:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801547a:	f240 8377 	bls.w	8015b6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801547e:	6822      	ldr	r2, [r4, #0]
 8015480:	4bb1      	ldr	r3, [pc, #708]	@ (8015748 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8015482:	429a      	cmp	r2, r3
 8015484:	f2c0 8372 	blt.w	8015b6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015488:	49b0      	ldr	r1, [pc, #704]	@ (801574c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801548a:	6963      	ldr	r3, [r4, #20]
 801548c:	428a      	cmp	r2, r1
 801548e:	f300 836d 	bgt.w	8015b6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015492:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8015496:	48ae      	ldr	r0, [pc, #696]	@ (8015750 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8015498:	33ff      	adds	r3, #255	@ 0xff
 801549a:	4283      	cmp	r3, r0
 801549c:	f200 8366 	bhi.w	8015b6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80154a0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80154a2:	4dac      	ldr	r5, [pc, #688]	@ (8015754 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 80154a4:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 80154a8:	33ff      	adds	r3, #255	@ 0xff
 80154aa:	42ab      	cmp	r3, r5
 80154ac:	f200 835e 	bhi.w	8015b6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80154b0:	6862      	ldr	r2, [r4, #4]
 80154b2:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 80154b6:	33ff      	adds	r3, #255	@ 0xff
 80154b8:	4283      	cmp	r3, r0
 80154ba:	f200 8357 	bhi.w	8015b6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80154be:	69a1      	ldr	r1, [r4, #24]
 80154c0:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 80154c4:	33ff      	adds	r3, #255	@ 0xff
 80154c6:	4283      	cmp	r3, r0
 80154c8:	f200 8350 	bhi.w	8015b6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80154cc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80154ce:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 80154d2:	30ff      	adds	r0, #255	@ 0xff
 80154d4:	42a8      	cmp	r0, r5
 80154d6:	f200 8349 	bhi.w	8015b6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80154da:	428a      	cmp	r2, r1
 80154dc:	f280 8110 	bge.w	8015700 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 80154e0:	429a      	cmp	r2, r3
 80154e2:	f300 8119 	bgt.w	8015718 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 80154e6:	4299      	cmp	r1, r3
 80154e8:	f280 811d 	bge.w	8015726 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80154ec:	2502      	movs	r5, #2
 80154ee:	2701      	movs	r7, #1
 80154f0:	46a9      	mov	r9, r5
 80154f2:	46b8      	mov	r8, r7
 80154f4:	f04f 0a00 	mov.w	sl, #0
 80154f8:	4621      	mov	r1, r4
 80154fa:	a849      	add	r0, sp, #292	@ 0x124
 80154fc:	f004 f9ae 	bl	801985c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8015500:	4622      	mov	r2, r4
 8015502:	4653      	mov	r3, sl
 8015504:	a949      	add	r1, sp, #292	@ 0x124
 8015506:	f8cd 9000 	str.w	r9, [sp]
 801550a:	a819      	add	r0, sp, #100	@ 0x64
 801550c:	f004 fad6 	bl	8019abc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015510:	4622      	mov	r2, r4
 8015512:	4653      	mov	r3, sl
 8015514:	a949      	add	r1, sp, #292	@ 0x124
 8015516:	f8cd 8000 	str.w	r8, [sp]
 801551a:	a829      	add	r0, sp, #164	@ 0xa4
 801551c:	f004 face 	bl	8019abc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015520:	4643      	mov	r3, r8
 8015522:	4622      	mov	r2, r4
 8015524:	a949      	add	r1, sp, #292	@ 0x124
 8015526:	f8cd 9000 	str.w	r9, [sp]
 801552a:	a839      	add	r0, sp, #228	@ 0xe4
 801552c:	f004 fac6 	bl	8019abc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015530:	42af      	cmp	r7, r5
 8015532:	af12      	add	r7, sp, #72	@ 0x48
 8015534:	bfb7      	itett	lt
 8015536:	2300      	movlt	r3, #0
 8015538:	2301      	movge	r3, #1
 801553a:	ad29      	addlt	r5, sp, #164	@ 0xa4
 801553c:	ac19      	addlt	r4, sp, #100	@ 0x64
 801553e:	bfb1      	iteee	lt
 8015540:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8015542:	ad19      	addge	r5, sp, #100	@ 0x64
 8015544:	930e      	strge	r3, [sp, #56]	@ 0x38
 8015546:	ac29      	addge	r4, sp, #164	@ 0xa4
 8015548:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801554a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801554e:	e887 0003 	stmia.w	r7, {r0, r1}
 8015552:	b928      	cbnz	r0, 8015560 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8015554:	4b80      	ldr	r3, [pc, #512]	@ (8015758 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8015556:	6818      	ldr	r0, [r3, #0]
 8015558:	6803      	ldr	r3, [r0, #0]
 801555a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801555c:	4798      	blx	r3
 801555e:	6038      	str	r0, [r7, #0]
 8015560:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8015562:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8015566:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801556a:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 801556c:	930c      	str	r3, [sp, #48]	@ 0x30
 801556e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015570:	6963      	ldr	r3, [r4, #20]
 8015572:	440b      	add	r3, r1
 8015574:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8015578:	4408      	add	r0, r1
 801557a:	b200      	sxth	r0, r0
 801557c:	4283      	cmp	r3, r0
 801557e:	900d      	str	r0, [sp, #52]	@ 0x34
 8015580:	f280 80dd 	bge.w	801573e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8015584:	428b      	cmp	r3, r1
 8015586:	da08      	bge.n	801559a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015588:	2a00      	cmp	r2, #0
 801558a:	dd06      	ble.n	801559a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801558c:	1acb      	subs	r3, r1, r3
 801558e:	429a      	cmp	r2, r3
 8015590:	f2c0 80e4 	blt.w	801575c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8015594:	2b00      	cmp	r3, #0
 8015596:	f300 80e2 	bgt.w	801575e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801559a:	6967      	ldr	r7, [r4, #20]
 801559c:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 80155a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80155a2:	443b      	add	r3, r7
 80155a4:	461f      	mov	r7, r3
 80155a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80155a8:	1bdf      	subs	r7, r3, r7
 80155aa:	4297      	cmp	r7, r2
 80155ac:	bfa8      	it	ge
 80155ae:	4617      	movge	r7, r2
 80155b0:	2f00      	cmp	r7, #0
 80155b2:	f340 8166 	ble.w	8015882 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80155b6:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80155b8:	6829      	ldr	r1, [r5, #0]
 80155ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80155be:	f9bb 3000 	ldrsh.w	r3, [fp]
 80155c2:	4411      	add	r1, r2
 80155c4:	6820      	ldr	r0, [r4, #0]
 80155c6:	4299      	cmp	r1, r3
 80155c8:	dd1a      	ble.n	8015600 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80155ca:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80155ce:	4402      	add	r2, r0
 80155d0:	440b      	add	r3, r1
 80155d2:	b21b      	sxth	r3, r3
 80155d4:	429a      	cmp	r2, r3
 80155d6:	dc13      	bgt.n	8015600 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80155d8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80155da:	a912      	add	r1, sp, #72	@ 0x48
 80155dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80155de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80155e0:	681b      	ldr	r3, [r3, #0]
 80155e2:	9206      	str	r2, [sp, #24]
 80155e4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80155e6:	9500      	str	r5, [sp, #0]
 80155e8:	9205      	str	r2, [sp, #20]
 80155ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80155ec:	e9cd b203 	strd	fp, r2, [sp, #12]
 80155f0:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 80155f2:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80155f6:	aa49      	add	r2, sp, #292	@ 0x124
 80155f8:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 80155fc:	4623      	mov	r3, r4
 80155fe:	47c8      	blx	r9
 8015600:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8015604:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8015608:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 801560c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015610:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8015614:	68a1      	ldr	r1, [r4, #8]
 8015616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801561a:	ed94 6a08 	vldr	s12, [r4, #32]
 801561e:	edd4 6a07 	vldr	s13, [r4, #28]
 8015622:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8015626:	ee76 6a86 	vadd.f32	s13, s13, s12
 801562a:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801562e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015632:	edc4 6a07 	vstr	s13, [r4, #28]
 8015636:	441a      	add	r2, r3
 8015638:	6963      	ldr	r3, [r4, #20]
 801563a:	3301      	adds	r3, #1
 801563c:	6022      	str	r2, [r4, #0]
 801563e:	6163      	str	r3, [r4, #20]
 8015640:	69a3      	ldr	r3, [r4, #24]
 8015642:	3b01      	subs	r3, #1
 8015644:	61a3      	str	r3, [r4, #24]
 8015646:	6923      	ldr	r3, [r4, #16]
 8015648:	440b      	add	r3, r1
 801564a:	68e1      	ldr	r1, [r4, #12]
 801564c:	428b      	cmp	r3, r1
 801564e:	6123      	str	r3, [r4, #16]
 8015650:	db15      	blt.n	801567e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8015652:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8015656:	3201      	adds	r2, #1
 8015658:	1a5b      	subs	r3, r3, r1
 801565a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801565e:	6022      	str	r2, [r4, #0]
 8015660:	6123      	str	r3, [r4, #16]
 8015662:	edc4 6a07 	vstr	s13, [r4, #28]
 8015666:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 801566a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801566e:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8015672:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8015676:	ee77 7a27 	vadd.f32	s15, s14, s15
 801567a:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801567e:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8015682:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8015686:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 801568a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801568e:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8015692:	68a9      	ldr	r1, [r5, #8]
 8015694:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015698:	ed95 6a08 	vldr	s12, [r5, #32]
 801569c:	edd5 6a07 	vldr	s13, [r5, #28]
 80156a0:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80156a4:	ee76 6a86 	vadd.f32	s13, s13, s12
 80156a8:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80156ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80156b0:	edc5 6a07 	vstr	s13, [r5, #28]
 80156b4:	441a      	add	r2, r3
 80156b6:	696b      	ldr	r3, [r5, #20]
 80156b8:	3301      	adds	r3, #1
 80156ba:	602a      	str	r2, [r5, #0]
 80156bc:	616b      	str	r3, [r5, #20]
 80156be:	69ab      	ldr	r3, [r5, #24]
 80156c0:	3b01      	subs	r3, #1
 80156c2:	61ab      	str	r3, [r5, #24]
 80156c4:	692b      	ldr	r3, [r5, #16]
 80156c6:	440b      	add	r3, r1
 80156c8:	68e9      	ldr	r1, [r5, #12]
 80156ca:	428b      	cmp	r3, r1
 80156cc:	612b      	str	r3, [r5, #16]
 80156ce:	db15      	blt.n	80156fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 80156d0:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 80156d4:	3201      	adds	r2, #1
 80156d6:	1a5b      	subs	r3, r3, r1
 80156d8:	ee76 6a26 	vadd.f32	s13, s12, s13
 80156dc:	602a      	str	r2, [r5, #0]
 80156de:	612b      	str	r3, [r5, #16]
 80156e0:	edc5 6a07 	vstr	s13, [r5, #28]
 80156e4:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 80156e8:	ee36 7a87 	vadd.f32	s14, s13, s14
 80156ec:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80156f0:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 80156f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80156f8:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80156fc:	3f01      	subs	r7, #1
 80156fe:	e757      	b.n	80155b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8015700:	4299      	cmp	r1, r3
 8015702:	dc13      	bgt.n	801572c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8015704:	429a      	cmp	r2, r3
 8015706:	da14      	bge.n	8015732 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8015708:	2502      	movs	r5, #2
 801570a:	2703      	movs	r7, #3
 801570c:	f04f 0800 	mov.w	r8, #0
 8015710:	46a9      	mov	r9, r5
 8015712:	f04f 0a01 	mov.w	sl, #1
 8015716:	e6ef      	b.n	80154f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8015718:	2501      	movs	r5, #1
 801571a:	2700      	movs	r7, #0
 801571c:	46a9      	mov	r9, r5
 801571e:	46b8      	mov	r8, r7
 8015720:	f04f 0a02 	mov.w	sl, #2
 8015724:	e6e8      	b.n	80154f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8015726:	2501      	movs	r5, #1
 8015728:	2702      	movs	r7, #2
 801572a:	e6e1      	b.n	80154f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801572c:	2500      	movs	r5, #0
 801572e:	2701      	movs	r7, #1
 8015730:	e7f4      	b.n	801571c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8015732:	2702      	movs	r7, #2
 8015734:	2503      	movs	r5, #3
 8015736:	f04f 0900 	mov.w	r9, #0
 801573a:	46b8      	mov	r8, r7
 801573c:	e7e9      	b.n	8015712 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801573e:	4613      	mov	r3, r2
 8015740:	e728      	b.n	8015594 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8015742:	bf00      	nop
 8015744:	24026410 	.word	0x24026410
 8015748:	fffd8f01 	.word	0xfffd8f01
 801574c:	00027100 	.word	0x00027100
 8015750:	0004e1ff 	.word	0x0004e1ff
 8015754:	0004e1fe 	.word	0x0004e1fe
 8015758:	24026418 	.word	0x24026418
 801575c:	4613      	mov	r3, r2
 801575e:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8015760:	469e      	mov	lr, r3
 8015762:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8015764:	469c      	mov	ip, r3
 8015766:	9111      	str	r1, [sp, #68]	@ 0x44
 8015768:	f04f 0900 	mov.w	r9, #0
 801576c:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8015770:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8015774:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8015778:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 801577c:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8015780:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8015784:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8015788:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 801578c:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8015790:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8015794:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8015798:	f1bc 0f00 	cmp.w	ip, #0
 801579c:	d147      	bne.n	801582e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801579e:	eb03 0c07 	add.w	ip, r3, r7
 80157a2:	1ad7      	subs	r7, r2, r3
 80157a4:	f1b9 0f00 	cmp.w	r9, #0
 80157a8:	d009      	beq.n	80157be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 80157aa:	9029      	str	r0, [sp, #164]	@ 0xa4
 80157ac:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 80157b0:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 80157b4:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 80157b8:	912d      	str	r1, [sp, #180]	@ 0xb4
 80157ba:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 80157be:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80157c0:	f04f 0800 	mov.w	r8, #0
 80157c4:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 80157c8:	9111      	str	r1, [sp, #68]	@ 0x44
 80157ca:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 80157ce:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 80157d2:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 80157d6:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 80157da:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 80157de:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 80157e2:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 80157e6:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 80157ea:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 80157ee:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 80157f2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 80157f6:	f1be 0f00 	cmp.w	lr, #0
 80157fa:	d031      	beq.n	8015860 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 80157fc:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80157fe:	4450      	add	r0, sl
 8015800:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8015804:	4431      	add	r1, r6
 8015806:	ee37 7a04 	vadd.f32	s14, s14, s8
 801580a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801580e:	4549      	cmp	r1, r9
 8015810:	db08      	blt.n	8015824 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8015812:	ee77 7a85 	vadd.f32	s15, s15, s10
 8015816:	3001      	adds	r0, #1
 8015818:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801581c:	eba1 0109 	sub.w	r1, r1, r9
 8015820:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015824:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015828:	f04f 0801 	mov.w	r8, #1
 801582c:	e7e3      	b.n	80157f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801582e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8015830:	4450      	add	r0, sl
 8015832:	ee37 7a24 	vadd.f32	s14, s14, s9
 8015836:	4431      	add	r1, r6
 8015838:	ee77 7a84 	vadd.f32	s15, s15, s8
 801583c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8015840:	4541      	cmp	r1, r8
 8015842:	db08      	blt.n	8015856 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8015844:	ee76 6a85 	vadd.f32	s13, s13, s10
 8015848:	3001      	adds	r0, #1
 801584a:	ee37 7a25 	vadd.f32	s14, s14, s11
 801584e:	eba1 0108 	sub.w	r1, r1, r8
 8015852:	ee77 7a86 	vadd.f32	s15, s15, s12
 8015856:	f10c 3cff 	add.w	ip, ip, #4294967295
 801585a:	f04f 0901 	mov.w	r9, #1
 801585e:	e79b      	b.n	8015798 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8015860:	449c      	add	ip, r3
 8015862:	1aff      	subs	r7, r7, r3
 8015864:	f1b8 0f00 	cmp.w	r8, #0
 8015868:	d009      	beq.n	801587e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801586a:	9019      	str	r0, [sp, #100]	@ 0x64
 801586c:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8015870:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8015874:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8015878:	911d      	str	r1, [sp, #116]	@ 0x74
 801587a:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 801587e:	1ad2      	subs	r2, r2, r3
 8015880:	e68b      	b.n	801559a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015882:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015884:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8015886:	2b00      	cmp	r3, #0
 8015888:	f000 80d1 	beq.w	8015a2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801588c:	ad19      	add	r5, sp, #100	@ 0x64
 801588e:	ac39      	add	r4, sp, #228	@ 0xe4
 8015890:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8015892:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8015896:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801589a:	930c      	str	r3, [sp, #48]	@ 0x30
 801589c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801589e:	6963      	ldr	r3, [r4, #20]
 80158a0:	440b      	add	r3, r1
 80158a2:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80158a6:	4408      	add	r0, r1
 80158a8:	b200      	sxth	r0, r0
 80158aa:	4283      	cmp	r3, r0
 80158ac:	900d      	str	r0, [sp, #52]	@ 0x34
 80158ae:	f280 80c1 	bge.w	8015a34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 80158b2:	428b      	cmp	r3, r1
 80158b4:	da08      	bge.n	80158c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80158b6:	2a00      	cmp	r2, #0
 80158b8:	dd06      	ble.n	80158c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80158ba:	1acb      	subs	r3, r1, r3
 80158bc:	429a      	cmp	r2, r3
 80158be:	f2c0 80bb 	blt.w	8015a38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	f300 80b9 	bgt.w	8015a3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 80158c8:	6967      	ldr	r7, [r4, #20]
 80158ca:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 80158ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80158d0:	443b      	add	r3, r7
 80158d2:	461f      	mov	r7, r3
 80158d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80158d6:	1bdf      	subs	r7, r3, r7
 80158d8:	4297      	cmp	r7, r2
 80158da:	bfa8      	it	ge
 80158dc:	4617      	movge	r7, r2
 80158de:	2f00      	cmp	r7, #0
 80158e0:	f340 813c 	ble.w	8015b5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 80158e4:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80158e6:	6829      	ldr	r1, [r5, #0]
 80158e8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80158ec:	f9bb 3000 	ldrsh.w	r3, [fp]
 80158f0:	4411      	add	r1, r2
 80158f2:	6820      	ldr	r0, [r4, #0]
 80158f4:	4299      	cmp	r1, r3
 80158f6:	dd1a      	ble.n	801592e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80158f8:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80158fc:	4402      	add	r2, r0
 80158fe:	440b      	add	r3, r1
 8015900:	b21b      	sxth	r3, r3
 8015902:	429a      	cmp	r2, r3
 8015904:	dc13      	bgt.n	801592e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8015906:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015908:	a912      	add	r1, sp, #72	@ 0x48
 801590a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801590c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801590e:	681b      	ldr	r3, [r3, #0]
 8015910:	9206      	str	r2, [sp, #24]
 8015912:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015914:	9500      	str	r5, [sp, #0]
 8015916:	9205      	str	r2, [sp, #20]
 8015918:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801591a:	e9cd b203 	strd	fp, r2, [sp, #12]
 801591e:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8015920:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8015924:	aa49      	add	r2, sp, #292	@ 0x124
 8015926:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 801592a:	4623      	mov	r3, r4
 801592c:	47c8      	blx	r9
 801592e:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8015932:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8015936:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 801593a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801593e:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8015942:	68a1      	ldr	r1, [r4, #8]
 8015944:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015948:	ed94 6a08 	vldr	s12, [r4, #32]
 801594c:	edd4 6a07 	vldr	s13, [r4, #28]
 8015950:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8015954:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015958:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801595c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015960:	edc4 6a07 	vstr	s13, [r4, #28]
 8015964:	441a      	add	r2, r3
 8015966:	6963      	ldr	r3, [r4, #20]
 8015968:	3301      	adds	r3, #1
 801596a:	6022      	str	r2, [r4, #0]
 801596c:	6163      	str	r3, [r4, #20]
 801596e:	69a3      	ldr	r3, [r4, #24]
 8015970:	3b01      	subs	r3, #1
 8015972:	61a3      	str	r3, [r4, #24]
 8015974:	6923      	ldr	r3, [r4, #16]
 8015976:	440b      	add	r3, r1
 8015978:	68e1      	ldr	r1, [r4, #12]
 801597a:	428b      	cmp	r3, r1
 801597c:	6123      	str	r3, [r4, #16]
 801597e:	db15      	blt.n	80159ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8015980:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8015984:	3201      	adds	r2, #1
 8015986:	1a5b      	subs	r3, r3, r1
 8015988:	ee76 6a26 	vadd.f32	s13, s12, s13
 801598c:	6022      	str	r2, [r4, #0]
 801598e:	6123      	str	r3, [r4, #16]
 8015990:	edc4 6a07 	vstr	s13, [r4, #28]
 8015994:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8015998:	ee36 7a87 	vadd.f32	s14, s13, s14
 801599c:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80159a0:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 80159a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80159a8:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80159ac:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 80159b0:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 80159b4:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 80159b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80159bc:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 80159c0:	68a9      	ldr	r1, [r5, #8]
 80159c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80159c6:	ed95 6a08 	vldr	s12, [r5, #32]
 80159ca:	edd5 6a07 	vldr	s13, [r5, #28]
 80159ce:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80159d2:	ee76 6a86 	vadd.f32	s13, s13, s12
 80159d6:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80159da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80159de:	edc5 6a07 	vstr	s13, [r5, #28]
 80159e2:	441a      	add	r2, r3
 80159e4:	696b      	ldr	r3, [r5, #20]
 80159e6:	3301      	adds	r3, #1
 80159e8:	602a      	str	r2, [r5, #0]
 80159ea:	616b      	str	r3, [r5, #20]
 80159ec:	69ab      	ldr	r3, [r5, #24]
 80159ee:	3b01      	subs	r3, #1
 80159f0:	61ab      	str	r3, [r5, #24]
 80159f2:	692b      	ldr	r3, [r5, #16]
 80159f4:	440b      	add	r3, r1
 80159f6:	68e9      	ldr	r1, [r5, #12]
 80159f8:	428b      	cmp	r3, r1
 80159fa:	612b      	str	r3, [r5, #16]
 80159fc:	db15      	blt.n	8015a2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 80159fe:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8015a02:	3201      	adds	r2, #1
 8015a04:	1a5b      	subs	r3, r3, r1
 8015a06:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015a0a:	602a      	str	r2, [r5, #0]
 8015a0c:	612b      	str	r3, [r5, #16]
 8015a0e:	edc5 6a07 	vstr	s13, [r5, #28]
 8015a12:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8015a16:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015a1a:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8015a1e:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8015a22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015a26:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8015a2a:	3f01      	subs	r7, #1
 8015a2c:	e757      	b.n	80158de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8015a2e:	ad39      	add	r5, sp, #228	@ 0xe4
 8015a30:	ac19      	add	r4, sp, #100	@ 0x64
 8015a32:	e72d      	b.n	8015890 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8015a34:	4613      	mov	r3, r2
 8015a36:	e744      	b.n	80158c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8015a38:	4613      	mov	r3, r2
 8015a3a:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 8015a3c:	469e      	mov	lr, r3
 8015a3e:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 8015a42:	461f      	mov	r7, r3
 8015a44:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 8015a48:	f04f 0900 	mov.w	r9, #0
 8015a4c:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 8015a50:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 8015a54:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 8015a58:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 8015a5c:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 8015a60:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8015a62:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 8015a66:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 8015a6a:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 8015a6e:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 8015a72:	960e      	str	r6, [sp, #56]	@ 0x38
 8015a74:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 8015a78:	2f00      	cmp	r7, #0
 8015a7a:	d146      	bne.n	8015b0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8015a7c:	449c      	add	ip, r3
 8015a7e:	1ad7      	subs	r7, r2, r3
 8015a80:	f1b9 0f00 	cmp.w	r9, #0
 8015a84:	d009      	beq.n	8015a9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8015a86:	9039      	str	r0, [sp, #228]	@ 0xe4
 8015a88:	913d      	str	r1, [sp, #244]	@ 0xf4
 8015a8a:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 8015a8e:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 8015a92:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 8015a96:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 8015a9a:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8015a9c:	f04f 0800 	mov.w	r8, #0
 8015aa0:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8015aa4:	910e      	str	r1, [sp, #56]	@ 0x38
 8015aa6:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8015aaa:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8015aae:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8015ab2:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8015ab6:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8015aba:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8015abe:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8015ac2:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8015ac6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8015aca:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8015ace:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8015ad2:	f1be 0f00 	cmp.w	lr, #0
 8015ad6:	d030      	beq.n	8015b3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8015ad8:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8015ada:	4450      	add	r0, sl
 8015adc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8015ae0:	4431      	add	r1, r6
 8015ae2:	ee37 7a04 	vadd.f32	s14, s14, s8
 8015ae6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8015aea:	4549      	cmp	r1, r9
 8015aec:	db08      	blt.n	8015b00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8015aee:	ee77 7a85 	vadd.f32	s15, s15, s10
 8015af2:	3001      	adds	r0, #1
 8015af4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015af8:	eba1 0109 	sub.w	r1, r1, r9
 8015afc:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015b00:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015b04:	f04f 0801 	mov.w	r8, #1
 8015b08:	e7e3      	b.n	8015ad2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8015b0a:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8015b0c:	4450      	add	r0, sl
 8015b0e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8015b12:	4431      	add	r1, r6
 8015b14:	ee77 7a84 	vadd.f32	s15, s15, s8
 8015b18:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8015b1c:	4541      	cmp	r1, r8
 8015b1e:	db08      	blt.n	8015b32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8015b20:	ee76 6a85 	vadd.f32	s13, s13, s10
 8015b24:	3001      	adds	r0, #1
 8015b26:	ee37 7a25 	vadd.f32	s14, s14, s11
 8015b2a:	eba1 0108 	sub.w	r1, r1, r8
 8015b2e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8015b32:	3f01      	subs	r7, #1
 8015b34:	f04f 0901 	mov.w	r9, #1
 8015b38:	e79e      	b.n	8015a78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8015b3a:	449c      	add	ip, r3
 8015b3c:	1aff      	subs	r7, r7, r3
 8015b3e:	f1b8 0f00 	cmp.w	r8, #0
 8015b42:	d009      	beq.n	8015b58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8015b44:	9019      	str	r0, [sp, #100]	@ 0x64
 8015b46:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8015b4a:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8015b4e:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8015b52:	911d      	str	r1, [sp, #116]	@ 0x74
 8015b54:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8015b58:	1ad2      	subs	r2, r2, r3
 8015b5a:	e6b5      	b.n	80158c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8015b5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	b923      	cbnz	r3, 8015b6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015b62:	4b04      	ldr	r3, [pc, #16]	@ (8015b74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8015b64:	6818      	ldr	r0, [r3, #0]
 8015b66:	6803      	ldr	r3, [r0, #0]
 8015b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b6a:	4798      	blx	r3
 8015b6c:	b05b      	add	sp, #364	@ 0x16c
 8015b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b72:	bf00      	nop
 8015b74:	24026418 	.word	0x24026418

08015b78 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8015b78:	b570      	push	{r4, r5, r6, lr}
 8015b7a:	4604      	mov	r4, r0
 8015b7c:	2500      	movs	r5, #0
 8015b7e:	9805      	ldr	r0, [sp, #20]
 8015b80:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8015b84:	6061      	str	r1, [r4, #4]
 8015b86:	8263      	strh	r3, [r4, #18]
 8015b88:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8015b8c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8015b90:	8025      	strh	r5, [r4, #0]
 8015b92:	7221      	strb	r1, [r4, #8]
 8015b94:	7266      	strb	r6, [r4, #9]
 8015b96:	60e0      	str	r0, [r4, #12]
 8015b98:	8222      	strh	r2, [r4, #16]
 8015b9a:	82a3      	strh	r3, [r4, #20]
 8015b9c:	82e5      	strh	r5, [r4, #22]
 8015b9e:	8325      	strh	r5, [r4, #24]
 8015ba0:	8365      	strh	r5, [r4, #26]
 8015ba2:	83a5      	strh	r5, [r4, #28]
 8015ba4:	83e5      	strh	r5, [r4, #30]
 8015ba6:	8425      	strh	r5, [r4, #32]
 8015ba8:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 8015bac:	b32e      	cbz	r6, 8015bfa <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8015bae:	6803      	ldr	r3, [r0, #0]
 8015bb0:	695b      	ldr	r3, [r3, #20]
 8015bb2:	4798      	blx	r3
 8015bb4:	4606      	mov	r6, r0
 8015bb6:	b300      	cbz	r0, 8015bfa <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8015bb8:	68e0      	ldr	r0, [r4, #12]
 8015bba:	4631      	mov	r1, r6
 8015bbc:	6803      	ldr	r3, [r0, #0]
 8015bbe:	68db      	ldr	r3, [r3, #12]
 8015bc0:	4798      	blx	r3
 8015bc2:	4605      	mov	r5, r0
 8015bc4:	b1c8      	cbz	r0, 8015bfa <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8015bc6:	7b43      	ldrb	r3, [r0, #13]
 8015bc8:	7a82      	ldrb	r2, [r0, #10]
 8015bca:	005b      	lsls	r3, r3, #1
 8015bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015bd0:	4313      	orrs	r3, r2
 8015bd2:	8423      	strh	r3, [r4, #32]
 8015bd4:	7a63      	ldrb	r3, [r4, #9]
 8015bd6:	2b06      	cmp	r3, #6
 8015bd8:	d10f      	bne.n	8015bfa <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8015bda:	68e0      	ldr	r0, [r4, #12]
 8015bdc:	462a      	mov	r2, r5
 8015bde:	4631      	mov	r1, r6
 8015be0:	6803      	ldr	r3, [r0, #0]
 8015be2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015be4:	4798      	blx	r3
 8015be6:	7b6b      	ldrb	r3, [r5, #13]
 8015be8:	005b      	lsls	r3, r3, #1
 8015bea:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8015bee:	7aab      	ldrb	r3, [r5, #10]
 8015bf0:	4313      	orrs	r3, r2
 8015bf2:	4418      	add	r0, r3
 8015bf4:	8c23      	ldrh	r3, [r4, #32]
 8015bf6:	4418      	add	r0, r3
 8015bf8:	8420      	strh	r0, [r4, #32]
 8015bfa:	4620      	mov	r0, r4
 8015bfc:	bd70      	pop	{r4, r5, r6, pc}

08015bfe <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8015bfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c02:	2400      	movs	r4, #0
 8015c04:	b085      	sub	sp, #20
 8015c06:	4681      	mov	r9, r0
 8015c08:	4688      	mov	r8, r1
 8015c0a:	4692      	mov	sl, r2
 8015c0c:	469b      	mov	fp, r3
 8015c0e:	4627      	mov	r7, r4
 8015c10:	4625      	mov	r5, r4
 8015c12:	4626      	mov	r6, r4
 8015c14:	4554      	cmp	r4, sl
 8015c16:	da2a      	bge.n	8015c6e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8015c18:	2300      	movs	r3, #0
 8015c1a:	9303      	str	r3, [sp, #12]
 8015c1c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8015c20:	429d      	cmp	r5, r3
 8015c22:	d004      	beq.n	8015c2e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8015c24:	f242 030b 	movw	r3, #8203	@ 0x200b
 8015c28:	429d      	cmp	r5, r3
 8015c2a:	bf18      	it	ne
 8015c2c:	462f      	movne	r7, r5
 8015c2e:	ab03      	add	r3, sp, #12
 8015c30:	4642      	mov	r2, r8
 8015c32:	4659      	mov	r1, fp
 8015c34:	4648      	mov	r0, r9
 8015c36:	f003 fc27 	bl	8019488 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015c3a:	4605      	mov	r5, r0
 8015c3c:	b1b8      	cbz	r0, 8015c6e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8015c3e:	280a      	cmp	r0, #10
 8015c40:	d015      	beq.n	8015c6e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8015c42:	9a03      	ldr	r2, [sp, #12]
 8015c44:	b18a      	cbz	r2, 8015c6a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8015c46:	7b50      	ldrb	r0, [r2, #13]
 8015c48:	4639      	mov	r1, r7
 8015c4a:	7a93      	ldrb	r3, [r2, #10]
 8015c4c:	0040      	lsls	r0, r0, #1
 8015c4e:	8895      	ldrh	r5, [r2, #4]
 8015c50:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8015c54:	4303      	orrs	r3, r0
 8015c56:	4640      	mov	r0, r8
 8015c58:	9301      	str	r3, [sp, #4]
 8015c5a:	f8d8 3000 	ldr.w	r3, [r8]
 8015c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015c60:	4798      	blx	r3
 8015c62:	9b01      	ldr	r3, [sp, #4]
 8015c64:	4418      	add	r0, r3
 8015c66:	4406      	add	r6, r0
 8015c68:	b2b6      	uxth	r6, r6
 8015c6a:	3401      	adds	r4, #1
 8015c6c:	e7d2      	b.n	8015c14 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8015c6e:	4630      	mov	r0, r6
 8015c70:	b005      	add	sp, #20
 8015c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015c76 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8015c76:	2a02      	cmp	r2, #2
 8015c78:	b530      	push	{r4, r5, lr}
 8015c7a:	d011      	beq.n	8015ca0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8015c7c:	2a03      	cmp	r2, #3
 8015c7e:	d01c      	beq.n	8015cba <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8015c80:	2a01      	cmp	r2, #1
 8015c82:	d10c      	bne.n	8015c9e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8015c84:	888b      	ldrh	r3, [r1, #4]
 8015c86:	8801      	ldrh	r1, [r0, #0]
 8015c88:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8015c8c:	1a5b      	subs	r3, r3, r1
 8015c8e:	8844      	ldrh	r4, [r0, #2]
 8015c90:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8015c94:	1a9b      	subs	r3, r3, r2
 8015c96:	8004      	strh	r4, [r0, #0]
 8015c98:	8081      	strh	r1, [r0, #4]
 8015c9a:	8043      	strh	r3, [r0, #2]
 8015c9c:	80c2      	strh	r2, [r0, #6]
 8015c9e:	bd30      	pop	{r4, r5, pc}
 8015ca0:	88cb      	ldrh	r3, [r1, #6]
 8015ca2:	8842      	ldrh	r2, [r0, #2]
 8015ca4:	1a9b      	subs	r3, r3, r2
 8015ca6:	88c2      	ldrh	r2, [r0, #6]
 8015ca8:	1a9b      	subs	r3, r3, r2
 8015caa:	888a      	ldrh	r2, [r1, #4]
 8015cac:	8801      	ldrh	r1, [r0, #0]
 8015cae:	8043      	strh	r3, [r0, #2]
 8015cb0:	1a52      	subs	r2, r2, r1
 8015cb2:	8881      	ldrh	r1, [r0, #4]
 8015cb4:	1a52      	subs	r2, r2, r1
 8015cb6:	8002      	strh	r2, [r0, #0]
 8015cb8:	e7f1      	b.n	8015c9e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8015cba:	88cb      	ldrh	r3, [r1, #6]
 8015cbc:	8841      	ldrh	r1, [r0, #2]
 8015cbe:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8015cc2:	1a5b      	subs	r3, r3, r1
 8015cc4:	f9b0 5000 	ldrsh.w	r5, [r0]
 8015cc8:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8015ccc:	1a9b      	subs	r3, r3, r2
 8015cce:	8045      	strh	r5, [r0, #2]
 8015cd0:	8082      	strh	r2, [r0, #4]
 8015cd2:	8003      	strh	r3, [r0, #0]
 8015cd4:	80c4      	strh	r4, [r0, #6]
 8015cd6:	e7e2      	b.n	8015c9e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08015cd8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8015cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cdc:	b09f      	sub	sp, #124	@ 0x7c
 8015cde:	920f      	str	r2, [sp, #60]	@ 0x3c
 8015ce0:	9312      	str	r3, [sp, #72]	@ 0x48
 8015ce2:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8015ce4:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8015ce6:	8812      	ldrh	r2, [r2, #0]
 8015ce8:	889b      	ldrh	r3, [r3, #4]
 8015cea:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8015cec:	4413      	add	r3, r2
 8015cee:	900e      	str	r0, [sp, #56]	@ 0x38
 8015cf0:	6828      	ldr	r0, [r5, #0]
 8015cf2:	b21b      	sxth	r3, r3
 8015cf4:	9117      	str	r1, [sp, #92]	@ 0x5c
 8015cf6:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 8015cfa:	9311      	str	r3, [sp, #68]	@ 0x44
 8015cfc:	6803      	ldr	r3, [r0, #0]
 8015cfe:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 8015d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015d04:	4798      	blx	r3
 8015d06:	682b      	ldr	r3, [r5, #0]
 8015d08:	9013      	str	r0, [sp, #76]	@ 0x4c
 8015d0a:	7b1a      	ldrb	r2, [r3, #12]
 8015d0c:	7adb      	ldrb	r3, [r3, #11]
 8015d0e:	9215      	str	r2, [sp, #84]	@ 0x54
 8015d10:	9316      	str	r3, [sp, #88]	@ 0x58
 8015d12:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 8015d16:	2c00      	cmp	r4, #0
 8015d18:	d067      	beq.n	8015dea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8015d1a:	7c2b      	ldrb	r3, [r5, #16]
 8015d1c:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8015d1e:	2b06      	cmp	r3, #6
 8015d20:	bf14      	ite	ne
 8015d22:	2301      	movne	r3, #1
 8015d24:	2302      	moveq	r3, #2
 8015d26:	4413      	add	r3, r2
 8015d28:	f04f 0900 	mov.w	r9, #0
 8015d2c:	9310      	str	r3, [sp, #64]	@ 0x40
 8015d2e:	464c      	mov	r4, r9
 8015d30:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 8015d34:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8015d38:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015d3a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015d3c:	4293      	cmp	r3, r2
 8015d3e:	f280 808b 	bge.w	8015e58 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8015d42:	2300      	movs	r3, #0
 8015d44:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 8015d48:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 8015d4c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8015d50:	429c      	cmp	r4, r3
 8015d52:	d006      	beq.n	8015d62 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 8015d54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015d56:	f242 020b 	movw	r2, #8203	@ 0x200b
 8015d5a:	4294      	cmp	r4, r2
 8015d5c:	bf18      	it	ne
 8015d5e:	4623      	movne	r3, r4
 8015d60:	930c      	str	r3, [sp, #48]	@ 0x30
 8015d62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015d64:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8015d66:	682a      	ldr	r2, [r5, #0]
 8015d68:	428b      	cmp	r3, r1
 8015d6a:	db40      	blt.n	8015dee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8015d6c:	6813      	ldr	r3, [r2, #0]
 8015d6e:	4610      	mov	r0, r2
 8015d70:	695b      	ldr	r3, [r3, #20]
 8015d72:	4798      	blx	r3
 8015d74:	4604      	mov	r4, r0
 8015d76:	6828      	ldr	r0, [r5, #0]
 8015d78:	aa1d      	add	r2, sp, #116	@ 0x74
 8015d7a:	4621      	mov	r1, r4
 8015d7c:	6803      	ldr	r3, [r0, #0]
 8015d7e:	689f      	ldr	r7, [r3, #8]
 8015d80:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8015d84:	47b8      	blx	r7
 8015d86:	901c      	str	r0, [sp, #112]	@ 0x70
 8015d88:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8015d8c:	429c      	cmp	r4, r3
 8015d8e:	f000 80eb 	beq.w	8015f68 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8015d92:	f242 030b 	movw	r3, #8203	@ 0x200b
 8015d96:	429c      	cmp	r4, r3
 8015d98:	f000 80e6 	beq.w	8015f68 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8015d9c:	2c00      	cmp	r4, #0
 8015d9e:	f000 810d 	beq.w	8015fbc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8015da2:	2c0a      	cmp	r4, #10
 8015da4:	d05e      	beq.n	8015e64 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8015da6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8015da8:	b36a      	cbz	r2, 8015e06 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8015daa:	8894      	ldrh	r4, [r2, #4]
 8015dac:	f1bb 0f00 	cmp.w	fp, #0
 8015db0:	d03a      	beq.n	8015e28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8015db2:	f892 900d 	ldrb.w	r9, [r2, #13]
 8015db6:	f1bb 0f01 	cmp.w	fp, #1
 8015dba:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8015dbe:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 8015dc2:	f892 900a 	ldrb.w	r9, [r2, #10]
 8015dc6:	ea49 0903 	orr.w	r9, r9, r3
 8015dca:	d133      	bne.n	8015e34 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 8015dcc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015dce:	eba6 0609 	sub.w	r6, r6, r9
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d14d      	bne.n	8015e72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8015dd6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8015dd8:	eb09 0306 	add.w	r3, r9, r6
 8015ddc:	4413      	add	r3, r2
 8015dde:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8015de0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015de4:	4293      	cmp	r3, r2
 8015de6:	da4e      	bge.n	8015e86 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8015de8:	e036      	b.n	8015e58 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8015dea:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8015dec:	e79c      	b.n	8015d28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 8015dee:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8015df2:	4659      	mov	r1, fp
 8015df4:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8015df6:	9301      	str	r3, [sp, #4]
 8015df8:	ab1d      	add	r3, sp, #116	@ 0x74
 8015dfa:	9300      	str	r3, [sp, #0]
 8015dfc:	ab1c      	add	r3, sp, #112	@ 0x70
 8015dfe:	f003 fb8c 	bl	801951a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8015e02:	4604      	mov	r4, r0
 8015e04:	e7c0      	b.n	8015d88 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8015e06:	6828      	ldr	r0, [r5, #0]
 8015e08:	6803      	ldr	r3, [r0, #0]
 8015e0a:	691b      	ldr	r3, [r3, #16]
 8015e0c:	4798      	blx	r3
 8015e0e:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8015e12:	4298      	cmp	r0, r3
 8015e14:	f000 80a8 	beq.w	8015f68 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8015e18:	f242 030b 	movw	r3, #8203	@ 0x200b
 8015e1c:	4298      	cmp	r0, r3
 8015e1e:	f000 80a3 	beq.w	8015f68 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8015e22:	f1bb 0f00 	cmp.w	fp, #0
 8015e26:	d100      	bne.n	8015e2a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8015e28:	444e      	add	r6, r9
 8015e2a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8015e2c:	2a00      	cmp	r2, #0
 8015e2e:	d1c0      	bne.n	8015db2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8015e30:	4691      	mov	r9, r2
 8015e32:	e099      	b.n	8015f68 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8015e34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	f000 80c2 	beq.w	8015fc0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e8>
 8015e3c:	f1bb 0f00 	cmp.w	fp, #0
 8015e40:	d117      	bne.n	8015e72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8015e42:	6828      	ldr	r0, [r5, #0]
 8015e44:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015e46:	6803      	ldr	r3, [r0, #0]
 8015e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015e4a:	4798      	blx	r3
 8015e4c:	4406      	add	r6, r0
 8015e4e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8015e50:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015e52:	1af3      	subs	r3, r6, r3
 8015e54:	4293      	cmp	r3, r2
 8015e56:	dd16      	ble.n	8015e86 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8015e58:	2c00      	cmp	r4, #0
 8015e5a:	f000 80af 	beq.w	8015fbc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8015e5e:	2c0a      	cmp	r4, #10
 8015e60:	f040 809d 	bne.w	8015f9e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 8015e64:	240a      	movs	r4, #10
 8015e66:	fab4 f084 	clz	r0, r4
 8015e6a:	0940      	lsrs	r0, r0, #5
 8015e6c:	b01f      	add	sp, #124	@ 0x7c
 8015e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e72:	6828      	ldr	r0, [r5, #0]
 8015e74:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015e76:	6803      	ldr	r3, [r0, #0]
 8015e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015e7a:	4798      	blx	r3
 8015e7c:	f1bb 0f01 	cmp.w	fp, #1
 8015e80:	eba6 0600 	sub.w	r6, r6, r0
 8015e84:	d0a7      	beq.n	8015dd6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8015e86:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8015e88:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8015e8a:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8015e8e:	f9b3 8000 	ldrsh.w	r8, [r3]
 8015e92:	7b43      	ldrb	r3, [r0, #13]
 8015e94:	4431      	add	r1, r6
 8015e96:	015b      	lsls	r3, r3, #5
 8015e98:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8015e9c:	7983      	ldrb	r3, [r0, #6]
 8015e9e:	4313      	orrs	r3, r2
 8015ea0:	440b      	add	r3, r1
 8015ea2:	4543      	cmp	r3, r8
 8015ea4:	db60      	blt.n	8015f68 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8015ea6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015ea8:	4299      	cmp	r1, r3
 8015eaa:	da5d      	bge.n	8015f68 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8015eac:	6828      	ldr	r0, [r5, #0]
 8015eae:	45b0      	cmp	r8, r6
 8015eb0:	6803      	ldr	r3, [r0, #0]
 8015eb2:	bfcc      	ite	gt
 8015eb4:	eba8 0806 	subgt.w	r8, r8, r6
 8015eb8:	f04f 0800 	movle.w	r8, #0
 8015ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015ebe:	bfc8      	it	gt
 8015ec0:	fa1f f888 	uxthgt.w	r8, r8
 8015ec4:	4798      	blx	r3
 8015ec6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8015ec8:	7b53      	ldrb	r3, [r2, #13]
 8015eca:	00d9      	lsls	r1, r3, #3
 8015ecc:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 8015ed0:	7a11      	ldrb	r1, [r2, #8]
 8015ed2:	4339      	orrs	r1, r7
 8015ed4:	065f      	lsls	r7, r3, #25
 8015ed6:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8015ed8:	bf48      	it	mi
 8015eda:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 8015ede:	4407      	add	r7, r0
 8015ee0:	bf48      	it	mi
 8015ee2:	b209      	sxthmi	r1, r1
 8015ee4:	1a7f      	subs	r7, r7, r1
 8015ee6:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8015ee8:	b2bf      	uxth	r7, r7
 8015eea:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8015eee:	fa0f fa87 	sxth.w	sl, r7
 8015ef2:	4551      	cmp	r1, sl
 8015ef4:	dd3c      	ble.n	8015f70 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8015ef6:	011b      	lsls	r3, r3, #4
 8015ef8:	79d0      	ldrb	r0, [r2, #7]
 8015efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015efe:	4303      	orrs	r3, r0
 8015f00:	449a      	add	sl, r3
 8015f02:	4551      	cmp	r1, sl
 8015f04:	dc30      	bgt.n	8015f68 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8015f06:	1bcf      	subs	r7, r1, r7
 8015f08:	468a      	mov	sl, r1
 8015f0a:	b23f      	sxth	r7, r7
 8015f0c:	9219      	str	r2, [sp, #100]	@ 0x64
 8015f0e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015f10:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015f12:	6828      	ldr	r0, [r5, #0]
 8015f14:	2a00      	cmp	r2, #0
 8015f16:	d12d      	bne.n	8015f74 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 8015f18:	9318      	str	r3, [sp, #96]	@ 0x60
 8015f1a:	b2bf      	uxth	r7, r7
 8015f1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015f1e:	6819      	ldr	r1, [r3, #0]
 8015f20:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 8015f22:	6801      	ldr	r1, [r0, #0]
 8015f24:	9314      	str	r3, [sp, #80]	@ 0x50
 8015f26:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8015f28:	4788      	blx	r1
 8015f2a:	79a9      	ldrb	r1, [r5, #6]
 8015f2c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8015f2e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8015f30:	7ba9      	ldrb	r1, [r5, #14]
 8015f32:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8015f34:	910a      	str	r1, [sp, #40]	@ 0x28
 8015f36:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 8015f3a:	9109      	str	r1, [sp, #36]	@ 0x24
 8015f3c:	68a9      	ldr	r1, [r5, #8]
 8015f3e:	9306      	str	r3, [sp, #24]
 8015f40:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8015f42:	9205      	str	r2, [sp, #20]
 8015f44:	9304      	str	r3, [sp, #16]
 8015f46:	f8cd a004 	str.w	sl, [sp, #4]
 8015f4a:	e9cd 8702 	strd	r8, r7, [sp, #8]
 8015f4e:	44b0      	add	r8, r6
 8015f50:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8015f52:	fa0f f388 	sxth.w	r3, r8
 8015f56:	9300      	str	r3, [sp, #0]
 8015f58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015f5a:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8015f5e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8015f60:	681a      	ldr	r2, [r3, #0]
 8015f62:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8015f64:	685b      	ldr	r3, [r3, #4]
 8015f66:	47b8      	blx	r7
 8015f68:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015f6a:	3301      	adds	r3, #1
 8015f6c:	930d      	str	r3, [sp, #52]	@ 0x34
 8015f6e:	e6e3      	b.n	8015d38 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 8015f70:	2700      	movs	r7, #0
 8015f72:	e7cb      	b.n	8015f0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 8015f74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015f76:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8015f7a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015f7c:	f8dc 1000 	ldr.w	r1, [ip]
 8015f80:	e9cd 6204 	strd	r6, r2, [sp, #16]
 8015f84:	79aa      	ldrb	r2, [r5, #6]
 8015f86:	9203      	str	r2, [sp, #12]
 8015f88:	7baa      	ldrb	r2, [r5, #14]
 8015f8a:	9202      	str	r2, [sp, #8]
 8015f8c:	68aa      	ldr	r2, [r5, #8]
 8015f8e:	e9cd 0200 	strd	r0, r2, [sp]
 8015f92:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8015f94:	4660      	mov	r0, ip
 8015f96:	688f      	ldr	r7, [r1, #8]
 8015f98:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8015f9a:	47b8      	blx	r7
 8015f9c:	e7e4      	b.n	8015f68 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8015f9e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8015fa0:	3501      	adds	r5, #1
 8015fa2:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8015fa4:	429d      	cmp	r5, r3
 8015fa6:	f6bf af5e 	bge.w	8015e66 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8015faa:	4659      	mov	r1, fp
 8015fac:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8015fae:	f7f0 fcc5 	bl	800693c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015fb2:	4604      	mov	r4, r0
 8015fb4:	b110      	cbz	r0, 8015fbc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8015fb6:	280a      	cmp	r0, #10
 8015fb8:	d1f2      	bne.n	8015fa0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c8>
 8015fba:	e753      	b.n	8015e64 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8015fbc:	2400      	movs	r4, #0
 8015fbe:	e752      	b.n	8015e66 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8015fc0:	f1bb 0f00 	cmp.w	fp, #0
 8015fc4:	f43f af43 	beq.w	8015e4e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8015fc8:	e75d      	b.n	8015e86 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

08015fca <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8015fca:	b530      	push	{r4, r5, lr}
 8015fcc:	8ac4      	ldrh	r4, [r0, #22]
 8015fce:	8b45      	ldrh	r5, [r0, #26]
 8015fd0:	8343      	strh	r3, [r0, #26]
 8015fd2:	442c      	add	r4, r5
 8015fd4:	1ae4      	subs	r4, r4, r3
 8015fd6:	8b83      	ldrh	r3, [r0, #28]
 8015fd8:	82c4      	strh	r4, [r0, #22]
 8015fda:	8b04      	ldrh	r4, [r0, #24]
 8015fdc:	4422      	add	r2, r4
 8015fde:	440c      	add	r4, r1
 8015fe0:	1a59      	subs	r1, r3, r1
 8015fe2:	83c2      	strh	r2, [r0, #30]
 8015fe4:	8304      	strh	r4, [r0, #24]
 8015fe6:	8381      	strh	r1, [r0, #28]
 8015fe8:	bd30      	pop	{r4, r5, pc}

08015fea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 8015fea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fee:	4604      	mov	r4, r0
 8015ff0:	8a47      	ldrh	r7, [r0, #18]
 8015ff2:	68c0      	ldr	r0, [r0, #12]
 8015ff4:	b085      	sub	sp, #20
 8015ff6:	6803      	ldr	r3, [r0, #0]
 8015ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015ffa:	4798      	blx	r3
 8015ffc:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8016000:	7a63      	ldrb	r3, [r4, #9]
 8016002:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8016006:	3b01      	subs	r3, #1
 8016008:	42b7      	cmp	r7, r6
 801600a:	bfac      	ite	ge
 801600c:	f04f 0900 	movge.w	r9, #0
 8016010:	f04f 0901 	movlt.w	r9, #1
 8016014:	2b05      	cmp	r3, #5
 8016016:	d804      	bhi.n	8016022 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 8016018:	e8df f003 	tbb	[pc, r3]
 801601c:	470f0854 	.word	0x470f0854
 8016020:	4c4c      	.short	0x4c4c
 8016022:	2500      	movs	r5, #0
 8016024:	46a9      	mov	r9, r5
 8016026:	462e      	mov	r6, r5
 8016028:	462f      	mov	r7, r5
 801602a:	e00e      	b.n	801604a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801602c:	42b7      	cmp	r7, r6
 801602e:	f04f 0500 	mov.w	r5, #0
 8016032:	bfb4      	ite	lt
 8016034:	2600      	movlt	r6, #0
 8016036:	2601      	movge	r6, #1
 8016038:	e7f6      	b.n	8016028 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801603a:	42b7      	cmp	r7, r6
 801603c:	464d      	mov	r5, r9
 801603e:	f04f 0900 	mov.w	r9, #0
 8016042:	bfb4      	ite	lt
 8016044:	2600      	movlt	r6, #0
 8016046:	2601      	movge	r6, #1
 8016048:	464f      	mov	r7, r9
 801604a:	f04f 0800 	mov.w	r8, #0
 801604e:	f8a4 8016 	strh.w	r8, [r4, #22]
 8016052:	f8a4 8018 	strh.w	r8, [r4, #24]
 8016056:	f8cd 8004 	str.w	r8, [sp, #4]
 801605a:	2300      	movs	r3, #0
 801605c:	9303      	str	r3, [sp, #12]
 801605e:	8823      	ldrh	r3, [r4, #0]
 8016060:	2b20      	cmp	r3, #32
 8016062:	d033      	beq.n	80160cc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 8016064:	f242 010b 	movw	r1, #8203	@ 0x200b
 8016068:	1a5a      	subs	r2, r3, r1
 801606a:	f1d2 0a00 	rsbs	sl, r2, #0
 801606e:	eb4a 0a02 	adc.w	sl, sl, r2
 8016072:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8016076:	4293      	cmp	r3, r2
 8016078:	d008      	beq.n	801608c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801607a:	428b      	cmp	r3, r1
 801607c:	9a01      	ldr	r2, [sp, #4]
 801607e:	bf0e      	itee	eq
 8016080:	f04f 0a01 	moveq.w	sl, #1
 8016084:	461a      	movne	r2, r3
 8016086:	f04f 0a00 	movne.w	sl, #0
 801608a:	9201      	str	r2, [sp, #4]
 801608c:	ab03      	add	r3, sp, #12
 801608e:	68e2      	ldr	r2, [r4, #12]
 8016090:	7a21      	ldrb	r1, [r4, #8]
 8016092:	6860      	ldr	r0, [r4, #4]
 8016094:	f003 f9f8 	bl	8019488 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016098:	8020      	strh	r0, [r4, #0]
 801609a:	b9d8      	cbnz	r0, 80160d4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 801609c:	8ba2      	ldrh	r2, [r4, #28]
 801609e:	2300      	movs	r3, #0
 80160a0:	4611      	mov	r1, r2
 80160a2:	4620      	mov	r0, r4
 80160a4:	f7ff ff91 	bl	8015fca <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80160a8:	e06e      	b.n	8016188 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 80160aa:	2500      	movs	r5, #0
 80160ac:	2701      	movs	r7, #1
 80160ae:	46a9      	mov	r9, r5
 80160b0:	462e      	mov	r6, r5
 80160b2:	e7ca      	b.n	801604a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80160b4:	42b7      	cmp	r7, r6
 80160b6:	f04f 0500 	mov.w	r5, #0
 80160ba:	bfb4      	ite	lt
 80160bc:	2700      	movlt	r7, #0
 80160be:	2701      	movge	r7, #1
 80160c0:	462e      	mov	r6, r5
 80160c2:	e7c2      	b.n	801604a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80160c4:	2500      	movs	r5, #0
 80160c6:	2601      	movs	r6, #1
 80160c8:	46a9      	mov	r9, r5
 80160ca:	e7ad      	b.n	8016028 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 80160cc:	9301      	str	r3, [sp, #4]
 80160ce:	f04f 0a01 	mov.w	sl, #1
 80160d2:	e7db      	b.n	801608c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 80160d4:	8b63      	ldrh	r3, [r4, #26]
 80160d6:	280a      	cmp	r0, #10
 80160d8:	f103 0301 	add.w	r3, r3, #1
 80160dc:	8363      	strh	r3, [r4, #26]
 80160de:	d0dd      	beq.n	801609c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 80160e0:	9a03      	ldr	r2, [sp, #12]
 80160e2:	bb62      	cbnz	r2, 801613e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 80160e4:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80160e8:	4298      	cmp	r0, r3
 80160ea:	d003      	beq.n	80160f4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 80160ec:	f242 030b 	movw	r3, #8203	@ 0x200b
 80160f0:	4298      	cmp	r0, r3
 80160f2:	d1b2      	bne.n	801605a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80160f4:	8823      	ldrh	r3, [r4, #0]
 80160f6:	8ba1      	ldrh	r1, [r4, #28]
 80160f8:	2b20      	cmp	r3, #32
 80160fa:	d003      	beq.n	8016104 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 80160fc:	f242 000b 	movw	r0, #8203	@ 0x200b
 8016100:	4283      	cmp	r3, r0
 8016102:	d131      	bne.n	8016168 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 8016104:	f1ba 0f00 	cmp.w	sl, #0
 8016108:	bf0a      	itet	eq
 801610a:	4688      	moveq	r8, r1
 801610c:	4650      	movne	r0, sl
 801610e:	2001      	moveq	r0, #1
 8016110:	440a      	add	r2, r1
 8016112:	8b23      	ldrh	r3, [r4, #24]
 8016114:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8016118:	b292      	uxth	r2, r2
 801611a:	83a2      	strh	r2, [r4, #28]
 801611c:	4413      	add	r3, r2
 801611e:	f1b9 0f00 	cmp.w	r9, #0
 8016122:	d102      	bne.n	801612a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 8016124:	2d00      	cmp	r5, #0
 8016126:	d042      	beq.n	80161ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 8016128:	b300      	cbz	r0, 801616c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 801612a:	8c21      	ldrh	r1, [r4, #32]
 801612c:	4419      	add	r1, r3
 801612e:	458c      	cmp	ip, r1
 8016130:	da37      	bge.n	80161a2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8016132:	8ae1      	ldrh	r1, [r4, #22]
 8016134:	2900      	cmp	r1, #0
 8016136:	d034      	beq.n	80161a2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8016138:	4563      	cmp	r3, ip
 801613a:	dd8e      	ble.n	801605a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801613c:	e01d      	b.n	801617a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 801613e:	8893      	ldrh	r3, [r2, #4]
 8016140:	9901      	ldr	r1, [sp, #4]
 8016142:	8023      	strh	r3, [r4, #0]
 8016144:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8016148:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 801614c:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 8016150:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8016154:	ea4b 0b00 	orr.w	fp, fp, r0
 8016158:	68e0      	ldr	r0, [r4, #12]
 801615a:	6803      	ldr	r3, [r0, #0]
 801615c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801615e:	4798      	blx	r3
 8016160:	eb0b 0200 	add.w	r2, fp, r0
 8016164:	b292      	uxth	r2, r2
 8016166:	e7c5      	b.n	80160f4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8016168:	2000      	movs	r0, #0
 801616a:	e7d1      	b.n	8016110 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 801616c:	4563      	cmp	r3, ip
 801616e:	f77f af74 	ble.w	801605a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8016172:	8ae3      	ldrh	r3, [r4, #22]
 8016174:	2b00      	cmp	r3, #0
 8016176:	f43f af70 	beq.w	801605a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801617a:	2301      	movs	r3, #1
 801617c:	8c22      	ldrh	r2, [r4, #32]
 801617e:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 8016182:	8be3      	ldrh	r3, [r4, #30]
 8016184:	4413      	add	r3, r2
 8016186:	83e3      	strh	r3, [r4, #30]
 8016188:	68e0      	ldr	r0, [r4, #12]
 801618a:	6803      	ldr	r3, [r0, #0]
 801618c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801618e:	4798      	blx	r3
 8016190:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8016194:	4418      	add	r0, r3
 8016196:	8a63      	ldrh	r3, [r4, #18]
 8016198:	1a18      	subs	r0, r3, r0
 801619a:	8260      	strh	r0, [r4, #18]
 801619c:	b005      	add	sp, #20
 801619e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161a2:	2300      	movs	r3, #0
 80161a4:	4611      	mov	r1, r2
 80161a6:	4620      	mov	r0, r4
 80161a8:	f7ff ff0f 	bl	8015fca <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80161ac:	e755      	b.n	801605a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80161ae:	4563      	cmp	r3, ip
 80161b0:	dd14      	ble.n	80161dc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 80161b2:	b117      	cbz	r7, 80161ba <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 80161b4:	2301      	movs	r3, #1
 80161b6:	460a      	mov	r2, r1
 80161b8:	e772      	b.n	80160a0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 80161ba:	2e00      	cmp	r6, #0
 80161bc:	f43f af4d 	beq.w	801605a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80161c0:	2800      	cmp	r0, #0
 80161c2:	f47f af4a 	bne.w	801605a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80161c6:	f1ba 0f00 	cmp.w	sl, #0
 80161ca:	d002      	beq.n	80161d2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 80161cc:	2301      	movs	r3, #1
 80161ce:	4642      	mov	r2, r8
 80161d0:	e767      	b.n	80160a2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 80161d2:	8ae3      	ldrh	r3, [r4, #22]
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	f43f af40 	beq.w	801605a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80161da:	e7d5      	b.n	8016188 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 80161dc:	2800      	cmp	r0, #0
 80161de:	f47f af3c 	bne.w	801605a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80161e2:	f1ba 0f00 	cmp.w	sl, #0
 80161e6:	f43f af38 	beq.w	801605a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80161ea:	2301      	movs	r3, #1
 80161ec:	4642      	mov	r2, r8
 80161ee:	e7da      	b.n	80161a6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

080161f0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 80161f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80161f2:	4605      	mov	r5, r0
 80161f4:	b08f      	sub	sp, #60	@ 0x3c
 80161f6:	4617      	mov	r7, r2
 80161f8:	461c      	mov	r4, r3
 80161fa:	460e      	mov	r6, r1
 80161fc:	b1d1      	cbz	r1, 8016234 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 80161fe:	681b      	ldr	r3, [r3, #0]
 8016200:	4620      	mov	r0, r4
 8016202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016204:	4798      	blx	r3
 8016206:	4240      	negs	r0, r0
 8016208:	9603      	str	r6, [sp, #12]
 801620a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801620e:	b200      	sxth	r0, r0
 8016210:	9700      	str	r7, [sp, #0]
 8016212:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 8016216:	4629      	mov	r1, r5
 8016218:	e9cd 4001 	strd	r4, r0, [sp, #4]
 801621c:	2401      	movs	r4, #1
 801621e:	a805      	add	r0, sp, #20
 8016220:	f7ff fcaa 	bl	8015b78 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8016224:	a805      	add	r0, sp, #20
 8016226:	f7ff fee0 	bl	8015fea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801622a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801622e:	b163      	cbz	r3, 801624a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 8016230:	3401      	adds	r4, #1
 8016232:	e7f7      	b.n	8016224 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8016234:	2401      	movs	r4, #1
 8016236:	f003 f9f3 	bl	8019620 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801623a:	280a      	cmp	r0, #10
 801623c:	4628      	mov	r0, r5
 801623e:	bf08      	it	eq
 8016240:	3401      	addeq	r4, #1
 8016242:	f003 f9ed 	bl	8019620 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016246:	2800      	cmp	r0, #0
 8016248:	d1f7      	bne.n	801623a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801624a:	b2a0      	uxth	r0, r4
 801624c:	b00f      	add	sp, #60	@ 0x3c
 801624e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016250 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8016250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016254:	b0e3      	sub	sp, #396	@ 0x18c
 8016256:	461c      	mov	r4, r3
 8016258:	4683      	mov	fp, r0
 801625a:	4688      	mov	r8, r1
 801625c:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 801625e:	2b00      	cmp	r3, #0
 8016260:	f000 8112 	beq.w	8016488 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016264:	6823      	ldr	r3, [r4, #0]
 8016266:	2b00      	cmp	r3, #0
 8016268:	f000 810e 	beq.w	8016488 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801626c:	7ba3      	ldrb	r3, [r4, #14]
 801626e:	2b00      	cmp	r3, #0
 8016270:	f000 810a 	beq.w	8016488 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016274:	ad0a      	add	r5, sp, #40	@ 0x28
 8016276:	6810      	ldr	r0, [r2, #0]
 8016278:	6851      	ldr	r1, [r2, #4]
 801627a:	462b      	mov	r3, r5
 801627c:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8016280:	c303      	stmia	r3!, {r0, r1}
 8016282:	2100      	movs	r1, #0
 8016284:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8016288:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 801628c:	4628      	mov	r0, r5
 801628e:	910c      	str	r1, [sp, #48]	@ 0x30
 8016290:	a90c      	add	r1, sp, #48	@ 0x30
 8016292:	79a2      	ldrb	r2, [r4, #6]
 8016294:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8016298:	f7ff fced 	bl	8015c76 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801629c:	a90c      	add	r1, sp, #48	@ 0x30
 801629e:	79a2      	ldrb	r2, [r4, #6]
 80162a0:	4608      	mov	r0, r1
 80162a2:	f7ff fce8 	bl	8015c76 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80162a6:	a817      	add	r0, sp, #92	@ 0x5c
 80162a8:	f002 fd60 	bl	8018d6c <_ZN8touchgfx12TextProviderC1Ev>
 80162ac:	6820      	ldr	r0, [r4, #0]
 80162ae:	6803      	ldr	r3, [r0, #0]
 80162b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80162b2:	4798      	blx	r3
 80162b4:	4606      	mov	r6, r0
 80162b6:	6820      	ldr	r0, [r4, #0]
 80162b8:	6803      	ldr	r3, [r0, #0]
 80162ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80162bc:	4798      	blx	r3
 80162be:	4633      	mov	r3, r6
 80162c0:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 80162c2:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 80162c4:	9000      	str	r0, [sp, #0]
 80162c6:	a817      	add	r0, sp, #92	@ 0x5c
 80162c8:	f002 fdab 	bl	8018e22 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80162cc:	6820      	ldr	r0, [r4, #0]
 80162ce:	f894 a004 	ldrb.w	sl, [r4, #4]
 80162d2:	6803      	ldr	r3, [r0, #0]
 80162d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80162d6:	4798      	blx	r3
 80162d8:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80162dc:	6823      	ldr	r3, [r4, #0]
 80162de:	4607      	mov	r7, r0
 80162e0:	4406      	add	r6, r0
 80162e2:	a830      	add	r0, sp, #192	@ 0xc0
 80162e4:	f893 9009 	ldrb.w	r9, [r3, #9]
 80162e8:	f002 fd40 	bl	8018d6c <_ZN8touchgfx12TextProviderC1Ev>
 80162ec:	7c23      	ldrb	r3, [r4, #16]
 80162ee:	b17b      	cbz	r3, 8016310 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 80162f0:	6820      	ldr	r0, [r4, #0]
 80162f2:	6803      	ldr	r3, [r0, #0]
 80162f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80162f6:	4798      	blx	r3
 80162f8:	9009      	str	r0, [sp, #36]	@ 0x24
 80162fa:	6820      	ldr	r0, [r4, #0]
 80162fc:	6802      	ldr	r2, [r0, #0]
 80162fe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8016300:	4790      	blx	r2
 8016302:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016304:	9000      	str	r0, [sp, #0]
 8016306:	a830      	add	r0, sp, #192	@ 0xc0
 8016308:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 801630a:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 801630c:	f002 fd89 	bl	8018e22 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016310:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8016314:	a80e      	add	r0, sp, #56	@ 0x38
 8016316:	7be2      	ldrb	r2, [r4, #15]
 8016318:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 801631c:	1a8a      	subs	r2, r1, r2
 801631e:	7c21      	ldrb	r1, [r4, #16]
 8016320:	9103      	str	r1, [sp, #12]
 8016322:	b292      	uxth	r2, r2
 8016324:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8016328:	9102      	str	r1, [sp, #8]
 801632a:	6821      	ldr	r1, [r4, #0]
 801632c:	9101      	str	r1, [sp, #4]
 801632e:	7961      	ldrb	r1, [r4, #5]
 8016330:	9100      	str	r1, [sp, #0]
 8016332:	a930      	add	r1, sp, #192	@ 0xc0
 8016334:	f7ff fc20 	bl	8015b78 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8016338:	2e00      	cmp	r6, #0
 801633a:	dc5b      	bgt.n	80163f4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 801633c:	af17      	add	r7, sp, #92	@ 0x5c
 801633e:	f04f 0900 	mov.w	r9, #0
 8016342:	7c23      	ldrb	r3, [r4, #16]
 8016344:	2b00      	cmp	r3, #0
 8016346:	f000 80b1 	beq.w	80164ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801634a:	a80e      	add	r0, sp, #56	@ 0x38
 801634c:	f7ff fe4d 	bl	8015fea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8016350:	f1ba 0f00 	cmp.w	sl, #0
 8016354:	f000 80a5 	beq.w	80164a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8016358:	7c23      	ldrb	r3, [r4, #16]
 801635a:	2264      	movs	r2, #100	@ 0x64
 801635c:	4639      	mov	r1, r7
 801635e:	a849      	add	r0, sp, #292	@ 0x124
 8016360:	9309      	str	r3, [sp, #36]	@ 0x24
 8016362:	f00f fab6 	bl	80258d2 <memcpy>
 8016366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016368:	2b00      	cmp	r3, #0
 801636a:	f000 80a7 	beq.w	80164bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801636e:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 8016372:	7922      	ldrb	r2, [r4, #4]
 8016374:	2a01      	cmp	r2, #1
 8016376:	f040 808a 	bne.w	801648e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 801637a:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 801637e:	1ac0      	subs	r0, r0, r3
 8016380:	2302      	movs	r3, #2
 8016382:	fb90 f0f3 	sdiv	r0, r0, r3
 8016386:	b200      	sxth	r0, r0
 8016388:	7c23      	ldrb	r3, [r4, #16]
 801638a:	2b00      	cmp	r3, #0
 801638c:	f000 808b 	beq.w	80164a6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8016390:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 8016394:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 8016398:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801639c:	e9cd 2105 	strd	r2, r1, [sp, #20]
 80163a0:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 80163a4:	2100      	movs	r1, #0
 80163a6:	4410      	add	r0, r2
 80163a8:	4642      	mov	r2, r8
 80163aa:	b200      	sxth	r0, r0
 80163ac:	e9cd 9703 	strd	r9, r7, [sp, #12]
 80163b0:	9000      	str	r0, [sp, #0]
 80163b2:	4658      	mov	r0, fp
 80163b4:	e9cd 5401 	strd	r5, r4, [sp, #4]
 80163b8:	f7ff fc8e 	bl	8015cd8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 80163bc:	2800      	cmp	r0, #0
 80163be:	d163      	bne.n	8016488 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80163c0:	b2b2      	uxth	r2, r6
 80163c2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 80163c6:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 80163ca:	4413      	add	r3, r2
 80163cc:	1a8a      	subs	r2, r1, r2
 80163ce:	b21b      	sxth	r3, r3
 80163d0:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 80163d4:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 80163d8:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80163dc:	2a00      	cmp	r2, #0
 80163de:	d153      	bne.n	8016488 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80163e0:	6822      	ldr	r2, [r4, #0]
 80163e2:	8869      	ldrh	r1, [r5, #2]
 80163e4:	7a12      	ldrb	r2, [r2, #8]
 80163e6:	1a9b      	subs	r3, r3, r2
 80163e8:	88ea      	ldrh	r2, [r5, #6]
 80163ea:	440a      	add	r2, r1
 80163ec:	b212      	sxth	r2, r2
 80163ee:	4293      	cmp	r3, r2
 80163f0:	dda7      	ble.n	8016342 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 80163f2:	e049      	b.n	8016488 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80163f4:	7c23      	ldrb	r3, [r4, #16]
 80163f6:	444f      	add	r7, r9
 80163f8:	b1c3      	cbz	r3, 801642c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 80163fa:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 80163fe:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8016402:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8016406:	443b      	add	r3, r7
 8016408:	4293      	cmp	r3, r2
 801640a:	da97      	bge.n	801633c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801640c:	a80e      	add	r0, sp, #56	@ 0x38
 801640e:	f7ff fdec 	bl	8015fea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8016412:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 8016416:	3b01      	subs	r3, #1
 8016418:	b29b      	uxth	r3, r3
 801641a:	454b      	cmp	r3, r9
 801641c:	9309      	str	r3, [sp, #36]	@ 0x24
 801641e:	d021      	beq.n	8016464 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 8016420:	7961      	ldrb	r1, [r4, #5]
 8016422:	a817      	add	r0, sp, #92	@ 0x5c
 8016424:	f7f0 fa8a 	bl	800693c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801642a:	e7f4      	b.n	8016416 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 801642c:	fa1f f986 	uxth.w	r9, r6
 8016430:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8016434:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8016438:	443b      	add	r3, r7
 801643a:	4293      	cmp	r3, r2
 801643c:	f6bf af7e 	bge.w	801633c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8016440:	a817      	add	r0, sp, #92	@ 0x5c
 8016442:	f003 f8ed 	bl	8019620 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016446:	b1f8      	cbz	r0, 8016488 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016448:	280a      	cmp	r0, #10
 801644a:	d1f1      	bne.n	8016430 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801644c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8016450:	444b      	add	r3, r9
 8016452:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8016456:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 801645a:	eba3 0309 	sub.w	r3, r3, r9
 801645e:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8016462:	e7e5      	b.n	8016430 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8016464:	b2b3      	uxth	r3, r6
 8016466:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801646a:	441a      	add	r2, r3
 801646c:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8016470:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 8016474:	1ad3      	subs	r3, r2, r3
 8016476:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801647a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801647e:	b11b      	cbz	r3, 8016488 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016480:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 8016484:	2b00      	cmp	r3, #0
 8016486:	d0ba      	beq.n	80163fe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8016488:	b063      	add	sp, #396	@ 0x18c
 801648a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801648e:	2a02      	cmp	r2, #2
 8016490:	d105      	bne.n	801649e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 8016492:	7be2      	ldrb	r2, [r4, #15]
 8016494:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8016498:	1a80      	subs	r0, r0, r2
 801649a:	1ac0      	subs	r0, r0, r3
 801649c:	e773      	b.n	8016386 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 801649e:	2000      	movs	r0, #0
 80164a0:	e772      	b.n	8016388 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 80164a2:	7be0      	ldrb	r0, [r4, #15]
 80164a4:	e770      	b.n	8016388 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 80164a6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80164aa:	e773      	b.n	8016394 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 80164ac:	f1ba 0f00 	cmp.w	sl, #0
 80164b0:	d0f7      	beq.n	80164a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 80164b2:	2264      	movs	r2, #100	@ 0x64
 80164b4:	4639      	mov	r1, r7
 80164b6:	a849      	add	r0, sp, #292	@ 0x124
 80164b8:	f00f fa0b 	bl	80258d2 <memcpy>
 80164bc:	2300      	movs	r3, #0
 80164be:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80164c2:	6821      	ldr	r1, [r4, #0]
 80164c4:	a849      	add	r0, sp, #292	@ 0x124
 80164c6:	f7ff fb9a 	bl	8015bfe <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80164ca:	b203      	sxth	r3, r0
 80164cc:	e751      	b.n	8016372 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

080164ce <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80164ce:	2b03      	cmp	r3, #3
 80164d0:	d818      	bhi.n	8016504 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 80164d2:	e8df f003 	tbb	[pc, r3]
 80164d6:	0602      	.short	0x0602
 80164d8:	130d      	.short	0x130d
 80164da:	f9b0 2000 	ldrsh.w	r2, [r0]
 80164de:	1850      	adds	r0, r2, r1
 80164e0:	4770      	bx	lr
 80164e2:	8803      	ldrh	r3, [r0, #0]
 80164e4:	8880      	ldrh	r0, [r0, #4]
 80164e6:	4418      	add	r0, r3
 80164e8:	b200      	sxth	r0, r0
 80164ea:	1a80      	subs	r0, r0, r2
 80164ec:	3801      	subs	r0, #1
 80164ee:	4770      	bx	lr
 80164f0:	8803      	ldrh	r3, [r0, #0]
 80164f2:	8880      	ldrh	r0, [r0, #4]
 80164f4:	4418      	add	r0, r3
 80164f6:	b200      	sxth	r0, r0
 80164f8:	1a40      	subs	r0, r0, r1
 80164fa:	e7f7      	b.n	80164ec <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80164fc:	f9b0 0000 	ldrsh.w	r0, [r0]
 8016500:	4410      	add	r0, r2
 8016502:	4770      	bx	lr
 8016504:	2000      	movs	r0, #0
 8016506:	4770      	bx	lr

08016508 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8016508:	2b03      	cmp	r3, #3
 801650a:	d817      	bhi.n	801653c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801650c:	e8df f003 	tbb	[pc, r3]
 8016510:	10090602 	.word	0x10090602
 8016514:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8016518:	1850      	adds	r0, r2, r1
 801651a:	4770      	bx	lr
 801651c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8016520:	e7fa      	b.n	8016518 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8016522:	8843      	ldrh	r3, [r0, #2]
 8016524:	88c0      	ldrh	r0, [r0, #6]
 8016526:	4418      	add	r0, r3
 8016528:	b200      	sxth	r0, r0
 801652a:	1a80      	subs	r0, r0, r2
 801652c:	3801      	subs	r0, #1
 801652e:	4770      	bx	lr
 8016530:	8843      	ldrh	r3, [r0, #2]
 8016532:	88c0      	ldrh	r0, [r0, #6]
 8016534:	4418      	add	r0, r3
 8016536:	b200      	sxth	r0, r0
 8016538:	1a40      	subs	r0, r0, r1
 801653a:	e7f7      	b.n	801652c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801653c:	2000      	movs	r0, #0
 801653e:	4770      	bx	lr

08016540 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8016540:	4b01      	ldr	r3, [pc, #4]	@ (8016548 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8016542:	2200      	movs	r2, #0
 8016544:	601a      	str	r2, [r3, #0]
 8016546:	4770      	bx	lr
 8016548:	24026428 	.word	0x24026428

0801654c <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801654c:	4603      	mov	r3, r0
 801654e:	b1c8      	cbz	r0, 8016584 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8016550:	0c02      	lsrs	r2, r0, #16
 8016552:	0412      	lsls	r2, r2, #16
 8016554:	b9a2      	cbnz	r2, 8016580 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8016556:	0403      	lsls	r3, r0, #16
 8016558:	2010      	movs	r0, #16
 801655a:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801655e:	bf04      	itt	eq
 8016560:	021b      	lsleq	r3, r3, #8
 8016562:	3008      	addeq	r0, #8
 8016564:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 8016568:	bf04      	itt	eq
 801656a:	011b      	lsleq	r3, r3, #4
 801656c:	3004      	addeq	r0, #4
 801656e:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 8016572:	bf04      	itt	eq
 8016574:	009b      	lsleq	r3, r3, #2
 8016576:	3002      	addeq	r0, #2
 8016578:	2b00      	cmp	r3, #0
 801657a:	db04      	blt.n	8016586 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801657c:	3001      	adds	r0, #1
 801657e:	4770      	bx	lr
 8016580:	2000      	movs	r0, #0
 8016582:	e7ea      	b.n	801655a <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8016584:	2020      	movs	r0, #32
 8016586:	4770      	bx	lr

08016588 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8016588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801658c:	b087      	sub	sp, #28
 801658e:	460d      	mov	r5, r1
 8016590:	4616      	mov	r6, r2
 8016592:	4698      	mov	r8, r3
 8016594:	4601      	mov	r1, r0
 8016596:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 801659a:	b120      	cbz	r0, 80165a6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801659c:	b11a      	cbz	r2, 80165a6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801659e:	2d1f      	cmp	r5, #31
 80165a0:	d801      	bhi.n	80165a6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80165a2:	2b1f      	cmp	r3, #31
 80165a4:	d904      	bls.n	80165b0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 80165a6:	2000      	movs	r0, #0
 80165a8:	6038      	str	r0, [r7, #0]
 80165aa:	b007      	add	sp, #28
 80165ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165b0:	b97d      	cbnz	r5, 80165d2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 80165b2:	b143      	cbz	r3, 80165c6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 80165b4:	4602      	mov	r2, r0
 80165b6:	462b      	mov	r3, r5
 80165b8:	4641      	mov	r1, r8
 80165ba:	4630      	mov	r0, r6
 80165bc:	e9cd 4700 	strd	r4, r7, [sp]
 80165c0:	f7ff ffe2 	bl	8016588 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80165c4:	e7f1      	b.n	80165aa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80165c6:	f04f 33ff 	mov.w	r3, #4294967295
 80165ca:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80165ce:	603b      	str	r3, [r7, #0]
 80165d0:	e7eb      	b.n	80165aa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80165d2:	fa32 fa05 	lsrs.w	sl, r2, r5
 80165d6:	d106      	bne.n	80165e6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 80165d8:	4346      	muls	r6, r0
 80165da:	fbb6 f0f4 	udiv	r0, r6, r4
 80165de:	fb04 6610 	mls	r6, r4, r0, r6
 80165e2:	603e      	str	r6, [r7, #0]
 80165e4:	e7e1      	b.n	80165aa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80165e6:	2201      	movs	r2, #1
 80165e8:	fa00 fb05 	lsl.w	fp, r0, r5
 80165ec:	40aa      	lsls	r2, r5
 80165ee:	fbbb f9f4 	udiv	r9, fp, r4
 80165f2:	3a01      	subs	r2, #1
 80165f4:	fb0a f309 	mul.w	r3, sl, r9
 80165f8:	fb04 b919 	mls	r9, r4, r9, fp
 80165fc:	4016      	ands	r6, r2
 80165fe:	9303      	str	r3, [sp, #12]
 8016600:	4630      	mov	r0, r6
 8016602:	f7ff ffa3 	bl	801654c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016606:	462b      	mov	r3, r5
 8016608:	460a      	mov	r2, r1
 801660a:	4601      	mov	r1, r0
 801660c:	4630      	mov	r0, r6
 801660e:	e9cd 4700 	strd	r4, r7, [sp]
 8016612:	f7ff ffb9 	bl	8016588 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016616:	4606      	mov	r6, r0
 8016618:	4648      	mov	r0, r9
 801661a:	eb05 0108 	add.w	r1, r5, r8
 801661e:	f7ff ff95 	bl	801654c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016622:	ab05      	add	r3, sp, #20
 8016624:	464a      	mov	r2, r9
 8016626:	e9cd 4300 	strd	r4, r3, [sp]
 801662a:	4603      	mov	r3, r0
 801662c:	4650      	mov	r0, sl
 801662e:	f7ff ffab 	bl	8016588 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016632:	6839      	ldr	r1, [r7, #0]
 8016634:	9a05      	ldr	r2, [sp, #20]
 8016636:	9b03      	ldr	r3, [sp, #12]
 8016638:	4411      	add	r1, r2
 801663a:	fbb1 f2f4 	udiv	r2, r1, r4
 801663e:	18d3      	adds	r3, r2, r3
 8016640:	fb04 1412 	mls	r4, r4, r2, r1
 8016644:	441e      	add	r6, r3
 8016646:	603c      	str	r4, [r7, #0]
 8016648:	4430      	add	r0, r6
 801664a:	e7ae      	b.n	80165aa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0801664c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801664c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016650:	b085      	sub	sp, #20
 8016652:	f1b0 0900 	subs.w	r9, r0, #0
 8016656:	461d      	mov	r5, r3
 8016658:	4617      	mov	r7, r2
 801665a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801665c:	bfbb      	ittet	lt
 801665e:	f1c9 0900 	rsblt	r9, r9, #0
 8016662:	f04f 36ff 	movlt.w	r6, #4294967295
 8016666:	2601      	movge	r6, #1
 8016668:	6823      	ldrlt	r3, [r4, #0]
 801666a:	bfbc      	itt	lt
 801666c:	425b      	neglt	r3, r3
 801666e:	6023      	strlt	r3, [r4, #0]
 8016670:	2a00      	cmp	r2, #0
 8016672:	da04      	bge.n	801667e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8016674:	6823      	ldr	r3, [r4, #0]
 8016676:	4257      	negs	r7, r2
 8016678:	4276      	negs	r6, r6
 801667a:	425b      	negs	r3, r3
 801667c:	6023      	str	r3, [r4, #0]
 801667e:	2d00      	cmp	r5, #0
 8016680:	4638      	mov	r0, r7
 8016682:	bfba      	itte	lt
 8016684:	426d      	neglt	r5, r5
 8016686:	f04f 38ff 	movlt.w	r8, #4294967295
 801668a:	f04f 0801 	movge.w	r8, #1
 801668e:	f7ff ff5d 	bl	801654c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016692:	ab03      	add	r3, sp, #12
 8016694:	463a      	mov	r2, r7
 8016696:	e9cd 5300 	strd	r5, r3, [sp]
 801669a:	4603      	mov	r3, r0
 801669c:	4648      	mov	r0, r9
 801669e:	f7ff ff73 	bl	8016588 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80166a2:	6823      	ldr	r3, [r4, #0]
 80166a4:	9a03      	ldr	r2, [sp, #12]
 80166a6:	4546      	cmp	r6, r8
 80166a8:	441a      	add	r2, r3
 80166aa:	fb92 f3f5 	sdiv	r3, r2, r5
 80166ae:	4418      	add	r0, r3
 80166b0:	fb05 2313 	mls	r3, r5, r3, r2
 80166b4:	bf18      	it	ne
 80166b6:	4240      	negne	r0, r0
 80166b8:	1c72      	adds	r2, r6, #1
 80166ba:	6023      	str	r3, [r4, #0]
 80166bc:	d105      	bne.n	80166ca <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 80166be:	2b00      	cmp	r3, #0
 80166c0:	f1c3 0200 	rsb	r2, r3, #0
 80166c4:	db0b      	blt.n	80166de <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 80166c6:	6022      	str	r2, [r4, #0]
 80166c8:	e006      	b.n	80166d8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80166ca:	2e01      	cmp	r6, #1
 80166cc:	d104      	bne.n	80166d8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	da02      	bge.n	80166d8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80166d2:	442b      	add	r3, r5
 80166d4:	3801      	subs	r0, #1
 80166d6:	6023      	str	r3, [r4, #0]
 80166d8:	b005      	add	sp, #20
 80166da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80166de:	3801      	subs	r0, #1
 80166e0:	1b52      	subs	r2, r2, r5
 80166e2:	e7f0      	b.n	80166c6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

080166e4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80166e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80166e8:	4c1c      	ldr	r4, [pc, #112]	@ (801675c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80166ea:	4605      	mov	r5, r0
 80166ec:	6807      	ldr	r7, [r0, #0]
 80166ee:	69a3      	ldr	r3, [r4, #24]
 80166f0:	b92b      	cbnz	r3, 80166fe <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 80166f2:	6840      	ldr	r0, [r0, #4]
 80166f4:	e9c5 7000 	strd	r7, r0, [r5]
 80166f8:	b004      	add	sp, #16
 80166fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166fe:	f04f 0802 	mov.w	r8, #2
 8016702:	68a2      	ldr	r2, [r4, #8]
 8016704:	ae04      	add	r6, sp, #16
 8016706:	6820      	ldr	r0, [r4, #0]
 8016708:	fb93 f1f8 	sdiv	r1, r3, r8
 801670c:	440a      	add	r2, r1
 801670e:	69e1      	ldr	r1, [r4, #28]
 8016710:	f846 2d04 	str.w	r2, [r6, #-4]!
 8016714:	463a      	mov	r2, r7
 8016716:	9600      	str	r6, [sp, #0]
 8016718:	f7ff ff98 	bl	801664c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801671c:	69a3      	ldr	r3, [r4, #24]
 801671e:	4607      	mov	r7, r0
 8016720:	686a      	ldr	r2, [r5, #4]
 8016722:	6a21      	ldr	r1, [r4, #32]
 8016724:	9600      	str	r6, [sp, #0]
 8016726:	6860      	ldr	r0, [r4, #4]
 8016728:	f7ff ff90 	bl	801664c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801672c:	69a3      	ldr	r3, [r4, #24]
 801672e:	6962      	ldr	r2, [r4, #20]
 8016730:	4407      	add	r7, r0
 8016732:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8016734:	9600      	str	r6, [sp, #0]
 8016736:	68e0      	ldr	r0, [r4, #12]
 8016738:	fb93 f8f8 	sdiv	r8, r3, r8
 801673c:	4442      	add	r2, r8
 801673e:	9203      	str	r2, [sp, #12]
 8016740:	682a      	ldr	r2, [r5, #0]
 8016742:	f7ff ff83 	bl	801664c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016746:	4680      	mov	r8, r0
 8016748:	9600      	str	r6, [sp, #0]
 801674a:	69a3      	ldr	r3, [r4, #24]
 801674c:	686a      	ldr	r2, [r5, #4]
 801674e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8016750:	6920      	ldr	r0, [r4, #16]
 8016752:	f7ff ff7b 	bl	801664c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016756:	4440      	add	r0, r8
 8016758:	e7cc      	b.n	80166f4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801675a:	bf00      	nop
 801675c:	2402642c 	.word	0x2402642c

08016760 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8016760:	4b07      	ldr	r3, [pc, #28]	@ (8016780 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8016762:	781b      	ldrb	r3, [r3, #0]
 8016764:	2b01      	cmp	r3, #1
 8016766:	d109      	bne.n	801677c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8016768:	f9b1 3000 	ldrsh.w	r3, [r1]
 801676c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016770:	8003      	strh	r3, [r0, #0]
 8016772:	4b04      	ldr	r3, [pc, #16]	@ (8016784 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8016774:	881b      	ldrh	r3, [r3, #0]
 8016776:	3b01      	subs	r3, #1
 8016778:	1a9b      	subs	r3, r3, r2
 801677a:	800b      	strh	r3, [r1, #0]
 801677c:	4770      	bx	lr
 801677e:	bf00      	nop
 8016780:	24026410 	.word	0x24026410
 8016784:	2402640c 	.word	0x2402640c

08016788 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8016788:	4b07      	ldr	r3, [pc, #28]	@ (80167a8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801678a:	b510      	push	{r4, lr}
 801678c:	781b      	ldrb	r3, [r3, #0]
 801678e:	2b01      	cmp	r3, #1
 8016790:	d108      	bne.n	80167a4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8016792:	4b06      	ldr	r3, [pc, #24]	@ (80167ac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8016794:	880c      	ldrh	r4, [r1, #0]
 8016796:	881b      	ldrh	r3, [r3, #0]
 8016798:	f9b0 2000 	ldrsh.w	r2, [r0]
 801679c:	3b01      	subs	r3, #1
 801679e:	1b1b      	subs	r3, r3, r4
 80167a0:	8003      	strh	r3, [r0, #0]
 80167a2:	800a      	strh	r2, [r1, #0]
 80167a4:	bd10      	pop	{r4, pc}
 80167a6:	bf00      	nop
 80167a8:	24026410 	.word	0x24026410
 80167ac:	2402640c 	.word	0x2402640c

080167b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80167b0:	4b0a      	ldr	r3, [pc, #40]	@ (80167dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80167b2:	b510      	push	{r4, lr}
 80167b4:	781b      	ldrb	r3, [r3, #0]
 80167b6:	2b01      	cmp	r3, #1
 80167b8:	d10e      	bne.n	80167d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80167ba:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80167be:	8843      	ldrh	r3, [r0, #2]
 80167c0:	f9b0 4000 	ldrsh.w	r4, [r0]
 80167c4:	18ca      	adds	r2, r1, r3
 80167c6:	4b06      	ldr	r3, [pc, #24]	@ (80167e0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 80167c8:	8044      	strh	r4, [r0, #2]
 80167ca:	881b      	ldrh	r3, [r3, #0]
 80167cc:	1a9b      	subs	r3, r3, r2
 80167ce:	8003      	strh	r3, [r0, #0]
 80167d0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80167d4:	8081      	strh	r1, [r0, #4]
 80167d6:	80c3      	strh	r3, [r0, #6]
 80167d8:	bd10      	pop	{r4, pc}
 80167da:	bf00      	nop
 80167dc:	24026410 	.word	0x24026410
 80167e0:	2402640c 	.word	0x2402640c

080167e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80167e4:	4b08      	ldr	r3, [pc, #32]	@ (8016808 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 80167e6:	781b      	ldrb	r3, [r3, #0]
 80167e8:	2b01      	cmp	r3, #1
 80167ea:	d10c      	bne.n	8016806 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 80167ec:	8803      	ldrh	r3, [r0, #0]
 80167ee:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80167f2:	8842      	ldrh	r2, [r0, #2]
 80167f4:	8002      	strh	r2, [r0, #0]
 80167f6:	185a      	adds	r2, r3, r1
 80167f8:	4b04      	ldr	r3, [pc, #16]	@ (801680c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80167fa:	881b      	ldrh	r3, [r3, #0]
 80167fc:	1a9b      	subs	r3, r3, r2
 80167fe:	8043      	strh	r3, [r0, #2]
 8016800:	88c3      	ldrh	r3, [r0, #6]
 8016802:	80c1      	strh	r1, [r0, #6]
 8016804:	8083      	strh	r3, [r0, #4]
 8016806:	4770      	bx	lr
 8016808:	24026410 	.word	0x24026410
 801680c:	2402640c 	.word	0x2402640c

08016810 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8016810:	4b07      	ldr	r3, [pc, #28]	@ (8016830 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8016812:	b510      	push	{r4, lr}
 8016814:	781b      	ldrb	r3, [r3, #0]
 8016816:	2b01      	cmp	r3, #1
 8016818:	d108      	bne.n	801682c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801681a:	f9b1 3000 	ldrsh.w	r3, [r1]
 801681e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016822:	8003      	strh	r3, [r0, #0]
 8016824:	8893      	ldrh	r3, [r2, #4]
 8016826:	3b01      	subs	r3, #1
 8016828:	1b1b      	subs	r3, r3, r4
 801682a:	800b      	strh	r3, [r1, #0]
 801682c:	bd10      	pop	{r4, pc}
 801682e:	bf00      	nop
 8016830:	24026410 	.word	0x24026410

08016834 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8016834:	4b0a      	ldr	r3, [pc, #40]	@ (8016860 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8016836:	460a      	mov	r2, r1
 8016838:	b510      	push	{r4, lr}
 801683a:	781b      	ldrb	r3, [r3, #0]
 801683c:	2b01      	cmp	r3, #1
 801683e:	d10d      	bne.n	801685c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8016840:	8881      	ldrh	r1, [r0, #4]
 8016842:	8803      	ldrh	r3, [r0, #0]
 8016844:	440b      	add	r3, r1
 8016846:	4601      	mov	r1, r0
 8016848:	3b01      	subs	r3, #1
 801684a:	f821 3b02 	strh.w	r3, [r1], #2
 801684e:	f7ff ffdf 	bl	8016810 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8016852:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016856:	88c2      	ldrh	r2, [r0, #6]
 8016858:	80c3      	strh	r3, [r0, #6]
 801685a:	8082      	strh	r2, [r0, #4]
 801685c:	bd10      	pop	{r4, pc}
 801685e:	bf00      	nop
 8016860:	24026410 	.word	0x24026410

08016864 <_ZN8touchgfx11Application13requestRedrawEv>:
 8016864:	4b06      	ldr	r3, [pc, #24]	@ (8016880 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8016866:	2100      	movs	r1, #0
 8016868:	f9b3 2000 	ldrsh.w	r2, [r3]
 801686c:	4b05      	ldr	r3, [pc, #20]	@ (8016884 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801686e:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 8016872:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016876:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 801687a:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 801687e:	4770      	bx	lr
 8016880:	2402640c 	.word	0x2402640c
 8016884:	2402640e 	.word	0x2402640e

08016888 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8016888:	4b03      	ldr	r3, [pc, #12]	@ (8016898 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801688a:	6818      	ldr	r0, [r3, #0]
 801688c:	b110      	cbz	r0, 8016894 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801688e:	6803      	ldr	r3, [r0, #0]
 8016890:	699b      	ldr	r3, [r3, #24]
 8016892:	4718      	bx	r3
 8016894:	4770      	bx	lr
 8016896:	bf00      	nop
 8016898:	2402645c 	.word	0x2402645c

0801689c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801689c:	4770      	bx	lr
	...

080168a0 <_ZN8touchgfx11Application4drawEv>:
 80168a0:	4b09      	ldr	r3, [pc, #36]	@ (80168c8 <_ZN8touchgfx11Application4drawEv+0x28>)
 80168a2:	b507      	push	{r0, r1, r2, lr}
 80168a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80168a8:	2100      	movs	r1, #0
 80168aa:	4b08      	ldr	r3, [pc, #32]	@ (80168cc <_ZN8touchgfx11Application4drawEv+0x2c>)
 80168ac:	9100      	str	r1, [sp, #0]
 80168ae:	4669      	mov	r1, sp
 80168b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80168b4:	f8ad 2004 	strh.w	r2, [sp, #4]
 80168b8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80168bc:	6803      	ldr	r3, [r0, #0]
 80168be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80168c0:	4798      	blx	r3
 80168c2:	b003      	add	sp, #12
 80168c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80168c8:	2402640c 	.word	0x2402640c
 80168cc:	2402640e 	.word	0x2402640e

080168d0 <_ZN8touchgfx11Application10invalidateEv>:
 80168d0:	4b09      	ldr	r3, [pc, #36]	@ (80168f8 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 80168d2:	b082      	sub	sp, #8
 80168d4:	2100      	movs	r1, #0
 80168d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80168da:	4b08      	ldr	r3, [pc, #32]	@ (80168fc <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 80168dc:	f8ad 2004 	strh.w	r2, [sp, #4]
 80168e0:	aa02      	add	r2, sp, #8
 80168e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80168e6:	9100      	str	r1, [sp, #0]
 80168e8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80168ec:	6803      	ldr	r3, [r0, #0]
 80168ee:	e912 0006 	ldmdb	r2, {r1, r2}
 80168f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80168f4:	b002      	add	sp, #8
 80168f6:	4718      	bx	r3
 80168f8:	2402640c 	.word	0x2402640c
 80168fc:	2402640e 	.word	0x2402640e

08016900 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8016900:	4b03      	ldr	r3, [pc, #12]	@ (8016910 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8016902:	6818      	ldr	r0, [r3, #0]
 8016904:	b110      	cbz	r0, 801690c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8016906:	6803      	ldr	r3, [r0, #0]
 8016908:	69db      	ldr	r3, [r3, #28]
 801690a:	4718      	bx	r3
 801690c:	4770      	bx	lr
 801690e:	bf00      	nop
 8016910:	2402645c 	.word	0x2402645c

08016914 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8016914:	4b03      	ldr	r3, [pc, #12]	@ (8016924 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8016916:	6818      	ldr	r0, [r3, #0]
 8016918:	b110      	cbz	r0, 8016920 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801691a:	6803      	ldr	r3, [r0, #0]
 801691c:	6a1b      	ldr	r3, [r3, #32]
 801691e:	4718      	bx	r3
 8016920:	4770      	bx	lr
 8016922:	bf00      	nop
 8016924:	2402645c 	.word	0x2402645c

08016928 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8016928:	2300      	movs	r3, #0
 801692a:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 801692e:	4770      	bx	lr

08016930 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8016930:	4b03      	ldr	r3, [pc, #12]	@ (8016940 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8016932:	6818      	ldr	r0, [r3, #0]
 8016934:	b110      	cbz	r0, 801693c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8016936:	6803      	ldr	r3, [r0, #0]
 8016938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801693a:	4718      	bx	r3
 801693c:	4770      	bx	lr
 801693e:	bf00      	nop
 8016940:	2402645c 	.word	0x2402645c

08016944 <_ZN8touchgfx11ApplicationD1Ev>:
 8016944:	4770      	bx	lr

08016946 <_ZN8touchgfx11ApplicationD0Ev>:
 8016946:	b510      	push	{r4, lr}
 8016948:	4604      	mov	r4, r0
 801694a:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 801694e:	f00e f8cc 	bl	8024aea <_ZdlPvj>
 8016952:	4620      	mov	r0, r4
 8016954:	bd10      	pop	{r4, pc}

08016956 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8016956:	b510      	push	{r4, lr}
 8016958:	f9b1 4000 	ldrsh.w	r4, [r1]
 801695c:	888a      	ldrh	r2, [r1, #4]
 801695e:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016962:	4422      	add	r2, r4
 8016964:	b212      	sxth	r2, r2
 8016966:	4293      	cmp	r3, r2
 8016968:	da15      	bge.n	8016996 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801696a:	8882      	ldrh	r2, [r0, #4]
 801696c:	4413      	add	r3, r2
 801696e:	b21b      	sxth	r3, r3
 8016970:	429c      	cmp	r4, r3
 8016972:	da10      	bge.n	8016996 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016974:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8016978:	88c9      	ldrh	r1, [r1, #6]
 801697a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801697e:	4419      	add	r1, r3
 8016980:	b209      	sxth	r1, r1
 8016982:	428a      	cmp	r2, r1
 8016984:	da07      	bge.n	8016996 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016986:	88c0      	ldrh	r0, [r0, #6]
 8016988:	4410      	add	r0, r2
 801698a:	b200      	sxth	r0, r0
 801698c:	4283      	cmp	r3, r0
 801698e:	bfac      	ite	ge
 8016990:	2000      	movge	r0, #0
 8016992:	2001      	movlt	r0, #1
 8016994:	bd10      	pop	{r4, pc}
 8016996:	2000      	movs	r0, #0
 8016998:	e7fc      	b.n	8016994 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801699a <_ZN8touchgfx4Rect10restrictToEss>:
 801699a:	f9b0 3000 	ldrsh.w	r3, [r0]
 801699e:	2b00      	cmp	r3, #0
 80169a0:	b510      	push	{r4, lr}
 80169a2:	da04      	bge.n	80169ae <_ZN8touchgfx4Rect10restrictToEss+0x14>
 80169a4:	8884      	ldrh	r4, [r0, #4]
 80169a6:	4423      	add	r3, r4
 80169a8:	8083      	strh	r3, [r0, #4]
 80169aa:	2300      	movs	r3, #0
 80169ac:	8003      	strh	r3, [r0, #0]
 80169ae:	f9b0 4000 	ldrsh.w	r4, [r0]
 80169b2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80169b6:	1b09      	subs	r1, r1, r4
 80169b8:	428b      	cmp	r3, r1
 80169ba:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80169be:	bfc8      	it	gt
 80169c0:	8081      	strhgt	r1, [r0, #4]
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	da04      	bge.n	80169d0 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 80169c6:	88c1      	ldrh	r1, [r0, #6]
 80169c8:	440b      	add	r3, r1
 80169ca:	80c3      	strh	r3, [r0, #6]
 80169cc:	2300      	movs	r3, #0
 80169ce:	8043      	strh	r3, [r0, #2]
 80169d0:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80169d4:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80169d8:	1a52      	subs	r2, r2, r1
 80169da:	4293      	cmp	r3, r2
 80169dc:	bfc8      	it	gt
 80169de:	80c2      	strhgt	r2, [r0, #6]
 80169e0:	bd10      	pop	{r4, pc}
	...

080169e4 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80169e4:	4b10      	ldr	r3, [pc, #64]	@ (8016a28 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 80169e6:	b510      	push	{r4, lr}
 80169e8:	460c      	mov	r4, r1
 80169ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80169ee:	4b0f      	ldr	r3, [pc, #60]	@ (8016a2c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 80169f0:	4620      	mov	r0, r4
 80169f2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80169f6:	f7ff ffd0 	bl	801699a <_ZN8touchgfx4Rect10restrictToEss>
 80169fa:	4b0d      	ldr	r3, [pc, #52]	@ (8016a30 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 80169fc:	6818      	ldr	r0, [r3, #0]
 80169fe:	b190      	cbz	r0, 8016a26 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8016a00:	6803      	ldr	r3, [r0, #0]
 8016a02:	4621      	mov	r1, r4
 8016a04:	689b      	ldr	r3, [r3, #8]
 8016a06:	4798      	blx	r3
 8016a08:	4b0a      	ldr	r3, [pc, #40]	@ (8016a34 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8016a0a:	6818      	ldr	r0, [r3, #0]
 8016a0c:	b118      	cbz	r0, 8016a16 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8016a0e:	6803      	ldr	r3, [r0, #0]
 8016a10:	4621      	mov	r1, r4
 8016a12:	689b      	ldr	r3, [r3, #8]
 8016a14:	4798      	blx	r3
 8016a16:	4b08      	ldr	r3, [pc, #32]	@ (8016a38 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8016a18:	4621      	mov	r1, r4
 8016a1a:	6818      	ldr	r0, [r3, #0]
 8016a1c:	6803      	ldr	r3, [r0, #0]
 8016a1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a22:	69db      	ldr	r3, [r3, #28]
 8016a24:	4718      	bx	r3
 8016a26:	bd10      	pop	{r4, pc}
 8016a28:	2402640e 	.word	0x2402640e
 8016a2c:	2402640c 	.word	0x2402640c
 8016a30:	2402645c 	.word	0x2402645c
 8016a34:	24026458 	.word	0x24026458
 8016a38:	24026418 	.word	0x24026418

08016a3c <_ZNK8touchgfx4Rect8includesERKS0_>:
 8016a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a3e:	4606      	mov	r6, r0
 8016a40:	4608      	mov	r0, r1
 8016a42:	460f      	mov	r7, r1
 8016a44:	f7fa f979 	bl	8010d3a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016a48:	b9e8      	cbnz	r0, 8016a86 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016a4a:	f9b7 5000 	ldrsh.w	r5, [r7]
 8016a4e:	f9b6 4000 	ldrsh.w	r4, [r6]
 8016a52:	42a5      	cmp	r5, r4
 8016a54:	db17      	blt.n	8016a86 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016a56:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8016a5a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8016a5e:	429a      	cmp	r2, r3
 8016a60:	db11      	blt.n	8016a86 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016a62:	88b9      	ldrh	r1, [r7, #4]
 8016a64:	440d      	add	r5, r1
 8016a66:	88b1      	ldrh	r1, [r6, #4]
 8016a68:	440c      	add	r4, r1
 8016a6a:	b22d      	sxth	r5, r5
 8016a6c:	b224      	sxth	r4, r4
 8016a6e:	42a5      	cmp	r5, r4
 8016a70:	dc09      	bgt.n	8016a86 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016a72:	88f8      	ldrh	r0, [r7, #6]
 8016a74:	4410      	add	r0, r2
 8016a76:	88f2      	ldrh	r2, [r6, #6]
 8016a78:	4413      	add	r3, r2
 8016a7a:	b200      	sxth	r0, r0
 8016a7c:	b21b      	sxth	r3, r3
 8016a7e:	4298      	cmp	r0, r3
 8016a80:	bfcc      	ite	gt
 8016a82:	2000      	movgt	r0, #0
 8016a84:	2001      	movle	r0, #1
 8016a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016a88 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8016a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a8a:	4604      	mov	r4, r0
 8016a8c:	4608      	mov	r0, r1
 8016a8e:	460d      	mov	r5, r1
 8016a90:	f7fa f953 	bl	8010d3a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016a94:	b978      	cbnz	r0, 8016ab6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8016a96:	4620      	mov	r0, r4
 8016a98:	f7fa f94f 	bl	8010d3a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016a9c:	f9b5 6000 	ldrsh.w	r6, [r5]
 8016aa0:	b150      	cbz	r0, 8016ab8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8016aa2:	8026      	strh	r6, [r4, #0]
 8016aa4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8016aa8:	8063      	strh	r3, [r4, #2]
 8016aaa:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8016aae:	80a3      	strh	r3, [r4, #4]
 8016ab0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8016ab4:	80e3      	strh	r3, [r4, #6]
 8016ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ab8:	f9b4 1000 	ldrsh.w	r1, [r4]
 8016abc:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8016ac0:	42b1      	cmp	r1, r6
 8016ac2:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8016ac6:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8016aca:	460f      	mov	r7, r1
 8016acc:	88ed      	ldrh	r5, [r5, #6]
 8016ace:	bfa8      	it	ge
 8016ad0:	4637      	movge	r7, r6
 8016ad2:	4293      	cmp	r3, r2
 8016ad4:	4618      	mov	r0, r3
 8016ad6:	4466      	add	r6, ip
 8016ad8:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8016adc:	bfa8      	it	ge
 8016ade:	4610      	movge	r0, r2
 8016ae0:	442a      	add	r2, r5
 8016ae2:	88e5      	ldrh	r5, [r4, #6]
 8016ae4:	4461      	add	r1, ip
 8016ae6:	b236      	sxth	r6, r6
 8016ae8:	8027      	strh	r7, [r4, #0]
 8016aea:	442b      	add	r3, r5
 8016aec:	b209      	sxth	r1, r1
 8016aee:	b212      	sxth	r2, r2
 8016af0:	8060      	strh	r0, [r4, #2]
 8016af2:	b21b      	sxth	r3, r3
 8016af4:	428e      	cmp	r6, r1
 8016af6:	bfac      	ite	ge
 8016af8:	ebc7 0106 	rsbge	r1, r7, r6
 8016afc:	ebc7 0101 	rsblt	r1, r7, r1
 8016b00:	429a      	cmp	r2, r3
 8016b02:	bfac      	ite	ge
 8016b04:	ebc0 0202 	rsbge	r2, r0, r2
 8016b08:	ebc0 0203 	rsblt	r2, r0, r3
 8016b0c:	80a1      	strh	r1, [r4, #4]
 8016b0e:	80e2      	strh	r2, [r4, #6]
 8016b10:	e7d1      	b.n	8016ab6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08016b14 <_ZN8touchgfx11Application11getInstanceEv>:
 8016b14:	4b01      	ldr	r3, [pc, #4]	@ (8016b1c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8016b16:	6818      	ldr	r0, [r3, #0]
 8016b18:	4770      	bx	lr
 8016b1a:	bf00      	nop
 8016b1c:	2402646c 	.word	0x2402646c

08016b20 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8016b20:	2300      	movs	r3, #0
 8016b22:	b510      	push	{r4, lr}
 8016b24:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 8016b28:	4604      	mov	r4, r0
 8016b2a:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8016b2e:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8016b32:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8016b36:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 8016b3a:	429a      	cmp	r2, r3
 8016b3c:	d90e      	bls.n	8016b5c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8016b3e:	18e2      	adds	r2, r4, r3
 8016b40:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 8016b44:	b122      	cbz	r2, 8016b50 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8016b46:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8016b4a:	6803      	ldr	r3, [r0, #0]
 8016b4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016b4e:	4798      	blx	r3
 8016b50:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8016b54:	3301      	adds	r3, #1
 8016b56:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8016b5a:	e7ea      	b.n	8016b32 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8016b5c:	bd10      	pop	{r4, pc}

08016b5e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 8016b5e:	b530      	push	{r4, r5, lr}
 8016b60:	2200      	movs	r2, #0
 8016b62:	f8b0 5080 	ldrh.w	r5, [r0, #128]	@ 0x80
 8016b66:	b293      	uxth	r3, r2
 8016b68:	429d      	cmp	r5, r3
 8016b6a:	d90e      	bls.n	8016b8a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 8016b6c:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8016b70:	428b      	cmp	r3, r1
 8016b72:	d10b      	bne.n	8016b8c <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 8016b74:	1884      	adds	r4, r0, r2
 8016b76:	f894 3084 	ldrb.w	r3, [r4, #132]	@ 0x84
 8016b7a:	b13b      	cbz	r3, 8016b8c <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 8016b7c:	3b01      	subs	r3, #1
 8016b7e:	b2db      	uxtb	r3, r3
 8016b80:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
 8016b84:	b90b      	cbnz	r3, 8016b8a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 8016b86:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8016b8a:	bd30      	pop	{r4, r5, pc}
 8016b8c:	3201      	adds	r2, #1
 8016b8e:	e7ea      	b.n	8016b66 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

08016b90 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8016b90:	2300      	movs	r3, #0
 8016b92:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 8016b96:	30a4      	adds	r0, #164	@ 0xa4
 8016b98:	f820 3c24 	strh.w	r3, [r0, #-36]
 8016b9c:	f802 3b01 	strb.w	r3, [r2], #1
 8016ba0:	4282      	cmp	r2, r0
 8016ba2:	d1fb      	bne.n	8016b9c <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8016ba4:	4770      	bx	lr
	...

08016ba8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8016ba8:	b570      	push	{r4, r5, r6, lr}
 8016baa:	4c0b      	ldr	r4, [pc, #44]	@ (8016bd8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8016bac:	4605      	mov	r5, r0
 8016bae:	460e      	mov	r6, r1
 8016bb0:	6820      	ldr	r0, [r4, #0]
 8016bb2:	b110      	cbz	r0, 8016bba <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8016bb4:	6803      	ldr	r3, [r0, #0]
 8016bb6:	695b      	ldr	r3, [r3, #20]
 8016bb8:	4798      	blx	r3
 8016bba:	1d28      	adds	r0, r5, #4
 8016bbc:	f7ff ffe8 	bl	8016b90 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8016bc0:	6026      	str	r6, [r4, #0]
 8016bc2:	6833      	ldr	r3, [r6, #0]
 8016bc4:	4630      	mov	r0, r6
 8016bc6:	68db      	ldr	r3, [r3, #12]
 8016bc8:	4798      	blx	r3
 8016bca:	682b      	ldr	r3, [r5, #0]
 8016bcc:	4628      	mov	r0, r5
 8016bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016bd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016bd4:	4718      	bx	r3
 8016bd6:	bf00      	nop
 8016bd8:	2402645c 	.word	0x2402645c

08016bdc <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8016bdc:	2300      	movs	r3, #0
 8016bde:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 8016be2:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 8016be6:	461a      	mov	r2, r3
 8016be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016bea:	461c      	mov	r4, r3
 8016bec:	461d      	mov	r5, r3
 8016bee:	459c      	cmp	ip, r3
 8016bf0:	dd1a      	ble.n	8016c28 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8016bf2:	18c6      	adds	r6, r0, r3
 8016bf4:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 8016bf8:	b16e      	cbz	r6, 8016c16 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8016bfa:	429a      	cmp	r2, r3
 8016bfc:	d008      	beq.n	8016c10 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8016bfe:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8016c02:	fa1f fe82 	uxth.w	lr, r2
 8016c06:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8016c0a:	1887      	adds	r7, r0, r2
 8016c0c:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 8016c10:	3201      	adds	r2, #1
 8016c12:	3301      	adds	r3, #1
 8016c14:	e7eb      	b.n	8016bee <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8016c16:	4299      	cmp	r1, r3
 8016c18:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 8016c1c:	bfa8      	it	ge
 8016c1e:	3501      	addge	r5, #1
 8016c20:	429e      	cmp	r6, r3
 8016c22:	bfc8      	it	gt
 8016c24:	3401      	addgt	r4, #1
 8016c26:	e7f4      	b.n	8016c12 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8016c28:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 8016c2c:	1b49      	subs	r1, r1, r5
 8016c2e:	1b1b      	subs	r3, r3, r4
 8016c30:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 8016c34:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8016c38:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8016c3c:	4293      	cmp	r3, r2
 8016c3e:	dd03      	ble.n	8016c48 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8016c40:	3b01      	subs	r3, #1
 8016c42:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 8016c46:	e7f7      	b.n	8016c38 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8016c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08016c4c <_ZN8touchgfx11Application15handleTickEventEv>:
 8016c4c:	b570      	push	{r4, r5, r6, lr}
 8016c4e:	4d16      	ldr	r5, [pc, #88]	@ (8016ca8 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8016c50:	4604      	mov	r4, r0
 8016c52:	6828      	ldr	r0, [r5, #0]
 8016c54:	b140      	cbz	r0, 8016c68 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8016c56:	7a03      	ldrb	r3, [r0, #8]
 8016c58:	b933      	cbnz	r3, 8016c68 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8016c5a:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8016c5e:	6803      	ldr	r3, [r0, #0]
 8016c60:	689b      	ldr	r3, [r3, #8]
 8016c62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c66:	4718      	bx	r3
 8016c68:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 8016c6c:	4e0f      	ldr	r6, [pc, #60]	@ (8016cac <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8016c6e:	b973      	cbnz	r3, 8016c8e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016c70:	b168      	cbz	r0, 8016c8e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016c72:	7a03      	ldrb	r3, [r0, #8]
 8016c74:	b15b      	cbz	r3, 8016c8e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016c76:	6830      	ldr	r0, [r6, #0]
 8016c78:	b110      	cbz	r0, 8016c80 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8016c7a:	6803      	ldr	r3, [r0, #0]
 8016c7c:	691b      	ldr	r3, [r3, #16]
 8016c7e:	4798      	blx	r3
 8016c80:	6828      	ldr	r0, [r5, #0]
 8016c82:	6803      	ldr	r3, [r0, #0]
 8016c84:	68db      	ldr	r3, [r3, #12]
 8016c86:	4798      	blx	r3
 8016c88:	2301      	movs	r3, #1
 8016c8a:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8016c8e:	3404      	adds	r4, #4
 8016c90:	4620      	mov	r0, r4
 8016c92:	f7ff ff45 	bl	8016b20 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8016c96:	4620      	mov	r0, r4
 8016c98:	f7ff ffa0 	bl	8016bdc <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8016c9c:	6830      	ldr	r0, [r6, #0]
 8016c9e:	b110      	cbz	r0, 8016ca6 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8016ca0:	6803      	ldr	r3, [r0, #0]
 8016ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ca4:	e7dd      	b.n	8016c62 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8016ca6:	bd70      	pop	{r4, r5, r6, pc}
 8016ca8:	24026460 	.word	0x24026460
 8016cac:	2402645c 	.word	0x2402645c

08016cb0 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 8016cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cb2:	2300      	movs	r3, #0
 8016cb4:	4604      	mov	r4, r0
 8016cb6:	460d      	mov	r5, r1
 8016cb8:	f8b0 1080 	ldrh.w	r1, [r0, #128]	@ 0x80
 8016cbc:	4618      	mov	r0, r3
 8016cbe:	b29a      	uxth	r2, r3
 8016cc0:	4291      	cmp	r1, r2
 8016cc2:	d912      	bls.n	8016cea <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x3a>
 8016cc4:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 8016cc8:	18e6      	adds	r6, r4, r3
 8016cca:	42af      	cmp	r7, r5
 8016ccc:	f896 2084 	ldrb.w	r2, [r6, #132]	@ 0x84
 8016cd0:	d105      	bne.n	8016cde <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 8016cd2:	2aff      	cmp	r2, #255	@ 0xff
 8016cd4:	d002      	beq.n	8016cdc <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 8016cd6:	3201      	adds	r2, #1
 8016cd8:	f886 2084 	strb.w	r2, [r6, #132]	@ 0x84
 8016cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016cde:	2a00      	cmp	r2, #0
 8016ce0:	f103 0301 	add.w	r3, r3, #1
 8016ce4:	bf08      	it	eq
 8016ce6:	2001      	moveq	r0, #1
 8016ce8:	e7e9      	b.n	8016cbe <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 8016cea:	b120      	cbz	r0, 8016cf6 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 8016cec:	2920      	cmp	r1, #32
 8016cee:	d102      	bne.n	8016cf6 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 8016cf0:	4620      	mov	r0, r4
 8016cf2:	f7ff ff73 	bl	8016bdc <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8016cf6:	f8b4 3080 	ldrh.w	r3, [r4, #128]	@ 0x80
 8016cfa:	2b1f      	cmp	r3, #31
 8016cfc:	d8ee      	bhi.n	8016cdc <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 8016cfe:	18e2      	adds	r2, r4, r3
 8016d00:	2101      	movs	r1, #1
 8016d02:	f882 1084 	strb.w	r1, [r2, #132]	@ 0x84
 8016d06:	185a      	adds	r2, r3, r1
 8016d08:	f8a4 2080 	strh.w	r2, [r4, #128]	@ 0x80
 8016d0c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8016d10:	e7e4      	b.n	8016cdc <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

08016d12 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8016d12:	4603      	mov	r3, r0
 8016d14:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 8016d18:	2200      	movs	r2, #0
 8016d1a:	801a      	strh	r2, [r3, #0]
 8016d1c:	3308      	adds	r3, #8
 8016d1e:	f823 2c06 	strh.w	r2, [r3, #-6]
 8016d22:	f823 2c04 	strh.w	r2, [r3, #-4]
 8016d26:	f823 2c02 	strh.w	r2, [r3, #-2]
 8016d2a:	428b      	cmp	r3, r1
 8016d2c:	d1f5      	bne.n	8016d1a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8016d2e:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8016d32:	4770      	bx	lr

08016d34 <_ZN8touchgfx11ApplicationC1Ev>:
 8016d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d36:	4b1d      	ldr	r3, [pc, #116]	@ (8016dac <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8016d38:	4606      	mov	r6, r0
 8016d3a:	4604      	mov	r4, r0
 8016d3c:	2500      	movs	r5, #0
 8016d3e:	f846 3b04 	str.w	r3, [r6], #4
 8016d42:	22a8      	movs	r2, #168	@ 0xa8
 8016d44:	2100      	movs	r1, #0
 8016d46:	4630      	mov	r0, r6
 8016d48:	f00e fce2 	bl	8025710 <memset>
 8016d4c:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 8016d50:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8016d54:	4f16      	ldr	r7, [pc, #88]	@ (8016db0 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8016d56:	f7ff ffdc 	bl	8016d12 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016d5a:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8016d5e:	f7ff ffd8 	bl	8016d12 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016d62:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 8016d66:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 8016d6a:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 8016d6e:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 8016d72:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 8016d76:	490f      	ldr	r1, [pc, #60]	@ (8016db4 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8016d78:	480f      	ldr	r0, [pc, #60]	@ (8016db8 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8016d7a:	f00d f845 	bl	8023e08 <CRC_Lock>
 8016d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8016dbc <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8016d80:	b158      	cbz	r0, 8016d9a <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8016d82:	801d      	strh	r5, [r3, #0]
 8016d84:	2300      	movs	r3, #0
 8016d86:	4a0e      	ldr	r2, [pc, #56]	@ (8016dc0 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8016d88:	4630      	mov	r0, r6
 8016d8a:	6013      	str	r3, [r2, #0]
 8016d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8016dc4 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8016d8e:	603b      	str	r3, [r7, #0]
 8016d90:	6013      	str	r3, [r2, #0]
 8016d92:	f7ff fefd 	bl	8016b90 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8016d96:	4620      	mov	r0, r4
 8016d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8016d9e:	2002      	movs	r0, #2
 8016da0:	801a      	strh	r2, [r3, #0]
 8016da2:	6038      	str	r0, [r7, #0]
 8016da4:	f001 fe08 	bl	80189b8 <_ZN8touchgfx6Screen4drawEv>
 8016da8:	e7ec      	b.n	8016d84 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8016daa:	bf00      	nop
 8016dac:	08029858 	.word	0x08029858
 8016db0:	2402645c 	.word	0x2402645c
 8016db4:	b5e8b5cd 	.word	0xb5e8b5cd
 8016db8:	f407a5c2 	.word	0xf407a5c2
 8016dbc:	2400007c 	.word	0x2400007c
 8016dc0:	2402646c 	.word	0x2402646c
 8016dc4:	24026460 	.word	0x24026460

08016dc8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8016dc8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8016dcc:	3b01      	subs	r3, #1
 8016dce:	b29b      	uxth	r3, r3
 8016dd0:	428b      	cmp	r3, r1
 8016dd2:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 8016dd6:	b510      	push	{r4, lr}
 8016dd8:	d908      	bls.n	8016dec <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8016dda:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8016dde:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8016de2:	681a      	ldr	r2, [r3, #0]
 8016de4:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8016de8:	685a      	ldr	r2, [r3, #4]
 8016dea:	6062      	str	r2, [r4, #4]
 8016dec:	bd10      	pop	{r4, pc}
	...

08016df0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8016df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016df4:	b08f      	sub	sp, #60	@ 0x3c
 8016df6:	4b8f      	ldr	r3, [pc, #572]	@ (8017034 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8016df8:	4683      	mov	fp, r0
 8016dfa:	ac0a      	add	r4, sp, #40	@ 0x28
 8016dfc:	e884 0006 	stmia.w	r4, {r1, r2}
 8016e00:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016e04:	4620      	mov	r0, r4
 8016e06:	4b8c      	ldr	r3, [pc, #560]	@ (8017038 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8016e08:	f9b3 1000 	ldrsh.w	r1, [r3]
 8016e0c:	f7ff fdc5 	bl	801699a <_ZN8touchgfx4Rect10restrictToEss>
 8016e10:	4620      	mov	r0, r4
 8016e12:	f7f9 ff92 	bl	8010d3a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016e16:	2800      	cmp	r0, #0
 8016e18:	d16a      	bne.n	8016ef0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016e1a:	9403      	str	r4, [sp, #12]
 8016e1c:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8016e20:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8016e24:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8016e28:	9301      	str	r3, [sp, #4]
 8016e2a:	35a4      	adds	r5, #164	@ 0xa4
 8016e2c:	b15c      	cbz	r4, 8016e46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8016e2e:	4629      	mov	r1, r5
 8016e30:	9803      	ldr	r0, [sp, #12]
 8016e32:	f7ff fe03 	bl	8016a3c <_ZNK8touchgfx4Rect8includesERKS0_>
 8016e36:	3c01      	subs	r4, #1
 8016e38:	b118      	cbz	r0, 8016e42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8016e3a:	b2a1      	uxth	r1, r4
 8016e3c:	9801      	ldr	r0, [sp, #4]
 8016e3e:	f7ff ffc3 	bl	8016dc8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016e42:	3d08      	subs	r5, #8
 8016e44:	e7f2      	b.n	8016e2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8016e46:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 8016e4a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016e4e:	f8cd a010 	str.w	sl, [sp, #16]
 8016e52:	9302      	str	r3, [sp, #8]
 8016e54:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8016e58:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 8016e5c:	9306      	str	r3, [sp, #24]
 8016e5e:	445c      	add	r4, fp
 8016e60:	2500      	movs	r5, #0
 8016e62:	4626      	mov	r6, r4
 8016e64:	f8cd a014 	str.w	sl, [sp, #20]
 8016e68:	462f      	mov	r7, r5
 8016e6a:	9b05      	ldr	r3, [sp, #20]
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	d073      	beq.n	8016f58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8016e70:	9903      	ldr	r1, [sp, #12]
 8016e72:	4630      	mov	r0, r6
 8016e74:	f7ff fd6f 	bl	8016956 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016e78:	b350      	cbz	r0, 8016ed0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8016e7a:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 8016e7e:	f9b6 c000 	ldrsh.w	ip, [r6]
 8016e82:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 8016e86:	45e6      	cmp	lr, ip
 8016e88:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8016e8c:	db33      	blt.n	8016ef6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8016e8e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8016e92:	88b3      	ldrh	r3, [r6, #4]
 8016e94:	4472      	add	r2, lr
 8016e96:	4463      	add	r3, ip
 8016e98:	b212      	sxth	r2, r2
 8016e9a:	b21b      	sxth	r3, r3
 8016e9c:	429a      	cmp	r2, r3
 8016e9e:	dc2a      	bgt.n	8016ef6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8016ea0:	fa1f f289 	uxth.w	r2, r9
 8016ea4:	88f3      	ldrh	r3, [r6, #6]
 8016ea6:	45c8      	cmp	r8, r9
 8016ea8:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8016eac:	4413      	add	r3, r2
 8016eae:	fa1f fc88 	uxth.w	ip, r8
 8016eb2:	b29b      	uxth	r3, r3
 8016eb4:	fa0f fe83 	sxth.w	lr, r3
 8016eb8:	db0f      	blt.n	8016eda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8016eba:	eba3 030c 	sub.w	r3, r3, ip
 8016ebe:	1ac9      	subs	r1, r1, r3
 8016ec0:	b209      	sxth	r1, r1
 8016ec2:	2900      	cmp	r1, #0
 8016ec4:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8016ec8:	dd12      	ble.n	8016ef0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016eca:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 8016ece:	4605      	mov	r5, r0
 8016ed0:	9b05      	ldr	r3, [sp, #20]
 8016ed2:	3e08      	subs	r6, #8
 8016ed4:	3b01      	subs	r3, #1
 8016ed6:	9305      	str	r3, [sp, #20]
 8016ed8:	e7c7      	b.n	8016e6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8016eda:	4461      	add	r1, ip
 8016edc:	b209      	sxth	r1, r1
 8016ede:	4571      	cmp	r1, lr
 8016ee0:	dc38      	bgt.n	8016f54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8016ee2:	eba2 020c 	sub.w	r2, r2, ip
 8016ee6:	b212      	sxth	r2, r2
 8016ee8:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8016eec:	2a00      	cmp	r2, #0
 8016eee:	dcee      	bgt.n	8016ece <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8016ef0:	b00f      	add	sp, #60	@ 0x3c
 8016ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ef6:	45c8      	cmp	r8, r9
 8016ef8:	db2c      	blt.n	8016f54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8016efa:	88f3      	ldrh	r3, [r6, #6]
 8016efc:	4499      	add	r9, r3
 8016efe:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8016f02:	4498      	add	r8, r3
 8016f04:	fa0f f989 	sxth.w	r9, r9
 8016f08:	fa0f f888 	sxth.w	r8, r8
 8016f0c:	45c1      	cmp	r9, r8
 8016f0e:	db21      	blt.n	8016f54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8016f10:	fa1f f28c 	uxth.w	r2, ip
 8016f14:	88b3      	ldrh	r3, [r6, #4]
 8016f16:	45e6      	cmp	lr, ip
 8016f18:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8016f1c:	4413      	add	r3, r2
 8016f1e:	fa1f f88e 	uxth.w	r8, lr
 8016f22:	b29b      	uxth	r3, r3
 8016f24:	fa0f f983 	sxth.w	r9, r3
 8016f28:	db0a      	blt.n	8016f40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8016f2a:	eba3 0308 	sub.w	r3, r3, r8
 8016f2e:	1ac9      	subs	r1, r1, r3
 8016f30:	b209      	sxth	r1, r1
 8016f32:	2900      	cmp	r1, #0
 8016f34:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8016f38:	ddda      	ble.n	8016ef0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016f3a:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8016f3e:	e7c6      	b.n	8016ece <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8016f40:	4441      	add	r1, r8
 8016f42:	b209      	sxth	r1, r1
 8016f44:	4549      	cmp	r1, r9
 8016f46:	dc05      	bgt.n	8016f54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8016f48:	eba2 0208 	sub.w	r2, r2, r8
 8016f4c:	b212      	sxth	r2, r2
 8016f4e:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8016f52:	e7cb      	b.n	8016eec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8016f54:	4607      	mov	r7, r0
 8016f56:	e7bb      	b.n	8016ed0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8016f58:	2d00      	cmp	r5, #0
 8016f5a:	d181      	bne.n	8016e60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8016f5c:	2f00      	cmp	r7, #0
 8016f5e:	f000 81dd 	beq.w	801731c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8016f62:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 8016f66:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 8016f6a:	b2b3      	uxth	r3, r6
 8016f6c:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 8016f70:	9305      	str	r3, [sp, #20]
 8016f72:	9a05      	ldr	r2, [sp, #20]
 8016f74:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8016f78:	4413      	add	r3, r2
 8016f7a:	b2ba      	uxth	r2, r7
 8016f7c:	4492      	add	sl, r2
 8016f7e:	b29b      	uxth	r3, r3
 8016f80:	fa1f fa8a 	uxth.w	sl, sl
 8016f84:	fa0f f883 	sxth.w	r8, r3
 8016f88:	fa0f f98a 	sxth.w	r9, sl
 8016f8c:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8016f90:	9b04      	ldr	r3, [sp, #16]
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d052      	beq.n	801703c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8016f96:	9903      	ldr	r1, [sp, #12]
 8016f98:	4620      	mov	r0, r4
 8016f9a:	f7ff fcdc 	bl	8016956 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016f9e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8016fa2:	b1c0      	cbz	r0, 8016fd6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8016fa4:	f9b4 e000 	ldrsh.w	lr, [r4]
 8016fa8:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016fac:	4576      	cmp	r6, lr
 8016fae:	dc22      	bgt.n	8016ff6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8016fb0:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8016fb4:	44f4      	add	ip, lr
 8016fb6:	fa0f fc8c 	sxth.w	ip, ip
 8016fba:	45e0      	cmp	r8, ip
 8016fbc:	db1b      	blt.n	8016ff6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8016fbe:	428f      	cmp	r7, r1
 8016fc0:	fa1f fc81 	uxth.w	ip, r1
 8016fc4:	88e1      	ldrh	r1, [r4, #6]
 8016fc6:	dc0d      	bgt.n	8016fe4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8016fc8:	ebaa 0c0c 	sub.w	ip, sl, ip
 8016fcc:	f8a4 9002 	strh.w	r9, [r4, #2]
 8016fd0:	eba1 010c 	sub.w	r1, r1, ip
 8016fd4:	80e1      	strh	r1, [r4, #6]
 8016fd6:	4628      	mov	r0, r5
 8016fd8:	9904      	ldr	r1, [sp, #16]
 8016fda:	3c08      	subs	r4, #8
 8016fdc:	4605      	mov	r5, r0
 8016fde:	3901      	subs	r1, #1
 8016fe0:	9104      	str	r1, [sp, #16]
 8016fe2:	e7d3      	b.n	8016f8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 8016fe4:	4461      	add	r1, ip
 8016fe6:	b209      	sxth	r1, r1
 8016fe8:	4549      	cmp	r1, r9
 8016fea:	dcf5      	bgt.n	8016fd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8016fec:	eba2 0c0c 	sub.w	ip, r2, ip
 8016ff0:	f8a4 c006 	strh.w	ip, [r4, #6]
 8016ff4:	e7ef      	b.n	8016fd6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8016ff6:	428f      	cmp	r7, r1
 8016ff8:	dcee      	bgt.n	8016fd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8016ffa:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8016ffe:	4461      	add	r1, ip
 8017000:	b209      	sxth	r1, r1
 8017002:	4589      	cmp	r9, r1
 8017004:	dbe8      	blt.n	8016fd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8017006:	4576      	cmp	r6, lr
 8017008:	fa1f fc8e 	uxth.w	ip, lr
 801700c:	88a1      	ldrh	r1, [r4, #4]
 801700e:	dc07      	bgt.n	8017020 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8017010:	eba3 0c0c 	sub.w	ip, r3, ip
 8017014:	f8a4 8000 	strh.w	r8, [r4]
 8017018:	eba1 010c 	sub.w	r1, r1, ip
 801701c:	80a1      	strh	r1, [r4, #4]
 801701e:	e7da      	b.n	8016fd6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8017020:	4461      	add	r1, ip
 8017022:	b209      	sxth	r1, r1
 8017024:	4588      	cmp	r8, r1
 8017026:	dbd7      	blt.n	8016fd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8017028:	9905      	ldr	r1, [sp, #20]
 801702a:	eba1 0c0c 	sub.w	ip, r1, ip
 801702e:	f8a4 c004 	strh.w	ip, [r4, #4]
 8017032:	e7d0      	b.n	8016fd6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8017034:	2402640e 	.word	0x2402640e
 8017038:	2402640c 	.word	0x2402640c
 801703c:	2d00      	cmp	r5, #0
 801703e:	f000 816d 	beq.w	801731c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8017042:	9b06      	ldr	r3, [sp, #24]
 8017044:	445b      	add	r3, fp
 8017046:	461c      	mov	r4, r3
 8017048:	9b02      	ldr	r3, [sp, #8]
 801704a:	3301      	adds	r3, #1
 801704c:	f000 8166 	beq.w	801731c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8017050:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 8017054:	9803      	ldr	r0, [sp, #12]
 8017056:	4629      	mov	r1, r5
 8017058:	f7ff fcf0 	bl	8016a3c <_ZNK8touchgfx4Rect8includesERKS0_>
 801705c:	b120      	cbz	r0, 8017068 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 801705e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8017062:	9801      	ldr	r0, [sp, #4]
 8017064:	f7ff feb0 	bl	8016dc8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017068:	9903      	ldr	r1, [sp, #12]
 801706a:	4628      	mov	r0, r5
 801706c:	f7ff fc73 	bl	8016956 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017070:	2800      	cmp	r0, #0
 8017072:	f000 809c 	beq.w	80171ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8017076:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 801707a:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801707e:	fa1f f189 	uxth.w	r1, r9
 8017082:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8017086:	9309      	str	r3, [sp, #36]	@ 0x24
 8017088:	eb01 0c03 	add.w	ip, r1, r3
 801708c:	b283      	uxth	r3, r0
 801708e:	4548      	cmp	r0, r9
 8017090:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 8017094:	fa1f fa8c 	uxth.w	sl, ip
 8017098:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 801709c:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 80170a0:	eb03 050c 	add.w	r5, r3, ip
 80170a4:	b2ad      	uxth	r5, r5
 80170a6:	9505      	str	r5, [sp, #20]
 80170a8:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 80170ac:	9504      	str	r5, [sp, #16]
 80170ae:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 80170b2:	f340 8099 	ble.w	80171e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 80170b6:	1a5b      	subs	r3, r3, r1
 80170b8:	4596      	cmp	lr, r2
 80170ba:	fa0f f08a 	sxth.w	r0, sl
 80170be:	b29b      	uxth	r3, r3
 80170c0:	b21e      	sxth	r6, r3
 80170c2:	dd2e      	ble.n	8017122 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 80170c4:	9f02      	ldr	r7, [sp, #8]
 80170c6:	fa1f fe8e 	uxth.w	lr, lr
 80170ca:	b292      	uxth	r2, r2
 80170cc:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 80170d0:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 80170d4:	9f04      	ldr	r7, [sp, #16]
 80170d6:	ebae 0102 	sub.w	r1, lr, r2
 80170da:	44a6      	add	lr, r4
 80170dc:	1a3f      	subs	r7, r7, r0
 80170de:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 80170e2:	b289      	uxth	r1, r1
 80170e4:	4402      	add	r2, r0
 80170e6:	fa0f fe8e 	sxth.w	lr, lr
 80170ea:	b20d      	sxth	r5, r1
 80170ec:	b212      	sxth	r2, r2
 80170ee:	436f      	muls	r7, r5
 80170f0:	ebae 0202 	sub.w	r2, lr, r2
 80170f4:	4372      	muls	r2, r6
 80170f6:	4297      	cmp	r7, r2
 80170f8:	db09      	blt.n	801710e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 80170fa:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 80170fe:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8017102:	449c      	add	ip, r3
 8017104:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8017108:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801710c:	e686      	b.n	8016e1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801710e:	4421      	add	r1, r4
 8017110:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8017114:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 8017118:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801711c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8017120:	e67c      	b.n	8016e1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017122:	9f04      	ldr	r7, [sp, #16]
 8017124:	42b8      	cmp	r0, r7
 8017126:	da27      	bge.n	8017178 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8017128:	9902      	ldr	r1, [sp, #8]
 801712a:	1a3f      	subs	r7, r7, r0
 801712c:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 8017130:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8017134:	eb05 010e 	add.w	r1, r5, lr
 8017138:	fa1f f881 	uxth.w	r8, r1
 801713c:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 8017140:	4411      	add	r1, r2
 8017142:	fa0f f988 	sxth.w	r9, r8
 8017146:	eba2 020e 	sub.w	r2, r2, lr
 801714a:	eba1 0108 	sub.w	r1, r1, r8
 801714e:	4372      	muls	r2, r6
 8017150:	b289      	uxth	r1, r1
 8017152:	fa0f f881 	sxth.w	r8, r1
 8017156:	fb08 f707 	mul.w	r7, r8, r7
 801715a:	42ba      	cmp	r2, r7
 801715c:	dc06      	bgt.n	801716c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 801715e:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 8017162:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 8017166:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 801716a:	e7ca      	b.n	8017102 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 801716c:	4429      	add	r1, r5
 801716e:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 8017172:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8017176:	e651      	b.n	8016e1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017178:	9805      	ldr	r0, [sp, #20]
 801717a:	2d06      	cmp	r5, #6
 801717c:	ebaa 0000 	sub.w	r0, sl, r0
 8017180:	b280      	uxth	r0, r0
 8017182:	fa0f fe80 	sxth.w	lr, r0
 8017186:	d817      	bhi.n	80171b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8017188:	9b04      	ldr	r3, [sp, #16]
 801718a:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 801718e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8017192:	1c6b      	adds	r3, r5, #1
 8017194:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 8017198:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801719c:	9b01      	ldr	r3, [sp, #4]
 801719e:	9801      	ldr	r0, [sp, #4]
 80171a0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80171a4:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 80171a8:	805a      	strh	r2, [r3, #2]
 80171aa:	809e      	strh	r6, [r3, #4]
 80171ac:	80d9      	strh	r1, [r3, #6]
 80171ae:	9b02      	ldr	r3, [sp, #8]
 80171b0:	3c08      	subs	r4, #8
 80171b2:	3b01      	subs	r3, #1
 80171b4:	9302      	str	r3, [sp, #8]
 80171b6:	e747      	b.n	8017048 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 80171b8:	9a02      	ldr	r2, [sp, #8]
 80171ba:	45b6      	cmp	lr, r6
 80171bc:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80171c0:	db0d      	blt.n	80171de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 80171c2:	449c      	add	ip, r3
 80171c4:	445a      	add	r2, fp
 80171c6:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 80171ca:	fa1f fc8c 	uxth.w	ip, ip
 80171ce:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 80171d2:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 80171d6:	448c      	add	ip, r1
 80171d8:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 80171dc:	e61e      	b.n	8016e1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80171de:	445a      	add	r2, fp
 80171e0:	4484      	add	ip, r0
 80171e2:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 80171e6:	e78f      	b.n	8017108 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80171e8:	fa1f f18e 	uxth.w	r1, lr
 80171ec:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 80171f0:	b293      	uxth	r3, r2
 80171f2:	4596      	cmp	lr, r2
 80171f4:	eb01 0806 	add.w	r8, r1, r6
 80171f8:	9306      	str	r3, [sp, #24]
 80171fa:	fa1f f888 	uxth.w	r8, r8
 80171fe:	9f06      	ldr	r7, [sp, #24]
 8017200:	fa0f f388 	sxth.w	r3, r8
 8017204:	9307      	str	r3, [sp, #28]
 8017206:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801720a:	443b      	add	r3, r7
 801720c:	b29b      	uxth	r3, r3
 801720e:	9308      	str	r3, [sp, #32]
 8017210:	da24      	bge.n	801725c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8017212:	9905      	ldr	r1, [sp, #20]
 8017214:	eba3 0308 	sub.w	r3, r3, r8
 8017218:	eba2 020e 	sub.w	r2, r2, lr
 801721c:	eba9 0000 	sub.w	r0, r9, r0
 8017220:	ebaa 0401 	sub.w	r4, sl, r1
 8017224:	b29b      	uxth	r3, r3
 8017226:	b2a4      	uxth	r4, r4
 8017228:	b219      	sxth	r1, r3
 801722a:	b225      	sxth	r5, r4
 801722c:	4348      	muls	r0, r1
 801722e:	436a      	muls	r2, r5
 8017230:	4282      	cmp	r2, r0
 8017232:	9a02      	ldr	r2, [sp, #8]
 8017234:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8017238:	445a      	add	r2, fp
 801723a:	dc06      	bgt.n	801724a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 801723c:	9b07      	ldr	r3, [sp, #28]
 801723e:	44a4      	add	ip, r4
 8017240:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 8017244:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 8017248:	e75e      	b.n	8017108 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801724a:	9904      	ldr	r1, [sp, #16]
 801724c:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 8017250:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 8017254:	4433      	add	r3, r6
 8017256:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801725a:	e5df      	b.n	8016e1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801725c:	9f06      	ldr	r7, [sp, #24]
 801725e:	9b04      	ldr	r3, [sp, #16]
 8017260:	1bc9      	subs	r1, r1, r7
 8017262:	fa0f f78a 	sxth.w	r7, sl
 8017266:	b289      	uxth	r1, r1
 8017268:	429f      	cmp	r7, r3
 801726a:	fa0f fe81 	sxth.w	lr, r1
 801726e:	dd23      	ble.n	80172b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 8017270:	9a05      	ldr	r2, [sp, #20]
 8017272:	eba9 0000 	sub.w	r0, r9, r0
 8017276:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801727a:	ebaa 0202 	sub.w	r2, sl, r2
 801727e:	9d07      	ldr	r5, [sp, #28]
 8017280:	fb0e f000 	mul.w	r0, lr, r0
 8017284:	b292      	uxth	r2, r2
 8017286:	eba5 0a03 	sub.w	sl, r5, r3
 801728a:	9b02      	ldr	r3, [sp, #8]
 801728c:	b214      	sxth	r4, r2
 801728e:	00db      	lsls	r3, r3, #3
 8017290:	fb04 fa0a 	mul.w	sl, r4, sl
 8017294:	445b      	add	r3, fp
 8017296:	4550      	cmp	r0, sl
 8017298:	db03      	blt.n	80172a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 801729a:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 801729e:	4494      	add	ip, r2
 80172a0:	e732      	b.n	8017108 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80172a2:	9a04      	ldr	r2, [sp, #16]
 80172a4:	4431      	add	r1, r6
 80172a6:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 80172aa:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 80172ae:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 80172b2:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80172b6:	e75c      	b.n	8017172 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 80172b8:	9b08      	ldr	r3, [sp, #32]
 80172ba:	2d06      	cmp	r5, #6
 80172bc:	eba3 0308 	sub.w	r3, r3, r8
 80172c0:	b29b      	uxth	r3, r3
 80172c2:	b218      	sxth	r0, r3
 80172c4:	d813      	bhi.n	80172ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 80172c6:	9b07      	ldr	r3, [sp, #28]
 80172c8:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 80172cc:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 80172d0:	1c6b      	adds	r3, r5, #1
 80172d2:	9901      	ldr	r1, [sp, #4]
 80172d4:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 80172d8:	9b01      	ldr	r3, [sp, #4]
 80172da:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 80172de:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80172e2:	805a      	strh	r2, [r3, #2]
 80172e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80172e6:	f8a3 e006 	strh.w	lr, [r3, #6]
 80172ea:	809a      	strh	r2, [r3, #4]
 80172ec:	e75f      	b.n	80171ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 80172ee:	9c02      	ldr	r4, [sp, #8]
 80172f0:	4570      	cmp	r0, lr
 80172f2:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80172f6:	db0d      	blt.n	8017314 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 80172f8:	4431      	add	r1, r6
 80172fa:	9b06      	ldr	r3, [sp, #24]
 80172fc:	445c      	add	r4, fp
 80172fe:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8017302:	b289      	uxth	r1, r1
 8017304:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 8017308:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801730c:	4419      	add	r1, r3
 801730e:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8017312:	e583      	b.n	8016e1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017314:	445c      	add	r4, fp
 8017316:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 801731a:	e79b      	b.n	8017254 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801731c:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8017320:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8017324:	1e65      	subs	r5, r4, #1
 8017326:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 801732a:	b2ad      	uxth	r5, r5
 801732c:	42b5      	cmp	r5, r6
 801732e:	d044      	beq.n	80173ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 8017330:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8017334:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 8017338:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 801733c:	4282      	cmp	r2, r0
 801733e:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 8017342:	d11f      	bne.n	8017384 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8017344:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 8017348:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801734c:	459c      	cmp	ip, r3
 801734e:	d119      	bne.n	8017384 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8017350:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8017354:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8017358:	19d8      	adds	r0, r3, r7
 801735a:	b200      	sxth	r0, r0
 801735c:	4288      	cmp	r0, r1
 801735e:	d109      	bne.n	8017374 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 8017360:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8017364:	4413      	add	r3, r2
 8017366:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 801736a:	4629      	mov	r1, r5
 801736c:	9801      	ldr	r0, [sp, #4]
 801736e:	f7ff fd2b 	bl	8016dc8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017372:	e003      	b.n	801737c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8017374:	4411      	add	r1, r2
 8017376:	b209      	sxth	r1, r1
 8017378:	42b9      	cmp	r1, r7
 801737a:	d0f3      	beq.n	8017364 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 801737c:	3d01      	subs	r5, #1
 801737e:	3c08      	subs	r4, #8
 8017380:	b2ad      	uxth	r5, r5
 8017382:	e7d3      	b.n	801732c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8017384:	42b9      	cmp	r1, r7
 8017386:	d1f9      	bne.n	801737c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8017388:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 801738c:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8017390:	4299      	cmp	r1, r3
 8017392:	d1f3      	bne.n	801737c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8017394:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8017398:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801739c:	181f      	adds	r7, r3, r0
 801739e:	b23f      	sxth	r7, r7
 80173a0:	42ba      	cmp	r2, r7
 80173a2:	d105      	bne.n	80173b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 80173a4:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 80173a8:	440b      	add	r3, r1
 80173aa:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 80173ae:	e7dc      	b.n	801736a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 80173b0:	440a      	add	r2, r1
 80173b2:	b212      	sxth	r2, r2
 80173b4:	4290      	cmp	r0, r2
 80173b6:	d1e1      	bne.n	801737c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80173b8:	e7f6      	b.n	80173a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 80173ba:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 80173be:	2e07      	cmp	r6, #7
 80173c0:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 80173c4:	d812      	bhi.n	80173ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 80173c6:	1c75      	adds	r5, r6, #1
 80173c8:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 80173cc:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 80173d0:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 80173d4:	9d01      	ldr	r5, [sp, #4]
 80173d6:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 80173da:	442c      	add	r4, r5
 80173dc:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 80173e0:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 80173e4:	8061      	strh	r1, [r4, #2]
 80173e6:	80a2      	strh	r2, [r4, #4]
 80173e8:	80e3      	strh	r3, [r4, #6]
 80173ea:	e581      	b.n	8016ef0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80173ec:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 80173f0:	3e01      	subs	r6, #1
 80173f2:	445c      	add	r4, fp
 80173f4:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 80173f8:	f04f 37ff 	mov.w	r7, #4294967295
 80173fc:	2500      	movs	r5, #0
 80173fe:	9305      	str	r3, [sp, #20]
 8017400:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8017404:	1e72      	subs	r2, r6, #1
 8017406:	9302      	str	r3, [sp, #8]
 8017408:	4691      	mov	r9, r2
 801740a:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801740e:	9304      	str	r3, [sp, #16]
 8017410:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 8017414:	f1b9 3fff 	cmp.w	r9, #4294967295
 8017418:	6818      	ldr	r0, [r3, #0]
 801741a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801741e:	9207      	str	r2, [sp, #28]
 8017420:	bf16      	itet	ne
 8017422:	9905      	ldrne	r1, [sp, #20]
 8017424:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8017428:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801742c:	9306      	str	r3, [sp, #24]
 801742e:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8017432:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8017436:	fb18 f801 	smulbb	r8, r8, r1
 801743a:	6859      	ldr	r1, [r3, #4]
 801743c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8017440:	4671      	mov	r1, lr
 8017442:	a80c      	add	r0, sp, #48	@ 0x30
 8017444:	f7ff fb20 	bl	8016a88 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017448:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 801744c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8017450:	f04f 0c08 	mov.w	ip, #8
 8017454:	9b04      	ldr	r3, [sp, #16]
 8017456:	9a02      	ldr	r2, [sp, #8]
 8017458:	fb10 f001 	smulbb	r0, r0, r1
 801745c:	fb02 8803 	mla	r8, r2, r3, r8
 8017460:	eba0 0108 	sub.w	r1, r0, r8
 8017464:	fb90 f0fc 	sdiv	r0, r0, ip
 8017468:	4288      	cmp	r0, r1
 801746a:	dc20      	bgt.n	80174ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801746c:	4551      	cmp	r1, sl
 801746e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8017472:	da03      	bge.n	801747c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 8017474:	b1d9      	cbz	r1, 80174ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8017476:	468a      	mov	sl, r1
 8017478:	464f      	mov	r7, r9
 801747a:	4635      	mov	r5, r6
 801747c:	f109 39ff 	add.w	r9, r9, #4294967295
 8017480:	f119 0f02 	cmn.w	r9, #2
 8017484:	d1c6      	bne.n	8017414 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 8017486:	4616      	mov	r6, r2
 8017488:	3201      	adds	r2, #1
 801748a:	f1a4 0408 	sub.w	r4, r4, #8
 801748e:	d1b7      	bne.n	8017400 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 8017490:	9b01      	ldr	r3, [sp, #4]
 8017492:	b2ac      	uxth	r4, r5
 8017494:	00ed      	lsls	r5, r5, #3
 8017496:	1958      	adds	r0, r3, r5
 8017498:	1c7b      	adds	r3, r7, #1
 801749a:	d10b      	bne.n	80174b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 801749c:	4601      	mov	r1, r0
 801749e:	9803      	ldr	r0, [sp, #12]
 80174a0:	f7ff faf2 	bl	8016a88 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80174a4:	4621      	mov	r1, r4
 80174a6:	9801      	ldr	r0, [sp, #4]
 80174a8:	f7ff fc8e 	bl	8016dc8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80174ac:	e4b6      	b.n	8016e1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80174ae:	464f      	mov	r7, r9
 80174b0:	4635      	mov	r5, r6
 80174b2:	e7ed      	b.n	8017490 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 80174b4:	9b01      	ldr	r3, [sp, #4]
 80174b6:	00ff      	lsls	r7, r7, #3
 80174b8:	445d      	add	r5, fp
 80174ba:	19d9      	adds	r1, r3, r7
 80174bc:	445f      	add	r7, fp
 80174be:	f7ff fae3 	bl	8016a88 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80174c2:	9b03      	ldr	r3, [sp, #12]
 80174c4:	cb03      	ldmia	r3!, {r0, r1}
 80174c6:	9b03      	ldr	r3, [sp, #12]
 80174c8:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 80174cc:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 80174d0:	f855 0fac 	ldr.w	r0, [r5, #172]!
 80174d4:	6869      	ldr	r1, [r5, #4]
 80174d6:	c303      	stmia	r3!, {r0, r1}
 80174d8:	e7e4      	b.n	80174a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 80174da:	bf00      	nop

080174dc <_ZN8touchgfx11Application15drawCachedAreasEv>:
 80174dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174e0:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 80174e4:	b09b      	sub	sp, #108	@ 0x6c
 80174e6:	4604      	mov	r4, r0
 80174e8:	4630      	mov	r0, r6
 80174ea:	f7f9 fc26 	bl	8010d3a <_ZNK8touchgfx4Rect7isEmptyEv>
 80174ee:	4605      	mov	r5, r0
 80174f0:	b948      	cbnz	r0, 8017506 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 80174f2:	6823      	ldr	r3, [r4, #0]
 80174f4:	4620      	mov	r0, r4
 80174f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80174f8:	e896 0006 	ldmia.w	r6, {r1, r2}
 80174fc:	4798      	blx	r3
 80174fe:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8017502:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8017506:	4bc5      	ldr	r3, [pc, #788]	@ (801781c <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 8017508:	681b      	ldr	r3, [r3, #0]
 801750a:	2b00      	cmp	r3, #0
 801750c:	d03f      	beq.n	801758e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801750e:	4dc4      	ldr	r5, [pc, #784]	@ (8017820 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 8017510:	4628      	mov	r0, r5
 8017512:	f7f9 fc12 	bl	8010d3a <_ZNK8touchgfx4Rect7isEmptyEv>
 8017516:	4606      	mov	r6, r0
 8017518:	2800      	cmp	r0, #0
 801751a:	d138      	bne.n	801758e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801751c:	4628      	mov	r0, r5
 801751e:	f7ff f947 	bl	80167b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8017522:	6823      	ldr	r3, [r4, #0]
 8017524:	6829      	ldr	r1, [r5, #0]
 8017526:	4620      	mov	r0, r4
 8017528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801752a:	686a      	ldr	r2, [r5, #4]
 801752c:	4798      	blx	r3
 801752e:	802e      	strh	r6, [r5, #0]
 8017530:	806e      	strh	r6, [r5, #2]
 8017532:	80ae      	strh	r6, [r5, #4]
 8017534:	80ee      	strh	r6, [r5, #6]
 8017536:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 801753a:	4dba      	ldr	r5, [pc, #744]	@ (8017824 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 801753c:	4640      	mov	r0, r8
 801753e:	f7ff fbe8 	bl	8016d12 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017542:	882e      	ldrh	r6, [r5, #0]
 8017544:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 8017548:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 801754c:	4633      	mov	r3, r6
 801754e:	42bb      	cmp	r3, r7
 8017550:	d224      	bcs.n	801759c <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8017552:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 8017556:	2907      	cmp	r1, #7
 8017558:	d816      	bhi.n	8017588 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 801755a:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801755e:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 8017562:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 8017566:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801756a:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801756e:	1c4a      	adds	r2, r1, #1
 8017570:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 8017574:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 8017578:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 801757c:	f8a2 a002 	strh.w	sl, [r2, #2]
 8017580:	f8a2 e004 	strh.w	lr, [r2, #4]
 8017584:	f8a2 c006 	strh.w	ip, [r2, #6]
 8017588:	3301      	adds	r3, #1
 801758a:	b29b      	uxth	r3, r3
 801758c:	e7df      	b.n	801754e <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 801758e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8017592:	2b00      	cmp	r3, #0
 8017594:	d1cf      	bne.n	8017536 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 8017596:	b01b      	add	sp, #108	@ 0x6c
 8017598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801759c:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 80175a0:	42b3      	cmp	r3, r6
 80175a2:	d90c      	bls.n	80175be <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 80175a4:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80175a8:	6822      	ldr	r2, [r4, #0]
 80175aa:	3601      	adds	r6, #1
 80175ac:	4620      	mov	r0, r4
 80175ae:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 80175b0:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 80175b4:	b2b6      	uxth	r6, r6
 80175b6:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 80175ba:	47b8      	blx	r7
 80175bc:	e7ee      	b.n	801759c <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 80175be:	4a9a      	ldr	r2, [pc, #616]	@ (8017828 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 80175c0:	6813      	ldr	r3, [r2, #0]
 80175c2:	4691      	mov	r9, r2
 80175c4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80175c8:	2b01      	cmp	r3, #1
 80175ca:	f040 80e0 	bne.w	801778e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 80175ce:	8829      	ldrh	r1, [r5, #0]
 80175d0:	2600      	movs	r6, #0
 80175d2:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 80175d6:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 80175da:	33ae      	adds	r3, #174	@ 0xae
 80175dc:	428f      	cmp	r7, r1
 80175de:	f103 0308 	add.w	r3, r3, #8
 80175e2:	dd0a      	ble.n	80175fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 80175e4:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 80175e8:	3101      	adds	r1, #1
 80175ea:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 80175ee:	4402      	add	r2, r0
 80175f0:	b212      	sxth	r2, r2
 80175f2:	4296      	cmp	r6, r2
 80175f4:	bfb8      	it	lt
 80175f6:	4616      	movlt	r6, r2
 80175f8:	e7f0      	b.n	80175dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 80175fa:	4b8c      	ldr	r3, [pc, #560]	@ (801782c <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 80175fc:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 8017828 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 8017600:	881b      	ldrh	r3, [r3, #0]
 8017602:	2b0f      	cmp	r3, #15
 8017604:	bf8c      	ite	hi
 8017606:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 801760a:	f04f 0b01 	movls.w	fp, #1
 801760e:	2300      	movs	r3, #0
 8017610:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8017614:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 8017618:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 801761c:	4b82      	ldr	r3, [pc, #520]	@ (8017828 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801761e:	4438      	add	r0, r7
 8017620:	b207      	sxth	r7, r0
 8017622:	6818      	ldr	r0, [r3, #0]
 8017624:	42b7      	cmp	r7, r6
 8017626:	6803      	ldr	r3, [r0, #0]
 8017628:	f280 8083 	bge.w	8017732 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801762c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8017630:	4798      	blx	r3
 8017632:	eb07 030b 	add.w	r3, r7, fp
 8017636:	4298      	cmp	r0, r3
 8017638:	da07      	bge.n	801764a <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801763a:	42b0      	cmp	r0, r6
 801763c:	da05      	bge.n	801764a <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801763e:	4287      	cmp	r7, r0
 8017640:	dd6c      	ble.n	801771c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8017642:	2f00      	cmp	r7, #0
 8017644:	dd6a      	ble.n	801771c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8017646:	4630      	mov	r0, r6
 8017648:	e004      	b.n	8017654 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 801764a:	4287      	cmp	r7, r0
 801764c:	dcfb      	bgt.n	8017646 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 801764e:	42b0      	cmp	r0, r6
 8017650:	bfa8      	it	ge
 8017652:	4630      	movge	r0, r6
 8017654:	4b76      	ldr	r3, [pc, #472]	@ (8017830 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8017656:	1bc0      	subs	r0, r0, r7
 8017658:	2200      	movs	r2, #0
 801765a:	f8ad 7016 	strh.w	r7, [sp, #22]
 801765e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017662:	882f      	ldrh	r7, [r5, #0]
 8017664:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017668:	f8ad 3018 	strh.w	r3, [sp, #24]
 801766c:	f8ad 001a 	strh.w	r0, [sp, #26]
 8017670:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8017674:	42bb      	cmp	r3, r7
 8017676:	d9cd      	bls.n	8017614 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8017678:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801767c:	ab07      	add	r3, sp, #28
 801767e:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8017682:	6851      	ldr	r1, [r2, #4]
 8017684:	c303      	stmia	r3!, {r0, r1}
 8017686:	a905      	add	r1, sp, #20
 8017688:	a807      	add	r0, sp, #28
 801768a:	f7ff f964 	bl	8016956 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801768e:	2800      	cmp	r0, #0
 8017690:	d04c      	beq.n	801772c <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 8017692:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8017696:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801769a:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801769e:	4686      	mov	lr, r0
 80176a0:	4290      	cmp	r0, r2
 80176a2:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 80176a6:	4450      	add	r0, sl
 80176a8:	f8bd a018 	ldrh.w	sl, [sp, #24]
 80176ac:	bfb8      	it	lt
 80176ae:	4696      	movlt	lr, r2
 80176b0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80176b4:	4452      	add	r2, sl
 80176b6:	b280      	uxth	r0, r0
 80176b8:	4299      	cmp	r1, r3
 80176ba:	468c      	mov	ip, r1
 80176bc:	b292      	uxth	r2, r2
 80176be:	9302      	str	r3, [sp, #8]
 80176c0:	bfb8      	it	lt
 80176c2:	469c      	movlt	ip, r3
 80176c4:	b203      	sxth	r3, r0
 80176c6:	fa0f fa82 	sxth.w	sl, r2
 80176ca:	f8ad e01c 	strh.w	lr, [sp, #28]
 80176ce:	f8ad c01e 	strh.w	ip, [sp, #30]
 80176d2:	4553      	cmp	r3, sl
 80176d4:	bfb8      	it	lt
 80176d6:	4602      	movlt	r2, r0
 80176d8:	9b02      	ldr	r3, [sp, #8]
 80176da:	eba2 020e 	sub.w	r2, r2, lr
 80176de:	f8ad 2020 	strh.w	r2, [sp, #32]
 80176e2:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 80176e6:	4411      	add	r1, r2
 80176e8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80176ec:	4413      	add	r3, r2
 80176ee:	b289      	uxth	r1, r1
 80176f0:	b29b      	uxth	r3, r3
 80176f2:	b208      	sxth	r0, r1
 80176f4:	b21a      	sxth	r2, r3
 80176f6:	4290      	cmp	r0, r2
 80176f8:	bfb8      	it	lt
 80176fa:	460b      	movlt	r3, r1
 80176fc:	eba3 030c 	sub.w	r3, r3, ip
 8017700:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8017704:	a807      	add	r0, sp, #28
 8017706:	f7f9 fb18 	bl	8010d3a <_ZNK8touchgfx4Rect7isEmptyEv>
 801770a:	b920      	cbnz	r0, 8017716 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801770c:	6823      	ldr	r3, [r4, #0]
 801770e:	a907      	add	r1, sp, #28
 8017710:	4620      	mov	r0, r4
 8017712:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017714:	4798      	blx	r3
 8017716:	3701      	adds	r7, #1
 8017718:	b2bf      	uxth	r7, r7
 801771a:	e7a9      	b.n	8017670 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801771c:	f8d9 0000 	ldr.w	r0, [r9]
 8017720:	2101      	movs	r1, #1
 8017722:	6803      	ldr	r3, [r0, #0]
 8017724:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8017728:	4798      	blx	r3
 801772a:	e773      	b.n	8017614 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801772c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8017730:	e7e8      	b.n	8017704 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 8017732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017734:	4798      	blx	r3
 8017736:	4b3f      	ldr	r3, [pc, #252]	@ (8017834 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8017738:	781b      	ldrb	r3, [r3, #0]
 801773a:	2b00      	cmp	r3, #0
 801773c:	f43f af2b 	beq.w	8017596 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8017740:	2300      	movs	r3, #0
 8017742:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8017746:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 801774a:	882b      	ldrh	r3, [r5, #0]
 801774c:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 8017750:	42ab      	cmp	r3, r5
 8017752:	f4bf af20 	bcs.w	8017596 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8017756:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 801775a:	2907      	cmp	r1, #7
 801775c:	d814      	bhi.n	8017788 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 801775e:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 8017762:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 8017766:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 801776a:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 801776e:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8017772:	1c4a      	adds	r2, r1, #1
 8017774:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 8017778:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801777c:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 8017780:	f8a2 c002 	strh.w	ip, [r2, #2]
 8017784:	8097      	strh	r7, [r2, #4]
 8017786:	80d6      	strh	r6, [r2, #6]
 8017788:	3301      	adds	r3, #1
 801778a:	b29b      	uxth	r3, r3
 801778c:	e7e0      	b.n	8017750 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 801778e:	2b02      	cmp	r3, #2
 8017790:	f040 8133 	bne.w	80179fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 8017794:	4b28      	ldr	r3, [pc, #160]	@ (8017838 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8017796:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 801779a:	781b      	ldrb	r3, [r3, #0]
 801779c:	2b01      	cmp	r3, #1
 801779e:	f000 8098 	beq.w	80178d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 80177a2:	882a      	ldrh	r2, [r5, #0]
 80177a4:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 80177a8:	3201      	adds	r2, #1
 80177aa:	b292      	uxth	r2, r2
 80177ac:	2900      	cmp	r1, #0
 80177ae:	d0c2      	beq.n	8017736 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80177b0:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 80177b4:	4694      	mov	ip, r2
 80177b6:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 80177ba:	f04f 0900 	mov.w	r9, #0
 80177be:	441e      	add	r6, r3
 80177c0:	b236      	sxth	r6, r6
 80177c2:	fa1f f38c 	uxth.w	r3, ip
 80177c6:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 80177ca:	4299      	cmp	r1, r3
 80177cc:	f240 80be 	bls.w	801794c <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 80177d0:	4427      	add	r7, r4
 80177d2:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 80177d6:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 80177da:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 80177de:	4283      	cmp	r3, r0
 80177e0:	f340 80a0 	ble.w	8017924 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 80177e4:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 80177e8:	46e1      	mov	r9, ip
 80177ea:	4406      	add	r6, r0
 80177ec:	b236      	sxth	r6, r6
 80177ee:	429e      	cmp	r6, r3
 80177f0:	bfa8      	it	ge
 80177f2:	461e      	movge	r6, r3
 80177f4:	f10c 0c01 	add.w	ip, ip, #1
 80177f8:	e7e3      	b.n	80177c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 80177fa:	d10a      	bne.n	8017812 <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 80177fc:	4562      	cmp	r2, ip
 80177fe:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 8017802:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 8017806:	bfb8      	it	lt
 8017808:	4662      	movlt	r2, ip
 801780a:	4288      	cmp	r0, r1
 801780c:	bfb8      	it	lt
 801780e:	461f      	movlt	r7, r3
 8017810:	e086      	b.n	8017920 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 8017812:	428a      	cmp	r2, r1
 8017814:	bfb8      	it	lt
 8017816:	460a      	movlt	r2, r1
 8017818:	e082      	b.n	8017920 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801781a:	bf00      	nop
 801781c:	24026458 	.word	0x24026458
 8017820:	24026464 	.word	0x24026464
 8017824:	2400007c 	.word	0x2400007c
 8017828:	24026418 	.word	0x24026418
 801782c:	2402640e 	.word	0x2402640e
 8017830:	2402640c 	.word	0x2402640c
 8017834:	24026416 	.word	0x24026416
 8017838:	24026410 	.word	0x24026410
 801783c:	19a1      	adds	r1, r4, r6
 801783e:	ab07      	add	r3, sp, #28
 8017840:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8017844:	6849      	ldr	r1, [r1, #4]
 8017846:	c303      	stmia	r3!, {r0, r1}
 8017848:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801784c:	a807      	add	r0, sp, #28
 801784e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8017852:	2b13      	cmp	r3, #19
 8017854:	440b      	add	r3, r1
 8017856:	bfd8      	it	le
 8017858:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801785c:	1a9b      	subs	r3, r3, r2
 801785e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8017862:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017866:	f7fe ffbd 	bl	80167e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801786a:	a807      	add	r0, sp, #28
 801786c:	f7f9 fa65 	bl	8010d3a <_ZNK8touchgfx4Rect7isEmptyEv>
 8017870:	bb78      	cbnz	r0, 80178d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8017872:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 8017876:	4426      	add	r6, r4
 8017878:	f8d9 0000 	ldr.w	r0, [r9]
 801787c:	f1bc 0f14 	cmp.w	ip, #20
 8017880:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8017884:	f8d0 e000 	ldr.w	lr, [r0]
 8017888:	bfa8      	it	ge
 801788a:	f04f 0c14 	movge.w	ip, #20
 801788e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8017892:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8017896:	fa1f fc8c 	uxth.w	ip, ip
 801789a:	f8cd c000 	str.w	ip, [sp]
 801789e:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 80178a2:	47d8      	blx	fp
 80178a4:	4683      	mov	fp, r0
 80178a6:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 80178aa:	a807      	add	r0, sp, #28
 80178ac:	f7fe ff80 	bl	80167b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80178b0:	6823      	ldr	r3, [r4, #0]
 80178b2:	4620      	mov	r0, r4
 80178b4:	a907      	add	r1, sp, #28
 80178b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80178b8:	4798      	blx	r3
 80178ba:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 80178be:	eba0 000b 	sub.w	r0, r0, fp
 80178c2:	b200      	sxth	r0, r0
 80178c4:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 80178c8:	b918      	cbnz	r0, 80178d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 80178ca:	b2b9      	uxth	r1, r7
 80178cc:	4650      	mov	r0, sl
 80178ce:	f7ff fa7b 	bl	8016dc8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80178d2:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 80178d6:	f1bb 0f00 	cmp.w	fp, #0
 80178da:	f43f af2c 	beq.w	8017736 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80178de:	882b      	ldrh	r3, [r5, #0]
 80178e0:	2700      	movs	r7, #0
 80178e2:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 80178e6:	3301      	adds	r3, #1
 80178e8:	b29b      	uxth	r3, r3
 80178ea:	b299      	uxth	r1, r3
 80178ec:	00fe      	lsls	r6, r7, #3
 80178ee:	458b      	cmp	fp, r1
 80178f0:	d9a4      	bls.n	801783c <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 80178f2:	4426      	add	r6, r4
 80178f4:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 80178f8:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 80178fc:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 8017900:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 8017904:	4408      	add	r0, r1
 8017906:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 801790a:	4461      	add	r1, ip
 801790c:	b200      	sxth	r0, r0
 801790e:	b209      	sxth	r1, r1
 8017910:	4288      	cmp	r0, r1
 8017912:	f6bf af72 	bge.w	80177fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 8017916:	4584      	cmp	ip, r0
 8017918:	4662      	mov	r2, ip
 801791a:	461f      	mov	r7, r3
 801791c:	bfb8      	it	lt
 801791e:	4602      	movlt	r2, r0
 8017920:	3301      	adds	r3, #1
 8017922:	e7e2      	b.n	80178ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 8017924:	d10e      	bne.n	8017944 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 8017926:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 801792a:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 801792e:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 8017932:	4473      	add	r3, lr
 8017934:	b21b      	sxth	r3, r3
 8017936:	429e      	cmp	r6, r3
 8017938:	bfa8      	it	ge
 801793a:	461e      	movge	r6, r3
 801793c:	4287      	cmp	r7, r0
 801793e:	bfb8      	it	lt
 8017940:	46e1      	movlt	r9, ip
 8017942:	e757      	b.n	80177f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8017944:	4286      	cmp	r6, r0
 8017946:	bfa8      	it	ge
 8017948:	4606      	movge	r6, r0
 801794a:	e753      	b.n	80177f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801794c:	eb0a 0007 	add.w	r0, sl, r7
 8017950:	4427      	add	r7, r4
 8017952:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 8017956:	f1bb 0f13 	cmp.w	fp, #19
 801795a:	bfdc      	itt	le
 801795c:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 8017960:	445e      	addle	r6, fp
 8017962:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8017966:	bfd8      	it	le
 8017968:	b236      	sxthle	r6, r6
 801796a:	f7f9 f9e6 	bl	8010d3a <_ZNK8touchgfx4Rect7isEmptyEv>
 801796e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8017972:	2800      	cmp	r0, #0
 8017974:	f47f af1a 	bne.w	80177ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 8017978:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 801797c:	fa1f fb8b 	uxth.w	fp, fp
 8017980:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8017984:	1ab6      	subs	r6, r6, r2
 8017986:	4829      	ldr	r0, [pc, #164]	@ (8017a2c <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 8017988:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 801798c:	2e14      	cmp	r6, #20
 801798e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 8017992:	6800      	ldr	r0, [r0, #0]
 8017994:	bfa8      	it	ge
 8017996:	2614      	movge	r6, #20
 8017998:	f8ad 101c 	strh.w	r1, [sp, #28]
 801799c:	f8ad 201e 	strh.w	r2, [sp, #30]
 80179a0:	b289      	uxth	r1, r1
 80179a2:	f8ad 3020 	strh.w	r3, [sp, #32]
 80179a6:	b2b6      	uxth	r6, r6
 80179a8:	f8d0 c000 	ldr.w	ip, [r0]
 80179ac:	b292      	uxth	r2, r2
 80179ae:	455e      	cmp	r6, fp
 80179b0:	bf94      	ite	ls
 80179b2:	9600      	strls	r6, [sp, #0]
 80179b4:	f8cd b000 	strhi.w	fp, [sp]
 80179b8:	b29b      	uxth	r3, r3
 80179ba:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 80179be:	47b0      	blx	r6
 80179c0:	6823      	ldr	r3, [r4, #0]
 80179c2:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 80179c6:	a907      	add	r1, sp, #28
 80179c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80179ca:	4620      	mov	r0, r4
 80179cc:	4798      	blx	r3
 80179ce:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 80179d2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80179d6:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 80179da:	1a5b      	subs	r3, r3, r1
 80179dc:	440a      	add	r2, r1
 80179de:	b21b      	sxth	r3, r3
 80179e0:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 80179e4:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	f47f aeda 	bne.w	80177a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 80179ee:	fa1f f189 	uxth.w	r1, r9
 80179f2:	4650      	mov	r0, sl
 80179f4:	f7ff f9e8 	bl	8016dc8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80179f8:	e6d3      	b.n	80177a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 80179fa:	882e      	ldrh	r6, [r5, #0]
 80179fc:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8017a00:	42b3      	cmp	r3, r6
 8017a02:	f67f ae98 	bls.w	8017736 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8017a06:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 8017a0a:	ab07      	add	r3, sp, #28
 8017a0c:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8017a10:	6851      	ldr	r1, [r2, #4]
 8017a12:	c303      	stmia	r3!, {r0, r1}
 8017a14:	a807      	add	r0, sp, #28
 8017a16:	f7f9 f990 	bl	8010d3a <_ZNK8touchgfx4Rect7isEmptyEv>
 8017a1a:	b920      	cbnz	r0, 8017a26 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 8017a1c:	6823      	ldr	r3, [r4, #0]
 8017a1e:	a907      	add	r1, sp, #28
 8017a20:	4620      	mov	r0, r4
 8017a22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017a24:	4798      	blx	r3
 8017a26:	3601      	adds	r6, #1
 8017a28:	b2b6      	uxth	r6, r6
 8017a2a:	e7e7      	b.n	80179fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 8017a2c:	24026418 	.word	0x24026418

08017a30 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8017a30:	4b03      	ldr	r3, [pc, #12]	@ (8017a40 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8017a32:	2200      	movs	r2, #0
 8017a34:	801a      	strh	r2, [r3, #0]
 8017a36:	805a      	strh	r2, [r3, #2]
 8017a38:	809a      	strh	r2, [r3, #4]
 8017a3a:	80da      	strh	r2, [r3, #6]
 8017a3c:	4770      	bx	lr
 8017a3e:	bf00      	nop
 8017a40:	24026464 	.word	0x24026464

08017a44 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8017a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a48:	b09d      	sub	sp, #116	@ 0x74
 8017a4a:	4606      	mov	r6, r0
 8017a4c:	4614      	mov	r4, r2
 8017a4e:	468a      	mov	sl, r1
 8017a50:	a803      	add	r0, sp, #12
 8017a52:	461d      	mov	r5, r3
 8017a54:	f001 f98a 	bl	8018d6c <_ZN8touchgfx12TextProviderC1Ev>
 8017a58:	6833      	ldr	r3, [r6, #0]
 8017a5a:	4630      	mov	r0, r6
 8017a5c:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 8017a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017a62:	4798      	blx	r3
 8017a64:	6833      	ldr	r3, [r6, #0]
 8017a66:	4607      	mov	r7, r0
 8017a68:	4630      	mov	r0, r6
 8017a6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017a6c:	4798      	blx	r3
 8017a6e:	462a      	mov	r2, r5
 8017a70:	2500      	movs	r5, #0
 8017a72:	4621      	mov	r1, r4
 8017a74:	9000      	str	r0, [sp, #0]
 8017a76:	463b      	mov	r3, r7
 8017a78:	462c      	mov	r4, r5
 8017a7a:	46a9      	mov	r9, r5
 8017a7c:	46a8      	mov	r8, r5
 8017a7e:	a803      	add	r0, sp, #12
 8017a80:	f001 f9cf 	bl	8018e22 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017a84:	2300      	movs	r3, #0
 8017a86:	9302      	str	r3, [sp, #8]
 8017a88:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8017a8c:	429c      	cmp	r4, r3
 8017a8e:	d002      	beq.n	8017a96 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8017a90:	455c      	cmp	r4, fp
 8017a92:	bf18      	it	ne
 8017a94:	4625      	movne	r5, r4
 8017a96:	ab02      	add	r3, sp, #8
 8017a98:	4632      	mov	r2, r6
 8017a9a:	4651      	mov	r1, sl
 8017a9c:	a803      	add	r0, sp, #12
 8017a9e:	f001 fcf3 	bl	8019488 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017aa2:	4604      	mov	r4, r0
 8017aa4:	b108      	cbz	r0, 8017aaa <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8017aa6:	280a      	cmp	r0, #10
 8017aa8:	d10a      	bne.n	8017ac0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8017aaa:	45c1      	cmp	r9, r8
 8017aac:	bf38      	it	cc
 8017aae:	46c1      	movcc	r9, r8
 8017ab0:	f04f 0800 	mov.w	r8, #0
 8017ab4:	2c00      	cmp	r4, #0
 8017ab6:	d1e5      	bne.n	8017a84 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8017ab8:	4648      	mov	r0, r9
 8017aba:	b01d      	add	sp, #116	@ 0x74
 8017abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ac0:	9a02      	ldr	r2, [sp, #8]
 8017ac2:	2a00      	cmp	r2, #0
 8017ac4:	d0de      	beq.n	8017a84 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8017ac6:	7b57      	ldrb	r7, [r2, #13]
 8017ac8:	4629      	mov	r1, r5
 8017aca:	6833      	ldr	r3, [r6, #0]
 8017acc:	007f      	lsls	r7, r7, #1
 8017ace:	8894      	ldrh	r4, [r2, #4]
 8017ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017ad2:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 8017ad6:	7a97      	ldrb	r7, [r2, #10]
 8017ad8:	4307      	orrs	r7, r0
 8017ada:	4630      	mov	r0, r6
 8017adc:	4798      	blx	r3
 8017ade:	4438      	add	r0, r7
 8017ae0:	4480      	add	r8, r0
 8017ae2:	fa1f f888 	uxth.w	r8, r8
 8017ae6:	e7e5      	b.n	8017ab4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08017ae8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8017ae8:	b508      	push	{r3, lr}
 8017aea:	6803      	ldr	r3, [r0, #0]
 8017aec:	68db      	ldr	r3, [r3, #12]
 8017aee:	4798      	blx	r3
 8017af0:	b128      	cbz	r0, 8017afe <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8017af2:	7b43      	ldrb	r3, [r0, #13]
 8017af4:	7a80      	ldrb	r0, [r0, #10]
 8017af6:	005b      	lsls	r3, r3, #1
 8017af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017afc:	4318      	orrs	r0, r3
 8017afe:	bd08      	pop	{r3, pc}

08017b00 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8017b00:	b40e      	push	{r1, r2, r3}
 8017b02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b04:	b09e      	sub	sp, #120	@ 0x78
 8017b06:	4605      	mov	r5, r0
 8017b08:	ab23      	add	r3, sp, #140	@ 0x8c
 8017b0a:	a805      	add	r0, sp, #20
 8017b0c:	f853 4b04 	ldr.w	r4, [r3], #4
 8017b10:	9303      	str	r3, [sp, #12]
 8017b12:	f001 f92b 	bl	8018d6c <_ZN8touchgfx12TextProviderC1Ev>
 8017b16:	682b      	ldr	r3, [r5, #0]
 8017b18:	4628      	mov	r0, r5
 8017b1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017b1c:	4798      	blx	r3
 8017b1e:	682b      	ldr	r3, [r5, #0]
 8017b20:	4606      	mov	r6, r0
 8017b22:	4628      	mov	r0, r5
 8017b24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017b26:	4798      	blx	r3
 8017b28:	4633      	mov	r3, r6
 8017b2a:	4621      	mov	r1, r4
 8017b2c:	ae1e      	add	r6, sp, #120	@ 0x78
 8017b2e:	2400      	movs	r4, #0
 8017b30:	9000      	str	r0, [sp, #0]
 8017b32:	9a03      	ldr	r2, [sp, #12]
 8017b34:	a805      	add	r0, sp, #20
 8017b36:	f001 f974 	bl	8018e22 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017b3a:	f846 4d68 	str.w	r4, [r6, #-104]!
 8017b3e:	462a      	mov	r2, r5
 8017b40:	4633      	mov	r3, r6
 8017b42:	4621      	mov	r1, r4
 8017b44:	a805      	add	r0, sp, #20
 8017b46:	f001 fc9f 	bl	8019488 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017b4a:	b300      	cbz	r0, 8017b8e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8017b4c:	280a      	cmp	r0, #10
 8017b4e:	d01a      	beq.n	8017b86 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8017b50:	9f04      	ldr	r7, [sp, #16]
 8017b52:	b1c7      	cbz	r7, 8017b86 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8017b54:	7b78      	ldrb	r0, [r7, #13]
 8017b56:	7a3b      	ldrb	r3, [r7, #8]
 8017b58:	00c1      	lsls	r1, r0, #3
 8017b5a:	88ea      	ldrh	r2, [r5, #6]
 8017b5c:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8017b60:	4319      	orrs	r1, r3
 8017b62:	0643      	lsls	r3, r0, #25
 8017b64:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8017b68:	bf48      	it	mi
 8017b6a:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 8017b6e:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8017b72:	bf48      	it	mi
 8017b74:	b219      	sxthmi	r1, r3
 8017b76:	79fb      	ldrb	r3, [r7, #7]
 8017b78:	4303      	orrs	r3, r0
 8017b7a:	4413      	add	r3, r2
 8017b7c:	1a5b      	subs	r3, r3, r1
 8017b7e:	b21b      	sxth	r3, r3
 8017b80:	429c      	cmp	r4, r3
 8017b82:	bfb8      	it	lt
 8017b84:	461c      	movlt	r4, r3
 8017b86:	4633      	mov	r3, r6
 8017b88:	462a      	mov	r2, r5
 8017b8a:	2100      	movs	r1, #0
 8017b8c:	e7da      	b.n	8017b44 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8017b8e:	b2a0      	uxth	r0, r4
 8017b90:	b01e      	add	sp, #120	@ 0x78
 8017b92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017b96:	b003      	add	sp, #12
 8017b98:	4770      	bx	lr

08017b9a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8017b9a:	7a43      	ldrb	r3, [r0, #9]
 8017b9c:	8880      	ldrh	r0, [r0, #4]
 8017b9e:	4418      	add	r0, r3
 8017ba0:	b280      	uxth	r0, r0
 8017ba2:	4770      	bx	lr

08017ba4 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8017ba4:	6803      	ldr	r3, [r0, #0]
 8017ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017ba8:	4718      	bx	r3

08017baa <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8017baa:	b40e      	push	{r1, r2, r3}
 8017bac:	b570      	push	{r4, r5, r6, lr}
 8017bae:	b09d      	sub	sp, #116	@ 0x74
 8017bb0:	4604      	mov	r4, r0
 8017bb2:	ab21      	add	r3, sp, #132	@ 0x84
 8017bb4:	a803      	add	r0, sp, #12
 8017bb6:	f853 5b04 	ldr.w	r5, [r3], #4
 8017bba:	9302      	str	r3, [sp, #8]
 8017bbc:	f001 f8d6 	bl	8018d6c <_ZN8touchgfx12TextProviderC1Ev>
 8017bc0:	6823      	ldr	r3, [r4, #0]
 8017bc2:	4620      	mov	r0, r4
 8017bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017bc6:	4798      	blx	r3
 8017bc8:	6823      	ldr	r3, [r4, #0]
 8017bca:	4606      	mov	r6, r0
 8017bcc:	4620      	mov	r0, r4
 8017bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017bd0:	2401      	movs	r4, #1
 8017bd2:	4798      	blx	r3
 8017bd4:	4633      	mov	r3, r6
 8017bd6:	9000      	str	r0, [sp, #0]
 8017bd8:	4629      	mov	r1, r5
 8017bda:	9a02      	ldr	r2, [sp, #8]
 8017bdc:	a803      	add	r0, sp, #12
 8017bde:	f001 f920 	bl	8018e22 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017be2:	a803      	add	r0, sp, #12
 8017be4:	f001 fd1c 	bl	8019620 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017be8:	b2a3      	uxth	r3, r4
 8017bea:	b138      	cbz	r0, 8017bfc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8017bec:	280a      	cmp	r0, #10
 8017bee:	a803      	add	r0, sp, #12
 8017bf0:	bf04      	itt	eq
 8017bf2:	3301      	addeq	r3, #1
 8017bf4:	b21c      	sxtheq	r4, r3
 8017bf6:	f001 fd13 	bl	8019620 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017bfa:	e7f5      	b.n	8017be8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8017bfc:	4618      	mov	r0, r3
 8017bfe:	b01d      	add	sp, #116	@ 0x74
 8017c00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c04:	b003      	add	sp, #12
 8017c06:	4770      	bx	lr

08017c08 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8017c08:	b40e      	push	{r1, r2, r3}
 8017c0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017c0c:	b09e      	sub	sp, #120	@ 0x78
 8017c0e:	4604      	mov	r4, r0
 8017c10:	ab23      	add	r3, sp, #140	@ 0x8c
 8017c12:	a805      	add	r0, sp, #20
 8017c14:	f853 5b04 	ldr.w	r5, [r3], #4
 8017c18:	9303      	str	r3, [sp, #12]
 8017c1a:	f001 f8a7 	bl	8018d6c <_ZN8touchgfx12TextProviderC1Ev>
 8017c1e:	6823      	ldr	r3, [r4, #0]
 8017c20:	4620      	mov	r0, r4
 8017c22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017c24:	4798      	blx	r3
 8017c26:	6823      	ldr	r3, [r4, #0]
 8017c28:	4606      	mov	r6, r0
 8017c2a:	4620      	mov	r0, r4
 8017c2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017c2e:	4798      	blx	r3
 8017c30:	4633      	mov	r3, r6
 8017c32:	4629      	mov	r1, r5
 8017c34:	9000      	str	r0, [sp, #0]
 8017c36:	9a03      	ldr	r2, [sp, #12]
 8017c38:	a805      	add	r0, sp, #20
 8017c3a:	f001 f8f2 	bl	8018e22 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017c3e:	ad1e      	add	r5, sp, #120	@ 0x78
 8017c40:	2100      	movs	r1, #0
 8017c42:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 8017c46:	4622      	mov	r2, r4
 8017c48:	a805      	add	r0, sp, #20
 8017c4a:	f845 1d68 	str.w	r1, [r5, #-104]!
 8017c4e:	462b      	mov	r3, r5
 8017c50:	f001 fc1a 	bl	8019488 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017c54:	b1d8      	cbz	r0, 8017c8e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8017c56:	280a      	cmp	r0, #10
 8017c58:	d012      	beq.n	8017c80 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8017c5a:	9804      	ldr	r0, [sp, #16]
 8017c5c:	b180      	cbz	r0, 8017c80 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8017c5e:	7b47      	ldrb	r7, [r0, #13]
 8017c60:	88e2      	ldrh	r2, [r4, #6]
 8017c62:	00fb      	lsls	r3, r7, #3
 8017c64:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8017c68:	7a03      	ldrb	r3, [r0, #8]
 8017c6a:	430b      	orrs	r3, r1
 8017c6c:	0679      	lsls	r1, r7, #25
 8017c6e:	bf44      	itt	mi
 8017c70:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8017c74:	b21b      	sxthmi	r3, r3
 8017c76:	1ad3      	subs	r3, r2, r3
 8017c78:	b21b      	sxth	r3, r3
 8017c7a:	429e      	cmp	r6, r3
 8017c7c:	bfa8      	it	ge
 8017c7e:	461e      	movge	r6, r3
 8017c80:	462b      	mov	r3, r5
 8017c82:	4622      	mov	r2, r4
 8017c84:	2100      	movs	r1, #0
 8017c86:	a805      	add	r0, sp, #20
 8017c88:	f001 fbfe 	bl	8019488 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017c8c:	e7e2      	b.n	8017c54 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8017c8e:	4630      	mov	r0, r6
 8017c90:	b01e      	add	sp, #120	@ 0x78
 8017c92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017c96:	b003      	add	sp, #12
 8017c98:	4770      	bx	lr

08017c9a <_ZNK8touchgfx8Drawable10invalidateEv>:
 8017c9a:	b513      	push	{r0, r1, r4, lr}
 8017c9c:	6803      	ldr	r3, [r0, #0]
 8017c9e:	2400      	movs	r4, #0
 8017ca0:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8017ca4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017ca8:	f8ad 1004 	strh.w	r1, [sp, #4]
 8017cac:	4669      	mov	r1, sp
 8017cae:	691b      	ldr	r3, [r3, #16]
 8017cb0:	9400      	str	r4, [sp, #0]
 8017cb2:	f8ad 2006 	strh.w	r2, [sp, #6]
 8017cb6:	4798      	blx	r3
 8017cb8:	b002      	add	sp, #8
 8017cba:	bd10      	pop	{r4, pc}

08017cbc <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8017cbc:	b538      	push	{r3, r4, r5, lr}
 8017cbe:	680b      	ldr	r3, [r1, #0]
 8017cc0:	460c      	mov	r4, r1
 8017cc2:	4605      	mov	r5, r0
 8017cc4:	68db      	ldr	r3, [r3, #12]
 8017cc6:	4798      	blx	r3
 8017cc8:	6823      	ldr	r3, [r4, #0]
 8017cca:	4620      	mov	r0, r4
 8017ccc:	4629      	mov	r1, r5
 8017cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017cd0:	4798      	blx	r3
 8017cd2:	4628      	mov	r0, r5
 8017cd4:	bd38      	pop	{r3, r4, r5, pc}

08017cd6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8017cd6:	b410      	push	{r4}
 8017cd8:	880a      	ldrh	r2, [r1, #0]
 8017cda:	8884      	ldrh	r4, [r0, #4]
 8017cdc:	4422      	add	r2, r4
 8017cde:	800a      	strh	r2, [r1, #0]
 8017ce0:	884a      	ldrh	r2, [r1, #2]
 8017ce2:	88c4      	ldrh	r4, [r0, #6]
 8017ce4:	4422      	add	r2, r4
 8017ce6:	804a      	strh	r2, [r1, #2]
 8017ce8:	6940      	ldr	r0, [r0, #20]
 8017cea:	b120      	cbz	r0, 8017cf6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8017cec:	6803      	ldr	r3, [r0, #0]
 8017cee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017cf4:	4718      	bx	r3
 8017cf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017cfa:	4770      	bx	lr

08017cfc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8017cfc:	b570      	push	{r4, r5, r6, lr}
 8017cfe:	8882      	ldrh	r2, [r0, #4]
 8017d00:	460c      	mov	r4, r1
 8017d02:	880b      	ldrh	r3, [r1, #0]
 8017d04:	4605      	mov	r5, r0
 8017d06:	4413      	add	r3, r2
 8017d08:	800b      	strh	r3, [r1, #0]
 8017d0a:	884b      	ldrh	r3, [r1, #2]
 8017d0c:	88c2      	ldrh	r2, [r0, #6]
 8017d0e:	4413      	add	r3, r2
 8017d10:	804b      	strh	r3, [r1, #2]
 8017d12:	1d01      	adds	r1, r0, #4
 8017d14:	4620      	mov	r0, r4
 8017d16:	f7f8 ffcd 	bl	8010cb4 <_ZN8touchgfx4RectaNERKS0_>
 8017d1a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	dd0b      	ble.n	8017d3a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017d22:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	dd07      	ble.n	8017d3a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017d2a:	6968      	ldr	r0, [r5, #20]
 8017d2c:	b128      	cbz	r0, 8017d3a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017d2e:	6803      	ldr	r3, [r0, #0]
 8017d30:	4621      	mov	r1, r4
 8017d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017d34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017d38:	4718      	bx	r3
 8017d3a:	bd70      	pop	{r4, r5, r6, pc}

08017d3c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8017d3c:	b570      	push	{r4, r5, r6, lr}
 8017d3e:	8882      	ldrh	r2, [r0, #4]
 8017d40:	460c      	mov	r4, r1
 8017d42:	880b      	ldrh	r3, [r1, #0]
 8017d44:	4605      	mov	r5, r0
 8017d46:	4413      	add	r3, r2
 8017d48:	800b      	strh	r3, [r1, #0]
 8017d4a:	884b      	ldrh	r3, [r1, #2]
 8017d4c:	88c2      	ldrh	r2, [r0, #6]
 8017d4e:	4413      	add	r3, r2
 8017d50:	804b      	strh	r3, [r1, #2]
 8017d52:	1d01      	adds	r1, r0, #4
 8017d54:	4620      	mov	r0, r4
 8017d56:	f7f8 ffad 	bl	8010cb4 <_ZN8touchgfx4RectaNERKS0_>
 8017d5a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	dd19      	ble.n	8017d96 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8017d62:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	dd15      	ble.n	8017d96 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8017d6a:	6968      	ldr	r0, [r5, #20]
 8017d6c:	b128      	cbz	r0, 8017d7a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8017d6e:	6803      	ldr	r3, [r0, #0]
 8017d70:	4621      	mov	r1, r4
 8017d72:	691b      	ldr	r3, [r3, #16]
 8017d74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017d78:	4718      	bx	r3
 8017d7a:	4b07      	ldr	r3, [pc, #28]	@ (8017d98 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8017d7c:	681b      	ldr	r3, [r3, #0]
 8017d7e:	3304      	adds	r3, #4
 8017d80:	429d      	cmp	r5, r3
 8017d82:	d108      	bne.n	8017d96 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8017d84:	f7fe fec6 	bl	8016b14 <_ZN8touchgfx11Application11getInstanceEv>
 8017d88:	6803      	ldr	r3, [r0, #0]
 8017d8a:	6821      	ldr	r1, [r4, #0]
 8017d8c:	6862      	ldr	r2, [r4, #4]
 8017d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017d90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017d94:	4718      	bx	r3
 8017d96:	bd70      	pop	{r4, r5, r6, pc}
 8017d98:	2402645c 	.word	0x2402645c

08017d9c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8017d9c:	b570      	push	{r4, r5, r6, lr}
 8017d9e:	4604      	mov	r4, r0
 8017da0:	4616      	mov	r6, r2
 8017da2:	460d      	mov	r5, r1
 8017da4:	b901      	cbnz	r1, 8017da8 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8017da6:	b192      	cbz	r2, 8017dce <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8017da8:	6823      	ldr	r3, [r4, #0]
 8017daa:	4620      	mov	r0, r4
 8017dac:	699b      	ldr	r3, [r3, #24]
 8017dae:	4798      	blx	r3
 8017db0:	88e2      	ldrh	r2, [r4, #6]
 8017db2:	88a1      	ldrh	r1, [r4, #4]
 8017db4:	4620      	mov	r0, r4
 8017db6:	4432      	add	r2, r6
 8017db8:	4429      	add	r1, r5
 8017dba:	b212      	sxth	r2, r2
 8017dbc:	b209      	sxth	r1, r1
 8017dbe:	f7ec fbb6 	bl	800452e <_ZN8touchgfx8Drawable5setXYEss>
 8017dc2:	6823      	ldr	r3, [r4, #0]
 8017dc4:	4620      	mov	r0, r4
 8017dc6:	699b      	ldr	r3, [r3, #24]
 8017dc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017dcc:	4718      	bx	r3
 8017dce:	bd70      	pop	{r4, r5, r6, pc}

08017dd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8017dd0:	b510      	push	{r4, lr}
 8017dd2:	2300      	movs	r3, #0
 8017dd4:	4604      	mov	r4, r0
 8017dd6:	4608      	mov	r0, r1
 8017dd8:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8017ddc:	8023      	strh	r3, [r4, #0]
 8017dde:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017de2:	8063      	strh	r3, [r4, #2]
 8017de4:	6803      	ldr	r3, [r0, #0]
 8017de6:	80a1      	strh	r1, [r4, #4]
 8017de8:	4621      	mov	r1, r4
 8017dea:	80e2      	strh	r2, [r4, #6]
 8017dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017dee:	4798      	blx	r3
 8017df0:	4620      	mov	r0, r4
 8017df2:	bd10      	pop	{r4, pc}

08017df4 <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
 8017df4:	4770      	bx	lr

08017df6 <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 8017df6:	b510      	push	{r4, lr}
 8017df8:	4604      	mov	r4, r0
 8017dfa:	211c      	movs	r1, #28
 8017dfc:	f00c fe75 	bl	8024aea <_ZdlPvj>
 8017e00:	4620      	mov	r0, r4
 8017e02:	bd10      	pop	{r4, pc}

08017e04 <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 8017e04:	4a04      	ldr	r2, [pc, #16]	@ (8017e18 <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 8017e06:	6002      	str	r2, [r0, #0]
 8017e08:	2200      	movs	r2, #0
 8017e0a:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8017e0e:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8017e12:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8017e16:	4770      	bx	lr
 8017e18:	08029914 	.word	0x08029914

08017e1c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 8017e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e20:	4604      	mov	r4, r0
 8017e22:	b087      	sub	sp, #28
 8017e24:	4696      	mov	lr, r2
 8017e26:	6880      	ldr	r0, [r0, #8]
 8017e28:	8b22      	ldrh	r2, [r4, #24]
 8017e2a:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8017e2e:	9105      	str	r1, [sp, #20]
 8017e30:	1c51      	adds	r1, r2, #1
 8017e32:	8321      	strh	r1, [r4, #24]
 8017e34:	2101      	movs	r1, #1
 8017e36:	5481      	strb	r1, [r0, r2]
 8017e38:	4689      	mov	r9, r1
 8017e3a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017e3e:	8b60      	ldrh	r0, [r4, #26]
 8017e40:	ee06 2a90 	vmov	s13, r2
 8017e44:	68e2      	ldr	r2, [r4, #12]
 8017e46:	1845      	adds	r5, r0, r1
 8017e48:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017e4c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8017e50:	8365      	strh	r5, [r4, #26]
 8017e52:	edc2 6a00 	vstr	s13, [r2]
 8017e56:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8017e5a:	8b60      	ldrh	r0, [r4, #26]
 8017e5c:	ee07 2a10 	vmov	s14, r2
 8017e60:	68e2      	ldr	r2, [r4, #12]
 8017e62:	1845      	adds	r5, r0, r1
 8017e64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017e68:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8017e6c:	8365      	strh	r5, [r4, #26]
 8017e6e:	1d18      	adds	r0, r3, #4
 8017e70:	460d      	mov	r5, r1
 8017e72:	ed82 7a00 	vstr	s14, [r2]
 8017e76:	f8be 2000 	ldrh.w	r2, [lr]
 8017e7a:	9203      	str	r2, [sp, #12]
 8017e7c:	2200      	movs	r2, #0
 8017e7e:	4613      	mov	r3, r2
 8017e80:	4694      	mov	ip, r2
 8017e82:	9201      	str	r2, [sp, #4]
 8017e84:	9202      	str	r2, [sp, #8]
 8017e86:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 8017e8a:	9e05      	ldr	r6, [sp, #20]
 8017e8c:	f108 0701 	add.w	r7, r8, #1
 8017e90:	f8d4 a008 	ldr.w	sl, [r4, #8]
 8017e94:	428e      	cmp	r6, r1
 8017e96:	b2bf      	uxth	r7, r7
 8017e98:	eb0a 0b08 	add.w	fp, sl, r8
 8017e9c:	f340 80b6 	ble.w	801800c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1f0>
 8017ea0:	9b03      	ldr	r3, [sp, #12]
 8017ea2:	f9b0 c000 	ldrsh.w	ip, [r0]
 8017ea6:	fa43 fb05 	asr.w	fp, r3, r5
 8017eaa:	f00b 0b01 	and.w	fp, fp, #1
 8017eae:	fa5f f38b 	uxtb.w	r3, fp
 8017eb2:	9304      	str	r3, [sp, #16]
 8017eb4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8017eb8:	f1bb 0f00 	cmp.w	fp, #0
 8017ebc:	d057      	beq.n	8017f6e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x152>
 8017ebe:	ee07 ca90 	vmov	s15, ip
 8017ec2:	8327      	strh	r7, [r4, #24]
 8017ec4:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8017ec8:	ee07 3a90 	vmov	s15, r3
 8017ecc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017ed0:	f1b9 0f00 	cmp.w	r9, #0
 8017ed4:	d028      	beq.n	8017f28 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x10c>
 8017ed6:	f04f 0602 	mov.w	r6, #2
 8017eda:	f80a 6008 	strb.w	r6, [sl, r8]
 8017ede:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8017ee2:	68e7      	ldr	r7, [r4, #12]
 8017ee4:	f108 0901 	add.w	r9, r8, #1
 8017ee8:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8017eec:	f8a4 901a 	strh.w	r9, [r4, #26]
 8017ef0:	edc7 5a00 	vstr	s11, [r7]
 8017ef4:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8017ef8:	68e7      	ldr	r7, [r4, #12]
 8017efa:	f108 0901 	add.w	r9, r8, #1
 8017efe:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8017f02:	f8a4 901a 	strh.w	r9, [r4, #26]
 8017f06:	edc7 7a00 	vstr	s15, [r7]
 8017f0a:	3501      	adds	r5, #1
 8017f0c:	2d10      	cmp	r5, #16
 8017f0e:	d106      	bne.n	8017f1e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 8017f10:	9d02      	ldr	r5, [sp, #8]
 8017f12:	3501      	adds	r5, #1
 8017f14:	9502      	str	r5, [sp, #8]
 8017f16:	f83e 5015 	ldrh.w	r5, [lr, r5, lsl #1]
 8017f1a:	9503      	str	r5, [sp, #12]
 8017f1c:	2500      	movs	r5, #0
 8017f1e:	3101      	adds	r1, #1
 8017f20:	3004      	adds	r0, #4
 8017f22:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8017f26:	e7ae      	b.n	8017e86 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x6a>
 8017f28:	f04f 0605 	mov.w	r6, #5
 8017f2c:	ed9d 5a01 	vldr	s10, [sp, #4]
 8017f30:	f80a 6008 	strb.w	r6, [sl, r8]
 8017f34:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8017f38:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8017f3c:	68e7      	ldr	r7, [r4, #12]
 8017f3e:	f108 0901 	add.w	r9, r8, #1
 8017f42:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8017f46:	f8a4 901a 	strh.w	r9, [r4, #26]
 8017f4a:	ed87 5a00 	vstr	s10, [r7]
 8017f4e:	ee05 2a10 	vmov	s10, r2
 8017f52:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8017f56:	68e7      	ldr	r7, [r4, #12]
 8017f58:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8017f5c:	f108 0901 	add.w	r9, r8, #1
 8017f60:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8017f64:	f8a4 901a 	strh.w	r9, [r4, #26]
 8017f68:	ed87 5a00 	vstr	s10, [r7]
 8017f6c:	e7b7      	b.n	8017ede <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xc2>
 8017f6e:	f1b9 0f00 	cmp.w	r9, #0
 8017f72:	d147      	bne.n	8018004 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1e8>
 8017f74:	f04f 0605 	mov.w	r6, #5
 8017f78:	eddd 7a01 	vldr	s15, [sp, #4]
 8017f7c:	8327      	strh	r7, [r4, #24]
 8017f7e:	f80a 6008 	strb.w	r6, [sl, r8]
 8017f82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017f86:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8017f8a:	68e7      	ldr	r7, [r4, #12]
 8017f8c:	f108 0901 	add.w	r9, r8, #1
 8017f90:	9e01      	ldr	r6, [sp, #4]
 8017f92:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8017f96:	f8a4 901a 	strh.w	r9, [r4, #26]
 8017f9a:	4466      	add	r6, ip
 8017f9c:	edc7 7a00 	vstr	s15, [r7]
 8017fa0:	ee07 2a90 	vmov	s15, r2
 8017fa4:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8017fa8:	441a      	add	r2, r3
 8017faa:	68e7      	ldr	r7, [r4, #12]
 8017fac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017fb0:	f108 0901 	add.w	r9, r8, #1
 8017fb4:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8017fb8:	f8a4 901a 	strh.w	r9, [r4, #26]
 8017fbc:	edc7 7a00 	vstr	s15, [r7]
 8017fc0:	ee07 6a90 	vmov	s15, r6
 8017fc4:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8017fc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017fcc:	68e7      	ldr	r7, [r4, #12]
 8017fce:	f108 0901 	add.w	r9, r8, #1
 8017fd2:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8017fd6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8017fda:	f8a4 901a 	strh.w	r9, [r4, #26]
 8017fde:	edc7 7a00 	vstr	s15, [r7]
 8017fe2:	ee07 2a90 	vmov	s15, r2
 8017fe6:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8017fea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017fee:	68e7      	ldr	r7, [r4, #12]
 8017ff0:	f108 0901 	add.w	r9, r8, #1
 8017ff4:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8017ff8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8017ffc:	f8a4 901a 	strh.w	r9, [r4, #26]
 8018000:	edc7 7a00 	vstr	s15, [r7]
 8018004:	461a      	mov	r2, r3
 8018006:	f8cd c004 	str.w	ip, [sp, #4]
 801800a:	e77e      	b.n	8017f0a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xee>
 801800c:	f1b9 0f00 	cmp.w	r9, #0
 8018010:	d028      	beq.n	8018064 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 8018012:	ee07 ca90 	vmov	s15, ip
 8018016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801801a:	eef4 6a67 	vcmp.f32	s13, s15
 801801e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018022:	d108      	bne.n	8018036 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x21a>
 8018024:	ee07 3a90 	vmov	s15, r3
 8018028:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801802c:	eeb4 7a67 	vcmp.f32	s14, s15
 8018030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018034:	d016      	beq.n	8018064 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 8018036:	2302      	movs	r3, #2
 8018038:	8327      	strh	r7, [r4, #24]
 801803a:	f88b 3000 	strb.w	r3, [fp]
 801803e:	8b62      	ldrh	r2, [r4, #26]
 8018040:	68e3      	ldr	r3, [r4, #12]
 8018042:	1c51      	adds	r1, r2, #1
 8018044:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8018048:	8361      	strh	r1, [r4, #26]
 801804a:	edc3 6a00 	vstr	s13, [r3]
 801804e:	8b62      	ldrh	r2, [r4, #26]
 8018050:	68e3      	ldr	r3, [r4, #12]
 8018052:	1c51      	adds	r1, r2, #1
 8018054:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8018058:	8361      	strh	r1, [r4, #26]
 801805a:	ed83 7a00 	vstr	s14, [r3]
 801805e:	b007      	add	sp, #28
 8018060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018064:	2305      	movs	r3, #5
 8018066:	eddd 7a01 	vldr	s15, [sp, #4]
 801806a:	8327      	strh	r7, [r4, #24]
 801806c:	f88b 3000 	strb.w	r3, [fp]
 8018070:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018074:	8b61      	ldrh	r1, [r4, #26]
 8018076:	68e3      	ldr	r3, [r4, #12]
 8018078:	1c4d      	adds	r5, r1, #1
 801807a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801807e:	8365      	strh	r5, [r4, #26]
 8018080:	edc3 7a00 	vstr	s15, [r3]
 8018084:	ee07 2a90 	vmov	s15, r2
 8018088:	8b61      	ldrh	r1, [r4, #26]
 801808a:	68e3      	ldr	r3, [r4, #12]
 801808c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018090:	1c4d      	adds	r5, r1, #1
 8018092:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8018096:	8365      	strh	r5, [r4, #26]
 8018098:	edc3 7a00 	vstr	s15, [r3]
 801809c:	e7cf      	b.n	801803e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x222>
	...

080180a0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 80180a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80180a4:	4604      	mov	r4, r0
 80180a6:	b08e      	sub	sp, #56	@ 0x38
 80180a8:	4699      	mov	r9, r3
 80180aa:	4688      	mov	r8, r1
 80180ac:	4615      	mov	r5, r2
 80180ae:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 80180b0:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 80180b4:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80180b6:	f7eb fcff 	bl	8003ab8 <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 80180ba:	6060      	str	r0, [r4, #4]
 80180bc:	f1b9 0f00 	cmp.w	r9, #0
 80180c0:	f000 80e8 	beq.w	8018294 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 80180c4:	2800      	cmp	r0, #0
 80180c6:	f000 80e5 	beq.w	8018294 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 80180ca:	a805      	add	r0, sp, #20
 80180cc:	f000 f8f9 	bl	80182c2 <_ZN8touchgfx9Matrix3x3C1Ev>
 80180d0:	6833      	ldr	r3, [r6, #0]
 80180d2:	4630      	mov	r0, r6
 80180d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80180d6:	4798      	blx	r3
 80180d8:	a805      	add	r0, sp, #20
 80180da:	eef0 0a40 	vmov.f32	s1, s0
 80180de:	f000 f8f4 	bl	80182ca <_ZN8touchgfx9Matrix3x35scaleEff>
 80180e2:	6860      	ldr	r0, [r4, #4]
 80180e4:	f1ba 0f03 	cmp.w	sl, #3
 80180e8:	d83b      	bhi.n	8018162 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 80180ea:	e8df f00a 	tbb	[pc, sl]
 80180ee:	1002      	.short	0x1002
 80180f0:	9f71      	.short	0x9f71
 80180f2:	6803      	ldr	r3, [r0, #0]
 80180f4:	462a      	mov	r2, r5
 80180f6:	4641      	mov	r1, r8
 80180f8:	689b      	ldr	r3, [r3, #8]
 80180fa:	4798      	blx	r3
 80180fc:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8018100:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8018104:	ee07 7a90 	vmov	s15, r7
 8018108:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801810c:	e026      	b.n	801815c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 801810e:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8018112:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8018116:	8869      	ldrh	r1, [r5, #2]
 8018118:	1a9b      	subs	r3, r3, r2
 801811a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801811e:	aa03      	add	r2, sp, #12
 8018120:	1a5b      	subs	r3, r3, r1
 8018122:	4641      	mov	r1, r8
 8018124:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018128:	882b      	ldrh	r3, [r5, #0]
 801812a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801812e:	88ab      	ldrh	r3, [r5, #4]
 8018130:	f8ad 3012 	strh.w	r3, [sp, #18]
 8018134:	6803      	ldr	r3, [r0, #0]
 8018136:	689b      	ldr	r3, [r3, #8]
 8018138:	4798      	blx	r3
 801813a:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 801829c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 801813e:	a805      	add	r0, sp, #20
 8018140:	f000 f8e8 	bl	8018314 <_ZN8touchgfx9Matrix3x36rotateEf>
 8018144:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8018148:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801814a:	ee07 7a90 	vmov	s15, r7
 801814e:	1a9b      	subs	r3, r3, r2
 8018150:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8018154:	ee00 3a10 	vmov	s0, r3
 8018158:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801815c:	a805      	add	r0, sp, #20
 801815e:	f000 f927 	bl	80183b0 <_ZN8touchgfx9Matrix3x39translateEff>
 8018162:	6860      	ldr	r0, [r4, #4]
 8018164:	a905      	add	r1, sp, #20
 8018166:	2500      	movs	r5, #0
 8018168:	f109 0602 	add.w	r6, r9, #2
 801816c:	6803      	ldr	r3, [r0, #0]
 801816e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018170:	4798      	blx	r3
 8018172:	6860      	ldr	r0, [r4, #4]
 8018174:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8018176:	6803      	ldr	r3, [r0, #0]
 8018178:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 801817c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801817e:	4798      	blx	r3
 8018180:	6860      	ldr	r0, [r4, #4]
 8018182:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 8018186:	6803      	ldr	r3, [r0, #0]
 8018188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801818a:	4798      	blx	r3
 801818c:	6860      	ldr	r0, [r4, #4]
 801818e:	2101      	movs	r1, #1
 8018190:	6803      	ldr	r3, [r0, #0]
 8018192:	68db      	ldr	r3, [r3, #12]
 8018194:	4798      	blx	r3
 8018196:	f8b9 7000 	ldrh.w	r7, [r9]
 801819a:	f104 0310 	add.w	r3, r4, #16
 801819e:	61a5      	str	r5, [r4, #24]
 80181a0:	f104 0208 	add.w	r2, r4, #8
 80181a4:	f104 0114 	add.w	r1, r4, #20
 80181a8:	f104 000c 	add.w	r0, r4, #12
 80181ac:	f7ee fc7a 	bl	8006aa4 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 80181b0:	42af      	cmp	r7, r5
 80181b2:	dd60      	ble.n	8018276 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 80181b4:	8831      	ldrh	r1, [r6, #0]
 80181b6:	1cb2      	adds	r2, r6, #2
 80181b8:	4620      	mov	r0, r4
 80181ba:	3501      	adds	r5, #1
 80181bc:	f101 030f 	add.w	r3, r1, #15
 80181c0:	f3c3 1307 	ubfx	r3, r3, #4, #8
 80181c4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80181c8:	f7ff fe28 	bl	8017e1c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 80181cc:	4606      	mov	r6, r0
 80181ce:	e7ef      	b.n	80181b0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 80181d0:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80181d4:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80181d8:	8829      	ldrh	r1, [r5, #0]
 80181da:	1a9b      	subs	r3, r3, r2
 80181dc:	f8ad 2010 	strh.w	r2, [sp, #16]
 80181e0:	aa03      	add	r2, sp, #12
 80181e2:	1a5b      	subs	r3, r3, r1
 80181e4:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80181e8:	886d      	ldrh	r5, [r5, #2]
 80181ea:	f8ad 300c 	strh.w	r3, [sp, #12]
 80181ee:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80181f2:	f8ad 1012 	strh.w	r1, [sp, #18]
 80181f6:	1a5b      	subs	r3, r3, r1
 80181f8:	4641      	mov	r1, r8
 80181fa:	1b5b      	subs	r3, r3, r5
 80181fc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018200:	6803      	ldr	r3, [r0, #0]
 8018202:	689b      	ldr	r3, [r3, #8]
 8018204:	4798      	blx	r3
 8018206:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 80182a0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 801820a:	a805      	add	r0, sp, #20
 801820c:	f000 f882 	bl	8018314 <_ZN8touchgfx9Matrix3x36rotateEf>
 8018210:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8018214:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8018216:	1a9b      	subs	r3, r3, r2
 8018218:	ee00 3a90 	vmov	s1, r3
 801821c:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8018220:	1bdb      	subs	r3, r3, r7
 8018222:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8018226:	ee00 3a10 	vmov	s0, r3
 801822a:	e795      	b.n	8018158 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 801822c:	886b      	ldrh	r3, [r5, #2]
 801822e:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8018232:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018236:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801823a:	8829      	ldrh	r1, [r5, #0]
 801823c:	1a9b      	subs	r3, r3, r2
 801823e:	f8ad 2012 	strh.w	r2, [sp, #18]
 8018242:	aa03      	add	r2, sp, #12
 8018244:	1a5b      	subs	r3, r3, r1
 8018246:	4641      	mov	r1, r8
 8018248:	f8ad 300e 	strh.w	r3, [sp, #14]
 801824c:	88eb      	ldrh	r3, [r5, #6]
 801824e:	f8ad 3010 	strh.w	r3, [sp, #16]
 8018252:	6803      	ldr	r3, [r0, #0]
 8018254:	689b      	ldr	r3, [r3, #8]
 8018256:	4798      	blx	r3
 8018258:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 80182a4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 801825c:	a805      	add	r0, sp, #20
 801825e:	f000 f859 	bl	8018314 <_ZN8touchgfx9Matrix3x36rotateEf>
 8018262:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8018266:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 801826a:	1bdb      	subs	r3, r3, r7
 801826c:	ee00 3a90 	vmov	s1, r3
 8018270:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8018274:	e748      	b.n	8018108 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 8018276:	6860      	ldr	r0, [r4, #4]
 8018278:	2100      	movs	r1, #0
 801827a:	8b22      	ldrh	r2, [r4, #24]
 801827c:	6803      	ldr	r3, [r0, #0]
 801827e:	9101      	str	r1, [sp, #4]
 8018280:	8b61      	ldrh	r1, [r4, #26]
 8018282:	9100      	str	r1, [sp, #0]
 8018284:	6a1d      	ldr	r5, [r3, #32]
 8018286:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 801828a:	47a8      	blx	r5
 801828c:	6860      	ldr	r0, [r4, #4]
 801828e:	6803      	ldr	r3, [r0, #0]
 8018290:	69db      	ldr	r3, [r3, #28]
 8018292:	4798      	blx	r3
 8018294:	b00e      	add	sp, #56	@ 0x38
 8018296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801829a:	bf00      	nop
 801829c:	42b40000 	.word	0x42b40000
 80182a0:	43340000 	.word	0x43340000
 80182a4:	43870000 	.word	0x43870000

080182a8 <_ZN8touchgfx9Matrix3x35resetEv>:
 80182a8:	2300      	movs	r3, #0
 80182aa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80182ae:	6043      	str	r3, [r0, #4]
 80182b0:	6002      	str	r2, [r0, #0]
 80182b2:	6083      	str	r3, [r0, #8]
 80182b4:	60c3      	str	r3, [r0, #12]
 80182b6:	6102      	str	r2, [r0, #16]
 80182b8:	6143      	str	r3, [r0, #20]
 80182ba:	6183      	str	r3, [r0, #24]
 80182bc:	61c3      	str	r3, [r0, #28]
 80182be:	6202      	str	r2, [r0, #32]
 80182c0:	4770      	bx	lr

080182c2 <_ZN8touchgfx9Matrix3x3C1Ev>:
 80182c2:	b508      	push	{r3, lr}
 80182c4:	f7ff fff0 	bl	80182a8 <_ZN8touchgfx9Matrix3x35resetEv>
 80182c8:	bd08      	pop	{r3, pc}

080182ca <_ZN8touchgfx9Matrix3x35scaleEff>:
 80182ca:	edd0 7a00 	vldr	s15, [r0]
 80182ce:	ee67 7a80 	vmul.f32	s15, s15, s0
 80182d2:	edc0 7a00 	vstr	s15, [r0]
 80182d6:	edd0 7a01 	vldr	s15, [r0, #4]
 80182da:	ee67 7a80 	vmul.f32	s15, s15, s0
 80182de:	edc0 7a01 	vstr	s15, [r0, #4]
 80182e2:	edd0 7a02 	vldr	s15, [r0, #8]
 80182e6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80182ea:	edd0 7a03 	vldr	s15, [r0, #12]
 80182ee:	ee67 7aa0 	vmul.f32	s15, s15, s1
 80182f2:	ed80 0a02 	vstr	s0, [r0, #8]
 80182f6:	edc0 7a03 	vstr	s15, [r0, #12]
 80182fa:	edd0 7a04 	vldr	s15, [r0, #16]
 80182fe:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8018302:	edc0 7a04 	vstr	s15, [r0, #16]
 8018306:	edd0 7a05 	vldr	s15, [r0, #20]
 801830a:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801830e:	edc0 0a05 	vstr	s1, [r0, #20]
 8018312:	4770      	bx	lr

08018314 <_ZN8touchgfx9Matrix3x36rotateEf>:
 8018314:	eddf 7a24 	vldr	s15, [pc, #144]	@ 80183a8 <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 8018318:	ee20 0a27 	vmul.f32	s0, s0, s15
 801831c:	eddf 7a23 	vldr	s15, [pc, #140]	@ 80183ac <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 8018320:	b510      	push	{r4, lr}
 8018322:	ed2d 8b02 	vpush	{d8}
 8018326:	eec0 8a27 	vdiv.f32	s17, s0, s15
 801832a:	4604      	mov	r4, r0
 801832c:	eeb0 0a68 	vmov.f32	s0, s17
 8018330:	f00c fd12 	bl	8024d58 <cosf>
 8018334:	eeb0 8a40 	vmov.f32	s16, s0
 8018338:	eeb0 0a68 	vmov.f32	s0, s17
 801833c:	f00c fc48 	bl	8024bd0 <sinf>
 8018340:	edd4 6a03 	vldr	s13, [r4, #12]
 8018344:	edd4 4a00 	vldr	s9, [r4]
 8018348:	ee60 7a66 	vnmul.f32	s15, s0, s13
 801834c:	ed94 7a04 	vldr	s14, [r4, #16]
 8018350:	ed94 5a01 	vldr	s10, [r4, #4]
 8018354:	ee66 6a88 	vmul.f32	s13, s13, s16
 8018358:	edd4 5a02 	vldr	s11, [r4, #8]
 801835c:	eee8 7a24 	vfma.f32	s15, s16, s9
 8018360:	eee0 6a24 	vfma.f32	s13, s0, s9
 8018364:	edc4 7a00 	vstr	s15, [r4]
 8018368:	ee60 7a47 	vnmul.f32	s15, s0, s14
 801836c:	ee27 7a08 	vmul.f32	s14, s14, s16
 8018370:	edc4 6a03 	vstr	s13, [r4, #12]
 8018374:	eee8 7a05 	vfma.f32	s15, s16, s10
 8018378:	eea0 7a05 	vfma.f32	s14, s0, s10
 801837c:	edc4 7a01 	vstr	s15, [r4, #4]
 8018380:	edd4 7a05 	vldr	s15, [r4, #20]
 8018384:	ed84 7a04 	vstr	s14, [r4, #16]
 8018388:	ee20 6a67 	vnmul.f32	s12, s0, s15
 801838c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8018390:	eea8 6a25 	vfma.f32	s12, s16, s11
 8018394:	eee0 7a25 	vfma.f32	s15, s0, s11
 8018398:	ecbd 8b02 	vpop	{d8}
 801839c:	ed84 6a02 	vstr	s12, [r4, #8]
 80183a0:	edc4 7a05 	vstr	s15, [r4, #20]
 80183a4:	bd10      	pop	{r4, pc}
 80183a6:	bf00      	nop
 80183a8:	40490fdb 	.word	0x40490fdb
 80183ac:	43340000 	.word	0x43340000

080183b0 <_ZN8touchgfx9Matrix3x39translateEff>:
 80183b0:	ed90 6a06 	vldr	s12, [r0, #24]
 80183b4:	edd0 7a00 	vldr	s15, [r0]
 80183b8:	edd0 6a07 	vldr	s13, [r0, #28]
 80183bc:	eee6 7a00 	vfma.f32	s15, s12, s0
 80183c0:	ed90 7a08 	vldr	s14, [r0, #32]
 80183c4:	edc0 7a00 	vstr	s15, [r0]
 80183c8:	edd0 7a01 	vldr	s15, [r0, #4]
 80183cc:	eee6 7a80 	vfma.f32	s15, s13, s0
 80183d0:	edc0 7a01 	vstr	s15, [r0, #4]
 80183d4:	edd0 7a02 	vldr	s15, [r0, #8]
 80183d8:	eee7 7a00 	vfma.f32	s15, s14, s0
 80183dc:	edc0 7a02 	vstr	s15, [r0, #8]
 80183e0:	edd0 7a03 	vldr	s15, [r0, #12]
 80183e4:	eee6 7a20 	vfma.f32	s15, s12, s1
 80183e8:	edc0 7a03 	vstr	s15, [r0, #12]
 80183ec:	edd0 7a04 	vldr	s15, [r0, #16]
 80183f0:	eee6 7aa0 	vfma.f32	s15, s13, s1
 80183f4:	edc0 7a04 	vstr	s15, [r0, #16]
 80183f8:	edd0 7a05 	vldr	s15, [r0, #20]
 80183fc:	eee7 7a20 	vfma.f32	s15, s14, s1
 8018400:	edc0 7a05 	vstr	s15, [r0, #20]
 8018404:	4770      	bx	lr

08018406 <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 8018406:	edd0 6a01 	vldr	s13, [r0, #4]
 801840a:	b084      	sub	sp, #16
 801840c:	edd0 7a04 	vldr	s15, [r0, #16]
 8018410:	ed90 7a03 	vldr	s14, [r0, #12]
 8018414:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8018418:	ee60 0aa6 	vmul.f32	s1, s1, s13
 801841c:	edd0 6a00 	vldr	s13, [r0]
 8018420:	eee7 7a00 	vfma.f32	s15, s14, s0
 8018424:	ed90 7a05 	vldr	s14, [r0, #20]
 8018428:	eee6 0a80 	vfma.f32	s1, s13, s0
 801842c:	ed90 0a02 	vldr	s0, [r0, #8]
 8018430:	ee30 0a80 	vadd.f32	s0, s1, s0
 8018434:	ee77 0a87 	vadd.f32	s1, s15, s14
 8018438:	b004      	add	sp, #16
 801843a:	4770      	bx	lr

0801843c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801843c:	b530      	push	{r4, r5, lr}
 801843e:	8083      	strh	r3, [r0, #4]
 8018440:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8018444:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8018448:	80c3      	strh	r3, [r0, #6]
 801844a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801844e:	6141      	str	r1, [r0, #20]
 8018450:	7203      	strb	r3, [r0, #8]
 8018452:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8018456:	8302      	strh	r2, [r0, #24]
 8018458:	7243      	strb	r3, [r0, #9]
 801845a:	7a83      	ldrb	r3, [r0, #10]
 801845c:	f365 0306 	bfi	r3, r5, #0, #7
 8018460:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8018464:	f365 13c7 	bfi	r3, r5, #7, #1
 8018468:	7283      	strb	r3, [r0, #10]
 801846a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801846e:	72c3      	strb	r3, [r0, #11]
 8018470:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8018474:	7303      	strb	r3, [r0, #12]
 8018476:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801847a:	81c3      	strh	r3, [r0, #14]
 801847c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8018480:	8203      	strh	r3, [r0, #16]
 8018482:	4b01      	ldr	r3, [pc, #4]	@ (8018488 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8018484:	6003      	str	r3, [r0, #0]
 8018486:	bd30      	pop	{r4, r5, pc}
 8018488:	08029928 	.word	0x08029928

0801848c <_ZNK8touchgfx9ConstFont4findEt>:
 801848c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801848e:	6944      	ldr	r4, [r0, #20]
 8018490:	b3bc      	cbz	r4, 8018502 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018492:	88a3      	ldrh	r3, [r4, #4]
 8018494:	8b02      	ldrh	r2, [r0, #24]
 8018496:	1acb      	subs	r3, r1, r3
 8018498:	f102 32ff 	add.w	r2, r2, #4294967295
 801849c:	d431      	bmi.n	8018502 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801849e:	4293      	cmp	r3, r2
 80184a0:	dd0c      	ble.n	80184bc <_ZNK8touchgfx9ConstFont4findEt+0x30>
 80184a2:	230e      	movs	r3, #14
 80184a4:	fb03 4302 	mla	r3, r3, r2, r4
 80184a8:	889b      	ldrh	r3, [r3, #4]
 80184aa:	1a5b      	subs	r3, r3, r1
 80184ac:	1ad3      	subs	r3, r2, r3
 80184ae:	429a      	cmp	r2, r3
 80184b0:	db27      	blt.n	8018502 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	bfbc      	itt	lt
 80184b6:	2302      	movlt	r3, #2
 80184b8:	fb92 f3f3 	sdivlt	r3, r2, r3
 80184bc:	2500      	movs	r5, #0
 80184be:	260e      	movs	r6, #14
 80184c0:	4295      	cmp	r5, r2
 80184c2:	dc1e      	bgt.n	8018502 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80184c4:	fb06 4003 	mla	r0, r6, r3, r4
 80184c8:	8887      	ldrh	r7, [r0, #4]
 80184ca:	42b9      	cmp	r1, r7
 80184cc:	d01a      	beq.n	8018504 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 80184ce:	d20d      	bcs.n	80184ec <_ZNK8touchgfx9ConstFont4findEt+0x60>
 80184d0:	1e5a      	subs	r2, r3, #1
 80184d2:	4295      	cmp	r5, r2
 80184d4:	dc15      	bgt.n	8018502 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80184d6:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 80184da:	1a5b      	subs	r3, r3, r1
 80184dc:	1ad3      	subs	r3, r2, r3
 80184de:	429a      	cmp	r2, r3
 80184e0:	db0f      	blt.n	8018502 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80184e2:	429d      	cmp	r5, r3
 80184e4:	ddec      	ble.n	80184c0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80184e6:	1953      	adds	r3, r2, r5
 80184e8:	105b      	asrs	r3, r3, #1
 80184ea:	e7e9      	b.n	80184c0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80184ec:	1c5d      	adds	r5, r3, #1
 80184ee:	42aa      	cmp	r2, r5
 80184f0:	db07      	blt.n	8018502 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80184f2:	8a43      	ldrh	r3, [r0, #18]
 80184f4:	1acb      	subs	r3, r1, r3
 80184f6:	442b      	add	r3, r5
 80184f8:	429d      	cmp	r5, r3
 80184fa:	dc02      	bgt.n	8018502 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80184fc:	429a      	cmp	r2, r3
 80184fe:	dadf      	bge.n	80184c0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018500:	e7f1      	b.n	80184e6 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8018502:	2000      	movs	r0, #0
 8018504:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018506 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8018506:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018508:	4604      	mov	r4, r0
 801850a:	4617      	mov	r7, r2
 801850c:	461e      	mov	r6, r3
 801850e:	b911      	cbnz	r1, 8018516 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8018510:	2500      	movs	r5, #0
 8018512:	4628      	mov	r0, r5
 8018514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018516:	290a      	cmp	r1, #10
 8018518:	d0fa      	beq.n	8018510 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801851a:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801851e:	4291      	cmp	r1, r2
 8018520:	d0f6      	beq.n	8018510 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018522:	f242 020b 	movw	r2, #8203	@ 0x200b
 8018526:	4291      	cmp	r1, r2
 8018528:	d0f2      	beq.n	8018510 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801852a:	f7ff ffaf 	bl	801848c <_ZNK8touchgfx9ConstFont4findEt>
 801852e:	4605      	mov	r5, r0
 8018530:	b950      	cbnz	r0, 8018548 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8018532:	6823      	ldr	r3, [r4, #0]
 8018534:	4620      	mov	r0, r4
 8018536:	691b      	ldr	r3, [r3, #16]
 8018538:	4798      	blx	r3
 801853a:	4601      	mov	r1, r0
 801853c:	4620      	mov	r0, r4
 801853e:	f7ff ffa5 	bl	801848c <_ZNK8touchgfx9ConstFont4findEt>
 8018542:	4605      	mov	r5, r0
 8018544:	2800      	cmp	r0, #0
 8018546:	d0e3      	beq.n	8018510 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018548:	6823      	ldr	r3, [r4, #0]
 801854a:	4629      	mov	r1, r5
 801854c:	4620      	mov	r0, r4
 801854e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018550:	4798      	blx	r3
 8018552:	6038      	str	r0, [r7, #0]
 8018554:	6823      	ldr	r3, [r4, #0]
 8018556:	4620      	mov	r0, r4
 8018558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801855a:	4798      	blx	r3
 801855c:	7030      	strb	r0, [r6, #0]
 801855e:	e7d8      	b.n	8018512 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08018560 <_ZN8touchgfx4clzuEm>:
 8018560:	4603      	mov	r3, r0
 8018562:	b1c8      	cbz	r0, 8018598 <_ZN8touchgfx4clzuEm+0x38>
 8018564:	0c02      	lsrs	r2, r0, #16
 8018566:	0412      	lsls	r2, r2, #16
 8018568:	b9a2      	cbnz	r2, 8018594 <_ZN8touchgfx4clzuEm+0x34>
 801856a:	0403      	lsls	r3, r0, #16
 801856c:	2010      	movs	r0, #16
 801856e:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8018572:	bf04      	itt	eq
 8018574:	021b      	lsleq	r3, r3, #8
 8018576:	3008      	addeq	r0, #8
 8018578:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801857c:	bf04      	itt	eq
 801857e:	011b      	lsleq	r3, r3, #4
 8018580:	3004      	addeq	r0, #4
 8018582:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 8018586:	bf04      	itt	eq
 8018588:	009b      	lsleq	r3, r3, #2
 801858a:	3002      	addeq	r0, #2
 801858c:	2b00      	cmp	r3, #0
 801858e:	db04      	blt.n	801859a <_ZN8touchgfx4clzuEm+0x3a>
 8018590:	3001      	adds	r0, #1
 8018592:	4770      	bx	lr
 8018594:	2000      	movs	r0, #0
 8018596:	e7ea      	b.n	801856e <_ZN8touchgfx4clzuEm+0xe>
 8018598:	2020      	movs	r0, #32
 801859a:	4770      	bx	lr

0801859c <_ZN8touchgfx7muldivuEmmmRm>:
 801859c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80185a0:	460f      	mov	r7, r1
 80185a2:	4615      	mov	r5, r2
 80185a4:	461e      	mov	r6, r3
 80185a6:	4601      	mov	r1, r0
 80185a8:	b100      	cbz	r0, 80185ac <_ZN8touchgfx7muldivuEmmmRm+0x10>
 80185aa:	b927      	cbnz	r7, 80185b6 <_ZN8touchgfx7muldivuEmmmRm+0x1a>
 80185ac:	2000      	movs	r0, #0
 80185ae:	6030      	str	r0, [r6, #0]
 80185b0:	b002      	add	sp, #8
 80185b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80185b6:	f7ff ffd3 	bl	8018560 <_ZN8touchgfx4clzuEm>
 80185ba:	b980      	cbnz	r0, 80185de <_ZN8touchgfx7muldivuEmmmRm+0x42>
 80185bc:	4638      	mov	r0, r7
 80185be:	f7ff ffcf 	bl	8018560 <_ZN8touchgfx4clzuEm>
 80185c2:	2800      	cmp	r0, #0
 80185c4:	dd05      	ble.n	80185d2 <_ZN8touchgfx7muldivuEmmmRm+0x36>
 80185c6:	4633      	mov	r3, r6
 80185c8:	462a      	mov	r2, r5
 80185ca:	4638      	mov	r0, r7
 80185cc:	f7ff ffe6 	bl	801859c <_ZN8touchgfx7muldivuEmmmRm>
 80185d0:	e7ee      	b.n	80185b0 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 80185d2:	f04f 33ff 	mov.w	r3, #4294967295
 80185d6:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80185da:	6033      	str	r3, [r6, #0]
 80185dc:	e7e8      	b.n	80185b0 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 80185de:	fa37 f800 	lsrs.w	r8, r7, r0
 80185e2:	fb07 f301 	mul.w	r3, r7, r1
 80185e6:	d105      	bne.n	80185f4 <_ZN8touchgfx7muldivuEmmmRm+0x58>
 80185e8:	fbb3 f0f5 	udiv	r0, r3, r5
 80185ec:	fb05 3510 	mls	r5, r5, r0, r3
 80185f0:	6035      	str	r5, [r6, #0]
 80185f2:	e7dd      	b.n	80185b0 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 80185f4:	2301      	movs	r3, #1
 80185f6:	fa01 fa00 	lsl.w	sl, r1, r0
 80185fa:	462a      	mov	r2, r5
 80185fc:	fa03 f000 	lsl.w	r0, r3, r0
 8018600:	4633      	mov	r3, r6
 8018602:	fbba f9f5 	udiv	r9, sl, r5
 8018606:	3801      	subs	r0, #1
 8018608:	fb08 f409 	mul.w	r4, r8, r9
 801860c:	4038      	ands	r0, r7
 801860e:	f7ff ffc5 	bl	801859c <_ZN8touchgfx7muldivuEmmmRm>
 8018612:	462a      	mov	r2, r5
 8018614:	4607      	mov	r7, r0
 8018616:	ab01      	add	r3, sp, #4
 8018618:	fb05 a119 	mls	r1, r5, r9, sl
 801861c:	4640      	mov	r0, r8
 801861e:	f7ff ffbd 	bl	801859c <_ZN8touchgfx7muldivuEmmmRm>
 8018622:	9b01      	ldr	r3, [sp, #4]
 8018624:	6832      	ldr	r2, [r6, #0]
 8018626:	441a      	add	r2, r3
 8018628:	fbb2 f3f5 	udiv	r3, r2, r5
 801862c:	441c      	add	r4, r3
 801862e:	fb05 2513 	mls	r5, r5, r3, r2
 8018632:	443c      	add	r4, r7
 8018634:	4420      	add	r0, r4
 8018636:	e7db      	b.n	80185f0 <_ZN8touchgfx7muldivuEmmmRm+0x54>

08018638 <_ZN8touchgfx6muldivElllRl>:
 8018638:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801863a:	2800      	cmp	r0, #0
 801863c:	461e      	mov	r6, r3
 801863e:	bfba      	itte	lt
 8018640:	4240      	neglt	r0, r0
 8018642:	f04f 34ff 	movlt.w	r4, #4294967295
 8018646:	2401      	movge	r4, #1
 8018648:	2900      	cmp	r1, #0
 801864a:	bfbc      	itt	lt
 801864c:	4249      	neglt	r1, r1
 801864e:	4264      	neglt	r4, r4
 8018650:	2a00      	cmp	r2, #0
 8018652:	bfb6      	itet	lt
 8018654:	4265      	neglt	r5, r4
 8018656:	4625      	movge	r5, r4
 8018658:	4252      	neglt	r2, r2
 801865a:	4288      	cmp	r0, r1
 801865c:	bfc2      	ittt	gt
 801865e:	4603      	movgt	r3, r0
 8018660:	4608      	movgt	r0, r1
 8018662:	4619      	movgt	r1, r3
 8018664:	ab01      	add	r3, sp, #4
 8018666:	f7ff ff99 	bl	801859c <_ZN8touchgfx7muldivuEmmmRm>
 801866a:	9b01      	ldr	r3, [sp, #4]
 801866c:	4368      	muls	r0, r5
 801866e:	435c      	muls	r4, r3
 8018670:	6034      	str	r4, [r6, #0]
 8018672:	b002      	add	sp, #8
 8018674:	bd70      	pop	{r4, r5, r6, pc}

08018676 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8018676:	2000      	movs	r0, #0
 8018678:	4770      	bx	lr

0801867a <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801867a:	2001      	movs	r0, #1
 801867c:	4770      	bx	lr

0801867e <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801867e:	2002      	movs	r0, #2
 8018680:	4770      	bx	lr

08018682 <_ZN8touchgfx6ScreenD1Ev>:
 8018682:	4770      	bx	lr

08018684 <_ZN8touchgfx12GestureEventD1Ev>:
 8018684:	4770      	bx	lr

08018686 <_ZN8touchgfx9DragEventD1Ev>:
 8018686:	4770      	bx	lr

08018688 <_ZN8touchgfx10ClickEventD1Ev>:
 8018688:	4770      	bx	lr

0801868a <_ZN8touchgfx10ClickEventD0Ev>:
 801868a:	b510      	push	{r4, lr}
 801868c:	4604      	mov	r4, r0
 801868e:	210c      	movs	r1, #12
 8018690:	f00c fa2b 	bl	8024aea <_ZdlPvj>
 8018694:	4620      	mov	r0, r4
 8018696:	bd10      	pop	{r4, pc}

08018698 <_ZN8touchgfx9DragEventD0Ev>:
 8018698:	b510      	push	{r4, lr}
 801869a:	4604      	mov	r4, r0
 801869c:	2110      	movs	r1, #16
 801869e:	f00c fa24 	bl	8024aea <_ZdlPvj>
 80186a2:	4620      	mov	r0, r4
 80186a4:	bd10      	pop	{r4, pc}

080186a6 <_ZN8touchgfx12GestureEventD0Ev>:
 80186a6:	b510      	push	{r4, lr}
 80186a8:	4604      	mov	r4, r0
 80186aa:	210c      	movs	r1, #12
 80186ac:	f00c fa1d 	bl	8024aea <_ZdlPvj>
 80186b0:	4620      	mov	r0, r4
 80186b2:	bd10      	pop	{r4, pc}

080186b4 <_ZN8touchgfx6ScreenD0Ev>:
 80186b4:	b510      	push	{r4, lr}
 80186b6:	4604      	mov	r4, r0
 80186b8:	213c      	movs	r1, #60	@ 0x3c
 80186ba:	f00c fa16 	bl	8024aea <_ZdlPvj>
 80186be:	4620      	mov	r0, r4
 80186c0:	bd10      	pop	{r4, pc}
	...

080186c4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80186c4:	b530      	push	{r4, r5, lr}
 80186c6:	460d      	mov	r5, r1
 80186c8:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80186ca:	b087      	sub	sp, #28
 80186cc:	4604      	mov	r4, r0
 80186ce:	b301      	cbz	r1, 8018712 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 80186d0:	a801      	add	r0, sp, #4
 80186d2:	f7ff fb7d 	bl	8017dd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80186d6:	892a      	ldrh	r2, [r5, #8]
 80186d8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80186dc:	7928      	ldrb	r0, [r5, #4]
 80186de:	1ad2      	subs	r2, r2, r3
 80186e0:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80186e2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80186e6:	441a      	add	r2, r3
 80186e8:	896b      	ldrh	r3, [r5, #10]
 80186ea:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 80186ee:	f88d 0010 	strb.w	r0, [sp, #16]
 80186f2:	1b5b      	subs	r3, r3, r5
 80186f4:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 80186f6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80186f8:	442b      	add	r3, r5
 80186fa:	4d07      	ldr	r5, [pc, #28]	@ (8018718 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 80186fc:	f8ad 1012 	strh.w	r1, [sp, #18]
 8018700:	a903      	add	r1, sp, #12
 8018702:	9503      	str	r5, [sp, #12]
 8018704:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018708:	f8ad 3016 	strh.w	r3, [sp, #22]
 801870c:	6803      	ldr	r3, [r0, #0]
 801870e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018710:	4798      	blx	r3
 8018712:	b007      	add	sp, #28
 8018714:	bd30      	pop	{r4, r5, pc}
 8018716:	bf00      	nop
 8018718:	080299b8 	.word	0x080299b8

0801871c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801871c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018720:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8018722:	b08a      	sub	sp, #40	@ 0x28
 8018724:	4604      	mov	r4, r0
 8018726:	460d      	mov	r5, r1
 8018728:	b113      	cbz	r3, 8018730 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801872a:	790b      	ldrb	r3, [r1, #4]
 801872c:	2b00      	cmp	r3, #0
 801872e:	d044      	beq.n	80187ba <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018730:	f104 0804 	add.w	r8, r4, #4
 8018734:	a803      	add	r0, sp, #12
 8018736:	4641      	mov	r1, r8
 8018738:	f7ff fb4a 	bl	8017dd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801873c:	792b      	ldrb	r3, [r5, #4]
 801873e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8018742:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8018746:	b983      	cbnz	r3, 801876a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8018748:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 801874c:	892a      	ldrh	r2, [r5, #8]
 801874e:	88e9      	ldrh	r1, [r5, #6]
 8018750:	4640      	mov	r0, r8
 8018752:	1b92      	subs	r2, r2, r6
 8018754:	9301      	str	r3, [sp, #4]
 8018756:	1bc9      	subs	r1, r1, r7
 8018758:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 801875c:	b212      	sxth	r2, r2
 801875e:	9300      	str	r3, [sp, #0]
 8018760:	b209      	sxth	r1, r1
 8018762:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8018766:	f7f8 f9c3 	bl	8010af0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801876a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801876c:	b329      	cbz	r1, 80187ba <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801876e:	a805      	add	r0, sp, #20
 8018770:	f7ff fb2e 	bl	8017dd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018774:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8018778:	792b      	ldrb	r3, [r5, #4]
 801877a:	a907      	add	r1, sp, #28
 801877c:	1abf      	subs	r7, r7, r2
 801877e:	88ea      	ldrh	r2, [r5, #6]
 8018780:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8018782:	4417      	add	r7, r2
 8018784:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 8018786:	f88d 3020 	strb.w	r3, [sp, #32]
 801878a:	4417      	add	r7, r2
 801878c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8018790:	1ab6      	subs	r6, r6, r2
 8018792:	892a      	ldrh	r2, [r5, #8]
 8018794:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 8018798:	4416      	add	r6, r2
 801879a:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801879c:	4416      	add	r6, r2
 801879e:	4a08      	ldr	r2, [pc, #32]	@ (80187c0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 80187a0:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 80187a4:	2600      	movs	r6, #0
 80187a6:	9207      	str	r2, [sp, #28]
 80187a8:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 80187ac:	6803      	ldr	r3, [r0, #0]
 80187ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80187b0:	4798      	blx	r3
 80187b2:	792b      	ldrb	r3, [r5, #4]
 80187b4:	b10b      	cbz	r3, 80187ba <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80187b6:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 80187ba:	b00a      	add	sp, #40	@ 0x28
 80187bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187c0:	08029990 	.word	0x08029990

080187c4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 80187c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187c8:	460c      	mov	r4, r1
 80187ca:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80187cc:	b088      	sub	sp, #32
 80187ce:	4605      	mov	r5, r0
 80187d0:	2900      	cmp	r1, #0
 80187d2:	d06d      	beq.n	80188b0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 80187d4:	4668      	mov	r0, sp
 80187d6:	f7ff fafb 	bl	8017dd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80187da:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 80187dc:	88e3      	ldrh	r3, [r4, #6]
 80187de:	f9bd 8000 	ldrsh.w	r8, [sp]
 80187e2:	440b      	add	r3, r1
 80187e4:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 80187e8:	b21b      	sxth	r3, r3
 80187ea:	4543      	cmp	r3, r8
 80187ec:	db31      	blt.n	8018852 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80187ee:	f8bd c004 	ldrh.w	ip, [sp, #4]
 80187f2:	44c4      	add	ip, r8
 80187f4:	fa0f fc8c 	sxth.w	ip, ip
 80187f8:	4563      	cmp	r3, ip
 80187fa:	da2a      	bge.n	8018852 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80187fc:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 80187fe:	8926      	ldrh	r6, [r4, #8]
 8018800:	4416      	add	r6, r2
 8018802:	b236      	sxth	r6, r6
 8018804:	42be      	cmp	r6, r7
 8018806:	db24      	blt.n	8018852 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018808:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801880c:	4438      	add	r0, r7
 801880e:	b200      	sxth	r0, r0
 8018810:	4286      	cmp	r6, r0
 8018812:	da1e      	bge.n	8018852 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018814:	8963      	ldrh	r3, [r4, #10]
 8018816:	4419      	add	r1, r3
 8018818:	b209      	sxth	r1, r1
 801881a:	4541      	cmp	r1, r8
 801881c:	db08      	blt.n	8018830 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801881e:	4561      	cmp	r1, ip
 8018820:	da06      	bge.n	8018830 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8018822:	89a3      	ldrh	r3, [r4, #12]
 8018824:	441a      	add	r2, r3
 8018826:	b212      	sxth	r2, r2
 8018828:	42ba      	cmp	r2, r7
 801882a:	db01      	blt.n	8018830 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801882c:	4282      	cmp	r2, r0
 801882e:	db10      	blt.n	8018852 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018830:	4b21      	ldr	r3, [pc, #132]	@ (80188b8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8018832:	a904      	add	r1, sp, #16
 8018834:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8018836:	9304      	str	r3, [sp, #16]
 8018838:	2302      	movs	r3, #2
 801883a:	f88d 3014 	strb.w	r3, [sp, #20]
 801883e:	2300      	movs	r3, #0
 8018840:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018844:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018848:	f8ad 301a 	strh.w	r3, [sp, #26]
 801884c:	6803      	ldr	r3, [r0, #0]
 801884e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018850:	4798      	blx	r3
 8018852:	1d29      	adds	r1, r5, #4
 8018854:	a802      	add	r0, sp, #8
 8018856:	f7ff fabb 	bl	8017dd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801885a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801885e:	88e0      	ldrh	r0, [r4, #6]
 8018860:	eba3 0808 	sub.w	r8, r3, r8
 8018864:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8018868:	7921      	ldrb	r1, [r4, #4]
 801886a:	fa1f f888 	uxth.w	r8, r8
 801886e:	1bdf      	subs	r7, r3, r7
 8018870:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 8018874:	b2bb      	uxth	r3, r7
 8018876:	4440      	add	r0, r8
 8018878:	8922      	ldrh	r2, [r4, #8]
 801887a:	8967      	ldrh	r7, [r4, #10]
 801887c:	4460      	add	r0, ip
 801887e:	89a4      	ldrh	r4, [r4, #12]
 8018880:	441a      	add	r2, r3
 8018882:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 8018884:	44b8      	add	r8, r7
 8018886:	4423      	add	r3, r4
 8018888:	f8ad 0016 	strh.w	r0, [sp, #22]
 801888c:	4432      	add	r2, r6
 801888e:	44e0      	add	r8, ip
 8018890:	4433      	add	r3, r6
 8018892:	4c0a      	ldr	r4, [pc, #40]	@ (80188bc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8018894:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8018896:	f88d 1014 	strb.w	r1, [sp, #20]
 801889a:	a904      	add	r1, sp, #16
 801889c:	9404      	str	r4, [sp, #16]
 801889e:	f8ad 2018 	strh.w	r2, [sp, #24]
 80188a2:	f8ad 801a 	strh.w	r8, [sp, #26]
 80188a6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80188aa:	6803      	ldr	r3, [r0, #0]
 80188ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80188ae:	4798      	blx	r3
 80188b0:	b008      	add	sp, #32
 80188b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188b6:	bf00      	nop
 80188b8:	08029990 	.word	0x08029990
 80188bc:	080299a4 	.word	0x080299a4

080188c0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80188c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80188c2:	4604      	mov	r4, r0
 80188c4:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 80188c8:	3201      	adds	r2, #1
 80188ca:	d112      	bne.n	80188f2 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 80188cc:	2500      	movs	r5, #0
 80188ce:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80188d2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80188d6:	6803      	ldr	r3, [r0, #0]
 80188d8:	9500      	str	r5, [sp, #0]
 80188da:	466d      	mov	r5, sp
 80188dc:	f8ad 1004 	strh.w	r1, [sp, #4]
 80188e0:	f8ad 2006 	strh.w	r2, [sp, #6]
 80188e4:	4629      	mov	r1, r5
 80188e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80188e8:	4798      	blx	r3
 80188ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 80188ee:	e884 0003 	stmia.w	r4, {r0, r1}
 80188f2:	4620      	mov	r0, r4
 80188f4:	b003      	add	sp, #12
 80188f6:	bd30      	pop	{r4, r5, pc}

080188f8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 80188f8:	b513      	push	{r0, r1, r4, lr}
 80188fa:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 80188fe:	4604      	mov	r4, r0
 8018900:	3301      	adds	r3, #1
 8018902:	d109      	bne.n	8018918 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8018904:	4601      	mov	r1, r0
 8018906:	4668      	mov	r0, sp
 8018908:	f7ff fa62 	bl	8017dd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801890c:	f8bd 3000 	ldrh.w	r3, [sp]
 8018910:	8423      	strh	r3, [r4, #32]
 8018912:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018916:	8463      	strh	r3, [r4, #34]	@ 0x22
 8018918:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801891c:	b002      	add	sp, #8
 801891e:	bd10      	pop	{r4, pc}

08018920 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8018920:	b513      	push	{r0, r1, r4, lr}
 8018922:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 8018926:	4604      	mov	r4, r0
 8018928:	3301      	adds	r3, #1
 801892a:	d109      	bne.n	8018940 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801892c:	4601      	mov	r1, r0
 801892e:	4668      	mov	r0, sp
 8018930:	f7ff fa4e 	bl	8017dd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018934:	f8bd 3000 	ldrh.w	r3, [sp]
 8018938:	8423      	strh	r3, [r4, #32]
 801893a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801893e:	8463      	strh	r3, [r4, #34]	@ 0x22
 8018940:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 8018944:	b002      	add	sp, #8
 8018946:	bd10      	pop	{r4, pc}

08018948 <_ZN8touchgfx6ScreenC1Ev>:
 8018948:	b570      	push	{r4, r5, r6, lr}
 801894a:	4b17      	ldr	r3, [pc, #92]	@ (80189a8 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801894c:	4605      	mov	r5, r0
 801894e:	4a17      	ldr	r2, [pc, #92]	@ (80189ac <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8018950:	2101      	movs	r1, #1
 8018952:	f845 3b04 	str.w	r3, [r5], #4
 8018956:	2300      	movs	r3, #0
 8018958:	6042      	str	r2, [r0, #4]
 801895a:	4604      	mov	r4, r0
 801895c:	8103      	strh	r3, [r0, #8]
 801895e:	8143      	strh	r3, [r0, #10]
 8018960:	8183      	strh	r3, [r0, #12]
 8018962:	81c3      	strh	r3, [r0, #14]
 8018964:	8203      	strh	r3, [r0, #16]
 8018966:	8243      	strh	r3, [r0, #18]
 8018968:	8283      	strh	r3, [r0, #20]
 801896a:	82c3      	strh	r3, [r0, #22]
 801896c:	6203      	str	r3, [r0, #32]
 801896e:	8483      	strh	r3, [r0, #36]	@ 0x24
 8018970:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8018972:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 8018976:	6343      	str	r3, [r0, #52]	@ 0x34
 8018978:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 801897c:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8018980:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8018984:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 8018988:	4b09      	ldr	r3, [pc, #36]	@ (80189b0 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801898a:	4628      	mov	r0, r5
 801898c:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018990:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8018992:	4a08      	ldr	r2, [pc, #32]	@ (80189b4 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8018994:	f9b2 1000 	ldrsh.w	r1, [r2]
 8018998:	4798      	blx	r3
 801899a:	6863      	ldr	r3, [r4, #4]
 801899c:	4628      	mov	r0, r5
 801899e:	4631      	mov	r1, r6
 80189a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80189a2:	4798      	blx	r3
 80189a4:	4620      	mov	r0, r4
 80189a6:	bd70      	pop	{r4, r5, r6, pc}
 80189a8:	080299cc 	.word	0x080299cc
 80189ac:	080292b8 	.word	0x080292b8
 80189b0:	2402640e 	.word	0x2402640e
 80189b4:	2402640c 	.word	0x2402640c

080189b8 <_ZN8touchgfx6Screen4drawEv>:
 80189b8:	4b09      	ldr	r3, [pc, #36]	@ (80189e0 <_ZN8touchgfx6Screen4drawEv+0x28>)
 80189ba:	b507      	push	{r0, r1, r2, lr}
 80189bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80189c0:	2100      	movs	r1, #0
 80189c2:	4b08      	ldr	r3, [pc, #32]	@ (80189e4 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80189c4:	9100      	str	r1, [sp, #0]
 80189c6:	4669      	mov	r1, sp
 80189c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80189cc:	f8ad 2004 	strh.w	r2, [sp, #4]
 80189d0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80189d4:	6803      	ldr	r3, [r0, #0]
 80189d6:	689b      	ldr	r3, [r3, #8]
 80189d8:	4798      	blx	r3
 80189da:	b003      	add	sp, #12
 80189dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80189e0:	2402640c 	.word	0x2402640c
 80189e4:	2402640e 	.word	0x2402640e

080189e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 80189e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189ec:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80189f0:	b089      	sub	sp, #36	@ 0x24
 80189f2:	4680      	mov	r8, r0
 80189f4:	460c      	mov	r4, r1
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	4615      	mov	r5, r2
 80189fa:	dd0e      	ble.n	8018a1a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80189fc:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	dd0a      	ble.n	8018a1a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018a04:	4628      	mov	r0, r5
 8018a06:	f7ff ff5b 	bl	80188c0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018a0a:	4621      	mov	r1, r4
 8018a0c:	f7fd ffa3 	bl	8016956 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018a10:	69eb      	ldr	r3, [r5, #28]
 8018a12:	b928      	cbnz	r0, 8018a20 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8018a14:	461d      	mov	r5, r3
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	d1f4      	bne.n	8018a04 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8018a1a:	b009      	add	sp, #36	@ 0x24
 8018a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a20:	ae04      	add	r6, sp, #16
 8018a22:	2b00      	cmp	r3, #0
 8018a24:	f000 80b5 	beq.w	8018b92 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8018a28:	682b      	ldr	r3, [r5, #0]
 8018a2a:	4629      	mov	r1, r5
 8018a2c:	a802      	add	r0, sp, #8
 8018a2e:	68db      	ldr	r3, [r3, #12]
 8018a30:	4798      	blx	r3
 8018a32:	4628      	mov	r0, r5
 8018a34:	f7ff ff60 	bl	80188f8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8018a38:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8018a3c:	4407      	add	r7, r0
 8018a3e:	4628      	mov	r0, r5
 8018a40:	f7ff ff6e 	bl	8018920 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8018a44:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8018a48:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8018a4c:	b23f      	sxth	r7, r7
 8018a4e:	4418      	add	r0, r3
 8018a50:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018a54:	4621      	mov	r1, r4
 8018a56:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018a5a:	f8ad 0012 	strh.w	r0, [sp, #18]
 8018a5e:	4630      	mov	r0, r6
 8018a60:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018a64:	f8ad 7010 	strh.w	r7, [sp, #16]
 8018a68:	f7f8 f924 	bl	8010cb4 <_ZN8touchgfx4RectaNERKS0_>
 8018a6c:	4628      	mov	r0, r5
 8018a6e:	f7ff ff27 	bl	80188c0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018a72:	ab06      	add	r3, sp, #24
 8018a74:	4602      	mov	r2, r0
 8018a76:	e896 0003 	ldmia.w	r6, {r0, r1}
 8018a7a:	e883 0003 	stmia.w	r3, {r0, r1}
 8018a7e:	4611      	mov	r1, r2
 8018a80:	4618      	mov	r0, r3
 8018a82:	f7f8 f917 	bl	8010cb4 <_ZN8touchgfx4RectaNERKS0_>
 8018a86:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8018a8a:	f9b4 1000 	ldrsh.w	r1, [r4]
 8018a8e:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8018a92:	4299      	cmp	r1, r3
 8018a94:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8018a98:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8018a9c:	d10b      	bne.n	8018ab6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8018a9e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8018aa2:	4552      	cmp	r2, sl
 8018aa4:	d107      	bne.n	8018ab6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8018aa6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8018aaa:	455a      	cmp	r2, fp
 8018aac:	d103      	bne.n	8018ab6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8018aae:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8018ab2:	454a      	cmp	r2, r9
 8018ab4:	d06d      	beq.n	8018b92 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8018ab6:	f1bb 0f00 	cmp.w	fp, #0
 8018aba:	dd65      	ble.n	8018b88 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8018abc:	f1b9 0f00 	cmp.w	r9, #0
 8018ac0:	dd62      	ble.n	8018b88 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8018ac2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8018ac6:	fa1f f08a 	uxth.w	r0, sl
 8018aca:	4552      	cmp	r2, sl
 8018acc:	9000      	str	r0, [sp, #0]
 8018ace:	da12      	bge.n	8018af6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8018ad0:	9301      	str	r3, [sp, #4]
 8018ad2:	9b00      	ldr	r3, [sp, #0]
 8018ad4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8018ad8:	f8ad 2012 	strh.w	r2, [sp, #18]
 8018adc:	1a9a      	subs	r2, r3, r2
 8018ade:	f8ad 1010 	strh.w	r1, [sp, #16]
 8018ae2:	4631      	mov	r1, r6
 8018ae4:	f8ad 0014 	strh.w	r0, [sp, #20]
 8018ae8:	4640      	mov	r0, r8
 8018aea:	f8ad 2016 	strh.w	r2, [sp, #22]
 8018aee:	69ea      	ldr	r2, [r5, #28]
 8018af0:	f7ff ff7a 	bl	80189e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018af4:	9b01      	ldr	r3, [sp, #4]
 8018af6:	f9b4 2000 	ldrsh.w	r2, [r4]
 8018afa:	b29f      	uxth	r7, r3
 8018afc:	429a      	cmp	r2, r3
 8018afe:	da0d      	bge.n	8018b1c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8018b00:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018b04:	1aba      	subs	r2, r7, r2
 8018b06:	f8ad a012 	strh.w	sl, [sp, #18]
 8018b0a:	4631      	mov	r1, r6
 8018b0c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018b10:	4640      	mov	r0, r8
 8018b12:	f8ad 9016 	strh.w	r9, [sp, #22]
 8018b16:	69ea      	ldr	r2, [r5, #28]
 8018b18:	f7ff ff66 	bl	80189e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018b1c:	8822      	ldrh	r2, [r4, #0]
 8018b1e:	445f      	add	r7, fp
 8018b20:	88a3      	ldrh	r3, [r4, #4]
 8018b22:	b2bf      	uxth	r7, r7
 8018b24:	4413      	add	r3, r2
 8018b26:	b23a      	sxth	r2, r7
 8018b28:	b29b      	uxth	r3, r3
 8018b2a:	b219      	sxth	r1, r3
 8018b2c:	4291      	cmp	r1, r2
 8018b2e:	dd0d      	ble.n	8018b4c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8018b30:	1bdb      	subs	r3, r3, r7
 8018b32:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018b36:	f8ad a012 	strh.w	sl, [sp, #18]
 8018b3a:	4631      	mov	r1, r6
 8018b3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018b40:	4640      	mov	r0, r8
 8018b42:	f8ad 9016 	strh.w	r9, [sp, #22]
 8018b46:	69ea      	ldr	r2, [r5, #28]
 8018b48:	f7ff ff4e 	bl	80189e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018b4c:	88e2      	ldrh	r2, [r4, #6]
 8018b4e:	8863      	ldrh	r3, [r4, #2]
 8018b50:	4413      	add	r3, r2
 8018b52:	9a00      	ldr	r2, [sp, #0]
 8018b54:	444a      	add	r2, r9
 8018b56:	b29b      	uxth	r3, r3
 8018b58:	fa1f f982 	uxth.w	r9, r2
 8018b5c:	b219      	sxth	r1, r3
 8018b5e:	fa0f f289 	sxth.w	r2, r9
 8018b62:	428a      	cmp	r2, r1
 8018b64:	da15      	bge.n	8018b92 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8018b66:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8018b6a:	eba3 0309 	sub.w	r3, r3, r9
 8018b6e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8018b72:	f8ad 1014 	strh.w	r1, [sp, #20]
 8018b76:	4631      	mov	r1, r6
 8018b78:	f8ad 0010 	strh.w	r0, [sp, #16]
 8018b7c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8018b80:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018b84:	69ea      	ldr	r2, [r5, #28]
 8018b86:	e001      	b.n	8018b8c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8018b88:	69ea      	ldr	r2, [r5, #28]
 8018b8a:	4621      	mov	r1, r4
 8018b8c:	4640      	mov	r0, r8
 8018b8e:	f7ff ff2b 	bl	80189e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018b92:	4628      	mov	r0, r5
 8018b94:	f7ff fe94 	bl	80188c0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018b98:	6861      	ldr	r1, [r4, #4]
 8018b9a:	4602      	mov	r2, r0
 8018b9c:	4633      	mov	r3, r6
 8018b9e:	6820      	ldr	r0, [r4, #0]
 8018ba0:	c303      	stmia	r3!, {r0, r1}
 8018ba2:	4611      	mov	r1, r2
 8018ba4:	4630      	mov	r0, r6
 8018ba6:	f7f8 f885 	bl	8010cb4 <_ZN8touchgfx4RectaNERKS0_>
 8018baa:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8018bae:	2b00      	cmp	r3, #0
 8018bb0:	f77f af33 	ble.w	8018a1a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018bb4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	f77f af2e 	ble.w	8018a1a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018bbe:	4628      	mov	r0, r5
 8018bc0:	f7ff fe9a 	bl	80188f8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8018bc4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8018bc8:	1a18      	subs	r0, r3, r0
 8018bca:	f8ad 0010 	strh.w	r0, [sp, #16]
 8018bce:	4628      	mov	r0, r5
 8018bd0:	f7ff fea6 	bl	8018920 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8018bd4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8018bd8:	4631      	mov	r1, r6
 8018bda:	1a18      	subs	r0, r3, r0
 8018bdc:	f8ad 0012 	strh.w	r0, [sp, #18]
 8018be0:	4628      	mov	r0, r5
 8018be2:	682b      	ldr	r3, [r5, #0]
 8018be4:	689b      	ldr	r3, [r3, #8]
 8018be6:	4798      	blx	r3
 8018be8:	e717      	b.n	8018a1a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08018bea <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8018bea:	b570      	push	{r4, r5, r6, lr}
 8018bec:	1d06      	adds	r6, r0, #4
 8018bee:	b086      	sub	sp, #24
 8018bf0:	460c      	mov	r4, r1
 8018bf2:	2300      	movs	r3, #0
 8018bf4:	4631      	mov	r1, r6
 8018bf6:	4605      	mov	r5, r0
 8018bf8:	a802      	add	r0, sp, #8
 8018bfa:	9301      	str	r3, [sp, #4]
 8018bfc:	f7ff f8e8 	bl	8017dd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018c00:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018c04:	8822      	ldrh	r2, [r4, #0]
 8018c06:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8018c0a:	1ad2      	subs	r2, r2, r3
 8018c0c:	8863      	ldrh	r3, [r4, #2]
 8018c0e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8018c12:	1a5b      	subs	r3, r3, r1
 8018c14:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8018c18:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018c1c:	aa01      	add	r2, sp, #4
 8018c1e:	f8ad 0014 	strh.w	r0, [sp, #20]
 8018c22:	4630      	mov	r0, r6
 8018c24:	f8ad 1016 	strh.w	r1, [sp, #22]
 8018c28:	a904      	add	r1, sp, #16
 8018c2a:	f8ad 3012 	strh.w	r3, [sp, #18]
 8018c2e:	f7f8 f919 	bl	8010e64 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8018c32:	9a01      	ldr	r2, [sp, #4]
 8018c34:	b11a      	cbz	r2, 8018c3e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8018c36:	4621      	mov	r1, r4
 8018c38:	4628      	mov	r0, r5
 8018c3a:	f7ff fed5 	bl	80189e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018c3e:	b006      	add	sp, #24
 8018c40:	bd70      	pop	{r4, r5, r6, pc}

08018c42 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8018c42:	4602      	mov	r2, r0
 8018c44:	b530      	push	{r4, r5, lr}
 8018c46:	4604      	mov	r4, r0
 8018c48:	b085      	sub	sp, #20
 8018c4a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8018c4e:	460d      	mov	r5, r1
 8018c50:	466b      	mov	r3, sp
 8018c52:	6851      	ldr	r1, [r2, #4]
 8018c54:	c303      	stmia	r3!, {r0, r1}
 8018c56:	4629      	mov	r1, r5
 8018c58:	4668      	mov	r0, sp
 8018c5a:	f7f8 f82b 	bl	8010cb4 <_ZN8touchgfx4RectaNERKS0_>
 8018c5e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8018c62:	b12b      	cbz	r3, 8018c70 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8018c64:	4669      	mov	r1, sp
 8018c66:	4620      	mov	r0, r4
 8018c68:	f7ff ffbf 	bl	8018bea <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8018c6c:	b005      	add	sp, #20
 8018c6e:	bd30      	pop	{r4, r5, pc}
 8018c70:	3404      	adds	r4, #4
 8018c72:	a802      	add	r0, sp, #8
 8018c74:	4621      	mov	r1, r4
 8018c76:	f7ff f8ab 	bl	8017dd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018c7a:	f8bd 3000 	ldrh.w	r3, [sp]
 8018c7e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8018c82:	4669      	mov	r1, sp
 8018c84:	4620      	mov	r0, r4
 8018c86:	1a9b      	subs	r3, r3, r2
 8018c88:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8018c8c:	f8ad 3000 	strh.w	r3, [sp]
 8018c90:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018c94:	1a9b      	subs	r3, r3, r2
 8018c96:	f8ad 3002 	strh.w	r3, [sp, #2]
 8018c9a:	f7f8 f8aa 	bl	8010df2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8018c9e:	e7e5      	b.n	8018c6c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08018ca0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8018ca0:	460b      	mov	r3, r1
 8018ca2:	680a      	ldr	r2, [r1, #0]
 8018ca4:	1d01      	adds	r1, r0, #4
 8018ca6:	6992      	ldr	r2, [r2, #24]
 8018ca8:	4618      	mov	r0, r3
 8018caa:	4710      	bx	r2

08018cac <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 8018cac:	4298      	cmp	r0, r3
 8018cae:	d200      	bcs.n	8018cb2 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 8018cb0:	b913      	cbnz	r3, 8018cb8 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 8018cb2:	440a      	add	r2, r1
 8018cb4:	b210      	sxth	r0, r2
 8018cb6:	4770      	bx	lr
 8018cb8:	ee07 0a90 	vmov	s15, r0
 8018cbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018cc0:	ee07 3a90 	vmov	s15, r3
 8018cc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018cc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8018ccc:	ee07 2a90 	vmov	s15, r2
 8018cd0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018cd4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8018cd8:	ee07 1a90 	vmov	s15, r1
 8018cdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018ce0:	ee37 7a66 	vsub.f32	s14, s14, s13
 8018ce4:	ee67 5a07 	vmul.f32	s11, s14, s14
 8018ce8:	eee5 6a87 	vfma.f32	s13, s11, s14
 8018cec:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8018cf0:	eee6 7a26 	vfma.f32	s15, s12, s13
 8018cf4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cfc:	bfcc      	ite	gt
 8018cfe:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8018d02:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8018d06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018d0a:	ee17 3a90 	vmov	r3, s15
 8018d0e:	b218      	sxth	r0, r3
 8018d10:	4770      	bx	lr

08018d12 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 8018d12:	4298      	cmp	r0, r3
 8018d14:	d200      	bcs.n	8018d18 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 8018d16:	b913      	cbnz	r3, 8018d1e <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 8018d18:	440a      	add	r2, r1
 8018d1a:	b210      	sxth	r0, r2
 8018d1c:	4770      	bx	lr
 8018d1e:	ee07 2a90 	vmov	s15, r2
 8018d22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018d26:	ee07 0a90 	vmov	s15, r0
 8018d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018d32:	ee07 3a10 	vmov	s14, r3
 8018d36:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8018d3a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8018d3e:	ee07 1a90 	vmov	s15, r1
 8018d42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018d46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018d4a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8018d4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d56:	bfcc      	ite	gt
 8018d58:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8018d5c:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8018d60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018d64:	ee17 3a90 	vmov	r3, s15
 8018d68:	b218      	sxth	r0, r3
 8018d6a:	4770      	bx	lr

08018d6c <_ZN8touchgfx12TextProviderC1Ev>:
 8018d6c:	b538      	push	{r3, r4, r5, lr}
 8018d6e:	2500      	movs	r5, #0
 8018d70:	2302      	movs	r3, #2
 8018d72:	4604      	mov	r4, r0
 8018d74:	220e      	movs	r2, #14
 8018d76:	7403      	strb	r3, [r0, #16]
 8018d78:	4629      	mov	r1, r5
 8018d7a:	6145      	str	r5, [r0, #20]
 8018d7c:	7605      	strb	r5, [r0, #24]
 8018d7e:	83c5      	strh	r5, [r0, #30]
 8018d80:	8405      	strh	r5, [r0, #32]
 8018d82:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8018d84:	8705      	strh	r5, [r0, #56]	@ 0x38
 8018d86:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 8018d88:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 8018d8c:	e9c0 5500 	strd	r5, r5, [r0]
 8018d90:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 8018d94:	304c      	adds	r0, #76	@ 0x4c
 8018d96:	f00c fcbb 	bl	8025710 <memset>
 8018d9a:	2301      	movs	r3, #1
 8018d9c:	4620      	mov	r0, r4
 8018d9e:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 8018da2:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8018da6:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 8018daa:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 8018dae:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 8018db2:	f7ed fe05 	bl	80069c0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8018db6:	4620      	mov	r0, r4
 8018db8:	bd38      	pop	{r3, r4, r5, pc}

08018dba <_ZN8touchgfx12TextProvider11endOfStringEv>:
 8018dba:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8018dbc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8018dc0:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 8018dc2:	fab0 f080 	clz	r0, r0
 8018dc6:	0940      	lsrs	r0, r0, #5
 8018dc8:	4770      	bx	lr

08018dca <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8018dca:	b530      	push	{r4, r5, lr}
 8018dcc:	2500      	movs	r5, #0
 8018dce:	2401      	movs	r4, #1
 8018dd0:	6843      	ldr	r3, [r0, #4]
 8018dd2:	b913      	cbnz	r3, 8018dda <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8018dd4:	6803      	ldr	r3, [r0, #0]
 8018dd6:	b313      	cbz	r3, 8018e1e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8018dd8:	6043      	str	r3, [r0, #4]
 8018dda:	7e03      	ldrb	r3, [r0, #24]
 8018ddc:	b143      	cbz	r3, 8018df0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8018dde:	6943      	ldr	r3, [r0, #20]
 8018de0:	b12b      	cbz	r3, 8018dee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8018de2:	881a      	ldrh	r2, [r3, #0]
 8018de4:	b11a      	cbz	r2, 8018dee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8018de6:	1c9a      	adds	r2, r3, #2
 8018de8:	6142      	str	r2, [r0, #20]
 8018dea:	8818      	ldrh	r0, [r3, #0]
 8018dec:	bd30      	pop	{r4, r5, pc}
 8018dee:	7605      	strb	r5, [r0, #24]
 8018df0:	6843      	ldr	r3, [r0, #4]
 8018df2:	8819      	ldrh	r1, [r3, #0]
 8018df4:	b199      	cbz	r1, 8018e1e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8018df6:	1c9a      	adds	r2, r3, #2
 8018df8:	2902      	cmp	r1, #2
 8018dfa:	6042      	str	r2, [r0, #4]
 8018dfc:	d1f5      	bne.n	8018dea <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8018dfe:	7c03      	ldrb	r3, [r0, #16]
 8018e00:	2b01      	cmp	r3, #1
 8018e02:	d8e5      	bhi.n	8018dd0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018e04:	1c5a      	adds	r2, r3, #1
 8018e06:	3302      	adds	r3, #2
 8018e08:	7402      	strb	r2, [r0, #16]
 8018e0a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8018e0e:	6143      	str	r3, [r0, #20]
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d0dd      	beq.n	8018dd0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018e14:	881b      	ldrh	r3, [r3, #0]
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	d0da      	beq.n	8018dd0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018e1a:	7604      	strb	r4, [r0, #24]
 8018e1c:	e7d8      	b.n	8018dd0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018e1e:	2000      	movs	r0, #0
 8018e20:	e7e4      	b.n	8018dec <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08018e22 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8018e22:	6001      	str	r1, [r0, #0]
 8018e24:	2100      	movs	r1, #0
 8018e26:	b430      	push	{r4, r5}
 8018e28:	6041      	str	r1, [r0, #4]
 8018e2a:	6815      	ldr	r5, [r2, #0]
 8018e2c:	6085      	str	r5, [r0, #8]
 8018e2e:	6852      	ldr	r2, [r2, #4]
 8018e30:	6443      	str	r3, [r0, #68]	@ 0x44
 8018e32:	9b02      	ldr	r3, [sp, #8]
 8018e34:	60c2      	str	r2, [r0, #12]
 8018e36:	7401      	strb	r1, [r0, #16]
 8018e38:	6141      	str	r1, [r0, #20]
 8018e3a:	7601      	strb	r1, [r0, #24]
 8018e3c:	8701      	strh	r1, [r0, #56]	@ 0x38
 8018e3e:	8401      	strh	r1, [r0, #32]
 8018e40:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 8018e44:	6483      	str	r3, [r0, #72]	@ 0x48
 8018e46:	bc30      	pop	{r4, r5}
 8018e48:	f7ed bdba 	b.w	80069c0 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08018e4c <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 8018e4c:	b408      	push	{r3}
 8018e4e:	b510      	push	{r4, lr}
 8018e50:	b085      	sub	sp, #20
 8018e52:	ac07      	add	r4, sp, #28
 8018e54:	f854 3b04 	ldr.w	r3, [r4], #4
 8018e58:	9300      	str	r3, [sp, #0]
 8018e5a:	4613      	mov	r3, r2
 8018e5c:	4622      	mov	r2, r4
 8018e5e:	9403      	str	r4, [sp, #12]
 8018e60:	f7ff ffdf 	bl	8018e22 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018e64:	b005      	add	sp, #20
 8018e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018e6a:	b001      	add	sp, #4
 8018e6c:	4770      	bx	lr

08018e6e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8018e6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e70:	4605      	mov	r5, r0
 8018e72:	4608      	mov	r0, r1
 8018e74:	b1f1      	cbz	r1, 8018eb4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8018e76:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 8018e7a:	460b      	mov	r3, r1
 8018e7c:	f101 0708 	add.w	r7, r1, #8
 8018e80:	4622      	mov	r2, r4
 8018e82:	6818      	ldr	r0, [r3, #0]
 8018e84:	3308      	adds	r3, #8
 8018e86:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8018e8a:	4626      	mov	r6, r4
 8018e8c:	42bb      	cmp	r3, r7
 8018e8e:	c603      	stmia	r6!, {r0, r1}
 8018e90:	4634      	mov	r4, r6
 8018e92:	d1f6      	bne.n	8018e82 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8018e94:	6818      	ldr	r0, [r3, #0]
 8018e96:	6030      	str	r0, [r6, #0]
 8018e98:	4610      	mov	r0, r2
 8018e9a:	889b      	ldrh	r3, [r3, #4]
 8018e9c:	80b3      	strh	r3, [r6, #4]
 8018e9e:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8018ea2:	015b      	lsls	r3, r3, #5
 8018ea4:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8018ea8:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 8018eac:	430b      	orrs	r3, r1
 8018eae:	425b      	negs	r3, r3
 8018eb0:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8018eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018eb6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8018eb6:	b538      	push	{r3, r4, r5, lr}
 8018eb8:	460c      	mov	r4, r1
 8018eba:	6811      	ldr	r1, [r2, #0]
 8018ebc:	4610      	mov	r0, r2
 8018ebe:	68cd      	ldr	r5, [r1, #12]
 8018ec0:	4619      	mov	r1, r3
 8018ec2:	47a8      	blx	r5
 8018ec4:	2800      	cmp	r0, #0
 8018ec6:	bf08      	it	eq
 8018ec8:	4620      	moveq	r0, r4
 8018eca:	bd38      	pop	{r3, r4, r5, pc}

08018ecc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8018ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ed0:	468c      	mov	ip, r1
 8018ed2:	4605      	mov	r5, r0
 8018ed4:	4614      	mov	r4, r2
 8018ed6:	b942      	cbnz	r2, 8018eea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 8018ed8:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8018edc:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 8018ee0:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 8018ee4:	4620      	mov	r0, r4
 8018ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018eea:	7b50      	ldrb	r0, [r2, #13]
 8018eec:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 8018ef0:	8893      	ldrh	r3, [r2, #4]
 8018ef2:	0106      	lsls	r6, r0, #4
 8018ef4:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8018ef8:	79e6      	ldrb	r6, [r4, #7]
 8018efa:	4316      	orrs	r6, r2
 8018efc:	185a      	adds	r2, r3, r1
 8018efe:	b291      	uxth	r1, r2
 8018f00:	b2b7      	uxth	r7, r6
 8018f02:	291d      	cmp	r1, #29
 8018f04:	d87f      	bhi.n	8019006 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8018f06:	2201      	movs	r2, #1
 8018f08:	10f6      	asrs	r6, r6, #3
 8018f0a:	408a      	lsls	r2, r1
 8018f0c:	498b      	ldr	r1, [pc, #556]	@ (801913c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x270>)
 8018f0e:	420a      	tst	r2, r1
 8018f10:	d12e      	bne.n	8018f70 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8018f12:	f412 7f60 	tst.w	r2, #896	@ 0x380
 8018f16:	d076      	beq.n	8019006 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8018f18:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8018f1c:	4623      	mov	r3, r4
 8018f1e:	f104 0e08 	add.w	lr, r4, #8
 8018f22:	4614      	mov	r4, r2
 8018f24:	6818      	ldr	r0, [r3, #0]
 8018f26:	3308      	adds	r3, #8
 8018f28:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8018f2c:	4694      	mov	ip, r2
 8018f2e:	4573      	cmp	r3, lr
 8018f30:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8018f34:	4662      	mov	r2, ip
 8018f36:	d1f5      	bne.n	8018f24 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8018f38:	6818      	ldr	r0, [r3, #0]
 8018f3a:	f8cc 0000 	str.w	r0, [ip]
 8018f3e:	889b      	ldrh	r3, [r3, #4]
 8018f40:	f8ac 3004 	strh.w	r3, [ip, #4]
 8018f44:	b2b3      	uxth	r3, r6
 8018f46:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 8018f4a:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 8018f4e:	1aca      	subs	r2, r1, r3
 8018f50:	1bcf      	subs	r7, r1, r7
 8018f52:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 8018f56:	b292      	uxth	r2, r2
 8018f58:	1afb      	subs	r3, r7, r3
 8018f5a:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 8018f5e:	10d2      	asrs	r2, r2, #3
 8018f60:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8018f64:	4302      	orrs	r2, r0
 8018f66:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 8018f6a:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 8018f6e:	e7b9      	b.n	8018ee4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8018f70:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8018f74:	4623      	mov	r3, r4
 8018f76:	f104 0808 	add.w	r8, r4, #8
 8018f7a:	4614      	mov	r4, r2
 8018f7c:	6818      	ldr	r0, [r3, #0]
 8018f7e:	3308      	adds	r3, #8
 8018f80:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8018f84:	4696      	mov	lr, r2
 8018f86:	4543      	cmp	r3, r8
 8018f88:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8018f8c:	4672      	mov	r2, lr
 8018f8e:	d1f5      	bne.n	8018f7c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 8018f90:	6818      	ldr	r0, [r3, #0]
 8018f92:	f8ce 0000 	str.w	r0, [lr]
 8018f96:	889b      	ldrh	r3, [r3, #4]
 8018f98:	f8ae 3004 	strh.w	r3, [lr, #4]
 8018f9c:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 8018f9e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8018fa2:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 8018fa4:	f640 6333 	movw	r3, #3635	@ 0xe33
 8018fa8:	4299      	cmp	r1, r3
 8018faa:	d111      	bne.n	8018fd0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 8018fac:	f8dc 3000 	ldr.w	r3, [ip]
 8018fb0:	4660      	mov	r0, ip
 8018fb2:	68db      	ldr	r3, [r3, #12]
 8018fb4:	4798      	blx	r3
 8018fb6:	7b41      	ldrb	r1, [r0, #13]
 8018fb8:	00cb      	lsls	r3, r1, #3
 8018fba:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8018fbe:	7a03      	ldrb	r3, [r0, #8]
 8018fc0:	4313      	orrs	r3, r2
 8018fc2:	064a      	lsls	r2, r1, #25
 8018fc4:	bf44      	itt	mi
 8018fc6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8018fca:	b21b      	sxthmi	r3, r3
 8018fcc:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8018fd0:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 8018fd4:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 8018fd8:	443b      	add	r3, r7
 8018fda:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8018fde:	4433      	add	r3, r6
 8018fe0:	b29b      	uxth	r3, r3
 8018fe2:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8018fe6:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 8018fea:	10db      	asrs	r3, r3, #3
 8018fec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8018ff0:	4313      	orrs	r3, r2
 8018ff2:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 8018ff6:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 8018ffa:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 8018ffe:	1a9b      	subs	r3, r3, r2
 8019000:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8019004:	e76e      	b.n	8018ee4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8019006:	f023 0204 	bic.w	r2, r3, #4
 801900a:	f640 611b 	movw	r1, #3611	@ 0xe1b
 801900e:	428a      	cmp	r2, r1
 8019010:	d003      	beq.n	801901a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 8019012:	f640 621d 	movw	r2, #3613	@ 0xe1d
 8019016:	4293      	cmp	r3, r2
 8019018:	d138      	bne.n	801908c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1c0>
 801901a:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 801901e:	4622      	mov	r2, r4
 8019020:	f104 0808 	add.w	r8, r4, #8
 8019024:	4634      	mov	r4, r6
 8019026:	6810      	ldr	r0, [r2, #0]
 8019028:	3208      	adds	r2, #8
 801902a:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801902e:	46b6      	mov	lr, r6
 8019030:	4542      	cmp	r2, r8
 8019032:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8019036:	4676      	mov	r6, lr
 8019038:	d1f5      	bne.n	8019026 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15a>
 801903a:	6810      	ldr	r0, [r2, #0]
 801903c:	3b01      	subs	r3, #1
 801903e:	4621      	mov	r1, r4
 8019040:	f8ce 0000 	str.w	r0, [lr]
 8019044:	b29b      	uxth	r3, r3
 8019046:	8892      	ldrh	r2, [r2, #4]
 8019048:	4628      	mov	r0, r5
 801904a:	f8ae 2004 	strh.w	r2, [lr, #4]
 801904e:	4662      	mov	r2, ip
 8019050:	f7ff ff31 	bl	8018eb6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8019054:	7b41      	ldrb	r1, [r0, #13]
 8019056:	00cb      	lsls	r3, r1, #3
 8019058:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801905c:	7a03      	ldrb	r3, [r0, #8]
 801905e:	0648      	lsls	r0, r1, #25
 8019060:	ea43 0302 	orr.w	r3, r3, r2
 8019064:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 8019068:	bf44      	itt	mi
 801906a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801906e:	b21b      	sxthmi	r3, r3
 8019070:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8019074:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8019078:	005b      	lsls	r3, r3, #1
 801907a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801907e:	4313      	orrs	r3, r2
 8019080:	115a      	asrs	r2, r3, #5
 8019082:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8019086:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 801908a:	e047      	b.n	801911c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x250>
 801908c:	00c2      	lsls	r2, r0, #3
 801908e:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 8019092:	7a22      	ldrb	r2, [r4, #8]
 8019094:	430a      	orrs	r2, r1
 8019096:	0641      	lsls	r1, r0, #25
 8019098:	f640 6109 	movw	r1, #3593	@ 0xe09
 801909c:	bf44      	itt	mi
 801909e:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 80190a2:	b212      	sxthmi	r2, r2
 80190a4:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 80190a8:	f023 0210 	bic.w	r2, r3, #16
 80190ac:	428a      	cmp	r2, r1
 80190ae:	d003      	beq.n	80190b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ec>
 80190b0:	f640 6213 	movw	r2, #3603	@ 0xe13
 80190b4:	4293      	cmp	r3, r2
 80190b6:	d13e      	bne.n	8019136 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x26a>
 80190b8:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 80190bc:	f104 0808 	add.w	r8, r4, #8
 80190c0:	4696      	mov	lr, r2
 80190c2:	6820      	ldr	r0, [r4, #0]
 80190c4:	3408      	adds	r4, #8
 80190c6:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80190ca:	4616      	mov	r6, r2
 80190cc:	4544      	cmp	r4, r8
 80190ce:	c603      	stmia	r6!, {r0, r1}
 80190d0:	4632      	mov	r2, r6
 80190d2:	d1f6      	bne.n	80190c2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 80190d4:	6820      	ldr	r0, [r4, #0]
 80190d6:	6030      	str	r0, [r6, #0]
 80190d8:	4628      	mov	r0, r5
 80190da:	88a1      	ldrh	r1, [r4, #4]
 80190dc:	4674      	mov	r4, lr
 80190de:	80b1      	strh	r1, [r6, #4]
 80190e0:	4671      	mov	r1, lr
 80190e2:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 80190e6:	0076      	lsls	r6, r6, #1
 80190e8:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 80190ec:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 80190f0:	4316      	orrs	r6, r2
 80190f2:	f640 6213 	movw	r2, #3603	@ 0xe13
 80190f6:	4293      	cmp	r3, r2
 80190f8:	4662      	mov	r2, ip
 80190fa:	bf16      	itet	ne
 80190fc:	f103 33ff 	addne.w	r3, r3, #4294967295
 8019100:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 8019104:	b29b      	uxthne	r3, r3
 8019106:	f7ff fed6 	bl	8018eb6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801910a:	7b43      	ldrb	r3, [r0, #13]
 801910c:	7a82      	ldrb	r2, [r0, #10]
 801910e:	005b      	lsls	r3, r3, #1
 8019110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019114:	4313      	orrs	r3, r2
 8019116:	1af6      	subs	r6, r6, r3
 8019118:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 801911c:	7b61      	ldrb	r1, [r4, #13]
 801911e:	00cb      	lsls	r3, r1, #3
 8019120:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8019124:	7a23      	ldrb	r3, [r4, #8]
 8019126:	4313      	orrs	r3, r2
 8019128:	064a      	lsls	r2, r1, #25
 801912a:	bf44      	itt	mi
 801912c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8019130:	b21b      	sxthmi	r3, r3
 8019132:	1bdb      	subs	r3, r3, r7
 8019134:	e719      	b.n	8018f6a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8019136:	2300      	movs	r3, #0
 8019138:	e7a5      	b.n	8019086 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801913a:	bf00      	nop
 801913c:	3fc00079 	.word	0x3fc00079

08019140 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8019140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019144:	4604      	mov	r4, r0
 8019146:	b942      	cbnz	r2, 801915a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8019148:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801914c:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 8019150:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 8019154:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8019158:	e047      	b.n	80191ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801915a:	7b51      	ldrb	r1, [r2, #13]
 801915c:	8893      	ldrh	r3, [r2, #4]
 801915e:	010d      	lsls	r5, r1, #4
 8019160:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 8019164:	79d5      	ldrb	r5, [r2, #7]
 8019166:	4305      	orrs	r5, r0
 8019168:	2d04      	cmp	r5, #4
 801916a:	bfcc      	ite	gt
 801916c:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8019170:	f04f 0e01 	movle.w	lr, #1
 8019174:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 8019178:	f200 80ab 	bhi.w	80192d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801917c:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 8019180:	4283      	cmp	r3, r0
 8019182:	d216      	bcs.n	80191b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019184:	f240 605b 	movw	r0, #1627	@ 0x65b
 8019188:	4283      	cmp	r3, r0
 801918a:	d859      	bhi.n	8019240 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801918c:	f240 6057 	movw	r0, #1623	@ 0x657
 8019190:	4283      	cmp	r3, r0
 8019192:	d20e      	bcs.n	80191b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019194:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8019198:	d24a      	bcs.n	8019230 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801919a:	f240 604e 	movw	r0, #1614	@ 0x64e
 801919e:	4283      	cmp	r3, r0
 80191a0:	d207      	bcs.n	80191b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80191a2:	f240 601a 	movw	r0, #1562	@ 0x61a
 80191a6:	4283      	cmp	r3, r0
 80191a8:	d02a      	beq.n	8019200 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80191aa:	d821      	bhi.n	80191f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 80191ac:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 80191b0:	d35b      	bcc.n	801926a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80191b2:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 80191b6:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80191ba:	f040 80d0 	bne.w	801935e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80191be:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 80191c2:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 80191c6:	f040 80ca 	bne.w	801935e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80191ca:	00cb      	lsls	r3, r1, #3
 80191cc:	0649      	lsls	r1, r1, #25
 80191ce:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 80191d2:	7a13      	ldrb	r3, [r2, #8]
 80191d4:	ea43 0300 	orr.w	r3, r3, r0
 80191d8:	bf44      	itt	mi
 80191da:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80191de:	b21b      	sxthmi	r3, r3
 80191e0:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80191e4:	1b5d      	subs	r5, r3, r5
 80191e6:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 80191ea:	4610      	mov	r0, r2
 80191ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80191f0:	f240 604b 	movw	r0, #1611	@ 0x64b
 80191f4:	4283      	cmp	r3, r0
 80191f6:	d338      	bcc.n	801926a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80191f8:	f240 604c 	movw	r0, #1612	@ 0x64c
 80191fc:	4283      	cmp	r3, r0
 80191fe:	d9d8      	bls.n	80191b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019200:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 8019204:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 8019208:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801920c:	f040 80f3 	bne.w	80193f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8019210:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8019214:	f040 80ef 	bne.w	80193f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8019218:	00cb      	lsls	r3, r1, #3
 801921a:	064e      	lsls	r6, r1, #25
 801921c:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8019220:	7a13      	ldrb	r3, [r2, #8]
 8019222:	ea43 0300 	orr.w	r3, r3, r0
 8019226:	bf44      	itt	mi
 8019228:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801922c:	b21b      	sxthmi	r3, r3
 801922e:	e7d9      	b.n	80191e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8019230:	f240 6054 	movw	r0, #1620	@ 0x654
 8019234:	4283      	cmp	r3, r0
 8019236:	d8e3      	bhi.n	8019200 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019238:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801923c:	d9e0      	bls.n	8019200 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801923e:	e7b8      	b.n	80191b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019240:	f240 6074 	movw	r0, #1652	@ 0x674
 8019244:	4283      	cmp	r3, r0
 8019246:	d0b4      	beq.n	80191b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019248:	d82d      	bhi.n	80192a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801924a:	f240 605e 	movw	r0, #1630	@ 0x65e
 801924e:	4283      	cmp	r3, r0
 8019250:	d804      	bhi.n	801925c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8019252:	f240 605d 	movw	r0, #1629	@ 0x65d
 8019256:	4283      	cmp	r3, r0
 8019258:	d3d2      	bcc.n	8019200 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801925a:	e7aa      	b.n	80191b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801925c:	f240 605f 	movw	r0, #1631	@ 0x65f
 8019260:	4283      	cmp	r3, r0
 8019262:	d0cd      	beq.n	8019200 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019264:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 8019268:	d0a3      	beq.n	80191b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801926a:	00cb      	lsls	r3, r1, #3
 801926c:	0649      	lsls	r1, r1, #25
 801926e:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8019272:	7a13      	ldrb	r3, [r2, #8]
 8019274:	ea43 0300 	orr.w	r3, r3, r0
 8019278:	bf44      	itt	mi
 801927a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801927e:	b21b      	sxthmi	r3, r3
 8019280:	1b5d      	subs	r5, r3, r5
 8019282:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8019286:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801928a:	7b53      	ldrb	r3, [r2, #13]
 801928c:	015b      	lsls	r3, r3, #5
 801928e:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8019292:	7993      	ldrb	r3, [r2, #6]
 8019294:	430b      	orrs	r3, r1
 8019296:	2105      	movs	r1, #5
 8019298:	005b      	lsls	r3, r3, #1
 801929a:	fb93 f3f1 	sdiv	r3, r3, r1
 801929e:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80192a2:	440b      	add	r3, r1
 80192a4:	e756      	b.n	8019154 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80192a6:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 80192aa:	4283      	cmp	r3, r0
 80192ac:	d809      	bhi.n	80192c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 80192ae:	f240 60df 	movw	r0, #1759	@ 0x6df
 80192b2:	4283      	cmp	r3, r0
 80192b4:	f4bf af7d 	bcs.w	80191b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80192b8:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 80192bc:	2b05      	cmp	r3, #5
 80192be:	d8d4      	bhi.n	801926a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80192c0:	e777      	b.n	80191b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80192c2:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 80192c6:	4283      	cmp	r3, r0
 80192c8:	d09a      	beq.n	8019200 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80192ca:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 80192ce:	4283      	cmp	r3, r0
 80192d0:	e7ca      	b.n	8019268 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80192d2:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 80192d6:	d22b      	bcs.n	8019330 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 80192d8:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 80192dc:	4283      	cmp	r3, r0
 80192de:	d28f      	bcs.n	8019200 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80192e0:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 80192e4:	4283      	cmp	r3, r0
 80192e6:	d816      	bhi.n	8019316 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 80192e8:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 80192ec:	4283      	cmp	r3, r0
 80192ee:	f4bf af60 	bcs.w	80191b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80192f2:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 80192f6:	4283      	cmp	r3, r0
 80192f8:	d80a      	bhi.n	8019310 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 80192fa:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 80192fe:	4283      	cmp	r3, r0
 8019300:	f4bf af57 	bcs.w	80191b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019304:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 8019308:	4283      	cmp	r3, r0
 801930a:	f43f af79 	beq.w	8019200 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801930e:	e7ac      	b.n	801926a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019310:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 8019314:	e7f8      	b.n	8019308 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8019316:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 801931a:	4283      	cmp	r3, r0
 801931c:	d802      	bhi.n	8019324 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801931e:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8019322:	e798      	b.n	8019256 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8019324:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 8019328:	4283      	cmp	r3, r0
 801932a:	f47f af42 	bne.w	80191b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801932e:	e767      	b.n	8019200 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019330:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 8019334:	4283      	cmp	r3, r0
 8019336:	f43f af63 	beq.w	8019200 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801933a:	d802      	bhi.n	8019342 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801933c:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 8019340:	e7f2      	b.n	8019328 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8019342:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 8019346:	4283      	cmp	r3, r0
 8019348:	d805      	bhi.n	8019356 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801934a:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 801934e:	4283      	cmp	r3, r0
 8019350:	f4ff af2f 	bcc.w	80191b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019354:	e754      	b.n	8019200 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019356:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 801935a:	4283      	cmp	r3, r0
 801935c:	e7af      	b.n	80192be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801935e:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8019362:	4617      	mov	r7, r2
 8019364:	f102 0808 	add.w	r8, r2, #8
 8019368:	4666      	mov	r6, ip
 801936a:	6838      	ldr	r0, [r7, #0]
 801936c:	3708      	adds	r7, #8
 801936e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8019372:	46e6      	mov	lr, ip
 8019374:	4547      	cmp	r7, r8
 8019376:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801937a:	46f4      	mov	ip, lr
 801937c:	d1f5      	bne.n	801936a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801937e:	6838      	ldr	r0, [r7, #0]
 8019380:	f8ce 0000 	str.w	r0, [lr]
 8019384:	88b9      	ldrh	r1, [r7, #4]
 8019386:	f8ae 1004 	strh.w	r1, [lr, #4]
 801938a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801938e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8019392:	d009      	beq.n	80193a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8019394:	7b51      	ldrb	r1, [r2, #13]
 8019396:	7992      	ldrb	r2, [r2, #6]
 8019398:	0149      	lsls	r1, r1, #5
 801939a:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801939e:	4311      	orrs	r1, r2
 80193a0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80193a4:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 80193a8:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80193ac:	b2ad      	uxth	r5, r5
 80193ae:	d00d      	beq.n	80193cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 80193b0:	442b      	add	r3, r5
 80193b2:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 80193b6:	b29b      	uxth	r3, r3
 80193b8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80193bc:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 80193c0:	10db      	asrs	r3, r3, #3
 80193c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80193c6:	4313      	orrs	r3, r2
 80193c8:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 80193cc:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 80193d0:	00cb      	lsls	r3, r1, #3
 80193d2:	064f      	lsls	r7, r1, #25
 80193d4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80193d8:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 80193dc:	ea43 0302 	orr.w	r3, r3, r2
 80193e0:	bf44      	itt	mi
 80193e2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80193e6:	b21b      	sxthmi	r3, r3
 80193e8:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80193ec:	1b5b      	subs	r3, r3, r5
 80193ee:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 80193f2:	4632      	mov	r2, r6
 80193f4:	e6f9      	b.n	80191ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80193f6:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 80193fa:	4617      	mov	r7, r2
 80193fc:	f102 0908 	add.w	r9, r2, #8
 8019400:	4666      	mov	r6, ip
 8019402:	6838      	ldr	r0, [r7, #0]
 8019404:	3708      	adds	r7, #8
 8019406:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801940a:	46e0      	mov	r8, ip
 801940c:	454f      	cmp	r7, r9
 801940e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8019412:	46c4      	mov	ip, r8
 8019414:	d1f5      	bne.n	8019402 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8019416:	6838      	ldr	r0, [r7, #0]
 8019418:	f8c8 0000 	str.w	r0, [r8]
 801941c:	88b9      	ldrh	r1, [r7, #4]
 801941e:	f8a8 1004 	strh.w	r1, [r8, #4]
 8019422:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8019426:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801942a:	d009      	beq.n	8019440 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801942c:	7b51      	ldrb	r1, [r2, #13]
 801942e:	7992      	ldrb	r2, [r2, #6]
 8019430:	0149      	lsls	r1, r1, #5
 8019432:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8019436:	4311      	orrs	r1, r2
 8019438:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801943c:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8019440:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8019444:	d00e      	beq.n	8019464 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8019446:	eba3 030e 	sub.w	r3, r3, lr
 801944a:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801944e:	b29b      	uxth	r3, r3
 8019450:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8019454:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8019458:	10db      	asrs	r3, r3, #3
 801945a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801945e:	4313      	orrs	r3, r2
 8019460:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8019464:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8019468:	00cb      	lsls	r3, r1, #3
 801946a:	0648      	lsls	r0, r1, #25
 801946c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8019470:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8019474:	ea43 0302 	orr.w	r3, r3, r2
 8019478:	bf44      	itt	mi
 801947a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801947e:	b21b      	sxthmi	r3, r3
 8019480:	1b5d      	subs	r5, r3, r5
 8019482:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8019486:	e7b4      	b.n	80193f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08019488 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8019488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801948c:	461e      	mov	r6, r3
 801948e:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8019490:	4604      	mov	r4, r0
 8019492:	4617      	mov	r7, r2
 8019494:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8019498:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801949c:	f7ed fa4e 	bl	800693c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80194a0:	4605      	mov	r5, r0
 80194a2:	b918      	cbnz	r0, 80194ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 80194a4:	6030      	str	r0, [r6, #0]
 80194a6:	4628      	mov	r0, r5
 80194a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194ac:	683b      	ldr	r3, [r7, #0]
 80194ae:	4601      	mov	r1, r0
 80194b0:	4638      	mov	r0, r7
 80194b2:	68db      	ldr	r3, [r3, #12]
 80194b4:	4798      	blx	r3
 80194b6:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 80194ba:	4602      	mov	r2, r0
 80194bc:	6030      	str	r0, [r6, #0]
 80194be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80194c2:	d213      	bcs.n	80194ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 80194c4:	4643      	mov	r3, r8
 80194c6:	4639      	mov	r1, r7
 80194c8:	4620      	mov	r0, r4
 80194ca:	f7ff fe39 	bl	8019140 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80194ce:	6030      	str	r0, [r6, #0]
 80194d0:	6833      	ldr	r3, [r6, #0]
 80194d2:	b143      	cbz	r3, 80194e6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 80194d4:	7b5a      	ldrb	r2, [r3, #13]
 80194d6:	7a9b      	ldrb	r3, [r3, #10]
 80194d8:	0052      	lsls	r2, r2, #1
 80194da:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80194de:	4313      	orrs	r3, r2
 80194e0:	bf0c      	ite	eq
 80194e2:	2301      	moveq	r3, #1
 80194e4:	2300      	movne	r3, #0
 80194e6:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 80194ea:	e7dc      	b.n	80194a6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 80194ec:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 80194f0:	b29b      	uxth	r3, r3
 80194f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80194f4:	d804      	bhi.n	8019500 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 80194f6:	4639      	mov	r1, r7
 80194f8:	4620      	mov	r0, r4
 80194fa:	f7ff fce7 	bl	8018ecc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80194fe:	e7e6      	b.n	80194ce <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8019500:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8019504:	2b00      	cmp	r3, #0
 8019506:	d0e3      	beq.n	80194d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8019508:	f640 1302 	movw	r3, #2306	@ 0x902
 801950c:	429d      	cmp	r5, r3
 801950e:	d1df      	bne.n	80194d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8019510:	4601      	mov	r1, r0
 8019512:	4620      	mov	r0, r4
 8019514:	f7ff fcab 	bl	8018e6e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8019518:	e7d9      	b.n	80194ce <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801951a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801951a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801951e:	461e      	mov	r6, r3
 8019520:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8019522:	4604      	mov	r4, r0
 8019524:	4617      	mov	r7, r2
 8019526:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801952a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801952e:	f7ed fa05 	bl	800693c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019532:	4605      	mov	r5, r0
 8019534:	b918      	cbnz	r0, 801953e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 8019536:	6030      	str	r0, [r6, #0]
 8019538:	4628      	mov	r0, r5
 801953a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801953e:	683b      	ldr	r3, [r7, #0]
 8019540:	4601      	mov	r1, r0
 8019542:	4638      	mov	r0, r7
 8019544:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8019548:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801954c:	47c8      	blx	r9
 801954e:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8019552:	4602      	mov	r2, r0
 8019554:	6030      	str	r0, [r6, #0]
 8019556:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801955a:	d213      	bcs.n	8019584 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801955c:	4643      	mov	r3, r8
 801955e:	4639      	mov	r1, r7
 8019560:	4620      	mov	r0, r4
 8019562:	f7ff fded 	bl	8019140 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8019566:	6030      	str	r0, [r6, #0]
 8019568:	6833      	ldr	r3, [r6, #0]
 801956a:	b143      	cbz	r3, 801957e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801956c:	7b5a      	ldrb	r2, [r3, #13]
 801956e:	7a9b      	ldrb	r3, [r3, #10]
 8019570:	0052      	lsls	r2, r2, #1
 8019572:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8019576:	4313      	orrs	r3, r2
 8019578:	bf0c      	ite	eq
 801957a:	2301      	moveq	r3, #1
 801957c:	2300      	movne	r3, #0
 801957e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8019582:	e7d9      	b.n	8019538 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 8019584:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8019588:	b29b      	uxth	r3, r3
 801958a:	2b7f      	cmp	r3, #127	@ 0x7f
 801958c:	d804      	bhi.n	8019598 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801958e:	4639      	mov	r1, r7
 8019590:	4620      	mov	r0, r4
 8019592:	f7ff fc9b 	bl	8018ecc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8019596:	e7e6      	b.n	8019566 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8019598:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801959c:	2b00      	cmp	r3, #0
 801959e:	d0e3      	beq.n	8019568 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 80195a0:	f640 1302 	movw	r3, #2306	@ 0x902
 80195a4:	429d      	cmp	r5, r3
 80195a6:	d1df      	bne.n	8019568 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 80195a8:	4601      	mov	r1, r0
 80195aa:	4620      	mov	r0, r4
 80195ac:	f7ff fc5f 	bl	8018e6e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80195b0:	e7d9      	b.n	8019566 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

080195b2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 80195b2:	b510      	push	{r4, lr}
 80195b4:	4604      	mov	r4, r0
 80195b6:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 80195ba:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80195bc:	b1e1      	cbz	r1, 80195f8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 80195be:	2b0a      	cmp	r3, #10
 80195c0:	d02d      	beq.n	801961e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 80195c2:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80195c4:	3901      	subs	r1, #1
 80195c6:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80195ca:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 80195cc:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 80195d0:	1c51      	adds	r1, r2, #1
 80195d2:	b289      	uxth	r1, r1
 80195d4:	2901      	cmp	r1, #1
 80195d6:	bf8a      	itet	hi
 80195d8:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80195dc:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 80195de:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 80195e0:	1c5a      	adds	r2, r3, #1
 80195e2:	8722      	strh	r2, [r4, #56]	@ 0x38
 80195e4:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80195e6:	4413      	add	r3, r2
 80195e8:	b29b      	uxth	r3, r3
 80195ea:	2b09      	cmp	r3, #9
 80195ec:	bf88      	it	hi
 80195ee:	3b0a      	subhi	r3, #10
 80195f0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80195f4:	8458      	strh	r0, [r3, #34]	@ 0x22
 80195f6:	e7de      	b.n	80195b6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 80195f8:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80195fa:	2b0a      	cmp	r3, #10
 80195fc:	d00f      	beq.n	801961e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 80195fe:	4620      	mov	r0, r4
 8019600:	f7ff fbe3 	bl	8018dca <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8019604:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8019606:	1c5a      	adds	r2, r3, #1
 8019608:	8722      	strh	r2, [r4, #56]	@ 0x38
 801960a:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801960c:	4413      	add	r3, r2
 801960e:	b29b      	uxth	r3, r3
 8019610:	2b09      	cmp	r3, #9
 8019612:	bf88      	it	hi
 8019614:	3b0a      	subhi	r3, #10
 8019616:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801961a:	8458      	strh	r0, [r3, #34]	@ 0x22
 801961c:	e7ec      	b.n	80195f8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801961e:	bd10      	pop	{r4, pc}

08019620 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8019620:	b538      	push	{r3, r4, r5, lr}
 8019622:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8019624:	4604      	mov	r4, r0
 8019626:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801962a:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 801962c:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 801962e:	3a01      	subs	r2, #1
 8019630:	8702      	strh	r2, [r0, #56]	@ 0x38
 8019632:	1c5a      	adds	r2, r3, #1
 8019634:	b292      	uxth	r2, r2
 8019636:	2a09      	cmp	r2, #9
 8019638:	bf8a      	itet	hi
 801963a:	3b09      	subhi	r3, #9
 801963c:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801963e:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 8019640:	f7ff ffb7 	bl	80195b2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8019644:	8c23      	ldrh	r3, [r4, #32]
 8019646:	2b01      	cmp	r3, #1
 8019648:	bf9c      	itt	ls
 801964a:	3301      	addls	r3, #1
 801964c:	8423      	strhls	r3, [r4, #32]
 801964e:	8be3      	ldrh	r3, [r4, #30]
 8019650:	b90b      	cbnz	r3, 8019656 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8019652:	2302      	movs	r3, #2
 8019654:	83e3      	strh	r3, [r4, #30]
 8019656:	8be3      	ldrh	r3, [r4, #30]
 8019658:	4628      	mov	r0, r5
 801965a:	3b01      	subs	r3, #1
 801965c:	b29b      	uxth	r3, r3
 801965e:	83e3      	strh	r3, [r4, #30]
 8019660:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019664:	8365      	strh	r5, [r4, #26]
 8019666:	bd38      	pop	{r3, r4, r5, pc}

08019668 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8019668:	428a      	cmp	r2, r1
 801966a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801966e:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 8019670:	d932      	bls.n	80196d8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 8019672:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 8019674:	1a54      	subs	r4, r2, r1
 8019676:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 801967a:	19ee      	adds	r6, r5, r7
 801967c:	fa1f fe84 	uxth.w	lr, r4
 8019680:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 8019684:	3e01      	subs	r6, #1
 8019686:	b2b4      	uxth	r4, r6
 8019688:	eba4 090e 	sub.w	r9, r4, lr
 801968c:	fa1f f989 	uxth.w	r9, r9
 8019690:	2c09      	cmp	r4, #9
 8019692:	4626      	mov	r6, r4
 8019694:	bf88      	it	hi
 8019696:	f1a4 060a 	subhi.w	r6, r4, #10
 801969a:	f1bc 0f00 	cmp.w	ip, #0
 801969e:	f104 34ff 	add.w	r4, r4, #4294967295
 80196a2:	bf08      	it	eq
 80196a4:	f04f 0c02 	moveq.w	ip, #2
 80196a8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80196ac:	b2a4      	uxth	r4, r4
 80196ae:	f10c 3cff 	add.w	ip, ip, #4294967295
 80196b2:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 80196b6:	454c      	cmp	r4, r9
 80196b8:	fa1f fc8c 	uxth.w	ip, ip
 80196bc:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 80196c0:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 80196c4:	d1e4      	bne.n	8019690 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 80196c6:	eba5 050e 	sub.w	r5, r5, lr
 80196ca:	eb0e 0408 	add.w	r4, lr, r8
 80196ce:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 80196d2:	8705      	strh	r5, [r0, #56]	@ 0x38
 80196d4:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 80196d8:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 80196da:	250a      	movs	r5, #10
 80196dc:	1a64      	subs	r4, r4, r1
 80196de:	4439      	add	r1, r7
 80196e0:	b289      	uxth	r1, r1
 80196e2:	8704      	strh	r4, [r0, #56]	@ 0x38
 80196e4:	2909      	cmp	r1, #9
 80196e6:	bf88      	it	hi
 80196e8:	390a      	subhi	r1, #10
 80196ea:	86c1      	strh	r1, [r0, #54]	@ 0x36
 80196ec:	b18a      	cbz	r2, 8019712 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 80196ee:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 80196f0:	3a01      	subs	r2, #1
 80196f2:	3101      	adds	r1, #1
 80196f4:	b292      	uxth	r2, r2
 80196f6:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 80196fa:	8701      	strh	r1, [r0, #56]	@ 0x38
 80196fc:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 80196fe:	b901      	cbnz	r1, 8019702 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8019700:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8019702:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8019704:	3901      	subs	r1, #1
 8019706:	b289      	uxth	r1, r1
 8019708:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801970a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801970e:	844c      	strh	r4, [r1, #34]	@ 0x22
 8019710:	e7ec      	b.n	80196ec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 8019712:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019716:	f7ff bf4c 	b.w	80195b2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801971a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801971a:	b570      	push	{r4, r5, r6, lr}
 801971c:	2500      	movs	r5, #0
 801971e:	4295      	cmp	r5, r2
 8019720:	d011      	beq.n	8019746 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8019722:	8bc4      	ldrh	r4, [r0, #30]
 8019724:	f831 6b02 	ldrh.w	r6, [r1], #2
 8019728:	4414      	add	r4, r2
 801972a:	3c01      	subs	r4, #1
 801972c:	1b64      	subs	r4, r4, r5
 801972e:	b2a4      	uxth	r4, r4
 8019730:	2c01      	cmp	r4, #1
 8019732:	bf88      	it	hi
 8019734:	3c02      	subhi	r4, #2
 8019736:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801973a:	8b64      	ldrh	r4, [r4, #26]
 801973c:	42b4      	cmp	r4, r6
 801973e:	d117      	bne.n	8019770 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8019740:	3501      	adds	r5, #1
 8019742:	b2ad      	uxth	r5, r5
 8019744:	e7eb      	b.n	801971e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8019746:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801974a:	2400      	movs	r4, #0
 801974c:	4413      	add	r3, r2
 801974e:	b2a2      	uxth	r2, r4
 8019750:	429a      	cmp	r2, r3
 8019752:	da0f      	bge.n	8019774 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8019754:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 8019756:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801975a:	3401      	adds	r4, #1
 801975c:	4432      	add	r2, r6
 801975e:	b292      	uxth	r2, r2
 8019760:	2a09      	cmp	r2, #9
 8019762:	bf88      	it	hi
 8019764:	3a0a      	subhi	r2, #10
 8019766:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801976a:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 801976c:	42aa      	cmp	r2, r5
 801976e:	d0ee      	beq.n	801974e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8019770:	2000      	movs	r0, #0
 8019772:	bd70      	pop	{r4, r5, r6, pc}
 8019774:	2001      	movs	r0, #1
 8019776:	e7fc      	b.n	8019772 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08019778 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8019778:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801977c:	4605      	mov	r5, r0
 801977e:	4616      	mov	r6, r2
 8019780:	1c8c      	adds	r4, r1, #2
 8019782:	8809      	ldrh	r1, [r1, #0]
 8019784:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8019788:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801978c:	42b3      	cmp	r3, r6
 801978e:	d124      	bne.n	80197da <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8019790:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8019794:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8019798:	f001 070f 	and.w	r7, r1, #15
 801979c:	4652      	mov	r2, sl
 801979e:	f8cd 8000 	str.w	r8, [sp]
 80197a2:	464b      	mov	r3, r9
 80197a4:	4621      	mov	r1, r4
 80197a6:	4628      	mov	r0, r5
 80197a8:	f7ff ffb7 	bl	801971a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80197ac:	4683      	mov	fp, r0
 80197ae:	b168      	cbz	r0, 80197cc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80197b0:	eb0a 0109 	add.w	r1, sl, r9
 80197b4:	463a      	mov	r2, r7
 80197b6:	4628      	mov	r0, r5
 80197b8:	4441      	add	r1, r8
 80197ba:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 80197be:	4649      	mov	r1, r9
 80197c0:	f7ff ff52 	bl	8019668 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 80197c4:	4658      	mov	r0, fp
 80197c6:	b003      	add	sp, #12
 80197c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197cc:	eb07 010a 	add.w	r1, r7, sl
 80197d0:	4449      	add	r1, r9
 80197d2:	4441      	add	r1, r8
 80197d4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80197d8:	e7d2      	b.n	8019780 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80197da:	f04f 0b00 	mov.w	fp, #0
 80197de:	e7f1      	b.n	80197c4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080197e0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 80197e0:	b570      	push	{r4, r5, r6, lr}
 80197e2:	8810      	ldrh	r0, [r2, #0]
 80197e4:	4298      	cmp	r0, r3
 80197e6:	d817      	bhi.n	8019818 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80197e8:	1e48      	subs	r0, r1, #1
 80197ea:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80197ee:	4298      	cmp	r0, r3
 80197f0:	d312      	bcc.n	8019818 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80197f2:	2400      	movs	r4, #0
 80197f4:	428c      	cmp	r4, r1
 80197f6:	d20f      	bcs.n	8019818 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80197f8:	1860      	adds	r0, r4, r1
 80197fa:	1040      	asrs	r0, r0, #1
 80197fc:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8019800:	0085      	lsls	r5, r0, #2
 8019802:	42b3      	cmp	r3, r6
 8019804:	d902      	bls.n	801980c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8019806:	3001      	adds	r0, #1
 8019808:	b284      	uxth	r4, r0
 801980a:	e7f3      	b.n	80197f4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801980c:	d201      	bcs.n	8019812 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801980e:	b281      	uxth	r1, r0
 8019810:	e7f0      	b.n	80197f4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8019812:	442a      	add	r2, r5
 8019814:	8850      	ldrh	r0, [r2, #2]
 8019816:	bd70      	pop	{r4, r5, r6, pc}
 8019818:	2000      	movs	r0, #0
 801981a:	e7fc      	b.n	8019816 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801981c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801981c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019820:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 8019822:	4604      	mov	r4, r0
 8019824:	260b      	movs	r6, #11
 8019826:	886f      	ldrh	r7, [r5, #2]
 8019828:	087f      	lsrs	r7, r7, #1
 801982a:	3e01      	subs	r6, #1
 801982c:	d013      	beq.n	8019856 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801982e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8019830:	462a      	mov	r2, r5
 8019832:	4639      	mov	r1, r7
 8019834:	4620      	mov	r0, r4
 8019836:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801983a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801983e:	4643      	mov	r3, r8
 8019840:	f7ff ffce 	bl	80197e0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8019844:	b138      	cbz	r0, 8019856 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8019846:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801984a:	4642      	mov	r2, r8
 801984c:	4620      	mov	r0, r4
 801984e:	f7ff ff93 	bl	8019778 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8019852:	2800      	cmp	r0, #0
 8019854:	d1e9      	bne.n	801982a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8019856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801985c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801985c:	b570      	push	{r4, r5, r6, lr}
 801985e:	694a      	ldr	r2, [r1, #20]
 8019860:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8019862:	684b      	ldr	r3, [r1, #4]
 8019864:	1b54      	subs	r4, r2, r5
 8019866:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 8019868:	f000 8106 	beq.w	8019a78 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801986c:	1b9b      	subs	r3, r3, r6
 801986e:	d003      	beq.n	8019878 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8019870:	4363      	muls	r3, r4
 8019872:	2210      	movs	r2, #16
 8019874:	fb93 f3f2 	sdiv	r3, r3, r2
 8019878:	680c      	ldr	r4, [r1, #0]
 801987a:	698a      	ldr	r2, [r1, #24]
 801987c:	1b65      	subs	r5, r4, r5
 801987e:	f000 80fd 	beq.w	8019a7c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8019882:	1b92      	subs	r2, r2, r6
 8019884:	d003      	beq.n	801988e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8019886:	436a      	muls	r2, r5
 8019888:	2410      	movs	r4, #16
 801988a:	fb92 f2f4 	sdiv	r2, r2, r4
 801988e:	1a9b      	subs	r3, r3, r2
 8019890:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 8019ab8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8019894:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8019898:	460a      	mov	r2, r1
 801989a:	ee07 3a90 	vmov	s15, r3
 801989e:	f100 040c 	add.w	r4, r0, #12
 80198a2:	4603      	mov	r3, r0
 80198a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80198a8:	ee67 7a84 	vmul.f32	s15, s15, s8
 80198ac:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80198b0:	eeb1 6a43 	vneg.f32	s12, s6
 80198b4:	edd2 7a02 	vldr	s15, [r2, #8]
 80198b8:	3214      	adds	r2, #20
 80198ba:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80198be:	ece3 6a01 	vstmia	r3!, {s13}
 80198c2:	429c      	cmp	r4, r3
 80198c4:	ed52 7a02 	vldr	s15, [r2, #-8]
 80198c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80198cc:	edc3 7a02 	vstr	s15, [r3, #8]
 80198d0:	ed52 7a01 	vldr	s15, [r2, #-4]
 80198d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80198d8:	edc3 7a05 	vstr	s15, [r3, #20]
 80198dc:	d1ea      	bne.n	80198b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 80198de:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80198e0:	698b      	ldr	r3, [r1, #24]
 80198e2:	edd0 4a02 	vldr	s9, [r0, #8]
 80198e6:	1a9b      	subs	r3, r3, r2
 80198e8:	edd0 3a00 	vldr	s7, [r0]
 80198ec:	edd0 6a01 	vldr	s13, [r0, #4]
 80198f0:	ee07 3a90 	vmov	s15, r3
 80198f4:	684b      	ldr	r3, [r1, #4]
 80198f6:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80198fa:	ed90 5a05 	vldr	s10, [r0, #20]
 80198fe:	1a9b      	subs	r3, r3, r2
 8019900:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019904:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8019908:	ed90 2a03 	vldr	s4, [r0, #12]
 801990c:	ee07 3a10 	vmov	s14, r3
 8019910:	edd0 5a04 	vldr	s11, [r0, #16]
 8019914:	ee67 7a84 	vmul.f32	s15, s15, s8
 8019918:	ed90 1a07 	vldr	s2, [r0, #28]
 801991c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019920:	edd0 2a06 	vldr	s5, [r0, #24]
 8019924:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8019928:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801992c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019930:	ee32 5a45 	vsub.f32	s10, s4, s10
 8019934:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019938:	ee67 7a83 	vmul.f32	s15, s15, s6
 801993c:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 8019940:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8019942:	694a      	ldr	r2, [r1, #20]
 8019944:	1b13      	subs	r3, r2, r4
 8019946:	ee07 3a10 	vmov	s14, r3
 801994a:	680b      	ldr	r3, [r1, #0]
 801994c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019950:	1b1b      	subs	r3, r3, r4
 8019952:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019956:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801995a:	ee07 3a10 	vmov	s14, r3
 801995e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019962:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019966:	eee6 4a87 	vfma.f32	s9, s13, s14
 801996a:	ee64 4a86 	vmul.f32	s9, s9, s12
 801996e:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 8019972:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8019974:	698b      	ldr	r3, [r1, #24]
 8019976:	1a9b      	subs	r3, r3, r2
 8019978:	ee06 3a90 	vmov	s13, r3
 801997c:	684b      	ldr	r3, [r1, #4]
 801997e:	1a9b      	subs	r3, r3, r2
 8019980:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019984:	ee07 3a10 	vmov	s14, r3
 8019988:	ee66 6a84 	vmul.f32	s13, s13, s8
 801998c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019990:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8019994:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019998:	eee5 6a87 	vfma.f32	s13, s11, s14
 801999c:	ee66 6a83 	vmul.f32	s13, s13, s6
 80199a0:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 80199a4:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80199a6:	694a      	ldr	r2, [r1, #20]
 80199a8:	1b13      	subs	r3, r2, r4
 80199aa:	ee07 3a10 	vmov	s14, r3
 80199ae:	680b      	ldr	r3, [r1, #0]
 80199b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80199b4:	1b1b      	subs	r3, r3, r4
 80199b6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80199ba:	ee25 5a47 	vnmul.f32	s10, s10, s14
 80199be:	ee07 3a10 	vmov	s14, r3
 80199c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80199c6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80199ca:	eea5 5a87 	vfma.f32	s10, s11, s14
 80199ce:	edd0 5a08 	vldr	s11, [r0, #32]
 80199d2:	ee31 1a65 	vsub.f32	s2, s2, s11
 80199d6:	ee72 5ae5 	vsub.f32	s11, s5, s11
 80199da:	ee25 5a06 	vmul.f32	s10, s10, s12
 80199de:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 80199e2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80199e4:	698b      	ldr	r3, [r1, #24]
 80199e6:	1a9b      	subs	r3, r3, r2
 80199e8:	ee07 3a10 	vmov	s14, r3
 80199ec:	684b      	ldr	r3, [r1, #4]
 80199ee:	1a9b      	subs	r3, r3, r2
 80199f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80199f4:	ee01 3a90 	vmov	s3, r3
 80199f8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80199fc:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8019a00:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8019a04:	ee61 1a84 	vmul.f32	s3, s3, s8
 8019a08:	eea1 7a21 	vfma.f32	s14, s2, s3
 8019a0c:	ee27 7a03 	vmul.f32	s14, s14, s6
 8019a10:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8019a14:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8019a16:	694a      	ldr	r2, [r1, #20]
 8019a18:	1b13      	subs	r3, r2, r4
 8019a1a:	ee03 3a10 	vmov	s6, r3
 8019a1e:	680b      	ldr	r3, [r1, #0]
 8019a20:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8019a24:	1b1b      	subs	r3, r3, r4
 8019a26:	ee23 3a04 	vmul.f32	s6, s6, s8
 8019a2a:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8019a2e:	ee03 3a10 	vmov	s6, r3
 8019a32:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8019a36:	ee23 4a04 	vmul.f32	s8, s6, s8
 8019a3a:	eee1 5a04 	vfma.f32	s11, s2, s8
 8019a3e:	ee25 6a86 	vmul.f32	s12, s11, s12
 8019a42:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8019a46:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 8019a4a:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8019a4e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8019a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a56:	dd13      	ble.n	8019a80 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8019a58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019a5c:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8019a60:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8019a62:	eee3 7a87 	vfma.f32	s15, s7, s14
 8019a66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a6e:	dd15      	ble.n	8019a9c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8019a70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019a74:	6403      	str	r3, [r0, #64]	@ 0x40
 8019a76:	bd70      	pop	{r4, r5, r6, pc}
 8019a78:	4623      	mov	r3, r4
 8019a7a:	e6fd      	b.n	8019878 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8019a7c:	462a      	mov	r2, r5
 8019a7e:	e706      	b.n	801988e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8019a80:	d502      	bpl.n	8019a88 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8019a82:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8019a86:	e7e9      	b.n	8019a5c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8019a88:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8019a8c:	eea3 2a85 	vfma.f32	s4, s7, s10
 8019a90:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8019a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a98:	dade      	bge.n	8019a58 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8019a9a:	e7f2      	b.n	8019a82 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8019a9c:	d502      	bpl.n	8019aa4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8019a9e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8019aa2:	e7e7      	b.n	8019a74 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8019aa4:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8019aa8:	eee3 4a86 	vfma.f32	s9, s7, s12
 8019aac:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8019ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ab4:	dadc      	bge.n	8019a70 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8019ab6:	e7f2      	b.n	8019a9e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8019ab8:	3d800000 	.word	0x3d800000

08019abc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8019abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ac0:	2714      	movs	r7, #20
 8019ac2:	435f      	muls	r7, r3
 8019ac4:	eb02 0c07 	add.w	ip, r2, r7
 8019ac8:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8019acc:	f115 0e0f 	adds.w	lr, r5, #15
 8019ad0:	f100 80a2 	bmi.w	8019c18 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8019ad4:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8019ad8:	9c08      	ldr	r4, [sp, #32]
 8019ada:	2614      	movs	r6, #20
 8019adc:	f8c0 e014 	str.w	lr, [r0, #20]
 8019ae0:	4366      	muls	r6, r4
 8019ae2:	eb02 0806 	add.w	r8, r2, r6
 8019ae6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8019aea:	f115 040f 	adds.w	r4, r5, #15
 8019aee:	f100 809f 	bmi.w	8019c30 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8019af2:	1124      	asrs	r4, r4, #4
 8019af4:	eba4 040e 	sub.w	r4, r4, lr
 8019af8:	6184      	str	r4, [r0, #24]
 8019afa:	2c00      	cmp	r4, #0
 8019afc:	f000 808a 	beq.w	8019c14 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8019b00:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8019b04:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8019b08:	5995      	ldr	r5, [r2, r6]
 8019b0a:	eba4 0809 	sub.w	r8, r4, r9
 8019b0e:	59d4      	ldr	r4, [r2, r7]
 8019b10:	eba5 0a04 	sub.w	sl, r5, r4
 8019b14:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8019b18:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8019b1c:	fb0e fe05 	mul.w	lr, lr, r5
 8019b20:	fb0a ee19 	mls	lr, sl, r9, lr
 8019b24:	fb08 e404 	mla	r4, r8, r4, lr
 8019b28:	3c01      	subs	r4, #1
 8019b2a:	19a4      	adds	r4, r4, r6
 8019b2c:	f100 808c 	bmi.w	8019c48 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8019b30:	fb94 fef6 	sdiv	lr, r4, r6
 8019b34:	fb06 441e 	mls	r4, r6, lr, r4
 8019b38:	f8c0 e000 	str.w	lr, [r0]
 8019b3c:	6104      	str	r4, [r0, #16]
 8019b3e:	2d00      	cmp	r5, #0
 8019b40:	f2c0 8095 	blt.w	8019c6e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8019b44:	fb95 f4f6 	sdiv	r4, r5, r6
 8019b48:	fb06 5514 	mls	r5, r6, r4, r5
 8019b4c:	6044      	str	r4, [r0, #4]
 8019b4e:	6085      	str	r5, [r0, #8]
 8019b50:	60c6      	str	r6, [r0, #12]
 8019b52:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8019b56:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8019b5a:	6945      	ldr	r5, [r0, #20]
 8019b5c:	59d2      	ldr	r2, [r2, r7]
 8019b5e:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8019b62:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8019c90 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8019b66:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8019b6a:	ee07 4a10 	vmov	s14, r4
 8019b6e:	6804      	ldr	r4, [r0, #0]
 8019b70:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8019b74:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019b78:	ee07 2a90 	vmov	s15, r2
 8019b7c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8019b80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019b84:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019b88:	edd3 6a00 	vldr	s13, [r3]
 8019b8c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8019b90:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 8019b94:	eee6 6a27 	vfma.f32	s13, s12, s15
 8019b98:	edc0 6a07 	vstr	s13, [r0, #28]
 8019b9c:	edd0 6a01 	vldr	s13, [r0, #4]
 8019ba0:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 8019ba4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019ba8:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8019bac:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8019bb0:	ed80 6a08 	vstr	s12, [r0, #32]
 8019bb4:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8019bb6:	6242      	str	r2, [r0, #36]	@ 0x24
 8019bb8:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 8019bbc:	ed93 6a03 	vldr	s12, [r3, #12]
 8019bc0:	eea5 6a87 	vfma.f32	s12, s11, s14
 8019bc4:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8019bc8:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8019bcc:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 8019bd0:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8019bd4:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 8019bd8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8019bdc:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 8019be0:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8019be2:	6302      	str	r2, [r0, #48]	@ 0x30
 8019be4:	ed93 6a06 	vldr	s12, [r3, #24]
 8019be8:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 8019bec:	eea5 6a87 	vfma.f32	s12, s11, s14
 8019bf0:	eeb0 7a46 	vmov.f32	s14, s12
 8019bf4:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 8019bf8:	eea6 7a27 	vfma.f32	s14, s12, s15
 8019bfc:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8019c00:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 8019c04:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 8019c08:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019c0c:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 8019c10:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8019c12:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8019c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c18:	2410      	movs	r4, #16
 8019c1a:	f1c5 0501 	rsb	r5, r5, #1
 8019c1e:	fb9e fef4 	sdiv	lr, lr, r4
 8019c22:	f015 050f 	ands.w	r5, r5, #15
 8019c26:	bf18      	it	ne
 8019c28:	2501      	movne	r5, #1
 8019c2a:	ebae 0e05 	sub.w	lr, lr, r5
 8019c2e:	e753      	b.n	8019ad8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8019c30:	f04f 0910 	mov.w	r9, #16
 8019c34:	f1c5 0501 	rsb	r5, r5, #1
 8019c38:	fb94 f4f9 	sdiv	r4, r4, r9
 8019c3c:	f015 050f 	ands.w	r5, r5, #15
 8019c40:	bf18      	it	ne
 8019c42:	2501      	movne	r5, #1
 8019c44:	1b64      	subs	r4, r4, r5
 8019c46:	e755      	b.n	8019af4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8019c48:	4264      	negs	r4, r4
 8019c4a:	fb94 fef6 	sdiv	lr, r4, r6
 8019c4e:	f1ce 0800 	rsb	r8, lr, #0
 8019c52:	fb06 441e 	mls	r4, r6, lr, r4
 8019c56:	f8c0 8000 	str.w	r8, [r0]
 8019c5a:	6104      	str	r4, [r0, #16]
 8019c5c:	2c00      	cmp	r4, #0
 8019c5e:	f43f af6e 	beq.w	8019b3e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8019c62:	ea6f 0e0e 	mvn.w	lr, lr
 8019c66:	1b34      	subs	r4, r6, r4
 8019c68:	f8c0 e000 	str.w	lr, [r0]
 8019c6c:	e766      	b.n	8019b3c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8019c6e:	426d      	negs	r5, r5
 8019c70:	fb95 f4f6 	sdiv	r4, r5, r6
 8019c74:	f1c4 0e00 	rsb	lr, r4, #0
 8019c78:	fb06 5514 	mls	r5, r6, r4, r5
 8019c7c:	f8c0 e004 	str.w	lr, [r0, #4]
 8019c80:	6085      	str	r5, [r0, #8]
 8019c82:	2d00      	cmp	r5, #0
 8019c84:	f43f af64 	beq.w	8019b50 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8019c88:	43e4      	mvns	r4, r4
 8019c8a:	1b75      	subs	r5, r6, r5
 8019c8c:	6044      	str	r4, [r0, #4]
 8019c8e:	e75e      	b.n	8019b4e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8019c90:	3d800000 	.word	0x3d800000

08019c94 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8019c94:	4b01      	ldr	r3, [pc, #4]	@ (8019c9c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8019c96:	6018      	str	r0, [r3, #0]
 8019c98:	4770      	bx	lr
 8019c9a:	bf00      	nop
 8019c9c:	24026480 	.word	0x24026480

08019ca0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8019ca0:	4b06      	ldr	r3, [pc, #24]	@ (8019cbc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8019ca2:	881a      	ldrh	r2, [r3, #0]
 8019ca4:	4282      	cmp	r2, r0
 8019ca6:	d807      	bhi.n	8019cb8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8019ca8:	4b05      	ldr	r3, [pc, #20]	@ (8019cc0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8019caa:	881b      	ldrh	r3, [r3, #0]
 8019cac:	4413      	add	r3, r2
 8019cae:	4298      	cmp	r0, r3
 8019cb0:	bfac      	ite	ge
 8019cb2:	2000      	movge	r0, #0
 8019cb4:	2001      	movlt	r0, #1
 8019cb6:	4770      	bx	lr
 8019cb8:	2000      	movs	r0, #0
 8019cba:	4770      	bx	lr
 8019cbc:	240264a0 	.word	0x240264a0
 8019cc0:	240264a4 	.word	0x240264a4

08019cc4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8019cc4:	b508      	push	{r3, lr}
 8019cc6:	4601      	mov	r1, r0
 8019cc8:	f7ff ffea 	bl	8019ca0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8019ccc:	b118      	cbz	r0, 8019cd6 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8019cce:	4b02      	ldr	r3, [pc, #8]	@ (8019cd8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8019cd0:	681b      	ldr	r3, [r3, #0]
 8019cd2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8019cd6:	bd08      	pop	{r3, pc}
 8019cd8:	24026484 	.word	0x24026484

08019cdc <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 8019cdc:	b538      	push	{r3, r4, r5, lr}
 8019cde:	4604      	mov	r4, r0
 8019ce0:	f7ff ffde 	bl	8019ca0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8019ce4:	b1d8      	cbz	r0, 8019d1e <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 8019ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8019d24 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x48>)
 8019ce8:	881b      	ldrh	r3, [r3, #0]
 8019cea:	1ae4      	subs	r4, r4, r3
 8019cec:	230e      	movs	r3, #14
 8019cee:	4363      	muls	r3, r4
 8019cf0:	4c0d      	ldr	r4, [pc, #52]	@ (8019d28 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x4c>)
 8019cf2:	6825      	ldr	r5, [r4, #0]
 8019cf4:	18ea      	adds	r2, r5, r3
 8019cf6:	7b12      	ldrb	r2, [r2, #12]
 8019cf8:	f012 0220 	ands.w	r2, r2, #32
 8019cfc:	d010      	beq.n	8019d20 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x44>
 8019cfe:	f9b1 2000 	ldrsh.w	r2, [r1]
 8019d02:	52ea      	strh	r2, [r5, r3]
 8019d04:	6822      	ldr	r2, [r4, #0]
 8019d06:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8019d0a:	441a      	add	r2, r3
 8019d0c:	8055      	strh	r5, [r2, #2]
 8019d0e:	6822      	ldr	r2, [r4, #0]
 8019d10:	4413      	add	r3, r2
 8019d12:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 8019d16:	809a      	strh	r2, [r3, #4]
 8019d18:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8019d1c:	80da      	strh	r2, [r3, #6]
 8019d1e:	bd38      	pop	{r3, r4, r5, pc}
 8019d20:	4610      	mov	r0, r2
 8019d22:	e7fc      	b.n	8019d1e <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 8019d24:	240264a0 	.word	0x240264a0
 8019d28:	24026488 	.word	0x24026488

08019d2c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 8019d2c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8019d30:	4606      	mov	r6, r0
 8019d32:	460c      	mov	r4, r1
 8019d34:	f7ff ffb4 	bl	8019ca0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8019d38:	b918      	cbnz	r0, 8019d42 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 8019d3a:	2000      	movs	r0, #0
 8019d3c:	b002      	add	sp, #8
 8019d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d42:	4608      	mov	r0, r1
 8019d44:	f7f6 fff9 	bl	8010d3a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019d48:	2800      	cmp	r0, #0
 8019d4a:	d1f6      	bne.n	8019d3a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8019d4c:	4b3f      	ldr	r3, [pc, #252]	@ (8019e4c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 8019d4e:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 8019e50 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 8019d52:	881d      	ldrh	r5, [r3, #0]
 8019d54:	f8d9 a000 	ldr.w	sl, [r9]
 8019d58:	46c8      	mov	r8, r9
 8019d5a:	1b73      	subs	r3, r6, r5
 8019d5c:	250e      	movs	r5, #14
 8019d5e:	435d      	muls	r5, r3
 8019d60:	eb0a 0705 	add.w	r7, sl, r5
 8019d64:	7b3b      	ldrb	r3, [r7, #12]
 8019d66:	f013 0f20 	tst.w	r3, #32
 8019d6a:	d0e6      	beq.n	8019d3a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8019d6c:	4621      	mov	r1, r4
 8019d6e:	4638      	mov	r0, r7
 8019d70:	f7fc fe64 	bl	8016a3c <_ZNK8touchgfx4Rect8includesERKS0_>
 8019d74:	2800      	cmp	r0, #0
 8019d76:	d1e1      	bne.n	8019d3c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8019d78:	4639      	mov	r1, r7
 8019d7a:	4620      	mov	r0, r4
 8019d7c:	f7fc fe5e 	bl	8016a3c <_ZNK8touchgfx4Rect8includesERKS0_>
 8019d80:	b108      	cbz	r0, 8019d86 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 8019d82:	4621      	mov	r1, r4
 8019d84:	e020      	b.n	8019dc8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 8019d86:	f9b4 2000 	ldrsh.w	r2, [r4]
 8019d8a:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 8019d8e:	429a      	cmp	r2, r3
 8019d90:	d11e      	bne.n	8019dd0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8019d92:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8019d96:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8019d9a:	429a      	cmp	r2, r3
 8019d9c:	d118      	bne.n	8019dd0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8019d9e:	6820      	ldr	r0, [r4, #0]
 8019da0:	466b      	mov	r3, sp
 8019da2:	6861      	ldr	r1, [r4, #4]
 8019da4:	c303      	stmia	r3!, {r0, r1}
 8019da6:	4639      	mov	r1, r7
 8019da8:	4668      	mov	r0, sp
 8019daa:	f7fc fe6d 	bl	8016a88 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019dae:	f8d9 3000 	ldr.w	r3, [r9]
 8019db2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8019db6:	442b      	add	r3, r5
 8019db8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8019dbc:	4413      	add	r3, r2
 8019dbe:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8019dc2:	4293      	cmp	r3, r2
 8019dc4:	dc04      	bgt.n	8019dd0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8019dc6:	4669      	mov	r1, sp
 8019dc8:	4630      	mov	r0, r6
 8019dca:	f7ff ff87 	bl	8019cdc <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 8019dce:	e7b5      	b.n	8019d3c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8019dd0:	f8d8 3000 	ldr.w	r3, [r8]
 8019dd4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8019dd8:	442b      	add	r3, r5
 8019dda:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019dde:	4291      	cmp	r1, r2
 8019de0:	d119      	bne.n	8019e16 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8019de2:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8019de6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8019dea:	4291      	cmp	r1, r2
 8019dec:	d113      	bne.n	8019e16 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8019dee:	6820      	ldr	r0, [r4, #0]
 8019df0:	466a      	mov	r2, sp
 8019df2:	6861      	ldr	r1, [r4, #4]
 8019df4:	c203      	stmia	r2!, {r0, r1}
 8019df6:	4619      	mov	r1, r3
 8019df8:	4668      	mov	r0, sp
 8019dfa:	f7fc fe45 	bl	8016a88 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019dfe:	f8d8 3000 	ldr.w	r3, [r8]
 8019e02:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8019e06:	442b      	add	r3, r5
 8019e08:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8019e0c:	4413      	add	r3, r2
 8019e0e:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8019e12:	4293      	cmp	r3, r2
 8019e14:	ddd7      	ble.n	8019dc6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 8019e16:	4620      	mov	r0, r4
 8019e18:	f7f6 ff8f 	bl	8010d3a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019e1c:	b990      	cbnz	r0, 8019e44 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 8019e1e:	88a7      	ldrh	r7, [r4, #4]
 8019e20:	88e3      	ldrh	r3, [r4, #6]
 8019e22:	fb17 f703 	smulbb	r7, r7, r3
 8019e26:	f8d8 3000 	ldr.w	r3, [r8]
 8019e2a:	441d      	add	r5, r3
 8019e2c:	4628      	mov	r0, r5
 8019e2e:	f7f6 ff84 	bl	8010d3a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019e32:	b948      	cbnz	r0, 8019e48 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 8019e34:	88ab      	ldrh	r3, [r5, #4]
 8019e36:	88ea      	ldrh	r2, [r5, #6]
 8019e38:	fb13 f302 	smulbb	r3, r3, r2
 8019e3c:	42bb      	cmp	r3, r7
 8019e3e:	f6bf af7c 	bge.w	8019d3a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8019e42:	e79e      	b.n	8019d82 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 8019e44:	2700      	movs	r7, #0
 8019e46:	e7ee      	b.n	8019e26 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 8019e48:	2300      	movs	r3, #0
 8019e4a:	e7f7      	b.n	8019e3c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 8019e4c:	240264a0 	.word	0x240264a0
 8019e50:	24026488 	.word	0x24026488

08019e54 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8019e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019e56:	4c24      	ldr	r4, [pc, #144]	@ (8019ee8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8019e58:	6823      	ldr	r3, [r4, #0]
 8019e5a:	2b00      	cmp	r3, #0
 8019e5c:	d042      	beq.n	8019ee4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8019e5e:	4a23      	ldr	r2, [pc, #140]	@ (8019eec <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8019e60:	4d23      	ldr	r5, [pc, #140]	@ (8019ef0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8019e62:	8811      	ldrh	r1, [r2, #0]
 8019e64:	f8b5 c000 	ldrh.w	ip, [r5]
 8019e68:	4822      	ldr	r0, [pc, #136]	@ (8019ef4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8019e6a:	4461      	add	r1, ip
 8019e6c:	1c4a      	adds	r2, r1, #1
 8019e6e:	008f      	lsls	r7, r1, #2
 8019e70:	f022 0201 	bic.w	r2, r2, #1
 8019e74:	19de      	adds	r6, r3, r7
 8019e76:	0412      	lsls	r2, r2, #16
 8019e78:	6006      	str	r6, [r0, #0]
 8019e7a:	4e1f      	ldr	r6, [pc, #124]	@ (8019ef8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8019e7c:	0c12      	lsrs	r2, r2, #16
 8019e7e:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8019e82:	19da      	adds	r2, r3, r7
 8019e84:	6032      	str	r2, [r6, #0]
 8019e86:	220e      	movs	r2, #14
 8019e88:	fb02 f20c 	mul.w	r2, r2, ip
 8019e8c:	3203      	adds	r2, #3
 8019e8e:	f022 0203 	bic.w	r2, r2, #3
 8019e92:	443a      	add	r2, r7
 8019e94:	4f19      	ldr	r7, [pc, #100]	@ (8019efc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8019e96:	4413      	add	r3, r2
 8019e98:	603b      	str	r3, [r7, #0]
 8019e9a:	2300      	movs	r3, #0
 8019e9c:	4f18      	ldr	r7, [pc, #96]	@ (8019f00 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8019e9e:	469c      	mov	ip, r3
 8019ea0:	803b      	strh	r3, [r7, #0]
 8019ea2:	4f18      	ldr	r7, [pc, #96]	@ (8019f04 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8019ea4:	683f      	ldr	r7, [r7, #0]
 8019ea6:	1aba      	subs	r2, r7, r2
 8019ea8:	4f17      	ldr	r7, [pc, #92]	@ (8019f08 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8019eaa:	603a      	str	r2, [r7, #0]
 8019eac:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8019eb0:	4a16      	ldr	r2, [pc, #88]	@ (8019f0c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8019eb2:	8013      	strh	r3, [r2, #0]
 8019eb4:	428b      	cmp	r3, r1
 8019eb6:	d10d      	bne.n	8019ed4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8019eb8:	882d      	ldrh	r5, [r5, #0]
 8019eba:	2300      	movs	r3, #0
 8019ebc:	6830      	ldr	r0, [r6, #0]
 8019ebe:	240e      	movs	r4, #14
 8019ec0:	429d      	cmp	r5, r3
 8019ec2:	d90f      	bls.n	8019ee4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8019ec4:	fb04 0203 	mla	r2, r4, r3, r0
 8019ec8:	3301      	adds	r3, #1
 8019eca:	7b11      	ldrb	r1, [r2, #12]
 8019ecc:	f36f 1145 	bfc	r1, #5, #1
 8019ed0:	7311      	strb	r1, [r2, #12]
 8019ed2:	e7f5      	b.n	8019ec0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8019ed4:	6822      	ldr	r2, [r4, #0]
 8019ed6:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8019eda:	6802      	ldr	r2, [r0, #0]
 8019edc:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8019ee0:	3301      	adds	r3, #1
 8019ee2:	e7e7      	b.n	8019eb4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8019ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019ee6:	bf00      	nop
 8019ee8:	24026484 	.word	0x24026484
 8019eec:	240264a0 	.word	0x240264a0
 8019ef0:	240264a4 	.word	0x240264a4
 8019ef4:	24026498 	.word	0x24026498
 8019ef8:	24026488 	.word	0x24026488
 8019efc:	24026490 	.word	0x24026490
 8019f00:	240264a2 	.word	0x240264a2
 8019f04:	2402648c 	.word	0x2402648c
 8019f08:	2402649c 	.word	0x2402649c
 8019f0c:	24026494 	.word	0x24026494

08019f10 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8019f10:	4b06      	ldr	r3, [pc, #24]	@ (8019f2c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8019f12:	681b      	ldr	r3, [r3, #0]
 8019f14:	b943      	cbnz	r3, 8019f28 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8019f16:	b139      	cbz	r1, 8019f28 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8019f18:	4b05      	ldr	r3, [pc, #20]	@ (8019f30 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8019f1a:	801a      	strh	r2, [r3, #0]
 8019f1c:	4b05      	ldr	r3, [pc, #20]	@ (8019f34 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8019f1e:	6019      	str	r1, [r3, #0]
 8019f20:	4b05      	ldr	r3, [pc, #20]	@ (8019f38 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8019f22:	6018      	str	r0, [r3, #0]
 8019f24:	f7ff bf96 	b.w	8019e54 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8019f28:	4770      	bx	lr
 8019f2a:	bf00      	nop
 8019f2c:	24026490 	.word	0x24026490
 8019f30:	240264a4 	.word	0x240264a4
 8019f34:	2402648c 	.word	0x2402648c
 8019f38:	24026484 	.word	0x24026484

08019f3c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8019f3c:	b470      	push	{r4, r5, r6}
 8019f3e:	4c07      	ldr	r4, [pc, #28]	@ (8019f5c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8019f40:	4605      	mov	r5, r0
 8019f42:	4610      	mov	r0, r2
 8019f44:	9a03      	ldr	r2, [sp, #12]
 8019f46:	6826      	ldr	r6, [r4, #0]
 8019f48:	b936      	cbnz	r6, 8019f58 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8019f4a:	6025      	str	r5, [r4, #0]
 8019f4c:	4c04      	ldr	r4, [pc, #16]	@ (8019f60 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8019f4e:	8021      	strh	r1, [r4, #0]
 8019f50:	4619      	mov	r1, r3
 8019f52:	bc70      	pop	{r4, r5, r6}
 8019f54:	f7ff bfdc 	b.w	8019f10 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8019f58:	bc70      	pop	{r4, r5, r6}
 8019f5a:	4770      	bx	lr
 8019f5c:	240264a8 	.word	0x240264a8
 8019f60:	240264a0 	.word	0x240264a0

08019f64 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8019f64:	4a12      	ldr	r2, [pc, #72]	@ (8019fb0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8019f66:	8803      	ldrh	r3, [r0, #0]
 8019f68:	8812      	ldrh	r2, [r2, #0]
 8019f6a:	4293      	cmp	r3, r2
 8019f6c:	d207      	bcs.n	8019f7e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8019f6e:	4a11      	ldr	r2, [pc, #68]	@ (8019fb4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8019f70:	2114      	movs	r1, #20
 8019f72:	6812      	ldr	r2, [r2, #0]
 8019f74:	fb01 2303 	mla	r3, r1, r3, r2
 8019f78:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8019f7c:	4770      	bx	lr
 8019f7e:	490e      	ldr	r1, [pc, #56]	@ (8019fb8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8019f80:	8809      	ldrh	r1, [r1, #0]
 8019f82:	4411      	add	r1, r2
 8019f84:	428b      	cmp	r3, r1
 8019f86:	da04      	bge.n	8019f92 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8019f88:	1a9b      	subs	r3, r3, r2
 8019f8a:	4a0c      	ldr	r2, [pc, #48]	@ (8019fbc <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8019f8c:	210e      	movs	r1, #14
 8019f8e:	6812      	ldr	r2, [r2, #0]
 8019f90:	e7f0      	b.n	8019f74 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8019f92:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8019f96:	4293      	cmp	r3, r2
 8019f98:	d108      	bne.n	8019fac <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8019f9a:	4b09      	ldr	r3, [pc, #36]	@ (8019fc0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8019f9c:	781b      	ldrb	r3, [r3, #0]
 8019f9e:	b91b      	cbnz	r3, 8019fa8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8019fa0:	4b08      	ldr	r3, [pc, #32]	@ (8019fc4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8019fa2:	f9b3 0000 	ldrsh.w	r0, [r3]
 8019fa6:	4770      	bx	lr
 8019fa8:	4b07      	ldr	r3, [pc, #28]	@ (8019fc8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8019faa:	e7fa      	b.n	8019fa2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8019fac:	2000      	movs	r0, #0
 8019fae:	4770      	bx	lr
 8019fb0:	240264a0 	.word	0x240264a0
 8019fb4:	240264a8 	.word	0x240264a8
 8019fb8:	240264a4 	.word	0x240264a4
 8019fbc:	24026488 	.word	0x24026488
 8019fc0:	24026410 	.word	0x24026410
 8019fc4:	24026412 	.word	0x24026412
 8019fc8:	24026414 	.word	0x24026414

08019fcc <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8019fcc:	4a12      	ldr	r2, [pc, #72]	@ (801a018 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8019fce:	8803      	ldrh	r3, [r0, #0]
 8019fd0:	8812      	ldrh	r2, [r2, #0]
 8019fd2:	4293      	cmp	r3, r2
 8019fd4:	d207      	bcs.n	8019fe6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8019fd6:	4a11      	ldr	r2, [pc, #68]	@ (801a01c <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8019fd8:	2114      	movs	r1, #20
 8019fda:	6812      	ldr	r2, [r2, #0]
 8019fdc:	fb01 2303 	mla	r3, r1, r3, r2
 8019fe0:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8019fe4:	4770      	bx	lr
 8019fe6:	490e      	ldr	r1, [pc, #56]	@ (801a020 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8019fe8:	8809      	ldrh	r1, [r1, #0]
 8019fea:	4411      	add	r1, r2
 8019fec:	428b      	cmp	r3, r1
 8019fee:	da04      	bge.n	8019ffa <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8019ff0:	1a9b      	subs	r3, r3, r2
 8019ff2:	4a0c      	ldr	r2, [pc, #48]	@ (801a024 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8019ff4:	210e      	movs	r1, #14
 8019ff6:	6812      	ldr	r2, [r2, #0]
 8019ff8:	e7f0      	b.n	8019fdc <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8019ffa:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8019ffe:	4293      	cmp	r3, r2
 801a000:	d108      	bne.n	801a014 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801a002:	4b09      	ldr	r3, [pc, #36]	@ (801a028 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801a004:	781b      	ldrb	r3, [r3, #0]
 801a006:	b91b      	cbnz	r3, 801a010 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801a008:	4b08      	ldr	r3, [pc, #32]	@ (801a02c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801a00a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801a00e:	4770      	bx	lr
 801a010:	4b07      	ldr	r3, [pc, #28]	@ (801a030 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801a012:	e7fa      	b.n	801a00a <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801a014:	2000      	movs	r0, #0
 801a016:	4770      	bx	lr
 801a018:	240264a0 	.word	0x240264a0
 801a01c:	240264a8 	.word	0x240264a8
 801a020:	240264a4 	.word	0x240264a4
 801a024:	24026488 	.word	0x24026488
 801a028:	24026410 	.word	0x24026410
 801a02c:	24026414 	.word	0x24026414
 801a030:	24026412 	.word	0x24026412

0801a034 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801a034:	4a22      	ldr	r2, [pc, #136]	@ (801a0c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801a036:	b530      	push	{r4, r5, lr}
 801a038:	880b      	ldrh	r3, [r1, #0]
 801a03a:	8812      	ldrh	r2, [r2, #0]
 801a03c:	4293      	cmp	r3, r2
 801a03e:	d213      	bcs.n	801a068 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801a040:	4a20      	ldr	r2, [pc, #128]	@ (801a0c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801a042:	2114      	movs	r1, #20
 801a044:	6812      	ldr	r2, [r2, #0]
 801a046:	fb01 2303 	mla	r3, r1, r3, r2
 801a04a:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801a04e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801a052:	8a1a      	ldrh	r2, [r3, #16]
 801a054:	8a5b      	ldrh	r3, [r3, #18]
 801a056:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801a05a:	8004      	strh	r4, [r0, #0]
 801a05c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a060:	8041      	strh	r1, [r0, #2]
 801a062:	8082      	strh	r2, [r0, #4]
 801a064:	80c3      	strh	r3, [r0, #6]
 801a066:	e024      	b.n	801a0b2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 801a068:	4917      	ldr	r1, [pc, #92]	@ (801a0c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801a06a:	8809      	ldrh	r1, [r1, #0]
 801a06c:	4411      	add	r1, r2
 801a06e:	428b      	cmp	r3, r1
 801a070:	da10      	bge.n	801a094 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 801a072:	1a9b      	subs	r3, r3, r2
 801a074:	220e      	movs	r2, #14
 801a076:	4353      	muls	r3, r2
 801a078:	4a14      	ldr	r2, [pc, #80]	@ (801a0cc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801a07a:	6811      	ldr	r1, [r2, #0]
 801a07c:	18ca      	adds	r2, r1, r3
 801a07e:	5ecd      	ldrsh	r5, [r1, r3]
 801a080:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 801a084:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 801a088:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801a08c:	8005      	strh	r5, [r0, #0]
 801a08e:	8044      	strh	r4, [r0, #2]
 801a090:	8081      	strh	r1, [r0, #4]
 801a092:	e7e7      	b.n	801a064 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801a094:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801a098:	4293      	cmp	r3, r2
 801a09a:	d10b      	bne.n	801a0b4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 801a09c:	4b0c      	ldr	r3, [pc, #48]	@ (801a0d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801a09e:	f9b3 1000 	ldrsh.w	r1, [r3]
 801a0a2:	4b0c      	ldr	r3, [pc, #48]	@ (801a0d4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801a0a4:	8081      	strh	r1, [r0, #4]
 801a0a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a0aa:	2300      	movs	r3, #0
 801a0ac:	80c2      	strh	r2, [r0, #6]
 801a0ae:	8003      	strh	r3, [r0, #0]
 801a0b0:	8043      	strh	r3, [r0, #2]
 801a0b2:	bd30      	pop	{r4, r5, pc}
 801a0b4:	2300      	movs	r3, #0
 801a0b6:	8003      	strh	r3, [r0, #0]
 801a0b8:	8043      	strh	r3, [r0, #2]
 801a0ba:	8083      	strh	r3, [r0, #4]
 801a0bc:	e7d2      	b.n	801a064 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801a0be:	bf00      	nop
 801a0c0:	240264a0 	.word	0x240264a0
 801a0c4:	240264a8 	.word	0x240264a8
 801a0c8:	240264a4 	.word	0x240264a4
 801a0cc:	24026488 	.word	0x24026488
 801a0d0:	2402640c 	.word	0x2402640c
 801a0d4:	2402640e 	.word	0x2402640e

0801a0d8 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801a0d8:	4a12      	ldr	r2, [pc, #72]	@ (801a124 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801a0da:	8803      	ldrh	r3, [r0, #0]
 801a0dc:	8811      	ldrh	r1, [r2, #0]
 801a0de:	428b      	cmp	r3, r1
 801a0e0:	d20b      	bcs.n	801a0fa <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801a0e2:	4a11      	ldr	r2, [pc, #68]	@ (801a128 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801a0e4:	6812      	ldr	r2, [r2, #0]
 801a0e6:	b112      	cbz	r2, 801a0ee <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801a0e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a0ec:	b9c0      	cbnz	r0, 801a120 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801a0ee:	4a0f      	ldr	r2, [pc, #60]	@ (801a12c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801a0f0:	6811      	ldr	r1, [r2, #0]
 801a0f2:	2214      	movs	r2, #20
 801a0f4:	4353      	muls	r3, r2
 801a0f6:	58c8      	ldr	r0, [r1, r3]
 801a0f8:	4770      	bx	lr
 801a0fa:	4a0d      	ldr	r2, [pc, #52]	@ (801a130 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801a0fc:	8812      	ldrh	r2, [r2, #0]
 801a0fe:	440a      	add	r2, r1
 801a100:	4293      	cmp	r3, r2
 801a102:	da04      	bge.n	801a10e <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801a104:	4a08      	ldr	r2, [pc, #32]	@ (801a128 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801a106:	6812      	ldr	r2, [r2, #0]
 801a108:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a10c:	4770      	bx	lr
 801a10e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801a112:	4293      	cmp	r3, r2
 801a114:	d103      	bne.n	801a11e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801a116:	4b07      	ldr	r3, [pc, #28]	@ (801a134 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801a118:	681b      	ldr	r3, [r3, #0]
 801a11a:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801a11c:	4770      	bx	lr
 801a11e:	2000      	movs	r0, #0
 801a120:	4770      	bx	lr
 801a122:	bf00      	nop
 801a124:	240264a0 	.word	0x240264a0
 801a128:	24026484 	.word	0x24026484
 801a12c:	240264a8 	.word	0x240264a8
 801a130:	240264a4 	.word	0x240264a4
 801a134:	24026418 	.word	0x24026418

0801a138 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801a138:	4b24      	ldr	r3, [pc, #144]	@ (801a1cc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801a13a:	8802      	ldrh	r2, [r0, #0]
 801a13c:	8818      	ldrh	r0, [r3, #0]
 801a13e:	4282      	cmp	r2, r0
 801a140:	d221      	bcs.n	801a186 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801a142:	4b23      	ldr	r3, [pc, #140]	@ (801a1d0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801a144:	6819      	ldr	r1, [r3, #0]
 801a146:	2314      	movs	r3, #20
 801a148:	fb03 1302 	mla	r3, r3, r2, r1
 801a14c:	6858      	ldr	r0, [r3, #4]
 801a14e:	2800      	cmp	r0, #0
 801a150:	d03a      	beq.n	801a1c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801a152:	4920      	ldr	r1, [pc, #128]	@ (801a1d4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801a154:	6809      	ldr	r1, [r1, #0]
 801a156:	2900      	cmp	r1, #0
 801a158:	d036      	beq.n	801a1c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801a15a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801a15e:	2900      	cmp	r1, #0
 801a160:	d032      	beq.n	801a1c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801a162:	891a      	ldrh	r2, [r3, #8]
 801a164:	8958      	ldrh	r0, [r3, #10]
 801a166:	4350      	muls	r0, r2
 801a168:	7c5a      	ldrb	r2, [r3, #17]
 801a16a:	7cdb      	ldrb	r3, [r3, #19]
 801a16c:	0952      	lsrs	r2, r2, #5
 801a16e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801a172:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801a176:	2b0b      	cmp	r3, #11
 801a178:	bf18      	it	ne
 801a17a:	0040      	lslne	r0, r0, #1
 801a17c:	3003      	adds	r0, #3
 801a17e:	f020 0003 	bic.w	r0, r0, #3
 801a182:	4408      	add	r0, r1
 801a184:	4770      	bx	lr
 801a186:	4b14      	ldr	r3, [pc, #80]	@ (801a1d8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801a188:	881b      	ldrh	r3, [r3, #0]
 801a18a:	4403      	add	r3, r0
 801a18c:	429a      	cmp	r2, r3
 801a18e:	da1a      	bge.n	801a1c6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801a190:	4b12      	ldr	r3, [pc, #72]	@ (801a1dc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801a192:	1a10      	subs	r0, r2, r0
 801a194:	210e      	movs	r1, #14
 801a196:	681b      	ldr	r3, [r3, #0]
 801a198:	fb01 3000 	mla	r0, r1, r0, r3
 801a19c:	7b03      	ldrb	r3, [r0, #12]
 801a19e:	f003 031f 	and.w	r3, r3, #31
 801a1a2:	2b0b      	cmp	r3, #11
 801a1a4:	d10b      	bne.n	801a1be <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801a1a6:	8903      	ldrh	r3, [r0, #8]
 801a1a8:	8940      	ldrh	r0, [r0, #10]
 801a1aa:	4358      	muls	r0, r3
 801a1ac:	4b09      	ldr	r3, [pc, #36]	@ (801a1d4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801a1ae:	3003      	adds	r0, #3
 801a1b0:	6819      	ldr	r1, [r3, #0]
 801a1b2:	f020 0303 	bic.w	r3, r0, #3
 801a1b6:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801a1ba:	4418      	add	r0, r3
 801a1bc:	4770      	bx	lr
 801a1be:	2b0d      	cmp	r3, #13
 801a1c0:	d101      	bne.n	801a1c6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801a1c2:	300d      	adds	r0, #13
 801a1c4:	4770      	bx	lr
 801a1c6:	2000      	movs	r0, #0
 801a1c8:	4770      	bx	lr
 801a1ca:	bf00      	nop
 801a1cc:	240264a0 	.word	0x240264a0
 801a1d0:	240264a8 	.word	0x240264a8
 801a1d4:	24026484 	.word	0x24026484
 801a1d8:	240264a4 	.word	0x240264a4
 801a1dc:	24026488 	.word	0x24026488

0801a1e0 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801a1e0:	4b1f      	ldr	r3, [pc, #124]	@ (801a260 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 801a1e2:	b510      	push	{r4, lr}
 801a1e4:	8802      	ldrh	r2, [r0, #0]
 801a1e6:	881b      	ldrh	r3, [r3, #0]
 801a1e8:	429a      	cmp	r2, r3
 801a1ea:	d21a      	bcs.n	801a222 <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 801a1ec:	4b1d      	ldr	r3, [pc, #116]	@ (801a264 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 801a1ee:	2114      	movs	r1, #20
 801a1f0:	681b      	ldr	r3, [r3, #0]
 801a1f2:	fb01 3102 	mla	r1, r1, r2, r3
 801a1f6:	7c4b      	ldrb	r3, [r1, #17]
 801a1f8:	0958      	lsrs	r0, r3, #5
 801a1fa:	7ccb      	ldrb	r3, [r1, #19]
 801a1fc:	491a      	ldr	r1, [pc, #104]	@ (801a268 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 801a1fe:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801a202:	6809      	ldr	r1, [r1, #0]
 801a204:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 801a208:	b2d8      	uxtb	r0, r3
 801a20a:	b149      	cbz	r1, 801a220 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801a20c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801a210:	b132      	cbz	r2, 801a220 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801a212:	2b0e      	cmp	r3, #14
 801a214:	d021      	beq.n	801a25a <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801a216:	280f      	cmp	r0, #15
 801a218:	d01d      	beq.n	801a256 <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 801a21a:	2810      	cmp	r0, #16
 801a21c:	bf08      	it	eq
 801a21e:	2002      	moveq	r0, #2
 801a220:	bd10      	pop	{r4, pc}
 801a222:	4912      	ldr	r1, [pc, #72]	@ (801a26c <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 801a224:	8809      	ldrh	r1, [r1, #0]
 801a226:	4419      	add	r1, r3
 801a228:	428a      	cmp	r2, r1
 801a22a:	da09      	bge.n	801a240 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 801a22c:	1ad3      	subs	r3, r2, r3
 801a22e:	4a10      	ldr	r2, [pc, #64]	@ (801a270 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 801a230:	210e      	movs	r1, #14
 801a232:	6812      	ldr	r2, [r2, #0]
 801a234:	fb01 2303 	mla	r3, r1, r3, r2
 801a238:	7b18      	ldrb	r0, [r3, #12]
 801a23a:	f000 001f 	and.w	r0, r0, #31
 801a23e:	e7ef      	b.n	801a220 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801a240:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 801a244:	429a      	cmp	r2, r3
 801a246:	d108      	bne.n	801a25a <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801a248:	f7ea f862 	bl	8004310 <_ZN8touchgfx3HAL3lcdEv>
 801a24c:	6803      	ldr	r3, [r0, #0]
 801a24e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a254:	4718      	bx	r3
 801a256:	2001      	movs	r0, #1
 801a258:	e7e2      	b.n	801a220 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801a25a:	2000      	movs	r0, #0
 801a25c:	e7e0      	b.n	801a220 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801a25e:	bf00      	nop
 801a260:	240264a0 	.word	0x240264a0
 801a264:	240264a8 	.word	0x240264a8
 801a268:	24026484 	.word	0x24026484
 801a26c:	240264a4 	.word	0x240264a4
 801a270:	24026488 	.word	0x24026488

0801a274 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801a274:	2018      	movs	r0, #24
 801a276:	4770      	bx	lr

0801a278 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801a278:	2001      	movs	r0, #1
 801a27a:	4770      	bx	lr

0801a27c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801a27c:	4b02      	ldr	r3, [pc, #8]	@ (801a288 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 801a27e:	8818      	ldrh	r0, [r3, #0]
 801a280:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a284:	b280      	uxth	r0, r0
 801a286:	4770      	bx	lr
 801a288:	24026412 	.word	0x24026412

0801a28c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801a28c:	2bff      	cmp	r3, #255	@ 0xff
 801a28e:	d04c      	beq.n	801a32a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801a290:	2a2c      	cmp	r2, #44	@ 0x2c
 801a292:	d030      	beq.n	801a2f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a>
 801a294:	d80f      	bhi.n	801a2b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 801a296:	2a08      	cmp	r2, #8
 801a298:	d043      	beq.n	801a322 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801a29a:	d805      	bhi.n	801a2a8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 801a29c:	2a04      	cmp	r2, #4
 801a29e:	d03e      	beq.n	801a31e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801a2a0:	2a05      	cmp	r2, #5
 801a2a2:	d03a      	beq.n	801a31a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801a2a4:	2300      	movs	r3, #0
 801a2a6:	e024      	b.n	801a2f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a2a8:	2a0a      	cmp	r2, #10
 801a2aa:	d03a      	beq.n	801a322 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801a2ac:	d301      	bcc.n	801a2b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 801a2ae:	2a0b      	cmp	r2, #11
 801a2b0:	d1f8      	bne.n	801a2a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a2b2:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801a2b4:	e01d      	b.n	801a2f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a2b6:	2a30      	cmp	r2, #48	@ 0x30
 801a2b8:	d035      	beq.n	801a326 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801a2ba:	d80a      	bhi.n	801a2d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46>
 801a2bc:	2a2e      	cmp	r2, #46	@ 0x2e
 801a2be:	684b      	ldr	r3, [r1, #4]
 801a2c0:	d023      	beq.n	801a30a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a2c2:	d90d      	bls.n	801a2e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 801a2c4:	781a      	ldrb	r2, [r3, #0]
 801a2c6:	785b      	ldrb	r3, [r3, #1]
 801a2c8:	2b00      	cmp	r3, #0
 801a2ca:	d1eb      	bne.n	801a2a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a2cc:	b98a      	cbnz	r2, 801a2f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a2ce:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801a2d0:	e00f      	b.n	801a2f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a2d2:	2a32      	cmp	r2, #50	@ 0x32
 801a2d4:	d027      	beq.n	801a326 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801a2d6:	d301      	bcc.n	801a2dc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 801a2d8:	2a33      	cmp	r2, #51	@ 0x33
 801a2da:	d1e3      	bne.n	801a2a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a2dc:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801a2de:	e008      	b.n	801a2f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a2e0:	781a      	ldrb	r2, [r3, #0]
 801a2e2:	785b      	ldrb	r3, [r3, #1]
 801a2e4:	2b00      	cmp	r3, #0
 801a2e6:	d1dd      	bne.n	801a2a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a2e8:	2a00      	cmp	r2, #0
 801a2ea:	d0f0      	beq.n	801a2ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 801a2ec:	2a01      	cmp	r2, #1
 801a2ee:	d1d9      	bne.n	801a2a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a2f0:	6943      	ldr	r3, [r0, #20]
 801a2f2:	4618      	mov	r0, r3
 801a2f4:	4770      	bx	lr
 801a2f6:	684b      	ldr	r3, [r1, #4]
 801a2f8:	781a      	ldrb	r2, [r3, #0]
 801a2fa:	785b      	ldrb	r3, [r3, #1]
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	d1d1      	bne.n	801a2a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a300:	b14a      	cbz	r2, 801a316 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801a302:	2a01      	cmp	r2, #1
 801a304:	bf08      	it	eq
 801a306:	68c3      	ldreq	r3, [r0, #12]
 801a308:	e7f3      	b.n	801a2f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a30a:	781a      	ldrb	r2, [r3, #0]
 801a30c:	785b      	ldrb	r3, [r3, #1]
 801a30e:	2b00      	cmp	r3, #0
 801a310:	d1c8      	bne.n	801a2a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a312:	2a00      	cmp	r2, #0
 801a314:	d1ed      	bne.n	801a2f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a316:	69c3      	ldr	r3, [r0, #28]
 801a318:	e7eb      	b.n	801a2f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a31a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801a31c:	e7e9      	b.n	801a2f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a31e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801a320:	e7e7      	b.n	801a2f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a322:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801a324:	e7e5      	b.n	801a2f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a326:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801a328:	e7e3      	b.n	801a2f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a32a:	2a2c      	cmp	r2, #44	@ 0x2c
 801a32c:	d030      	beq.n	801a390 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x104>
 801a32e:	d80f      	bhi.n	801a350 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 801a330:	2a08      	cmp	r2, #8
 801a332:	d042      	beq.n	801a3ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801a334:	d805      	bhi.n	801a342 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801a336:	2a04      	cmp	r2, #4
 801a338:	d03d      	beq.n	801a3b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801a33a:	2a05      	cmp	r2, #5
 801a33c:	d1b2      	bne.n	801a2a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a33e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801a340:	e7d7      	b.n	801a2f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a342:	2a0a      	cmp	r2, #10
 801a344:	d039      	beq.n	801a3ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801a346:	d301      	bcc.n	801a34c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801a348:	2a0b      	cmp	r2, #11
 801a34a:	d1ab      	bne.n	801a2a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a34c:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 801a34e:	e7d0      	b.n	801a2f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a350:	2a30      	cmp	r2, #48	@ 0x30
 801a352:	d034      	beq.n	801a3be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801a354:	d80b      	bhi.n	801a36e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801a356:	2a2e      	cmp	r2, #46	@ 0x2e
 801a358:	684b      	ldr	r3, [r1, #4]
 801a35a:	d023      	beq.n	801a3a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801a35c:	d90e      	bls.n	801a37c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf0>
 801a35e:	781a      	ldrb	r2, [r3, #0]
 801a360:	785b      	ldrb	r3, [r3, #1]
 801a362:	2b00      	cmp	r3, #0
 801a364:	d19e      	bne.n	801a2a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a366:	2a00      	cmp	r2, #0
 801a368:	d1c3      	bne.n	801a2f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a36a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801a36c:	e7c1      	b.n	801a2f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a36e:	2a32      	cmp	r2, #50	@ 0x32
 801a370:	d025      	beq.n	801a3be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801a372:	d301      	bcc.n	801a378 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801a374:	2a33      	cmp	r2, #51	@ 0x33
 801a376:	d195      	bne.n	801a2a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a378:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801a37a:	e7ba      	b.n	801a2f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a37c:	781a      	ldrb	r2, [r3, #0]
 801a37e:	785b      	ldrb	r3, [r3, #1]
 801a380:	2b00      	cmp	r3, #0
 801a382:	d18f      	bne.n	801a2a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a384:	2a00      	cmp	r2, #0
 801a386:	d0f0      	beq.n	801a36a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xde>
 801a388:	2a01      	cmp	r2, #1
 801a38a:	d18b      	bne.n	801a2a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a38c:	6983      	ldr	r3, [r0, #24]
 801a38e:	e7b0      	b.n	801a2f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a390:	684b      	ldr	r3, [r1, #4]
 801a392:	781a      	ldrb	r2, [r3, #0]
 801a394:	785b      	ldrb	r3, [r3, #1]
 801a396:	2b00      	cmp	r3, #0
 801a398:	d184      	bne.n	801a2a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a39a:	b152      	cbz	r2, 801a3b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801a39c:	2a01      	cmp	r2, #1
 801a39e:	bf08      	it	eq
 801a3a0:	6903      	ldreq	r3, [r0, #16]
 801a3a2:	e7a6      	b.n	801a2f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a3a4:	781a      	ldrb	r2, [r3, #0]
 801a3a6:	785b      	ldrb	r3, [r3, #1]
 801a3a8:	2b00      	cmp	r3, #0
 801a3aa:	f47f af7b 	bne.w	801a2a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a3ae:	2a00      	cmp	r2, #0
 801a3b0:	d19f      	bne.n	801a2f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a3b2:	6a03      	ldr	r3, [r0, #32]
 801a3b4:	e79d      	b.n	801a2f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a3b6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801a3b8:	e79b      	b.n	801a2f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a3ba:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801a3bc:	e799      	b.n	801a2f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a3be:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801a3c0:	e797      	b.n	801a2f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>

0801a3c2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a3c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3c6:	b085      	sub	sp, #20
 801a3c8:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801a3ca:	9203      	str	r2, [sp, #12]
 801a3cc:	6870      	ldr	r0, [r6, #4]
 801a3ce:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801a3d2:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 801a3d6:	9101      	str	r1, [sp, #4]
 801a3d8:	fa1f f885 	uxth.w	r8, r5
 801a3dc:	43ed      	mvns	r5, r5
 801a3de:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801a3e2:	b2ed      	uxtb	r5, r5
 801a3e4:	fb00 2404 	mla	r4, r0, r4, r2
 801a3e8:	6832      	ldr	r2, [r6, #0]
 801a3ea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a3ee:	4414      	add	r4, r2
 801a3f0:	f8dc 2000 	ldr.w	r2, [ip]
 801a3f4:	9202      	str	r2, [sp, #8]
 801a3f6:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801a3fa:	f102 0e04 	add.w	lr, r2, #4
 801a3fe:	9a01      	ldr	r2, [sp, #4]
 801a400:	2a00      	cmp	r2, #0
 801a402:	dc03      	bgt.n	801a40c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801a404:	9a03      	ldr	r2, [sp, #12]
 801a406:	2a00      	cmp	r2, #0
 801a408:	f340 8116 	ble.w	801a638 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801a40c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a40e:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801a412:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801a416:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801a418:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801a41c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801a420:	2b00      	cmp	r3, #0
 801a422:	dd0e      	ble.n	801a442 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801a424:	1406      	asrs	r6, r0, #16
 801a426:	d405      	bmi.n	801a434 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a428:	4556      	cmp	r6, sl
 801a42a:	da03      	bge.n	801a434 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a42c:	1416      	asrs	r6, r2, #16
 801a42e:	d401      	bmi.n	801a434 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a430:	454e      	cmp	r6, r9
 801a432:	db07      	blt.n	801a444 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801a434:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801a436:	3b01      	subs	r3, #1
 801a438:	3403      	adds	r4, #3
 801a43a:	4430      	add	r0, r6
 801a43c:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801a43e:	4432      	add	r2, r6
 801a440:	e7ee      	b.n	801a420 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801a442:	d063      	beq.n	801a50c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801a444:	1e5e      	subs	r6, r3, #1
 801a446:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801a448:	fb07 0706 	mla	r7, r7, r6, r0
 801a44c:	143f      	asrs	r7, r7, #16
 801a44e:	d454      	bmi.n	801a4fa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801a450:	4557      	cmp	r7, sl
 801a452:	da52      	bge.n	801a4fa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801a454:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801a456:	fb07 2606 	mla	r6, r7, r6, r2
 801a45a:	1436      	asrs	r6, r6, #16
 801a45c:	d44d      	bmi.n	801a4fa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801a45e:	454e      	cmp	r6, r9
 801a460:	da4b      	bge.n	801a4fa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801a462:	1ce6      	adds	r6, r4, #3
 801a464:	4699      	mov	r9, r3
 801a466:	f1b9 0f00 	cmp.w	r9, #0
 801a46a:	f106 0603 	add.w	r6, r6, #3
 801a46e:	dd48      	ble.n	801a502 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801a470:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801a474:	1417      	asrs	r7, r2, #16
 801a476:	9902      	ldr	r1, [sp, #8]
 801a478:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801a47c:	f109 39ff 	add.w	r9, r9, #4294967295
 801a480:	fb0b 1707 	mla	r7, fp, r7, r1
 801a484:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801a488:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801a48a:	f817 700a 	ldrb.w	r7, [r7, sl]
 801a48e:	fb1b fb05 	smulbb	fp, fp, r5
 801a492:	4408      	add	r0, r1
 801a494:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801a496:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801a49a:	440a      	add	r2, r1
 801a49c:	eb0e 0a07 	add.w	sl, lr, r7
 801a4a0:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801a4a4:	fb07 b708 	mla	r7, r7, r8, fp
 801a4a8:	b2bf      	uxth	r7, r7
 801a4aa:	f107 0b01 	add.w	fp, r7, #1
 801a4ae:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801a4b2:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801a4b6:	fb1b fb05 	smulbb	fp, fp, r5
 801a4ba:	123f      	asrs	r7, r7, #8
 801a4bc:	f806 7c06 	strb.w	r7, [r6, #-6]
 801a4c0:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801a4c4:	fb07 b708 	mla	r7, r7, r8, fp
 801a4c8:	b2bf      	uxth	r7, r7
 801a4ca:	f107 0b01 	add.w	fp, r7, #1
 801a4ce:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801a4d2:	123f      	asrs	r7, r7, #8
 801a4d4:	f806 7c05 	strb.w	r7, [r6, #-5]
 801a4d8:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801a4dc:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801a4e0:	fb1a fa05 	smulbb	sl, sl, r5
 801a4e4:	fb07 a708 	mla	r7, r7, r8, sl
 801a4e8:	b2bf      	uxth	r7, r7
 801a4ea:	f107 0a01 	add.w	sl, r7, #1
 801a4ee:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801a4f2:	123f      	asrs	r7, r7, #8
 801a4f4:	f806 7c04 	strb.w	r7, [r6, #-4]
 801a4f8:	e7b5      	b.n	801a466 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801a4fa:	2700      	movs	r7, #0
 801a4fc:	1bde      	subs	r6, r3, r7
 801a4fe:	2e00      	cmp	r6, #0
 801a500:	dc42      	bgt.n	801a588 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801a502:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a506:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a50a:	441c      	add	r4, r3
 801a50c:	9b01      	ldr	r3, [sp, #4]
 801a50e:	2b00      	cmp	r3, #0
 801a510:	f340 8092 	ble.w	801a638 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801a514:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801a518:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a51a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a51e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a522:	eef0 6a62 	vmov.f32	s13, s5
 801a526:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a52a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a52e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a532:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 801a536:	eef0 6a43 	vmov.f32	s13, s6
 801a53a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a53e:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 801a542:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a546:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a54a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a54e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a552:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a556:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a55a:	ee12 2a90 	vmov	r2, s5
 801a55e:	eef0 2a47 	vmov.f32	s5, s14
 801a562:	fb92 f3f3 	sdiv	r3, r2, r3
 801a566:	ee13 2a10 	vmov	r2, s6
 801a56a:	9311      	str	r3, [sp, #68]	@ 0x44
 801a56c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a56e:	eeb0 3a67 	vmov.f32	s6, s15
 801a572:	fb92 f3f3 	sdiv	r3, r2, r3
 801a576:	9312      	str	r3, [sp, #72]	@ 0x48
 801a578:	9b01      	ldr	r3, [sp, #4]
 801a57a:	9a03      	ldr	r2, [sp, #12]
 801a57c:	3b01      	subs	r3, #1
 801a57e:	9301      	str	r3, [sp, #4]
 801a580:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a582:	bf08      	it	eq
 801a584:	4613      	moveq	r3, r2
 801a586:	e73a      	b.n	801a3fe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801a588:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801a58c:	d44e      	bmi.n	801a62c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801a58e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801a592:	4556      	cmp	r6, sl
 801a594:	dd4a      	ble.n	801a62c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801a596:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801a59a:	d447      	bmi.n	801a62c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801a59c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801a5a0:	4559      	cmp	r1, fp
 801a5a2:	dd43      	ble.n	801a62c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801a5a4:	fa0f f986 	sxth.w	r9, r6
 801a5a8:	9902      	ldr	r1, [sp, #8]
 801a5aa:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801a5ae:	fb0b 1909 	mla	r9, fp, r9, r1
 801a5b2:	f814 b006 	ldrb.w	fp, [r4, r6]
 801a5b6:	f819 900a 	ldrb.w	r9, [r9, sl]
 801a5ba:	fb1b fb05 	smulbb	fp, fp, r5
 801a5be:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801a5c2:	eb0e 0a09 	add.w	sl, lr, r9
 801a5c6:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801a5ca:	fb09 b908 	mla	r9, r9, r8, fp
 801a5ce:	fa1f f989 	uxth.w	r9, r9
 801a5d2:	f109 0b01 	add.w	fp, r9, #1
 801a5d6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a5da:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a5de:	f804 9006 	strb.w	r9, [r4, r6]
 801a5e2:	4426      	add	r6, r4
 801a5e4:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801a5e8:	f896 b001 	ldrb.w	fp, [r6, #1]
 801a5ec:	fb1b fb05 	smulbb	fp, fp, r5
 801a5f0:	fb09 b908 	mla	r9, r9, r8, fp
 801a5f4:	fa1f f989 	uxth.w	r9, r9
 801a5f8:	f109 0b01 	add.w	fp, r9, #1
 801a5fc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a600:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a604:	f886 9001 	strb.w	r9, [r6, #1]
 801a608:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801a60c:	f896 a002 	ldrb.w	sl, [r6, #2]
 801a610:	fb1a fa05 	smulbb	sl, sl, r5
 801a614:	fb09 a908 	mla	r9, r9, r8, sl
 801a618:	fa1f f989 	uxth.w	r9, r9
 801a61c:	f109 0a01 	add.w	sl, r9, #1
 801a620:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801a624:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a628:	f886 9002 	strb.w	r9, [r6, #2]
 801a62c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801a62e:	3701      	adds	r7, #1
 801a630:	4408      	add	r0, r1
 801a632:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801a634:	440a      	add	r2, r1
 801a636:	e761      	b.n	801a4fc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801a638:	b005      	add	sp, #20
 801a63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a63e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a63e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a642:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801a644:	4693      	mov	fp, r2
 801a646:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801a648:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801a64c:	6868      	ldr	r0, [r5, #4]
 801a64e:	6877      	ldr	r7, [r6, #4]
 801a650:	9100      	str	r1, [sp, #0]
 801a652:	3704      	adds	r7, #4
 801a654:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801a658:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 801a65c:	fb00 2404 	mla	r4, r0, r4, r2
 801a660:	682a      	ldr	r2, [r5, #0]
 801a662:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a666:	4414      	add	r4, r2
 801a668:	6832      	ldr	r2, [r6, #0]
 801a66a:	9201      	str	r2, [sp, #4]
 801a66c:	9a00      	ldr	r2, [sp, #0]
 801a66e:	2a00      	cmp	r2, #0
 801a670:	dc03      	bgt.n	801a67a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801a672:	f1bb 0f00 	cmp.w	fp, #0
 801a676:	f340 80bc 	ble.w	801a7f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801a67a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a67c:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801a680:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801a684:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a686:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801a68a:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801a68e:	2b00      	cmp	r3, #0
 801a690:	dd0c      	ble.n	801a6ac <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a692:	1405      	asrs	r5, r0, #16
 801a694:	d405      	bmi.n	801a6a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a696:	4555      	cmp	r5, sl
 801a698:	da03      	bge.n	801a6a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a69a:	1415      	asrs	r5, r2, #16
 801a69c:	d401      	bmi.n	801a6a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a69e:	454d      	cmp	r5, r9
 801a6a0:	db05      	blt.n	801a6ae <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a6a2:	4440      	add	r0, r8
 801a6a4:	4472      	add	r2, lr
 801a6a6:	3b01      	subs	r3, #1
 801a6a8:	3403      	adds	r4, #3
 801a6aa:	e7f0      	b.n	801a68e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801a6ac:	d03f      	beq.n	801a72e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801a6ae:	1e5d      	subs	r5, r3, #1
 801a6b0:	fb08 0c05 	mla	ip, r8, r5, r0
 801a6b4:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801a6b8:	d42e      	bmi.n	801a718 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801a6ba:	45d4      	cmp	ip, sl
 801a6bc:	da2c      	bge.n	801a718 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801a6be:	fb0e 2505 	mla	r5, lr, r5, r2
 801a6c2:	142d      	asrs	r5, r5, #16
 801a6c4:	d428      	bmi.n	801a718 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801a6c6:	454d      	cmp	r5, r9
 801a6c8:	da26      	bge.n	801a718 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801a6ca:	1ce5      	adds	r5, r4, #3
 801a6cc:	469c      	mov	ip, r3
 801a6ce:	f1bc 0f00 	cmp.w	ip, #0
 801a6d2:	f105 0503 	add.w	r5, r5, #3
 801a6d6:	dd25      	ble.n	801a724 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801a6d8:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801a6dc:	ea4f 4922 	mov.w	r9, r2, asr #16
 801a6e0:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a6e4:	4472      	add	r2, lr
 801a6e6:	468a      	mov	sl, r1
 801a6e8:	9901      	ldr	r1, [sp, #4]
 801a6ea:	fb0a 1909 	mla	r9, sl, r9, r1
 801a6ee:	1401      	asrs	r1, r0, #16
 801a6f0:	4440      	add	r0, r8
 801a6f2:	f819 9001 	ldrb.w	r9, [r9, r1]
 801a6f6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801a6fa:	eb07 0a09 	add.w	sl, r7, r9
 801a6fe:	f817 9009 	ldrb.w	r9, [r7, r9]
 801a702:	f805 9c06 	strb.w	r9, [r5, #-6]
 801a706:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801a70a:	f805 9c05 	strb.w	r9, [r5, #-5]
 801a70e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801a712:	f805 9c04 	strb.w	r9, [r5, #-4]
 801a716:	e7da      	b.n	801a6ce <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801a718:	2500      	movs	r5, #0
 801a71a:	eba3 0c05 	sub.w	ip, r3, r5
 801a71e:	f1bc 0f00 	cmp.w	ip, #0
 801a722:	dc3b      	bgt.n	801a79c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801a724:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a728:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a72c:	441c      	add	r4, r3
 801a72e:	9b00      	ldr	r3, [sp, #0]
 801a730:	2b00      	cmp	r3, #0
 801a732:	dd5e      	ble.n	801a7f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801a734:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a738:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a73a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a73e:	eeb0 6a62 	vmov.f32	s12, s5
 801a742:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a746:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a74a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a74e:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801a752:	eeb0 6a43 	vmov.f32	s12, s6
 801a756:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a75a:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801a75e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a762:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a766:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a76a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a76e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a772:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a776:	ee12 2a90 	vmov	r2, s5
 801a77a:	eef0 2a47 	vmov.f32	s5, s14
 801a77e:	fb92 f8f3 	sdiv	r8, r2, r3
 801a782:	ee13 2a10 	vmov	r2, s6
 801a786:	eeb0 3a67 	vmov.f32	s6, s15
 801a78a:	fb92 fef3 	sdiv	lr, r2, r3
 801a78e:	9b00      	ldr	r3, [sp, #0]
 801a790:	3b01      	subs	r3, #1
 801a792:	9300      	str	r3, [sp, #0]
 801a794:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a796:	bf08      	it	eq
 801a798:	465b      	moveq	r3, fp
 801a79a:	e767      	b.n	801a66c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801a79c:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a7a0:	d423      	bmi.n	801a7ea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801a7a2:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801a7a6:	45cc      	cmp	ip, r9
 801a7a8:	dd1f      	ble.n	801a7ea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801a7aa:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801a7ae:	d41c      	bmi.n	801a7ea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801a7b0:	68f1      	ldr	r1, [r6, #12]
 801a7b2:	4551      	cmp	r1, sl
 801a7b4:	dd19      	ble.n	801a7ea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801a7b6:	fa0f fc8c 	sxth.w	ip, ip
 801a7ba:	9901      	ldr	r1, [sp, #4]
 801a7bc:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801a7c0:	f81c c009 	ldrb.w	ip, [ip, r9]
 801a7c4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801a7c8:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801a7cc:	eb07 090c 	add.w	r9, r7, ip
 801a7d0:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801a7d4:	f804 a00c 	strb.w	sl, [r4, ip]
 801a7d8:	44a4      	add	ip, r4
 801a7da:	f899 a001 	ldrb.w	sl, [r9, #1]
 801a7de:	f88c a001 	strb.w	sl, [ip, #1]
 801a7e2:	f899 9002 	ldrb.w	r9, [r9, #2]
 801a7e6:	f88c 9002 	strb.w	r9, [ip, #2]
 801a7ea:	4440      	add	r0, r8
 801a7ec:	4472      	add	r2, lr
 801a7ee:	3501      	adds	r5, #1
 801a7f0:	e793      	b.n	801a71a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801a7f2:	b003      	add	sp, #12
 801a7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a7f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7fc:	b085      	sub	sp, #20
 801a7fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801a802:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801a804:	9202      	str	r2, [sp, #8]
 801a806:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801a80a:	6860      	ldr	r0, [r4, #4]
 801a80c:	9203      	str	r2, [sp, #12]
 801a80e:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801a812:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801a816:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801a81a:	fb00 2505 	mla	r5, r0, r5, r2
 801a81e:	6822      	ldr	r2, [r4, #0]
 801a820:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a824:	4415      	add	r5, r2
 801a826:	f8dc 2000 	ldr.w	r2, [ip]
 801a82a:	9200      	str	r2, [sp, #0]
 801a82c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801a830:	3204      	adds	r2, #4
 801a832:	9201      	str	r2, [sp, #4]
 801a834:	2900      	cmp	r1, #0
 801a836:	dc03      	bgt.n	801a840 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801a838:	9a02      	ldr	r2, [sp, #8]
 801a83a:	2a00      	cmp	r2, #0
 801a83c:	f340 8127 	ble.w	801aa8e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801a840:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a842:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801a846:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801a84a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801a84c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801a850:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801a854:	2b00      	cmp	r3, #0
 801a856:	dd0d      	ble.n	801a874 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a858:	1422      	asrs	r2, r4, #16
 801a85a:	d405      	bmi.n	801a868 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a85c:	4542      	cmp	r2, r8
 801a85e:	da03      	bge.n	801a868 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a860:	1402      	asrs	r2, r0, #16
 801a862:	d401      	bmi.n	801a868 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a864:	42ba      	cmp	r2, r7
 801a866:	db06      	blt.n	801a876 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a868:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801a86a:	4474      	add	r4, lr
 801a86c:	3b01      	subs	r3, #1
 801a86e:	3503      	adds	r5, #3
 801a870:	4410      	add	r0, r2
 801a872:	e7ef      	b.n	801a854 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801a874:	d075      	beq.n	801a962 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801a876:	1e5a      	subs	r2, r3, #1
 801a878:	fb0e 4602 	mla	r6, lr, r2, r4
 801a87c:	1436      	asrs	r6, r6, #16
 801a87e:	d465      	bmi.n	801a94c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801a880:	4546      	cmp	r6, r8
 801a882:	da63      	bge.n	801a94c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801a884:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801a886:	fb06 0202 	mla	r2, r6, r2, r0
 801a88a:	1412      	asrs	r2, r2, #16
 801a88c:	d45e      	bmi.n	801a94c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801a88e:	42ba      	cmp	r2, r7
 801a890:	da5c      	bge.n	801a94c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801a892:	1cef      	adds	r7, r5, #3
 801a894:	4699      	mov	r9, r3
 801a896:	f1b9 0f00 	cmp.w	r9, #0
 801a89a:	dd5d      	ble.n	801a958 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801a89c:	1402      	asrs	r2, r0, #16
 801a89e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801a8a2:	1426      	asrs	r6, r4, #16
 801a8a4:	4692      	mov	sl, r2
 801a8a6:	9a00      	ldr	r2, [sp, #0]
 801a8a8:	fb08 220a 	mla	r2, r8, sl, r2
 801a8ac:	5d92      	ldrb	r2, [r2, r6]
 801a8ae:	9e01      	ldr	r6, [sp, #4]
 801a8b0:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801a8b4:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801a8b8:	d041      	beq.n	801a93e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801a8ba:	9a03      	ldr	r2, [sp, #12]
 801a8bc:	fa5f fb86 	uxtb.w	fp, r6
 801a8c0:	fb02 f808 	mul.w	r8, r2, r8
 801a8c4:	f108 0201 	add.w	r2, r8, #1
 801a8c8:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801a8cc:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801a8d0:	1212      	asrs	r2, r2, #8
 801a8d2:	fa1f fa82 	uxth.w	sl, r2
 801a8d6:	43d2      	mvns	r2, r2
 801a8d8:	fb1b fb0a 	smulbb	fp, fp, sl
 801a8dc:	b2d2      	uxtb	r2, r2
 801a8de:	fb08 b802 	mla	r8, r8, r2, fp
 801a8e2:	fa1f f888 	uxth.w	r8, r8
 801a8e6:	f108 0b01 	add.w	fp, r8, #1
 801a8ea:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a8ee:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801a8f2:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801a8f6:	fb1b fb0a 	smulbb	fp, fp, sl
 801a8fa:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a8fe:	fb16 fa0a 	smulbb	sl, r6, sl
 801a902:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801a906:	f807 8c03 	strb.w	r8, [r7, #-3]
 801a90a:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801a90e:	fb06 aa02 	mla	sl, r6, r2, sl
 801a912:	fb08 b802 	mla	r8, r8, r2, fp
 801a916:	fa1f fa8a 	uxth.w	sl, sl
 801a91a:	fa1f f888 	uxth.w	r8, r8
 801a91e:	f10a 0601 	add.w	r6, sl, #1
 801a922:	f108 0b01 	add.w	fp, r8, #1
 801a926:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801a92a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a92e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a932:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a936:	f807 ac01 	strb.w	sl, [r7, #-1]
 801a93a:	f807 8c02 	strb.w	r8, [r7, #-2]
 801a93e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801a940:	4474      	add	r4, lr
 801a942:	3703      	adds	r7, #3
 801a944:	f109 39ff 	add.w	r9, r9, #4294967295
 801a948:	4410      	add	r0, r2
 801a94a:	e7a4      	b.n	801a896 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a94c:	f04f 0800 	mov.w	r8, #0
 801a950:	eba3 0208 	sub.w	r2, r3, r8
 801a954:	2a00      	cmp	r2, #0
 801a956:	dc3b      	bgt.n	801a9d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801a958:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a95c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a960:	441d      	add	r5, r3
 801a962:	2900      	cmp	r1, #0
 801a964:	f340 8093 	ble.w	801aa8e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801a968:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a96c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a96e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a972:	3901      	subs	r1, #1
 801a974:	eeb0 6a62 	vmov.f32	s12, s5
 801a978:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a97c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a980:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a984:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801a988:	eeb0 6a43 	vmov.f32	s12, s6
 801a98c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a990:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801a994:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a998:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a99c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a9a0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a9a4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a9a8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a9ac:	ee12 2a90 	vmov	r2, s5
 801a9b0:	eef0 2a47 	vmov.f32	s5, s14
 801a9b4:	fb92 fef3 	sdiv	lr, r2, r3
 801a9b8:	ee13 2a10 	vmov	r2, s6
 801a9bc:	eeb0 3a67 	vmov.f32	s6, s15
 801a9c0:	fb92 f3f3 	sdiv	r3, r2, r3
 801a9c4:	9a02      	ldr	r2, [sp, #8]
 801a9c6:	9312      	str	r3, [sp, #72]	@ 0x48
 801a9c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a9ca:	bf08      	it	eq
 801a9cc:	4613      	moveq	r3, r2
 801a9ce:	e731      	b.n	801a834 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801a9d0:	1427      	asrs	r7, r4, #16
 801a9d2:	d456      	bmi.n	801aa82 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801a9d4:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801a9d8:	42be      	cmp	r6, r7
 801a9da:	dd52      	ble.n	801aa82 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801a9dc:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a9e0:	d44f      	bmi.n	801aa82 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801a9e2:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801a9e6:	454a      	cmp	r2, r9
 801a9e8:	dd4b      	ble.n	801aa82 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801a9ea:	9a00      	ldr	r2, [sp, #0]
 801a9ec:	b236      	sxth	r6, r6
 801a9ee:	fb09 2606 	mla	r6, r9, r6, r2
 801a9f2:	5df2      	ldrb	r2, [r6, r7]
 801a9f4:	9e01      	ldr	r6, [sp, #4]
 801a9f6:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801a9fa:	0e3a      	lsrs	r2, r7, #24
 801a9fc:	d041      	beq.n	801aa82 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801a9fe:	9e03      	ldr	r6, [sp, #12]
 801aa00:	fa5f fb87 	uxtb.w	fp, r7
 801aa04:	4372      	muls	r2, r6
 801aa06:	1c56      	adds	r6, r2, #1
 801aa08:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801aa0c:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801aa10:	1212      	asrs	r2, r2, #8
 801aa12:	f815 9006 	ldrb.w	r9, [r5, r6]
 801aa16:	fa1f fa82 	uxth.w	sl, r2
 801aa1a:	43d2      	mvns	r2, r2
 801aa1c:	fb1b fb0a 	smulbb	fp, fp, sl
 801aa20:	b2d2      	uxtb	r2, r2
 801aa22:	fb09 b902 	mla	r9, r9, r2, fp
 801aa26:	fa1f f989 	uxth.w	r9, r9
 801aa2a:	f109 0b01 	add.w	fp, r9, #1
 801aa2e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801aa32:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801aa36:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801aa3a:	fb1b fb0a 	smulbb	fp, fp, sl
 801aa3e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801aa42:	fb17 fa0a 	smulbb	sl, r7, sl
 801aa46:	f805 9006 	strb.w	r9, [r5, r6]
 801aa4a:	442e      	add	r6, r5
 801aa4c:	78b7      	ldrb	r7, [r6, #2]
 801aa4e:	f896 9001 	ldrb.w	r9, [r6, #1]
 801aa52:	fb07 aa02 	mla	sl, r7, r2, sl
 801aa56:	fb09 b902 	mla	r9, r9, r2, fp
 801aa5a:	fa1f fa8a 	uxth.w	sl, sl
 801aa5e:	fa1f f989 	uxth.w	r9, r9
 801aa62:	f10a 0701 	add.w	r7, sl, #1
 801aa66:	f109 0b01 	add.w	fp, r9, #1
 801aa6a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801aa6e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801aa72:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801aa76:	ea4f 2929 	mov.w	r9, r9, asr #8
 801aa7a:	f886 a002 	strb.w	sl, [r6, #2]
 801aa7e:	f886 9001 	strb.w	r9, [r6, #1]
 801aa82:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801aa84:	4474      	add	r4, lr
 801aa86:	f108 0801 	add.w	r8, r8, #1
 801aa8a:	4410      	add	r0, r2
 801aa8c:	e760      	b.n	801a950 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801aa8e:	b005      	add	sp, #20
 801aa90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801aa94 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801aa94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa98:	b085      	sub	sp, #20
 801aa9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801aa9e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801aaa0:	9203      	str	r2, [sp, #12]
 801aaa2:	6868      	ldr	r0, [r5, #4]
 801aaa4:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801aaa8:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801aaac:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801aab0:	fb00 2404 	mla	r4, r0, r4, r2
 801aab4:	682a      	ldr	r2, [r5, #0]
 801aab6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801aaba:	4414      	add	r4, r2
 801aabc:	f8dc 2000 	ldr.w	r2, [ip]
 801aac0:	9201      	str	r2, [sp, #4]
 801aac2:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801aac6:	3204      	adds	r2, #4
 801aac8:	9202      	str	r2, [sp, #8]
 801aaca:	2900      	cmp	r1, #0
 801aacc:	dc03      	bgt.n	801aad6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801aace:	9a03      	ldr	r2, [sp, #12]
 801aad0:	2a00      	cmp	r2, #0
 801aad2:	f340 8137 	ble.w	801ad44 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801aad6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801aad8:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801aadc:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801aae0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801aae2:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801aae6:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801aaea:	2b00      	cmp	r3, #0
 801aaec:	dd0d      	ble.n	801ab0a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801aaee:	1405      	asrs	r5, r0, #16
 801aaf0:	d405      	bmi.n	801aafe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801aaf2:	4545      	cmp	r5, r8
 801aaf4:	da03      	bge.n	801aafe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801aaf6:	1415      	asrs	r5, r2, #16
 801aaf8:	d401      	bmi.n	801aafe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801aafa:	42bd      	cmp	r5, r7
 801aafc:	db06      	blt.n	801ab0c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801aafe:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801ab00:	4470      	add	r0, lr
 801ab02:	3b01      	subs	r3, #1
 801ab04:	3403      	adds	r4, #3
 801ab06:	442a      	add	r2, r5
 801ab08:	e7ef      	b.n	801aaea <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801ab0a:	d070      	beq.n	801abee <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801ab0c:	1e5d      	subs	r5, r3, #1
 801ab0e:	fb0e 0605 	mla	r6, lr, r5, r0
 801ab12:	1436      	asrs	r6, r6, #16
 801ab14:	d462      	bmi.n	801abdc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801ab16:	4546      	cmp	r6, r8
 801ab18:	da60      	bge.n	801abdc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801ab1a:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801ab1c:	fb06 2505 	mla	r5, r6, r5, r2
 801ab20:	142d      	asrs	r5, r5, #16
 801ab22:	d45b      	bmi.n	801abdc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801ab24:	42bd      	cmp	r5, r7
 801ab26:	da59      	bge.n	801abdc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801ab28:	1ce5      	adds	r5, r4, #3
 801ab2a:	469a      	mov	sl, r3
 801ab2c:	f1ba 0f00 	cmp.w	sl, #0
 801ab30:	dd58      	ble.n	801abe4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801ab32:	1416      	asrs	r6, r2, #16
 801ab34:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801ab38:	1407      	asrs	r7, r0, #16
 801ab3a:	46b1      	mov	r9, r6
 801ab3c:	9e01      	ldr	r6, [sp, #4]
 801ab3e:	fb08 6609 	mla	r6, r8, r9, r6
 801ab42:	5df6      	ldrb	r6, [r6, r7]
 801ab44:	9f02      	ldr	r7, [sp, #8]
 801ab46:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801ab4a:	0e37      	lsrs	r7, r6, #24
 801ab4c:	2fff      	cmp	r7, #255	@ 0xff
 801ab4e:	f000 80f0 	beq.w	801ad32 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801ab52:	fa5f f887 	uxtb.w	r8, r7
 801ab56:	b3d7      	cbz	r7, 801abce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801ab58:	fa1f f788 	uxth.w	r7, r8
 801ab5c:	ea6f 0808 	mvn.w	r8, r8
 801ab60:	fa5f fb86 	uxtb.w	fp, r6
 801ab64:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801ab68:	fa5f f888 	uxtb.w	r8, r8
 801ab6c:	fb1b fb07 	smulbb	fp, fp, r7
 801ab70:	fb09 b908 	mla	r9, r9, r8, fp
 801ab74:	fa1f f989 	uxth.w	r9, r9
 801ab78:	f109 0b01 	add.w	fp, r9, #1
 801ab7c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ab80:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801ab84:	fb1b fb08 	smulbb	fp, fp, r8
 801ab88:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ab8c:	f805 9c03 	strb.w	r9, [r5, #-3]
 801ab90:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801ab94:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801ab98:	fb09 b907 	mla	r9, r9, r7, fp
 801ab9c:	fa1f f989 	uxth.w	r9, r9
 801aba0:	f109 0b01 	add.w	fp, r9, #1
 801aba4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801aba8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801abac:	f805 9c02 	strb.w	r9, [r5, #-2]
 801abb0:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801abb4:	fb19 f808 	smulbb	r8, r9, r8
 801abb8:	fb06 8607 	mla	r6, r6, r7, r8
 801abbc:	b2b6      	uxth	r6, r6
 801abbe:	f106 0801 	add.w	r8, r6, #1
 801abc2:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801abc6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801abca:	f805 8c01 	strb.w	r8, [r5, #-1]
 801abce:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801abd0:	4470      	add	r0, lr
 801abd2:	3503      	adds	r5, #3
 801abd4:	f10a 3aff 	add.w	sl, sl, #4294967295
 801abd8:	4432      	add	r2, r6
 801abda:	e7a7      	b.n	801ab2c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801abdc:	2600      	movs	r6, #0
 801abde:	1b9d      	subs	r5, r3, r6
 801abe0:	2d00      	cmp	r5, #0
 801abe2:	dc3b      	bgt.n	801ac5c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801abe4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801abe8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801abec:	441c      	add	r4, r3
 801abee:	2900      	cmp	r1, #0
 801abf0:	f340 80a8 	ble.w	801ad44 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801abf4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801abf8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801abfa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801abfe:	3901      	subs	r1, #1
 801ac00:	eeb0 6a62 	vmov.f32	s12, s5
 801ac04:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ac08:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ac0c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ac10:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801ac14:	eeb0 6a43 	vmov.f32	s12, s6
 801ac18:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ac1c:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801ac20:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ac24:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ac28:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ac2c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ac30:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ac34:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ac38:	ee12 2a90 	vmov	r2, s5
 801ac3c:	eef0 2a47 	vmov.f32	s5, s14
 801ac40:	fb92 fef3 	sdiv	lr, r2, r3
 801ac44:	ee13 2a10 	vmov	r2, s6
 801ac48:	eeb0 3a67 	vmov.f32	s6, s15
 801ac4c:	fb92 f3f3 	sdiv	r3, r2, r3
 801ac50:	9a03      	ldr	r2, [sp, #12]
 801ac52:	9312      	str	r3, [sp, #72]	@ 0x48
 801ac54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ac56:	bf08      	it	eq
 801ac58:	4613      	moveq	r3, r2
 801ac5a:	e736      	b.n	801aaca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801ac5c:	ea5f 4820 	movs.w	r8, r0, asr #16
 801ac60:	d457      	bmi.n	801ad12 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ac62:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801ac66:	4547      	cmp	r7, r8
 801ac68:	dd53      	ble.n	801ad12 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ac6a:	ea5f 4922 	movs.w	r9, r2, asr #16
 801ac6e:	d450      	bmi.n	801ad12 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ac70:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801ac74:	454d      	cmp	r5, r9
 801ac76:	dd4c      	ble.n	801ad12 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ac78:	9d01      	ldr	r5, [sp, #4]
 801ac7a:	b23f      	sxth	r7, r7
 801ac7c:	fb09 5707 	mla	r7, r9, r7, r5
 801ac80:	f817 5008 	ldrb.w	r5, [r7, r8]
 801ac84:	9f02      	ldr	r7, [sp, #8]
 801ac86:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801ac8a:	0e2f      	lsrs	r7, r5, #24
 801ac8c:	2fff      	cmp	r7, #255	@ 0xff
 801ac8e:	d045      	beq.n	801ad1c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801ac90:	fa5f f987 	uxtb.w	r9, r7
 801ac94:	b3ef      	cbz	r7, 801ad12 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ac96:	fa1f f889 	uxth.w	r8, r9
 801ac9a:	ea6f 0909 	mvn.w	r9, r9
 801ac9e:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801aca2:	fa5f fb85 	uxtb.w	fp, r5
 801aca6:	f814 a007 	ldrb.w	sl, [r4, r7]
 801acaa:	fa5f f989 	uxtb.w	r9, r9
 801acae:	fb1b fb08 	smulbb	fp, fp, r8
 801acb2:	fb0a ba09 	mla	sl, sl, r9, fp
 801acb6:	fa1f fa8a 	uxth.w	sl, sl
 801acba:	f10a 0b01 	add.w	fp, sl, #1
 801acbe:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801acc2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801acc6:	f804 a007 	strb.w	sl, [r4, r7]
 801acca:	4427      	add	r7, r4
 801accc:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801acd0:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801acd4:	f897 b001 	ldrb.w	fp, [r7, #1]
 801acd8:	fb1b fb09 	smulbb	fp, fp, r9
 801acdc:	fb0a ba08 	mla	sl, sl, r8, fp
 801ace0:	fa1f fa8a 	uxth.w	sl, sl
 801ace4:	f10a 0b01 	add.w	fp, sl, #1
 801ace8:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801acec:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801acf0:	f887 a001 	strb.w	sl, [r7, #1]
 801acf4:	f897 a002 	ldrb.w	sl, [r7, #2]
 801acf8:	fb1a f909 	smulbb	r9, sl, r9
 801acfc:	fb05 9508 	mla	r5, r5, r8, r9
 801ad00:	b2ad      	uxth	r5, r5
 801ad02:	f105 0901 	add.w	r9, r5, #1
 801ad06:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801ad0a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ad0e:	f887 9002 	strb.w	r9, [r7, #2]
 801ad12:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801ad14:	4470      	add	r0, lr
 801ad16:	3601      	adds	r6, #1
 801ad18:	442a      	add	r2, r5
 801ad1a:	e760      	b.n	801abde <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801ad1c:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801ad20:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801ad24:	55e5      	strb	r5, [r4, r7]
 801ad26:	4427      	add	r7, r4
 801ad28:	0c2d      	lsrs	r5, r5, #16
 801ad2a:	f887 8001 	strb.w	r8, [r7, #1]
 801ad2e:	70bd      	strb	r5, [r7, #2]
 801ad30:	e7ef      	b.n	801ad12 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ad32:	0a37      	lsrs	r7, r6, #8
 801ad34:	f805 6c03 	strb.w	r6, [r5, #-3]
 801ad38:	0c36      	lsrs	r6, r6, #16
 801ad3a:	f805 7c02 	strb.w	r7, [r5, #-2]
 801ad3e:	f805 6c01 	strb.w	r6, [r5, #-1]
 801ad42:	e744      	b.n	801abce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801ad44:	b005      	add	sp, #20
 801ad46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ad4a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ad4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad4e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801ad50:	9201      	str	r2, [sp, #4]
 801ad52:	6870      	ldr	r0, [r6, #4]
 801ad54:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 801ad58:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 801ad5c:	fa1f fe85 	uxth.w	lr, r5
 801ad60:	43ed      	mvns	r5, r5
 801ad62:	f8dc 8000 	ldr.w	r8, [ip]
 801ad66:	b2ed      	uxtb	r5, r5
 801ad68:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801ad6c:	fb00 2404 	mla	r4, r0, r4, r2
 801ad70:	6832      	ldr	r2, [r6, #0]
 801ad72:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ad76:	4414      	add	r4, r2
 801ad78:	2900      	cmp	r1, #0
 801ad7a:	dc03      	bgt.n	801ad84 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801ad7c:	9a01      	ldr	r2, [sp, #4]
 801ad7e:	2a00      	cmp	r2, #0
 801ad80:	f340 810d 	ble.w	801af9e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801ad84:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ad86:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801ad8a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801ad8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ad90:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801ad94:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801ad98:	2b00      	cmp	r3, #0
 801ad9a:	dd0e      	ble.n	801adba <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ad9c:	1406      	asrs	r6, r0, #16
 801ad9e:	d405      	bmi.n	801adac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801ada0:	4556      	cmp	r6, sl
 801ada2:	da03      	bge.n	801adac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801ada4:	1416      	asrs	r6, r2, #16
 801ada6:	d401      	bmi.n	801adac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801ada8:	454e      	cmp	r6, r9
 801adaa:	db07      	blt.n	801adbc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801adac:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801adae:	3b01      	subs	r3, #1
 801adb0:	3403      	adds	r4, #3
 801adb2:	4430      	add	r0, r6
 801adb4:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801adb6:	4432      	add	r2, r6
 801adb8:	e7ee      	b.n	801ad98 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801adba:	d060      	beq.n	801ae7e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801adbc:	1e5e      	subs	r6, r3, #1
 801adbe:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801adc0:	fb07 0706 	mla	r7, r7, r6, r0
 801adc4:	143f      	asrs	r7, r7, #16
 801adc6:	d451      	bmi.n	801ae6c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801adc8:	4557      	cmp	r7, sl
 801adca:	da4f      	bge.n	801ae6c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801adcc:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801adce:	fb07 2606 	mla	r6, r7, r6, r2
 801add2:	1436      	asrs	r6, r6, #16
 801add4:	d44a      	bmi.n	801ae6c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801add6:	454e      	cmp	r6, r9
 801add8:	da48      	bge.n	801ae6c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801adda:	1ce6      	adds	r6, r4, #3
 801addc:	4699      	mov	r9, r3
 801adde:	f1b9 0f00 	cmp.w	r9, #0
 801ade2:	f106 0603 	add.w	r6, r6, #3
 801ade6:	dd45      	ble.n	801ae74 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801ade8:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801adec:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801adf0:	1417      	asrs	r7, r2, #16
 801adf2:	f109 39ff 	add.w	r9, r9, #4294967295
 801adf6:	fb0b a707 	mla	r7, fp, r7, sl
 801adfa:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801adfe:	fb1b fb05 	smulbb	fp, fp, r5
 801ae02:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ae06:	eb08 0a07 	add.w	sl, r8, r7
 801ae0a:	f818 7007 	ldrb.w	r7, [r8, r7]
 801ae0e:	fb07 b70e 	mla	r7, r7, lr, fp
 801ae12:	b2bf      	uxth	r7, r7
 801ae14:	f107 0b01 	add.w	fp, r7, #1
 801ae18:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801ae1c:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801ae20:	fb1b fb05 	smulbb	fp, fp, r5
 801ae24:	123f      	asrs	r7, r7, #8
 801ae26:	f806 7c06 	strb.w	r7, [r6, #-6]
 801ae2a:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801ae2e:	fb07 b70e 	mla	r7, r7, lr, fp
 801ae32:	b2bf      	uxth	r7, r7
 801ae34:	f107 0b01 	add.w	fp, r7, #1
 801ae38:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801ae3c:	123f      	asrs	r7, r7, #8
 801ae3e:	f806 7c05 	strb.w	r7, [r6, #-5]
 801ae42:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801ae46:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801ae4a:	fb1a fa05 	smulbb	sl, sl, r5
 801ae4e:	fb07 a70e 	mla	r7, r7, lr, sl
 801ae52:	b2bf      	uxth	r7, r7
 801ae54:	f107 0a01 	add.w	sl, r7, #1
 801ae58:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801ae5c:	123f      	asrs	r7, r7, #8
 801ae5e:	f806 7c04 	strb.w	r7, [r6, #-4]
 801ae62:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801ae64:	4438      	add	r0, r7
 801ae66:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801ae68:	443a      	add	r2, r7
 801ae6a:	e7b8      	b.n	801adde <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801ae6c:	2700      	movs	r7, #0
 801ae6e:	1bde      	subs	r6, r3, r7
 801ae70:	2e00      	cmp	r6, #0
 801ae72:	dc3f      	bgt.n	801aef4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801ae74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ae78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ae7c:	441c      	add	r4, r3
 801ae7e:	2900      	cmp	r1, #0
 801ae80:	f340 808d 	ble.w	801af9e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801ae84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ae88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ae8a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ae8e:	3901      	subs	r1, #1
 801ae90:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ae94:	eef0 6a62 	vmov.f32	s13, s5
 801ae98:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ae9c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801aea0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801aea4:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 801aea8:	eef0 6a43 	vmov.f32	s13, s6
 801aeac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801aeb0:	edcd 6a0e 	vstr	s13, [sp, #56]	@ 0x38
 801aeb4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801aeb8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801aebc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801aec0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801aec4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801aec8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801aecc:	ee12 2a90 	vmov	r2, s5
 801aed0:	eef0 2a47 	vmov.f32	s5, s14
 801aed4:	fb92 f3f3 	sdiv	r3, r2, r3
 801aed8:	ee13 2a10 	vmov	r2, s6
 801aedc:	930f      	str	r3, [sp, #60]	@ 0x3c
 801aede:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aee0:	eeb0 3a67 	vmov.f32	s6, s15
 801aee4:	fb92 f3f3 	sdiv	r3, r2, r3
 801aee8:	9a01      	ldr	r2, [sp, #4]
 801aeea:	9310      	str	r3, [sp, #64]	@ 0x40
 801aeec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aeee:	bf08      	it	eq
 801aef0:	4613      	moveq	r3, r2
 801aef2:	e741      	b.n	801ad78 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801aef4:	ea5f 4920 	movs.w	r9, r0, asr #16
 801aef8:	d44b      	bmi.n	801af92 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801aefa:	f8dc b008 	ldr.w	fp, [ip, #8]
 801aefe:	45cb      	cmp	fp, r9
 801af00:	dd47      	ble.n	801af92 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801af02:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801af06:	d444      	bmi.n	801af92 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801af08:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801af0c:	4556      	cmp	r6, sl
 801af0e:	dd40      	ble.n	801af92 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801af10:	fa0f f68b 	sxth.w	r6, fp
 801af14:	fb0a 9906 	mla	r9, sl, r6, r9
 801af18:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801af1c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801af20:	f814 b006 	ldrb.w	fp, [r4, r6]
 801af24:	fb1b fb05 	smulbb	fp, fp, r5
 801af28:	eb08 0a09 	add.w	sl, r8, r9
 801af2c:	f818 9009 	ldrb.w	r9, [r8, r9]
 801af30:	fb09 b90e 	mla	r9, r9, lr, fp
 801af34:	fa1f f989 	uxth.w	r9, r9
 801af38:	f109 0b01 	add.w	fp, r9, #1
 801af3c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801af40:	ea4f 2929 	mov.w	r9, r9, asr #8
 801af44:	f804 9006 	strb.w	r9, [r4, r6]
 801af48:	4426      	add	r6, r4
 801af4a:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801af4e:	f896 b001 	ldrb.w	fp, [r6, #1]
 801af52:	fb1b fb05 	smulbb	fp, fp, r5
 801af56:	fb09 b90e 	mla	r9, r9, lr, fp
 801af5a:	fa1f f989 	uxth.w	r9, r9
 801af5e:	f109 0b01 	add.w	fp, r9, #1
 801af62:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801af66:	ea4f 2929 	mov.w	r9, r9, asr #8
 801af6a:	f886 9001 	strb.w	r9, [r6, #1]
 801af6e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801af72:	f896 a002 	ldrb.w	sl, [r6, #2]
 801af76:	fb1a fa05 	smulbb	sl, sl, r5
 801af7a:	fb09 a90e 	mla	r9, r9, lr, sl
 801af7e:	fa1f f989 	uxth.w	r9, r9
 801af82:	f109 0a01 	add.w	sl, r9, #1
 801af86:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801af8a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801af8e:	f886 9002 	strb.w	r9, [r6, #2]
 801af92:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801af94:	3701      	adds	r7, #1
 801af96:	4430      	add	r0, r6
 801af98:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801af9a:	4432      	add	r2, r6
 801af9c:	e767      	b.n	801ae6e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801af9e:	b003      	add	sp, #12
 801afa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801afa4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801afa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afa8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801afaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801afae:	9201      	str	r2, [sp, #4]
 801afb0:	6868      	ldr	r0, [r5, #4]
 801afb2:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801afb4:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801afb8:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 801afbc:	fb00 2404 	mla	r4, r0, r4, r2
 801afc0:	682a      	ldr	r2, [r5, #0]
 801afc2:	f8d7 8000 	ldr.w	r8, [r7]
 801afc6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801afca:	4414      	add	r4, r2
 801afcc:	2900      	cmp	r1, #0
 801afce:	dc03      	bgt.n	801afd8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801afd0:	9a01      	ldr	r2, [sp, #4]
 801afd2:	2a00      	cmp	r2, #0
 801afd4:	f340 80af 	ble.w	801b136 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801afd8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801afda:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801afde:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801afe2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801afe4:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801afe8:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801afec:	2b00      	cmp	r3, #0
 801afee:	dd0c      	ble.n	801b00a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801aff0:	1405      	asrs	r5, r0, #16
 801aff2:	d405      	bmi.n	801b000 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801aff4:	4555      	cmp	r5, sl
 801aff6:	da03      	bge.n	801b000 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801aff8:	1415      	asrs	r5, r2, #16
 801affa:	d401      	bmi.n	801b000 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801affc:	454d      	cmp	r5, r9
 801affe:	db05      	blt.n	801b00c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b000:	4470      	add	r0, lr
 801b002:	4462      	add	r2, ip
 801b004:	3b01      	subs	r3, #1
 801b006:	3403      	adds	r4, #3
 801b008:	e7f0      	b.n	801afec <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801b00a:	d038      	beq.n	801b07e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801b00c:	1e5d      	subs	r5, r3, #1
 801b00e:	fb0e 0605 	mla	r6, lr, r5, r0
 801b012:	1436      	asrs	r6, r6, #16
 801b014:	d42a      	bmi.n	801b06c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801b016:	4556      	cmp	r6, sl
 801b018:	da28      	bge.n	801b06c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801b01a:	fb0c 2505 	mla	r5, ip, r5, r2
 801b01e:	142d      	asrs	r5, r5, #16
 801b020:	d424      	bmi.n	801b06c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801b022:	454d      	cmp	r5, r9
 801b024:	da22      	bge.n	801b06c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801b026:	1ce6      	adds	r6, r4, #3
 801b028:	4699      	mov	r9, r3
 801b02a:	f1b9 0f00 	cmp.w	r9, #0
 801b02e:	f106 0603 	add.w	r6, r6, #3
 801b032:	dd1f      	ble.n	801b074 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801b034:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801b038:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801b03c:	1415      	asrs	r5, r2, #16
 801b03e:	4470      	add	r0, lr
 801b040:	4462      	add	r2, ip
 801b042:	f109 39ff 	add.w	r9, r9, #4294967295
 801b046:	fb0b a505 	mla	r5, fp, r5, sl
 801b04a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b04e:	eb08 0a05 	add.w	sl, r8, r5
 801b052:	f818 5005 	ldrb.w	r5, [r8, r5]
 801b056:	f806 5c06 	strb.w	r5, [r6, #-6]
 801b05a:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801b05e:	f806 5c05 	strb.w	r5, [r6, #-5]
 801b062:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801b066:	f806 5c04 	strb.w	r5, [r6, #-4]
 801b06a:	e7de      	b.n	801b02a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801b06c:	2600      	movs	r6, #0
 801b06e:	1b9d      	subs	r5, r3, r6
 801b070:	2d00      	cmp	r5, #0
 801b072:	dc38      	bgt.n	801b0e6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801b074:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b078:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b07c:	441c      	add	r4, r3
 801b07e:	2900      	cmp	r1, #0
 801b080:	dd59      	ble.n	801b136 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801b082:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b086:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b088:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b08c:	3901      	subs	r1, #1
 801b08e:	eeb0 6a62 	vmov.f32	s12, s5
 801b092:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b096:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b09a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b09e:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801b0a2:	eeb0 6a43 	vmov.f32	s12, s6
 801b0a6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b0aa:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801b0ae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b0b2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b0b6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b0ba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b0be:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b0c2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b0c6:	ee12 2a90 	vmov	r2, s5
 801b0ca:	eef0 2a47 	vmov.f32	s5, s14
 801b0ce:	fb92 fef3 	sdiv	lr, r2, r3
 801b0d2:	ee13 2a10 	vmov	r2, s6
 801b0d6:	eeb0 3a67 	vmov.f32	s6, s15
 801b0da:	fb92 fcf3 	sdiv	ip, r2, r3
 801b0de:	9a01      	ldr	r2, [sp, #4]
 801b0e0:	bf08      	it	eq
 801b0e2:	4613      	moveq	r3, r2
 801b0e4:	e772      	b.n	801afcc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801b0e6:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b0ea:	d420      	bmi.n	801b12e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801b0ec:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801b0f0:	45cb      	cmp	fp, r9
 801b0f2:	dd1c      	ble.n	801b12e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801b0f4:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801b0f8:	d419      	bmi.n	801b12e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801b0fa:	68fd      	ldr	r5, [r7, #12]
 801b0fc:	4555      	cmp	r5, sl
 801b0fe:	dd16      	ble.n	801b12e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801b100:	fa0f f58b 	sxth.w	r5, fp
 801b104:	fb0a 9505 	mla	r5, sl, r5, r9
 801b108:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b10c:	f818 9005 	ldrb.w	r9, [r8, r5]
 801b110:	eb08 0b05 	add.w	fp, r8, r5
 801b114:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801b118:	f804 9005 	strb.w	r9, [r4, r5]
 801b11c:	4425      	add	r5, r4
 801b11e:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801b122:	f885 9001 	strb.w	r9, [r5, #1]
 801b126:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801b12a:	f885 9002 	strb.w	r9, [r5, #2]
 801b12e:	4470      	add	r0, lr
 801b130:	4462      	add	r2, ip
 801b132:	3601      	adds	r6, #1
 801b134:	e79b      	b.n	801b06e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801b136:	b003      	add	sp, #12
 801b138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b13c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b140:	b085      	sub	sp, #20
 801b142:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b146:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b148:	9202      	str	r2, [sp, #8]
 801b14a:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801b14e:	6860      	ldr	r0, [r4, #4]
 801b150:	9203      	str	r2, [sp, #12]
 801b152:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801b156:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801b15a:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801b15e:	fb00 2505 	mla	r5, r0, r5, r2
 801b162:	6822      	ldr	r2, [r4, #0]
 801b164:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b168:	4415      	add	r5, r2
 801b16a:	f8dc 2000 	ldr.w	r2, [ip]
 801b16e:	9201      	str	r2, [sp, #4]
 801b170:	2900      	cmp	r1, #0
 801b172:	dc03      	bgt.n	801b17c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801b174:	9a02      	ldr	r2, [sp, #8]
 801b176:	2a00      	cmp	r2, #0
 801b178:	f340 8122 	ble.w	801b3c0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801b17c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b17e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801b182:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801b186:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b188:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801b18c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801b190:	2b00      	cmp	r3, #0
 801b192:	dd0d      	ble.n	801b1b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801b194:	1422      	asrs	r2, r4, #16
 801b196:	d405      	bmi.n	801b1a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b198:	4542      	cmp	r2, r8
 801b19a:	da03      	bge.n	801b1a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b19c:	1402      	asrs	r2, r0, #16
 801b19e:	d401      	bmi.n	801b1a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b1a0:	42ba      	cmp	r2, r7
 801b1a2:	db06      	blt.n	801b1b2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b1a4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b1a6:	4474      	add	r4, lr
 801b1a8:	3b01      	subs	r3, #1
 801b1aa:	3503      	adds	r5, #3
 801b1ac:	4410      	add	r0, r2
 801b1ae:	e7ef      	b.n	801b190 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801b1b0:	d072      	beq.n	801b298 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801b1b2:	1e5a      	subs	r2, r3, #1
 801b1b4:	fb0e 4602 	mla	r6, lr, r2, r4
 801b1b8:	1436      	asrs	r6, r6, #16
 801b1ba:	d462      	bmi.n	801b282 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801b1bc:	4546      	cmp	r6, r8
 801b1be:	da60      	bge.n	801b282 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801b1c0:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801b1c2:	fb06 0202 	mla	r2, r6, r2, r0
 801b1c6:	1412      	asrs	r2, r2, #16
 801b1c8:	d45b      	bmi.n	801b282 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801b1ca:	42ba      	cmp	r2, r7
 801b1cc:	da59      	bge.n	801b282 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801b1ce:	1cef      	adds	r7, r5, #3
 801b1d0:	4699      	mov	r9, r3
 801b1d2:	f1b9 0f00 	cmp.w	r9, #0
 801b1d6:	dd5a      	ble.n	801b28e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b1d8:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801b1dc:	1426      	asrs	r6, r4, #16
 801b1de:	1402      	asrs	r2, r0, #16
 801b1e0:	fb08 6202 	mla	r2, r8, r2, r6
 801b1e4:	9e01      	ldr	r6, [sp, #4]
 801b1e6:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801b1ea:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801b1ee:	d041      	beq.n	801b274 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801b1f0:	9a03      	ldr	r2, [sp, #12]
 801b1f2:	fa5f fb86 	uxtb.w	fp, r6
 801b1f6:	fb02 f808 	mul.w	r8, r2, r8
 801b1fa:	f108 0201 	add.w	r2, r8, #1
 801b1fe:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801b202:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801b206:	1212      	asrs	r2, r2, #8
 801b208:	fa1f fa82 	uxth.w	sl, r2
 801b20c:	43d2      	mvns	r2, r2
 801b20e:	fb1b fb0a 	smulbb	fp, fp, sl
 801b212:	b2d2      	uxtb	r2, r2
 801b214:	fb08 b802 	mla	r8, r8, r2, fp
 801b218:	fa1f f888 	uxth.w	r8, r8
 801b21c:	f108 0b01 	add.w	fp, r8, #1
 801b220:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801b224:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801b228:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801b22c:	fb1b fb0a 	smulbb	fp, fp, sl
 801b230:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b234:	fb16 fa0a 	smulbb	sl, r6, sl
 801b238:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801b23c:	f807 8c03 	strb.w	r8, [r7, #-3]
 801b240:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801b244:	fb06 aa02 	mla	sl, r6, r2, sl
 801b248:	fb08 b802 	mla	r8, r8, r2, fp
 801b24c:	fa1f fa8a 	uxth.w	sl, sl
 801b250:	fa1f f888 	uxth.w	r8, r8
 801b254:	f10a 0601 	add.w	r6, sl, #1
 801b258:	f108 0b01 	add.w	fp, r8, #1
 801b25c:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801b260:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801b264:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b268:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b26c:	f807 ac01 	strb.w	sl, [r7, #-1]
 801b270:	f807 8c02 	strb.w	r8, [r7, #-2]
 801b274:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b276:	4474      	add	r4, lr
 801b278:	3703      	adds	r7, #3
 801b27a:	f109 39ff 	add.w	r9, r9, #4294967295
 801b27e:	4410      	add	r0, r2
 801b280:	e7a7      	b.n	801b1d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b282:	f04f 0800 	mov.w	r8, #0
 801b286:	eba3 0208 	sub.w	r2, r3, r8
 801b28a:	2a00      	cmp	r2, #0
 801b28c:	dc3b      	bgt.n	801b306 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801b28e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b292:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b296:	441d      	add	r5, r3
 801b298:	2900      	cmp	r1, #0
 801b29a:	f340 8091 	ble.w	801b3c0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801b29e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b2a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b2a4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b2a8:	3901      	subs	r1, #1
 801b2aa:	eeb0 6a62 	vmov.f32	s12, s5
 801b2ae:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b2b2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b2b6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b2ba:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801b2be:	eeb0 6a43 	vmov.f32	s12, s6
 801b2c2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b2c6:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801b2ca:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b2ce:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b2d2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b2d6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b2da:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b2de:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b2e2:	ee12 2a90 	vmov	r2, s5
 801b2e6:	eef0 2a47 	vmov.f32	s5, s14
 801b2ea:	fb92 fef3 	sdiv	lr, r2, r3
 801b2ee:	ee13 2a10 	vmov	r2, s6
 801b2f2:	eeb0 3a67 	vmov.f32	s6, s15
 801b2f6:	fb92 f3f3 	sdiv	r3, r2, r3
 801b2fa:	9a02      	ldr	r2, [sp, #8]
 801b2fc:	9312      	str	r3, [sp, #72]	@ 0x48
 801b2fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b300:	bf08      	it	eq
 801b302:	4613      	moveq	r3, r2
 801b304:	e734      	b.n	801b170 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801b306:	1427      	asrs	r7, r4, #16
 801b308:	d454      	bmi.n	801b3b4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801b30a:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801b30e:	42be      	cmp	r6, r7
 801b310:	dd50      	ble.n	801b3b4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801b312:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b316:	d44d      	bmi.n	801b3b4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801b318:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801b31c:	454a      	cmp	r2, r9
 801b31e:	dd49      	ble.n	801b3b4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801b320:	b236      	sxth	r6, r6
 801b322:	9a01      	ldr	r2, [sp, #4]
 801b324:	fb09 7606 	mla	r6, r9, r6, r7
 801b328:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801b32c:	0e3a      	lsrs	r2, r7, #24
 801b32e:	d041      	beq.n	801b3b4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801b330:	9e03      	ldr	r6, [sp, #12]
 801b332:	fa5f fb87 	uxtb.w	fp, r7
 801b336:	4372      	muls	r2, r6
 801b338:	1c56      	adds	r6, r2, #1
 801b33a:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801b33e:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801b342:	1212      	asrs	r2, r2, #8
 801b344:	f815 9006 	ldrb.w	r9, [r5, r6]
 801b348:	fa1f fa82 	uxth.w	sl, r2
 801b34c:	43d2      	mvns	r2, r2
 801b34e:	fb1b fb0a 	smulbb	fp, fp, sl
 801b352:	b2d2      	uxtb	r2, r2
 801b354:	fb09 b902 	mla	r9, r9, r2, fp
 801b358:	fa1f f989 	uxth.w	r9, r9
 801b35c:	f109 0b01 	add.w	fp, r9, #1
 801b360:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b364:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801b368:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801b36c:	fb1b fb0a 	smulbb	fp, fp, sl
 801b370:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b374:	fb17 fa0a 	smulbb	sl, r7, sl
 801b378:	f805 9006 	strb.w	r9, [r5, r6]
 801b37c:	442e      	add	r6, r5
 801b37e:	78b7      	ldrb	r7, [r6, #2]
 801b380:	f896 9001 	ldrb.w	r9, [r6, #1]
 801b384:	fb07 aa02 	mla	sl, r7, r2, sl
 801b388:	fb09 b902 	mla	r9, r9, r2, fp
 801b38c:	fa1f fa8a 	uxth.w	sl, sl
 801b390:	fa1f f989 	uxth.w	r9, r9
 801b394:	f10a 0701 	add.w	r7, sl, #1
 801b398:	f109 0b01 	add.w	fp, r9, #1
 801b39c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b3a0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b3a4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b3a8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b3ac:	f886 a002 	strb.w	sl, [r6, #2]
 801b3b0:	f886 9001 	strb.w	r9, [r6, #1]
 801b3b4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b3b6:	4474      	add	r4, lr
 801b3b8:	f108 0801 	add.w	r8, r8, #1
 801b3bc:	4410      	add	r0, r2
 801b3be:	e762      	b.n	801b286 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801b3c0:	b005      	add	sp, #20
 801b3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b3c6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b3c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3ca:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801b3cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b3d0:	9201      	str	r2, [sp, #4]
 801b3d2:	6860      	ldr	r0, [r4, #4]
 801b3d4:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 801b3d8:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 801b3dc:	fb00 2505 	mla	r5, r0, r5, r2
 801b3e0:	6822      	ldr	r2, [r4, #0]
 801b3e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b3e6:	4415      	add	r5, r2
 801b3e8:	f8dc 2000 	ldr.w	r2, [ip]
 801b3ec:	9200      	str	r2, [sp, #0]
 801b3ee:	2900      	cmp	r1, #0
 801b3f0:	dc03      	bgt.n	801b3fa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801b3f2:	9a01      	ldr	r2, [sp, #4]
 801b3f4:	2a00      	cmp	r2, #0
 801b3f6:	f340 812b 	ble.w	801b650 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801b3fa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b3fc:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801b400:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801b404:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b406:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801b40a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801b40e:	2b00      	cmp	r3, #0
 801b410:	dd0e      	ble.n	801b430 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b412:	1422      	asrs	r2, r4, #16
 801b414:	d405      	bmi.n	801b422 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801b416:	4572      	cmp	r2, lr
 801b418:	da03      	bge.n	801b422 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801b41a:	1402      	asrs	r2, r0, #16
 801b41c:	d401      	bmi.n	801b422 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801b41e:	42ba      	cmp	r2, r7
 801b420:	db07      	blt.n	801b432 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801b422:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b424:	3b01      	subs	r3, #1
 801b426:	3503      	adds	r5, #3
 801b428:	4414      	add	r4, r2
 801b42a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b42c:	4410      	add	r0, r2
 801b42e:	e7ee      	b.n	801b40e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801b430:	d06f      	beq.n	801b512 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801b432:	1e5a      	subs	r2, r3, #1
 801b434:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801b436:	fb06 4602 	mla	r6, r6, r2, r4
 801b43a:	1436      	asrs	r6, r6, #16
 801b43c:	d45e      	bmi.n	801b4fc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801b43e:	4576      	cmp	r6, lr
 801b440:	da5c      	bge.n	801b4fc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801b442:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801b444:	fb06 0202 	mla	r2, r6, r2, r0
 801b448:	1412      	asrs	r2, r2, #16
 801b44a:	d457      	bmi.n	801b4fc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801b44c:	42ba      	cmp	r2, r7
 801b44e:	da55      	bge.n	801b4fc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801b450:	1cee      	adds	r6, r5, #3
 801b452:	469a      	mov	sl, r3
 801b454:	f1ba 0f00 	cmp.w	sl, #0
 801b458:	dd56      	ble.n	801b508 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801b45a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801b45e:	1427      	asrs	r7, r4, #16
 801b460:	1402      	asrs	r2, r0, #16
 801b462:	fb0e 7202 	mla	r2, lr, r2, r7
 801b466:	9f00      	ldr	r7, [sp, #0]
 801b468:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801b46c:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801b470:	d03c      	beq.n	801b4ec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801b472:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801b476:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801b47a:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801b47e:	fa5f f28e 	uxtb.w	r2, lr
 801b482:	b2ff      	uxtb	r7, r7
 801b484:	f000 80dd 	beq.w	801b642 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801b488:	fa1f f882 	uxth.w	r8, r2
 801b48c:	43d2      	mvns	r2, r2
 801b48e:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801b492:	fb17 f708 	smulbb	r7, r7, r8
 801b496:	b2d2      	uxtb	r2, r2
 801b498:	fb19 f908 	smulbb	r9, r9, r8
 801b49c:	fb0e 7702 	mla	r7, lr, r2, r7
 801b4a0:	fb1b f808 	smulbb	r8, fp, r8
 801b4a4:	b2bf      	uxth	r7, r7
 801b4a6:	f107 0e01 	add.w	lr, r7, #1
 801b4aa:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801b4ae:	123f      	asrs	r7, r7, #8
 801b4b0:	f806 7c03 	strb.w	r7, [r6, #-3]
 801b4b4:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801b4b8:	fb07 9902 	mla	r9, r7, r2, r9
 801b4bc:	fa1f f989 	uxth.w	r9, r9
 801b4c0:	f109 0701 	add.w	r7, r9, #1
 801b4c4:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801b4c8:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801b4cc:	fb07 8802 	mla	r8, r7, r2, r8
 801b4d0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b4d4:	fa1f f888 	uxth.w	r8, r8
 801b4d8:	f806 9c02 	strb.w	r9, [r6, #-2]
 801b4dc:	f108 0201 	add.w	r2, r8, #1
 801b4e0:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801b4e4:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b4e8:	f806 8c01 	strb.w	r8, [r6, #-1]
 801b4ec:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b4ee:	3603      	adds	r6, #3
 801b4f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b4f4:	4414      	add	r4, r2
 801b4f6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b4f8:	4410      	add	r0, r2
 801b4fa:	e7ab      	b.n	801b454 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801b4fc:	f04f 0e00 	mov.w	lr, #0
 801b500:	eba3 020e 	sub.w	r2, r3, lr
 801b504:	2a00      	cmp	r2, #0
 801b506:	dc3d      	bgt.n	801b584 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801b508:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b50c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b510:	441d      	add	r5, r3
 801b512:	2900      	cmp	r1, #0
 801b514:	f340 809c 	ble.w	801b650 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801b518:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b51c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b51e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b522:	3901      	subs	r1, #1
 801b524:	eeb0 6a62 	vmov.f32	s12, s5
 801b528:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b52c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b530:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b534:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801b538:	eeb0 6a43 	vmov.f32	s12, s6
 801b53c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b540:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801b544:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b548:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b54c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b550:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b554:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b558:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b55c:	ee12 2a90 	vmov	r2, s5
 801b560:	eef0 2a47 	vmov.f32	s5, s14
 801b564:	fb92 f3f3 	sdiv	r3, r2, r3
 801b568:	ee13 2a10 	vmov	r2, s6
 801b56c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b56e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b570:	eeb0 3a67 	vmov.f32	s6, s15
 801b574:	fb92 f3f3 	sdiv	r3, r2, r3
 801b578:	9a01      	ldr	r2, [sp, #4]
 801b57a:	9310      	str	r3, [sp, #64]	@ 0x40
 801b57c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b57e:	bf08      	it	eq
 801b580:	4613      	moveq	r3, r2
 801b582:	e734      	b.n	801b3ee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801b584:	1427      	asrs	r7, r4, #16
 801b586:	d44d      	bmi.n	801b624 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801b588:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801b58c:	42be      	cmp	r6, r7
 801b58e:	dd49      	ble.n	801b624 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801b590:	ea5f 4820 	movs.w	r8, r0, asr #16
 801b594:	d446      	bmi.n	801b624 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801b596:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801b59a:	4542      	cmp	r2, r8
 801b59c:	dd42      	ble.n	801b624 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801b59e:	b236      	sxth	r6, r6
 801b5a0:	9a00      	ldr	r2, [sp, #0]
 801b5a2:	fb08 7606 	mla	r6, r8, r6, r7
 801b5a6:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801b5aa:	0e3a      	lsrs	r2, r7, #24
 801b5ac:	d03a      	beq.n	801b624 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801b5ae:	2aff      	cmp	r2, #255	@ 0xff
 801b5b0:	b2d6      	uxtb	r6, r2
 801b5b2:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801b5b6:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801b5ba:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801b5be:	b2ff      	uxtb	r7, r7
 801b5c0:	d037      	beq.n	801b632 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801b5c2:	fa1f f986 	uxth.w	r9, r6
 801b5c6:	4472      	add	r2, lr
 801b5c8:	43f6      	mvns	r6, r6
 801b5ca:	f815 8002 	ldrb.w	r8, [r5, r2]
 801b5ce:	fb17 f709 	smulbb	r7, r7, r9
 801b5d2:	fb1a fa09 	smulbb	sl, sl, r9
 801b5d6:	b2f6      	uxtb	r6, r6
 801b5d8:	fb1b f909 	smulbb	r9, fp, r9
 801b5dc:	fb08 7706 	mla	r7, r8, r6, r7
 801b5e0:	b2bf      	uxth	r7, r7
 801b5e2:	f107 0801 	add.w	r8, r7, #1
 801b5e6:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801b5ea:	123f      	asrs	r7, r7, #8
 801b5ec:	54af      	strb	r7, [r5, r2]
 801b5ee:	442a      	add	r2, r5
 801b5f0:	7857      	ldrb	r7, [r2, #1]
 801b5f2:	fb07 aa06 	mla	sl, r7, r6, sl
 801b5f6:	fa1f fa8a 	uxth.w	sl, sl
 801b5fa:	f10a 0701 	add.w	r7, sl, #1
 801b5fe:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b602:	7897      	ldrb	r7, [r2, #2]
 801b604:	fb07 9906 	mla	r9, r7, r6, r9
 801b608:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b60c:	fa1f f989 	uxth.w	r9, r9
 801b610:	f882 a001 	strb.w	sl, [r2, #1]
 801b614:	f109 0601 	add.w	r6, r9, #1
 801b618:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801b61c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b620:	f882 9002 	strb.w	r9, [r2, #2]
 801b624:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b626:	f10e 0e01 	add.w	lr, lr, #1
 801b62a:	4414      	add	r4, r2
 801b62c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b62e:	4410      	add	r0, r2
 801b630:	e766      	b.n	801b500 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801b632:	4472      	add	r2, lr
 801b634:	54af      	strb	r7, [r5, r2]
 801b636:	442a      	add	r2, r5
 801b638:	f882 a001 	strb.w	sl, [r2, #1]
 801b63c:	f882 b002 	strb.w	fp, [r2, #2]
 801b640:	e7f0      	b.n	801b624 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801b642:	f806 7c03 	strb.w	r7, [r6, #-3]
 801b646:	f806 9c02 	strb.w	r9, [r6, #-2]
 801b64a:	f806 bc01 	strb.w	fp, [r6, #-1]
 801b64e:	e74d      	b.n	801b4ec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801b650:	b003      	add	sp, #12
 801b652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801b658 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b65c:	b087      	sub	sp, #28
 801b65e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b662:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801b664:	9204      	str	r2, [sp, #16]
 801b666:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801b66a:	6860      	ldr	r0, [r4, #4]
 801b66c:	9205      	str	r2, [sp, #20]
 801b66e:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801b672:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 801b676:	9101      	str	r1, [sp, #4]
 801b678:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 801b67c:	fb00 2505 	mla	r5, r0, r5, r2
 801b680:	6822      	ldr	r2, [r4, #0]
 801b682:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b686:	4415      	add	r5, r2
 801b688:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801b68c:	3201      	adds	r2, #1
 801b68e:	f022 0201 	bic.w	r2, r2, #1
 801b692:	9202      	str	r2, [sp, #8]
 801b694:	f8dc 2000 	ldr.w	r2, [ip]
 801b698:	9203      	str	r2, [sp, #12]
 801b69a:	9a01      	ldr	r2, [sp, #4]
 801b69c:	2a00      	cmp	r2, #0
 801b69e:	dc03      	bgt.n	801b6a8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801b6a0:	9a04      	ldr	r2, [sp, #16]
 801b6a2:	2a00      	cmp	r2, #0
 801b6a4:	f340 8135 	ble.w	801b912 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801b6a8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801b6aa:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801b6ae:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801b6b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b6b4:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801b6b8:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801b6bc:	2b00      	cmp	r3, #0
 801b6be:	dd0d      	ble.n	801b6dc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801b6c0:	1422      	asrs	r2, r4, #16
 801b6c2:	d405      	bmi.n	801b6d0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801b6c4:	4542      	cmp	r2, r8
 801b6c6:	da03      	bge.n	801b6d0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801b6c8:	1402      	asrs	r2, r0, #16
 801b6ca:	d401      	bmi.n	801b6d0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801b6cc:	42ba      	cmp	r2, r7
 801b6ce:	db06      	blt.n	801b6de <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801b6d0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801b6d2:	4474      	add	r4, lr
 801b6d4:	3b01      	subs	r3, #1
 801b6d6:	3503      	adds	r5, #3
 801b6d8:	4410      	add	r0, r2
 801b6da:	e7ef      	b.n	801b6bc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b6dc:	d077      	beq.n	801b7ce <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801b6de:	1e5a      	subs	r2, r3, #1
 801b6e0:	fb0e 4602 	mla	r6, lr, r2, r4
 801b6e4:	1436      	asrs	r6, r6, #16
 801b6e6:	d469      	bmi.n	801b7bc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b6e8:	4546      	cmp	r6, r8
 801b6ea:	da67      	bge.n	801b7bc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b6ec:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801b6ee:	fb06 0202 	mla	r2, r6, r2, r0
 801b6f2:	1412      	asrs	r2, r2, #16
 801b6f4:	d462      	bmi.n	801b7bc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b6f6:	42ba      	cmp	r2, r7
 801b6f8:	da60      	bge.n	801b7bc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b6fa:	1cee      	adds	r6, r5, #3
 801b6fc:	4699      	mov	r9, r3
 801b6fe:	f1b9 0f00 	cmp.w	r9, #0
 801b702:	dd5f      	ble.n	801b7c4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801b704:	1422      	asrs	r2, r4, #16
 801b706:	9902      	ldr	r1, [sp, #8]
 801b708:	1407      	asrs	r7, r0, #16
 801b70a:	fb01 2707 	mla	r7, r1, r7, r2
 801b70e:	9903      	ldr	r1, [sp, #12]
 801b710:	087a      	lsrs	r2, r7, #1
 801b712:	5c8a      	ldrb	r2, [r1, r2]
 801b714:	07f9      	lsls	r1, r7, #31
 801b716:	bf54      	ite	pl
 801b718:	f002 020f 	andpl.w	r2, r2, #15
 801b71c:	1112      	asrmi	r2, r2, #4
 801b71e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b722:	b2d2      	uxtb	r2, r2
 801b724:	2a00      	cmp	r2, #0
 801b726:	d042      	beq.n	801b7ae <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801b728:	497b      	ldr	r1, [pc, #492]	@ (801b918 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801b72a:	680f      	ldr	r7, [r1, #0]
 801b72c:	9905      	ldr	r1, [sp, #20]
 801b72e:	fa5f fb87 	uxtb.w	fp, r7
 801b732:	434a      	muls	r2, r1
 801b734:	f102 0801 	add.w	r8, r2, #1
 801b738:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801b73c:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801b740:	1212      	asrs	r2, r2, #8
 801b742:	fa1f fa82 	uxth.w	sl, r2
 801b746:	43d2      	mvns	r2, r2
 801b748:	fb1b fb0a 	smulbb	fp, fp, sl
 801b74c:	b2d2      	uxtb	r2, r2
 801b74e:	fb08 b802 	mla	r8, r8, r2, fp
 801b752:	fa1f f888 	uxth.w	r8, r8
 801b756:	f108 0b01 	add.w	fp, r8, #1
 801b75a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801b75e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801b762:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801b766:	fb1b fb0a 	smulbb	fp, fp, sl
 801b76a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b76e:	fb17 fa0a 	smulbb	sl, r7, sl
 801b772:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801b776:	f806 8c03 	strb.w	r8, [r6, #-3]
 801b77a:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801b77e:	fb07 aa02 	mla	sl, r7, r2, sl
 801b782:	fb08 b802 	mla	r8, r8, r2, fp
 801b786:	fa1f fa8a 	uxth.w	sl, sl
 801b78a:	fa1f f888 	uxth.w	r8, r8
 801b78e:	f10a 0701 	add.w	r7, sl, #1
 801b792:	f108 0b01 	add.w	fp, r8, #1
 801b796:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b79a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801b79e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b7a2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b7a6:	f806 ac01 	strb.w	sl, [r6, #-1]
 801b7aa:	f806 8c02 	strb.w	r8, [r6, #-2]
 801b7ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801b7b0:	4474      	add	r4, lr
 801b7b2:	3603      	adds	r6, #3
 801b7b4:	f109 39ff 	add.w	r9, r9, #4294967295
 801b7b8:	4410      	add	r0, r2
 801b7ba:	e7a0      	b.n	801b6fe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b7bc:	2700      	movs	r7, #0
 801b7be:	1bda      	subs	r2, r3, r7
 801b7c0:	2a00      	cmp	r2, #0
 801b7c2:	dc3e      	bgt.n	801b842 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801b7c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b7c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b7cc:	441d      	add	r5, r3
 801b7ce:	9b01      	ldr	r3, [sp, #4]
 801b7d0:	2b00      	cmp	r3, #0
 801b7d2:	f340 809e 	ble.w	801b912 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801b7d6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b7da:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b7dc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b7e0:	eeb0 6a62 	vmov.f32	s12, s5
 801b7e4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b7e8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b7ec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b7f0:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801b7f4:	eeb0 6a43 	vmov.f32	s12, s6
 801b7f8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b7fc:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801b800:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b804:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b808:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b80c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b810:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b814:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b818:	ee12 2a90 	vmov	r2, s5
 801b81c:	eef0 2a47 	vmov.f32	s5, s14
 801b820:	fb92 fef3 	sdiv	lr, r2, r3
 801b824:	ee13 2a10 	vmov	r2, s6
 801b828:	eeb0 3a67 	vmov.f32	s6, s15
 801b82c:	fb92 f3f3 	sdiv	r3, r2, r3
 801b830:	9314      	str	r3, [sp, #80]	@ 0x50
 801b832:	9b01      	ldr	r3, [sp, #4]
 801b834:	9a04      	ldr	r2, [sp, #16]
 801b836:	3b01      	subs	r3, #1
 801b838:	9301      	str	r3, [sp, #4]
 801b83a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b83c:	bf08      	it	eq
 801b83e:	4613      	moveq	r3, r2
 801b840:	e72b      	b.n	801b69a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801b842:	1426      	asrs	r6, r4, #16
 801b844:	d460      	bmi.n	801b908 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b846:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801b84a:	42b2      	cmp	r2, r6
 801b84c:	dd5c      	ble.n	801b908 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b84e:	ea5f 4820 	movs.w	r8, r0, asr #16
 801b852:	d459      	bmi.n	801b908 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b854:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801b858:	4542      	cmp	r2, r8
 801b85a:	dd55      	ble.n	801b908 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b85c:	9a02      	ldr	r2, [sp, #8]
 801b85e:	9903      	ldr	r1, [sp, #12]
 801b860:	fb08 6602 	mla	r6, r8, r2, r6
 801b864:	0872      	lsrs	r2, r6, #1
 801b866:	07f6      	lsls	r6, r6, #31
 801b868:	5c8a      	ldrb	r2, [r1, r2]
 801b86a:	bf54      	ite	pl
 801b86c:	f002 020f 	andpl.w	r2, r2, #15
 801b870:	1112      	asrmi	r2, r2, #4
 801b872:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b876:	b2d2      	uxtb	r2, r2
 801b878:	2a00      	cmp	r2, #0
 801b87a:	d045      	beq.n	801b908 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b87c:	4926      	ldr	r1, [pc, #152]	@ (801b918 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801b87e:	f8d1 8000 	ldr.w	r8, [r1]
 801b882:	9905      	ldr	r1, [sp, #20]
 801b884:	fa5f fb88 	uxtb.w	fp, r8
 801b888:	434a      	muls	r2, r1
 801b88a:	1c56      	adds	r6, r2, #1
 801b88c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801b890:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801b894:	1212      	asrs	r2, r2, #8
 801b896:	f815 9006 	ldrb.w	r9, [r5, r6]
 801b89a:	fa1f fa82 	uxth.w	sl, r2
 801b89e:	43d2      	mvns	r2, r2
 801b8a0:	fb1b fb0a 	smulbb	fp, fp, sl
 801b8a4:	b2d2      	uxtb	r2, r2
 801b8a6:	fb09 b902 	mla	r9, r9, r2, fp
 801b8aa:	fa1f f989 	uxth.w	r9, r9
 801b8ae:	f109 0b01 	add.w	fp, r9, #1
 801b8b2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b8b6:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801b8ba:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801b8be:	fb1b fb0a 	smulbb	fp, fp, sl
 801b8c2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b8c6:	fb18 fa0a 	smulbb	sl, r8, sl
 801b8ca:	f805 9006 	strb.w	r9, [r5, r6]
 801b8ce:	442e      	add	r6, r5
 801b8d0:	f896 8002 	ldrb.w	r8, [r6, #2]
 801b8d4:	f896 9001 	ldrb.w	r9, [r6, #1]
 801b8d8:	fb08 aa02 	mla	sl, r8, r2, sl
 801b8dc:	fb09 b902 	mla	r9, r9, r2, fp
 801b8e0:	fa1f fa8a 	uxth.w	sl, sl
 801b8e4:	fa1f f989 	uxth.w	r9, r9
 801b8e8:	f10a 0801 	add.w	r8, sl, #1
 801b8ec:	f109 0b01 	add.w	fp, r9, #1
 801b8f0:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801b8f4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b8f8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b8fc:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b900:	f886 a002 	strb.w	sl, [r6, #2]
 801b904:	f886 9001 	strb.w	r9, [r6, #1]
 801b908:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801b90a:	4474      	add	r4, lr
 801b90c:	3701      	adds	r7, #1
 801b90e:	4410      	add	r0, r2
 801b910:	e755      	b.n	801b7be <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801b912:	b007      	add	sp, #28
 801b914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b918:	24026428 	.word	0x24026428

0801b91c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b920:	b085      	sub	sp, #20
 801b922:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b926:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b928:	9203      	str	r2, [sp, #12]
 801b92a:	6860      	ldr	r0, [r4, #4]
 801b92c:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801b930:	9100      	str	r1, [sp, #0]
 801b932:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	@ 0x50
 801b936:	fb00 2606 	mla	r6, r0, r6, r2
 801b93a:	6822      	ldr	r2, [r4, #0]
 801b93c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b940:	4416      	add	r6, r2
 801b942:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801b946:	3201      	adds	r2, #1
 801b948:	f022 0201 	bic.w	r2, r2, #1
 801b94c:	9201      	str	r2, [sp, #4]
 801b94e:	f8dc 2000 	ldr.w	r2, [ip]
 801b952:	9202      	str	r2, [sp, #8]
 801b954:	9a00      	ldr	r2, [sp, #0]
 801b956:	2a00      	cmp	r2, #0
 801b958:	dc03      	bgt.n	801b962 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801b95a:	9a03      	ldr	r2, [sp, #12]
 801b95c:	2a00      	cmp	r2, #0
 801b95e:	f340 8140 	ble.w	801bbe2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801b962:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b964:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801b968:	f502 4500 	add.w	r5, r2, #32768	@ 0x8000
 801b96c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b96e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801b972:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801b976:	2b00      	cmp	r3, #0
 801b978:	dd0e      	ble.n	801b998 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b97a:	142a      	asrs	r2, r5, #16
 801b97c:	d405      	bmi.n	801b98a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b97e:	4572      	cmp	r2, lr
 801b980:	da03      	bge.n	801b98a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b982:	1422      	asrs	r2, r4, #16
 801b984:	d401      	bmi.n	801b98a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b986:	42ba      	cmp	r2, r7
 801b988:	db07      	blt.n	801b99a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b98a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801b98c:	3b01      	subs	r3, #1
 801b98e:	3603      	adds	r6, #3
 801b990:	4415      	add	r5, r2
 801b992:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b994:	4414      	add	r4, r2
 801b996:	e7ee      	b.n	801b976 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801b998:	d072      	beq.n	801ba80 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b99a:	1e5a      	subs	r2, r3, #1
 801b99c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801b99e:	fb00 5002 	mla	r0, r0, r2, r5
 801b9a2:	1400      	asrs	r0, r0, #16
 801b9a4:	d463      	bmi.n	801ba6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b9a6:	4570      	cmp	r0, lr
 801b9a8:	da61      	bge.n	801ba6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b9aa:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801b9ac:	fb00 4202 	mla	r2, r0, r2, r4
 801b9b0:	1412      	asrs	r2, r2, #16
 801b9b2:	d45c      	bmi.n	801ba6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b9b4:	42ba      	cmp	r2, r7
 801b9b6:	da5a      	bge.n	801ba6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b9b8:	1cf0      	adds	r0, r6, #3
 801b9ba:	469a      	mov	sl, r3
 801b9bc:	f1ba 0f00 	cmp.w	sl, #0
 801b9c0:	dd59      	ble.n	801ba76 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801b9c2:	142a      	asrs	r2, r5, #16
 801b9c4:	9901      	ldr	r1, [sp, #4]
 801b9c6:	1427      	asrs	r7, r4, #16
 801b9c8:	fb01 2707 	mla	r7, r1, r7, r2
 801b9cc:	9902      	ldr	r1, [sp, #8]
 801b9ce:	087a      	lsrs	r2, r7, #1
 801b9d0:	5c8a      	ldrb	r2, [r1, r2]
 801b9d2:	07f9      	lsls	r1, r7, #31
 801b9d4:	bf54      	ite	pl
 801b9d6:	f002 020f 	andpl.w	r2, r2, #15
 801b9da:	1112      	asrmi	r2, r2, #4
 801b9dc:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b9e0:	b2d2      	uxtb	r2, r2
 801b9e2:	2a00      	cmp	r2, #0
 801b9e4:	d03b      	beq.n	801ba5e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801b9e6:	4980      	ldr	r1, [pc, #512]	@ (801bbe8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801b9e8:	2aff      	cmp	r2, #255	@ 0xff
 801b9ea:	680f      	ldr	r7, [r1, #0]
 801b9ec:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801b9f0:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801b9f4:	b2ff      	uxtb	r7, r7
 801b9f6:	f000 80ed 	beq.w	801bbd4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801b9fa:	fa1f f882 	uxth.w	r8, r2
 801b9fe:	43d2      	mvns	r2, r2
 801ba00:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801ba04:	fb17 f708 	smulbb	r7, r7, r8
 801ba08:	b2d2      	uxtb	r2, r2
 801ba0a:	fb19 f908 	smulbb	r9, r9, r8
 801ba0e:	fb0e 7702 	mla	r7, lr, r2, r7
 801ba12:	fb1b f808 	smulbb	r8, fp, r8
 801ba16:	b2bf      	uxth	r7, r7
 801ba18:	f107 0e01 	add.w	lr, r7, #1
 801ba1c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801ba20:	123f      	asrs	r7, r7, #8
 801ba22:	f800 7c03 	strb.w	r7, [r0, #-3]
 801ba26:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801ba2a:	fb07 9902 	mla	r9, r7, r2, r9
 801ba2e:	fa1f f989 	uxth.w	r9, r9
 801ba32:	f109 0701 	add.w	r7, r9, #1
 801ba36:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801ba3a:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801ba3e:	fb07 8802 	mla	r8, r7, r2, r8
 801ba42:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ba46:	fa1f f888 	uxth.w	r8, r8
 801ba4a:	f800 9c02 	strb.w	r9, [r0, #-2]
 801ba4e:	f108 0201 	add.w	r2, r8, #1
 801ba52:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801ba56:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ba5a:	f800 8c01 	strb.w	r8, [r0, #-1]
 801ba5e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ba60:	3003      	adds	r0, #3
 801ba62:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ba66:	4415      	add	r5, r2
 801ba68:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ba6a:	4414      	add	r4, r2
 801ba6c:	e7a6      	b.n	801b9bc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ba6e:	2700      	movs	r7, #0
 801ba70:	1bda      	subs	r2, r3, r7
 801ba72:	2a00      	cmp	r2, #0
 801ba74:	dc40      	bgt.n	801baf8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801ba76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ba7a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ba7e:	441e      	add	r6, r3
 801ba80:	9b00      	ldr	r3, [sp, #0]
 801ba82:	2b00      	cmp	r3, #0
 801ba84:	f340 80ad 	ble.w	801bbe2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801ba88:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ba8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ba8e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ba92:	eeb0 6a62 	vmov.f32	s12, s5
 801ba96:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ba9a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ba9e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801baa2:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801baa6:	eeb0 6a43 	vmov.f32	s12, s6
 801baaa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801baae:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801bab2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bab6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801baba:	ee77 2a62 	vsub.f32	s5, s14, s5
 801babe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bac2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bac6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801baca:	ee12 2a90 	vmov	r2, s5
 801bace:	eef0 2a47 	vmov.f32	s5, s14
 801bad2:	fb92 f3f3 	sdiv	r3, r2, r3
 801bad6:	ee13 2a10 	vmov	r2, s6
 801bada:	9311      	str	r3, [sp, #68]	@ 0x44
 801badc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bade:	eeb0 3a67 	vmov.f32	s6, s15
 801bae2:	fb92 f3f3 	sdiv	r3, r2, r3
 801bae6:	9312      	str	r3, [sp, #72]	@ 0x48
 801bae8:	9b00      	ldr	r3, [sp, #0]
 801baea:	9a03      	ldr	r2, [sp, #12]
 801baec:	3b01      	subs	r3, #1
 801baee:	9300      	str	r3, [sp, #0]
 801baf0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801baf2:	bf08      	it	eq
 801baf4:	4613      	moveq	r3, r2
 801baf6:	e72d      	b.n	801b954 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801baf8:	1428      	asrs	r0, r5, #16
 801bafa:	d45c      	bmi.n	801bbb6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801bafc:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801bb00:	4282      	cmp	r2, r0
 801bb02:	dd58      	ble.n	801bbb6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801bb04:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801bb08:	d455      	bmi.n	801bbb6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801bb0a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801bb0e:	4572      	cmp	r2, lr
 801bb10:	dd51      	ble.n	801bbb6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801bb12:	9a01      	ldr	r2, [sp, #4]
 801bb14:	9902      	ldr	r1, [sp, #8]
 801bb16:	fb0e 0002 	mla	r0, lr, r2, r0
 801bb1a:	0842      	lsrs	r2, r0, #1
 801bb1c:	07c0      	lsls	r0, r0, #31
 801bb1e:	5c8a      	ldrb	r2, [r1, r2]
 801bb20:	bf54      	ite	pl
 801bb22:	f002 020f 	andpl.w	r2, r2, #15
 801bb26:	1112      	asrmi	r2, r2, #4
 801bb28:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bb2c:	b2d2      	uxtb	r2, r2
 801bb2e:	2a00      	cmp	r2, #0
 801bb30:	d041      	beq.n	801bbb6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801bb32:	492d      	ldr	r1, [pc, #180]	@ (801bbe8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801bb34:	2aff      	cmp	r2, #255	@ 0xff
 801bb36:	6808      	ldr	r0, [r1, #0]
 801bb38:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801bb3c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801bb40:	fa5f fe80 	uxtb.w	lr, r0
 801bb44:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801bb48:	d03b      	beq.n	801bbc2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801bb4a:	fa1f f982 	uxth.w	r9, r2
 801bb4e:	4438      	add	r0, r7
 801bb50:	43d2      	mvns	r2, r2
 801bb52:	f816 8000 	ldrb.w	r8, [r6, r0]
 801bb56:	fb1e fe09 	smulbb	lr, lr, r9
 801bb5a:	fb1a fa09 	smulbb	sl, sl, r9
 801bb5e:	b2d2      	uxtb	r2, r2
 801bb60:	fb1b f909 	smulbb	r9, fp, r9
 801bb64:	fb08 ee02 	mla	lr, r8, r2, lr
 801bb68:	fa1f fe8e 	uxth.w	lr, lr
 801bb6c:	f10e 0801 	add.w	r8, lr, #1
 801bb70:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801bb74:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801bb78:	f806 e000 	strb.w	lr, [r6, r0]
 801bb7c:	4430      	add	r0, r6
 801bb7e:	f890 e001 	ldrb.w	lr, [r0, #1]
 801bb82:	fb0e aa02 	mla	sl, lr, r2, sl
 801bb86:	fa1f fa8a 	uxth.w	sl, sl
 801bb8a:	f10a 0e01 	add.w	lr, sl, #1
 801bb8e:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801bb92:	f890 e002 	ldrb.w	lr, [r0, #2]
 801bb96:	fb0e 9902 	mla	r9, lr, r2, r9
 801bb9a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bb9e:	fa1f f989 	uxth.w	r9, r9
 801bba2:	f880 a001 	strb.w	sl, [r0, #1]
 801bba6:	f109 0201 	add.w	r2, r9, #1
 801bbaa:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801bbae:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bbb2:	f880 9002 	strb.w	r9, [r0, #2]
 801bbb6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801bbb8:	3701      	adds	r7, #1
 801bbba:	4415      	add	r5, r2
 801bbbc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801bbbe:	4414      	add	r4, r2
 801bbc0:	e756      	b.n	801ba70 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801bbc2:	4438      	add	r0, r7
 801bbc4:	f806 e000 	strb.w	lr, [r6, r0]
 801bbc8:	4430      	add	r0, r6
 801bbca:	f880 a001 	strb.w	sl, [r0, #1]
 801bbce:	f880 b002 	strb.w	fp, [r0, #2]
 801bbd2:	e7f0      	b.n	801bbb6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801bbd4:	f800 7c03 	strb.w	r7, [r0, #-3]
 801bbd8:	f800 9c02 	strb.w	r9, [r0, #-2]
 801bbdc:	f800 bc01 	strb.w	fp, [r0, #-1]
 801bbe0:	e73d      	b.n	801ba5e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801bbe2:	b005      	add	sp, #20
 801bbe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbe8:	24026428 	.word	0x24026428

0801bbec <_ZN8touchgfx8LCD24bppD1Ev>:
 801bbec:	4770      	bx	lr

0801bbee <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID1Ev>:
 801bbee:	4770      	bx	lr

0801bbf0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 801bbf0:	4770      	bx	lr

0801bbf2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 801bbf2:	4770      	bx	lr

0801bbf4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 801bbf4:	4770      	bx	lr

0801bbf6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801bbf6:	4770      	bx	lr

0801bbf8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801bbf8:	4770      	bx	lr

0801bbfa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801bbfa:	4770      	bx	lr

0801bbfc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801bbfc:	4770      	bx	lr

0801bbfe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801bbfe:	4770      	bx	lr

0801bc00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801bc00:	4770      	bx	lr

0801bc02 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801bc02:	4770      	bx	lr

0801bc04 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801bc04:	4770      	bx	lr

0801bc06 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801bc06:	4770      	bx	lr

0801bc08 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801bc08:	4770      	bx	lr

0801bc0a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801bc0a:	4770      	bx	lr

0801bc0c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801bc0c:	4770      	bx	lr

0801bc0e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801bc0e:	4770      	bx	lr

0801bc10 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801bc10:	4770      	bx	lr

0801bc12 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801bc12:	4770      	bx	lr

0801bc14 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801bc14:	4770      	bx	lr

0801bc16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801bc16:	4770      	bx	lr

0801bc18 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801bc18:	4770      	bx	lr

0801bc1a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801bc1a:	4770      	bx	lr

0801bc1c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801bc1c:	4770      	bx	lr
	...

0801bc20 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801bc20:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bc22:	4606      	mov	r6, r0
 801bc24:	b087      	sub	sp, #28
 801bc26:	4615      	mov	r5, r2
 801bc28:	461f      	mov	r7, r3
 801bc2a:	b353      	cbz	r3, 801bc82 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801bc2c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801bc30:	2b00      	cmp	r3, #0
 801bc32:	dd26      	ble.n	801bc82 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801bc34:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801bc38:	2b00      	cmp	r3, #0
 801bc3a:	dd22      	ble.n	801bc82 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801bc3c:	6808      	ldr	r0, [r1, #0]
 801bc3e:	aa04      	add	r2, sp, #16
 801bc40:	6849      	ldr	r1, [r1, #4]
 801bc42:	4c1b      	ldr	r4, [pc, #108]	@ (801bcb0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801bc44:	c203      	stmia	r2!, {r0, r1}
 801bc46:	a804      	add	r0, sp, #16
 801bc48:	f7fa fdcc 	bl	80167e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bc4c:	6820      	ldr	r0, [r4, #0]
 801bc4e:	6803      	ldr	r3, [r0, #0]
 801bc50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801bc52:	4798      	blx	r3
 801bc54:	2fff      	cmp	r7, #255	@ 0xff
 801bc56:	d016      	beq.n	801bc86 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801bc58:	f010 0f08 	tst.w	r0, #8
 801bc5c:	6820      	ldr	r0, [r4, #0]
 801bc5e:	d015      	beq.n	801bc8c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801bc60:	2400      	movs	r4, #0
 801bc62:	6801      	ldr	r1, [r0, #0]
 801bc64:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801bc68:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801bc6c:	e9cd 7402 	strd	r7, r4, [sp, #8]
 801bc70:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801bc74:	9401      	str	r4, [sp, #4]
 801bc76:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801bc7a:	9400      	str	r4, [sp, #0]
 801bc7c:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 801bc7e:	4629      	mov	r1, r5
 801bc80:	47a0      	blx	r4
 801bc82:	b007      	add	sp, #28
 801bc84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bc86:	f010 0f02 	tst.w	r0, #2
 801bc8a:	e7e7      	b.n	801bc5c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801bc8c:	6803      	ldr	r3, [r0, #0]
 801bc8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bc90:	4798      	blx	r3
 801bc92:	4b08      	ldr	r3, [pc, #32]	@ (801bcb4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 801bc94:	4601      	mov	r1, r0
 801bc96:	4630      	mov	r0, r6
 801bc98:	881a      	ldrh	r2, [r3, #0]
 801bc9a:	6833      	ldr	r3, [r6, #0]
 801bc9c:	e9cd 5700 	strd	r5, r7, [sp]
 801bca0:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801bca2:	ab04      	add	r3, sp, #16
 801bca4:	47a8      	blx	r5
 801bca6:	6820      	ldr	r0, [r4, #0]
 801bca8:	6803      	ldr	r3, [r0, #0]
 801bcaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bcac:	4798      	blx	r3
 801bcae:	e7e8      	b.n	801bc82 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801bcb0:	24026418 	.word	0x24026418
 801bcb4:	24026412 	.word	0x24026412

0801bcb8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801bcb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bcbc:	b08b      	sub	sp, #44	@ 0x2c
 801bcbe:	460d      	mov	r5, r1
 801bcc0:	4616      	mov	r6, r2
 801bcc2:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 801bcc6:	f1b8 0f00 	cmp.w	r8, #0
 801bcca:	d047      	beq.n	801bd5c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801bccc:	6810      	ldr	r0, [r2, #0]
 801bcce:	ac06      	add	r4, sp, #24
 801bcd0:	6851      	ldr	r1, [r2, #4]
 801bcd2:	4f51      	ldr	r7, [pc, #324]	@ (801be18 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801bcd4:	c403      	stmia	r4!, {r0, r1}
 801bcd6:	6818      	ldr	r0, [r3, #0]
 801bcd8:	ac08      	add	r4, sp, #32
 801bcda:	6859      	ldr	r1, [r3, #4]
 801bcdc:	c403      	stmia	r4!, {r0, r1}
 801bcde:	a806      	add	r0, sp, #24
 801bce0:	f7fa fd80 	bl	80167e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bce4:	4631      	mov	r1, r6
 801bce6:	a808      	add	r0, sp, #32
 801bce8:	f7fa fda4 	bl	8016834 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bcec:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801bcf0:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801bcf4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801bcf8:	6838      	ldr	r0, [r7, #0]
 801bcfa:	fb11 2103 	smlabb	r1, r1, r3, r2
 801bcfe:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 801bd02:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 801bd06:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801bd0a:	440d      	add	r5, r1
 801bd0c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801bd10:	440a      	add	r2, r1
 801bd12:	f8ad 2020 	strh.w	r2, [sp, #32]
 801bd16:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801bd1a:	4413      	add	r3, r2
 801bd1c:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801bd20:	6803      	ldr	r3, [r0, #0]
 801bd22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801bd24:	4798      	blx	r3
 801bd26:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801bd2a:	d01a      	beq.n	801bd62 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 801bd2c:	f010 0f04 	tst.w	r0, #4
 801bd30:	6838      	ldr	r0, [r7, #0]
 801bd32:	d019      	beq.n	801bd68 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 801bd34:	2100      	movs	r1, #0
 801bd36:	6807      	ldr	r7, [r0, #0]
 801bd38:	b2a4      	uxth	r4, r4
 801bd3a:	f8cd 800c 	str.w	r8, [sp, #12]
 801bd3e:	b2b6      	uxth	r6, r6
 801bd40:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801bd44:	9401      	str	r4, [sp, #4]
 801bd46:	9600      	str	r6, [sp, #0]
 801bd48:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801bd4c:	e9cd 1104 	strd	r1, r1, [sp, #16]
 801bd50:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801bd54:	9102      	str	r1, [sp, #8]
 801bd56:	4629      	mov	r1, r5
 801bd58:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801bd5a:	47a0      	blx	r4
 801bd5c:	b00b      	add	sp, #44	@ 0x2c
 801bd5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bd62:	f010 0f01 	tst.w	r0, #1
 801bd66:	e7e3      	b.n	801bd30 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801bd68:	6803      	ldr	r3, [r0, #0]
 801bd6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bd6c:	4798      	blx	r3
 801bd6e:	4a2b      	ldr	r2, [pc, #172]	@ (801be1c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 801bd70:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 801bd74:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801bd78:	8813      	ldrh	r3, [r2, #0]
 801bd7a:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801bd7e:	fb03 f404 	mul.w	r4, r3, r4
 801bd82:	fb03 c101 	mla	r1, r3, r1, ip
 801bd86:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bd8a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801bd8e:	4408      	add	r0, r1
 801bd90:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801bd94:	4404      	add	r4, r0
 801bd96:	d02e      	beq.n	801bdf6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801bd98:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801bd9c:	1b9b      	subs	r3, r3, r6
 801bd9e:	f1c8 0cff 	rsb	ip, r8, #255	@ 0xff
 801bda2:	1b96      	subs	r6, r2, r6
 801bda4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bda8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801bdac:	42a0      	cmp	r0, r4
 801bdae:	d22d      	bcs.n	801be0c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801bdb0:	eb00 0e01 	add.w	lr, r0, r1
 801bdb4:	4570      	cmp	r0, lr
 801bdb6:	d210      	bcs.n	801bdda <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 801bdb8:	f890 9000 	ldrb.w	r9, [r0]
 801bdbc:	f815 2b01 	ldrb.w	r2, [r5], #1
 801bdc0:	fb19 f90c 	smulbb	r9, r9, ip
 801bdc4:	fb02 9208 	mla	r2, r2, r8, r9
 801bdc8:	b292      	uxth	r2, r2
 801bdca:	f102 0901 	add.w	r9, r2, #1
 801bdce:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801bdd2:	1212      	asrs	r2, r2, #8
 801bdd4:	f800 2b01 	strb.w	r2, [r0], #1
 801bdd8:	e7ec      	b.n	801bdb4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801bdda:	4418      	add	r0, r3
 801bddc:	4435      	add	r5, r6
 801bdde:	e7e5      	b.n	801bdac <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801bde0:	8813      	ldrh	r3, [r2, #0]
 801bde2:	1b9b      	subs	r3, r3, r6
 801bde4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bde8:	4418      	add	r0, r3
 801bdea:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801bdee:	1b9b      	subs	r3, r3, r6
 801bdf0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bdf4:	441d      	add	r5, r3
 801bdf6:	42a0      	cmp	r0, r4
 801bdf8:	d208      	bcs.n	801be0c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801bdfa:	eb00 0c01 	add.w	ip, r0, r1
 801bdfe:	4560      	cmp	r0, ip
 801be00:	d2ee      	bcs.n	801bde0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801be02:	f815 3b01 	ldrb.w	r3, [r5], #1
 801be06:	f800 3b01 	strb.w	r3, [r0], #1
 801be0a:	e7f8      	b.n	801bdfe <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 801be0c:	6838      	ldr	r0, [r7, #0]
 801be0e:	6803      	ldr	r3, [r0, #0]
 801be10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801be12:	4798      	blx	r3
 801be14:	e7a2      	b.n	801bd5c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801be16:	bf00      	nop
 801be18:	24026418 	.word	0x24026418
 801be1c:	24026412 	.word	0x24026412

0801be20 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801be20:	b5f0      	push	{r4, r5, r6, r7, lr}
 801be22:	2300      	movs	r3, #0
 801be24:	b085      	sub	sp, #20
 801be26:	9300      	str	r3, [sp, #0]
 801be28:	4b41      	ldr	r3, [pc, #260]	@ (801bf30 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801be2a:	781b      	ldrb	r3, [r3, #0]
 801be2c:	2b00      	cmp	r3, #0
 801be2e:	d136      	bne.n	801be9e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 801be30:	4a40      	ldr	r2, [pc, #256]	@ (801bf34 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801be32:	f9b2 2000 	ldrsh.w	r2, [r2]
 801be36:	f8ad 2004 	strh.w	r2, [sp, #4]
 801be3a:	2b00      	cmp	r3, #0
 801be3c:	d131      	bne.n	801bea2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 801be3e:	4b3e      	ldr	r3, [pc, #248]	@ (801bf38 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801be40:	f9b3 3000 	ldrsh.w	r3, [r3]
 801be44:	ac02      	add	r4, sp, #8
 801be46:	6808      	ldr	r0, [r1, #0]
 801be48:	f8ad 3006 	strh.w	r3, [sp, #6]
 801be4c:	ab02      	add	r3, sp, #8
 801be4e:	6849      	ldr	r1, [r1, #4]
 801be50:	4d3a      	ldr	r5, [pc, #232]	@ (801bf3c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 801be52:	c303      	stmia	r3!, {r0, r1}
 801be54:	4669      	mov	r1, sp
 801be56:	4620      	mov	r0, r4
 801be58:	f7fa fcec 	bl	8016834 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801be5c:	4668      	mov	r0, sp
 801be5e:	f7fa fcc1 	bl	80167e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801be62:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801be66:	f8bd 2000 	ldrh.w	r2, [sp]
 801be6a:	462e      	mov	r6, r5
 801be6c:	6828      	ldr	r0, [r5, #0]
 801be6e:	4413      	add	r3, r2
 801be70:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801be74:	f8ad 3008 	strh.w	r3, [sp, #8]
 801be78:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801be7c:	4413      	add	r3, r2
 801be7e:	f8ad 300a 	strh.w	r3, [sp, #10]
 801be82:	6803      	ldr	r3, [r0, #0]
 801be84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801be86:	4798      	blx	r3
 801be88:	f010 0f01 	tst.w	r0, #1
 801be8c:	d00b      	beq.n	801bea6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 801be8e:	6828      	ldr	r0, [r5, #0]
 801be90:	6803      	ldr	r3, [r0, #0]
 801be92:	e894 0006 	ldmia.w	r4, {r1, r2}
 801be96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801be98:	4798      	blx	r3
 801be9a:	b005      	add	sp, #20
 801be9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801be9e:	4a26      	ldr	r2, [pc, #152]	@ (801bf38 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801bea0:	e7c7      	b.n	801be32 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801bea2:	4b24      	ldr	r3, [pc, #144]	@ (801bf34 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801bea4:	e7cc      	b.n	801be40 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801bea6:	6830      	ldr	r0, [r6, #0]
 801bea8:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801beac:	6803      	ldr	r3, [r0, #0]
 801beae:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 801beb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801beb4:	4798      	blx	r3
 801beb6:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801beba:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801bebe:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 801bec2:	fb14 3402 	smlabb	r4, r4, r2, r3
 801bec6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801beca:	4404      	add	r4, r0
 801becc:	6830      	ldr	r0, [r6, #0]
 801bece:	6803      	ldr	r3, [r0, #0]
 801bed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bed2:	4798      	blx	r3
 801bed4:	4917      	ldr	r1, [pc, #92]	@ (801bf34 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801bed6:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801beda:	880b      	ldrh	r3, [r1, #0]
 801bedc:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 801bee0:	fb03 c202 	mla	r2, r3, r2, ip
 801bee4:	437b      	muls	r3, r7
 801bee6:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 801beea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801beee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bef2:	4410      	add	r0, r2
 801bef4:	18c2      	adds	r2, r0, r3
 801bef6:	4290      	cmp	r0, r2
 801bef8:	d214      	bcs.n	801bf24 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801befa:	eb00 0c07 	add.w	ip, r0, r7
 801befe:	4560      	cmp	r0, ip
 801bf00:	d204      	bcs.n	801bf0c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 801bf02:	f814 3b01 	ldrb.w	r3, [r4], #1
 801bf06:	f800 3b01 	strb.w	r3, [r0], #1
 801bf0a:	e7f8      	b.n	801befe <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 801bf0c:	880b      	ldrh	r3, [r1, #0]
 801bf0e:	1b5b      	subs	r3, r3, r5
 801bf10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bf14:	4418      	add	r0, r3
 801bf16:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801bf1a:	1b5b      	subs	r3, r3, r5
 801bf1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bf20:	441c      	add	r4, r3
 801bf22:	e7e8      	b.n	801bef6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 801bf24:	6830      	ldr	r0, [r6, #0]
 801bf26:	6803      	ldr	r3, [r0, #0]
 801bf28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bf2a:	4798      	blx	r3
 801bf2c:	e7b5      	b.n	801be9a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801bf2e:	bf00      	nop
 801bf30:	24026410 	.word	0x24026410
 801bf34:	24026412 	.word	0x24026412
 801bf38:	24026414 	.word	0x24026414
 801bf3c:	24026418 	.word	0x24026418

0801bf40 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801bf40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf44:	b08f      	sub	sp, #60	@ 0x3c
 801bf46:	461c      	mov	r4, r3
 801bf48:	9203      	str	r2, [sp, #12]
 801bf4a:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801bf4e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801bf50:	6820      	ldr	r0, [r4, #0]
 801bf52:	9100      	str	r1, [sp, #0]
 801bf54:	9204      	str	r2, [sp, #16]
 801bf56:	aa0a      	add	r2, sp, #40	@ 0x28
 801bf58:	6861      	ldr	r1, [r4, #4]
 801bf5a:	c203      	stmia	r2!, {r0, r1}
 801bf5c:	6818      	ldr	r0, [r3, #0]
 801bf5e:	aa0c      	add	r2, sp, #48	@ 0x30
 801bf60:	6859      	ldr	r1, [r3, #4]
 801bf62:	c203      	stmia	r2!, {r0, r1}
 801bf64:	a80a      	add	r0, sp, #40	@ 0x28
 801bf66:	f7fa fc3d 	bl	80167e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bf6a:	4621      	mov	r1, r4
 801bf6c:	a80c      	add	r0, sp, #48	@ 0x30
 801bf6e:	f7fa fc61 	bl	8016834 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bf72:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801bf76:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801bf7a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801bf7e:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801bf82:	bfdb      	ittet	le
 801bf84:	b2b3      	uxthle	r3, r6
 801bf86:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801bf8a:	2301      	movgt	r3, #1
 801bf8c:	fb92 f3f3 	sdivle	r3, r2, r3
 801bf90:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801bf94:	441d      	add	r5, r3
 801bf96:	fb92 f1f3 	sdiv	r1, r2, r3
 801bf9a:	fa1f fc81 	uxth.w	ip, r1
 801bf9e:	3d01      	subs	r5, #1
 801bfa0:	fb0c 2413 	mls	r4, ip, r3, r2
 801bfa4:	4661      	mov	r1, ip
 801bfa6:	fb14 f406 	smulbb	r4, r4, r6
 801bfaa:	4404      	add	r4, r0
 801bfac:	fb95 f5f3 	sdiv	r5, r5, r3
 801bfb0:	b2a4      	uxth	r4, r4
 801bfb2:	b131      	cbz	r1, 801bfc2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 801bfb4:	9b03      	ldr	r3, [sp, #12]
 801bfb6:	9900      	ldr	r1, [sp, #0]
 801bfb8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801bfbc:	ba1b      	rev	r3, r3
 801bfbe:	4419      	add	r1, r3
 801bfc0:	9100      	str	r1, [sp, #0]
 801bfc2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801bfc6:	b2ad      	uxth	r5, r5
 801bfc8:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801bfcc:	4418      	add	r0, r3
 801bfce:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801bfd2:	00ad      	lsls	r5, r5, #2
 801bfd4:	441a      	add	r2, r3
 801bfd6:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801bfda:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801bfde:	9301      	str	r3, [sp, #4]
 801bfe0:	4b79      	ldr	r3, [pc, #484]	@ (801c1c8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 801bfe2:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801bfe6:	6818      	ldr	r0, [r3, #0]
 801bfe8:	6803      	ldr	r3, [r0, #0]
 801bfea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bfec:	4798      	blx	r3
 801bfee:	4a77      	ldr	r2, [pc, #476]	@ (801c1cc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 801bff0:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801bff4:	2c00      	cmp	r4, #0
 801bff6:	8813      	ldrh	r3, [r2, #0]
 801bff8:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801bffc:	9209      	str	r2, [sp, #36]	@ 0x24
 801bffe:	fb03 c101 	mla	r1, r3, r1, ip
 801c002:	fb06 f303 	mul.w	r3, r6, r3
 801c006:	bf18      	it	ne
 801c008:	2600      	movne	r6, #0
 801c00a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c00e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c012:	4408      	add	r0, r1
 801c014:	4403      	add	r3, r0
 801c016:	9306      	str	r3, [sp, #24]
 801c018:	f105 0304 	add.w	r3, r5, #4
 801c01c:	9305      	str	r3, [sp, #20]
 801c01e:	9b01      	ldr	r3, [sp, #4]
 801c020:	bf08      	it	eq
 801c022:	461e      	moveq	r6, r3
 801c024:	2300      	movs	r3, #0
 801c026:	b2b6      	uxth	r6, r6
 801c028:	9302      	str	r3, [sp, #8]
 801c02a:	9a06      	ldr	r2, [sp, #24]
 801c02c:	4290      	cmp	r0, r2
 801c02e:	f080 80c2 	bcs.w	801c1b6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 801c032:	b963      	cbnz	r3, 801c04e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801c034:	9b00      	ldr	r3, [sp, #0]
 801c036:	781a      	ldrb	r2, [r3, #0]
 801c038:	0993      	lsrs	r3, r2, #6
 801c03a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801c03e:	9202      	str	r2, [sp, #8]
 801c040:	1e5a      	subs	r2, r3, #1
 801c042:	2a02      	cmp	r2, #2
 801c044:	d815      	bhi.n	801c072 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 801c046:	9a00      	ldr	r2, [sp, #0]
 801c048:	b29b      	uxth	r3, r3
 801c04a:	3201      	adds	r2, #1
 801c04c:	9200      	str	r2, [sp, #0]
 801c04e:	b1b4      	cbz	r4, 801c07e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 801c050:	429c      	cmp	r4, r3
 801c052:	bf91      	iteee	ls
 801c054:	1b1c      	subls	r4, r3, r4
 801c056:	1ae4      	subhi	r4, r4, r3
 801c058:	4635      	movhi	r5, r6
 801c05a:	f04f 0e00 	movhi.w	lr, #0
 801c05e:	bf9b      	ittet	ls
 801c060:	fa1f fe84 	uxthls.w	lr, r4
 801c064:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 801c068:	b2a4      	uxthhi	r4, r4
 801c06a:	2400      	movls	r4, #0
 801c06c:	4673      	mov	r3, lr
 801c06e:	462e      	mov	r6, r5
 801c070:	e7db      	b.n	801c02a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 801c072:	9a00      	ldr	r2, [sp, #0]
 801c074:	9b00      	ldr	r3, [sp, #0]
 801c076:	3202      	adds	r2, #2
 801c078:	785b      	ldrb	r3, [r3, #1]
 801c07a:	9200      	str	r2, [sp, #0]
 801c07c:	e7e7      	b.n	801c04e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801c07e:	2204      	movs	r2, #4
 801c080:	9905      	ldr	r1, [sp, #20]
 801c082:	429e      	cmp	r6, r3
 801c084:	4615      	mov	r5, r2
 801c086:	9a02      	ldr	r2, [sp, #8]
 801c088:	bf94      	ite	ls
 801c08a:	eba3 0e06 	subls.w	lr, r3, r6
 801c08e:	46a6      	movhi	lr, r4
 801c090:	fb15 1202 	smlabb	r2, r5, r2, r1
 801c094:	9903      	ldr	r1, [sp, #12]
 801c096:	bf8c      	ite	hi
 801c098:	1af5      	subhi	r5, r6, r3
 801c09a:	fa1f fe8e 	uxthls.w	lr, lr
 801c09e:	f851 c002 	ldr.w	ip, [r1, r2]
 801c0a2:	bf9a      	itte	ls
 801c0a4:	4625      	movls	r5, r4
 801c0a6:	4632      	movls	r2, r6
 801c0a8:	b2ad      	uxthhi	r5, r5
 801c0aa:	ea4f 611c 	mov.w	r1, ip, lsr #24
 801c0ae:	bf88      	it	hi
 801c0b0:	461a      	movhi	r2, r3
 801c0b2:	b179      	cbz	r1, 801c0d4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801c0b4:	29ff      	cmp	r1, #255	@ 0xff
 801c0b6:	fa5f f98c 	uxtb.w	r9, ip
 801c0ba:	f3cc 2807 	ubfx	r8, ip, #8, #8
 801c0be:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 801c0c2:	d126      	bne.n	801c112 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801c0c4:	9f04      	ldr	r7, [sp, #16]
 801c0c6:	2fff      	cmp	r7, #255	@ 0xff
 801c0c8:	d123      	bne.n	801c112 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801c0ca:	4682      	mov	sl, r0
 801c0cc:	4611      	mov	r1, r2
 801c0ce:	f10a 0a03 	add.w	sl, sl, #3
 801c0d2:	b9a9      	cbnz	r1, 801c100 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 801c0d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c0d8:	429e      	cmp	r6, r3
 801c0da:	4410      	add	r0, r2
 801c0dc:	d8c6      	bhi.n	801c06c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801c0de:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 801c0e2:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801c0e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c0e8:	1b64      	subs	r4, r4, r5
 801c0ea:	9a01      	ldr	r2, [sp, #4]
 801c0ec:	881b      	ldrh	r3, [r3, #0]
 801c0ee:	b2a4      	uxth	r4, r4
 801c0f0:	1a9b      	subs	r3, r3, r2
 801c0f2:	2c00      	cmp	r4, #0
 801c0f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c0f8:	bf18      	it	ne
 801c0fa:	2500      	movne	r5, #0
 801c0fc:	4418      	add	r0, r3
 801c0fe:	e7b5      	b.n	801c06c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801c100:	3901      	subs	r1, #1
 801c102:	f80a 9c03 	strb.w	r9, [sl, #-3]
 801c106:	f80a 8c02 	strb.w	r8, [sl, #-2]
 801c10a:	f80a cc01 	strb.w	ip, [sl, #-1]
 801c10e:	b289      	uxth	r1, r1
 801c110:	e7dd      	b.n	801c0ce <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 801c112:	9f04      	ldr	r7, [sp, #16]
 801c114:	fb07 fa01 	mul.w	sl, r7, r1
 801c118:	f10a 0101 	add.w	r1, sl, #1
 801c11c:	eb01 212a 	add.w	r1, r1, sl, asr #8
 801c120:	1209      	asrs	r1, r1, #8
 801c122:	ea6f 0a01 	mvn.w	sl, r1
 801c126:	b289      	uxth	r1, r1
 801c128:	fb19 f901 	smulbb	r9, r9, r1
 801c12c:	fa5f fa8a 	uxtb.w	sl, sl
 801c130:	fb18 f801 	smulbb	r8, r8, r1
 801c134:	fb1c f101 	smulbb	r1, ip, r1
 801c138:	fa1f f789 	uxth.w	r7, r9
 801c13c:	4684      	mov	ip, r0
 801c13e:	4691      	mov	r9, r2
 801c140:	9707      	str	r7, [sp, #28]
 801c142:	b289      	uxth	r1, r1
 801c144:	fa1f f788 	uxth.w	r7, r8
 801c148:	9708      	str	r7, [sp, #32]
 801c14a:	f10c 0c03 	add.w	ip, ip, #3
 801c14e:	f1b9 0f00 	cmp.w	r9, #0
 801c152:	d0bf      	beq.n	801c0d4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801c154:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 801c158:	f109 39ff 	add.w	r9, r9, #4294967295
 801c15c:	9f07      	ldr	r7, [sp, #28]
 801c15e:	fa1f f989 	uxth.w	r9, r9
 801c162:	fb08 780a 	mla	r8, r8, sl, r7
 801c166:	9f08      	ldr	r7, [sp, #32]
 801c168:	fa1f f888 	uxth.w	r8, r8
 801c16c:	f108 0b01 	add.w	fp, r8, #1
 801c170:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c174:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c178:	f80c 8c03 	strb.w	r8, [ip, #-3]
 801c17c:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 801c180:	fb08 780a 	mla	r8, r8, sl, r7
 801c184:	fa1f f888 	uxth.w	r8, r8
 801c188:	f108 0b01 	add.w	fp, r8, #1
 801c18c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c190:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c194:	f80c 8c02 	strb.w	r8, [ip, #-2]
 801c198:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 801c19c:	fb08 180a 	mla	r8, r8, sl, r1
 801c1a0:	fa1f f888 	uxth.w	r8, r8
 801c1a4:	f108 0b01 	add.w	fp, r8, #1
 801c1a8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c1ac:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c1b0:	f80c 8c01 	strb.w	r8, [ip, #-1]
 801c1b4:	e7c9      	b.n	801c14a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 801c1b6:	4b04      	ldr	r3, [pc, #16]	@ (801c1c8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 801c1b8:	6818      	ldr	r0, [r3, #0]
 801c1ba:	6803      	ldr	r3, [r0, #0]
 801c1bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c1be:	4798      	blx	r3
 801c1c0:	b00f      	add	sp, #60	@ 0x3c
 801c1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1c6:	bf00      	nop
 801c1c8:	24026418 	.word	0x24026418
 801c1cc:	24026412 	.word	0x24026412

0801c1d0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801c1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1d4:	b089      	sub	sp, #36	@ 0x24
 801c1d6:	4607      	mov	r7, r0
 801c1d8:	4689      	mov	r9, r1
 801c1da:	4692      	mov	sl, r2
 801c1dc:	ac08      	add	r4, sp, #32
 801c1de:	461e      	mov	r6, r3
 801c1e0:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801c1e4:	4620      	mov	r0, r4
 801c1e6:	f7fd ff77 	bl	801a0d8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c1ea:	683b      	ldr	r3, [r7, #0]
 801c1ec:	4605      	mov	r5, r0
 801c1ee:	4620      	mov	r0, r4
 801c1f0:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801c1f4:	f7fd feb6 	bl	8019f64 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c1f8:	4683      	mov	fp, r0
 801c1fa:	4620      	mov	r0, r4
 801c1fc:	f7fd fee6 	bl	8019fcc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c200:	4653      	mov	r3, sl
 801c202:	464a      	mov	r2, r9
 801c204:	4639      	mov	r1, r7
 801c206:	9500      	str	r5, [sp, #0]
 801c208:	e9cd b001 	strd	fp, r0, [sp, #4]
 801c20c:	a806      	add	r0, sp, #24
 801c20e:	47c0      	blx	r8
 801c210:	a906      	add	r1, sp, #24
 801c212:	4630      	mov	r0, r6
 801c214:	f7fd fd8a 	bl	8019d2c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 801c218:	4628      	mov	r0, r5
 801c21a:	b009      	add	sp, #36	@ 0x24
 801c21c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c220 <_ZN8touchgfx8LCD24bppD0Ev>:
 801c220:	b510      	push	{r4, lr}
 801c222:	4604      	mov	r4, r0
 801c224:	216c      	movs	r1, #108	@ 0x6c
 801c226:	f008 fc60 	bl	8024aea <_ZdlPvj>
 801c22a:	4620      	mov	r0, r4
 801c22c:	bd10      	pop	{r4, pc}

0801c22e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 801c22e:	b510      	push	{r4, lr}
 801c230:	4604      	mov	r4, r0
 801c232:	2104      	movs	r1, #4
 801c234:	f008 fc59 	bl	8024aea <_ZdlPvj>
 801c238:	4620      	mov	r0, r4
 801c23a:	bd10      	pop	{r4, pc}

0801c23c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 801c23c:	b510      	push	{r4, lr}
 801c23e:	4604      	mov	r4, r0
 801c240:	2104      	movs	r1, #4
 801c242:	f008 fc52 	bl	8024aea <_ZdlPvj>
 801c246:	4620      	mov	r0, r4
 801c248:	bd10      	pop	{r4, pc}

0801c24a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 801c24a:	b510      	push	{r4, lr}
 801c24c:	4604      	mov	r4, r0
 801c24e:	f640 0144 	movw	r1, #2116	@ 0x844
 801c252:	f008 fc4a 	bl	8024aea <_ZdlPvj>
 801c256:	4620      	mov	r0, r4
 801c258:	bd10      	pop	{r4, pc}

0801c25a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID0Ev>:
 801c25a:	b510      	push	{r4, lr}
 801c25c:	4604      	mov	r4, r0
 801c25e:	f44f 7182 	mov.w	r1, #260	@ 0x104
 801c262:	f008 fc42 	bl	8024aea <_ZdlPvj>
 801c266:	4620      	mov	r0, r4
 801c268:	bd10      	pop	{r4, pc}

0801c26a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c26a:	b510      	push	{r4, lr}
 801c26c:	4604      	mov	r4, r0
 801c26e:	2104      	movs	r1, #4
 801c270:	f008 fc3b 	bl	8024aea <_ZdlPvj>
 801c274:	4620      	mov	r0, r4
 801c276:	bd10      	pop	{r4, pc}

0801c278 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801c278:	b510      	push	{r4, lr}
 801c27a:	4604      	mov	r4, r0
 801c27c:	2104      	movs	r1, #4
 801c27e:	f008 fc34 	bl	8024aea <_ZdlPvj>
 801c282:	4620      	mov	r0, r4
 801c284:	bd10      	pop	{r4, pc}

0801c286 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c286:	b510      	push	{r4, lr}
 801c288:	4604      	mov	r4, r0
 801c28a:	2104      	movs	r1, #4
 801c28c:	f008 fc2d 	bl	8024aea <_ZdlPvj>
 801c290:	4620      	mov	r0, r4
 801c292:	bd10      	pop	{r4, pc}

0801c294 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801c294:	b510      	push	{r4, lr}
 801c296:	4604      	mov	r4, r0
 801c298:	2104      	movs	r1, #4
 801c29a:	f008 fc26 	bl	8024aea <_ZdlPvj>
 801c29e:	4620      	mov	r0, r4
 801c2a0:	bd10      	pop	{r4, pc}

0801c2a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c2a2:	b510      	push	{r4, lr}
 801c2a4:	4604      	mov	r4, r0
 801c2a6:	2104      	movs	r1, #4
 801c2a8:	f008 fc1f 	bl	8024aea <_ZdlPvj>
 801c2ac:	4620      	mov	r0, r4
 801c2ae:	bd10      	pop	{r4, pc}

0801c2b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c2b0:	b510      	push	{r4, lr}
 801c2b2:	4604      	mov	r4, r0
 801c2b4:	2104      	movs	r1, #4
 801c2b6:	f008 fc18 	bl	8024aea <_ZdlPvj>
 801c2ba:	4620      	mov	r0, r4
 801c2bc:	bd10      	pop	{r4, pc}

0801c2be <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c2be:	b510      	push	{r4, lr}
 801c2c0:	4604      	mov	r4, r0
 801c2c2:	2104      	movs	r1, #4
 801c2c4:	f008 fc11 	bl	8024aea <_ZdlPvj>
 801c2c8:	4620      	mov	r0, r4
 801c2ca:	bd10      	pop	{r4, pc}

0801c2cc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c2cc:	b510      	push	{r4, lr}
 801c2ce:	4604      	mov	r4, r0
 801c2d0:	2104      	movs	r1, #4
 801c2d2:	f008 fc0a 	bl	8024aea <_ZdlPvj>
 801c2d6:	4620      	mov	r0, r4
 801c2d8:	bd10      	pop	{r4, pc}

0801c2da <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c2da:	b510      	push	{r4, lr}
 801c2dc:	4604      	mov	r4, r0
 801c2de:	2104      	movs	r1, #4
 801c2e0:	f008 fc03 	bl	8024aea <_ZdlPvj>
 801c2e4:	4620      	mov	r0, r4
 801c2e6:	bd10      	pop	{r4, pc}

0801c2e8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801c2e8:	b510      	push	{r4, lr}
 801c2ea:	4604      	mov	r4, r0
 801c2ec:	2104      	movs	r1, #4
 801c2ee:	f008 fbfc 	bl	8024aea <_ZdlPvj>
 801c2f2:	4620      	mov	r0, r4
 801c2f4:	bd10      	pop	{r4, pc}

0801c2f6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c2f6:	b510      	push	{r4, lr}
 801c2f8:	4604      	mov	r4, r0
 801c2fa:	2104      	movs	r1, #4
 801c2fc:	f008 fbf5 	bl	8024aea <_ZdlPvj>
 801c300:	4620      	mov	r0, r4
 801c302:	bd10      	pop	{r4, pc}

0801c304 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801c304:	b510      	push	{r4, lr}
 801c306:	4604      	mov	r4, r0
 801c308:	2104      	movs	r1, #4
 801c30a:	f008 fbee 	bl	8024aea <_ZdlPvj>
 801c30e:	4620      	mov	r0, r4
 801c310:	bd10      	pop	{r4, pc}

0801c312 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c312:	b510      	push	{r4, lr}
 801c314:	4604      	mov	r4, r0
 801c316:	2104      	movs	r1, #4
 801c318:	f008 fbe7 	bl	8024aea <_ZdlPvj>
 801c31c:	4620      	mov	r0, r4
 801c31e:	bd10      	pop	{r4, pc}

0801c320 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c320:	b510      	push	{r4, lr}
 801c322:	4604      	mov	r4, r0
 801c324:	2104      	movs	r1, #4
 801c326:	f008 fbe0 	bl	8024aea <_ZdlPvj>
 801c32a:	4620      	mov	r0, r4
 801c32c:	bd10      	pop	{r4, pc}

0801c32e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c32e:	b510      	push	{r4, lr}
 801c330:	4604      	mov	r4, r0
 801c332:	2104      	movs	r1, #4
 801c334:	f008 fbd9 	bl	8024aea <_ZdlPvj>
 801c338:	4620      	mov	r0, r4
 801c33a:	bd10      	pop	{r4, pc}

0801c33c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c33c:	b510      	push	{r4, lr}
 801c33e:	4604      	mov	r4, r0
 801c340:	2104      	movs	r1, #4
 801c342:	f008 fbd2 	bl	8024aea <_ZdlPvj>
 801c346:	4620      	mov	r0, r4
 801c348:	bd10      	pop	{r4, pc}

0801c34a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801c34a:	b510      	push	{r4, lr}
 801c34c:	4604      	mov	r4, r0
 801c34e:	2104      	movs	r1, #4
 801c350:	f008 fbcb 	bl	8024aea <_ZdlPvj>
 801c354:	4620      	mov	r0, r4
 801c356:	bd10      	pop	{r4, pc}

0801c358 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801c358:	b510      	push	{r4, lr}
 801c35a:	4604      	mov	r4, r0
 801c35c:	2104      	movs	r1, #4
 801c35e:	f008 fbc4 	bl	8024aea <_ZdlPvj>
 801c362:	4620      	mov	r0, r4
 801c364:	bd10      	pop	{r4, pc}

0801c366 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801c366:	b510      	push	{r4, lr}
 801c368:	4604      	mov	r4, r0
 801c36a:	2104      	movs	r1, #4
 801c36c:	f008 fbbd 	bl	8024aea <_ZdlPvj>
 801c370:	4620      	mov	r0, r4
 801c372:	bd10      	pop	{r4, pc}

0801c374 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801c374:	b510      	push	{r4, lr}
 801c376:	4604      	mov	r4, r0
 801c378:	2104      	movs	r1, #4
 801c37a:	f008 fbb6 	bl	8024aea <_ZdlPvj>
 801c37e:	4620      	mov	r0, r4
 801c380:	bd10      	pop	{r4, pc}
	...

0801c384 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801c384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c388:	b08f      	sub	sp, #60	@ 0x3c
 801c38a:	461c      	mov	r4, r3
 801c38c:	460e      	mov	r6, r1
 801c38e:	9206      	str	r2, [sp, #24]
 801c390:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801c394:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801c396:	9202      	str	r2, [sp, #8]
 801c398:	2a00      	cmp	r2, #0
 801c39a:	f000 8128 	beq.w	801c5ee <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 801c39e:	6820      	ldr	r0, [r4, #0]
 801c3a0:	aa0a      	add	r2, sp, #40	@ 0x28
 801c3a2:	6861      	ldr	r1, [r4, #4]
 801c3a4:	c203      	stmia	r2!, {r0, r1}
 801c3a6:	6818      	ldr	r0, [r3, #0]
 801c3a8:	aa0c      	add	r2, sp, #48	@ 0x30
 801c3aa:	6859      	ldr	r1, [r3, #4]
 801c3ac:	c203      	stmia	r2!, {r0, r1}
 801c3ae:	a80a      	add	r0, sp, #40	@ 0x28
 801c3b0:	f7fa fa18 	bl	80167e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c3b4:	4621      	mov	r1, r4
 801c3b6:	a80c      	add	r0, sp, #48	@ 0x30
 801c3b8:	f7fa fa3c 	bl	8016834 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c3bc:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 801c3c0:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801c3c4:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 801c3c8:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801c3cc:	bfdb      	ittet	le
 801c3ce:	b2bb      	uxthle	r3, r7
 801c3d0:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801c3d4:	2301      	movgt	r3, #1
 801c3d6:	fb92 f3f3 	sdivle	r3, r2, r3
 801c3da:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801c3de:	441d      	add	r5, r3
 801c3e0:	fb92 f1f3 	sdiv	r1, r2, r3
 801c3e4:	fa1f fc81 	uxth.w	ip, r1
 801c3e8:	3d01      	subs	r5, #1
 801c3ea:	fb0c 2413 	mls	r4, ip, r3, r2
 801c3ee:	4661      	mov	r1, ip
 801c3f0:	fb14 f407 	smulbb	r4, r4, r7
 801c3f4:	4404      	add	r4, r0
 801c3f6:	fb95 f5f3 	sdiv	r5, r5, r3
 801c3fa:	b2a4      	uxth	r4, r4
 801c3fc:	b121      	cbz	r1, 801c408 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 801c3fe:	9b06      	ldr	r3, [sp, #24]
 801c400:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801c404:	ba1b      	rev	r3, r3
 801c406:	441e      	add	r6, r3
 801c408:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801c40c:	b2ad      	uxth	r5, r5
 801c40e:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 801c412:	4418      	add	r0, r3
 801c414:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801c418:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 801c41c:	00ad      	lsls	r5, r5, #2
 801c41e:	441a      	add	r2, r3
 801c420:	4b74      	ldr	r3, [pc, #464]	@ (801c5f4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801c422:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801c426:	6818      	ldr	r0, [r3, #0]
 801c428:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801c42c:	6803      	ldr	r3, [r0, #0]
 801c42e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c430:	4798      	blx	r3
 801c432:	4a71      	ldr	r2, [pc, #452]	@ (801c5f8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 801c434:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801c438:	2c00      	cmp	r4, #0
 801c43a:	8813      	ldrh	r3, [r2, #0]
 801c43c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801c440:	9209      	str	r2, [sp, #36]	@ 0x24
 801c442:	fb03 c101 	mla	r1, r3, r1, ip
 801c446:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801c44a:	fb03 f307 	mul.w	r3, r3, r7
 801c44e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c452:	9204      	str	r2, [sp, #16]
 801c454:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c458:	9a02      	ldr	r2, [sp, #8]
 801c45a:	4408      	add	r0, r1
 801c45c:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 801c460:	4403      	add	r3, r0
 801c462:	b292      	uxth	r2, r2
 801c464:	9307      	str	r3, [sp, #28]
 801c466:	f105 0304 	add.w	r3, r5, #4
 801c46a:	bf0c      	ite	eq
 801c46c:	4645      	moveq	r5, r8
 801c46e:	2500      	movne	r5, #0
 801c470:	9308      	str	r3, [sp, #32]
 801c472:	2300      	movs	r3, #0
 801c474:	b2ad      	uxth	r5, r5
 801c476:	9205      	str	r2, [sp, #20]
 801c478:	9303      	str	r3, [sp, #12]
 801c47a:	9a07      	ldr	r2, [sp, #28]
 801c47c:	4282      	cmp	r2, r0
 801c47e:	f240 80b1 	bls.w	801c5e4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 801c482:	b95b      	cbnz	r3, 801c49c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 801c484:	7832      	ldrb	r2, [r6, #0]
 801c486:	0993      	lsrs	r3, r2, #6
 801c488:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801c48c:	9203      	str	r2, [sp, #12]
 801c48e:	1e5a      	subs	r2, r3, #1
 801c490:	2a02      	cmp	r2, #2
 801c492:	bf8d      	iteet	hi
 801c494:	7873      	ldrbhi	r3, [r6, #1]
 801c496:	3601      	addls	r6, #1
 801c498:	b29b      	uxthls	r3, r3
 801c49a:	3602      	addhi	r6, #2
 801c49c:	b184      	cbz	r4, 801c4c0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 801c49e:	429c      	cmp	r4, r3
 801c4a0:	bf91      	iteee	ls
 801c4a2:	1b1c      	subls	r4, r3, r4
 801c4a4:	1ae4      	subhi	r4, r4, r3
 801c4a6:	4629      	movhi	r1, r5
 801c4a8:	f04f 0e00 	movhi.w	lr, #0
 801c4ac:	bf9b      	ittet	ls
 801c4ae:	fa1f fe84 	uxthls.w	lr, r4
 801c4b2:	2400      	movls	r4, #0
 801c4b4:	b2a4      	uxthhi	r4, r4
 801c4b6:	fa1f f188 	uxthls.w	r1, r8
 801c4ba:	4673      	mov	r3, lr
 801c4bc:	460d      	mov	r5, r1
 801c4be:	e7dc      	b.n	801c47a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 801c4c0:	2203      	movs	r2, #3
 801c4c2:	9908      	ldr	r1, [sp, #32]
 801c4c4:	42ab      	cmp	r3, r5
 801c4c6:	4617      	mov	r7, r2
 801c4c8:	9a03      	ldr	r2, [sp, #12]
 801c4ca:	bf24      	itt	cs
 801c4cc:	eba3 0e05 	subcs.w	lr, r3, r5
 801c4d0:	9501      	strcs	r5, [sp, #4]
 801c4d2:	fb17 1702 	smlabb	r7, r7, r2, r1
 801c4d6:	9a06      	ldr	r2, [sp, #24]
 801c4d8:	bf34      	ite	cc
 801c4da:	1ae9      	subcc	r1, r5, r3
 801c4dc:	fa1f fe8e 	uxthcs.w	lr, lr
 801c4e0:	4417      	add	r7, r2
 801c4e2:	9a02      	ldr	r2, [sp, #8]
 801c4e4:	bf2f      	iteee	cs
 801c4e6:	4621      	movcs	r1, r4
 801c4e8:	b289      	uxthcc	r1, r1
 801c4ea:	9301      	strcc	r3, [sp, #4]
 801c4ec:	46a6      	movcc	lr, r4
 801c4ee:	2aff      	cmp	r2, #255	@ 0xff
 801c4f0:	d11e      	bne.n	801c530 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 801c4f2:	4681      	mov	r9, r0
 801c4f4:	f8dd c004 	ldr.w	ip, [sp, #4]
 801c4f8:	f109 0903 	add.w	r9, r9, #3
 801c4fc:	f1bc 0f00 	cmp.w	ip, #0
 801c500:	d15f      	bne.n	801c5c2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 801c502:	9a01      	ldr	r2, [sp, #4]
 801c504:	42ab      	cmp	r3, r5
 801c506:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c50a:	4410      	add	r0, r2
 801c50c:	d3d5      	bcc.n	801c4ba <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801c50e:	fa1f f188 	uxth.w	r1, r8
 801c512:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801c516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c518:	1a64      	subs	r4, r4, r1
 801c51a:	881b      	ldrh	r3, [r3, #0]
 801c51c:	b2a4      	uxth	r4, r4
 801c51e:	eba3 0308 	sub.w	r3, r3, r8
 801c522:	2c00      	cmp	r4, #0
 801c524:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c528:	bf18      	it	ne
 801c52a:	2100      	movne	r1, #0
 801c52c:	4418      	add	r0, r3
 801c52e:	e7c4      	b.n	801c4ba <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801c530:	4684      	mov	ip, r0
 801c532:	f8dd a004 	ldr.w	sl, [sp, #4]
 801c536:	f10c 0c03 	add.w	ip, ip, #3
 801c53a:	f1ba 0f00 	cmp.w	sl, #0
 801c53e:	d0e0      	beq.n	801c502 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 801c540:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 801c544:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c548:	9a05      	ldr	r2, [sp, #20]
 801c54a:	f897 9000 	ldrb.w	r9, [r7]
 801c54e:	fa1f fa8a 	uxth.w	sl, sl
 801c552:	fb1b fb02 	smulbb	fp, fp, r2
 801c556:	9a04      	ldr	r2, [sp, #16]
 801c558:	fb09 b902 	mla	r9, r9, r2, fp
 801c55c:	9a05      	ldr	r2, [sp, #20]
 801c55e:	fa1f f989 	uxth.w	r9, r9
 801c562:	f109 0b01 	add.w	fp, r9, #1
 801c566:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c56a:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 801c56e:	fb1b fb02 	smulbb	fp, fp, r2
 801c572:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c576:	9a04      	ldr	r2, [sp, #16]
 801c578:	f80c 9c03 	strb.w	r9, [ip, #-3]
 801c57c:	f897 9001 	ldrb.w	r9, [r7, #1]
 801c580:	fb09 b902 	mla	r9, r9, r2, fp
 801c584:	9a05      	ldr	r2, [sp, #20]
 801c586:	fa1f f989 	uxth.w	r9, r9
 801c58a:	f109 0b01 	add.w	fp, r9, #1
 801c58e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c592:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 801c596:	fb1b fb02 	smulbb	fp, fp, r2
 801c59a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c59e:	9a04      	ldr	r2, [sp, #16]
 801c5a0:	f80c 9c02 	strb.w	r9, [ip, #-2]
 801c5a4:	f897 9002 	ldrb.w	r9, [r7, #2]
 801c5a8:	fb09 b902 	mla	r9, r9, r2, fp
 801c5ac:	fa1f f989 	uxth.w	r9, r9
 801c5b0:	f109 0b01 	add.w	fp, r9, #1
 801c5b4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c5b8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c5bc:	f80c 9c01 	strb.w	r9, [ip, #-1]
 801c5c0:	e7b9      	b.n	801c536 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 801c5c2:	f897 a000 	ldrb.w	sl, [r7]
 801c5c6:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c5ca:	f809 ac03 	strb.w	sl, [r9, #-3]
 801c5ce:	fa1f fc8c 	uxth.w	ip, ip
 801c5d2:	f897 a001 	ldrb.w	sl, [r7, #1]
 801c5d6:	f809 ac02 	strb.w	sl, [r9, #-2]
 801c5da:	f897 a002 	ldrb.w	sl, [r7, #2]
 801c5de:	f809 ac01 	strb.w	sl, [r9, #-1]
 801c5e2:	e789      	b.n	801c4f8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 801c5e4:	4b03      	ldr	r3, [pc, #12]	@ (801c5f4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801c5e6:	6818      	ldr	r0, [r3, #0]
 801c5e8:	6803      	ldr	r3, [r0, #0]
 801c5ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c5ec:	4798      	blx	r3
 801c5ee:	b00f      	add	sp, #60	@ 0x3c
 801c5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5f4:	24026418 	.word	0x24026418
 801c5f8:	24026412 	.word	0x24026412

0801c5fc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801c5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c600:	b09b      	sub	sp, #108	@ 0x6c
 801c602:	461d      	mov	r5, r3
 801c604:	4604      	mov	r4, r0
 801c606:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c608:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
 801c60c:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 801c610:	9208      	str	r2, [sp, #32]
 801c612:	2a00      	cmp	r2, #0
 801c614:	f000 81f3 	beq.w	801c9fe <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 801c618:	6828      	ldr	r0, [r5, #0]
 801c61a:	aa16      	add	r2, sp, #88	@ 0x58
 801c61c:	6869      	ldr	r1, [r5, #4]
 801c61e:	c203      	stmia	r2!, {r0, r1}
 801c620:	6818      	ldr	r0, [r3, #0]
 801c622:	aa18      	add	r2, sp, #96	@ 0x60
 801c624:	6859      	ldr	r1, [r3, #4]
 801c626:	c203      	stmia	r2!, {r0, r1}
 801c628:	a816      	add	r0, sp, #88	@ 0x58
 801c62a:	f7fa f8db 	bl	80167e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c62e:	4629      	mov	r1, r5
 801c630:	a818      	add	r0, sp, #96	@ 0x60
 801c632:	f7fa f8ff 	bl	8016834 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c636:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 801c63a:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	@ 0x5e
 801c63e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801c642:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 801c646:	bfdb      	ittet	le
 801c648:	b29a      	uxthle	r2, r3
 801c64a:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801c64e:	f04f 0a01 	movgt.w	sl, #1
 801c652:	fb91 faf2 	sdivle	sl, r1, r2
 801c656:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 801c65a:	4456      	add	r6, sl
 801c65c:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 801c660:	3e01      	subs	r6, #1
 801c662:	fb92 f0fa 	sdiv	r0, r2, sl
 801c666:	b280      	uxth	r0, r0
 801c668:	fb00 281a 	mls	r8, r0, sl, r2
 801c66c:	900e      	str	r0, [sp, #56]	@ 0x38
 801c66e:	fb18 f803 	smulbb	r8, r8, r3
 801c672:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 801c676:	4488      	add	r8, r1
 801c678:	4419      	add	r1, r3
 801c67a:	f8bd 305a 	ldrh.w	r3, [sp, #90]	@ 0x5a
 801c67e:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 801c682:	fa1f f888 	uxth.w	r8, r8
 801c686:	441a      	add	r2, r3
 801c688:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801c68c:	9303      	str	r3, [sp, #12]
 801c68e:	4b9c      	ldr	r3, [pc, #624]	@ (801c900 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 801c690:	f8ad 2062 	strh.w	r2, [sp, #98]	@ 0x62
 801c694:	6818      	ldr	r0, [r3, #0]
 801c696:	6803      	ldr	r3, [r0, #0]
 801c698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c69a:	4798      	blx	r3
 801c69c:	4b99      	ldr	r3, [pc, #612]	@ (801c904 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 801c69e:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	@ 0x62
 801c6a2:	f1b8 0f00 	cmp.w	r8, #0
 801c6a6:	881a      	ldrh	r2, [r3, #0]
 801c6a8:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	@ 0x60
 801c6ac:	fb02 f505 	mul.w	r5, r2, r5
 801c6b0:	fb02 7101 	mla	r1, r2, r1, r7
 801c6b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c6b8:	9314      	str	r3, [sp, #80]	@ 0x50
 801c6ba:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c6be:	9b08      	ldr	r3, [sp, #32]
 801c6c0:	fb96 f6fa 	sdiv	r6, r6, sl
 801c6c4:	4408      	add	r0, r1
 801c6c6:	f106 0601 	add.w	r6, r6, #1
 801c6ca:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 801c6ce:	f04f 0100 	mov.w	r1, #0
 801c6d2:	eb00 0205 	add.w	r2, r0, r5
 801c6d6:	b2b6      	uxth	r6, r6
 801c6d8:	b29b      	uxth	r3, r3
 801c6da:	910b      	str	r1, [sp, #44]	@ 0x2c
 801c6dc:	9209      	str	r2, [sp, #36]	@ 0x24
 801c6de:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c6e0:	930d      	str	r3, [sp, #52]	@ 0x34
 801c6e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801c6e6:	4b88      	ldr	r3, [pc, #544]	@ (801c908 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 801c6e8:	f106 0204 	add.w	r2, r6, #4
 801c6ec:	eba3 0304 	sub.w	r3, r3, r4
 801c6f0:	9205      	str	r2, [sp, #20]
 801c6f2:	9a03      	ldr	r2, [sp, #12]
 801c6f4:	bf18      	it	ne
 801c6f6:	2200      	movne	r2, #0
 801c6f8:	9315      	str	r3, [sp, #84]	@ 0x54
 801c6fa:	b292      	uxth	r2, r2
 801c6fc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801c6fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c700:	fa11 f383 	uxtah	r3, r1, r3
 801c704:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801c706:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801c70a:	3304      	adds	r3, #4
 801c70c:	9306      	str	r3, [sp, #24]
 801c70e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c710:	4283      	cmp	r3, r0
 801c712:	f240 816f 	bls.w	801c9f4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 801c716:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 801c71a:	f04f 0900 	mov.w	r9, #0
 801c71e:	9d06      	ldr	r5, [sp, #24]
 801c720:	fbb8 f3f3 	udiv	r3, r8, r3
 801c724:	ebaa 0303 	sub.w	r3, sl, r3
 801c728:	782d      	ldrb	r5, [r5, #0]
 801c72a:	b29b      	uxth	r3, r3
 801c72c:	950f      	str	r5, [sp, #60]	@ 0x3c
 801c72e:	3501      	adds	r5, #1
 801c730:	9312      	str	r3, [sp, #72]	@ 0x48
 801c732:	9b06      	ldr	r3, [sp, #24]
 801c734:	9504      	str	r5, [sp, #16]
 801c736:	7859      	ldrb	r1, [r3, #1]
 801c738:	789b      	ldrb	r3, [r3, #2]
 801c73a:	021b      	lsls	r3, r3, #8
 801c73c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801c740:	9906      	ldr	r1, [sp, #24]
 801c742:	78c9      	ldrb	r1, [r1, #3]
 801c744:	430b      	orrs	r3, r1
 801c746:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801c748:	4419      	add	r1, r3
 801c74a:	1c4d      	adds	r5, r1, #1
 801c74c:	7849      	ldrb	r1, [r1, #1]
 801c74e:	9502      	str	r5, [sp, #8]
 801c750:	0209      	lsls	r1, r1, #8
 801c752:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801c754:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 801c758:	5ceb      	ldrb	r3, [r5, r3]
 801c75a:	4319      	orrs	r1, r3
 801c75c:	b28b      	uxth	r3, r1
 801c75e:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801c762:	930a      	str	r3, [sp, #40]	@ 0x28
 801c764:	2300      	movs	r3, #0
 801c766:	9307      	str	r3, [sp, #28]
 801c768:	2301      	movs	r3, #1
 801c76a:	e9cd 3300 	strd	r3, r3, [sp]
 801c76e:	469c      	mov	ip, r3
 801c770:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801c774:	930c      	str	r3, [sp, #48]	@ 0x30
 801c776:	f1b8 0f00 	cmp.w	r8, #0
 801c77a:	f000 8082 	beq.w	801c882 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 801c77e:	45c4      	cmp	ip, r8
 801c780:	d270      	bcs.n	801c864 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 801c782:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c784:	eba8 080c 	sub.w	r8, r8, ip
 801c788:	4611      	mov	r1, r2
 801c78a:	4283      	cmp	r3, r0
 801c78c:	fa1f f888 	uxth.w	r8, r8
 801c790:	d802      	bhi.n	801c798 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 801c792:	e074      	b.n	801c87e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 801c794:	2b00      	cmp	r3, #0
 801c796:	d15f      	bne.n	801c858 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 801c798:	9b02      	ldr	r3, [sp, #8]
 801c79a:	9a01      	ldr	r2, [sp, #4]
 801c79c:	785b      	ldrb	r3, [r3, #1]
 801c79e:	f1c2 0207 	rsb	r2, r2, #7
 801c7a2:	9d01      	ldr	r5, [sp, #4]
 801c7a4:	4093      	lsls	r3, r2
 801c7a6:	005b      	lsls	r3, r3, #1
 801c7a8:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801c7ac:	9b02      	ldr	r3, [sp, #8]
 801c7ae:	781b      	ldrb	r3, [r3, #0]
 801c7b0:	412b      	asrs	r3, r5
 801c7b2:	b2db      	uxtb	r3, r3
 801c7b4:	4313      	orrs	r3, r2
 801c7b6:	462a      	mov	r2, r5
 801c7b8:	3201      	adds	r2, #1
 801c7ba:	b29e      	uxth	r6, r3
 801c7bc:	b2d2      	uxtb	r2, r2
 801c7be:	2a08      	cmp	r2, #8
 801c7c0:	9201      	str	r2, [sp, #4]
 801c7c2:	9a02      	ldr	r2, [sp, #8]
 801c7c4:	bf09      	itett	eq
 801c7c6:	3202      	addeq	r2, #2
 801c7c8:	3201      	addne	r2, #1
 801c7ca:	9202      	streq	r2, [sp, #8]
 801c7cc:	2200      	moveq	r2, #0
 801c7ce:	bf14      	ite	ne
 801c7d0:	9202      	strne	r2, [sp, #8]
 801c7d2:	9201      	streq	r2, [sp, #4]
 801c7d4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c7d6:	42b2      	cmp	r2, r6
 801c7d8:	d309      	bcc.n	801c7ee <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801c7da:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801c7de:	2301      	movs	r3, #1
 801c7e0:	9a04      	ldr	r2, [sp, #16]
 801c7e2:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 801c7e6:	d30e      	bcc.n	801c806 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 801c7e8:	9300      	str	r3, [sp, #0]
 801c7ea:	2500      	movs	r5, #0
 801c7ec:	e035      	b.n	801c85a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 801c7ee:	9b04      	ldr	r3, [sp, #16]
 801c7f0:	429e      	cmp	r6, r3
 801c7f2:	d318      	bcc.n	801c826 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 801c7f4:	9b00      	ldr	r3, [sp, #0]
 801c7f6:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 801c7fa:	18e3      	adds	r3, r4, r3
 801c7fc:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 801c800:	9b00      	ldr	r3, [sp, #0]
 801c802:	3301      	adds	r3, #1
 801c804:	b29b      	uxth	r3, r3
 801c806:	9a04      	ldr	r2, [sp, #16]
 801c808:	f894 5804 	ldrb.w	r5, [r4, #2052]	@ 0x804
 801c80c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801c810:	9f00      	ldr	r7, [sp, #0]
 801c812:	7115      	strb	r5, [r2, #4]
 801c814:	3701      	adds	r7, #1
 801c816:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801c818:	7157      	strb	r7, [r2, #5]
 801c81a:	80d5      	strh	r5, [r2, #6]
 801c81c:	9a04      	ldr	r2, [sp, #16]
 801c81e:	3201      	adds	r2, #1
 801c820:	b292      	uxth	r2, r2
 801c822:	9204      	str	r2, [sp, #16]
 801c824:	e7e0      	b.n	801c7e8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 801c826:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801c82a:	4632      	mov	r2, r6
 801c82c:	795b      	ldrb	r3, [r3, #5]
 801c82e:	f603 0504 	addw	r5, r3, #2052	@ 0x804
 801c832:	4425      	add	r5, r4
 801c834:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801c836:	eb07 0c05 	add.w	ip, r7, r5
 801c83a:	f1bc 0f00 	cmp.w	ip, #0
 801c83e:	dd07      	ble.n	801c850 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 801c840:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801c844:	f892 c004 	ldrb.w	ip, [r2, #4]
 801c848:	f805 cd01 	strb.w	ip, [r5, #-1]!
 801c84c:	88d2      	ldrh	r2, [r2, #6]
 801c84e:	e7f1      	b.n	801c834 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 801c850:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801c854:	b29b      	uxth	r3, r3
 801c856:	e7c3      	b.n	801c7e0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 801c858:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801c85a:	460a      	mov	r2, r1
 801c85c:	960a      	str	r6, [sp, #40]	@ 0x28
 801c85e:	46a9      	mov	r9, r5
 801c860:	469c      	mov	ip, r3
 801c862:	e788      	b.n	801c776 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 801c864:	ebac 0308 	sub.w	r3, ip, r8
 801c868:	eb09 0508 	add.w	r5, r9, r8
 801c86c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801c870:	b29b      	uxth	r3, r3
 801c872:	b2ad      	uxth	r5, r5
 801c874:	f04f 0800 	mov.w	r8, #0
 801c878:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c87a:	4282      	cmp	r2, r0
 801c87c:	d88a      	bhi.n	801c794 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 801c87e:	460a      	mov	r2, r1
 801c880:	e745      	b.n	801c70e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 801c882:	4594      	cmp	ip, r2
 801c884:	9d08      	ldr	r5, [sp, #32]
 801c886:	4686      	mov	lr, r0
 801c888:	bf27      	ittee	cs
 801c88a:	ebac 0302 	subcs.w	r3, ip, r2
 801c88e:	4616      	movcs	r6, r2
 801c890:	eba2 010c 	subcc.w	r1, r2, ip
 801c894:	4666      	movcc	r6, ip
 801c896:	bf27      	ittee	cs
 801c898:	b29b      	uxthcs	r3, r3
 801c89a:	4641      	movcs	r1, r8
 801c89c:	b289      	uxthcc	r1, r1
 801c89e:	4643      	movcc	r3, r8
 801c8a0:	2dff      	cmp	r5, #255	@ 0xff
 801c8a2:	eb09 0506 	add.w	r5, r9, r6
 801c8a6:	b2ad      	uxth	r5, r5
 801c8a8:	d130      	bne.n	801c90c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801c8aa:	45a9      	cmp	r9, r5
 801c8ac:	f10e 0e03 	add.w	lr, lr, #3
 801c8b0:	d17a      	bne.n	801c9a8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 801c8b2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c8b6:	4594      	cmp	ip, r2
 801c8b8:	4430      	add	r0, r6
 801c8ba:	d3db      	bcc.n	801c874 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 801c8bc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c8be:	9903      	ldr	r1, [sp, #12]
 801c8c0:	8812      	ldrh	r2, [r2, #0]
 801c8c2:	1a52      	subs	r2, r2, r1
 801c8c4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801c8c6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c8ca:	4410      	add	r0, r2
 801c8cc:	9a07      	ldr	r2, [sp, #28]
 801c8ce:	3201      	adds	r2, #1
 801c8d0:	428a      	cmp	r2, r1
 801c8d2:	9207      	str	r2, [sp, #28]
 801c8d4:	f040 8081 	bne.w	801c9da <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 801c8d8:	f8bd 8060 	ldrh.w	r8, [sp, #96]	@ 0x60
 801c8dc:	f8bd c058 	ldrh.w	ip, [sp, #88]	@ 0x58
 801c8e0:	9b03      	ldr	r3, [sp, #12]
 801c8e2:	eba8 080c 	sub.w	r8, r8, ip
 801c8e6:	fa1f f888 	uxth.w	r8, r8
 801c8ea:	f1b8 0f00 	cmp.w	r8, #0
 801c8ee:	bf08      	it	eq
 801c8f0:	461a      	moveq	r2, r3
 801c8f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c8f4:	bf18      	it	ne
 801c8f6:	2200      	movne	r2, #0
 801c8f8:	3301      	adds	r3, #1
 801c8fa:	b292      	uxth	r2, r2
 801c8fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c8fe:	e6fd      	b.n	801c6fc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 801c900:	24026418 	.word	0x24026418
 801c904:	24026412 	.word	0x24026412
 801c908:	fffff7fb 	.word	0xfffff7fb
 801c90c:	45a9      	cmp	r9, r5
 801c90e:	f10e 0e03 	add.w	lr, lr, #3
 801c912:	d0ce      	beq.n	801c8b2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 801c914:	f109 0701 	add.w	r7, r9, #1
 801c918:	44a1      	add	r9, r4
 801c91a:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 801c91e:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 801c922:	9713      	str	r7, [sp, #76]	@ 0x4c
 801c924:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c928:	9f05      	ldr	r7, [sp, #20]
 801c92a:	eb07 0908 	add.w	r9, r7, r8
 801c92e:	f817 8008 	ldrb.w	r8, [r7, r8]
 801c932:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801c934:	fb1b fb07 	smulbb	fp, fp, r7
 801c938:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801c93a:	fb08 b807 	mla	r8, r8, r7, fp
 801c93e:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801c940:	fa1f f888 	uxth.w	r8, r8
 801c944:	f108 0b01 	add.w	fp, r8, #1
 801c948:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c94c:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 801c950:	fb1b fb07 	smulbb	fp, fp, r7
 801c954:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c958:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801c95a:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801c95e:	f899 8001 	ldrb.w	r8, [r9, #1]
 801c962:	fb08 b807 	mla	r8, r8, r7, fp
 801c966:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801c968:	fa1f f888 	uxth.w	r8, r8
 801c96c:	f108 0b01 	add.w	fp, r8, #1
 801c970:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c974:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c978:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801c97c:	f899 8002 	ldrb.w	r8, [r9, #2]
 801c980:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 801c984:	fb19 f907 	smulbb	r9, r9, r7
 801c988:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801c98a:	fb08 9807 	mla	r8, r8, r7, r9
 801c98e:	fa1f f888 	uxth.w	r8, r8
 801c992:	f108 0901 	add.w	r9, r8, #1
 801c996:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 801c99a:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 801c99e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c9a2:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801c9a6:	e7b1      	b.n	801c90c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801c9a8:	f109 0b01 	add.w	fp, r9, #1
 801c9ac:	44a1      	add	r9, r4
 801c9ae:	9f05      	ldr	r7, [sp, #20]
 801c9b0:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 801c9b4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c9b8:	eb07 0908 	add.w	r9, r7, r8
 801c9bc:	f817 8008 	ldrb.w	r8, [r7, r8]
 801c9c0:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801c9c4:	f899 8001 	ldrb.w	r8, [r9, #1]
 801c9c8:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801c9cc:	f899 8002 	ldrb.w	r8, [r9, #2]
 801c9d0:	fa1f f98b 	uxth.w	r9, fp
 801c9d4:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801c9d8:	e767      	b.n	801c8aa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 801c9da:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801c9de:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 801c9e2:	eba8 0801 	sub.w	r8, r8, r1
 801c9e6:	fa1f f888 	uxth.w	r8, r8
 801c9ea:	f1b8 0f00 	cmp.w	r8, #0
 801c9ee:	bf18      	it	ne
 801c9f0:	2100      	movne	r1, #0
 801c9f2:	e741      	b.n	801c878 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 801c9f4:	4b03      	ldr	r3, [pc, #12]	@ (801ca04 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 801c9f6:	6818      	ldr	r0, [r3, #0]
 801c9f8:	6803      	ldr	r3, [r0, #0]
 801c9fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c9fc:	4798      	blx	r3
 801c9fe:	b01b      	add	sp, #108	@ 0x6c
 801ca00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca04:	24026418 	.word	0x24026418

0801ca08 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801ca08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca0c:	b09d      	sub	sp, #116	@ 0x74
 801ca0e:	461d      	mov	r5, r3
 801ca10:	4604      	mov	r4, r0
 801ca12:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801ca14:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
 801ca18:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 801ca1c:	920c      	str	r2, [sp, #48]	@ 0x30
 801ca1e:	2a00      	cmp	r2, #0
 801ca20:	f000 81de 	beq.w	801cde0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 801ca24:	6828      	ldr	r0, [r5, #0]
 801ca26:	aa18      	add	r2, sp, #96	@ 0x60
 801ca28:	6869      	ldr	r1, [r5, #4]
 801ca2a:	c203      	stmia	r2!, {r0, r1}
 801ca2c:	6818      	ldr	r0, [r3, #0]
 801ca2e:	aa1a      	add	r2, sp, #104	@ 0x68
 801ca30:	6859      	ldr	r1, [r3, #4]
 801ca32:	c203      	stmia	r2!, {r0, r1}
 801ca34:	a818      	add	r0, sp, #96	@ 0x60
 801ca36:	f7f9 fed5 	bl	80167e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ca3a:	4629      	mov	r1, r5
 801ca3c:	a81a      	add	r0, sp, #104	@ 0x68
 801ca3e:	f7f9 fef9 	bl	8016834 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ca42:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801ca46:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	@ 0x66
 801ca4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801ca4e:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 801ca52:	bfdb      	ittet	le
 801ca54:	b29a      	uxthle	r2, r3
 801ca56:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801ca5a:	2201      	movgt	r2, #1
 801ca5c:	fb91 f2f2 	sdivle	r2, r1, r2
 801ca60:	9201      	str	r2, [sp, #4]
 801ca62:	9801      	ldr	r0, [sp, #4]
 801ca64:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 801ca68:	9901      	ldr	r1, [sp, #4]
 801ca6a:	fb92 f0f0 	sdiv	r0, r2, r0
 801ca6e:	b280      	uxth	r0, r0
 801ca70:	440f      	add	r7, r1
 801ca72:	900d      	str	r0, [sp, #52]	@ 0x34
 801ca74:	3f01      	subs	r7, #1
 801ca76:	9801      	ldr	r0, [sp, #4]
 801ca78:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801ca7a:	fb05 2510 	mls	r5, r5, r0, r2
 801ca7e:	fb97 f7f1 	sdiv	r7, r7, r1
 801ca82:	fb15 f503 	smulbb	r5, r5, r3
 801ca86:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 801ca8a:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 801ca8e:	3701      	adds	r7, #1
 801ca90:	440d      	add	r5, r1
 801ca92:	4419      	add	r1, r3
 801ca94:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 801ca98:	b2bf      	uxth	r7, r7
 801ca9a:	441a      	add	r2, r3
 801ca9c:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 801caa0:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 801caa4:	00bf      	lsls	r7, r7, #2
 801caa6:	9304      	str	r3, [sp, #16]
 801caa8:	b2ad      	uxth	r5, r5
 801caaa:	4bb0      	ldr	r3, [pc, #704]	@ (801cd6c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 801caac:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 801cab0:	6818      	ldr	r0, [r3, #0]
 801cab2:	6803      	ldr	r3, [r0, #0]
 801cab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cab6:	4798      	blx	r3
 801cab8:	4bad      	ldr	r3, [pc, #692]	@ (801cd70 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 801caba:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 801cabe:	2d00      	cmp	r5, #0
 801cac0:	881a      	ldrh	r2, [r3, #0]
 801cac2:	f9bd c068 	ldrsh.w	ip, [sp, #104]	@ 0x68
 801cac6:	fb02 f606 	mul.w	r6, r2, r6
 801caca:	fb02 c101 	mla	r1, r2, r1, ip
 801cace:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801cad2:	9316      	str	r3, [sp, #88]	@ 0x58
 801cad4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801cad8:	4ba6      	ldr	r3, [pc, #664]	@ (801cd74 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 801cada:	eb00 0801 	add.w	r8, r0, r1
 801cade:	bf18      	it	ne
 801cae0:	2100      	movne	r1, #0
 801cae2:	eba3 0304 	sub.w	r3, r3, r4
 801cae6:	eb08 0206 	add.w	r2, r8, r6
 801caea:	9317      	str	r3, [sp, #92]	@ 0x5c
 801caec:	9208      	str	r2, [sp, #32]
 801caee:	f107 0204 	add.w	r2, r7, #4
 801caf2:	9211      	str	r2, [sp, #68]	@ 0x44
 801caf4:	9a04      	ldr	r2, [sp, #16]
 801caf6:	bf08      	it	eq
 801caf8:	4611      	moveq	r1, r2
 801cafa:	2200      	movs	r2, #0
 801cafc:	b289      	uxth	r1, r1
 801cafe:	920b      	str	r2, [sp, #44]	@ 0x2c
 801cb00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801cb02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cb04:	fa12 f383 	uxtah	r3, r2, r3
 801cb08:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801cb0a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801cb0e:	3304      	adds	r3, #4
 801cb10:	9306      	str	r3, [sp, #24]
 801cb12:	9b08      	ldr	r3, [sp, #32]
 801cb14:	4543      	cmp	r3, r8
 801cb16:	f240 815e 	bls.w	801cdd6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 801cb1a:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 801cb1e:	f04f 0b01 	mov.w	fp, #1
 801cb22:	9a01      	ldr	r2, [sp, #4]
 801cb24:	9806      	ldr	r0, [sp, #24]
 801cb26:	465e      	mov	r6, fp
 801cb28:	f8cd b008 	str.w	fp, [sp, #8]
 801cb2c:	7800      	ldrb	r0, [r0, #0]
 801cb2e:	fbb5 f3f3 	udiv	r3, r5, r3
 801cb32:	1ad3      	subs	r3, r2, r3
 801cb34:	900e      	str	r0, [sp, #56]	@ 0x38
 801cb36:	3001      	adds	r0, #1
 801cb38:	b29b      	uxth	r3, r3
 801cb3a:	9005      	str	r0, [sp, #20]
 801cb3c:	9312      	str	r3, [sp, #72]	@ 0x48
 801cb3e:	9b06      	ldr	r3, [sp, #24]
 801cb40:	785a      	ldrb	r2, [r3, #1]
 801cb42:	789b      	ldrb	r3, [r3, #2]
 801cb44:	021b      	lsls	r3, r3, #8
 801cb46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cb4a:	9a06      	ldr	r2, [sp, #24]
 801cb4c:	78d2      	ldrb	r2, [r2, #3]
 801cb4e:	4313      	orrs	r3, r2
 801cb50:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801cb52:	441a      	add	r2, r3
 801cb54:	1c50      	adds	r0, r2, #1
 801cb56:	7852      	ldrb	r2, [r2, #1]
 801cb58:	9003      	str	r0, [sp, #12]
 801cb5a:	0212      	lsls	r2, r2, #8
 801cb5c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801cb5e:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 801cb62:	5cc3      	ldrb	r3, [r0, r3]
 801cb64:	431a      	orrs	r2, r3
 801cb66:	b293      	uxth	r3, r2
 801cb68:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801cb6c:	930a      	str	r3, [sp, #40]	@ 0x28
 801cb6e:	2300      	movs	r3, #0
 801cb70:	461a      	mov	r2, r3
 801cb72:	9307      	str	r3, [sp, #28]
 801cb74:	2d00      	cmp	r5, #0
 801cb76:	d07c      	beq.n	801cc72 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 801cb78:	42ae      	cmp	r6, r5
 801cb7a:	d26c      	bcs.n	801cc56 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 801cb7c:	9b08      	ldr	r3, [sp, #32]
 801cb7e:	1bad      	subs	r5, r5, r6
 801cb80:	4608      	mov	r0, r1
 801cb82:	4543      	cmp	r3, r8
 801cb84:	b2ad      	uxth	r5, r5
 801cb86:	d802      	bhi.n	801cb8e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 801cb88:	e071      	b.n	801cc6e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 801cb8a:	2b00      	cmp	r3, #0
 801cb8c:	d15d      	bne.n	801cc4a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 801cb8e:	9b03      	ldr	r3, [sp, #12]
 801cb90:	9a02      	ldr	r2, [sp, #8]
 801cb92:	785b      	ldrb	r3, [r3, #1]
 801cb94:	f1c2 0207 	rsb	r2, r2, #7
 801cb98:	9902      	ldr	r1, [sp, #8]
 801cb9a:	4093      	lsls	r3, r2
 801cb9c:	005b      	lsls	r3, r3, #1
 801cb9e:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801cba2:	9b03      	ldr	r3, [sp, #12]
 801cba4:	781b      	ldrb	r3, [r3, #0]
 801cba6:	410b      	asrs	r3, r1
 801cba8:	3101      	adds	r1, #1
 801cbaa:	b2c9      	uxtb	r1, r1
 801cbac:	b2db      	uxtb	r3, r3
 801cbae:	2908      	cmp	r1, #8
 801cbb0:	9102      	str	r1, [sp, #8]
 801cbb2:	9903      	ldr	r1, [sp, #12]
 801cbb4:	ea43 0302 	orr.w	r3, r3, r2
 801cbb8:	bf0c      	ite	eq
 801cbba:	3102      	addeq	r1, #2
 801cbbc:	3101      	addne	r1, #1
 801cbbe:	b29a      	uxth	r2, r3
 801cbc0:	bf05      	ittet	eq
 801cbc2:	9103      	streq	r1, [sp, #12]
 801cbc4:	2100      	moveq	r1, #0
 801cbc6:	9103      	strne	r1, [sp, #12]
 801cbc8:	9102      	streq	r1, [sp, #8]
 801cbca:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801cbcc:	4291      	cmp	r1, r2
 801cbce:	d30a      	bcc.n	801cbe6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 801cbd0:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801cbd4:	2301      	movs	r3, #1
 801cbd6:	9905      	ldr	r1, [sp, #20]
 801cbd8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801cbdc:	d30f      	bcc.n	801cbfe <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 801cbde:	469b      	mov	fp, r3
 801cbe0:	f04f 0c00 	mov.w	ip, #0
 801cbe4:	e032      	b.n	801cc4c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 801cbe6:	9b05      	ldr	r3, [sp, #20]
 801cbe8:	429a      	cmp	r2, r3
 801cbea:	d318      	bcc.n	801cc1e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 801cbec:	eb04 030b 	add.w	r3, r4, fp
 801cbf0:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 801cbf4:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 801cbf8:	f10b 0301 	add.w	r3, fp, #1
 801cbfc:	b29b      	uxth	r3, r3
 801cbfe:	9905      	ldr	r1, [sp, #20]
 801cc00:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 801cc04:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801cc08:	710e      	strb	r6, [r1, #4]
 801cc0a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801cc0c:	80ce      	strh	r6, [r1, #6]
 801cc0e:	f10b 0601 	add.w	r6, fp, #1
 801cc12:	714e      	strb	r6, [r1, #5]
 801cc14:	9905      	ldr	r1, [sp, #20]
 801cc16:	3101      	adds	r1, #1
 801cc18:	b289      	uxth	r1, r1
 801cc1a:	9105      	str	r1, [sp, #20]
 801cc1c:	e7df      	b.n	801cbde <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 801cc1e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801cc22:	4611      	mov	r1, r2
 801cc24:	795b      	ldrb	r3, [r3, #5]
 801cc26:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 801cc2a:	4426      	add	r6, r4
 801cc2c:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801cc2e:	4437      	add	r7, r6
 801cc30:	2f00      	cmp	r7, #0
 801cc32:	dd06      	ble.n	801cc42 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 801cc34:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801cc38:	790f      	ldrb	r7, [r1, #4]
 801cc3a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801cc3e:	88c9      	ldrh	r1, [r1, #6]
 801cc40:	e7f4      	b.n	801cc2c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 801cc42:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801cc46:	b29b      	uxth	r3, r3
 801cc48:	e7c5      	b.n	801cbd6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 801cc4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cc4c:	920a      	str	r2, [sp, #40]	@ 0x28
 801cc4e:	4601      	mov	r1, r0
 801cc50:	4662      	mov	r2, ip
 801cc52:	461e      	mov	r6, r3
 801cc54:	e78e      	b.n	801cb74 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 801cc56:	1b73      	subs	r3, r6, r5
 801cc58:	eb02 0c05 	add.w	ip, r2, r5
 801cc5c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801cc60:	b29b      	uxth	r3, r3
 801cc62:	fa1f fc8c 	uxth.w	ip, ip
 801cc66:	2500      	movs	r5, #0
 801cc68:	9a08      	ldr	r2, [sp, #32]
 801cc6a:	4542      	cmp	r2, r8
 801cc6c:	d88d      	bhi.n	801cb8a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 801cc6e:	4601      	mov	r1, r0
 801cc70:	e74f      	b.n	801cb12 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 801cc72:	428e      	cmp	r6, r1
 801cc74:	bf2b      	itete	cs
 801cc76:	468e      	movcs	lr, r1
 801cc78:	46b6      	movcc	lr, r6
 801cc7a:	1a73      	subcs	r3, r6, r1
 801cc7c:	1b88      	subcc	r0, r1, r6
 801cc7e:	eb02 0c0e 	add.w	ip, r2, lr
 801cc82:	bf2b      	itete	cs
 801cc84:	4628      	movcs	r0, r5
 801cc86:	462b      	movcc	r3, r5
 801cc88:	b29b      	uxthcs	r3, r3
 801cc8a:	b280      	uxthcc	r0, r0
 801cc8c:	f108 0503 	add.w	r5, r8, #3
 801cc90:	fa1f fc8c 	uxth.w	ip, ip
 801cc94:	4562      	cmp	r2, ip
 801cc96:	d06f      	beq.n	801cd78 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 801cc98:	1c57      	adds	r7, r2, #1
 801cc9a:	4422      	add	r2, r4
 801cc9c:	b2bf      	uxth	r7, r7
 801cc9e:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 801cca2:	9713      	str	r7, [sp, #76]	@ 0x4c
 801cca4:	2704      	movs	r7, #4
 801cca6:	46b9      	mov	r9, r7
 801cca8:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801ccaa:	fb19 7202 	smlabb	r2, r9, r2, r7
 801ccae:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801ccb0:	58bf      	ldr	r7, [r7, r2]
 801ccb2:	0e3a      	lsrs	r2, r7, #24
 801ccb4:	9209      	str	r2, [sp, #36]	@ 0x24
 801ccb6:	d016      	beq.n	801cce6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801ccb8:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801ccbc:	fa5f fa87 	uxtb.w	sl, r7
 801ccc0:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801ccc4:	fa5f f289 	uxtb.w	r2, r9
 801ccc8:	9214      	str	r2, [sp, #80]	@ 0x50
 801ccca:	b2fa      	uxtb	r2, r7
 801cccc:	9215      	str	r2, [sp, #84]	@ 0x54
 801ccce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ccd0:	2aff      	cmp	r2, #255	@ 0xff
 801ccd2:	d10b      	bne.n	801ccec <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801ccd4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ccd6:	2aff      	cmp	r2, #255	@ 0xff
 801ccd8:	d108      	bne.n	801ccec <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801ccda:	f805 ac03 	strb.w	sl, [r5, #-3]
 801ccde:	f805 9c02 	strb.w	r9, [r5, #-2]
 801cce2:	f805 7c01 	strb.w	r7, [r5, #-1]
 801cce6:	3503      	adds	r5, #3
 801cce8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ccea:	e7d3      	b.n	801cc94 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 801ccec:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801ccee:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ccf0:	437a      	muls	r2, r7
 801ccf2:	1c57      	adds	r7, r2, #1
 801ccf4:	eb07 2222 	add.w	r2, r7, r2, asr #8
 801ccf8:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 801ccfc:	1212      	asrs	r2, r2, #8
 801ccfe:	fa1f f982 	uxth.w	r9, r2
 801cd02:	43d2      	mvns	r2, r2
 801cd04:	fb1a fa09 	smulbb	sl, sl, r9
 801cd08:	b2d2      	uxtb	r2, r2
 801cd0a:	fb07 a702 	mla	r7, r7, r2, sl
 801cd0e:	9209      	str	r2, [sp, #36]	@ 0x24
 801cd10:	b2bf      	uxth	r7, r7
 801cd12:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801cd14:	f107 0a01 	add.w	sl, r7, #1
 801cd18:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801cd1c:	fb12 fa09 	smulbb	sl, r2, r9
 801cd20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cd22:	123f      	asrs	r7, r7, #8
 801cd24:	f805 7c03 	strb.w	r7, [r5, #-3]
 801cd28:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 801cd2c:	fb07 aa02 	mla	sl, r7, r2, sl
 801cd30:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801cd32:	fb12 f909 	smulbb	r9, r2, r9
 801cd36:	fa1f fa8a 	uxth.w	sl, sl
 801cd3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cd3c:	f10a 0701 	add.w	r7, sl, #1
 801cd40:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801cd44:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 801cd48:	fb07 9902 	mla	r9, r7, r2, r9
 801cd4c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cd50:	fa1f f989 	uxth.w	r9, r9
 801cd54:	f805 ac02 	strb.w	sl, [r5, #-2]
 801cd58:	f109 0201 	add.w	r2, r9, #1
 801cd5c:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801cd60:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cd64:	f805 9c01 	strb.w	r9, [r5, #-1]
 801cd68:	e7bd      	b.n	801cce6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801cd6a:	bf00      	nop
 801cd6c:	24026418 	.word	0x24026418
 801cd70:	24026412 	.word	0x24026412
 801cd74:	fffff7fb 	.word	0xfffff7fb
 801cd78:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801cd7c:	428e      	cmp	r6, r1
 801cd7e:	44f0      	add	r8, lr
 801cd80:	f4ff af71 	bcc.w	801cc66 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 801cd84:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801cd86:	9904      	ldr	r1, [sp, #16]
 801cd88:	8812      	ldrh	r2, [r2, #0]
 801cd8a:	1a52      	subs	r2, r2, r1
 801cd8c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801cd8e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cd92:	4490      	add	r8, r2
 801cd94:	9a07      	ldr	r2, [sp, #28]
 801cd96:	3201      	adds	r2, #1
 801cd98:	428a      	cmp	r2, r1
 801cd9a:	9207      	str	r2, [sp, #28]
 801cd9c:	d111      	bne.n	801cdc2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 801cd9e:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 801cda2:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 801cda6:	9b04      	ldr	r3, [sp, #16]
 801cda8:	eba5 050c 	sub.w	r5, r5, ip
 801cdac:	b2ad      	uxth	r5, r5
 801cdae:	2d00      	cmp	r5, #0
 801cdb0:	bf08      	it	eq
 801cdb2:	4619      	moveq	r1, r3
 801cdb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cdb6:	bf18      	it	ne
 801cdb8:	2100      	movne	r1, #0
 801cdba:	3301      	adds	r3, #1
 801cdbc:	b289      	uxth	r1, r1
 801cdbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cdc0:	e69e      	b.n	801cb00 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 801cdc2:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801cdc6:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801cdca:	1a2d      	subs	r5, r5, r0
 801cdcc:	b2ad      	uxth	r5, r5
 801cdce:	2d00      	cmp	r5, #0
 801cdd0:	bf18      	it	ne
 801cdd2:	2000      	movne	r0, #0
 801cdd4:	e748      	b.n	801cc68 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 801cdd6:	4b04      	ldr	r3, [pc, #16]	@ (801cde8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 801cdd8:	6818      	ldr	r0, [r3, #0]
 801cdda:	6803      	ldr	r3, [r0, #0]
 801cddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cdde:	4798      	blx	r3
 801cde0:	b01d      	add	sp, #116	@ 0x74
 801cde2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cde6:	bf00      	nop
 801cde8:	24026418 	.word	0x24026418

0801cdec <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 801cdec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdf0:	b08f      	sub	sp, #60	@ 0x3c
 801cdf2:	4616      	mov	r6, r2
 801cdf4:	4681      	mov	r9, r0
 801cdf6:	460d      	mov	r5, r1
 801cdf8:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 801cdfc:	9205      	str	r2, [sp, #20]
 801cdfe:	2a00      	cmp	r2, #0
 801ce00:	f000 82a8 	beq.w	801d354 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x568>
 801ce04:	6830      	ldr	r0, [r6, #0]
 801ce06:	ac0a      	add	r4, sp, #40	@ 0x28
 801ce08:	6871      	ldr	r1, [r6, #4]
 801ce0a:	c403      	stmia	r4!, {r0, r1}
 801ce0c:	6818      	ldr	r0, [r3, #0]
 801ce0e:	ac0c      	add	r4, sp, #48	@ 0x30
 801ce10:	6859      	ldr	r1, [r3, #4]
 801ce12:	c403      	stmia	r4!, {r0, r1}
 801ce14:	a80a      	add	r0, sp, #40	@ 0x28
 801ce16:	f7f9 fce5 	bl	80167e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ce1a:	4631      	mov	r1, r6
 801ce1c:	a80c      	add	r0, sp, #48	@ 0x30
 801ce1e:	f7f9 fd09 	bl	8016834 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ce22:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801ce26:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801ce2a:	bfdb      	ittet	le
 801ce2c:	b293      	uxthle	r3, r2
 801ce2e:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801ce32:	2301      	movgt	r3, #1
 801ce34:	fb91 f3f3 	sdivle	r3, r1, r3
 801ce38:	9300      	str	r3, [sp, #0]
 801ce3a:	f105 0308 	add.w	r3, r5, #8
 801ce3e:	9900      	ldr	r1, [sp, #0]
 801ce40:	9306      	str	r3, [sp, #24]
 801ce42:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801ce46:	440b      	add	r3, r1
 801ce48:	3b01      	subs	r3, #1
 801ce4a:	fb93 f3f1 	sdiv	r3, r3, r1
 801ce4e:	3b01      	subs	r3, #1
 801ce50:	9906      	ldr	r1, [sp, #24]
 801ce52:	b29b      	uxth	r3, r3
 801ce54:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801ce58:	9900      	ldr	r1, [sp, #0]
 801ce5a:	9307      	str	r3, [sp, #28]
 801ce5c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801ce60:	fb93 f0f1 	sdiv	r0, r3, r1
 801ce64:	b284      	uxth	r4, r0
 801ce66:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801ce6a:	b280      	uxth	r0, r0
 801ce6c:	9402      	str	r4, [sp, #8]
 801ce6e:	9d02      	ldr	r5, [sp, #8]
 801ce70:	9c00      	ldr	r4, [sp, #0]
 801ce72:	fb05 3514 	mls	r5, r5, r4, r3
 801ce76:	fb15 f502 	smulbb	r5, r5, r2
 801ce7a:	440d      	add	r5, r1
 801ce7c:	b2ad      	uxth	r5, r5
 801ce7e:	2800      	cmp	r0, #0
 801ce80:	d071      	beq.n	801cf66 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x17a>
 801ce82:	1e42      	subs	r2, r0, #1
 801ce84:	9806      	ldr	r0, [sp, #24]
 801ce86:	f850 8022 	ldr.w	r8, [r0, r2, lsl #2]
 801ce8a:	9a07      	ldr	r2, [sp, #28]
 801ce8c:	fa98 f888 	rev.w	r8, r8
 801ce90:	4490      	add	r8, r2
 801ce92:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801ce96:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801ce9a:	4411      	add	r1, r2
 801ce9c:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801cea0:	f8df b348 	ldr.w	fp, [pc, #840]	@ 801d1ec <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 801cea4:	4413      	add	r3, r2
 801cea6:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 801ceaa:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801ceae:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801ceb2:	9301      	str	r3, [sp, #4]
 801ceb4:	4bcb      	ldr	r3, [pc, #812]	@ (801d1e4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3f8>)
 801ceb6:	6818      	ldr	r0, [r3, #0]
 801ceb8:	6803      	ldr	r3, [r0, #0]
 801ceba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cebc:	4798      	blx	r3
 801cebe:	4bca      	ldr	r3, [pc, #808]	@ (801d1e8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3fc>)
 801cec0:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801cec4:	881b      	ldrh	r3, [r3, #0]
 801cec6:	f9bd 7032 	ldrsh.w	r7, [sp, #50]	@ 0x32
 801ceca:	fb03 2707 	mla	r7, r3, r7, r2
 801cece:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801ced2:	4363      	muls	r3, r4
 801ced4:	2400      	movs	r4, #0
 801ced6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ceda:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cede:	4621      	mov	r1, r4
 801cee0:	4407      	add	r7, r0
 801cee2:	18fb      	adds	r3, r7, r3
 801cee4:	9309      	str	r3, [sp, #36]	@ 0x24
 801cee6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801ceea:	fb95 f3f3 	sdiv	r3, r5, r3
 801ceee:	9304      	str	r3, [sp, #16]
 801cef0:	f109 0304 	add.w	r3, r9, #4
 801cef4:	4618      	mov	r0, r3
 801cef6:	9308      	str	r3, [sp, #32]
 801cef8:	f008 fc0a 	bl	8025710 <memset>
 801cefc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cefe:	42bb      	cmp	r3, r7
 801cf00:	f240 8223 	bls.w	801d34a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x55e>
 801cf04:	2003      	movs	r0, #3
 801cf06:	f04f 0c07 	mov.w	ip, #7
 801cf0a:	f04f 0e0b 	mov.w	lr, #11
 801cf0e:	2d00      	cmp	r5, #0
 801cf10:	f000 813c 	beq.w	801d18c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a0>
 801cf14:	f898 3000 	ldrb.w	r3, [r8]
 801cf18:	b2db      	uxtb	r3, r3
 801cf1a:	2bfe      	cmp	r3, #254	@ 0xfe
 801cf1c:	d126      	bne.n	801cf6c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x180>
 801cf1e:	f898 1001 	ldrb.w	r1, [r8, #1]
 801cf22:	f108 0604 	add.w	r6, r8, #4
 801cf26:	f898 2002 	ldrb.w	r2, [r8, #2]
 801cf2a:	3d01      	subs	r5, #1
 801cf2c:	b2c9      	uxtb	r1, r1
 801cf2e:	f898 8003 	ldrb.w	r8, [r8, #3]
 801cf32:	b2d2      	uxtb	r2, r2
 801cf34:	f361 0407 	bfi	r4, r1, #0, #8
 801cf38:	fa5f f888 	uxtb.w	r8, r8
 801cf3c:	b2ad      	uxth	r5, r5
 801cf3e:	f362 240f 	bfi	r4, r2, #8, #8
 801cf42:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801cf46:	fb10 2208 	smlabb	r2, r0, r8, r2
 801cf4a:	f368 4417 	bfi	r4, r8, #16, #8
 801cf4e:	fb1c 2201 	smlabb	r2, ip, r1, r2
 801cf52:	0e23      	lsrs	r3, r4, #24
 801cf54:	fb1e 2303 	smlabb	r3, lr, r3, r2
 801cf58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801cf5c:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801cf60:	605c      	str	r4, [r3, #4]
 801cf62:	46b0      	mov	r8, r6
 801cf64:	e7d3      	b.n	801cf0e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x122>
 801cf66:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801cf6a:	e792      	b.n	801ce92 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa6>
 801cf6c:	2bff      	cmp	r3, #255	@ 0xff
 801cf6e:	d127      	bne.n	801cfc0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1d4>
 801cf70:	f898 2001 	ldrb.w	r2, [r8, #1]
 801cf74:	f108 0605 	add.w	r6, r8, #5
 801cf78:	f898 3002 	ldrb.w	r3, [r8, #2]
 801cf7c:	3d01      	subs	r5, #1
 801cf7e:	b2d2      	uxtb	r2, r2
 801cf80:	f898 1003 	ldrb.w	r1, [r8, #3]
 801cf84:	b2db      	uxtb	r3, r3
 801cf86:	f898 8004 	ldrb.w	r8, [r8, #4]
 801cf8a:	f362 0407 	bfi	r4, r2, #0, #8
 801cf8e:	b2c9      	uxtb	r1, r1
 801cf90:	fa5f f888 	uxtb.w	r8, r8
 801cf94:	f363 240f 	bfi	r4, r3, #8, #8
 801cf98:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801cf9c:	b2ad      	uxth	r5, r5
 801cf9e:	fb10 3301 	smlabb	r3, r0, r1, r3
 801cfa2:	f361 4417 	bfi	r4, r1, #16, #8
 801cfa6:	fb1c 3302 	smlabb	r3, ip, r2, r3
 801cfaa:	f368 641f 	bfi	r4, r8, #24, #8
 801cfae:	fb1e 3808 	smlabb	r8, lr, r8, r3
 801cfb2:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 801cfb6:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 801cfba:	f8c8 4004 	str.w	r4, [r8, #4]
 801cfbe:	e7d0      	b.n	801cf62 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 801cfc0:	119a      	asrs	r2, r3, #6
 801cfc2:	f108 0601 	add.w	r6, r8, #1
 801cfc6:	d107      	bne.n	801cfd8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1ec>
 801cfc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801cfcc:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801cfd0:	685c      	ldr	r4, [r3, #4]
 801cfd2:	3d01      	subs	r5, #1
 801cfd4:	b2ad      	uxth	r5, r5
 801cfd6:	e7c4      	b.n	801cf62 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 801cfd8:	2a01      	cmp	r2, #1
 801cfda:	d129      	bne.n	801d030 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x244>
 801cfdc:	f003 0203 	and.w	r2, r3, #3
 801cfe0:	1ea1      	subs	r1, r4, #2
 801cfe2:	4411      	add	r1, r2
 801cfe4:	f3c3 0281 	ubfx	r2, r3, #2, #2
 801cfe8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801cfec:	b2c9      	uxtb	r1, r1
 801cfee:	3a02      	subs	r2, #2
 801cff0:	3b02      	subs	r3, #2
 801cff2:	f361 0407 	bfi	r4, r1, #0, #8
 801cff6:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801cffa:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801cffe:	f362 240f 	bfi	r4, r2, #8, #8
 801d002:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801d006:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801d00a:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801d00e:	fb10 2203 	smlabb	r2, r0, r3, r2
 801d012:	f363 4417 	bfi	r4, r3, #16, #8
 801d016:	fb1c 2201 	smlabb	r2, ip, r1, r2
 801d01a:	ea4f 6814 	mov.w	r8, r4, lsr #24
 801d01e:	fb1e 2808 	smlabb	r8, lr, r8, r2
 801d022:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 801d026:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 801d02a:	f8c8 4004 	str.w	r4, [r8, #4]
 801d02e:	e7d0      	b.n	801cfd2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 801d030:	2a02      	cmp	r2, #2
 801d032:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d036:	d12e      	bne.n	801d096 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2aa>
 801d038:	f898 2001 	ldrb.w	r2, [r8, #1]
 801d03c:	f1a3 0a20 	sub.w	sl, r3, #32
 801d040:	f108 0602 	add.w	r6, r8, #2
 801d044:	b2d2      	uxtb	r2, r2
 801d046:	f002 010f 	and.w	r1, r2, #15
 801d04a:	1112      	asrs	r2, r2, #4
 801d04c:	3908      	subs	r1, #8
 801d04e:	3a08      	subs	r2, #8
 801d050:	4451      	add	r1, sl
 801d052:	4492      	add	sl, r2
 801d054:	4421      	add	r1, r4
 801d056:	b2c9      	uxtb	r1, r1
 801d058:	f361 0407 	bfi	r4, r1, #0, #8
 801d05c:	f3c4 2807 	ubfx	r8, r4, #8, #8
 801d060:	f1a8 0820 	sub.w	r8, r8, #32
 801d064:	4443      	add	r3, r8
 801d066:	b2db      	uxtb	r3, r3
 801d068:	f363 240f 	bfi	r4, r3, #8, #8
 801d06c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d070:	eb0a 4a14 	add.w	sl, sl, r4, lsr #16
 801d074:	f00a 0aff 	and.w	sl, sl, #255	@ 0xff
 801d078:	fb10 330a 	smlabb	r3, r0, sl, r3
 801d07c:	f36a 4417 	bfi	r4, sl, #16, #8
 801d080:	fb1c 3301 	smlabb	r3, ip, r1, r3
 801d084:	0e22      	lsrs	r2, r4, #24
 801d086:	fb1e 3202 	smlabb	r2, lr, r2, r3
 801d08a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801d08e:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801d092:	6054      	str	r4, [r2, #4]
 801d094:	e79d      	b.n	801cfd2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 801d096:	3301      	adds	r3, #1
 801d098:	42ab      	cmp	r3, r5
 801d09a:	dd59      	ble.n	801d150 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x364>
 801d09c:	1b5d      	subs	r5, r3, r5
 801d09e:	2d00      	cmp	r5, #0
 801d0a0:	dc58      	bgt.n	801d154 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x368>
 801d0a2:	f8dd a004 	ldr.w	sl, [sp, #4]
 801d0a6:	f04f 0800 	mov.w	r8, #0
 801d0aa:	f1ba 0f00 	cmp.w	sl, #0
 801d0ae:	f340 8108 	ble.w	801d2c2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4d6>
 801d0b2:	1c73      	adds	r3, r6, #1
 801d0b4:	9303      	str	r3, [sp, #12]
 801d0b6:	7833      	ldrb	r3, [r6, #0]
 801d0b8:	b2db      	uxtb	r3, r3
 801d0ba:	2bfe      	cmp	r3, #254	@ 0xfe
 801d0bc:	d16a      	bne.n	801d194 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a8>
 801d0be:	7871      	ldrb	r1, [r6, #1]
 801d0c0:	1d33      	adds	r3, r6, #4
 801d0c2:	78b2      	ldrb	r2, [r6, #2]
 801d0c4:	b2c9      	uxtb	r1, r1
 801d0c6:	78f0      	ldrb	r0, [r6, #3]
 801d0c8:	b2d2      	uxtb	r2, r2
 801d0ca:	9303      	str	r3, [sp, #12]
 801d0cc:	f361 0407 	bfi	r4, r1, #0, #8
 801d0d0:	b2c0      	uxtb	r0, r0
 801d0d2:	2303      	movs	r3, #3
 801d0d4:	f362 240f 	bfi	r4, r2, #8, #8
 801d0d8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801d0dc:	fb13 2200 	smlabb	r2, r3, r0, r2
 801d0e0:	f360 4417 	bfi	r4, r0, #16, #8
 801d0e4:	2307      	movs	r3, #7
 801d0e6:	0e25      	lsrs	r5, r4, #24
 801d0e8:	fb13 2101 	smlabb	r1, r3, r1, r2
 801d0ec:	230b      	movs	r3, #11
 801d0ee:	fb13 1305 	smlabb	r3, r3, r5, r1
 801d0f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d0f6:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801d0fa:	605c      	str	r4, [r3, #4]
 801d0fc:	2501      	movs	r5, #1
 801d0fe:	462e      	mov	r6, r5
 801d100:	eb06 0308 	add.w	r3, r6, r8
 801d104:	ebaa 0a06 	sub.w	sl, sl, r6
 801d108:	1bad      	subs	r5, r5, r6
 801d10a:	2b40      	cmp	r3, #64	@ 0x40
 801d10c:	dd16      	ble.n	801d13c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x350>
 801d10e:	4658      	mov	r0, fp
 801d110:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801d114:	f7e6 f862 	bl	80031dc <_ZN8touchgfx5paint9flushLineEPmi>
 801d118:	4659      	mov	r1, fp
 801d11a:	9b05      	ldr	r3, [sp, #20]
 801d11c:	4642      	mov	r2, r8
 801d11e:	4638      	mov	r0, r7
 801d120:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d124:	f7e6 f8c2 	bl	80032ac <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 801d128:	4b30      	ldr	r3, [pc, #192]	@ (801d1ec <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>)
 801d12a:	4447      	add	r7, r8
 801d12c:	f04f 0800 	mov.w	r8, #0
 801d130:	459b      	cmp	fp, r3
 801d132:	bf0c      	ite	eq
 801d134:	f8df b0b8 	ldreq.w	fp, [pc, #184]	@ 801d1f0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x404>
 801d138:	f8df b0b0 	ldrne.w	fp, [pc, #176]	@ 801d1ec <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 801d13c:	eb0b 0288 	add.w	r2, fp, r8, lsl #2
 801d140:	4633      	mov	r3, r6
 801d142:	3b01      	subs	r3, #1
 801d144:	f842 4b04 	str.w	r4, [r2], #4
 801d148:	d1fb      	bne.n	801d142 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x356>
 801d14a:	44b0      	add	r8, r6
 801d14c:	9e03      	ldr	r6, [sp, #12]
 801d14e:	e7ac      	b.n	801d0aa <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2be>
 801d150:	1aed      	subs	r5, r5, r3
 801d152:	e73f      	b.n	801cfd4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e8>
 801d154:	9b01      	ldr	r3, [sp, #4]
 801d156:	42ab      	cmp	r3, r5
 801d158:	bfa8      	it	ge
 801d15a:	462b      	movge	r3, r5
 801d15c:	4698      	mov	r8, r3
 801d15e:	9b01      	ldr	r3, [sp, #4]
 801d160:	eba3 0a08 	sub.w	sl, r3, r8
 801d164:	0e23      	lsrs	r3, r4, #24
 801d166:	eba5 0508 	sub.w	r5, r5, r8
 801d16a:	d00b      	beq.n	801d184 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x398>
 801d16c:	9a05      	ldr	r2, [sp, #20]
 801d16e:	4641      	mov	r1, r8
 801d170:	4638      	mov	r0, r7
 801d172:	4353      	muls	r3, r2
 801d174:	1c5a      	adds	r2, r3, #1
 801d176:	eb02 2323 	add.w	r3, r2, r3, asr #8
 801d17a:	4622      	mov	r2, r4
 801d17c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d180:	f7e6 f846 	bl	8003210 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 801d184:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d188:	4447      	add	r7, r8
 801d18a:	e78c      	b.n	801d0a6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 801d18c:	f8dd a004 	ldr.w	sl, [sp, #4]
 801d190:	4646      	mov	r6, r8
 801d192:	e788      	b.n	801d0a6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 801d194:	2bff      	cmp	r3, #255	@ 0xff
 801d196:	d11d      	bne.n	801d1d4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 801d198:	7870      	ldrb	r0, [r6, #1]
 801d19a:	1d73      	adds	r3, r6, #5
 801d19c:	78b2      	ldrb	r2, [r6, #2]
 801d19e:	b2c0      	uxtb	r0, r0
 801d1a0:	78f5      	ldrb	r5, [r6, #3]
 801d1a2:	b2d2      	uxtb	r2, r2
 801d1a4:	9303      	str	r3, [sp, #12]
 801d1a6:	f360 0407 	bfi	r4, r0, #0, #8
 801d1aa:	7933      	ldrb	r3, [r6, #4]
 801d1ac:	b2ed      	uxtb	r5, r5
 801d1ae:	b2d9      	uxtb	r1, r3
 801d1b0:	f362 240f 	bfi	r4, r2, #8, #8
 801d1b4:	2303      	movs	r3, #3
 801d1b6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801d1ba:	f365 4417 	bfi	r4, r5, #16, #8
 801d1be:	fb13 2205 	smlabb	r2, r3, r5, r2
 801d1c2:	2307      	movs	r3, #7
 801d1c4:	f361 641f 	bfi	r4, r1, #24, #8
 801d1c8:	fb13 2000 	smlabb	r0, r3, r0, r2
 801d1cc:	230b      	movs	r3, #11
 801d1ce:	fb13 0301 	smlabb	r3, r3, r1, r0
 801d1d2:	e78e      	b.n	801d0f2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 801d1d4:	119d      	asrs	r5, r3, #6
 801d1d6:	d10d      	bne.n	801d1f4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x408>
 801d1d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d1dc:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801d1e0:	685c      	ldr	r4, [r3, #4]
 801d1e2:	e78b      	b.n	801d0fc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 801d1e4:	24026418 	.word	0x24026418
 801d1e8:	24026412 	.word	0x24026412
 801d1ec:	24000140 	.word	0x24000140
 801d1f0:	24000240 	.word	0x24000240
 801d1f4:	2d01      	cmp	r5, #1
 801d1f6:	d12a      	bne.n	801d24e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x462>
 801d1f8:	f003 0203 	and.w	r2, r3, #3
 801d1fc:	1ea1      	subs	r1, r4, #2
 801d1fe:	2603      	movs	r6, #3
 801d200:	4411      	add	r1, r2
 801d202:	f3c3 0281 	ubfx	r2, r3, #2, #2
 801d206:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801d20a:	b2c9      	uxtb	r1, r1
 801d20c:	3a02      	subs	r2, #2
 801d20e:	3b02      	subs	r3, #2
 801d210:	f361 0407 	bfi	r4, r1, #0, #8
 801d214:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801d218:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801d21c:	f362 240f 	bfi	r4, r2, #8, #8
 801d220:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801d224:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801d228:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801d22c:	fb16 2203 	smlabb	r2, r6, r3, r2
 801d230:	f363 4417 	bfi	r4, r3, #16, #8
 801d234:	2307      	movs	r3, #7
 801d236:	0e20      	lsrs	r0, r4, #24
 801d238:	fb13 2101 	smlabb	r1, r3, r1, r2
 801d23c:	230b      	movs	r3, #11
 801d23e:	fb13 1300 	smlabb	r3, r3, r0, r1
 801d242:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d246:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801d24a:	605c      	str	r4, [r3, #4]
 801d24c:	e757      	b.n	801d0fe <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x312>
 801d24e:	2d02      	cmp	r5, #2
 801d250:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d254:	d12f      	bne.n	801d2b6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ca>
 801d256:	1cb2      	adds	r2, r6, #2
 801d258:	f1a3 0020 	sub.w	r0, r3, #32
 801d25c:	9203      	str	r2, [sp, #12]
 801d25e:	7872      	ldrb	r2, [r6, #1]
 801d260:	b2d2      	uxtb	r2, r2
 801d262:	f002 010f 	and.w	r1, r2, #15
 801d266:	1112      	asrs	r2, r2, #4
 801d268:	3908      	subs	r1, #8
 801d26a:	3a08      	subs	r2, #8
 801d26c:	4401      	add	r1, r0
 801d26e:	4402      	add	r2, r0
 801d270:	4421      	add	r1, r4
 801d272:	b2c9      	uxtb	r1, r1
 801d274:	f361 0407 	bfi	r4, r1, #0, #8
 801d278:	f3c4 2507 	ubfx	r5, r4, #8, #8
 801d27c:	3d20      	subs	r5, #32
 801d27e:	442b      	add	r3, r5
 801d280:	2503      	movs	r5, #3
 801d282:	b2db      	uxtb	r3, r3
 801d284:	f363 240f 	bfi	r4, r3, #8, #8
 801d288:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d28c:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 801d290:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801d294:	fb15 3302 	smlabb	r3, r5, r2, r3
 801d298:	f362 4417 	bfi	r4, r2, #16, #8
 801d29c:	2207      	movs	r2, #7
 801d29e:	0e20      	lsrs	r0, r4, #24
 801d2a0:	fb12 3201 	smlabb	r2, r2, r1, r3
 801d2a4:	210b      	movs	r1, #11
 801d2a6:	fb11 2100 	smlabb	r1, r1, r0, r2
 801d2aa:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801d2ae:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801d2b2:	604c      	str	r4, [r1, #4]
 801d2b4:	e722      	b.n	801d0fc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 801d2b6:	1c5d      	adds	r5, r3, #1
 801d2b8:	4656      	mov	r6, sl
 801d2ba:	45aa      	cmp	sl, r5
 801d2bc:	bfa8      	it	ge
 801d2be:	462e      	movge	r6, r5
 801d2c0:	e71e      	b.n	801d100 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x314>
 801d2c2:	f1b8 0f00 	cmp.w	r8, #0
 801d2c6:	d00d      	beq.n	801d2e4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f8>
 801d2c8:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801d2cc:	4658      	mov	r0, fp
 801d2ce:	f7e5 ff85 	bl	80031dc <_ZN8touchgfx5paint9flushLineEPmi>
 801d2d2:	4642      	mov	r2, r8
 801d2d4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d2d8:	4638      	mov	r0, r7
 801d2da:	9b05      	ldr	r3, [sp, #20]
 801d2dc:	4659      	mov	r1, fp
 801d2de:	4447      	add	r7, r8
 801d2e0:	f7e5 ffe4 	bl	80032ac <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 801d2e4:	4b1d      	ldr	r3, [pc, #116]	@ (801d35c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x570>)
 801d2e6:	9a01      	ldr	r2, [sp, #4]
 801d2e8:	881b      	ldrh	r3, [r3, #0]
 801d2ea:	1a9b      	subs	r3, r3, r2
 801d2ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d2f0:	441f      	add	r7, r3
 801d2f2:	9b04      	ldr	r3, [sp, #16]
 801d2f4:	3301      	adds	r3, #1
 801d2f6:	9304      	str	r3, [sp, #16]
 801d2f8:	9a04      	ldr	r2, [sp, #16]
 801d2fa:	9b00      	ldr	r3, [sp, #0]
 801d2fc:	4293      	cmp	r3, r2
 801d2fe:	d11d      	bne.n	801d33c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x550>
 801d300:	9b02      	ldr	r3, [sp, #8]
 801d302:	2400      	movs	r4, #0
 801d304:	9a02      	ldr	r2, [sp, #8]
 801d306:	f103 0801 	add.w	r8, r3, #1
 801d30a:	9b06      	ldr	r3, [sp, #24]
 801d30c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 801d310:	4621      	mov	r1, r4
 801d312:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801d316:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801d31a:	9b07      	ldr	r3, [sp, #28]
 801d31c:	ba36      	rev	r6, r6
 801d31e:	9808      	ldr	r0, [sp, #32]
 801d320:	441e      	add	r6, r3
 801d322:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801d326:	1aed      	subs	r5, r5, r3
 801d328:	f008 f9f2 	bl	8025710 <memset>
 801d32c:	f8cd 8008 	str.w	r8, [sp, #8]
 801d330:	b2ad      	uxth	r5, r5
 801d332:	9404      	str	r4, [sp, #16]
 801d334:	f7e5 ff48 	bl	80031c8 <_ZN8touchgfx5paint8tearDownEv>
 801d338:	46b0      	mov	r8, r6
 801d33a:	e5df      	b.n	801cefc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x110>
 801d33c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801d340:	9a01      	ldr	r2, [sp, #4]
 801d342:	1a9b      	subs	r3, r3, r2
 801d344:	1b5d      	subs	r5, r3, r5
 801d346:	b2ad      	uxth	r5, r5
 801d348:	e7f4      	b.n	801d334 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x548>
 801d34a:	4b05      	ldr	r3, [pc, #20]	@ (801d360 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x574>)
 801d34c:	6818      	ldr	r0, [r3, #0]
 801d34e:	6803      	ldr	r3, [r0, #0]
 801d350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d352:	4798      	blx	r3
 801d354:	b00f      	add	sp, #60	@ 0x3c
 801d356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d35a:	bf00      	nop
 801d35c:	24026412 	.word	0x24026412
 801d360:	24026418 	.word	0x24026418

0801d364 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h>:
 801d364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d368:	b093      	sub	sp, #76	@ 0x4c
 801d36a:	460d      	mov	r5, r1
 801d36c:	4616      	mov	r6, r2
 801d36e:	f89d b070 	ldrb.w	fp, [sp, #112]	@ 0x70
 801d372:	9000      	str	r0, [sp, #0]
 801d374:	f1bb 0f00 	cmp.w	fp, #0
 801d378:	f000 82ac 	beq.w	801d8d4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x570>
 801d37c:	6810      	ldr	r0, [r2, #0]
 801d37e:	ac0e      	add	r4, sp, #56	@ 0x38
 801d380:	6851      	ldr	r1, [r2, #4]
 801d382:	c403      	stmia	r4!, {r0, r1}
 801d384:	6818      	ldr	r0, [r3, #0]
 801d386:	ac10      	add	r4, sp, #64	@ 0x40
 801d388:	6859      	ldr	r1, [r3, #4]
 801d38a:	c403      	stmia	r4!, {r0, r1}
 801d38c:	a80e      	add	r0, sp, #56	@ 0x38
 801d38e:	f7f9 fa29 	bl	80167e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d392:	4631      	mov	r1, r6
 801d394:	a810      	add	r0, sp, #64	@ 0x40
 801d396:	f7f9 fa4d 	bl	8016834 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d39a:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801d39e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801d3a2:	bfdb      	ittet	le
 801d3a4:	b293      	uxthle	r3, r2
 801d3a6:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801d3aa:	2301      	movgt	r3, #1
 801d3ac:	fb91 f3f3 	sdivle	r3, r1, r3
 801d3b0:	9301      	str	r3, [sp, #4]
 801d3b2:	f105 0308 	add.w	r3, r5, #8
 801d3b6:	9901      	ldr	r1, [sp, #4]
 801d3b8:	9305      	str	r3, [sp, #20]
 801d3ba:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801d3be:	440b      	add	r3, r1
 801d3c0:	3b01      	subs	r3, #1
 801d3c2:	fb93 f3f1 	sdiv	r3, r3, r1
 801d3c6:	3b01      	subs	r3, #1
 801d3c8:	9905      	ldr	r1, [sp, #20]
 801d3ca:	b29b      	uxth	r3, r3
 801d3cc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801d3d0:	9901      	ldr	r1, [sp, #4]
 801d3d2:	9306      	str	r3, [sp, #24]
 801d3d4:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 801d3d8:	fb93 f0f1 	sdiv	r0, r3, r1
 801d3dc:	b284      	uxth	r4, r0
 801d3de:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801d3e2:	9403      	str	r4, [sp, #12]
 801d3e4:	9d03      	ldr	r5, [sp, #12]
 801d3e6:	9c01      	ldr	r4, [sp, #4]
 801d3e8:	fb05 3714 	mls	r7, r5, r4, r3
 801d3ec:	fb17 f702 	smulbb	r7, r7, r2
 801d3f0:	440f      	add	r7, r1
 801d3f2:	b2bf      	uxth	r7, r7
 801d3f4:	2d00      	cmp	r5, #0
 801d3f6:	d06b      	beq.n	801d4d0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x16c>
 801d3f8:	1e6a      	subs	r2, r5, #1
 801d3fa:	9805      	ldr	r0, [sp, #20]
 801d3fc:	f850 9022 	ldr.w	r9, [r0, r2, lsl #2]
 801d400:	9a06      	ldr	r2, [sp, #24]
 801d402:	fa99 f989 	rev.w	r9, r9
 801d406:	4491      	add	r9, r2
 801d408:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 801d40c:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 801d410:	4411      	add	r1, r2
 801d412:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801d416:	f8df a35c 	ldr.w	sl, [pc, #860]	@ 801d774 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x410>
 801d41a:	4413      	add	r3, r2
 801d41c:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801d420:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801d424:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 801d428:	9302      	str	r3, [sp, #8]
 801d42a:	4bd0      	ldr	r3, [pc, #832]	@ (801d76c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x408>)
 801d42c:	6818      	ldr	r0, [r3, #0]
 801d42e:	6803      	ldr	r3, [r0, #0]
 801d430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d432:	4798      	blx	r3
 801d434:	4bce      	ldr	r3, [pc, #824]	@ (801d770 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x40c>)
 801d436:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 801d43a:	881b      	ldrh	r3, [r3, #0]
 801d43c:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 801d440:	fb03 2404 	mla	r4, r3, r4, r2
 801d444:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801d448:	436b      	muls	r3, r5
 801d44a:	2500      	movs	r5, #0
 801d44c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d450:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d454:	4629      	mov	r1, r5
 801d456:	4404      	add	r4, r0
 801d458:	18e3      	adds	r3, r4, r3
 801d45a:	930d      	str	r3, [sp, #52]	@ 0x34
 801d45c:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801d460:	fb97 f3f3 	sdiv	r3, r7, r3
 801d464:	9304      	str	r3, [sp, #16]
 801d466:	9b00      	ldr	r3, [sp, #0]
 801d468:	3304      	adds	r3, #4
 801d46a:	4618      	mov	r0, r3
 801d46c:	9309      	str	r3, [sp, #36]	@ 0x24
 801d46e:	f008 f94f 	bl	8025710 <memset>
 801d472:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d474:	42a3      	cmp	r3, r4
 801d476:	f240 8228 	bls.w	801d8ca <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x566>
 801d47a:	2003      	movs	r0, #3
 801d47c:	2607      	movs	r6, #7
 801d47e:	2f00      	cmp	r7, #0
 801d480:	f000 80cb 	beq.w	801d61a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2b6>
 801d484:	f899 3000 	ldrb.w	r3, [r9]
 801d488:	b2db      	uxtb	r3, r3
 801d48a:	2bfe      	cmp	r3, #254	@ 0xfe
 801d48c:	d123      	bne.n	801d4d6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x172>
 801d48e:	f899 3001 	ldrb.w	r3, [r9, #1]
 801d492:	3f01      	subs	r7, #1
 801d494:	f899 2002 	ldrb.w	r2, [r9, #2]
 801d498:	f109 0804 	add.w	r8, r9, #4
 801d49c:	b2db      	uxtb	r3, r3
 801d49e:	f899 1003 	ldrb.w	r1, [r9, #3]
 801d4a2:	b2d2      	uxtb	r2, r2
 801d4a4:	f363 0507 	bfi	r5, r3, #0, #8
 801d4a8:	b2c9      	uxtb	r1, r1
 801d4aa:	b2bf      	uxth	r7, r7
 801d4ac:	f362 250f 	bfi	r5, r2, #8, #8
 801d4b0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801d4b4:	fb10 2201 	smlabb	r2, r0, r1, r2
 801d4b8:	f361 4517 	bfi	r5, r1, #16, #8
 801d4bc:	fb16 2303 	smlabb	r3, r6, r3, r2
 801d4c0:	9a00      	ldr	r2, [sp, #0]
 801d4c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d4c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d4ca:	605d      	str	r5, [r3, #4]
 801d4cc:	46c1      	mov	r9, r8
 801d4ce:	e7d6      	b.n	801d47e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x11a>
 801d4d0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801d4d4:	e798      	b.n	801d408 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0xa4>
 801d4d6:	119a      	asrs	r2, r3, #6
 801d4d8:	f109 0801 	add.w	r8, r9, #1
 801d4dc:	d108      	bne.n	801d4f0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x18c>
 801d4de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d4e2:	9a00      	ldr	r2, [sp, #0]
 801d4e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d4e8:	685d      	ldr	r5, [r3, #4]
 801d4ea:	3f01      	subs	r7, #1
 801d4ec:	b2bf      	uxth	r7, r7
 801d4ee:	e7ed      	b.n	801d4cc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x168>
 801d4f0:	2a01      	cmp	r2, #1
 801d4f2:	d125      	bne.n	801d540 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x1dc>
 801d4f4:	f003 0103 	and.w	r1, r3, #3
 801d4f8:	1eaa      	subs	r2, r5, #2
 801d4fa:	440a      	add	r2, r1
 801d4fc:	f3c3 0181 	ubfx	r1, r3, #2, #2
 801d500:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801d504:	b2d2      	uxtb	r2, r2
 801d506:	3902      	subs	r1, #2
 801d508:	3b02      	subs	r3, #2
 801d50a:	f362 0507 	bfi	r5, r2, #0, #8
 801d50e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801d512:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801d516:	f361 250f 	bfi	r5, r1, #8, #8
 801d51a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801d51e:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 801d522:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801d526:	fb10 1103 	smlabb	r1, r0, r3, r1
 801d52a:	f363 4517 	bfi	r5, r3, #16, #8
 801d52e:	9b00      	ldr	r3, [sp, #0]
 801d530:	fb16 1202 	smlabb	r2, r6, r2, r1
 801d534:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801d538:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801d53c:	6055      	str	r5, [r2, #4]
 801d53e:	e7d4      	b.n	801d4ea <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 801d540:	2a02      	cmp	r2, #2
 801d542:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d546:	d12c      	bne.n	801d5a2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x23e>
 801d548:	f899 2001 	ldrb.w	r2, [r9, #1]
 801d54c:	f1a3 0c20 	sub.w	ip, r3, #32
 801d550:	f109 0802 	add.w	r8, r9, #2
 801d554:	b2d2      	uxtb	r2, r2
 801d556:	f002 010f 	and.w	r1, r2, #15
 801d55a:	1112      	asrs	r2, r2, #4
 801d55c:	3908      	subs	r1, #8
 801d55e:	3a08      	subs	r2, #8
 801d560:	4461      	add	r1, ip
 801d562:	4494      	add	ip, r2
 801d564:	4429      	add	r1, r5
 801d566:	b2c9      	uxtb	r1, r1
 801d568:	f361 0507 	bfi	r5, r1, #0, #8
 801d56c:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 801d570:	f1ae 0e20 	sub.w	lr, lr, #32
 801d574:	4473      	add	r3, lr
 801d576:	b2db      	uxtb	r3, r3
 801d578:	f363 250f 	bfi	r5, r3, #8, #8
 801d57c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d580:	eb0c 4c15 	add.w	ip, ip, r5, lsr #16
 801d584:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 801d588:	fb10 330c 	smlabb	r3, r0, ip, r3
 801d58c:	f36c 4517 	bfi	r5, ip, #16, #8
 801d590:	fb16 3101 	smlabb	r1, r6, r1, r3
 801d594:	9b00      	ldr	r3, [sp, #0]
 801d596:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801d59a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801d59e:	604d      	str	r5, [r1, #4]
 801d5a0:	e7a3      	b.n	801d4ea <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 801d5a2:	3301      	adds	r3, #1
 801d5a4:	42bb      	cmp	r3, r7
 801d5a6:	dd23      	ble.n	801d5f0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x28c>
 801d5a8:	eba3 0907 	sub.w	r9, r3, r7
 801d5ac:	f1b9 0f00 	cmp.w	r9, #0
 801d5b0:	dc20      	bgt.n	801d5f4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x290>
 801d5b2:	9e02      	ldr	r6, [sp, #8]
 801d5b4:	2700      	movs	r7, #0
 801d5b6:	2e00      	cmp	r6, #0
 801d5b8:	f340 8142 	ble.w	801d840 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4dc>
 801d5bc:	f108 0301 	add.w	r3, r8, #1
 801d5c0:	9307      	str	r3, [sp, #28]
 801d5c2:	f898 3000 	ldrb.w	r3, [r8]
 801d5c6:	b2db      	uxtb	r3, r3
 801d5c8:	119a      	asrs	r2, r3, #6
 801d5ca:	d12a      	bne.n	801d622 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2be>
 801d5cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d5d0:	9a00      	ldr	r2, [sp, #0]
 801d5d2:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801d5d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d5da:	685d      	ldr	r5, [r3, #4]
 801d5dc:	f040 811f 	bne.w	801d81e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801d5e0:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801d5e4:	7025      	strb	r5, [r4, #0]
 801d5e6:	7063      	strb	r3, [r4, #1]
 801d5e8:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801d5ec:	70a3      	strb	r3, [r4, #2]
 801d5ee:	e04e      	b.n	801d68e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801d5f0:	1aff      	subs	r7, r7, r3
 801d5f2:	e77b      	b.n	801d4ec <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x188>
 801d5f4:	9b02      	ldr	r3, [sp, #8]
 801d5f6:	4620      	mov	r0, r4
 801d5f8:	462a      	mov	r2, r5
 801d5fa:	454b      	cmp	r3, r9
 801d5fc:	bfa8      	it	ge
 801d5fe:	464b      	movge	r3, r9
 801d600:	461f      	mov	r7, r3
 801d602:	9b02      	ldr	r3, [sp, #8]
 801d604:	4639      	mov	r1, r7
 801d606:	1bde      	subs	r6, r3, r7
 801d608:	eba9 0907 	sub.w	r9, r9, r7
 801d60c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d610:	465b      	mov	r3, fp
 801d612:	f7e5 fdfd 	bl	8003210 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 801d616:	443c      	add	r4, r7
 801d618:	e7cc      	b.n	801d5b4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 801d61a:	46c8      	mov	r8, r9
 801d61c:	9e02      	ldr	r6, [sp, #8]
 801d61e:	46b9      	mov	r9, r7
 801d620:	e7c8      	b.n	801d5b4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 801d622:	2a01      	cmp	r2, #1
 801d624:	d136      	bne.n	801d694 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x330>
 801d626:	f003 0103 	and.w	r1, r3, #3
 801d62a:	1ea8      	subs	r0, r5, #2
 801d62c:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801d630:	4408      	add	r0, r1
 801d632:	f3c3 0181 	ubfx	r1, r3, #2, #2
 801d636:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801d63a:	b2c0      	uxtb	r0, r0
 801d63c:	f1a1 0102 	sub.w	r1, r1, #2
 801d640:	f1a3 0302 	sub.w	r3, r3, #2
 801d644:	f360 0507 	bfi	r5, r0, #0, #8
 801d648:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801d64c:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801d650:	f361 250f 	bfi	r5, r1, #8, #8
 801d654:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 801d658:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 801d65c:	f003 08ff 	and.w	r8, r3, #255	@ 0xff
 801d660:	f04f 0303 	mov.w	r3, #3
 801d664:	fb13 ce08 	smlabb	lr, r3, r8, ip
 801d668:	f04f 0c07 	mov.w	ip, #7
 801d66c:	9b00      	ldr	r3, [sp, #0]
 801d66e:	f368 4517 	bfi	r5, r8, #16, #8
 801d672:	fb1c ec00 	smlabb	ip, ip, r0, lr
 801d676:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
 801d67a:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 801d67e:	f8cc 5004 	str.w	r5, [ip, #4]
 801d682:	f040 80cd 	bne.w	801d820 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 801d686:	7020      	strb	r0, [r4, #0]
 801d688:	7061      	strb	r1, [r4, #1]
 801d68a:	f884 8002 	strb.w	r8, [r4, #2]
 801d68e:	3e01      	subs	r6, #1
 801d690:	3403      	adds	r4, #3
 801d692:	e0c1      	b.n	801d818 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 801d694:	2a02      	cmp	r2, #2
 801d696:	d13d      	bne.n	801d714 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3b0>
 801d698:	f898 1001 	ldrb.w	r1, [r8, #1]
 801d69c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d6a0:	f108 0202 	add.w	r2, r8, #2
 801d6a4:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801d6a8:	b2c9      	uxtb	r1, r1
 801d6aa:	f1a3 0c20 	sub.w	ip, r3, #32
 801d6ae:	9207      	str	r2, [sp, #28]
 801d6b0:	f001 000f 	and.w	r0, r1, #15
 801d6b4:	f1a0 0008 	sub.w	r0, r0, #8
 801d6b8:	4460      	add	r0, ip
 801d6ba:	4428      	add	r0, r5
 801d6bc:	b2c0      	uxtb	r0, r0
 801d6be:	f360 0507 	bfi	r5, r0, #0, #8
 801d6c2:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801d6c6:	f1a2 0220 	sub.w	r2, r2, #32
 801d6ca:	4413      	add	r3, r2
 801d6cc:	ea4f 1221 	mov.w	r2, r1, asr #4
 801d6d0:	b2db      	uxtb	r3, r3
 801d6d2:	f1a2 0208 	sub.w	r2, r2, #8
 801d6d6:	f363 250f 	bfi	r5, r3, #8, #8
 801d6da:	4462      	add	r2, ip
 801d6dc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801d6e0:	f04f 0c03 	mov.w	ip, #3
 801d6e4:	eb02 4215 	add.w	r2, r2, r5, lsr #16
 801d6e8:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801d6ec:	fb1c 1c02 	smlabb	ip, ip, r2, r1
 801d6f0:	f04f 0107 	mov.w	r1, #7
 801d6f4:	f362 4517 	bfi	r5, r2, #16, #8
 801d6f8:	fb11 c100 	smlabb	r1, r1, r0, ip
 801d6fc:	f001 0c3f 	and.w	ip, r1, #63	@ 0x3f
 801d700:	9900      	ldr	r1, [sp, #0]
 801d702:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 801d706:	604d      	str	r5, [r1, #4]
 801d708:	f040 8089 	bne.w	801d81e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801d70c:	7020      	strb	r0, [r4, #0]
 801d70e:	7063      	strb	r3, [r4, #1]
 801d710:	70a2      	strb	r2, [r4, #2]
 801d712:	e7bc      	b.n	801d68e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801d714:	2bfe      	cmp	r3, #254	@ 0xfe
 801d716:	d12f      	bne.n	801d778 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x414>
 801d718:	f898 0001 	ldrb.w	r0, [r8, #1]
 801d71c:	f108 0304 	add.w	r3, r8, #4
 801d720:	f898 2002 	ldrb.w	r2, [r8, #2]
 801d724:	f04f 0c03 	mov.w	ip, #3
 801d728:	f898 1003 	ldrb.w	r1, [r8, #3]
 801d72c:	b2c0      	uxtb	r0, r0
 801d72e:	b2d2      	uxtb	r2, r2
 801d730:	9307      	str	r3, [sp, #28]
 801d732:	b2c9      	uxtb	r1, r1
 801d734:	f360 0507 	bfi	r5, r0, #0, #8
 801d738:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 801d73c:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801d740:	f362 250f 	bfi	r5, r2, #8, #8
 801d744:	fb1c 3c01 	smlabb	ip, ip, r1, r3
 801d748:	f04f 0307 	mov.w	r3, #7
 801d74c:	f361 4517 	bfi	r5, r1, #16, #8
 801d750:	fb13 c300 	smlabb	r3, r3, r0, ip
 801d754:	f003 0c3f 	and.w	ip, r3, #63	@ 0x3f
 801d758:	9b00      	ldr	r3, [sp, #0]
 801d75a:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 801d75e:	605d      	str	r5, [r3, #4]
 801d760:	d15d      	bne.n	801d81e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801d762:	7020      	strb	r0, [r4, #0]
 801d764:	7062      	strb	r2, [r4, #1]
 801d766:	70a1      	strb	r1, [r4, #2]
 801d768:	e791      	b.n	801d68e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801d76a:	bf00      	nop
 801d76c:	24026418 	.word	0x24026418
 801d770:	24026412 	.word	0x24026412
 801d774:	24000140 	.word	0x24000140
 801d778:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d77c:	1c5a      	adds	r2, r3, #1
 801d77e:	b94b      	cbnz	r3, 801d794 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x430>
 801d780:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801d784:	d14c      	bne.n	801d820 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 801d786:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801d78a:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801d78e:	7025      	strb	r5, [r4, #0]
 801d790:	7062      	strb	r2, [r4, #1]
 801d792:	e72b      	b.n	801d5ec <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x288>
 801d794:	4296      	cmp	r6, r2
 801d796:	46b0      	mov	r8, r6
 801d798:	bfa8      	it	ge
 801d79a:	4690      	movge	r8, r2
 801d79c:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801d7a0:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801d7a4:	eba6 0608 	sub.w	r6, r6, r8
 801d7a8:	eba2 0908 	sub.w	r9, r2, r8
 801d7ac:	9308      	str	r3, [sp, #32]
 801d7ae:	b2eb      	uxtb	r3, r5
 801d7b0:	930c      	str	r3, [sp, #48]	@ 0x30
 801d7b2:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801d7b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d7b8:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801d7bc:	930a      	str	r3, [sp, #40]	@ 0x28
 801d7be:	9b08      	ldr	r3, [sp, #32]
 801d7c0:	d030      	beq.n	801d824 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c0>
 801d7c2:	18fb      	adds	r3, r7, r3
 801d7c4:	2bc0      	cmp	r3, #192	@ 0xc0
 801d7c6:	dd15      	ble.n	801d7f4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x490>
 801d7c8:	4650      	mov	r0, sl
 801d7ca:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 801d7ce:	f7e5 fd05 	bl	80031dc <_ZN8touchgfx5paint9flushLineEPmi>
 801d7d2:	2203      	movs	r2, #3
 801d7d4:	4651      	mov	r1, sl
 801d7d6:	465b      	mov	r3, fp
 801d7d8:	4620      	mov	r0, r4
 801d7da:	443c      	add	r4, r7
 801d7dc:	fb97 f2f2 	sdiv	r2, r7, r2
 801d7e0:	f7e5 fd40 	bl	8003264 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 801d7e4:	4b3d      	ldr	r3, [pc, #244]	@ (801d8dc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>)
 801d7e6:	2700      	movs	r7, #0
 801d7e8:	459a      	cmp	sl, r3
 801d7ea:	bf0c      	ite	eq
 801d7ec:	f8df a0f8 	ldreq.w	sl, [pc, #248]	@ 801d8e8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x584>
 801d7f0:	f8df a0e8 	ldrne.w	sl, [pc, #232]	@ 801d8dc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>
 801d7f4:	eb0a 0307 	add.w	r3, sl, r7
 801d7f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d7fa:	f1b8 0801 	subs.w	r8, r8, #1
 801d7fe:	f103 0303 	add.w	r3, r3, #3
 801d802:	f803 2c03 	strb.w	r2, [r3, #-3]
 801d806:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d808:	f803 2c02 	strb.w	r2, [r3, #-2]
 801d80c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d80e:	f803 2c01 	strb.w	r2, [r3, #-1]
 801d812:	d1f1      	bne.n	801d7f8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x494>
 801d814:	9b08      	ldr	r3, [sp, #32]
 801d816:	441f      	add	r7, r3
 801d818:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801d81c:	e6cb      	b.n	801d5b6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x252>
 801d81e:	2201      	movs	r2, #1
 801d820:	4690      	mov	r8, r2
 801d822:	e7bb      	b.n	801d79c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x438>
 801d824:	4423      	add	r3, r4
 801d826:	42a3      	cmp	r3, r4
 801d828:	d9f6      	bls.n	801d818 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 801d82a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d82c:	3403      	adds	r4, #3
 801d82e:	f804 2c03 	strb.w	r2, [r4, #-3]
 801d832:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d834:	f804 2c02 	strb.w	r2, [r4, #-2]
 801d838:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d83a:	f804 2c01 	strb.w	r2, [r4, #-1]
 801d83e:	e7f2      	b.n	801d826 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c2>
 801d840:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801d844:	d00e      	beq.n	801d864 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 801d846:	b16f      	cbz	r7, 801d864 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 801d848:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 801d84c:	4650      	mov	r0, sl
 801d84e:	f7e5 fcc5 	bl	80031dc <_ZN8touchgfx5paint9flushLineEPmi>
 801d852:	2203      	movs	r2, #3
 801d854:	4620      	mov	r0, r4
 801d856:	443c      	add	r4, r7
 801d858:	465b      	mov	r3, fp
 801d85a:	4651      	mov	r1, sl
 801d85c:	fb97 f2f2 	sdiv	r2, r7, r2
 801d860:	f7e5 fd00 	bl	8003264 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 801d864:	4b1e      	ldr	r3, [pc, #120]	@ (801d8e0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x57c>)
 801d866:	9a02      	ldr	r2, [sp, #8]
 801d868:	881b      	ldrh	r3, [r3, #0]
 801d86a:	1a9b      	subs	r3, r3, r2
 801d86c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d870:	441c      	add	r4, r3
 801d872:	9b04      	ldr	r3, [sp, #16]
 801d874:	3301      	adds	r3, #1
 801d876:	9304      	str	r3, [sp, #16]
 801d878:	9a04      	ldr	r2, [sp, #16]
 801d87a:	9b01      	ldr	r3, [sp, #4]
 801d87c:	4293      	cmp	r3, r2
 801d87e:	d11c      	bne.n	801d8ba <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x556>
 801d880:	9b03      	ldr	r3, [sp, #12]
 801d882:	2500      	movs	r5, #0
 801d884:	9a03      	ldr	r2, [sp, #12]
 801d886:	1c5e      	adds	r6, r3, #1
 801d888:	9b05      	ldr	r3, [sp, #20]
 801d88a:	f8bd 7040 	ldrh.w	r7, [sp, #64]	@ 0x40
 801d88e:	4629      	mov	r1, r5
 801d890:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 801d894:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801d898:	9b06      	ldr	r3, [sp, #24]
 801d89a:	fa98 f888 	rev.w	r8, r8
 801d89e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d8a0:	4498      	add	r8, r3
 801d8a2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801d8a6:	1aff      	subs	r7, r7, r3
 801d8a8:	f007 ff32 	bl	8025710 <memset>
 801d8ac:	b2bf      	uxth	r7, r7
 801d8ae:	e9cd 6503 	strd	r6, r5, [sp, #12]
 801d8b2:	f7e5 fc89 	bl	80031c8 <_ZN8touchgfx5paint8tearDownEv>
 801d8b6:	46c1      	mov	r9, r8
 801d8b8:	e5db      	b.n	801d472 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x10e>
 801d8ba:	f8bd 703c 	ldrh.w	r7, [sp, #60]	@ 0x3c
 801d8be:	9b02      	ldr	r3, [sp, #8]
 801d8c0:	1aff      	subs	r7, r7, r3
 801d8c2:	eba7 0709 	sub.w	r7, r7, r9
 801d8c6:	b2bf      	uxth	r7, r7
 801d8c8:	e7f3      	b.n	801d8b2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x54e>
 801d8ca:	4b06      	ldr	r3, [pc, #24]	@ (801d8e4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x580>)
 801d8cc:	6818      	ldr	r0, [r3, #0]
 801d8ce:	6803      	ldr	r3, [r0, #0]
 801d8d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d8d2:	4798      	blx	r3
 801d8d4:	b013      	add	sp, #76	@ 0x4c
 801d8d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d8da:	bf00      	nop
 801d8dc:	24000140 	.word	0x24000140
 801d8e0:	24026412 	.word	0x24026412
 801d8e4:	24026418 	.word	0x24026418
 801d8e8:	24000240 	.word	0x24000240

0801d8ec <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801d8ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d8f0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801d8f4:	9c06      	ldr	r4, [sp, #24]
 801d8f6:	2800      	cmp	r0, #0
 801d8f8:	d06e      	beq.n	801d9d8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801d8fa:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801d8fe:	2d00      	cmp	r5, #0
 801d900:	dd6a      	ble.n	801d9d8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801d902:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801d906:	f1bc 0f00 	cmp.w	ip, #0
 801d90a:	dd65      	ble.n	801d9d8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801d90c:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801d910:	28ff      	cmp	r0, #255	@ 0xff
 801d912:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d916:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801d91a:	fb02 3306 	mla	r3, r2, r6, r3
 801d91e:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801d922:	b2e4      	uxtb	r4, r4
 801d924:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d928:	4419      	add	r1, r3
 801d92a:	fb02 f30c 	mul.w	r3, r2, ip
 801d92e:	eba2 0205 	sub.w	r2, r2, r5
 801d932:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d936:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d93a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d93e:	440b      	add	r3, r1
 801d940:	d03e      	beq.n	801d9c0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 801d942:	fa1f fc80 	uxth.w	ip, r0
 801d946:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 801d94a:	fb06 f60c 	mul.w	r6, r6, ip
 801d94e:	b280      	uxth	r0, r0
 801d950:	fb07 f70c 	mul.w	r7, r7, ip
 801d954:	fb04 f40c 	mul.w	r4, r4, ip
 801d958:	4299      	cmp	r1, r3
 801d95a:	d23d      	bcs.n	801d9d8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801d95c:	eb01 0c05 	add.w	ip, r1, r5
 801d960:	458c      	cmp	ip, r1
 801d962:	f101 0e03 	add.w	lr, r1, #3
 801d966:	d928      	bls.n	801d9ba <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 801d968:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801d96c:	fb11 f100 	smulbb	r1, r1, r0
 801d970:	4421      	add	r1, r4
 801d972:	b289      	uxth	r1, r1
 801d974:	f101 0801 	add.w	r8, r1, #1
 801d978:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801d97c:	1209      	asrs	r1, r1, #8
 801d97e:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801d982:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801d986:	fb11 f100 	smulbb	r1, r1, r0
 801d98a:	4439      	add	r1, r7
 801d98c:	b289      	uxth	r1, r1
 801d98e:	f101 0801 	add.w	r8, r1, #1
 801d992:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801d996:	1209      	asrs	r1, r1, #8
 801d998:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801d99c:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801d9a0:	fb11 f100 	smulbb	r1, r1, r0
 801d9a4:	4431      	add	r1, r6
 801d9a6:	b289      	uxth	r1, r1
 801d9a8:	f101 0801 	add.w	r8, r1, #1
 801d9ac:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801d9b0:	1209      	asrs	r1, r1, #8
 801d9b2:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801d9b6:	4671      	mov	r1, lr
 801d9b8:	e7d2      	b.n	801d960 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 801d9ba:	4411      	add	r1, r2
 801d9bc:	e7cc      	b.n	801d958 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 801d9be:	4411      	add	r1, r2
 801d9c0:	4299      	cmp	r1, r3
 801d9c2:	d209      	bcs.n	801d9d8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801d9c4:	1948      	adds	r0, r1, r5
 801d9c6:	4281      	cmp	r1, r0
 801d9c8:	d2f9      	bcs.n	801d9be <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 801d9ca:	700c      	strb	r4, [r1, #0]
 801d9cc:	3103      	adds	r1, #3
 801d9ce:	f801 7c02 	strb.w	r7, [r1, #-2]
 801d9d2:	f801 6c01 	strb.w	r6, [r1, #-1]
 801d9d6:	e7f6      	b.n	801d9c6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 801d9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d9dc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801d9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9e0:	b093      	sub	sp, #76	@ 0x4c
 801d9e2:	4699      	mov	r9, r3
 801d9e4:	4617      	mov	r7, r2
 801d9e6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d9ea:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	@ 0x74
 801d9ee:	4604      	mov	r4, r0
 801d9f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d9f4:	a80c      	add	r0, sp, #48	@ 0x30
 801d9f6:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 801d9fa:	460d      	mov	r5, r1
 801d9fc:	4649      	mov	r1, r9
 801d9fe:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801da02:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801da06:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 801da0a:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
 801da0e:	f7f3 f951 	bl	8010cb4 <_ZN8touchgfx4RectaNERKS0_>
 801da12:	4639      	mov	r1, r7
 801da14:	a80c      	add	r0, sp, #48	@ 0x30
 801da16:	f7f3 f94d 	bl	8010cb4 <_ZN8touchgfx4RectaNERKS0_>
 801da1a:	4b78      	ldr	r3, [pc, #480]	@ (801dbfc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801da1c:	8818      	ldrh	r0, [r3, #0]
 801da1e:	4b78      	ldr	r3, [pc, #480]	@ (801dc00 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 801da20:	b202      	sxth	r2, r0
 801da22:	8819      	ldrh	r1, [r3, #0]
 801da24:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801da28:	b20f      	sxth	r7, r1
 801da2a:	2b00      	cmp	r3, #0
 801da2c:	da07      	bge.n	801da3e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 801da2e:	f8bd c034 	ldrh.w	ip, [sp, #52]	@ 0x34
 801da32:	4463      	add	r3, ip
 801da34:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801da38:	2300      	movs	r3, #0
 801da3a:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801da3e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801da42:	f9bd c034 	ldrsh.w	ip, [sp, #52]	@ 0x34
 801da46:	1ad2      	subs	r2, r2, r3
 801da48:	4594      	cmp	ip, r2
 801da4a:	bfc4      	itt	gt
 801da4c:	1ac2      	subgt	r2, r0, r3
 801da4e:	f8ad 2034 	strhgt.w	r2, [sp, #52]	@ 0x34
 801da52:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801da56:	2a00      	cmp	r2, #0
 801da58:	da07      	bge.n	801da6a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 801da5a:	f8bd c036 	ldrh.w	ip, [sp, #54]	@ 0x36
 801da5e:	4462      	add	r2, ip
 801da60:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801da64:	2200      	movs	r2, #0
 801da66:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801da6a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801da6e:	f9bd c036 	ldrsh.w	ip, [sp, #54]	@ 0x36
 801da72:	1abf      	subs	r7, r7, r2
 801da74:	45bc      	cmp	ip, r7
 801da76:	f8df c190 	ldr.w	ip, [pc, #400]	@ 801dc08 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 801da7a:	bfc8      	it	gt
 801da7c:	1a8f      	subgt	r7, r1, r2
 801da7e:	f89c c000 	ldrb.w	ip, [ip]
 801da82:	bfc8      	it	gt
 801da84:	f8ad 7036 	strhgt.w	r7, [sp, #54]	@ 0x36
 801da88:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 801da8c:	f1bc 0f00 	cmp.w	ip, #0
 801da90:	d176      	bne.n	801db80 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 801da92:	4287      	cmp	r7, r0
 801da94:	bf14      	ite	ne
 801da96:	2100      	movne	r1, #0
 801da98:	2101      	moveq	r1, #1
 801da9a:	2f00      	cmp	r7, #0
 801da9c:	9107      	str	r1, [sp, #28]
 801da9e:	dd73      	ble.n	801db88 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801daa0:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 801daa4:	2900      	cmp	r1, #0
 801daa6:	9104      	str	r1, [sp, #16]
 801daa8:	dd6e      	ble.n	801db88 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801daaa:	f8b9 1000 	ldrh.w	r1, [r9]
 801daae:	a80e      	add	r0, sp, #56	@ 0x38
 801dab0:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 801dab4:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 801dab8:	1a5b      	subs	r3, r3, r1
 801daba:	a910      	add	r1, sp, #64	@ 0x40
 801dabc:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801dac0:	b21b      	sxth	r3, r3
 801dac2:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 801dac6:	f8df a144 	ldr.w	sl, [pc, #324]	@ 801dc0c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801daca:	9305      	str	r3, [sp, #20]
 801dacc:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 801dad0:	1ad2      	subs	r2, r2, r3
 801dad2:	b213      	sxth	r3, r2
 801dad4:	9306      	str	r3, [sp, #24]
 801dad6:	9b05      	ldr	r3, [sp, #20]
 801dad8:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801dadc:	9b06      	ldr	r3, [sp, #24]
 801dade:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801dae2:	9b04      	ldr	r3, [sp, #16]
 801dae4:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 801dae8:	2300      	movs	r3, #0
 801daea:	9310      	str	r3, [sp, #64]	@ 0x40
 801daec:	f7f8 fea2 	bl	8016834 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801daf0:	4640      	mov	r0, r8
 801daf2:	f7f8 fe77 	bl	80167e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801daf6:	a810      	add	r0, sp, #64	@ 0x40
 801daf8:	f7f8 fe74 	bl	80167e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dafc:	4b41      	ldr	r3, [pc, #260]	@ (801dc04 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 801dafe:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801db02:	4628      	mov	r0, r5
 801db04:	881b      	ldrh	r3, [r3, #0]
 801db06:	9308      	str	r3, [sp, #32]
 801db08:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801db0c:	b21b      	sxth	r3, r3
 801db0e:	9303      	str	r3, [sp, #12]
 801db10:	682b      	ldr	r3, [r5, #0]
 801db12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801db14:	4798      	blx	r3
 801db16:	9a03      	ldr	r2, [sp, #12]
 801db18:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 801db1c:	4681      	mov	r9, r0
 801db1e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801db22:	fb13 f302 	smulbb	r3, r3, r2
 801db26:	2203      	movs	r2, #3
 801db28:	f8da 0000 	ldr.w	r0, [sl]
 801db2c:	fb15 3302 	smlabb	r3, r5, r2, r3
 801db30:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 801db32:	920b      	str	r2, [sp, #44]	@ 0x2c
 801db34:	441d      	add	r5, r3
 801db36:	6803      	ldr	r3, [r0, #0]
 801db38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801db3a:	4798      	blx	r3
 801db3c:	9009      	str	r0, [sp, #36]	@ 0x24
 801db3e:	f8da 0000 	ldr.w	r0, [sl]
 801db42:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 801db46:	6803      	ldr	r3, [r0, #0]
 801db48:	910a      	str	r1, [sp, #40]	@ 0x28
 801db4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801db4c:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	@ 0x32
 801db50:	4798      	blx	r3
 801db52:	f010 0f01 	tst.w	r0, #1
 801db56:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 801db5a:	d01e      	beq.n	801db9a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 801db5c:	f8da 0000 	ldr.w	r0, [sl]
 801db60:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801db64:	6803      	ldr	r3, [r0, #0]
 801db66:	9200      	str	r2, [sp, #0]
 801db68:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 801db6a:	462b      	mov	r3, r5
 801db6c:	e898 0006 	ldmia.w	r8, {r1, r2}
 801db70:	47b0      	blx	r6
 801db72:	9b05      	ldr	r3, [sp, #20]
 801db74:	80a7      	strh	r7, [r4, #4]
 801db76:	8023      	strh	r3, [r4, #0]
 801db78:	9b06      	ldr	r3, [sp, #24]
 801db7a:	8063      	strh	r3, [r4, #2]
 801db7c:	9b04      	ldr	r3, [sp, #16]
 801db7e:	e007      	b.n	801db90 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 801db80:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 801db84:	4288      	cmp	r0, r1
 801db86:	e785      	b.n	801da94 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 801db88:	2300      	movs	r3, #0
 801db8a:	8023      	strh	r3, [r4, #0]
 801db8c:	8063      	strh	r3, [r4, #2]
 801db8e:	80a3      	strh	r3, [r4, #4]
 801db90:	4620      	mov	r0, r4
 801db92:	80e3      	strh	r3, [r4, #6]
 801db94:	b013      	add	sp, #76	@ 0x4c
 801db96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db9a:	fb09 f606 	mul.w	r6, r9, r6
 801db9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dba0:	fb11 6602 	smlabb	r6, r1, r2, r6
 801dba4:	9a07      	ldr	r2, [sp, #28]
 801dba6:	4433      	add	r3, r6
 801dba8:	461e      	mov	r6, r3
 801dbaa:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801dbae:	b16a      	cbz	r2, 801dbcc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801dbb0:	9a08      	ldr	r2, [sp, #32]
 801dbb2:	4593      	cmp	fp, r2
 801dbb4:	d10a      	bne.n	801dbcc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801dbb6:	f8da 0000 	ldr.w	r0, [sl]
 801dbba:	fb09 f303 	mul.w	r3, r9, r3
 801dbbe:	4629      	mov	r1, r5
 801dbc0:	6802      	ldr	r2, [r0, #0]
 801dbc2:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 801dbc6:	4632      	mov	r2, r6
 801dbc8:	47d0      	blx	sl
 801dbca:	e7d2      	b.n	801db72 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801dbcc:	9a03      	ldr	r2, [sp, #12]
 801dbce:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 801dc0c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801dbd2:	fb02 5803 	mla	r8, r2, r3, r5
 801dbd6:	4545      	cmp	r5, r8
 801dbd8:	d2cb      	bcs.n	801db72 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801dbda:	f8db 0000 	ldr.w	r0, [fp]
 801dbde:	4629      	mov	r1, r5
 801dbe0:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801dbe4:	6802      	ldr	r2, [r0, #0]
 801dbe6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dbea:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 801dbee:	4632      	mov	r2, r6
 801dbf0:	47d0      	blx	sl
 801dbf2:	9b03      	ldr	r3, [sp, #12]
 801dbf4:	444e      	add	r6, r9
 801dbf6:	441d      	add	r5, r3
 801dbf8:	e7ed      	b.n	801dbd6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801dbfa:	bf00      	nop
 801dbfc:	2402640c 	.word	0x2402640c
 801dc00:	2402640e 	.word	0x2402640e
 801dc04:	24026412 	.word	0x24026412
 801dc08:	24026410 	.word	0x24026410
 801dc0c:	24026418 	.word	0x24026418

0801dc10 <_ZN8touchgfx8LCD24bppC1Ev>:
 801dc10:	2200      	movs	r2, #0
 801dc12:	490e      	ldr	r1, [pc, #56]	@ (801dc4c <_ZN8touchgfx8LCD24bppC1Ev+0x3c>)
 801dc14:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801dc18:	6001      	str	r1, [r0, #0]
 801dc1a:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801dc1e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801dc22:	e9c0 2207 	strd	r2, r2, [r0, #28]
 801dc26:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 801dc2a:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 801dc2e:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 801dc32:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 801dc36:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 801dc3a:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 801dc3e:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 801dc42:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 801dc46:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 801dc4a:	4770      	bx	lr
 801dc4c:	08029bf0 	.word	0x08029bf0

0801dc50 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801dc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc54:	b091      	sub	sp, #68	@ 0x44
 801dc56:	4607      	mov	r7, r0
 801dc58:	4688      	mov	r8, r1
 801dc5a:	6810      	ldr	r0, [r2, #0]
 801dc5c:	6851      	ldr	r1, [r2, #4]
 801dc5e:	ac0c      	add	r4, sp, #48	@ 0x30
 801dc60:	4616      	mov	r6, r2
 801dc62:	f89d 9068 	ldrb.w	r9, [sp, #104]	@ 0x68
 801dc66:	4d64      	ldr	r5, [pc, #400]	@ (801ddf8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801dc68:	f8df a190 	ldr.w	sl, [pc, #400]	@ 801ddfc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801dc6c:	c403      	stmia	r4!, {r0, r1}
 801dc6e:	6818      	ldr	r0, [r3, #0]
 801dc70:	ac0e      	add	r4, sp, #56	@ 0x38
 801dc72:	6859      	ldr	r1, [r3, #4]
 801dc74:	c403      	stmia	r4!, {r0, r1}
 801dc76:	a80c      	add	r0, sp, #48	@ 0x30
 801dc78:	f7f8 fdb4 	bl	80167e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dc7c:	4631      	mov	r1, r6
 801dc7e:	a80e      	add	r0, sp, #56	@ 0x38
 801dc80:	f7f8 fdd8 	bl	8016834 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dc84:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801dc88:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801dc8c:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801dc90:	6828      	ldr	r0, [r5, #0]
 801dc92:	fb11 2103 	smlabb	r1, r1, r3, r2
 801dc96:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 801dc9a:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 801dc9e:	440f      	add	r7, r1
 801dca0:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801dca4:	440a      	add	r2, r1
 801dca6:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801dcaa:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801dcae:	4413      	add	r3, r2
 801dcb0:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801dcb4:	6803      	ldr	r3, [r0, #0]
 801dcb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801dcb8:	4798      	blx	r3
 801dcba:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801dcbe:	6828      	ldr	r0, [r5, #0]
 801dcc0:	d01f      	beq.n	801dd02 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 801dcc2:	2201      	movs	r2, #1
 801dcc4:	2500      	movs	r5, #0
 801dcc6:	6801      	ldr	r1, [r0, #0]
 801dcc8:	b2a4      	uxth	r4, r4
 801dcca:	b2b6      	uxth	r6, r6
 801dccc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801dcd0:	e9cd 2508 	strd	r2, r5, [sp, #32]
 801dcd4:	250b      	movs	r5, #11
 801dcd6:	9507      	str	r5, [sp, #28]
 801dcd8:	f8ba 5000 	ldrh.w	r5, [sl]
 801dcdc:	f8cd 9010 	str.w	r9, [sp, #16]
 801dce0:	9602      	str	r6, [sp, #8]
 801dce2:	9401      	str	r4, [sp, #4]
 801dce4:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801dce8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801dcec:	9203      	str	r2, [sp, #12]
 801dcee:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801dcf2:	9200      	str	r2, [sp, #0]
 801dcf4:	4642      	mov	r2, r8
 801dcf6:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 801dcf8:	4639      	mov	r1, r7
 801dcfa:	47a0      	blx	r4
 801dcfc:	b011      	add	sp, #68	@ 0x44
 801dcfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd02:	6803      	ldr	r3, [r0, #0]
 801dd04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dd06:	4798      	blx	r3
 801dd08:	f8ba 5000 	ldrh.w	r5, [sl]
 801dd0c:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801dd10:	f04f 0e04 	mov.w	lr, #4
 801dd14:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801dd18:	436e      	muls	r6, r5
 801dd1a:	fb05 2303 	mla	r3, r5, r3, r2
 801dd1e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801dd22:	1b2d      	subs	r5, r5, r4
 801dd24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dd28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dd2c:	4418      	add	r0, r3
 801dd2e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801dd32:	1982      	adds	r2, r0, r6
 801dd34:	1b1b      	subs	r3, r3, r4
 801dd36:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801dd3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801dd3c:	4290      	cmp	r0, r2
 801dd3e:	d254      	bcs.n	801ddea <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 801dd40:	eb00 0a04 	add.w	sl, r0, r4
 801dd44:	4550      	cmp	r0, sl
 801dd46:	d24c      	bcs.n	801dde2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801dd48:	f817 1b01 	ldrb.w	r1, [r7], #1
 801dd4c:	fb1e e101 	smlabb	r1, lr, r1, lr
 801dd50:	eb08 0c01 	add.w	ip, r8, r1
 801dd54:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801dd58:	b173      	cbz	r3, 801dd78 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801dd5a:	2bff      	cmp	r3, #255	@ 0xff
 801dd5c:	f818 b001 	ldrb.w	fp, [r8, r1]
 801dd60:	d10c      	bne.n	801dd7c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801dd62:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801dd66:	d109      	bne.n	801dd7c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801dd68:	f880 b000 	strb.w	fp, [r0]
 801dd6c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801dd70:	7043      	strb	r3, [r0, #1]
 801dd72:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801dd76:	7083      	strb	r3, [r0, #2]
 801dd78:	3003      	adds	r0, #3
 801dd7a:	e7e3      	b.n	801dd44 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801dd7c:	fb09 f103 	mul.w	r1, r9, r3
 801dd80:	1c4b      	adds	r3, r1, #1
 801dd82:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801dd86:	7801      	ldrb	r1, [r0, #0]
 801dd88:	121b      	asrs	r3, r3, #8
 801dd8a:	b29e      	uxth	r6, r3
 801dd8c:	43db      	mvns	r3, r3
 801dd8e:	fb1b fb06 	smulbb	fp, fp, r6
 801dd92:	b2db      	uxtb	r3, r3
 801dd94:	fb01 b103 	mla	r1, r1, r3, fp
 801dd98:	b289      	uxth	r1, r1
 801dd9a:	f101 0b01 	add.w	fp, r1, #1
 801dd9e:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801dda2:	f890 b001 	ldrb.w	fp, [r0, #1]
 801dda6:	fb1b fb03 	smulbb	fp, fp, r3
 801ddaa:	1209      	asrs	r1, r1, #8
 801ddac:	7001      	strb	r1, [r0, #0]
 801ddae:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801ddb2:	fb01 b106 	mla	r1, r1, r6, fp
 801ddb6:	b289      	uxth	r1, r1
 801ddb8:	f101 0b01 	add.w	fp, r1, #1
 801ddbc:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801ddc0:	1209      	asrs	r1, r1, #8
 801ddc2:	7041      	strb	r1, [r0, #1]
 801ddc4:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801ddc8:	f890 c002 	ldrb.w	ip, [r0, #2]
 801ddcc:	fb1c f303 	smulbb	r3, ip, r3
 801ddd0:	fb01 3606 	mla	r6, r1, r6, r3
 801ddd4:	b2b6      	uxth	r6, r6
 801ddd6:	1c73      	adds	r3, r6, #1
 801ddd8:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801dddc:	1236      	asrs	r6, r6, #8
 801ddde:	7086      	strb	r6, [r0, #2]
 801dde0:	e7ca      	b.n	801dd78 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801dde2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801dde4:	4428      	add	r0, r5
 801dde6:	441f      	add	r7, r3
 801dde8:	e7a8      	b.n	801dd3c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801ddea:	4b03      	ldr	r3, [pc, #12]	@ (801ddf8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801ddec:	6818      	ldr	r0, [r3, #0]
 801ddee:	6803      	ldr	r3, [r0, #0]
 801ddf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ddf2:	4798      	blx	r3
 801ddf4:	e782      	b.n	801dcfc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801ddf6:	bf00      	nop
 801ddf8:	24026418 	.word	0x24026418
 801ddfc:	24026412 	.word	0x24026412

0801de00 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801de00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de04:	b091      	sub	sp, #68	@ 0x44
 801de06:	4680      	mov	r8, r0
 801de08:	460e      	mov	r6, r1
 801de0a:	6810      	ldr	r0, [r2, #0]
 801de0c:	6851      	ldr	r1, [r2, #4]
 801de0e:	ad0c      	add	r5, sp, #48	@ 0x30
 801de10:	4614      	mov	r4, r2
 801de12:	f89d 7068 	ldrb.w	r7, [sp, #104]	@ 0x68
 801de16:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 801dfb0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801de1a:	f8df a198 	ldr.w	sl, [pc, #408]	@ 801dfb4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801de1e:	c503      	stmia	r5!, {r0, r1}
 801de20:	6818      	ldr	r0, [r3, #0]
 801de22:	ad0e      	add	r5, sp, #56	@ 0x38
 801de24:	6859      	ldr	r1, [r3, #4]
 801de26:	c503      	stmia	r5!, {r0, r1}
 801de28:	a80c      	add	r0, sp, #48	@ 0x30
 801de2a:	f7f8 fcdb 	bl	80167e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801de2e:	4621      	mov	r1, r4
 801de30:	a80e      	add	r0, sp, #56	@ 0x38
 801de32:	f7f8 fcff 	bl	8016834 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801de36:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801de3a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801de3e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801de42:	f8d9 0000 	ldr.w	r0, [r9]
 801de46:	fb11 2103 	smlabb	r1, r1, r3, r2
 801de4a:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 801de4e:	eb08 0401 	add.w	r4, r8, r1
 801de52:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801de56:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 801de5a:	440a      	add	r2, r1
 801de5c:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801de60:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801de64:	4413      	add	r3, r2
 801de66:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801de6a:	6803      	ldr	r3, [r0, #0]
 801de6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801de6e:	4798      	blx	r3
 801de70:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801de74:	f8d9 0000 	ldr.w	r0, [r9]
 801de78:	d022      	beq.n	801dec0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801de7a:	2200      	movs	r2, #0
 801de7c:	f04f 0c01 	mov.w	ip, #1
 801de80:	6801      	ldr	r1, [r0, #0]
 801de82:	b2ad      	uxth	r5, r5
 801de84:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801de88:	e9cd c208 	strd	ip, r2, [sp, #32]
 801de8c:	f04f 0c0b 	mov.w	ip, #11
 801de90:	f8cd c01c 	str.w	ip, [sp, #28]
 801de94:	f8ba c000 	ldrh.w	ip, [sl]
 801de98:	9704      	str	r7, [sp, #16]
 801de9a:	9502      	str	r5, [sp, #8]
 801de9c:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 801dea0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801dea4:	9203      	str	r2, [sp, #12]
 801dea6:	fa1f f288 	uxth.w	r2, r8
 801deaa:	9201      	str	r2, [sp, #4]
 801deac:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801deb0:	9200      	str	r2, [sp, #0]
 801deb2:	4632      	mov	r2, r6
 801deb4:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 801deb6:	4621      	mov	r1, r4
 801deb8:	47a8      	blx	r5
 801deba:	b011      	add	sp, #68	@ 0x44
 801debc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dec0:	6803      	ldr	r3, [r0, #0]
 801dec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dec4:	4798      	blx	r3
 801dec6:	f8ba 2000 	ldrh.w	r2, [sl]
 801deca:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801dece:	f04f 0e03 	mov.w	lr, #3
 801ded2:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 801ded6:	4355      	muls	r5, r2
 801ded8:	fa1f fc87 	uxth.w	ip, r7
 801dedc:	fb02 1303 	mla	r3, r2, r3, r1
 801dee0:	eba2 0208 	sub.w	r2, r2, r8
 801dee4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dee8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801deec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801def0:	4418      	add	r0, r3
 801def2:	920b      	str	r2, [sp, #44]	@ 0x2c
 801def4:	1943      	adds	r3, r0, r5
 801def6:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 801defa:	f1c7 05ff 	rsb	r5, r7, #255	@ 0xff
 801defe:	eba2 0208 	sub.w	r2, r2, r8
 801df02:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801df06:	b2ad      	uxth	r5, r5
 801df08:	4298      	cmp	r0, r3
 801df0a:	d24a      	bcs.n	801dfa2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 801df0c:	eb00 0908 	add.w	r9, r0, r8
 801df10:	4621      	mov	r1, r4
 801df12:	4548      	cmp	r0, r9
 801df14:	460c      	mov	r4, r1
 801df16:	d240      	bcs.n	801df9a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801df18:	f04f 0a04 	mov.w	sl, #4
 801df1c:	7824      	ldrb	r4, [r4, #0]
 801df1e:	2fff      	cmp	r7, #255	@ 0xff
 801df20:	f101 0101 	add.w	r1, r1, #1
 801df24:	fb1e a404 	smlabb	r4, lr, r4, sl
 801df28:	eb06 0a04 	add.w	sl, r6, r4
 801df2c:	f816 b004 	ldrb.w	fp, [r6, r4]
 801df30:	d02b      	beq.n	801df8a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 801df32:	7804      	ldrb	r4, [r0, #0]
 801df34:	fb14 f405 	smulbb	r4, r4, r5
 801df38:	fb0b 440c 	mla	r4, fp, ip, r4
 801df3c:	b2a4      	uxth	r4, r4
 801df3e:	f104 0b01 	add.w	fp, r4, #1
 801df42:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801df46:	f890 b001 	ldrb.w	fp, [r0, #1]
 801df4a:	fb1b fb05 	smulbb	fp, fp, r5
 801df4e:	1224      	asrs	r4, r4, #8
 801df50:	7004      	strb	r4, [r0, #0]
 801df52:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801df56:	fb04 b40c 	mla	r4, r4, ip, fp
 801df5a:	b2a4      	uxth	r4, r4
 801df5c:	f104 0b01 	add.w	fp, r4, #1
 801df60:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801df64:	1224      	asrs	r4, r4, #8
 801df66:	7044      	strb	r4, [r0, #1]
 801df68:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801df6c:	f890 a002 	ldrb.w	sl, [r0, #2]
 801df70:	fb1a fa05 	smulbb	sl, sl, r5
 801df74:	fb04 a40c 	mla	r4, r4, ip, sl
 801df78:	b2a4      	uxth	r4, r4
 801df7a:	f104 0a01 	add.w	sl, r4, #1
 801df7e:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801df82:	1224      	asrs	r4, r4, #8
 801df84:	7084      	strb	r4, [r0, #2]
 801df86:	3003      	adds	r0, #3
 801df88:	e7c3      	b.n	801df12 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801df8a:	f880 b000 	strb.w	fp, [r0]
 801df8e:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801df92:	7044      	strb	r4, [r0, #1]
 801df94:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801df98:	e7f4      	b.n	801df84 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801df9a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801df9c:	4420      	add	r0, r4
 801df9e:	188c      	adds	r4, r1, r2
 801dfa0:	e7b2      	b.n	801df08 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 801dfa2:	4b03      	ldr	r3, [pc, #12]	@ (801dfb0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801dfa4:	6818      	ldr	r0, [r3, #0]
 801dfa6:	6803      	ldr	r3, [r0, #0]
 801dfa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dfaa:	4798      	blx	r3
 801dfac:	e785      	b.n	801deba <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 801dfae:	bf00      	nop
 801dfb0:	24026418 	.word	0x24026418
 801dfb4:	24026412 	.word	0x24026412

0801dfb8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801dfb8:	b4f0      	push	{r4, r5, r6, r7}
 801dfba:	460c      	mov	r4, r1
 801dfbc:	4611      	mov	r1, r2
 801dfbe:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801dfc2:	461a      	mov	r2, r3
 801dfc4:	780f      	ldrb	r7, [r1, #0]
 801dfc6:	9b04      	ldr	r3, [sp, #16]
 801dfc8:	784e      	ldrb	r6, [r1, #1]
 801dfca:	b11f      	cbz	r7, 801dfd4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 801dfcc:	2f01      	cmp	r7, #1
 801dfce:	d01d      	beq.n	801e00c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 801dfd0:	bcf0      	pop	{r4, r5, r6, r7}
 801dfd2:	4770      	bx	lr
 801dfd4:	2e03      	cmp	r6, #3
 801dfd6:	d8fb      	bhi.n	801dfd0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801dfd8:	e8df f006 	tbb	[pc, r6]
 801dfdc:	16140702 	.word	0x16140702
 801dfe0:	9504      	str	r5, [sp, #16]
 801dfe2:	4620      	mov	r0, r4
 801dfe4:	bcf0      	pop	{r4, r5, r6, r7}
 801dfe6:	f7ff be33 	b.w	801dc50 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801dfea:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801dfec:	2800      	cmp	r0, #0
 801dfee:	d0ef      	beq.n	801dfd0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801dff0:	6806      	ldr	r6, [r0, #0]
 801dff2:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801dff6:	68f5      	ldr	r5, [r6, #12]
 801dff8:	4613      	mov	r3, r2
 801dffa:	46ac      	mov	ip, r5
 801dffc:	460a      	mov	r2, r1
 801dffe:	4621      	mov	r1, r4
 801e000:	bcf0      	pop	{r4, r5, r6, r7}
 801e002:	4760      	bx	ip
 801e004:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801e006:	e7f1      	b.n	801dfec <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801e008:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801e00a:	e7ef      	b.n	801dfec <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801e00c:	2e03      	cmp	r6, #3
 801e00e:	d8df      	bhi.n	801dfd0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801e010:	e8df f006 	tbb	[pc, r6]
 801e014:	110f0702 	.word	0x110f0702
 801e018:	9504      	str	r5, [sp, #16]
 801e01a:	4620      	mov	r0, r4
 801e01c:	bcf0      	pop	{r4, r5, r6, r7}
 801e01e:	f7ff beef 	b.w	801de00 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801e022:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801e024:	2800      	cmp	r0, #0
 801e026:	d0d3      	beq.n	801dfd0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801e028:	6806      	ldr	r6, [r0, #0]
 801e02a:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801e02e:	68b5      	ldr	r5, [r6, #8]
 801e030:	e7e2      	b.n	801dff8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801e032:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801e034:	e7f6      	b.n	801e024 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 801e036:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801e038:	e7f4      	b.n	801e024 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

0801e03c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801e03c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e040:	4605      	mov	r5, r0
 801e042:	b08f      	sub	sp, #60	@ 0x3c
 801e044:	460c      	mov	r4, r1
 801e046:	461f      	mov	r7, r3
 801e048:	2b00      	cmp	r3, #0
 801e04a:	d052      	beq.n	801e0f2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801e04c:	6808      	ldr	r0, [r1, #0]
 801e04e:	ab0a      	add	r3, sp, #40	@ 0x28
 801e050:	6849      	ldr	r1, [r1, #4]
 801e052:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 801e21c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801e056:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 801e220 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801e05a:	c303      	stmia	r3!, {r0, r1}
 801e05c:	6810      	ldr	r0, [r2, #0]
 801e05e:	ab0c      	add	r3, sp, #48	@ 0x30
 801e060:	6851      	ldr	r1, [r2, #4]
 801e062:	c303      	stmia	r3!, {r0, r1}
 801e064:	a80a      	add	r0, sp, #40	@ 0x28
 801e066:	f7f8 fbbd 	bl	80167e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e06a:	4621      	mov	r1, r4
 801e06c:	a80c      	add	r0, sp, #48	@ 0x30
 801e06e:	f7f8 fbe1 	bl	8016834 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e072:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801e076:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801e07a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801e07e:	f8d8 0000 	ldr.w	r0, [r8]
 801e082:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e086:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 801e08a:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801e08e:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801e092:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 801e096:	440a      	add	r2, r1
 801e098:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801e09c:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801e0a0:	4413      	add	r3, r2
 801e0a2:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801e0a6:	6803      	ldr	r3, [r0, #0]
 801e0a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e0aa:	4798      	blx	r3
 801e0ac:	2fff      	cmp	r7, #255	@ 0xff
 801e0ae:	d023      	beq.n	801e0f8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 801e0b0:	f010 0f04 	tst.w	r0, #4
 801e0b4:	f8d8 0000 	ldr.w	r0, [r8]
 801e0b8:	d021      	beq.n	801e0fe <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801e0ba:	2100      	movs	r1, #0
 801e0bc:	f04f 0e01 	mov.w	lr, #1
 801e0c0:	f8d0 c000 	ldr.w	ip, [r0]
 801e0c4:	b2a4      	uxth	r4, r4
 801e0c6:	9106      	str	r1, [sp, #24]
 801e0c8:	b2b6      	uxth	r6, r6
 801e0ca:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801e0ce:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801e0d2:	e9cd e107 	strd	lr, r1, [sp, #28]
 801e0d6:	f8b9 e000 	ldrh.w	lr, [r9]
 801e0da:	9703      	str	r7, [sp, #12]
 801e0dc:	9401      	str	r4, [sp, #4]
 801e0de:	9600      	str	r6, [sp, #0]
 801e0e0:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801e0e4:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801e0e8:	9102      	str	r1, [sp, #8]
 801e0ea:	4629      	mov	r1, r5
 801e0ec:	f8dc 4040 	ldr.w	r4, [ip, #64]	@ 0x40
 801e0f0:	47a0      	blx	r4
 801e0f2:	b00f      	add	sp, #60	@ 0x3c
 801e0f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e0f8:	f010 0f01 	tst.w	r0, #1
 801e0fc:	e7da      	b.n	801e0b4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801e0fe:	6803      	ldr	r3, [r0, #0]
 801e100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e102:	4798      	blx	r3
 801e104:	f8b9 1000 	ldrh.w	r1, [r9]
 801e108:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801e10c:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801e110:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801e114:	434c      	muls	r4, r1
 801e116:	2fff      	cmp	r7, #255	@ 0xff
 801e118:	fb01 2303 	mla	r3, r1, r3, r2
 801e11c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e120:	eba1 0106 	sub.w	r1, r1, r6
 801e124:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e128:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e12c:	4418      	add	r0, r3
 801e12e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801e132:	eba3 0606 	sub.w	r6, r3, r6
 801e136:	4404      	add	r4, r0
 801e138:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801e13c:	d04a      	beq.n	801e1d4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 801e13e:	43fa      	mvns	r2, r7
 801e140:	b2bb      	uxth	r3, r7
 801e142:	b2d7      	uxtb	r7, r2
 801e144:	42a0      	cmp	r0, r4
 801e146:	d263      	bcs.n	801e210 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801e148:	eb00 0e0c 	add.w	lr, r0, ip
 801e14c:	4586      	cmp	lr, r0
 801e14e:	f100 0803 	add.w	r8, r0, #3
 801e152:	d93a      	bls.n	801e1ca <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801e154:	f835 2b02 	ldrh.w	r2, [r5], #2
 801e158:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801e15c:	00d0      	lsls	r0, r2, #3
 801e15e:	fb19 f907 	smulbb	r9, r9, r7
 801e162:	b2c0      	uxtb	r0, r0
 801e164:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801e168:	fb00 9003 	mla	r0, r0, r3, r9
 801e16c:	b280      	uxth	r0, r0
 801e16e:	f100 0901 	add.w	r9, r0, #1
 801e172:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801e176:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801e17a:	fb19 f907 	smulbb	r9, r9, r7
 801e17e:	1200      	asrs	r0, r0, #8
 801e180:	f808 0c03 	strb.w	r0, [r8, #-3]
 801e184:	10d0      	asrs	r0, r2, #3
 801e186:	1212      	asrs	r2, r2, #8
 801e188:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801e18c:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801e190:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801e194:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801e198:	fb00 9003 	mla	r0, r0, r3, r9
 801e19c:	b280      	uxth	r0, r0
 801e19e:	f100 0901 	add.w	r9, r0, #1
 801e1a2:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801e1a6:	1200      	asrs	r0, r0, #8
 801e1a8:	f808 0c02 	strb.w	r0, [r8, #-2]
 801e1ac:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801e1b0:	fb10 f007 	smulbb	r0, r0, r7
 801e1b4:	fb02 0203 	mla	r2, r2, r3, r0
 801e1b8:	b292      	uxth	r2, r2
 801e1ba:	1c50      	adds	r0, r2, #1
 801e1bc:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801e1c0:	4640      	mov	r0, r8
 801e1c2:	1212      	asrs	r2, r2, #8
 801e1c4:	f808 2c01 	strb.w	r2, [r8, #-1]
 801e1c8:	e7c0      	b.n	801e14c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801e1ca:	4408      	add	r0, r1
 801e1cc:	4435      	add	r5, r6
 801e1ce:	e7b9      	b.n	801e144 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 801e1d0:	4408      	add	r0, r1
 801e1d2:	4435      	add	r5, r6
 801e1d4:	42a0      	cmp	r0, r4
 801e1d6:	d21b      	bcs.n	801e210 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801e1d8:	eb00 070c 	add.w	r7, r0, ip
 801e1dc:	42b8      	cmp	r0, r7
 801e1de:	d2f7      	bcs.n	801e1d0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 801e1e0:	f835 3b02 	ldrh.w	r3, [r5], #2
 801e1e4:	3003      	adds	r0, #3
 801e1e6:	00da      	lsls	r2, r3, #3
 801e1e8:	b2d2      	uxtb	r2, r2
 801e1ea:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801e1ee:	f800 2c03 	strb.w	r2, [r0, #-3]
 801e1f2:	10da      	asrs	r2, r3, #3
 801e1f4:	121b      	asrs	r3, r3, #8
 801e1f6:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801e1fa:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801e1fe:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801e202:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801e206:	f800 2c02 	strb.w	r2, [r0, #-2]
 801e20a:	f800 3c01 	strb.w	r3, [r0, #-1]
 801e20e:	e7e5      	b.n	801e1dc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801e210:	4b02      	ldr	r3, [pc, #8]	@ (801e21c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801e212:	6818      	ldr	r0, [r3, #0]
 801e214:	6803      	ldr	r3, [r0, #0]
 801e216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e218:	4798      	blx	r3
 801e21a:	e76a      	b.n	801e0f2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801e21c:	24026418 	.word	0x24026418
 801e220:	24026412 	.word	0x24026412

0801e224 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801e224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e228:	b08a      	sub	sp, #40	@ 0x28
 801e22a:	460d      	mov	r5, r1
 801e22c:	4604      	mov	r4, r0
 801e22e:	461e      	mov	r6, r3
 801e230:	6808      	ldr	r0, [r1, #0]
 801e232:	ab06      	add	r3, sp, #24
 801e234:	6849      	ldr	r1, [r1, #4]
 801e236:	4f5d      	ldr	r7, [pc, #372]	@ (801e3ac <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801e238:	c303      	stmia	r3!, {r0, r1}
 801e23a:	6810      	ldr	r0, [r2, #0]
 801e23c:	ab08      	add	r3, sp, #32
 801e23e:	6851      	ldr	r1, [r2, #4]
 801e240:	c303      	stmia	r3!, {r0, r1}
 801e242:	a806      	add	r0, sp, #24
 801e244:	f7f8 face 	bl	80167e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e248:	4629      	mov	r1, r5
 801e24a:	a808      	add	r0, sp, #32
 801e24c:	f7f8 faf2 	bl	8016834 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e250:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e254:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801e258:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801e25c:	6838      	ldr	r0, [r7, #0]
 801e25e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e262:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801e266:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 801e26a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801e26e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801e272:	440a      	add	r2, r1
 801e274:	f8ad 2020 	strh.w	r2, [sp, #32]
 801e278:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801e27c:	4413      	add	r3, r2
 801e27e:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801e282:	6803      	ldr	r3, [r0, #0]
 801e284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e286:	4798      	blx	r3
 801e288:	2eff      	cmp	r6, #255	@ 0xff
 801e28a:	d119      	bne.n	801e2c0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801e28c:	f010 0f20 	tst.w	r0, #32
 801e290:	6838      	ldr	r0, [r7, #0]
 801e292:	d018      	beq.n	801e2c6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801e294:	b2ad      	uxth	r5, r5
 801e296:	2700      	movs	r7, #0
 801e298:	6801      	ldr	r1, [r0, #0]
 801e29a:	9501      	str	r5, [sp, #4]
 801e29c:	fa1f f588 	uxth.w	r5, r8
 801e2a0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801e2a4:	9500      	str	r5, [sp, #0]
 801e2a6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e2aa:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801e2ae:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801e2b2:	9602      	str	r6, [sp, #8]
 801e2b4:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 801e2b6:	4621      	mov	r1, r4
 801e2b8:	47a8      	blx	r5
 801e2ba:	b00a      	add	sp, #40	@ 0x28
 801e2bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e2c0:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801e2c4:	e7e4      	b.n	801e290 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801e2c6:	6803      	ldr	r3, [r0, #0]
 801e2c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e2ca:	4798      	blx	r3
 801e2cc:	4b38      	ldr	r3, [pc, #224]	@ (801e3b0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801e2ce:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e2d2:	f8b3 c000 	ldrh.w	ip, [r3]
 801e2d6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801e2da:	fb0c f505 	mul.w	r5, ip, r5
 801e2de:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801e2e2:	fb0c 2303 	mla	r3, ip, r3, r2
 801e2e6:	ebac 0c08 	sub.w	ip, ip, r8
 801e2ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e2ee:	ebae 0e08 	sub.w	lr, lr, r8
 801e2f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e2f6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e2fa:	4418      	add	r0, r3
 801e2fc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801e300:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801e304:	4405      	add	r5, r0
 801e306:	42a8      	cmp	r0, r5
 801e308:	d24a      	bcs.n	801e3a0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801e30a:	eb00 0803 	add.w	r8, r0, r3
 801e30e:	4540      	cmp	r0, r8
 801e310:	d243      	bcs.n	801e39a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801e312:	78e2      	ldrb	r2, [r4, #3]
 801e314:	b15a      	cbz	r2, 801e32e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801e316:	2aff      	cmp	r2, #255	@ 0xff
 801e318:	f894 9000 	ldrb.w	r9, [r4]
 801e31c:	d10a      	bne.n	801e334 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801e31e:	2eff      	cmp	r6, #255	@ 0xff
 801e320:	d108      	bne.n	801e334 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801e322:	f880 9000 	strb.w	r9, [r0]
 801e326:	7862      	ldrb	r2, [r4, #1]
 801e328:	7042      	strb	r2, [r0, #1]
 801e32a:	78a2      	ldrb	r2, [r4, #2]
 801e32c:	7082      	strb	r2, [r0, #2]
 801e32e:	3003      	adds	r0, #3
 801e330:	3404      	adds	r4, #4
 801e332:	e7ec      	b.n	801e30e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801e334:	4372      	muls	r2, r6
 801e336:	1c51      	adds	r1, r2, #1
 801e338:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801e33c:	1209      	asrs	r1, r1, #8
 801e33e:	fa1f fa81 	uxth.w	sl, r1
 801e342:	43c9      	mvns	r1, r1
 801e344:	fb19 f90a 	smulbb	r9, r9, sl
 801e348:	b2ca      	uxtb	r2, r1
 801e34a:	7801      	ldrb	r1, [r0, #0]
 801e34c:	fb01 9902 	mla	r9, r1, r2, r9
 801e350:	fa1f f989 	uxth.w	r9, r9
 801e354:	f109 0101 	add.w	r1, r9, #1
 801e358:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801e35c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e360:	f880 9000 	strb.w	r9, [r0]
 801e364:	f890 9001 	ldrb.w	r9, [r0, #1]
 801e368:	7861      	ldrb	r1, [r4, #1]
 801e36a:	fb19 f902 	smulbb	r9, r9, r2
 801e36e:	fb01 910a 	mla	r1, r1, sl, r9
 801e372:	b289      	uxth	r1, r1
 801e374:	f101 0901 	add.w	r9, r1, #1
 801e378:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801e37c:	1209      	asrs	r1, r1, #8
 801e37e:	7041      	strb	r1, [r0, #1]
 801e380:	7881      	ldrb	r1, [r0, #2]
 801e382:	f894 9002 	ldrb.w	r9, [r4, #2]
 801e386:	fb11 f202 	smulbb	r2, r1, r2
 801e38a:	fb09 220a 	mla	r2, r9, sl, r2
 801e38e:	b292      	uxth	r2, r2
 801e390:	1c51      	adds	r1, r2, #1
 801e392:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801e396:	1212      	asrs	r2, r2, #8
 801e398:	e7c8      	b.n	801e32c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801e39a:	4460      	add	r0, ip
 801e39c:	4474      	add	r4, lr
 801e39e:	e7b2      	b.n	801e306 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 801e3a0:	6838      	ldr	r0, [r7, #0]
 801e3a2:	6803      	ldr	r3, [r0, #0]
 801e3a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e3a6:	4798      	blx	r3
 801e3a8:	e787      	b.n	801e2ba <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801e3aa:	bf00      	nop
 801e3ac:	24026418 	.word	0x24026418
 801e3b0:	24026412 	.word	0x24026412

0801e3b4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801e3b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e3b8:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 801e3bc:	4607      	mov	r7, r0
 801e3be:	460c      	mov	r4, r1
 801e3c0:	4692      	mov	sl, r2
 801e3c2:	4699      	mov	r9, r3
 801e3c4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801e3c6:	b335      	cbz	r5, 801e416 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801e3c8:	4608      	mov	r0, r1
 801e3ca:	f7fb fdcb 	bl	8019f64 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e3ce:	4680      	mov	r8, r0
 801e3d0:	4620      	mov	r0, r4
 801e3d2:	f7fb fdfb 	bl	8019fcc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801e3d6:	f8ad 000e 	strh.w	r0, [sp, #14]
 801e3da:	4620      	mov	r0, r4
 801e3dc:	f8ad a008 	strh.w	sl, [sp, #8]
 801e3e0:	f8ad 900a 	strh.w	r9, [sp, #10]
 801e3e4:	f8ad 800c 	strh.w	r8, [sp, #12]
 801e3e8:	f7fb fefa 	bl	801a1e0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e3ec:	2810      	cmp	r0, #16
 801e3ee:	d812      	bhi.n	801e416 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801e3f0:	e8df f000 	tbb	[pc, r0]
 801e3f4:	11092d24 	.word	0x11092d24
 801e3f8:	11111111 	.word	0x11111111
 801e3fc:	14111111 	.word	0x14111111
 801e400:	4c111111 	.word	0x4c111111
 801e404:	3c          	.byte	0x3c
 801e405:	00          	.byte	0x00
 801e406:	4620      	mov	r0, r4
 801e408:	f7fb fe66 	bl	801a0d8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e40c:	462b      	mov	r3, r5
 801e40e:	4632      	mov	r2, r6
 801e410:	a902      	add	r1, sp, #8
 801e412:	f7ff ff07 	bl	801e224 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e416:	b004      	add	sp, #16
 801e418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e41c:	4620      	mov	r0, r4
 801e41e:	f7fb fe5b 	bl	801a0d8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e422:	4680      	mov	r8, r0
 801e424:	4620      	mov	r0, r4
 801e426:	f7fb fe87 	bl	801a138 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801e42a:	ab02      	add	r3, sp, #8
 801e42c:	4602      	mov	r2, r0
 801e42e:	4641      	mov	r1, r8
 801e430:	4638      	mov	r0, r7
 801e432:	e9cd 6500 	strd	r6, r5, [sp]
 801e436:	f7ff fdbf 	bl	801dfb8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801e43a:	e7ec      	b.n	801e416 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801e43c:	4620      	mov	r0, r4
 801e43e:	f7fb fe4b 	bl	801a0d8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e442:	462b      	mov	r3, r5
 801e444:	4632      	mov	r2, r6
 801e446:	a902      	add	r1, sp, #8
 801e448:	f7ff fdf8 	bl	801e03c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801e44c:	e7e3      	b.n	801e416 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801e44e:	683b      	ldr	r3, [r7, #0]
 801e450:	4620      	mov	r0, r4
 801e452:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801e456:	f7fb fe3f 	bl	801a0d8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e45a:	2300      	movs	r3, #0
 801e45c:	4601      	mov	r1, r0
 801e45e:	aa02      	add	r2, sp, #8
 801e460:	4638      	mov	r0, r7
 801e462:	e9cd 5300 	strd	r5, r3, [sp]
 801e466:	4633      	mov	r3, r6
 801e468:	47c0      	blx	r8
 801e46a:	e7d4      	b.n	801e416 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801e46c:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 801e46e:	2f00      	cmp	r7, #0
 801e470:	d0d1      	beq.n	801e416 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801e472:	683b      	ldr	r3, [r7, #0]
 801e474:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801e478:	4620      	mov	r0, r4
 801e47a:	f7fb fe2d 	bl	801a0d8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e47e:	9500      	str	r5, [sp, #0]
 801e480:	4601      	mov	r1, r0
 801e482:	4633      	mov	r3, r6
 801e484:	aa02      	add	r2, sp, #8
 801e486:	4638      	mov	r0, r7
 801e488:	47c0      	blx	r8
 801e48a:	e7c4      	b.n	801e416 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801e48c:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 801e48e:	2f00      	cmp	r7, #0
 801e490:	d0c1      	beq.n	801e416 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801e492:	683b      	ldr	r3, [r7, #0]
 801e494:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801e498:	e7ee      	b.n	801e478 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>

0801e49a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801e49a:	b4f0      	push	{r4, r5, r6, r7}
 801e49c:	4616      	mov	r6, r2
 801e49e:	461c      	mov	r4, r3
 801e4a0:	460d      	mov	r5, r1
 801e4a2:	9a04      	ldr	r2, [sp, #16]
 801e4a4:	2e01      	cmp	r6, #1
 801e4a6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801e4aa:	d00e      	beq.n	801e4ca <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 801e4ac:	d303      	bcc.n	801e4b6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 801e4ae:	2e02      	cmp	r6, #2
 801e4b0:	d006      	beq.n	801e4c0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801e4b2:	bcf0      	pop	{r4, r5, r6, r7}
 801e4b4:	4770      	bx	lr
 801e4b6:	4621      	mov	r1, r4
 801e4b8:	4628      	mov	r0, r5
 801e4ba:	bcf0      	pop	{r4, r5, r6, r7}
 801e4bc:	f7ff bdbe 	b.w	801e03c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801e4c0:	4621      	mov	r1, r4
 801e4c2:	4628      	mov	r0, r5
 801e4c4:	bcf0      	pop	{r4, r5, r6, r7}
 801e4c6:	f7ff bead 	b.w	801e224 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e4ca:	6805      	ldr	r5, [r0, #0]
 801e4cc:	2600      	movs	r6, #0
 801e4ce:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801e4d2:	68ed      	ldr	r5, [r5, #12]
 801e4d4:	4613      	mov	r3, r2
 801e4d6:	4622      	mov	r2, r4
 801e4d8:	46ac      	mov	ip, r5
 801e4da:	bcf0      	pop	{r4, r5, r6, r7}
 801e4dc:	4760      	bx	ip
	...

0801e4e0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801e4e0:	b160      	cbz	r0, 801e4fc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 801e4e2:	2903      	cmp	r1, #3
 801e4e4:	d818      	bhi.n	801e518 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801e4e6:	e8df f001 	tbb	[pc, r1]
 801e4ea:	1902      	.short	0x1902
 801e4ec:	1b06      	.short	0x1b06
 801e4ee:	4b0e      	ldr	r3, [pc, #56]	@ (801e528 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801e4f0:	8818      	ldrh	r0, [r3, #0]
 801e4f2:	4240      	negs	r0, r0
 801e4f4:	4770      	bx	lr
 801e4f6:	4b0c      	ldr	r3, [pc, #48]	@ (801e528 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801e4f8:	8818      	ldrh	r0, [r3, #0]
 801e4fa:	4770      	bx	lr
 801e4fc:	2903      	cmp	r1, #3
 801e4fe:	d80b      	bhi.n	801e518 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801e500:	a301      	add	r3, pc, #4	@ (adr r3, 801e508 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801e502:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801e506:	bf00      	nop
 801e508:	0801e51d 	.word	0x0801e51d
 801e50c:	0801e4f7 	.word	0x0801e4f7
 801e510:	0801e521 	.word	0x0801e521
 801e514:	0801e4ef 	.word	0x0801e4ef
 801e518:	2000      	movs	r0, #0
 801e51a:	4770      	bx	lr
 801e51c:	2001      	movs	r0, #1
 801e51e:	4770      	bx	lr
 801e520:	f04f 30ff 	mov.w	r0, #4294967295
 801e524:	4770      	bx	lr
 801e526:	bf00      	nop
 801e528:	24026412 	.word	0x24026412

0801e52c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801e52c:	b160      	cbz	r0, 801e548 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801e52e:	2903      	cmp	r1, #3
 801e530:	d818      	bhi.n	801e564 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801e532:	e8df f001 	tbb	[pc, r1]
 801e536:	0219      	.short	0x0219
 801e538:	051b      	.short	0x051b
 801e53a:	4b0e      	ldr	r3, [pc, #56]	@ (801e574 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801e53c:	8818      	ldrh	r0, [r3, #0]
 801e53e:	4770      	bx	lr
 801e540:	4b0c      	ldr	r3, [pc, #48]	@ (801e574 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801e542:	8818      	ldrh	r0, [r3, #0]
 801e544:	4240      	negs	r0, r0
 801e546:	4770      	bx	lr
 801e548:	2903      	cmp	r1, #3
 801e54a:	d80b      	bhi.n	801e564 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801e54c:	a301      	add	r3, pc, #4	@ (adr r3, 801e554 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801e54e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801e552:	bf00      	nop
 801e554:	0801e53b 	.word	0x0801e53b
 801e558:	0801e56d 	.word	0x0801e56d
 801e55c:	0801e541 	.word	0x0801e541
 801e560:	0801e569 	.word	0x0801e569
 801e564:	2000      	movs	r0, #0
 801e566:	4770      	bx	lr
 801e568:	2001      	movs	r0, #1
 801e56a:	4770      	bx	lr
 801e56c:	f04f 30ff 	mov.w	r0, #4294967295
 801e570:	4770      	bx	lr
 801e572:	bf00      	nop
 801e574:	24026412 	.word	0x24026412

0801e578 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801e578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e57c:	b097      	sub	sp, #92	@ 0x5c
 801e57e:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e580:	a912      	add	r1, sp, #72	@ 0x48
 801e582:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 801e586:	f8bd 7088 	ldrh.w	r7, [sp, #136]	@ 0x88
 801e58a:	f8bd 408c 	ldrh.w	r4, [sp, #140]	@ 0x8c
 801e58e:	f89d 80a4 	ldrb.w	r8, [sp, #164]	@ 0xa4
 801e592:	f89d 90ac 	ldrb.w	r9, [sp, #172]	@ 0xac
 801e596:	e881 000c 	stmia.w	r1, {r2, r3}
 801e59a:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 801e59e:	930a      	str	r3, [sp, #40]	@ 0x28
 801e5a0:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 801e5a4:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	@ 0x90
 801e5a8:	9311      	str	r3, [sp, #68]	@ 0x44
 801e5aa:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 801e5ae:	798d      	ldrb	r5, [r1, #6]
 801e5b0:	930c      	str	r3, [sp, #48]	@ 0x30
 801e5b2:	7b4b      	ldrb	r3, [r1, #13]
 801e5b4:	0158      	lsls	r0, r3, #5
 801e5b6:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801e5ba:	4328      	orrs	r0, r5
 801e5bc:	9009      	str	r0, [sp, #36]	@ 0x24
 801e5be:	f000 817c 	beq.w	801e8ba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801e5c2:	011b      	lsls	r3, r3, #4
 801e5c4:	79c8      	ldrb	r0, [r1, #7]
 801e5c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e5ca:	4303      	orrs	r3, r0
 801e5cc:	930e      	str	r3, [sp, #56]	@ 0x38
 801e5ce:	f000 8174 	beq.w	801e8ba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801e5d2:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801e5d6:	b29b      	uxth	r3, r3
 801e5d8:	2f00      	cmp	r7, #0
 801e5da:	f000 8116 	beq.w	801e80a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801e5de:	1aff      	subs	r7, r7, r3
 801e5e0:	b2bf      	uxth	r7, r7
 801e5e2:	043b      	lsls	r3, r7, #16
 801e5e4:	d502      	bpl.n	801e5ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801e5e6:	1bf6      	subs	r6, r6, r7
 801e5e8:	2700      	movs	r7, #0
 801e5ea:	b236      	sxth	r6, r6
 801e5ec:	f9b2 1000 	ldrsh.w	r1, [r2]
 801e5f0:	a812      	add	r0, sp, #72	@ 0x48
 801e5f2:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801e5f6:	428e      	cmp	r6, r1
 801e5f8:	b28b      	uxth	r3, r1
 801e5fa:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 801e5fe:	bfbf      	itttt	lt
 801e600:	18ff      	addlt	r7, r7, r3
 801e602:	1bbe      	sublt	r6, r7, r6
 801e604:	b2b7      	uxthlt	r7, r6
 801e606:	460e      	movlt	r6, r1
 801e608:	8891      	ldrh	r1, [r2, #4]
 801e60a:	440b      	add	r3, r1
 801e60c:	4631      	mov	r1, r6
 801e60e:	b21b      	sxth	r3, r3
 801e610:	9310      	str	r3, [sp, #64]	@ 0x40
 801e612:	88d3      	ldrh	r3, [r2, #6]
 801e614:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e616:	449a      	add	sl, r3
 801e618:	fa0f f38a 	sxth.w	r3, sl
 801e61c:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801e620:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e622:	4bb5      	ldr	r3, [pc, #724]	@ (801e8f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801e624:	f893 b000 	ldrb.w	fp, [r3]
 801e628:	f10b 3cff 	add.w	ip, fp, #4294967295
 801e62c:	f1dc 0300 	rsbs	r3, ip, #0
 801e630:	eb43 030c 	adc.w	r3, r3, ip
 801e634:	930d      	str	r3, [sp, #52]	@ 0x34
 801e636:	464b      	mov	r3, r9
 801e638:	f7f7 ff49 	bl	80164ce <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801e63c:	4631      	mov	r1, r6
 801e63e:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 801e642:	464b      	mov	r3, r9
 801e644:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e646:	a812      	add	r0, sp, #72	@ 0x48
 801e648:	f7f7 ff5e 	bl	8016508 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801e64c:	a916      	add	r1, sp, #88	@ 0x58
 801e64e:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801e652:	a815      	add	r0, sp, #84	@ 0x54
 801e654:	f7f8 f884 	bl	8016760 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801e658:	f1b9 0f00 	cmp.w	r9, #0
 801e65c:	f040 80d8 	bne.w	801e810 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 801e660:	f1bb 0f01 	cmp.w	fp, #1
 801e664:	f040 80dc 	bne.w	801e820 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801e668:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e66a:	b153      	cbz	r3, 801e682 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801e66c:	2508      	movs	r5, #8
 801e66e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e670:	fb95 f3f8 	sdiv	r3, r5, r8
 801e674:	1e5d      	subs	r5, r3, #1
 801e676:	4415      	add	r5, r2
 801e678:	fb95 f5f3 	sdiv	r5, r5, r3
 801e67c:	fb15 f503 	smulbb	r5, r5, r3
 801e680:	b2ad      	uxth	r5, r5
 801e682:	b907      	cbnz	r7, 801e686 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801e684:	b16c      	cbz	r4, 801e6a2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801e686:	fb04 7305 	mla	r3, r4, r5, r7
 801e68a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801e68c:	ebaa 0a04 	sub.w	sl, sl, r4
 801e690:	fb08 f303 	mul.w	r3, r8, r3
 801e694:	fa1f fa8a 	uxth.w	sl, sl
 801e698:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801e69c:	f003 0407 	and.w	r4, r3, #7
 801e6a0:	9226      	str	r2, [sp, #152]	@ 0x98
 801e6a2:	4649      	mov	r1, r9
 801e6a4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801e6a6:	f7ff ff1b 	bl	801e4e0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801e6aa:	4683      	mov	fp, r0
 801e6ac:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801e6ae:	f7ff ff3d 	bl	801e52c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801e6b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e6b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e6b6:	4681      	mov	r9, r0
 801e6b8:	1a9b      	subs	r3, r3, r2
 801e6ba:	459a      	cmp	sl, r3
 801e6bc:	bfa8      	it	ge
 801e6be:	469a      	movge	sl, r3
 801e6c0:	f1ba 0f00 	cmp.w	sl, #0
 801e6c4:	f340 80f9 	ble.w	801e8ba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801e6c8:	1bf6      	subs	r6, r6, r7
 801e6ca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e6cc:	1b9e      	subs	r6, r3, r6
 801e6ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e6d0:	429e      	cmp	r6, r3
 801e6d2:	bfd4      	ite	le
 801e6d4:	ebc7 0706 	rsble	r7, r7, r6
 801e6d8:	ebc7 0703 	rsbgt	r7, r7, r3
 801e6dc:	2f00      	cmp	r7, #0
 801e6de:	f340 80ec 	ble.w	801e8ba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801e6e2:	1bed      	subs	r5, r5, r7
 801e6e4:	fb08 f305 	mul.w	r3, r8, r5
 801e6e8:	930d      	str	r3, [sp, #52]	@ 0x34
 801e6ea:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e6ec:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801e6f0:	930e      	str	r3, [sp, #56]	@ 0x38
 801e6f2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e6f4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e6f8:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e6fa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e6fc:	b2db      	uxtb	r3, r3
 801e6fe:	9310      	str	r3, [sp, #64]	@ 0x40
 801e700:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e702:	2b00      	cmp	r3, #0
 801e704:	f040 80de 	bne.w	801e8c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801e708:	4b7c      	ldr	r3, [pc, #496]	@ (801e8fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801e70a:	6818      	ldr	r0, [r3, #0]
 801e70c:	6803      	ldr	r3, [r0, #0]
 801e70e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e710:	4798      	blx	r3
 801e712:	2301      	movs	r3, #1
 801e714:	4a7a      	ldr	r2, [pc, #488]	@ (801e900 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801e716:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801e71a:	fb07 9b1b 	mls	fp, r7, fp, r9
 801e71e:	fa03 f308 	lsl.w	r3, r3, r8
 801e722:	8811      	ldrh	r1, [r2, #0]
 801e724:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 801e728:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801e72c:	3b01      	subs	r3, #1
 801e72e:	fb06 bb07 	mla	fp, r6, r7, fp
 801e732:	b2db      	uxtb	r3, r3
 801e734:	930a      	str	r3, [sp, #40]	@ 0x28
 801e736:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 801e73a:	fb01 2303 	mla	r3, r1, r3, r2
 801e73e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e742:	18c3      	adds	r3, r0, r3
 801e744:	9309      	str	r3, [sp, #36]	@ 0x24
 801e746:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801e748:	781a      	ldrb	r2, [r3, #0]
 801e74a:	4122      	asrs	r2, r4
 801e74c:	b2d2      	uxtb	r2, r2
 801e74e:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801e752:	f0c0 80d7 	bcc.w	801e904 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 801e756:	46be      	mov	lr, r7
 801e758:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e75a:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801e75e:	f0c0 80ba 	bcc.w	801e8d6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801e762:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e764:	4013      	ands	r3, r2
 801e766:	d041      	beq.n	801e7ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801e768:	20ff      	movs	r0, #255	@ 0xff
 801e76a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801e76c:	fb90 f5f5 	sdiv	r5, r0, r5
 801e770:	436b      	muls	r3, r5
 801e772:	2bfe      	cmp	r3, #254	@ 0xfe
 801e774:	dd03      	ble.n	801e77e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 801e776:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801e778:	4285      	cmp	r5, r0
 801e77a:	f000 80a5 	beq.w	801e8c8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801e77e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801e780:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e782:	fb15 f303 	smulbb	r3, r5, r3
 801e786:	b29b      	uxth	r3, r3
 801e788:	1c5d      	adds	r5, r3, #1
 801e78a:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801e78e:	780d      	ldrb	r5, [r1, #0]
 801e790:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e794:	fa1f fc83 	uxth.w	ip, r3
 801e798:	43db      	mvns	r3, r3
 801e79a:	fb10 f90c 	smulbb	r9, r0, ip
 801e79e:	b2db      	uxtb	r3, r3
 801e7a0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801e7a2:	fb05 9503 	mla	r5, r5, r3, r9
 801e7a6:	b2ad      	uxth	r5, r5
 801e7a8:	f105 0901 	add.w	r9, r5, #1
 801e7ac:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801e7b0:	fb10 f90c 	smulbb	r9, r0, ip
 801e7b4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801e7b6:	122d      	asrs	r5, r5, #8
 801e7b8:	fb10 fc0c 	smulbb	ip, r0, ip
 801e7bc:	700d      	strb	r5, [r1, #0]
 801e7be:	784d      	ldrb	r5, [r1, #1]
 801e7c0:	fb05 9503 	mla	r5, r5, r3, r9
 801e7c4:	b2ad      	uxth	r5, r5
 801e7c6:	f105 0901 	add.w	r9, r5, #1
 801e7ca:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801e7ce:	122d      	asrs	r5, r5, #8
 801e7d0:	704d      	strb	r5, [r1, #1]
 801e7d2:	788d      	ldrb	r5, [r1, #2]
 801e7d4:	fb05 cc03 	mla	ip, r5, r3, ip
 801e7d8:	fa1f fc8c 	uxth.w	ip, ip
 801e7dc:	f10c 0301 	add.w	r3, ip, #1
 801e7e0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801e7e4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e7e8:	f881 c002 	strb.w	ip, [r1, #2]
 801e7ec:	4444      	add	r4, r8
 801e7ee:	4431      	add	r1, r6
 801e7f0:	b2a4      	uxth	r4, r4
 801e7f2:	2c07      	cmp	r4, #7
 801e7f4:	bf89      	itett	hi
 801e7f6:	9b26      	ldrhi	r3, [sp, #152]	@ 0x98
 801e7f8:	fa42 f208 	asrls.w	r2, r2, r8
 801e7fc:	2400      	movhi	r4, #0
 801e7fe:	785a      	ldrbhi	r2, [r3, #1]
 801e800:	bf8a      	itet	hi
 801e802:	3301      	addhi	r3, #1
 801e804:	b2d2      	uxtbls	r2, r2
 801e806:	9326      	strhi	r3, [sp, #152]	@ 0x98
 801e808:	e7a7      	b.n	801e75a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801e80a:	441e      	add	r6, r3
 801e80c:	b236      	sxth	r6, r6
 801e80e:	e6ed      	b.n	801e5ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801e810:	f1b9 0f01 	cmp.w	r9, #1
 801e814:	f47f af28 	bne.w	801e668 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e818:	f1bb 0f01 	cmp.w	fp, #1
 801e81c:	f47f af24 	bne.w	801e668 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e820:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 801e8fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801e824:	f8db 0000 	ldr.w	r0, [fp]
 801e828:	6803      	ldr	r3, [r0, #0]
 801e82a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e82c:	4798      	blx	r3
 801e82e:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 801e832:	465a      	mov	r2, fp
 801e834:	d006      	beq.n	801e844 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801e836:	f1b8 0f04 	cmp.w	r8, #4
 801e83a:	d141      	bne.n	801e8c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801e83c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e83e:	3300      	adds	r3, #0
 801e840:	bf18      	it	ne
 801e842:	2301      	movne	r3, #1
 801e844:	0580      	lsls	r0, r0, #22
 801e846:	d566      	bpl.n	801e916 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801e848:	f1b8 0f08 	cmp.w	r8, #8
 801e84c:	d163      	bne.n	801e916 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801e84e:	2b00      	cmp	r3, #0
 801e850:	bf0c      	ite	eq
 801e852:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 801e856:	f44f 7180 	movne.w	r1, #256	@ 0x100
 801e85a:	2f00      	cmp	r7, #0
 801e85c:	f47f af04 	bne.w	801e668 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e860:	2c00      	cmp	r4, #0
 801e862:	f47f af01 	bne.w	801e668 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e868:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e86a:	18f3      	adds	r3, r6, r3
 801e86c:	4283      	cmp	r3, r0
 801e86e:	f73f aefb 	bgt.w	801e668 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e872:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801e874:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e876:	4403      	add	r3, r0
 801e878:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801e87a:	4283      	cmp	r3, r0
 801e87c:	f73f aef4 	bgt.w	801e668 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e880:	f1b8 0f08 	cmp.w	r8, #8
 801e884:	6810      	ldr	r0, [r2, #0]
 801e886:	f04f 0600 	mov.w	r6, #0
 801e88a:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 801e88e:	bf18      	it	ne
 801e890:	3501      	addne	r5, #1
 801e892:	6804      	ldr	r4, [r0, #0]
 801e894:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 801e898:	bf18      	it	ne
 801e89a:	f025 0501 	bicne.w	r5, r5, #1
 801e89e:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801e8a2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801e8a4:	bf18      	it	ne
 801e8a6:	b2ad      	uxthne	r5, r5
 801e8a8:	9104      	str	r1, [sp, #16]
 801e8aa:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801e8ac:	e9cd 5a00 	strd	r5, sl, [sp]
 801e8b0:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801e8b4:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801e8b6:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 801e8b8:	47a0      	blx	r4
 801e8ba:	b017      	add	sp, #92	@ 0x5c
 801e8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8c0:	2300      	movs	r3, #0
 801e8c2:	e7bf      	b.n	801e844 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801e8c4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801e8c6:	e724      	b.n	801e712 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 801e8c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e8ca:	700b      	strb	r3, [r1, #0]
 801e8cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e8ce:	704b      	strb	r3, [r1, #1]
 801e8d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e8d2:	708b      	strb	r3, [r1, #2]
 801e8d4:	e78a      	b.n	801e7ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801e8d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e8d8:	b153      	cbz	r3, 801e8f0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801e8da:	441c      	add	r4, r3
 801e8dc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801e8de:	b2a4      	uxth	r4, r4
 801e8e0:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801e8e4:	f004 0407 	and.w	r4, r4, #7
 801e8e8:	781a      	ldrb	r2, [r3, #0]
 801e8ea:	9326      	str	r3, [sp, #152]	@ 0x98
 801e8ec:	4122      	asrs	r2, r4
 801e8ee:	b2d2      	uxtb	r2, r2
 801e8f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e8f2:	445b      	add	r3, fp
 801e8f4:	9309      	str	r3, [sp, #36]	@ 0x24
 801e8f6:	e72a      	b.n	801e74e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 801e8f8:	24026410 	.word	0x24026410
 801e8fc:	24026418 	.word	0x24026418
 801e900:	24026412 	.word	0x24026412
 801e904:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e906:	2b00      	cmp	r3, #0
 801e908:	d1d7      	bne.n	801e8ba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801e90a:	4b06      	ldr	r3, [pc, #24]	@ (801e924 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801e90c:	6818      	ldr	r0, [r3, #0]
 801e90e:	6803      	ldr	r3, [r0, #0]
 801e910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e912:	4798      	blx	r3
 801e914:	e7d1      	b.n	801e8ba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801e916:	2b00      	cmp	r3, #0
 801e918:	f43f aea6 	beq.w	801e668 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e91c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801e920:	e79b      	b.n	801e85a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801e922:	bf00      	nop
 801e924:	24026418 	.word	0x24026418

0801e928 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801e928:	b538      	push	{r3, r4, r5, lr}
 801e92a:	4c15      	ldr	r4, [pc, #84]	@ (801e980 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801e92c:	4605      	mov	r5, r0
 801e92e:	7823      	ldrb	r3, [r4, #0]
 801e930:	f3bf 8f5b 	dmb	ish
 801e934:	07da      	lsls	r2, r3, #31
 801e936:	d40b      	bmi.n	801e950 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e938:	4620      	mov	r0, r4
 801e93a:	f006 f8d8 	bl	8024aee <__cxa_guard_acquire>
 801e93e:	b138      	cbz	r0, 801e950 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e940:	4620      	mov	r0, r4
 801e942:	f006 f8e0 	bl	8024b06 <__cxa_guard_release>
 801e946:	4a0f      	ldr	r2, [pc, #60]	@ (801e984 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e948:	490f      	ldr	r1, [pc, #60]	@ (801e988 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801e94a:	4810      	ldr	r0, [pc, #64]	@ (801e98c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e94c:	f006 f8c8 	bl	8024ae0 <__aeabi_atexit>
 801e950:	4c0f      	ldr	r4, [pc, #60]	@ (801e990 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801e952:	7823      	ldrb	r3, [r4, #0]
 801e954:	f3bf 8f5b 	dmb	ish
 801e958:	07db      	lsls	r3, r3, #31
 801e95a:	d40b      	bmi.n	801e974 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e95c:	4620      	mov	r0, r4
 801e95e:	f006 f8c6 	bl	8024aee <__cxa_guard_acquire>
 801e962:	b138      	cbz	r0, 801e974 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e964:	4620      	mov	r0, r4
 801e966:	f006 f8ce 	bl	8024b06 <__cxa_guard_release>
 801e96a:	4a06      	ldr	r2, [pc, #24]	@ (801e984 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e96c:	4909      	ldr	r1, [pc, #36]	@ (801e994 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801e96e:	480a      	ldr	r0, [pc, #40]	@ (801e998 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e970:	f006 f8b6 	bl	8024ae0 <__aeabi_atexit>
 801e974:	4b05      	ldr	r3, [pc, #20]	@ (801e98c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e976:	616b      	str	r3, [r5, #20]
 801e978:	4b07      	ldr	r3, [pc, #28]	@ (801e998 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e97a:	61ab      	str	r3, [r5, #24]
 801e97c:	bd38      	pop	{r3, r4, r5, pc}
 801e97e:	bf00      	nop
 801e980:	240264fc 	.word	0x240264fc
 801e984:	24000000 	.word	0x24000000
 801e988:	0801bc19 	.word	0x0801bc19
 801e98c:	240000c8 	.word	0x240000c8
 801e990:	24026500 	.word	0x24026500
 801e994:	0801bc17 	.word	0x0801bc17
 801e998:	240000cc 	.word	0x240000cc

0801e99c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801e99c:	b538      	push	{r3, r4, r5, lr}
 801e99e:	4c15      	ldr	r4, [pc, #84]	@ (801e9f4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801e9a0:	4605      	mov	r5, r0
 801e9a2:	7823      	ldrb	r3, [r4, #0]
 801e9a4:	f3bf 8f5b 	dmb	ish
 801e9a8:	07da      	lsls	r2, r3, #31
 801e9aa:	d40b      	bmi.n	801e9c4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e9ac:	4620      	mov	r0, r4
 801e9ae:	f006 f89e 	bl	8024aee <__cxa_guard_acquire>
 801e9b2:	b138      	cbz	r0, 801e9c4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e9b4:	4620      	mov	r0, r4
 801e9b6:	f006 f8a6 	bl	8024b06 <__cxa_guard_release>
 801e9ba:	4a0f      	ldr	r2, [pc, #60]	@ (801e9f8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e9bc:	490f      	ldr	r1, [pc, #60]	@ (801e9fc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801e9be:	4810      	ldr	r0, [pc, #64]	@ (801ea00 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e9c0:	f006 f88e 	bl	8024ae0 <__aeabi_atexit>
 801e9c4:	4c0f      	ldr	r4, [pc, #60]	@ (801ea04 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801e9c6:	7823      	ldrb	r3, [r4, #0]
 801e9c8:	f3bf 8f5b 	dmb	ish
 801e9cc:	07db      	lsls	r3, r3, #31
 801e9ce:	d40b      	bmi.n	801e9e8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e9d0:	4620      	mov	r0, r4
 801e9d2:	f006 f88c 	bl	8024aee <__cxa_guard_acquire>
 801e9d6:	b138      	cbz	r0, 801e9e8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e9d8:	4620      	mov	r0, r4
 801e9da:	f006 f894 	bl	8024b06 <__cxa_guard_release>
 801e9de:	4a06      	ldr	r2, [pc, #24]	@ (801e9f8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e9e0:	4909      	ldr	r1, [pc, #36]	@ (801ea08 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801e9e2:	480a      	ldr	r0, [pc, #40]	@ (801ea0c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e9e4:	f006 f87c 	bl	8024ae0 <__aeabi_atexit>
 801e9e8:	4b05      	ldr	r3, [pc, #20]	@ (801ea00 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e9ea:	60eb      	str	r3, [r5, #12]
 801e9ec:	4b07      	ldr	r3, [pc, #28]	@ (801ea0c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e9ee:	612b      	str	r3, [r5, #16]
 801e9f0:	bd38      	pop	{r3, r4, r5, pc}
 801e9f2:	bf00      	nop
 801e9f4:	240264dc 	.word	0x240264dc
 801e9f8:	24000000 	.word	0x24000000
 801e9fc:	0801bc1d 	.word	0x0801bc1d
 801ea00:	240000a8 	.word	0x240000a8
 801ea04:	240264e0 	.word	0x240264e0
 801ea08:	0801bc1b 	.word	0x0801bc1b
 801ea0c:	240000ac 	.word	0x240000ac

0801ea10 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801ea10:	b510      	push	{r4, lr}
 801ea12:	4604      	mov	r4, r0
 801ea14:	f7ff ff88 	bl	801e928 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801ea18:	4620      	mov	r0, r4
 801ea1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ea1e:	f7ff bfbd 	b.w	801e99c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801ea24 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801ea24:	b538      	push	{r3, r4, r5, lr}
 801ea26:	4c15      	ldr	r4, [pc, #84]	@ (801ea7c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801ea28:	4605      	mov	r5, r0
 801ea2a:	7823      	ldrb	r3, [r4, #0]
 801ea2c:	f3bf 8f5b 	dmb	ish
 801ea30:	07da      	lsls	r2, r3, #31
 801ea32:	d40b      	bmi.n	801ea4c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801ea34:	4620      	mov	r0, r4
 801ea36:	f006 f85a 	bl	8024aee <__cxa_guard_acquire>
 801ea3a:	b138      	cbz	r0, 801ea4c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801ea3c:	4620      	mov	r0, r4
 801ea3e:	f006 f862 	bl	8024b06 <__cxa_guard_release>
 801ea42:	4a0f      	ldr	r2, [pc, #60]	@ (801ea80 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801ea44:	490f      	ldr	r1, [pc, #60]	@ (801ea84 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801ea46:	4810      	ldr	r0, [pc, #64]	@ (801ea88 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801ea48:	f006 f84a 	bl	8024ae0 <__aeabi_atexit>
 801ea4c:	4c0f      	ldr	r4, [pc, #60]	@ (801ea8c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801ea4e:	7823      	ldrb	r3, [r4, #0]
 801ea50:	f3bf 8f5b 	dmb	ish
 801ea54:	07db      	lsls	r3, r3, #31
 801ea56:	d40b      	bmi.n	801ea70 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801ea58:	4620      	mov	r0, r4
 801ea5a:	f006 f848 	bl	8024aee <__cxa_guard_acquire>
 801ea5e:	b138      	cbz	r0, 801ea70 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801ea60:	4620      	mov	r0, r4
 801ea62:	f006 f850 	bl	8024b06 <__cxa_guard_release>
 801ea66:	4a06      	ldr	r2, [pc, #24]	@ (801ea80 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801ea68:	4909      	ldr	r1, [pc, #36]	@ (801ea90 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801ea6a:	480a      	ldr	r0, [pc, #40]	@ (801ea94 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801ea6c:	f006 f838 	bl	8024ae0 <__aeabi_atexit>
 801ea70:	4b05      	ldr	r3, [pc, #20]	@ (801ea88 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801ea72:	626b      	str	r3, [r5, #36]	@ 0x24
 801ea74:	4b07      	ldr	r3, [pc, #28]	@ (801ea94 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801ea76:	62ab      	str	r3, [r5, #40]	@ 0x28
 801ea78:	bd38      	pop	{r3, r4, r5, pc}
 801ea7a:	bf00      	nop
 801ea7c:	24026504 	.word	0x24026504
 801ea80:	24000000 	.word	0x24000000
 801ea84:	0801bc11 	.word	0x0801bc11
 801ea88:	240000d0 	.word	0x240000d0
 801ea8c:	24026508 	.word	0x24026508
 801ea90:	0801bc0f 	.word	0x0801bc0f
 801ea94:	240000d4 	.word	0x240000d4

0801ea98 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801ea98:	b538      	push	{r3, r4, r5, lr}
 801ea9a:	4c15      	ldr	r4, [pc, #84]	@ (801eaf0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801ea9c:	4605      	mov	r5, r0
 801ea9e:	7823      	ldrb	r3, [r4, #0]
 801eaa0:	f3bf 8f5b 	dmb	ish
 801eaa4:	07da      	lsls	r2, r3, #31
 801eaa6:	d40b      	bmi.n	801eac0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801eaa8:	4620      	mov	r0, r4
 801eaaa:	f006 f820 	bl	8024aee <__cxa_guard_acquire>
 801eaae:	b138      	cbz	r0, 801eac0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801eab0:	4620      	mov	r0, r4
 801eab2:	f006 f828 	bl	8024b06 <__cxa_guard_release>
 801eab6:	4a0f      	ldr	r2, [pc, #60]	@ (801eaf4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801eab8:	490f      	ldr	r1, [pc, #60]	@ (801eaf8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801eaba:	4810      	ldr	r0, [pc, #64]	@ (801eafc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801eabc:	f006 f810 	bl	8024ae0 <__aeabi_atexit>
 801eac0:	4c0f      	ldr	r4, [pc, #60]	@ (801eb00 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801eac2:	7823      	ldrb	r3, [r4, #0]
 801eac4:	f3bf 8f5b 	dmb	ish
 801eac8:	07db      	lsls	r3, r3, #31
 801eaca:	d40b      	bmi.n	801eae4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801eacc:	4620      	mov	r0, r4
 801eace:	f006 f80e 	bl	8024aee <__cxa_guard_acquire>
 801ead2:	b138      	cbz	r0, 801eae4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801ead4:	4620      	mov	r0, r4
 801ead6:	f006 f816 	bl	8024b06 <__cxa_guard_release>
 801eada:	4a06      	ldr	r2, [pc, #24]	@ (801eaf4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801eadc:	4909      	ldr	r1, [pc, #36]	@ (801eb04 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801eade:	480a      	ldr	r0, [pc, #40]	@ (801eb08 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801eae0:	f005 fffe 	bl	8024ae0 <__aeabi_atexit>
 801eae4:	4b05      	ldr	r3, [pc, #20]	@ (801eafc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801eae6:	61eb      	str	r3, [r5, #28]
 801eae8:	4b07      	ldr	r3, [pc, #28]	@ (801eb08 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801eaea:	622b      	str	r3, [r5, #32]
 801eaec:	bd38      	pop	{r3, r4, r5, pc}
 801eaee:	bf00      	nop
 801eaf0:	240264e4 	.word	0x240264e4
 801eaf4:	24000000 	.word	0x24000000
 801eaf8:	0801bc15 	.word	0x0801bc15
 801eafc:	240000b0 	.word	0x240000b0
 801eb00:	240264e8 	.word	0x240264e8
 801eb04:	0801bc13 	.word	0x0801bc13
 801eb08:	240000b4 	.word	0x240000b4

0801eb0c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801eb0c:	b510      	push	{r4, lr}
 801eb0e:	4604      	mov	r4, r0
 801eb10:	f7ff ff88 	bl	801ea24 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801eb14:	4620      	mov	r0, r4
 801eb16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eb1a:	f7ff bfbd 	b.w	801ea98 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801eb20 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801eb20:	b538      	push	{r3, r4, r5, lr}
 801eb22:	4c15      	ldr	r4, [pc, #84]	@ (801eb78 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801eb24:	4605      	mov	r5, r0
 801eb26:	7823      	ldrb	r3, [r4, #0]
 801eb28:	f3bf 8f5b 	dmb	ish
 801eb2c:	07da      	lsls	r2, r3, #31
 801eb2e:	d40b      	bmi.n	801eb48 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801eb30:	4620      	mov	r0, r4
 801eb32:	f005 ffdc 	bl	8024aee <__cxa_guard_acquire>
 801eb36:	b138      	cbz	r0, 801eb48 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801eb38:	4620      	mov	r0, r4
 801eb3a:	f005 ffe4 	bl	8024b06 <__cxa_guard_release>
 801eb3e:	4a0f      	ldr	r2, [pc, #60]	@ (801eb7c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801eb40:	490f      	ldr	r1, [pc, #60]	@ (801eb80 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801eb42:	4810      	ldr	r0, [pc, #64]	@ (801eb84 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801eb44:	f005 ffcc 	bl	8024ae0 <__aeabi_atexit>
 801eb48:	4c0f      	ldr	r4, [pc, #60]	@ (801eb88 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801eb4a:	7823      	ldrb	r3, [r4, #0]
 801eb4c:	f3bf 8f5b 	dmb	ish
 801eb50:	07db      	lsls	r3, r3, #31
 801eb52:	d40b      	bmi.n	801eb6c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801eb54:	4620      	mov	r0, r4
 801eb56:	f005 ffca 	bl	8024aee <__cxa_guard_acquire>
 801eb5a:	b138      	cbz	r0, 801eb6c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801eb5c:	4620      	mov	r0, r4
 801eb5e:	f005 ffd2 	bl	8024b06 <__cxa_guard_release>
 801eb62:	4a06      	ldr	r2, [pc, #24]	@ (801eb7c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801eb64:	4909      	ldr	r1, [pc, #36]	@ (801eb8c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801eb66:	480a      	ldr	r0, [pc, #40]	@ (801eb90 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801eb68:	f005 ffba 	bl	8024ae0 <__aeabi_atexit>
 801eb6c:	4b05      	ldr	r3, [pc, #20]	@ (801eb84 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801eb6e:	636b      	str	r3, [r5, #52]	@ 0x34
 801eb70:	4b07      	ldr	r3, [pc, #28]	@ (801eb90 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801eb72:	63ab      	str	r3, [r5, #56]	@ 0x38
 801eb74:	bd38      	pop	{r3, r4, r5, pc}
 801eb76:	bf00      	nop
 801eb78:	240264ec 	.word	0x240264ec
 801eb7c:	24000000 	.word	0x24000000
 801eb80:	0801bc09 	.word	0x0801bc09
 801eb84:	240000b8 	.word	0x240000b8
 801eb88:	240264f0 	.word	0x240264f0
 801eb8c:	0801bc07 	.word	0x0801bc07
 801eb90:	240000bc 	.word	0x240000bc

0801eb94 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801eb94:	b538      	push	{r3, r4, r5, lr}
 801eb96:	4c15      	ldr	r4, [pc, #84]	@ (801ebec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801eb98:	4605      	mov	r5, r0
 801eb9a:	7823      	ldrb	r3, [r4, #0]
 801eb9c:	f3bf 8f5b 	dmb	ish
 801eba0:	07da      	lsls	r2, r3, #31
 801eba2:	d40b      	bmi.n	801ebbc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801eba4:	4620      	mov	r0, r4
 801eba6:	f005 ffa2 	bl	8024aee <__cxa_guard_acquire>
 801ebaa:	b138      	cbz	r0, 801ebbc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801ebac:	4620      	mov	r0, r4
 801ebae:	f005 ffaa 	bl	8024b06 <__cxa_guard_release>
 801ebb2:	4a0f      	ldr	r2, [pc, #60]	@ (801ebf0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801ebb4:	490f      	ldr	r1, [pc, #60]	@ (801ebf4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801ebb6:	4810      	ldr	r0, [pc, #64]	@ (801ebf8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801ebb8:	f005 ff92 	bl	8024ae0 <__aeabi_atexit>
 801ebbc:	4c0f      	ldr	r4, [pc, #60]	@ (801ebfc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801ebbe:	7823      	ldrb	r3, [r4, #0]
 801ebc0:	f3bf 8f5b 	dmb	ish
 801ebc4:	07db      	lsls	r3, r3, #31
 801ebc6:	d40b      	bmi.n	801ebe0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801ebc8:	4620      	mov	r0, r4
 801ebca:	f005 ff90 	bl	8024aee <__cxa_guard_acquire>
 801ebce:	b138      	cbz	r0, 801ebe0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801ebd0:	4620      	mov	r0, r4
 801ebd2:	f005 ff98 	bl	8024b06 <__cxa_guard_release>
 801ebd6:	4a06      	ldr	r2, [pc, #24]	@ (801ebf0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801ebd8:	4909      	ldr	r1, [pc, #36]	@ (801ec00 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801ebda:	480a      	ldr	r0, [pc, #40]	@ (801ec04 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801ebdc:	f005 ff80 	bl	8024ae0 <__aeabi_atexit>
 801ebe0:	4b05      	ldr	r3, [pc, #20]	@ (801ebf8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801ebe2:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801ebe4:	4b07      	ldr	r3, [pc, #28]	@ (801ec04 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801ebe6:	632b      	str	r3, [r5, #48]	@ 0x30
 801ebe8:	bd38      	pop	{r3, r4, r5, pc}
 801ebea:	bf00      	nop
 801ebec:	240264c4 	.word	0x240264c4
 801ebf0:	24000000 	.word	0x24000000
 801ebf4:	0801bc0d 	.word	0x0801bc0d
 801ebf8:	24000090 	.word	0x24000090
 801ebfc:	240264c8 	.word	0x240264c8
 801ec00:	0801bc0b 	.word	0x0801bc0b
 801ec04:	24000094 	.word	0x24000094

0801ec08 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801ec08:	b510      	push	{r4, lr}
 801ec0a:	4604      	mov	r4, r0
 801ec0c:	f7ff ff88 	bl	801eb20 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801ec10:	4620      	mov	r0, r4
 801ec12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ec16:	f7ff bfbd 	b.w	801eb94 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801ec1c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801ec1c:	b538      	push	{r3, r4, r5, lr}
 801ec1e:	4c15      	ldr	r4, [pc, #84]	@ (801ec74 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801ec20:	4605      	mov	r5, r0
 801ec22:	7823      	ldrb	r3, [r4, #0]
 801ec24:	f3bf 8f5b 	dmb	ish
 801ec28:	07da      	lsls	r2, r3, #31
 801ec2a:	d40b      	bmi.n	801ec44 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801ec2c:	4620      	mov	r0, r4
 801ec2e:	f005 ff5e 	bl	8024aee <__cxa_guard_acquire>
 801ec32:	b138      	cbz	r0, 801ec44 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801ec34:	4620      	mov	r0, r4
 801ec36:	f005 ff66 	bl	8024b06 <__cxa_guard_release>
 801ec3a:	4a0f      	ldr	r2, [pc, #60]	@ (801ec78 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801ec3c:	490f      	ldr	r1, [pc, #60]	@ (801ec7c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801ec3e:	4810      	ldr	r0, [pc, #64]	@ (801ec80 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801ec40:	f005 ff4e 	bl	8024ae0 <__aeabi_atexit>
 801ec44:	4c0f      	ldr	r4, [pc, #60]	@ (801ec84 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801ec46:	7823      	ldrb	r3, [r4, #0]
 801ec48:	f3bf 8f5b 	dmb	ish
 801ec4c:	07db      	lsls	r3, r3, #31
 801ec4e:	d40b      	bmi.n	801ec68 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801ec50:	4620      	mov	r0, r4
 801ec52:	f005 ff4c 	bl	8024aee <__cxa_guard_acquire>
 801ec56:	b138      	cbz	r0, 801ec68 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801ec58:	4620      	mov	r0, r4
 801ec5a:	f005 ff54 	bl	8024b06 <__cxa_guard_release>
 801ec5e:	4a06      	ldr	r2, [pc, #24]	@ (801ec78 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801ec60:	4909      	ldr	r1, [pc, #36]	@ (801ec88 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801ec62:	480a      	ldr	r0, [pc, #40]	@ (801ec8c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801ec64:	f005 ff3c 	bl	8024ae0 <__aeabi_atexit>
 801ec68:	4b05      	ldr	r3, [pc, #20]	@ (801ec80 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801ec6a:	646b      	str	r3, [r5, #68]	@ 0x44
 801ec6c:	4b07      	ldr	r3, [pc, #28]	@ (801ec8c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801ec6e:	64ab      	str	r3, [r5, #72]	@ 0x48
 801ec70:	bd38      	pop	{r3, r4, r5, pc}
 801ec72:	bf00      	nop
 801ec74:	240264f4 	.word	0x240264f4
 801ec78:	24000000 	.word	0x24000000
 801ec7c:	0801bc01 	.word	0x0801bc01
 801ec80:	240000c0 	.word	0x240000c0
 801ec84:	240264f8 	.word	0x240264f8
 801ec88:	0801bbff 	.word	0x0801bbff
 801ec8c:	240000c4 	.word	0x240000c4

0801ec90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801ec90:	b538      	push	{r3, r4, r5, lr}
 801ec92:	4c15      	ldr	r4, [pc, #84]	@ (801ece8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801ec94:	4605      	mov	r5, r0
 801ec96:	7823      	ldrb	r3, [r4, #0]
 801ec98:	f3bf 8f5b 	dmb	ish
 801ec9c:	07da      	lsls	r2, r3, #31
 801ec9e:	d40b      	bmi.n	801ecb8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801eca0:	4620      	mov	r0, r4
 801eca2:	f005 ff24 	bl	8024aee <__cxa_guard_acquire>
 801eca6:	b138      	cbz	r0, 801ecb8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801eca8:	4620      	mov	r0, r4
 801ecaa:	f005 ff2c 	bl	8024b06 <__cxa_guard_release>
 801ecae:	4a0f      	ldr	r2, [pc, #60]	@ (801ecec <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801ecb0:	490f      	ldr	r1, [pc, #60]	@ (801ecf0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801ecb2:	4810      	ldr	r0, [pc, #64]	@ (801ecf4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801ecb4:	f005 ff14 	bl	8024ae0 <__aeabi_atexit>
 801ecb8:	4c0f      	ldr	r4, [pc, #60]	@ (801ecf8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801ecba:	7823      	ldrb	r3, [r4, #0]
 801ecbc:	f3bf 8f5b 	dmb	ish
 801ecc0:	07db      	lsls	r3, r3, #31
 801ecc2:	d40b      	bmi.n	801ecdc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801ecc4:	4620      	mov	r0, r4
 801ecc6:	f005 ff12 	bl	8024aee <__cxa_guard_acquire>
 801ecca:	b138      	cbz	r0, 801ecdc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801eccc:	4620      	mov	r0, r4
 801ecce:	f005 ff1a 	bl	8024b06 <__cxa_guard_release>
 801ecd2:	4a06      	ldr	r2, [pc, #24]	@ (801ecec <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801ecd4:	4909      	ldr	r1, [pc, #36]	@ (801ecfc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801ecd6:	480a      	ldr	r0, [pc, #40]	@ (801ed00 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801ecd8:	f005 ff02 	bl	8024ae0 <__aeabi_atexit>
 801ecdc:	4b05      	ldr	r3, [pc, #20]	@ (801ecf4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801ecde:	63eb      	str	r3, [r5, #60]	@ 0x3c
 801ece0:	4b07      	ldr	r3, [pc, #28]	@ (801ed00 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801ece2:	642b      	str	r3, [r5, #64]	@ 0x40
 801ece4:	bd38      	pop	{r3, r4, r5, pc}
 801ece6:	bf00      	nop
 801ece8:	240264d4 	.word	0x240264d4
 801ecec:	24000000 	.word	0x24000000
 801ecf0:	0801bc05 	.word	0x0801bc05
 801ecf4:	240000a0 	.word	0x240000a0
 801ecf8:	240264d8 	.word	0x240264d8
 801ecfc:	0801bc03 	.word	0x0801bc03
 801ed00:	240000a4 	.word	0x240000a4

0801ed04 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801ed04:	b510      	push	{r4, lr}
 801ed06:	4604      	mov	r4, r0
 801ed08:	f7ff ff88 	bl	801ec1c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801ed0c:	4620      	mov	r0, r4
 801ed0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ed12:	f7ff bfbd 	b.w	801ec90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801ed18 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801ed18:	b538      	push	{r3, r4, r5, lr}
 801ed1a:	4c15      	ldr	r4, [pc, #84]	@ (801ed70 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801ed1c:	4605      	mov	r5, r0
 801ed1e:	7823      	ldrb	r3, [r4, #0]
 801ed20:	f3bf 8f5b 	dmb	ish
 801ed24:	07da      	lsls	r2, r3, #31
 801ed26:	d40b      	bmi.n	801ed40 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801ed28:	4620      	mov	r0, r4
 801ed2a:	f005 fee0 	bl	8024aee <__cxa_guard_acquire>
 801ed2e:	b138      	cbz	r0, 801ed40 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801ed30:	4620      	mov	r0, r4
 801ed32:	f005 fee8 	bl	8024b06 <__cxa_guard_release>
 801ed36:	4a0f      	ldr	r2, [pc, #60]	@ (801ed74 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801ed38:	490f      	ldr	r1, [pc, #60]	@ (801ed78 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801ed3a:	4810      	ldr	r0, [pc, #64]	@ (801ed7c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801ed3c:	f005 fed0 	bl	8024ae0 <__aeabi_atexit>
 801ed40:	4c0f      	ldr	r4, [pc, #60]	@ (801ed80 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801ed42:	7823      	ldrb	r3, [r4, #0]
 801ed44:	f3bf 8f5b 	dmb	ish
 801ed48:	07db      	lsls	r3, r3, #31
 801ed4a:	d40b      	bmi.n	801ed64 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801ed4c:	4620      	mov	r0, r4
 801ed4e:	f005 fece 	bl	8024aee <__cxa_guard_acquire>
 801ed52:	b138      	cbz	r0, 801ed64 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801ed54:	4620      	mov	r0, r4
 801ed56:	f005 fed6 	bl	8024b06 <__cxa_guard_release>
 801ed5a:	4a06      	ldr	r2, [pc, #24]	@ (801ed74 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801ed5c:	4909      	ldr	r1, [pc, #36]	@ (801ed84 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801ed5e:	480a      	ldr	r0, [pc, #40]	@ (801ed88 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801ed60:	f005 febe 	bl	8024ae0 <__aeabi_atexit>
 801ed64:	4b05      	ldr	r3, [pc, #20]	@ (801ed7c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801ed66:	656b      	str	r3, [r5, #84]	@ 0x54
 801ed68:	4b07      	ldr	r3, [pc, #28]	@ (801ed88 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801ed6a:	65ab      	str	r3, [r5, #88]	@ 0x58
 801ed6c:	bd38      	pop	{r3, r4, r5, pc}
 801ed6e:	bf00      	nop
 801ed70:	240264cc 	.word	0x240264cc
 801ed74:	24000000 	.word	0x24000000
 801ed78:	0801bbf9 	.word	0x0801bbf9
 801ed7c:	24000098 	.word	0x24000098
 801ed80:	240264d0 	.word	0x240264d0
 801ed84:	0801bbf7 	.word	0x0801bbf7
 801ed88:	2400009c 	.word	0x2400009c

0801ed8c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801ed8c:	b538      	push	{r3, r4, r5, lr}
 801ed8e:	4c15      	ldr	r4, [pc, #84]	@ (801ede4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801ed90:	4605      	mov	r5, r0
 801ed92:	7823      	ldrb	r3, [r4, #0]
 801ed94:	f3bf 8f5b 	dmb	ish
 801ed98:	07da      	lsls	r2, r3, #31
 801ed9a:	d40b      	bmi.n	801edb4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801ed9c:	4620      	mov	r0, r4
 801ed9e:	f005 fea6 	bl	8024aee <__cxa_guard_acquire>
 801eda2:	b138      	cbz	r0, 801edb4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801eda4:	4620      	mov	r0, r4
 801eda6:	f005 feae 	bl	8024b06 <__cxa_guard_release>
 801edaa:	4a0f      	ldr	r2, [pc, #60]	@ (801ede8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801edac:	490f      	ldr	r1, [pc, #60]	@ (801edec <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801edae:	4810      	ldr	r0, [pc, #64]	@ (801edf0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801edb0:	f005 fe96 	bl	8024ae0 <__aeabi_atexit>
 801edb4:	4c0f      	ldr	r4, [pc, #60]	@ (801edf4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801edb6:	7823      	ldrb	r3, [r4, #0]
 801edb8:	f3bf 8f5b 	dmb	ish
 801edbc:	07db      	lsls	r3, r3, #31
 801edbe:	d40b      	bmi.n	801edd8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801edc0:	4620      	mov	r0, r4
 801edc2:	f005 fe94 	bl	8024aee <__cxa_guard_acquire>
 801edc6:	b138      	cbz	r0, 801edd8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801edc8:	4620      	mov	r0, r4
 801edca:	f005 fe9c 	bl	8024b06 <__cxa_guard_release>
 801edce:	4a06      	ldr	r2, [pc, #24]	@ (801ede8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801edd0:	4909      	ldr	r1, [pc, #36]	@ (801edf8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801edd2:	480a      	ldr	r0, [pc, #40]	@ (801edfc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801edd4:	f005 fe84 	bl	8024ae0 <__aeabi_atexit>
 801edd8:	4b05      	ldr	r3, [pc, #20]	@ (801edf0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801edda:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801eddc:	4b07      	ldr	r3, [pc, #28]	@ (801edfc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801edde:	652b      	str	r3, [r5, #80]	@ 0x50
 801ede0:	bd38      	pop	{r3, r4, r5, pc}
 801ede2:	bf00      	nop
 801ede4:	240264bc 	.word	0x240264bc
 801ede8:	24000000 	.word	0x24000000
 801edec:	0801bbfd 	.word	0x0801bbfd
 801edf0:	24000088 	.word	0x24000088
 801edf4:	240264c0 	.word	0x240264c0
 801edf8:	0801bbfb 	.word	0x0801bbfb
 801edfc:	2400008c 	.word	0x2400008c

0801ee00 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801ee00:	b510      	push	{r4, lr}
 801ee02:	4604      	mov	r4, r0
 801ee04:	f7ff ff88 	bl	801ed18 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801ee08:	4620      	mov	r0, r4
 801ee0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ee0e:	f7ff bfbd 	b.w	801ed8c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801ee12 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801ee12:	b510      	push	{r4, lr}
 801ee14:	4604      	mov	r4, r0
 801ee16:	f7ff fff3 	bl	801ee00 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801ee1a:	4620      	mov	r0, r4
 801ee1c:	f7ff ff72 	bl	801ed04 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801ee20:	4620      	mov	r0, r4
 801ee22:	f7ff fe73 	bl	801eb0c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801ee26:	4620      	mov	r0, r4
 801ee28:	f7ff fdf2 	bl	801ea10 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801ee2c:	4620      	mov	r0, r4
 801ee2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ee32:	f7ff bee9 	b.w	801ec08 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801ee38 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 801ee38:	b538      	push	{r3, r4, r5, lr}
 801ee3a:	4c0b      	ldr	r4, [pc, #44]	@ (801ee68 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 801ee3c:	4605      	mov	r5, r0
 801ee3e:	7823      	ldrb	r3, [r4, #0]
 801ee40:	f3bf 8f5b 	dmb	ish
 801ee44:	07db      	lsls	r3, r3, #31
 801ee46:	d40b      	bmi.n	801ee60 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801ee48:	4620      	mov	r0, r4
 801ee4a:	f005 fe50 	bl	8024aee <__cxa_guard_acquire>
 801ee4e:	b138      	cbz	r0, 801ee60 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801ee50:	4620      	mov	r0, r4
 801ee52:	f005 fe58 	bl	8024b06 <__cxa_guard_release>
 801ee56:	4a05      	ldr	r2, [pc, #20]	@ (801ee6c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 801ee58:	4905      	ldr	r1, [pc, #20]	@ (801ee70 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 801ee5a:	4806      	ldr	r0, [pc, #24]	@ (801ee74 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801ee5c:	f005 fe40 	bl	8024ae0 <__aeabi_atexit>
 801ee60:	4b04      	ldr	r3, [pc, #16]	@ (801ee74 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801ee62:	65eb      	str	r3, [r5, #92]	@ 0x5c
 801ee64:	bd38      	pop	{r3, r4, r5, pc}
 801ee66:	bf00      	nop
 801ee68:	240264b0 	.word	0x240264b0
 801ee6c:	24000000 	.word	0x24000000
 801ee70:	0801bbf5 	.word	0x0801bbf5
 801ee74:	24000080 	.word	0x24000080

0801ee78 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 801ee78:	b538      	push	{r3, r4, r5, lr}
 801ee7a:	4c0b      	ldr	r4, [pc, #44]	@ (801eea8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 801ee7c:	4605      	mov	r5, r0
 801ee7e:	7823      	ldrb	r3, [r4, #0]
 801ee80:	f3bf 8f5b 	dmb	ish
 801ee84:	07db      	lsls	r3, r3, #31
 801ee86:	d40b      	bmi.n	801eea0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801ee88:	4620      	mov	r0, r4
 801ee8a:	f005 fe30 	bl	8024aee <__cxa_guard_acquire>
 801ee8e:	b138      	cbz	r0, 801eea0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801ee90:	4620      	mov	r0, r4
 801ee92:	f005 fe38 	bl	8024b06 <__cxa_guard_release>
 801ee96:	4a05      	ldr	r2, [pc, #20]	@ (801eeac <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 801ee98:	4905      	ldr	r1, [pc, #20]	@ (801eeb0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 801ee9a:	4806      	ldr	r0, [pc, #24]	@ (801eeb4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801ee9c:	f005 fe20 	bl	8024ae0 <__aeabi_atexit>
 801eea0:	4b04      	ldr	r3, [pc, #16]	@ (801eeb4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801eea2:	662b      	str	r3, [r5, #96]	@ 0x60
 801eea4:	bd38      	pop	{r3, r4, r5, pc}
 801eea6:	bf00      	nop
 801eea8:	240264b4 	.word	0x240264b4
 801eeac:	24000000 	.word	0x24000000
 801eeb0:	0801bbf3 	.word	0x0801bbf3
 801eeb4:	24000084 	.word	0x24000084

0801eeb8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 801eeb8:	b570      	push	{r4, r5, r6, lr}
 801eeba:	4d0c      	ldr	r5, [pc, #48]	@ (801eeec <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 801eebc:	4606      	mov	r6, r0
 801eebe:	4c0c      	ldr	r4, [pc, #48]	@ (801eef0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 801eec0:	782b      	ldrb	r3, [r5, #0]
 801eec2:	f3bf 8f5b 	dmb	ish
 801eec6:	f013 0f01 	tst.w	r3, #1
 801eeca:	d10d      	bne.n	801eee8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801eecc:	4628      	mov	r0, r5
 801eece:	f005 fe0e 	bl	8024aee <__cxa_guard_acquire>
 801eed2:	b148      	cbz	r0, 801eee8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801eed4:	4b07      	ldr	r3, [pc, #28]	@ (801eef4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 801eed6:	4628      	mov	r0, r5
 801eed8:	6023      	str	r3, [r4, #0]
 801eeda:	f005 fe14 	bl	8024b06 <__cxa_guard_release>
 801eede:	4a06      	ldr	r2, [pc, #24]	@ (801eef8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 801eee0:	4620      	mov	r0, r4
 801eee2:	4906      	ldr	r1, [pc, #24]	@ (801eefc <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 801eee4:	f005 fdfc 	bl	8024ae0 <__aeabi_atexit>
 801eee8:	6674      	str	r4, [r6, #100]	@ 0x64
 801eeea:	bd70      	pop	{r4, r5, r6, pc}
 801eeec:	240264b8 	.word	0x240264b8
 801eef0:	24026610 	.word	0x24026610
 801eef4:	08029a30 	.word	0x08029a30
 801eef8:	24000000 	.word	0x24000000
 801eefc:	0801bbf1 	.word	0x0801bbf1

0801ef00 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 801ef00:	b510      	push	{r4, lr}
 801ef02:	4604      	mov	r4, r0
 801ef04:	f7ff ff98 	bl	801ee38 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 801ef08:	4620      	mov	r0, r4
 801ef0a:	f7ff ffb5 	bl	801ee78 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 801ef0e:	4620      	mov	r0, r4
 801ef10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ef14:	f7ff bfd0 	b.w	801eeb8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

0801ef18 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>:
 801ef18:	b570      	push	{r4, r5, r6, lr}
 801ef1a:	4d0c      	ldr	r5, [pc, #48]	@ (801ef4c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x34>)
 801ef1c:	4606      	mov	r6, r0
 801ef1e:	4c0c      	ldr	r4, [pc, #48]	@ (801ef50 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x38>)
 801ef20:	782b      	ldrb	r3, [r5, #0]
 801ef22:	f3bf 8f5b 	dmb	ish
 801ef26:	f013 0f01 	tst.w	r3, #1
 801ef2a:	d10d      	bne.n	801ef48 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 801ef2c:	4628      	mov	r0, r5
 801ef2e:	f005 fdde 	bl	8024aee <__cxa_guard_acquire>
 801ef32:	b148      	cbz	r0, 801ef48 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 801ef34:	4b07      	ldr	r3, [pc, #28]	@ (801ef54 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x3c>)
 801ef36:	4628      	mov	r0, r5
 801ef38:	6023      	str	r3, [r4, #0]
 801ef3a:	f005 fde4 	bl	8024b06 <__cxa_guard_release>
 801ef3e:	4a06      	ldr	r2, [pc, #24]	@ (801ef58 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x40>)
 801ef40:	4620      	mov	r0, r4
 801ef42:	4906      	ldr	r1, [pc, #24]	@ (801ef5c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x44>)
 801ef44:	f005 fdcc 	bl	8024ae0 <__aeabi_atexit>
 801ef48:	66b4      	str	r4, [r6, #104]	@ 0x68
 801ef4a:	bd70      	pop	{r4, r5, r6, pc}
 801ef4c:	240264ac 	.word	0x240264ac
 801ef50:	2402650c 	.word	0x2402650c
 801ef54:	08029a48 	.word	0x08029a48
 801ef58:	24000000 	.word	0x24000000
 801ef5c:	0801bbef 	.word	0x0801bbef

0801ef60 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801ef60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef64:	b087      	sub	sp, #28
 801ef66:	788d      	ldrb	r5, [r1, #2]
 801ef68:	f891 9000 	ldrb.w	r9, [r1]
 801ef6c:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801ef70:	9501      	str	r5, [sp, #4]
 801ef72:	784d      	ldrb	r5, [r1, #1]
 801ef74:	9203      	str	r2, [sp, #12]
 801ef76:	9502      	str	r5, [sp, #8]
 801ef78:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801ef7c:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 801ef80:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 801ef84:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 801ef88:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 801ef8c:	fb06 0708 	mla	r7, r6, r8, r0
 801ef90:	2e00      	cmp	r6, #0
 801ef92:	eb02 0a07 	add.w	sl, r2, r7
 801ef96:	ea4f 2205 	mov.w	r2, r5, lsl #8
 801ef9a:	9d01      	ldr	r5, [sp, #4]
 801ef9c:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801efa0:	ea45 0509 	orr.w	r5, r5, r9
 801efa4:	9505      	str	r5, [sp, #20]
 801efa6:	f2c0 80b2 	blt.w	801f10e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801efaa:	45b3      	cmp	fp, r6
 801efac:	f340 80af 	ble.w	801f10e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801efb0:	2800      	cmp	r0, #0
 801efb2:	f2c0 80aa 	blt.w	801f10a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801efb6:	4580      	cmp	r8, r0
 801efb8:	f340 80a7 	ble.w	801f10a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801efbc:	9a03      	ldr	r2, [sp, #12]
 801efbe:	5dd7      	ldrb	r7, [r2, r7]
 801efc0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801efc4:	441f      	add	r7, r3
 801efc6:	1c42      	adds	r2, r0, #1
 801efc8:	f100 80a4 	bmi.w	801f114 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801efcc:	4590      	cmp	r8, r2
 801efce:	f340 80a1 	ble.w	801f114 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801efd2:	2c00      	cmp	r4, #0
 801efd4:	f000 809e 	beq.w	801f114 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801efd8:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801efdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801efe0:	441d      	add	r5, r3
 801efe2:	3601      	adds	r6, #1
 801efe4:	f100 809a 	bmi.w	801f11c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801efe8:	45b3      	cmp	fp, r6
 801efea:	f340 8097 	ble.w	801f11c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801efee:	f1bc 0f00 	cmp.w	ip, #0
 801eff2:	f000 8093 	beq.w	801f11c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801eff6:	2800      	cmp	r0, #0
 801eff8:	f2c0 808e 	blt.w	801f118 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801effc:	4580      	cmp	r8, r0
 801effe:	f340 808b 	ble.w	801f118 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801f002:	f81a 6008 	ldrb.w	r6, [sl, r8]
 801f006:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f00a:	441e      	add	r6, r3
 801f00c:	3001      	adds	r0, #1
 801f00e:	f100 8088 	bmi.w	801f122 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801f012:	4580      	cmp	r8, r0
 801f014:	f340 8085 	ble.w	801f122 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801f018:	2c00      	cmp	r4, #0
 801f01a:	f000 8082 	beq.w	801f122 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801f01e:	44d0      	add	r8, sl
 801f020:	f898 2001 	ldrb.w	r2, [r8, #1]
 801f024:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f028:	4413      	add	r3, r2
 801f02a:	b2a4      	uxth	r4, r4
 801f02c:	f895 a000 	ldrb.w	sl, [r5]
 801f030:	fa1f fc8c 	uxth.w	ip, ip
 801f034:	fb04 fb0c 	mul.w	fp, r4, ip
 801f038:	0124      	lsls	r4, r4, #4
 801f03a:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 801f03e:	f5c4 7880 	rsb	r8, r4, #256	@ 0x100
 801f042:	eba4 040b 	sub.w	r4, r4, fp
 801f046:	fa1f f08c 	uxth.w	r0, ip
 801f04a:	b2a2      	uxth	r2, r4
 801f04c:	783c      	ldrb	r4, [r7, #0]
 801f04e:	eba8 0800 	sub.w	r8, r8, r0
 801f052:	fa1f fc8e 	uxth.w	ip, lr
 801f056:	fb02 fa0a 	mul.w	sl, r2, sl
 801f05a:	ea6f 0e0e 	mvn.w	lr, lr
 801f05e:	fa1f f888 	uxth.w	r8, r8
 801f062:	fa5f fe8e 	uxtb.w	lr, lr
 801f066:	fb08 aa04 	mla	sl, r8, r4, sl
 801f06a:	7834      	ldrb	r4, [r6, #0]
 801f06c:	fb19 f90e 	smulbb	r9, r9, lr
 801f070:	fb00 aa04 	mla	sl, r0, r4, sl
 801f074:	781c      	ldrb	r4, [r3, #0]
 801f076:	fb0b a404 	mla	r4, fp, r4, sl
 801f07a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801f07e:	fb04 990c 	mla	r9, r4, ip, r9
 801f082:	fa1f f989 	uxth.w	r9, r9
 801f086:	f109 0401 	add.w	r4, r9, #1
 801f08a:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801f08e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f092:	f881 9000 	strb.w	r9, [r1]
 801f096:	f895 9001 	ldrb.w	r9, [r5, #1]
 801f09a:	787c      	ldrb	r4, [r7, #1]
 801f09c:	fb02 f909 	mul.w	r9, r2, r9
 801f0a0:	fb08 9904 	mla	r9, r8, r4, r9
 801f0a4:	7874      	ldrb	r4, [r6, #1]
 801f0a6:	fb00 9904 	mla	r9, r0, r4, r9
 801f0aa:	785c      	ldrb	r4, [r3, #1]
 801f0ac:	fb0b 9404 	mla	r4, fp, r4, r9
 801f0b0:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801f0b4:	9c02      	ldr	r4, [sp, #8]
 801f0b6:	fb14 f90e 	smulbb	r9, r4, lr
 801f0ba:	fb0a 940c 	mla	r4, sl, ip, r9
 801f0be:	b2a4      	uxth	r4, r4
 801f0c0:	f104 0901 	add.w	r9, r4, #1
 801f0c4:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801f0c8:	1224      	asrs	r4, r4, #8
 801f0ca:	704c      	strb	r4, [r1, #1]
 801f0cc:	78ad      	ldrb	r5, [r5, #2]
 801f0ce:	78bc      	ldrb	r4, [r7, #2]
 801f0d0:	436a      	muls	r2, r5
 801f0d2:	789b      	ldrb	r3, [r3, #2]
 801f0d4:	fb08 2204 	mla	r2, r8, r4, r2
 801f0d8:	78b4      	ldrb	r4, [r6, #2]
 801f0da:	fb00 2004 	mla	r0, r0, r4, r2
 801f0de:	fb0b 0b03 	mla	fp, fp, r3, r0
 801f0e2:	9b01      	ldr	r3, [sp, #4]
 801f0e4:	fb13 fe0e 	smulbb	lr, r3, lr
 801f0e8:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801f0ec:	fb0b ec0c 	mla	ip, fp, ip, lr
 801f0f0:	fa1f fc8c 	uxth.w	ip, ip
 801f0f4:	f10c 0e01 	add.w	lr, ip, #1
 801f0f8:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801f0fc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f100:	f881 c002 	strb.w	ip, [r1, #2]
 801f104:	b007      	add	sp, #28
 801f106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f10a:	af05      	add	r7, sp, #20
 801f10c:	e75b      	b.n	801efc6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 801f10e:	ad05      	add	r5, sp, #20
 801f110:	462f      	mov	r7, r5
 801f112:	e766      	b.n	801efe2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801f114:	ad05      	add	r5, sp, #20
 801f116:	e764      	b.n	801efe2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801f118:	ae05      	add	r6, sp, #20
 801f11a:	e777      	b.n	801f00c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801f11c:	ab05      	add	r3, sp, #20
 801f11e:	461e      	mov	r6, r3
 801f120:	e783      	b.n	801f02a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801f122:	ab05      	add	r3, sp, #20
 801f124:	e781      	b.n	801f02a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801f126 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f126:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f12a:	b093      	sub	sp, #76	@ 0x4c
 801f12c:	9210      	str	r2, [sp, #64]	@ 0x40
 801f12e:	9309      	str	r3, [sp, #36]	@ 0x24
 801f130:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801f132:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 801f136:	9011      	str	r0, [sp, #68]	@ 0x44
 801f138:	930e      	str	r3, [sp, #56]	@ 0x38
 801f13a:	6850      	ldr	r0, [r2, #4]
 801f13c:	910d      	str	r1, [sp, #52]	@ 0x34
 801f13e:	6812      	ldr	r2, [r2, #0]
 801f140:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801f144:	fb00 1303 	mla	r3, r0, r3, r1
 801f148:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f14c:	18d3      	adds	r3, r2, r3
 801f14e:	930a      	str	r3, [sp, #40]	@ 0x28
 801f150:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f152:	681b      	ldr	r3, [r3, #0]
 801f154:	930c      	str	r3, [sp, #48]	@ 0x30
 801f156:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f158:	685c      	ldr	r4, [r3, #4]
 801f15a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f15c:	3404      	adds	r4, #4
 801f15e:	43db      	mvns	r3, r3
 801f160:	b2db      	uxtb	r3, r3
 801f162:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f164:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f166:	2b00      	cmp	r3, #0
 801f168:	dc03      	bgt.n	801f172 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801f16a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f16c:	2b00      	cmp	r3, #0
 801f16e:	f340 8250 	ble.w	801f612 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801f172:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f174:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f178:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f17c:	1e48      	subs	r0, r1, #1
 801f17e:	1e55      	subs	r5, r2, #1
 801f180:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f182:	2b00      	cmp	r3, #0
 801f184:	f340 80ee 	ble.w	801f364 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801f188:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 801f18a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f18c:	1436      	asrs	r6, r6, #16
 801f18e:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f192:	d406      	bmi.n	801f1a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f194:	4286      	cmp	r6, r0
 801f196:	da04      	bge.n	801f1a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f198:	2b00      	cmp	r3, #0
 801f19a:	db02      	blt.n	801f1a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f19c:	42ab      	cmp	r3, r5
 801f19e:	f2c0 80e2 	blt.w	801f366 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801f1a2:	3601      	adds	r6, #1
 801f1a4:	f100 80cf 	bmi.w	801f346 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801f1a8:	42b1      	cmp	r1, r6
 801f1aa:	f2c0 80cc 	blt.w	801f346 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801f1ae:	3301      	adds	r3, #1
 801f1b0:	f100 80c9 	bmi.w	801f346 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801f1b4:	429a      	cmp	r2, r3
 801f1b6:	f2c0 80c6 	blt.w	801f346 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801f1ba:	e9dd b609 	ldrd	fp, r6, [sp, #36]	@ 0x24
 801f1be:	f1bb 0f00 	cmp.w	fp, #0
 801f1c2:	f340 80f1 	ble.w	801f3a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801f1c6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f1c8:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801f1ca:	9824      	ldr	r0, [sp, #144]	@ 0x90
 801f1cc:	141d      	asrs	r5, r3, #16
 801f1ce:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f1d0:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f1d4:	68c7      	ldr	r7, [r0, #12]
 801f1d6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801f1d8:	1418      	asrs	r0, r3, #16
 801f1da:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801f1de:	6892      	ldr	r2, [r2, #8]
 801f1e0:	f100 8137 	bmi.w	801f452 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801f1e4:	f102 3cff 	add.w	ip, r2, #4294967295
 801f1e8:	4560      	cmp	r0, ip
 801f1ea:	f280 8132 	bge.w	801f452 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801f1ee:	2d00      	cmp	r5, #0
 801f1f0:	f2c0 812f 	blt.w	801f452 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801f1f4:	f107 3cff 	add.w	ip, r7, #4294967295
 801f1f8:	4565      	cmp	r5, ip
 801f1fa:	f280 812a 	bge.w	801f452 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801f1fe:	b212      	sxth	r2, r2
 801f200:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801f202:	fb05 0002 	mla	r0, r5, r2, r0
 801f206:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801f208:	f817 c000 	ldrb.w	ip, [r7, r0]
 801f20c:	4405      	add	r5, r0
 801f20e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f212:	eb04 0e0c 	add.w	lr, r4, ip
 801f216:	f1b8 0f00 	cmp.w	r8, #0
 801f21a:	f000 810c 	beq.w	801f436 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801f21e:	786f      	ldrb	r7, [r5, #1]
 801f220:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f224:	4427      	add	r7, r4
 801f226:	2900      	cmp	r1, #0
 801f228:	f000 810d 	beq.w	801f446 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801f22c:	18a8      	adds	r0, r5, r2
 801f22e:	5caa      	ldrb	r2, [r5, r2]
 801f230:	7840      	ldrb	r0, [r0, #1]
 801f232:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f236:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f23a:	4422      	add	r2, r4
 801f23c:	4420      	add	r0, r4
 801f23e:	fa1f f388 	uxth.w	r3, r8
 801f242:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801f246:	b289      	uxth	r1, r1
 801f248:	f897 c000 	ldrb.w	ip, [r7]
 801f24c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801f250:	fb03 f901 	mul.w	r9, r3, r1
 801f254:	011b      	lsls	r3, r3, #4
 801f256:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f25a:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 801f25e:	eba3 0309 	sub.w	r3, r3, r9
 801f262:	b289      	uxth	r1, r1
 801f264:	b29b      	uxth	r3, r3
 801f266:	eba8 0801 	sub.w	r8, r8, r1
 801f26a:	fb03 fc0c 	mul.w	ip, r3, ip
 801f26e:	fa1f f888 	uxth.w	r8, r8
 801f272:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f274:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f276:	fb08 cc0a 	mla	ip, r8, sl, ip
 801f27a:	f892 a000 	ldrb.w	sl, [r2]
 801f27e:	fb01 cc0a 	mla	ip, r1, sl, ip
 801f282:	f890 a000 	ldrb.w	sl, [r0]
 801f286:	fb09 cc0a 	mla	ip, r9, sl, ip
 801f28a:	f896 a000 	ldrb.w	sl, [r6]
 801f28e:	fb1a fa03 	smulbb	sl, sl, r3
 801f292:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801f296:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f298:	fb0c ac05 	mla	ip, ip, r5, sl
 801f29c:	fa1f fc8c 	uxth.w	ip, ip
 801f2a0:	f10c 0a01 	add.w	sl, ip, #1
 801f2a4:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801f2a8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f2ac:	f886 a000 	strb.w	sl, [r6]
 801f2b0:	f897 c001 	ldrb.w	ip, [r7, #1]
 801f2b4:	f89e a001 	ldrb.w	sl, [lr, #1]
 801f2b8:	fb03 fc0c 	mul.w	ip, r3, ip
 801f2bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f2be:	fb08 cc0a 	mla	ip, r8, sl, ip
 801f2c2:	f892 a001 	ldrb.w	sl, [r2, #1]
 801f2c6:	fb01 cc0a 	mla	ip, r1, sl, ip
 801f2ca:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f2ce:	fb09 cc0a 	mla	ip, r9, sl, ip
 801f2d2:	f896 a001 	ldrb.w	sl, [r6, #1]
 801f2d6:	fb1a fa03 	smulbb	sl, sl, r3
 801f2da:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801f2de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f2e0:	fb0c ac05 	mla	ip, ip, r5, sl
 801f2e4:	fa1f fc8c 	uxth.w	ip, ip
 801f2e8:	f10c 0a01 	add.w	sl, ip, #1
 801f2ec:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801f2f0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f2f4:	f886 c001 	strb.w	ip, [r6, #1]
 801f2f8:	78bf      	ldrb	r7, [r7, #2]
 801f2fa:	f89e c002 	ldrb.w	ip, [lr, #2]
 801f2fe:	437b      	muls	r3, r7
 801f300:	fb08 330c 	mla	r3, r8, ip, r3
 801f304:	f892 c002 	ldrb.w	ip, [r2, #2]
 801f308:	7882      	ldrb	r2, [r0, #2]
 801f30a:	fb01 310c 	mla	r1, r1, ip, r3
 801f30e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f310:	fb09 1902 	mla	r9, r9, r2, r1
 801f314:	78b1      	ldrb	r1, [r6, #2]
 801f316:	fb11 f103 	smulbb	r1, r1, r3
 801f31a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801f31e:	fb09 1505 	mla	r5, r9, r5, r1
 801f322:	b2ad      	uxth	r5, r5
 801f324:	1c6b      	adds	r3, r5, #1
 801f326:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f32a:	122d      	asrs	r5, r5, #8
 801f32c:	70b5      	strb	r5, [r6, #2]
 801f32e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f330:	3603      	adds	r6, #3
 801f332:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801f334:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f338:	4413      	add	r3, r2
 801f33a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801f33c:	931d      	str	r3, [sp, #116]	@ 0x74
 801f33e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f340:	4413      	add	r3, r2
 801f342:	931e      	str	r3, [sp, #120]	@ 0x78
 801f344:	e73b      	b.n	801f1be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f346:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f348:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 801f34a:	4433      	add	r3, r6
 801f34c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801f34e:	931d      	str	r3, [sp, #116]	@ 0x74
 801f350:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f352:	4433      	add	r3, r6
 801f354:	931e      	str	r3, [sp, #120]	@ 0x78
 801f356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f358:	3b01      	subs	r3, #1
 801f35a:	9309      	str	r3, [sp, #36]	@ 0x24
 801f35c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f35e:	3303      	adds	r3, #3
 801f360:	930a      	str	r3, [sp, #40]	@ 0x28
 801f362:	e70d      	b.n	801f180 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801f364:	d028      	beq.n	801f3b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801f366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f368:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801f36a:	3b01      	subs	r3, #1
 801f36c:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801f36e:	fb00 5003 	mla	r0, r0, r3, r5
 801f372:	1400      	asrs	r0, r0, #16
 801f374:	f53f af21 	bmi.w	801f1ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f378:	3901      	subs	r1, #1
 801f37a:	4288      	cmp	r0, r1
 801f37c:	f6bf af1d 	bge.w	801f1ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f380:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801f382:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801f384:	fb01 0303 	mla	r3, r1, r3, r0
 801f388:	141b      	asrs	r3, r3, #16
 801f38a:	f53f af16 	bmi.w	801f1ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f38e:	3a01      	subs	r2, #1
 801f390:	4293      	cmp	r3, r2
 801f392:	f6bf af12 	bge.w	801f1ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f396:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f398:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 801f39c:	1cdf      	adds	r7, r3, #3
 801f39e:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801f3a2:	f1b9 0f00 	cmp.w	r9, #0
 801f3a6:	dc73      	bgt.n	801f490 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801f3a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f3aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f3ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f3b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f3b4:	441a      	add	r2, r3
 801f3b6:	920a      	str	r2, [sp, #40]	@ 0x28
 801f3b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f3ba:	2b00      	cmp	r3, #0
 801f3bc:	f340 8129 	ble.w	801f612 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801f3c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f3c4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801f3c6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f3ca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f3ce:	eef0 6a62 	vmov.f32	s13, s5
 801f3d2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f3d6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f3da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f3de:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 801f3e2:	eef0 6a43 	vmov.f32	s13, s6
 801f3e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f3ea:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 801f3ee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f3f2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f3f6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f3fa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f3fe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f402:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f406:	ee12 2a90 	vmov	r2, s5
 801f40a:	eef0 2a47 	vmov.f32	s5, s14
 801f40e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f412:	ee13 2a10 	vmov	r2, s6
 801f416:	931f      	str	r3, [sp, #124]	@ 0x7c
 801f418:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801f41a:	eeb0 3a67 	vmov.f32	s6, s15
 801f41e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f422:	9320      	str	r3, [sp, #128]	@ 0x80
 801f424:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f426:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f428:	3b01      	subs	r3, #1
 801f42a:	930d      	str	r3, [sp, #52]	@ 0x34
 801f42c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801f42e:	bf08      	it	eq
 801f430:	4613      	moveq	r3, r2
 801f432:	9309      	str	r3, [sp, #36]	@ 0x24
 801f434:	e696      	b.n	801f164 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f436:	b149      	cbz	r1, 801f44c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801f438:	5caa      	ldrb	r2, [r5, r2]
 801f43a:	4670      	mov	r0, lr
 801f43c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f440:	4422      	add	r2, r4
 801f442:	4677      	mov	r7, lr
 801f444:	e6fb      	b.n	801f23e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801f446:	4670      	mov	r0, lr
 801f448:	4672      	mov	r2, lr
 801f44a:	e6f8      	b.n	801f23e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801f44c:	4670      	mov	r0, lr
 801f44e:	4672      	mov	r2, lr
 801f450:	e7f7      	b.n	801f442 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801f452:	f110 0c01 	adds.w	ip, r0, #1
 801f456:	f53f af6a 	bmi.w	801f32e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801f45a:	4562      	cmp	r2, ip
 801f45c:	f6ff af67 	blt.w	801f32e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801f460:	f115 0c01 	adds.w	ip, r5, #1
 801f464:	f53f af63 	bmi.w	801f32e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801f468:	4567      	cmp	r7, ip
 801f46a:	f6ff af60 	blt.w	801f32e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801f46e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f470:	b23f      	sxth	r7, r7
 801f472:	b212      	sxth	r2, r2
 801f474:	9002      	str	r0, [sp, #8]
 801f476:	9701      	str	r7, [sp, #4]
 801f478:	9200      	str	r2, [sp, #0]
 801f47a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801f47c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f47e:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801f482:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801f486:	4623      	mov	r3, r4
 801f488:	4631      	mov	r1, r6
 801f48a:	f7ff fd69 	bl	801ef60 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801f48e:	e74e      	b.n	801f32e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801f490:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801f492:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801f494:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f498:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801f49a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801f49c:	1400      	asrs	r0, r0, #16
 801f49e:	142d      	asrs	r5, r5, #16
 801f4a0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f4a2:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801f4a6:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f4aa:	fb02 5000 	mla	r0, r2, r0, r5
 801f4ae:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801f4b0:	f815 e000 	ldrb.w	lr, [r5, r0]
 801f4b4:	eb05 0c00 	add.w	ip, r5, r0
 801f4b8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f4bc:	eb04 060e 	add.w	r6, r4, lr
 801f4c0:	2b00      	cmp	r3, #0
 801f4c2:	f000 8097 	beq.w	801f5f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801f4c6:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801f4ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f4ce:	4425      	add	r5, r4
 801f4d0:	2900      	cmp	r1, #0
 801f4d2:	f000 8098 	beq.w	801f606 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801f4d6:	eb0c 0002 	add.w	r0, ip, r2
 801f4da:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f4de:	7840      	ldrb	r0, [r0, #1]
 801f4e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f4e4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f4e8:	4422      	add	r2, r4
 801f4ea:	4420      	add	r0, r4
 801f4ec:	b29b      	uxth	r3, r3
 801f4ee:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801f4f2:	b289      	uxth	r1, r1
 801f4f4:	f895 e000 	ldrb.w	lr, [r5]
 801f4f8:	3703      	adds	r7, #3
 801f4fa:	f109 39ff 	add.w	r9, r9, #4294967295
 801f4fe:	fb03 f801 	mul.w	r8, r3, r1
 801f502:	011b      	lsls	r3, r3, #4
 801f504:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801f508:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801f50c:	eba3 0308 	sub.w	r3, r3, r8
 801f510:	b289      	uxth	r1, r1
 801f512:	b29b      	uxth	r3, r3
 801f514:	ebac 0c01 	sub.w	ip, ip, r1
 801f518:	fb03 fe0e 	mul.w	lr, r3, lr
 801f51c:	fa1f fc8c 	uxth.w	ip, ip
 801f520:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f522:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f524:	fb0c ee0b 	mla	lr, ip, fp, lr
 801f528:	f892 b000 	ldrb.w	fp, [r2]
 801f52c:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f530:	f890 b000 	ldrb.w	fp, [r0]
 801f534:	fb08 ee0b 	mla	lr, r8, fp, lr
 801f538:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801f53c:	fb1b fb03 	smulbb	fp, fp, r3
 801f540:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801f544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f546:	fb0e be0a 	mla	lr, lr, sl, fp
 801f54a:	fa1f fe8e 	uxth.w	lr, lr
 801f54e:	f10e 0b01 	add.w	fp, lr, #1
 801f552:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801f556:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f55a:	f807 ec06 	strb.w	lr, [r7, #-6]
 801f55e:	f895 e001 	ldrb.w	lr, [r5, #1]
 801f562:	f896 b001 	ldrb.w	fp, [r6, #1]
 801f566:	fb03 fe0e 	mul.w	lr, r3, lr
 801f56a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f56c:	fb0c ee0b 	mla	lr, ip, fp, lr
 801f570:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f574:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f578:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f57c:	fb08 ee0b 	mla	lr, r8, fp, lr
 801f580:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801f584:	fb1b fb03 	smulbb	fp, fp, r3
 801f588:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801f58c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f58e:	fb0e be0a 	mla	lr, lr, sl, fp
 801f592:	fa1f fe8e 	uxth.w	lr, lr
 801f596:	f10e 0b01 	add.w	fp, lr, #1
 801f59a:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801f59e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f5a2:	f807 ec05 	strb.w	lr, [r7, #-5]
 801f5a6:	78ad      	ldrb	r5, [r5, #2]
 801f5a8:	78b6      	ldrb	r6, [r6, #2]
 801f5aa:	436b      	muls	r3, r5
 801f5ac:	7895      	ldrb	r5, [r2, #2]
 801f5ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f5b0:	fb0c 3306 	mla	r3, ip, r6, r3
 801f5b4:	fb01 3305 	mla	r3, r1, r5, r3
 801f5b8:	7885      	ldrb	r5, [r0, #2]
 801f5ba:	fb08 3805 	mla	r8, r8, r5, r3
 801f5be:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801f5c2:	fb13 f302 	smulbb	r3, r3, r2
 801f5c6:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801f5ca:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801f5cc:	fb08 380a 	mla	r8, r8, sl, r3
 801f5d0:	fa1f f888 	uxth.w	r8, r8
 801f5d4:	f108 0301 	add.w	r3, r8, #1
 801f5d8:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801f5dc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f5de:	4413      	add	r3, r2
 801f5e0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801f5e2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f5e6:	931d      	str	r3, [sp, #116]	@ 0x74
 801f5e8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f5ea:	f807 8c04 	strb.w	r8, [r7, #-4]
 801f5ee:	4413      	add	r3, r2
 801f5f0:	931e      	str	r3, [sp, #120]	@ 0x78
 801f5f2:	e6d6      	b.n	801f3a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f5f4:	b151      	cbz	r1, 801f60c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801f5f6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f5fa:	4630      	mov	r0, r6
 801f5fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f600:	4422      	add	r2, r4
 801f602:	4635      	mov	r5, r6
 801f604:	e772      	b.n	801f4ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801f606:	4630      	mov	r0, r6
 801f608:	4632      	mov	r2, r6
 801f60a:	e76f      	b.n	801f4ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801f60c:	4630      	mov	r0, r6
 801f60e:	4632      	mov	r2, r6
 801f610:	e7f7      	b.n	801f602 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801f612:	b013      	add	sp, #76	@ 0x4c
 801f614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f618 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801f618:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801f61c:	784c      	ldrb	r4, [r1, #1]
 801f61e:	f891 a002 	ldrb.w	sl, [r1, #2]
 801f622:	0224      	lsls	r4, r4, #8
 801f624:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801f628:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 801f62c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801f630:	f891 a000 	ldrb.w	sl, [r1]
 801f634:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 801f638:	ea44 040a 	orr.w	r4, r4, sl
 801f63c:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 801f640:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	@ 0x30
 801f644:	9401      	str	r4, [sp, #4]
 801f646:	fb05 c70e 	mla	r7, r5, lr, ip
 801f64a:	2d00      	cmp	r5, #0
 801f64c:	eb02 0807 	add.w	r8, r2, r7
 801f650:	db72      	blt.n	801f738 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801f652:	45a9      	cmp	r9, r5
 801f654:	dd70      	ble.n	801f738 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801f656:	f1bc 0f00 	cmp.w	ip, #0
 801f65a:	db6b      	blt.n	801f734 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801f65c:	45e6      	cmp	lr, ip
 801f65e:	dd69      	ble.n	801f734 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801f660:	5dd7      	ldrb	r7, [r2, r7]
 801f662:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f666:	441f      	add	r7, r3
 801f668:	f11c 0201 	adds.w	r2, ip, #1
 801f66c:	d467      	bmi.n	801f73e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801f66e:	4596      	cmp	lr, r2
 801f670:	dd65      	ble.n	801f73e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801f672:	2800      	cmp	r0, #0
 801f674:	d063      	beq.n	801f73e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801f676:	f898 4001 	ldrb.w	r4, [r8, #1]
 801f67a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f67e:	441c      	add	r4, r3
 801f680:	3501      	adds	r5, #1
 801f682:	d460      	bmi.n	801f746 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801f684:	45a9      	cmp	r9, r5
 801f686:	dd5e      	ble.n	801f746 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801f688:	2e00      	cmp	r6, #0
 801f68a:	d05c      	beq.n	801f746 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801f68c:	f1bc 0f00 	cmp.w	ip, #0
 801f690:	db57      	blt.n	801f742 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801f692:	45e6      	cmp	lr, ip
 801f694:	dd55      	ble.n	801f742 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801f696:	f818 500e 	ldrb.w	r5, [r8, lr]
 801f69a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f69e:	441d      	add	r5, r3
 801f6a0:	f11c 0201 	adds.w	r2, ip, #1
 801f6a4:	d452      	bmi.n	801f74c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801f6a6:	4596      	cmp	lr, r2
 801f6a8:	dd50      	ble.n	801f74c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801f6aa:	2800      	cmp	r0, #0
 801f6ac:	d04e      	beq.n	801f74c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801f6ae:	44c6      	add	lr, r8
 801f6b0:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801f6b4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f6b8:	4413      	add	r3, r2
 801f6ba:	b280      	uxth	r0, r0
 801f6bc:	f897 8000 	ldrb.w	r8, [r7]
 801f6c0:	b2b2      	uxth	r2, r6
 801f6c2:	fb00 f602 	mul.w	r6, r0, r2
 801f6c6:	0100      	lsls	r0, r0, #4
 801f6c8:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801f6cc:	f5c0 7e80 	rsb	lr, r0, #256	@ 0x100
 801f6d0:	1b80      	subs	r0, r0, r6
 801f6d2:	fa1f fc82 	uxth.w	ip, r2
 801f6d6:	b282      	uxth	r2, r0
 801f6d8:	7820      	ldrb	r0, [r4, #0]
 801f6da:	ebae 0e0c 	sub.w	lr, lr, ip
 801f6de:	4350      	muls	r0, r2
 801f6e0:	fa1f fe8e 	uxth.w	lr, lr
 801f6e4:	fb0e 0808 	mla	r8, lr, r8, r0
 801f6e8:	7828      	ldrb	r0, [r5, #0]
 801f6ea:	fb0c 8800 	mla	r8, ip, r0, r8
 801f6ee:	7818      	ldrb	r0, [r3, #0]
 801f6f0:	fb06 8000 	mla	r0, r6, r0, r8
 801f6f4:	1200      	asrs	r0, r0, #8
 801f6f6:	7008      	strb	r0, [r1, #0]
 801f6f8:	7860      	ldrb	r0, [r4, #1]
 801f6fa:	f897 8001 	ldrb.w	r8, [r7, #1]
 801f6fe:	4350      	muls	r0, r2
 801f700:	fb0e 0808 	mla	r8, lr, r8, r0
 801f704:	7868      	ldrb	r0, [r5, #1]
 801f706:	fb0c 8800 	mla	r8, ip, r0, r8
 801f70a:	7858      	ldrb	r0, [r3, #1]
 801f70c:	fb06 8000 	mla	r0, r6, r0, r8
 801f710:	1200      	asrs	r0, r0, #8
 801f712:	7048      	strb	r0, [r1, #1]
 801f714:	78a0      	ldrb	r0, [r4, #2]
 801f716:	78bf      	ldrb	r7, [r7, #2]
 801f718:	4350      	muls	r0, r2
 801f71a:	78aa      	ldrb	r2, [r5, #2]
 801f71c:	fb0e 0007 	mla	r0, lr, r7, r0
 801f720:	fb0c 0c02 	mla	ip, ip, r2, r0
 801f724:	789a      	ldrb	r2, [r3, #2]
 801f726:	fb06 c202 	mla	r2, r6, r2, ip
 801f72a:	1212      	asrs	r2, r2, #8
 801f72c:	708a      	strb	r2, [r1, #2]
 801f72e:	b002      	add	sp, #8
 801f730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f734:	af01      	add	r7, sp, #4
 801f736:	e797      	b.n	801f668 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801f738:	ac01      	add	r4, sp, #4
 801f73a:	4627      	mov	r7, r4
 801f73c:	e7a0      	b.n	801f680 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801f73e:	ac01      	add	r4, sp, #4
 801f740:	e79e      	b.n	801f680 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801f742:	ad01      	add	r5, sp, #4
 801f744:	e7ac      	b.n	801f6a0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 801f746:	ab01      	add	r3, sp, #4
 801f748:	461d      	mov	r5, r3
 801f74a:	e7b6      	b.n	801f6ba <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801f74c:	ab01      	add	r3, sp, #4
 801f74e:	e7b4      	b.n	801f6ba <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

0801f750 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f754:	b08d      	sub	sp, #52	@ 0x34
 801f756:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f75a:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 801f75e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801f760:	900b      	str	r0, [sp, #44]	@ 0x2c
 801f762:	9306      	str	r3, [sp, #24]
 801f764:	6850      	ldr	r0, [r2, #4]
 801f766:	6812      	ldr	r2, [r2, #0]
 801f768:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801f76a:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	@ 0x70
 801f76e:	fb00 1303 	mla	r3, r0, r3, r1
 801f772:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f776:	18d3      	adds	r3, r2, r3
 801f778:	9307      	str	r3, [sp, #28]
 801f77a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f77c:	681b      	ldr	r3, [r3, #0]
 801f77e:	9308      	str	r3, [sp, #32]
 801f780:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f782:	685d      	ldr	r5, [r3, #4]
 801f784:	3504      	adds	r5, #4
 801f786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f788:	2b00      	cmp	r3, #0
 801f78a:	dc03      	bgt.n	801f794 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801f78c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f78e:	2b00      	cmp	r3, #0
 801f790:	f340 81e6 	ble.w	801fb60 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801f794:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f796:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f79a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f79e:	1e48      	subs	r0, r1, #1
 801f7a0:	1e56      	subs	r6, r2, #1
 801f7a2:	9b06      	ldr	r3, [sp, #24]
 801f7a4:	2b00      	cmp	r3, #0
 801f7a6:	f340 80bd 	ble.w	801f924 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801f7aa:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f7ac:	1427      	asrs	r7, r4, #16
 801f7ae:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f7b2:	d406      	bmi.n	801f7c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f7b4:	4287      	cmp	r7, r0
 801f7b6:	da04      	bge.n	801f7c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f7b8:	2b00      	cmp	r3, #0
 801f7ba:	db02      	blt.n	801f7c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f7bc:	42b3      	cmp	r3, r6
 801f7be:	f2c0 80b2 	blt.w	801f926 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801f7c2:	3701      	adds	r7, #1
 801f7c4:	f100 80a1 	bmi.w	801f90a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801f7c8:	42b9      	cmp	r1, r7
 801f7ca:	f2c0 809e 	blt.w	801f90a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801f7ce:	3301      	adds	r3, #1
 801f7d0:	f100 809b 	bmi.w	801f90a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801f7d4:	429a      	cmp	r2, r3
 801f7d6:	f2c0 8098 	blt.w	801f90a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801f7da:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801f7de:	f1bb 0f00 	cmp.w	fp, #0
 801f7e2:	f340 80bf 	ble.w	801f964 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f7e6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801f7e8:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801f7ea:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f7ec:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f7f0:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801f7f4:	1420      	asrs	r0, r4, #16
 801f7f6:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801f7f8:	ea4f 4723 	mov.w	r7, r3, asr #16
 801f7fc:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801f800:	6892      	ldr	r2, [r2, #8]
 801f802:	f100 8103 	bmi.w	801fa0c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801f806:	f102 3eff 	add.w	lr, r2, #4294967295
 801f80a:	4570      	cmp	r0, lr
 801f80c:	f280 80fe 	bge.w	801fa0c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801f810:	2f00      	cmp	r7, #0
 801f812:	f2c0 80fb 	blt.w	801fa0c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801f816:	f10c 3eff 	add.w	lr, ip, #4294967295
 801f81a:	4577      	cmp	r7, lr
 801f81c:	f280 80f6 	bge.w	801fa0c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801f820:	b212      	sxth	r2, r2
 801f822:	fb07 0002 	mla	r0, r7, r2, r0
 801f826:	9f08      	ldr	r7, [sp, #32]
 801f828:	f817 8000 	ldrb.w	r8, [r7, r0]
 801f82c:	eb07 0e00 	add.w	lr, r7, r0
 801f830:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f834:	eb05 0c08 	add.w	ip, r5, r8
 801f838:	2b00      	cmp	r3, #0
 801f83a:	f000 80d8 	beq.w	801f9ee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801f83e:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801f842:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f846:	442f      	add	r7, r5
 801f848:	2900      	cmp	r1, #0
 801f84a:	f000 80d9 	beq.w	801fa00 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801f84e:	eb0e 0002 	add.w	r0, lr, r2
 801f852:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801f856:	7840      	ldrb	r0, [r0, #1]
 801f858:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f85c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f860:	442a      	add	r2, r5
 801f862:	4428      	add	r0, r5
 801f864:	b29b      	uxth	r3, r3
 801f866:	f815 a008 	ldrb.w	sl, [r5, r8]
 801f86a:	b289      	uxth	r1, r1
 801f86c:	f897 8000 	ldrb.w	r8, [r7]
 801f870:	fb03 f901 	mul.w	r9, r3, r1
 801f874:	011b      	lsls	r3, r3, #4
 801f876:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f87a:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801f87e:	eba3 0309 	sub.w	r3, r3, r9
 801f882:	b289      	uxth	r1, r1
 801f884:	b29b      	uxth	r3, r3
 801f886:	ebae 0e01 	sub.w	lr, lr, r1
 801f88a:	fb03 f808 	mul.w	r8, r3, r8
 801f88e:	fa1f fe8e 	uxth.w	lr, lr
 801f892:	fb0e 880a 	mla	r8, lr, sl, r8
 801f896:	f892 a000 	ldrb.w	sl, [r2]
 801f89a:	fb01 880a 	mla	r8, r1, sl, r8
 801f89e:	f890 a000 	ldrb.w	sl, [r0]
 801f8a2:	fb09 880a 	mla	r8, r9, sl, r8
 801f8a6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f8aa:	f886 8000 	strb.w	r8, [r6]
 801f8ae:	f897 8001 	ldrb.w	r8, [r7, #1]
 801f8b2:	f89c a001 	ldrb.w	sl, [ip, #1]
 801f8b6:	fb03 f808 	mul.w	r8, r3, r8
 801f8ba:	fb0e 880a 	mla	r8, lr, sl, r8
 801f8be:	f892 a001 	ldrb.w	sl, [r2, #1]
 801f8c2:	fb01 880a 	mla	r8, r1, sl, r8
 801f8c6:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f8ca:	fb09 880a 	mla	r8, r9, sl, r8
 801f8ce:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f8d2:	f886 8001 	strb.w	r8, [r6, #1]
 801f8d6:	78bf      	ldrb	r7, [r7, #2]
 801f8d8:	f89c c002 	ldrb.w	ip, [ip, #2]
 801f8dc:	437b      	muls	r3, r7
 801f8de:	7892      	ldrb	r2, [r2, #2]
 801f8e0:	fb0e 330c 	mla	r3, lr, ip, r3
 801f8e4:	fb01 3102 	mla	r1, r1, r2, r3
 801f8e8:	7882      	ldrb	r2, [r0, #2]
 801f8ea:	fb09 1902 	mla	r9, r9, r2, r1
 801f8ee:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f8f2:	f886 9002 	strb.w	r9, [r6, #2]
 801f8f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f8f8:	3603      	adds	r6, #3
 801f8fa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801f8fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f900:	441c      	add	r4, r3
 801f902:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f904:	4413      	add	r3, r2
 801f906:	9318      	str	r3, [sp, #96]	@ 0x60
 801f908:	e769      	b.n	801f7de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801f90a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f90c:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801f90e:	441c      	add	r4, r3
 801f910:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f912:	443b      	add	r3, r7
 801f914:	9318      	str	r3, [sp, #96]	@ 0x60
 801f916:	9b06      	ldr	r3, [sp, #24]
 801f918:	3b01      	subs	r3, #1
 801f91a:	9306      	str	r3, [sp, #24]
 801f91c:	9b07      	ldr	r3, [sp, #28]
 801f91e:	3303      	adds	r3, #3
 801f920:	9307      	str	r3, [sp, #28]
 801f922:	e73e      	b.n	801f7a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f924:	d026      	beq.n	801f974 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801f926:	9b06      	ldr	r3, [sp, #24]
 801f928:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801f92a:	3b01      	subs	r3, #1
 801f92c:	fb00 4003 	mla	r0, r0, r3, r4
 801f930:	1400      	asrs	r0, r0, #16
 801f932:	f53f af52 	bmi.w	801f7da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f936:	3901      	subs	r1, #1
 801f938:	4288      	cmp	r0, r1
 801f93a:	f6bf af4e 	bge.w	801f7da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f93e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801f940:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801f942:	fb01 0303 	mla	r3, r1, r3, r0
 801f946:	141b      	asrs	r3, r3, #16
 801f948:	f53f af47 	bmi.w	801f7da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f94c:	3a01      	subs	r2, #1
 801f94e:	4293      	cmp	r3, r2
 801f950:	f6bf af43 	bge.w	801f7da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f954:	9b07      	ldr	r3, [sp, #28]
 801f956:	f8dd a018 	ldr.w	sl, [sp, #24]
 801f95a:	f103 0803 	add.w	r8, r3, #3
 801f95e:	f1ba 0f00 	cmp.w	sl, #0
 801f962:	dc71      	bgt.n	801fa48 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801f964:	9b06      	ldr	r3, [sp, #24]
 801f966:	9a07      	ldr	r2, [sp, #28]
 801f968:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f96c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f970:	441a      	add	r2, r3
 801f972:	9207      	str	r2, [sp, #28]
 801f974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f976:	2b00      	cmp	r3, #0
 801f978:	f340 80f2 	ble.w	801fb60 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801f97c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f980:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f982:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f986:	eeb0 6a62 	vmov.f32	s12, s5
 801f98a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f98e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f992:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f996:	ee16 4a10 	vmov	r4, s12
 801f99a:	eeb0 6a43 	vmov.f32	s12, s6
 801f99e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f9a2:	ed8d 6a18 	vstr	s12, [sp, #96]	@ 0x60
 801f9a6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f9aa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f9ae:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f9b2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f9b6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f9ba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f9be:	ee12 2a90 	vmov	r2, s5
 801f9c2:	eef0 2a47 	vmov.f32	s5, s14
 801f9c6:	fb92 f3f3 	sdiv	r3, r2, r3
 801f9ca:	ee13 2a10 	vmov	r2, s6
 801f9ce:	9319      	str	r3, [sp, #100]	@ 0x64
 801f9d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f9d2:	eeb0 3a67 	vmov.f32	s6, s15
 801f9d6:	fb92 f3f3 	sdiv	r3, r2, r3
 801f9da:	931a      	str	r3, [sp, #104]	@ 0x68
 801f9dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f9de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f9e0:	3b01      	subs	r3, #1
 801f9e2:	9309      	str	r3, [sp, #36]	@ 0x24
 801f9e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f9e6:	bf08      	it	eq
 801f9e8:	4613      	moveq	r3, r2
 801f9ea:	9306      	str	r3, [sp, #24]
 801f9ec:	e6cb      	b.n	801f786 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801f9ee:	b151      	cbz	r1, 801fa06 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801f9f0:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801f9f4:	4660      	mov	r0, ip
 801f9f6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f9fa:	442a      	add	r2, r5
 801f9fc:	4667      	mov	r7, ip
 801f9fe:	e731      	b.n	801f864 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801fa00:	4660      	mov	r0, ip
 801fa02:	4662      	mov	r2, ip
 801fa04:	e72e      	b.n	801f864 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801fa06:	4660      	mov	r0, ip
 801fa08:	4662      	mov	r2, ip
 801fa0a:	e7f7      	b.n	801f9fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801fa0c:	f110 0e01 	adds.w	lr, r0, #1
 801fa10:	f53f af71 	bmi.w	801f8f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801fa14:	4572      	cmp	r2, lr
 801fa16:	f6ff af6e 	blt.w	801f8f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801fa1a:	f117 0e01 	adds.w	lr, r7, #1
 801fa1e:	f53f af6a 	bmi.w	801f8f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801fa22:	45f4      	cmp	ip, lr
 801fa24:	f6ff af67 	blt.w	801f8f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801fa28:	b212      	sxth	r2, r2
 801fa2a:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801fa2e:	fa0f f38c 	sxth.w	r3, ip
 801fa32:	9200      	str	r2, [sp, #0]
 801fa34:	4631      	mov	r1, r6
 801fa36:	9a08      	ldr	r2, [sp, #32]
 801fa38:	9301      	str	r3, [sp, #4]
 801fa3a:	462b      	mov	r3, r5
 801fa3c:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801fa40:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801fa42:	f7ff fde9 	bl	801f618 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801fa46:	e756      	b.n	801f8f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801fa48:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801fa4a:	1426      	asrs	r6, r4, #16
 801fa4c:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801fa4e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801fa52:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801fa56:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801fa58:	1400      	asrs	r0, r0, #16
 801fa5a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801fa5e:	fb02 6000 	mla	r0, r2, r0, r6
 801fa62:	9e08      	ldr	r6, [sp, #32]
 801fa64:	f816 e000 	ldrb.w	lr, [r6, r0]
 801fa68:	eb06 0c00 	add.w	ip, r6, r0
 801fa6c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801fa70:	eb05 070e 	add.w	r7, r5, lr
 801fa74:	2b00      	cmp	r3, #0
 801fa76:	d064      	beq.n	801fb42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801fa78:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801fa7c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fa80:	442e      	add	r6, r5
 801fa82:	2900      	cmp	r1, #0
 801fa84:	d066      	beq.n	801fb54 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 801fa86:	eb0c 0002 	add.w	r0, ip, r2
 801fa8a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801fa8e:	7840      	ldrb	r0, [r0, #1]
 801fa90:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fa94:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fa98:	442a      	add	r2, r5
 801fa9a:	4428      	add	r0, r5
 801fa9c:	b29b      	uxth	r3, r3
 801fa9e:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801faa2:	b289      	uxth	r1, r1
 801faa4:	f896 e000 	ldrb.w	lr, [r6]
 801faa8:	f108 0803 	add.w	r8, r8, #3
 801faac:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fab0:	fb03 f901 	mul.w	r9, r3, r1
 801fab4:	011b      	lsls	r3, r3, #4
 801fab6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801faba:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801fabe:	eba3 0309 	sub.w	r3, r3, r9
 801fac2:	b289      	uxth	r1, r1
 801fac4:	b29b      	uxth	r3, r3
 801fac6:	ebac 0c01 	sub.w	ip, ip, r1
 801faca:	fb03 fe0e 	mul.w	lr, r3, lr
 801face:	fa1f fc8c 	uxth.w	ip, ip
 801fad2:	fb0c ee0b 	mla	lr, ip, fp, lr
 801fad6:	f892 b000 	ldrb.w	fp, [r2]
 801fada:	fb01 ee0b 	mla	lr, r1, fp, lr
 801fade:	f890 b000 	ldrb.w	fp, [r0]
 801fae2:	fb09 ee0b 	mla	lr, r9, fp, lr
 801fae6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801faea:	f808 ec06 	strb.w	lr, [r8, #-6]
 801faee:	f896 e001 	ldrb.w	lr, [r6, #1]
 801faf2:	f897 b001 	ldrb.w	fp, [r7, #1]
 801faf6:	fb03 fe0e 	mul.w	lr, r3, lr
 801fafa:	fb0c ee0b 	mla	lr, ip, fp, lr
 801fafe:	f892 b001 	ldrb.w	fp, [r2, #1]
 801fb02:	fb01 ee0b 	mla	lr, r1, fp, lr
 801fb06:	f890 b001 	ldrb.w	fp, [r0, #1]
 801fb0a:	fb09 ee0b 	mla	lr, r9, fp, lr
 801fb0e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fb12:	f808 ec05 	strb.w	lr, [r8, #-5]
 801fb16:	78b6      	ldrb	r6, [r6, #2]
 801fb18:	78bf      	ldrb	r7, [r7, #2]
 801fb1a:	4373      	muls	r3, r6
 801fb1c:	7896      	ldrb	r6, [r2, #2]
 801fb1e:	7882      	ldrb	r2, [r0, #2]
 801fb20:	fb0c 3307 	mla	r3, ip, r7, r3
 801fb24:	fb01 3306 	mla	r3, r1, r6, r3
 801fb28:	fb09 3902 	mla	r9, r9, r2, r3
 801fb2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fb2e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801fb30:	441c      	add	r4, r3
 801fb32:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801fb34:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fb38:	4413      	add	r3, r2
 801fb3a:	f808 9c04 	strb.w	r9, [r8, #-4]
 801fb3e:	9318      	str	r3, [sp, #96]	@ 0x60
 801fb40:	e70d      	b.n	801f95e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801fb42:	b151      	cbz	r1, 801fb5a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801fb44:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801fb48:	4638      	mov	r0, r7
 801fb4a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fb4e:	442a      	add	r2, r5
 801fb50:	463e      	mov	r6, r7
 801fb52:	e7a3      	b.n	801fa9c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801fb54:	4638      	mov	r0, r7
 801fb56:	463a      	mov	r2, r7
 801fb58:	e7a0      	b.n	801fa9c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801fb5a:	4638      	mov	r0, r7
 801fb5c:	463a      	mov	r2, r7
 801fb5e:	e7f7      	b.n	801fb50 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801fb60:	b00d      	add	sp, #52	@ 0x34
 801fb62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fb66 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801fb66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb6a:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801fb6e:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801fb72:	2d00      	cmp	r5, #0
 801fb74:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801fb78:	fb05 700c 	mla	r0, r5, ip, r7
 801fb7c:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801fb80:	f89d e044 	ldrb.w	lr, [sp, #68]	@ 0x44
 801fb84:	eb02 0800 	add.w	r8, r2, r0
 801fb88:	f2c0 8118 	blt.w	801fdbc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801fb8c:	45a9      	cmp	r9, r5
 801fb8e:	f340 8115 	ble.w	801fdbc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801fb92:	2f00      	cmp	r7, #0
 801fb94:	f2c0 8110 	blt.w	801fdb8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801fb98:	45bc      	cmp	ip, r7
 801fb9a:	f340 810d 	ble.w	801fdb8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801fb9e:	5c12      	ldrb	r2, [r2, r0]
 801fba0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801fba4:	1c7a      	adds	r2, r7, #1
 801fba6:	f100 810c 	bmi.w	801fdc2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801fbaa:	4594      	cmp	ip, r2
 801fbac:	f340 8109 	ble.w	801fdc2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801fbb0:	2c00      	cmp	r4, #0
 801fbb2:	f000 8108 	beq.w	801fdc6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 801fbb6:	f898 2001 	ldrb.w	r2, [r8, #1]
 801fbba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801fbbe:	3501      	adds	r5, #1
 801fbc0:	f100 8105 	bmi.w	801fdce <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801fbc4:	45a9      	cmp	r9, r5
 801fbc6:	f340 8102 	ble.w	801fdce <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801fbca:	f1be 0f00 	cmp.w	lr, #0
 801fbce:	f000 8101 	beq.w	801fdd4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 801fbd2:	2f00      	cmp	r7, #0
 801fbd4:	f2c0 80f9 	blt.w	801fdca <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801fbd8:	45bc      	cmp	ip, r7
 801fbda:	f340 80f6 	ble.w	801fdca <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801fbde:	f818 200c 	ldrb.w	r2, [r8, ip]
 801fbe2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801fbe6:	3701      	adds	r7, #1
 801fbe8:	f100 80f7 	bmi.w	801fdda <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801fbec:	45bc      	cmp	ip, r7
 801fbee:	f340 80f4 	ble.w	801fdda <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801fbf2:	2c00      	cmp	r4, #0
 801fbf4:	f000 80f3 	beq.w	801fdde <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 801fbf8:	44c4      	add	ip, r8
 801fbfa:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801fbfe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801fc02:	fa1f fc84 	uxth.w	ip, r4
 801fc06:	fa1f f48e 	uxth.w	r4, lr
 801fc0a:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801fc0e:	fb04 fe0c 	mul.w	lr, r4, ip
 801fc12:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801fc16:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801fc1a:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801fc1e:	ebac 070e 	sub.w	r7, ip, lr
 801fc22:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801fc26:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801fc2a:	b2a4      	uxth	r4, r4
 801fc2c:	b2bf      	uxth	r7, r7
 801fc2e:	1b1b      	subs	r3, r3, r4
 801fc30:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801fc34:	fb07 fc0a 	mul.w	ip, r7, sl
 801fc38:	b29b      	uxth	r3, r3
 801fc3a:	fb03 cc0b 	mla	ip, r3, fp, ip
 801fc3e:	9300      	str	r3, [sp, #0]
 801fc40:	fb04 cc09 	mla	ip, r4, r9, ip
 801fc44:	fb0e cc08 	mla	ip, lr, r8, ip
 801fc48:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801fc4c:	9301      	str	r3, [sp, #4]
 801fc4e:	2b00      	cmp	r3, #0
 801fc50:	f000 80af 	beq.w	801fdb2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 801fc54:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801fc58:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801fc5c:	fb0b fc0c 	mul.w	ip, fp, ip
 801fc60:	fb0b f606 	mul.w	r6, fp, r6
 801fc64:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801fc68:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801fc6c:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801fc70:	44dc      	add	ip, fp
 801fc72:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801fc76:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801fc7a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fc7e:	fb0a fb0b 	mul.w	fp, sl, fp
 801fc82:	fb0a fa00 	mul.w	sl, sl, r0
 801fc86:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801fc8a:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801fc8e:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801fc92:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801fc96:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801fc9a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801fc9e:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801fca2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fca6:	0a36      	lsrs	r6, r6, #8
 801fca8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fcac:	44dc      	add	ip, fp
 801fcae:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801fcb2:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801fcb6:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801fcba:	fb09 fb0b 	mul.w	fp, r9, fp
 801fcbe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fcc2:	fb09 f905 	mul.w	r9, r9, r5
 801fcc6:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801fcca:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fcce:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801fcd2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801fcd6:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801fcda:	fb0c fc07 	mul.w	ip, ip, r7
 801fcde:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801fce2:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801fce6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801fcea:	4458      	add	r0, fp
 801fcec:	fb08 f505 	mul.w	r5, r8, r5
 801fcf0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fcf4:	fb08 f802 	mul.w	r8, r8, r2
 801fcf8:	0a00      	lsrs	r0, r0, #8
 801fcfa:	0a2a      	lsrs	r2, r5, #8
 801fcfc:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801fd00:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801fd04:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801fd08:	4415      	add	r5, r2
 801fd0a:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801fd0e:	0a2d      	lsrs	r5, r5, #8
 801fd10:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801fd14:	9a00      	ldr	r2, [sp, #0]
 801fd16:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801fd1a:	fb03 cc02 	mla	ip, r3, r2, ip
 801fd1e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801fd22:	9b01      	ldr	r3, [sp, #4]
 801fd24:	fb05 c50e 	mla	r5, r5, lr, ip
 801fd28:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801fd2c:	fb00 5004 	mla	r0, r0, r4, r5
 801fd30:	0a00      	lsrs	r0, r0, #8
 801fd32:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801fd36:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801fd3a:	4378      	muls	r0, r7
 801fd3c:	fb02 0006 	mla	r0, r2, r6, r0
 801fd40:	fb0e 0e08 	mla	lr, lr, r8, r0
 801fd44:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801fd48:	fb04 e000 	mla	r0, r4, r0, lr
 801fd4c:	0a00      	lsrs	r0, r0, #8
 801fd4e:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801fd52:	4328      	orrs	r0, r5
 801fd54:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 801fd58:	b2ad      	uxth	r5, r5
 801fd5a:	b2c4      	uxtb	r4, r0
 801fd5c:	436b      	muls	r3, r5
 801fd5e:	fb14 f405 	smulbb	r4, r4, r5
 801fd62:	1c5a      	adds	r2, r3, #1
 801fd64:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801fd68:	780b      	ldrb	r3, [r1, #0]
 801fd6a:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801fd6e:	b2d2      	uxtb	r2, r2
 801fd70:	fb03 4302 	mla	r3, r3, r2, r4
 801fd74:	b29b      	uxth	r3, r3
 801fd76:	1c5c      	adds	r4, r3, #1
 801fd78:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801fd7c:	784c      	ldrb	r4, [r1, #1]
 801fd7e:	fb14 f402 	smulbb	r4, r4, r2
 801fd82:	121b      	asrs	r3, r3, #8
 801fd84:	700b      	strb	r3, [r1, #0]
 801fd86:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801fd8a:	fb03 4305 	mla	r3, r3, r5, r4
 801fd8e:	b29b      	uxth	r3, r3
 801fd90:	1c5c      	adds	r4, r3, #1
 801fd92:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801fd96:	0c04      	lsrs	r4, r0, #16
 801fd98:	7888      	ldrb	r0, [r1, #2]
 801fd9a:	121b      	asrs	r3, r3, #8
 801fd9c:	fb10 f002 	smulbb	r0, r0, r2
 801fda0:	704b      	strb	r3, [r1, #1]
 801fda2:	fb04 0005 	mla	r0, r4, r5, r0
 801fda6:	b280      	uxth	r0, r0
 801fda8:	1c43      	adds	r3, r0, #1
 801fdaa:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801fdae:	1200      	asrs	r0, r0, #8
 801fdb0:	7088      	strb	r0, [r1, #2]
 801fdb2:	b003      	add	sp, #12
 801fdb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fdb8:	2600      	movs	r6, #0
 801fdba:	e6f3      	b.n	801fba4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 801fdbc:	2000      	movs	r0, #0
 801fdbe:	4606      	mov	r6, r0
 801fdc0:	e6fd      	b.n	801fbbe <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801fdc2:	2000      	movs	r0, #0
 801fdc4:	e6fb      	b.n	801fbbe <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801fdc6:	4620      	mov	r0, r4
 801fdc8:	e6f9      	b.n	801fbbe <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801fdca:	2500      	movs	r5, #0
 801fdcc:	e70b      	b.n	801fbe6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 801fdce:	2200      	movs	r2, #0
 801fdd0:	4615      	mov	r5, r2
 801fdd2:	e716      	b.n	801fc02 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801fdd4:	4672      	mov	r2, lr
 801fdd6:	4675      	mov	r5, lr
 801fdd8:	e713      	b.n	801fc02 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801fdda:	2200      	movs	r2, #0
 801fddc:	e711      	b.n	801fc02 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801fdde:	4622      	mov	r2, r4
 801fde0:	e70f      	b.n	801fc02 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0801fde2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fde2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fde6:	b09f      	sub	sp, #124	@ 0x7c
 801fde8:	921b      	str	r2, [sp, #108]	@ 0x6c
 801fdea:	9309      	str	r3, [sp, #36]	@ 0x24
 801fdec:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801fdee:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801fdf2:	901d      	str	r0, [sp, #116]	@ 0x74
 801fdf4:	931c      	str	r3, [sp, #112]	@ 0x70
 801fdf6:	6850      	ldr	r0, [r2, #4]
 801fdf8:	9119      	str	r1, [sp, #100]	@ 0x64
 801fdfa:	6812      	ldr	r2, [r2, #0]
 801fdfc:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801fdfe:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801fe02:	fb00 1303 	mla	r3, r0, r3, r1
 801fe06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fe0a:	18d3      	adds	r3, r2, r3
 801fe0c:	930c      	str	r3, [sp, #48]	@ 0x30
 801fe0e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801fe10:	681b      	ldr	r3, [r3, #0]
 801fe12:	9312      	str	r3, [sp, #72]	@ 0x48
 801fe14:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801fe16:	685e      	ldr	r6, [r3, #4]
 801fe18:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 801fe1c:	3604      	adds	r6, #4
 801fe1e:	930d      	str	r3, [sp, #52]	@ 0x34
 801fe20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fe22:	2b00      	cmp	r3, #0
 801fe24:	dc03      	bgt.n	801fe2e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801fe26:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801fe28:	2b00      	cmp	r3, #0
 801fe2a:	f340 8378 	ble.w	802051e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801fe2e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801fe30:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fe34:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fe38:	1e48      	subs	r0, r1, #1
 801fe3a:	1e57      	subs	r7, r2, #1
 801fe3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fe3e:	2b00      	cmp	r3, #0
 801fe40:	f340 818c 	ble.w	802015c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801fe44:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801fe46:	142b      	asrs	r3, r5, #16
 801fe48:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801fe4c:	d406      	bmi.n	801fe5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801fe4e:	4584      	cmp	ip, r0
 801fe50:	da04      	bge.n	801fe5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801fe52:	2b00      	cmp	r3, #0
 801fe54:	db02      	blt.n	801fe5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801fe56:	42bb      	cmp	r3, r7
 801fe58:	f2c0 8181 	blt.w	802015e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801fe5c:	f11c 0c01 	adds.w	ip, ip, #1
 801fe60:	f100 816f 	bmi.w	8020142 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801fe64:	4561      	cmp	r1, ip
 801fe66:	f2c0 816c 	blt.w	8020142 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801fe6a:	3301      	adds	r3, #1
 801fe6c:	f100 8169 	bmi.w	8020142 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801fe70:	429a      	cmp	r2, r3
 801fe72:	f2c0 8166 	blt.w	8020142 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801fe76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fe78:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801fe7a:	931a      	str	r3, [sp, #104]	@ 0x68
 801fe7c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801fe7e:	2b00      	cmp	r3, #0
 801fe80:	f340 818c 	ble.w	802019c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801fe84:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801fe86:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801fe8a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801fe8e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801fe92:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801fe94:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801fe98:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801fe9a:	141b      	asrs	r3, r3, #16
 801fe9c:	f100 81d0 	bmi.w	8020240 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801fea0:	f100 38ff 	add.w	r8, r0, #4294967295
 801fea4:	4543      	cmp	r3, r8
 801fea6:	f280 81cb 	bge.w	8020240 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801feaa:	f1bc 0f00 	cmp.w	ip, #0
 801feae:	f2c0 81c7 	blt.w	8020240 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801feb2:	f10e 38ff 	add.w	r8, lr, #4294967295
 801feb6:	45c4      	cmp	ip, r8
 801feb8:	f280 81c2 	bge.w	8020240 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801febc:	b200      	sxth	r0, r0
 801febe:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801fec0:	fb0c 3300 	mla	r3, ip, r0, r3
 801fec4:	eb04 0803 	add.w	r8, r4, r3
 801fec8:	5ce3      	ldrb	r3, [r4, r3]
 801feca:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801fece:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801fed2:	2a00      	cmp	r2, #0
 801fed4:	f000 81a9 	beq.w	802022a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801fed8:	f898 c001 	ldrb.w	ip, [r8, #1]
 801fedc:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801fee0:	940e      	str	r4, [sp, #56]	@ 0x38
 801fee2:	0e24      	lsrs	r4, r4, #24
 801fee4:	9415      	str	r4, [sp, #84]	@ 0x54
 801fee6:	b179      	cbz	r1, 801ff08 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801fee8:	eb08 0c00 	add.w	ip, r8, r0
 801feec:	f818 0000 	ldrb.w	r0, [r8, r0]
 801fef0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801fef4:	900a      	str	r0, [sp, #40]	@ 0x28
 801fef6:	0e00      	lsrs	r0, r0, #24
 801fef8:	9013      	str	r0, [sp, #76]	@ 0x4c
 801fefa:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801fefe:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801ff02:	900f      	str	r0, [sp, #60]	@ 0x3c
 801ff04:	0e00      	lsrs	r0, r0, #24
 801ff06:	9016      	str	r0, [sp, #88]	@ 0x58
 801ff08:	b292      	uxth	r2, r2
 801ff0a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801ff0c:	b289      	uxth	r1, r1
 801ff0e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ff10:	fb02 f901 	mul.w	r9, r2, r1
 801ff14:	0112      	lsls	r2, r2, #4
 801ff16:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ff1a:	eba2 0809 	sub.w	r8, r2, r9
 801ff1e:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801ff22:	b289      	uxth	r1, r1
 801ff24:	fa1f f888 	uxth.w	r8, r8
 801ff28:	1a52      	subs	r2, r2, r1
 801ff2a:	fb08 f000 	mul.w	r0, r8, r0
 801ff2e:	b292      	uxth	r2, r2
 801ff30:	fb02 000e 	mla	r0, r2, lr, r0
 801ff34:	fb01 0004 	mla	r0, r1, r4, r0
 801ff38:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801ff3a:	fb09 0004 	mla	r0, r9, r4, r0
 801ff3e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801ff42:	2800      	cmp	r0, #0
 801ff44:	f000 80f2 	beq.w	802012c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801ff48:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801ff4c:	d01b      	beq.n	801ff86 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801ff4e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801ff52:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801ff56:	fb0e fa0a 	mul.w	sl, lr, sl
 801ff5a:	fb0e fe03 	mul.w	lr, lr, r3
 801ff5e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801ff62:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801ff66:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801ff6a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801ff6e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801ff72:	4453      	add	r3, sl
 801ff74:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ff78:	0a1b      	lsrs	r3, r3, #8
 801ff7a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801ff7e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801ff82:	ea43 030c 	orr.w	r3, r3, ip
 801ff86:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801ff88:	2cff      	cmp	r4, #255	@ 0xff
 801ff8a:	d021      	beq.n	801ffd0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801ff8c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801ff8e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801ff92:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801ff94:	fb04 fb0b 	mul.w	fp, r4, fp
 801ff98:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801ff9a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801ff9e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801ffa0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ffa4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801ffa8:	fb04 fa0a 	mul.w	sl, r4, sl
 801ffac:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ffb0:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801ffb4:	44de      	add	lr, fp
 801ffb6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ffba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ffbe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ffc2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ffc6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ffca:	ea4e 040a 	orr.w	r4, lr, sl
 801ffce:	940e      	str	r4, [sp, #56]	@ 0x38
 801ffd0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ffd2:	2cff      	cmp	r4, #255	@ 0xff
 801ffd4:	d021      	beq.n	802001a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801ffd6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801ffd8:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801ffdc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ffde:	fb04 fb0b 	mul.w	fp, r4, fp
 801ffe2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801ffe4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801ffe8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ffea:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ffee:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801fff2:	fb04 fa0a 	mul.w	sl, r4, sl
 801fff6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fffa:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801fffe:	44de      	add	lr, fp
 8020000:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020004:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020008:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802000c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020010:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020014:	ea4e 040a 	orr.w	r4, lr, sl
 8020018:	940a      	str	r4, [sp, #40]	@ 0x28
 802001a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802001c:	2cff      	cmp	r4, #255	@ 0xff
 802001e:	d021      	beq.n	8020064 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8020020:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020022:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8020026:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8020028:	fb04 fb0b 	mul.w	fp, r4, fp
 802002c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802002e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020032:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8020034:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020038:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802003c:	fb04 fa0a 	mul.w	sl, r4, sl
 8020040:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020044:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8020048:	44de      	add	lr, fp
 802004a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802004e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020052:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020056:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802005a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802005e:	ea4e 040a 	orr.w	r4, lr, sl
 8020062:	940f      	str	r4, [sp, #60]	@ 0x3c
 8020064:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8020066:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 802006a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802006e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020072:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8020074:	fb08 fc0c 	mul.w	ip, r8, ip
 8020078:	fb02 cc0e 	mla	ip, r2, lr, ip
 802007c:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8020080:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020082:	fb01 cc0e 	mla	ip, r1, lr, ip
 8020086:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802008a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802008c:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020090:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8020094:	fb08 f80e 	mul.w	r8, r8, lr
 8020098:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802009c:	fb02 8303 	mla	r3, r2, r3, r8
 80200a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80200a2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80200a6:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80200aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80200ac:	fb01 330a 	mla	r3, r1, sl, r3
 80200b0:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 80200b4:	fb09 3901 	mla	r9, r9, r1, r3
 80200b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80200ba:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80200bc:	4343      	muls	r3, r0
 80200be:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80200c2:	1c58      	adds	r0, r3, #1
 80200c4:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 80200c8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80200cc:	ea4c 0c09 	orr.w	ip, ip, r9
 80200d0:	783b      	ldrb	r3, [r7, #0]
 80200d2:	fa5f f28c 	uxtb.w	r2, ip
 80200d6:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80200da:	fb12 f201 	smulbb	r2, r2, r1
 80200de:	b2c0      	uxtb	r0, r0
 80200e0:	fb03 2300 	mla	r3, r3, r0, r2
 80200e4:	b29b      	uxth	r3, r3
 80200e6:	1c5a      	adds	r2, r3, #1
 80200e8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80200ec:	787a      	ldrb	r2, [r7, #1]
 80200ee:	fb12 f200 	smulbb	r2, r2, r0
 80200f2:	121b      	asrs	r3, r3, #8
 80200f4:	703b      	strb	r3, [r7, #0]
 80200f6:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80200fa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80200fe:	fb03 2301 	mla	r3, r3, r1, r2
 8020102:	b29b      	uxth	r3, r3
 8020104:	1c5a      	adds	r2, r3, #1
 8020106:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802010a:	121b      	asrs	r3, r3, #8
 802010c:	707b      	strb	r3, [r7, #1]
 802010e:	78bb      	ldrb	r3, [r7, #2]
 8020110:	fb13 f000 	smulbb	r0, r3, r0
 8020114:	fb0c 0c01 	mla	ip, ip, r1, r0
 8020118:	fa1f fc8c 	uxth.w	ip, ip
 802011c:	f10c 0301 	add.w	r3, ip, #1
 8020120:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8020124:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020128:	f887 c002 	strb.w	ip, [r7, #2]
 802012c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 802012e:	3703      	adds	r7, #3
 8020130:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8020132:	441a      	add	r2, r3
 8020134:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8020136:	441d      	add	r5, r3
 8020138:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 802013a:	9229      	str	r2, [sp, #164]	@ 0xa4
 802013c:	3b01      	subs	r3, #1
 802013e:	931a      	str	r3, [sp, #104]	@ 0x68
 8020140:	e69c      	b.n	801fe7c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8020142:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8020144:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8020146:	441c      	add	r4, r3
 8020148:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802014a:	441d      	add	r5, r3
 802014c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802014e:	9429      	str	r4, [sp, #164]	@ 0xa4
 8020150:	3b01      	subs	r3, #1
 8020152:	9309      	str	r3, [sp, #36]	@ 0x24
 8020154:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020156:	3303      	adds	r3, #3
 8020158:	930c      	str	r3, [sp, #48]	@ 0x30
 802015a:	e66f      	b.n	801fe3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 802015c:	d026      	beq.n	80201ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 802015e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020160:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8020162:	3b01      	subs	r3, #1
 8020164:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8020166:	fb00 4003 	mla	r0, r0, r3, r4
 802016a:	1400      	asrs	r0, r0, #16
 802016c:	f53f ae83 	bmi.w	801fe76 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020170:	3901      	subs	r1, #1
 8020172:	4288      	cmp	r0, r1
 8020174:	f6bf ae7f 	bge.w	801fe76 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020178:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 802017a:	fb01 5303 	mla	r3, r1, r3, r5
 802017e:	141b      	asrs	r3, r3, #16
 8020180:	f53f ae79 	bmi.w	801fe76 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020184:	3a01      	subs	r2, #1
 8020186:	4293      	cmp	r3, r2
 8020188:	f6bf ae75 	bge.w	801fe76 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802018c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802018e:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8020192:	f103 0e03 	add.w	lr, r3, #3
 8020196:	f1bb 0f00 	cmp.w	fp, #0
 802019a:	dc71      	bgt.n	8020280 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 802019c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802019e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80201a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80201a4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80201a8:	4423      	add	r3, r4
 80201aa:	930c      	str	r3, [sp, #48]	@ 0x30
 80201ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80201ae:	2b00      	cmp	r3, #0
 80201b0:	f340 81b5 	ble.w	802051e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 80201b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80201b8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80201ba:	ee30 0a04 	vadd.f32	s0, s0, s8
 80201be:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80201c2:	eef0 6a62 	vmov.f32	s13, s5
 80201c6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80201ca:	ee31 1a05 	vadd.f32	s2, s2, s10
 80201ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80201d2:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 80201d6:	eef0 6a43 	vmov.f32	s13, s6
 80201da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80201de:	ee16 5a90 	vmov	r5, s13
 80201e2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80201e6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80201ea:	ee77 2a62 	vsub.f32	s5, s14, s5
 80201ee:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80201f2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80201f6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80201fa:	ee12 2a90 	vmov	r2, s5
 80201fe:	eef0 2a47 	vmov.f32	s5, s14
 8020202:	fb92 f3f3 	sdiv	r3, r2, r3
 8020206:	ee13 2a10 	vmov	r2, s6
 802020a:	932b      	str	r3, [sp, #172]	@ 0xac
 802020c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802020e:	eeb0 3a67 	vmov.f32	s6, s15
 8020212:	fb92 f3f3 	sdiv	r3, r2, r3
 8020216:	932c      	str	r3, [sp, #176]	@ 0xb0
 8020218:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802021a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802021c:	3b01      	subs	r3, #1
 802021e:	9319      	str	r3, [sp, #100]	@ 0x64
 8020220:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020222:	bf08      	it	eq
 8020224:	4613      	moveq	r3, r2
 8020226:	9309      	str	r3, [sp, #36]	@ 0x24
 8020228:	e5fa      	b.n	801fe20 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 802022a:	2900      	cmp	r1, #0
 802022c:	f43f ae6c 	beq.w	801ff08 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8020230:	f818 0000 	ldrb.w	r0, [r8, r0]
 8020234:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020238:	900a      	str	r0, [sp, #40]	@ 0x28
 802023a:	0e00      	lsrs	r0, r0, #24
 802023c:	9013      	str	r0, [sp, #76]	@ 0x4c
 802023e:	e663      	b.n	801ff08 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8020240:	f113 0801 	adds.w	r8, r3, #1
 8020244:	f53f af72 	bmi.w	802012c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8020248:	4540      	cmp	r0, r8
 802024a:	f6ff af6f 	blt.w	802012c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 802024e:	f11c 0801 	adds.w	r8, ip, #1
 8020252:	f53f af6b 	bmi.w	802012c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8020256:	45c6      	cmp	lr, r8
 8020258:	f6ff af68 	blt.w	802012c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 802025c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 802025e:	b200      	sxth	r0, r0
 8020260:	9302      	str	r3, [sp, #8]
 8020262:	fa0f f38e 	sxth.w	r3, lr
 8020266:	9000      	str	r0, [sp, #0]
 8020268:	9301      	str	r3, [sp, #4]
 802026a:	4633      	mov	r3, r6
 802026c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 802026e:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8020272:	e9cd c203 	strd	ip, r2, [sp, #12]
 8020276:	4639      	mov	r1, r7
 8020278:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802027a:	f7ff fc74 	bl	801fb66 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 802027e:	e755      	b.n	802012c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8020280:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8020282:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020286:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8020288:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802028c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802028e:	1427      	asrs	r7, r4, #16
 8020290:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020292:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020296:	142b      	asrs	r3, r5, #16
 8020298:	fb01 7303 	mla	r3, r1, r3, r7
 802029c:	18e7      	adds	r7, r4, r3
 802029e:	5ce3      	ldrb	r3, [r4, r3]
 80202a0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80202a4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80202a8:	2a00      	cmp	r2, #0
 80202aa:	f000 812e 	beq.w	802050a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 80202ae:	f897 8001 	ldrb.w	r8, [r7, #1]
 80202b2:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 80202b6:	9410      	str	r4, [sp, #64]	@ 0x40
 80202b8:	0e24      	lsrs	r4, r4, #24
 80202ba:	9417      	str	r4, [sp, #92]	@ 0x5c
 80202bc:	b170      	cbz	r0, 80202dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 80202be:	eb07 0801 	add.w	r8, r7, r1
 80202c2:	5c79      	ldrb	r1, [r7, r1]
 80202c4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80202c8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80202ca:	0e09      	lsrs	r1, r1, #24
 80202cc:	9114      	str	r1, [sp, #80]	@ 0x50
 80202ce:	f898 1001 	ldrb.w	r1, [r8, #1]
 80202d2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80202d6:	9111      	str	r1, [sp, #68]	@ 0x44
 80202d8:	0e09      	lsrs	r1, r1, #24
 80202da:	9118      	str	r1, [sp, #96]	@ 0x60
 80202dc:	b292      	uxth	r2, r2
 80202de:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80202e0:	b280      	uxth	r0, r0
 80202e2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80202e4:	fb02 f900 	mul.w	r9, r2, r0
 80202e8:	0112      	lsls	r2, r2, #4
 80202ea:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80202ee:	eba2 0809 	sub.w	r8, r2, r9
 80202f2:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80202f6:	b280      	uxth	r0, r0
 80202f8:	fa1f f888 	uxth.w	r8, r8
 80202fc:	1a12      	subs	r2, r2, r0
 80202fe:	fb08 f101 	mul.w	r1, r8, r1
 8020302:	b292      	uxth	r2, r2
 8020304:	fb02 110c 	mla	r1, r2, ip, r1
 8020308:	fb00 1104 	mla	r1, r0, r4, r1
 802030c:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 802030e:	fb09 1104 	mla	r1, r9, r4, r1
 8020312:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020316:	2900      	cmp	r1, #0
 8020318:	f000 80ec 	beq.w	80204f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 802031c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8020320:	d019      	beq.n	8020356 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 8020322:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8020326:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802032a:	fb0c fa0a 	mul.w	sl, ip, sl
 802032e:	fb0c fc03 	mul.w	ip, ip, r3
 8020332:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020336:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802033a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802033e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020342:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020346:	4453      	add	r3, sl
 8020348:	0a3f      	lsrs	r7, r7, #8
 802034a:	0a1b      	lsrs	r3, r3, #8
 802034c:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8020350:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020354:	433b      	orrs	r3, r7
 8020356:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8020358:	2cff      	cmp	r4, #255	@ 0xff
 802035a:	d020      	beq.n	802039e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 802035c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802035e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8020362:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8020364:	4367      	muls	r7, r4
 8020366:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020368:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802036c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020370:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8020372:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8020376:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802037a:	fb04 fa0a 	mul.w	sl, r4, sl
 802037e:	44bc      	add	ip, r7
 8020380:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8020384:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020388:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802038c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020390:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020394:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020398:	ea4c 040a 	orr.w	r4, ip, sl
 802039c:	9410      	str	r4, [sp, #64]	@ 0x40
 802039e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80203a0:	2cff      	cmp	r4, #255	@ 0xff
 80203a2:	d020      	beq.n	80203e6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 80203a4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80203a6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80203aa:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80203ac:	4367      	muls	r7, r4
 80203ae:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80203b0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80203b4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80203b8:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80203ba:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80203be:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80203c2:	fb04 fa0a 	mul.w	sl, r4, sl
 80203c6:	44bc      	add	ip, r7
 80203c8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80203cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80203d0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80203d4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80203d8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80203dc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80203e0:	ea4c 040a 	orr.w	r4, ip, sl
 80203e4:	940b      	str	r4, [sp, #44]	@ 0x2c
 80203e6:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80203e8:	2cff      	cmp	r4, #255	@ 0xff
 80203ea:	d020      	beq.n	802042e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 80203ec:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80203ee:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80203f2:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80203f4:	4367      	muls	r7, r4
 80203f6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80203f8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80203fc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020400:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8020402:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8020406:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802040a:	fb04 fa0a 	mul.w	sl, r4, sl
 802040e:	44bc      	add	ip, r7
 8020410:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8020414:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020418:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802041c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020420:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020424:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020428:	ea4c 040a 	orr.w	r4, ip, sl
 802042c:	9411      	str	r4, [sp, #68]	@ 0x44
 802042e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020430:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8020434:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8020438:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802043c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802043e:	fb08 f707 	mul.w	r7, r8, r7
 8020442:	fb02 770c 	mla	r7, r2, ip, r7
 8020446:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802044a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802044c:	fb00 770c 	mla	r7, r0, ip, r7
 8020450:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020454:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020456:	fb09 770c 	mla	r7, r9, ip, r7
 802045a:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 802045e:	fb08 f80c 	mul.w	r8, r8, ip
 8020462:	0a3f      	lsrs	r7, r7, #8
 8020464:	fb02 8303 	mla	r3, r2, r3, r8
 8020468:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802046a:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 802046e:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8020472:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020474:	fb00 330a 	mla	r3, r0, sl, r3
 8020478:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 802047c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802047e:	fb09 3c0c 	mla	ip, r9, ip, r3
 8020482:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020484:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020488:	434b      	muls	r3, r1
 802048a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802048e:	1c59      	adds	r1, r3, #1
 8020490:	ea47 070c 	orr.w	r7, r7, ip
 8020494:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020498:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 802049c:	b2fa      	uxtb	r2, r7
 802049e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80204a2:	fb12 f200 	smulbb	r2, r2, r0
 80204a6:	b2c9      	uxtb	r1, r1
 80204a8:	fb03 2301 	mla	r3, r3, r1, r2
 80204ac:	b29b      	uxth	r3, r3
 80204ae:	1c5a      	adds	r2, r3, #1
 80204b0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80204b4:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80204b8:	fb12 f201 	smulbb	r2, r2, r1
 80204bc:	121b      	asrs	r3, r3, #8
 80204be:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80204c2:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80204c6:	0c3f      	lsrs	r7, r7, #16
 80204c8:	fb03 2300 	mla	r3, r3, r0, r2
 80204cc:	b29b      	uxth	r3, r3
 80204ce:	1c5a      	adds	r2, r3, #1
 80204d0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80204d4:	121b      	asrs	r3, r3, #8
 80204d6:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80204da:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80204de:	fb13 f101 	smulbb	r1, r3, r1
 80204e2:	fb07 1700 	mla	r7, r7, r0, r1
 80204e6:	b2bf      	uxth	r7, r7
 80204e8:	1c7b      	adds	r3, r7, #1
 80204ea:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80204ee:	123f      	asrs	r7, r7, #8
 80204f0:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80204f4:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80204f6:	f10e 0e03 	add.w	lr, lr, #3
 80204fa:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80204fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020500:	441a      	add	r2, r3
 8020502:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8020504:	9229      	str	r2, [sp, #164]	@ 0xa4
 8020506:	441d      	add	r5, r3
 8020508:	e645      	b.n	8020196 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 802050a:	2800      	cmp	r0, #0
 802050c:	f43f aee6 	beq.w	80202dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8020510:	5c79      	ldrb	r1, [r7, r1]
 8020512:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020516:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020518:	0e09      	lsrs	r1, r1, #24
 802051a:	9114      	str	r1, [sp, #80]	@ 0x50
 802051c:	e6de      	b.n	80202dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 802051e:	b01f      	add	sp, #124	@ 0x7c
 8020520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020524 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8020524:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020528:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 802052c:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 8020530:	2d00      	cmp	r5, #0
 8020532:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8020536:	fb05 700e 	mla	r0, r5, lr, r7
 802053a:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 802053e:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 8020542:	eb02 0800 	add.w	r8, r2, r0
 8020546:	f2c0 8105 	blt.w	8020754 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 802054a:	45a9      	cmp	r9, r5
 802054c:	f340 8102 	ble.w	8020754 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8020550:	2f00      	cmp	r7, #0
 8020552:	f2c0 80fd 	blt.w	8020750 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8020556:	45be      	cmp	lr, r7
 8020558:	f340 80fa 	ble.w	8020750 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 802055c:	5c12      	ldrb	r2, [r2, r0]
 802055e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8020562:	1c7a      	adds	r2, r7, #1
 8020564:	f100 80f9 	bmi.w	802075a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8020568:	4596      	cmp	lr, r2
 802056a:	f340 80f6 	ble.w	802075a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 802056e:	2c00      	cmp	r4, #0
 8020570:	f000 80f5 	beq.w	802075e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 8020574:	f898 2001 	ldrb.w	r2, [r8, #1]
 8020578:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 802057c:	3501      	adds	r5, #1
 802057e:	f100 80f2 	bmi.w	8020766 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8020582:	45a9      	cmp	r9, r5
 8020584:	f340 80ef 	ble.w	8020766 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8020588:	f1bc 0f00 	cmp.w	ip, #0
 802058c:	f000 80ee 	beq.w	802076c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 8020590:	2f00      	cmp	r7, #0
 8020592:	f2c0 80e6 	blt.w	8020762 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8020596:	45be      	cmp	lr, r7
 8020598:	f340 80e3 	ble.w	8020762 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 802059c:	f818 200e 	ldrb.w	r2, [r8, lr]
 80205a0:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80205a4:	3701      	adds	r7, #1
 80205a6:	f100 80e4 	bmi.w	8020772 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 80205aa:	45be      	cmp	lr, r7
 80205ac:	f340 80e1 	ble.w	8020772 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 80205b0:	2c00      	cmp	r4, #0
 80205b2:	f000 80e0 	beq.w	8020776 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 80205b6:	44c6      	add	lr, r8
 80205b8:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80205bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80205c0:	b2a3      	uxth	r3, r4
 80205c2:	fa1f fc8c 	uxth.w	ip, ip
 80205c6:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 80205ca:	fb0c fe03 	mul.w	lr, ip, r3
 80205ce:	011b      	lsls	r3, r3, #4
 80205d0:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 80205d4:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 80205d8:	eba3 070e 	sub.w	r7, r3, lr
 80205dc:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80205e0:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80205e4:	fa1f f48c 	uxth.w	r4, ip
 80205e8:	b2bf      	uxth	r7, r7
 80205ea:	1b1b      	subs	r3, r3, r4
 80205ec:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80205f0:	fb07 fc0a 	mul.w	ip, r7, sl
 80205f4:	b29b      	uxth	r3, r3
 80205f6:	fb03 cc0b 	mla	ip, r3, fp, ip
 80205fa:	9300      	str	r3, [sp, #0]
 80205fc:	fb04 cc09 	mla	ip, r4, r9, ip
 8020600:	fb0e cc08 	mla	ip, lr, r8, ip
 8020604:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8020608:	9301      	str	r3, [sp, #4]
 802060a:	2b00      	cmp	r3, #0
 802060c:	f000 809d 	beq.w	802074a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 8020610:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 8020614:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8020618:	fb0b fc0c 	mul.w	ip, fp, ip
 802061c:	fb0b f606 	mul.w	r6, fp, r6
 8020620:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8020624:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8020628:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 802062c:	44dc      	add	ip, fp
 802062e:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 8020632:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8020636:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802063a:	fb0a fb0b 	mul.w	fp, sl, fp
 802063e:	fb0a fa00 	mul.w	sl, sl, r0
 8020642:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 8020646:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 802064a:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 802064e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8020652:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8020656:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802065a:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 802065e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020662:	0a36      	lsrs	r6, r6, #8
 8020664:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020668:	44dc      	add	ip, fp
 802066a:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802066e:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8020672:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8020676:	fb09 fb0b 	mul.w	fp, r9, fp
 802067a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802067e:	fb09 f905 	mul.w	r9, r9, r5
 8020682:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8020686:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802068a:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 802068e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8020692:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8020696:	fb0c fc07 	mul.w	ip, ip, r7
 802069a:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 802069e:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 80206a2:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80206a6:	4458      	add	r0, fp
 80206a8:	fb08 f505 	mul.w	r5, r8, r5
 80206ac:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80206b0:	fb08 f802 	mul.w	r8, r8, r2
 80206b4:	0a00      	lsrs	r0, r0, #8
 80206b6:	0a2a      	lsrs	r2, r5, #8
 80206b8:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 80206bc:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80206c0:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80206c4:	4415      	add	r5, r2
 80206c6:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 80206ca:	0a2d      	lsrs	r5, r5, #8
 80206cc:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80206d0:	9a00      	ldr	r2, [sp, #0]
 80206d2:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80206d6:	fb03 cc02 	mla	ip, r3, r2, ip
 80206da:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80206de:	9b01      	ldr	r3, [sp, #4]
 80206e0:	fb05 c50e 	mla	r5, r5, lr, ip
 80206e4:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 80206e8:	43db      	mvns	r3, r3
 80206ea:	fb00 5004 	mla	r0, r0, r4, r5
 80206ee:	b2db      	uxtb	r3, r3
 80206f0:	0a00      	lsrs	r0, r0, #8
 80206f2:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 80206f6:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 80206fa:	4378      	muls	r0, r7
 80206fc:	fb02 0006 	mla	r0, r2, r6, r0
 8020700:	780a      	ldrb	r2, [r1, #0]
 8020702:	fb0e 0e08 	mla	lr, lr, r8, r0
 8020706:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 802070a:	fb04 e000 	mla	r0, r4, r0, lr
 802070e:	fb02 f403 	mul.w	r4, r2, r3
 8020712:	0a00      	lsrs	r0, r0, #8
 8020714:	1c62      	adds	r2, r4, #1
 8020716:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802071a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802071e:	4328      	orrs	r0, r5
 8020720:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8020724:	700a      	strb	r2, [r1, #0]
 8020726:	784a      	ldrb	r2, [r1, #1]
 8020728:	435a      	muls	r2, r3
 802072a:	1c54      	adds	r4, r2, #1
 802072c:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8020730:	0a02      	lsrs	r2, r0, #8
 8020732:	0c00      	lsrs	r0, r0, #16
 8020734:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8020738:	704a      	strb	r2, [r1, #1]
 802073a:	788a      	ldrb	r2, [r1, #2]
 802073c:	4353      	muls	r3, r2
 802073e:	1c5a      	adds	r2, r3, #1
 8020740:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020744:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020748:	7088      	strb	r0, [r1, #2]
 802074a:	b003      	add	sp, #12
 802074c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020750:	2600      	movs	r6, #0
 8020752:	e706      	b.n	8020562 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 8020754:	2000      	movs	r0, #0
 8020756:	4606      	mov	r6, r0
 8020758:	e710      	b.n	802057c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 802075a:	2000      	movs	r0, #0
 802075c:	e70e      	b.n	802057c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 802075e:	4620      	mov	r0, r4
 8020760:	e70c      	b.n	802057c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8020762:	2500      	movs	r5, #0
 8020764:	e71e      	b.n	80205a4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 8020766:	2200      	movs	r2, #0
 8020768:	4615      	mov	r5, r2
 802076a:	e729      	b.n	80205c0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 802076c:	4662      	mov	r2, ip
 802076e:	4665      	mov	r5, ip
 8020770:	e726      	b.n	80205c0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8020772:	2200      	movs	r2, #0
 8020774:	e724      	b.n	80205c0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8020776:	4622      	mov	r2, r4
 8020778:	e722      	b.n	80205c0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0802077a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802077a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802077e:	b09b      	sub	sp, #108	@ 0x6c
 8020780:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8020784:	9218      	str	r2, [sp, #96]	@ 0x60
 8020786:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8020788:	9019      	str	r0, [sp, #100]	@ 0x64
 802078a:	9116      	str	r1, [sp, #88]	@ 0x58
 802078c:	6850      	ldr	r0, [r2, #4]
 802078e:	9307      	str	r3, [sp, #28]
 8020790:	6812      	ldr	r2, [r2, #0]
 8020792:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 8020794:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8020798:	fb00 1303 	mla	r3, r0, r3, r1
 802079c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80207a0:	18d3      	adds	r3, r2, r3
 80207a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80207a4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80207a6:	681b      	ldr	r3, [r3, #0]
 80207a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80207aa:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80207ac:	685e      	ldr	r6, [r3, #4]
 80207ae:	3604      	adds	r6, #4
 80207b0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80207b2:	2b00      	cmp	r3, #0
 80207b4:	dc03      	bgt.n	80207be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 80207b6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80207b8:	2b00      	cmp	r3, #0
 80207ba:	f340 834f 	ble.w	8020e5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 80207be:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80207c0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80207c4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80207c8:	1e48      	subs	r0, r1, #1
 80207ca:	1e57      	subs	r7, r2, #1
 80207cc:	9b07      	ldr	r3, [sp, #28]
 80207ce:	2b00      	cmp	r3, #0
 80207d0:	f340 8178 	ble.w	8020ac4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80207d4:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 80207d6:	142b      	asrs	r3, r5, #16
 80207d8:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80207dc:	d406      	bmi.n	80207ec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80207de:	4584      	cmp	ip, r0
 80207e0:	da04      	bge.n	80207ec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80207e2:	2b00      	cmp	r3, #0
 80207e4:	db02      	blt.n	80207ec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80207e6:	42bb      	cmp	r3, r7
 80207e8:	f2c0 816d 	blt.w	8020ac6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80207ec:	f11c 0c01 	adds.w	ip, ip, #1
 80207f0:	f100 815b 	bmi.w	8020aaa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80207f4:	4561      	cmp	r1, ip
 80207f6:	f2c0 8158 	blt.w	8020aaa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80207fa:	3301      	adds	r3, #1
 80207fc:	f100 8155 	bmi.w	8020aaa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8020800:	429a      	cmp	r2, r3
 8020802:	f2c0 8152 	blt.w	8020aaa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8020806:	9b07      	ldr	r3, [sp, #28]
 8020808:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 802080a:	9317      	str	r3, [sp, #92]	@ 0x5c
 802080c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802080e:	2b00      	cmp	r3, #0
 8020810:	f340 8178 	ble.w	8020b04 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8020814:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8020816:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802081a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802081e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020822:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8020824:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8020828:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802082a:	141b      	asrs	r3, r3, #16
 802082c:	f100 81ba 	bmi.w	8020ba4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8020830:	f101 38ff 	add.w	r8, r1, #4294967295
 8020834:	4543      	cmp	r3, r8
 8020836:	f280 81b5 	bge.w	8020ba4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802083a:	f1bc 0f00 	cmp.w	ip, #0
 802083e:	f2c0 81b1 	blt.w	8020ba4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8020842:	f10e 38ff 	add.w	r8, lr, #4294967295
 8020846:	45c4      	cmp	ip, r8
 8020848:	f280 81ac 	bge.w	8020ba4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802084c:	b209      	sxth	r1, r1
 802084e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020850:	fb0c 3301 	mla	r3, ip, r1, r3
 8020854:	eb04 0803 	add.w	r8, r4, r3
 8020858:	5ce3      	ldrb	r3, [r4, r3]
 802085a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802085e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8020862:	2a00      	cmp	r2, #0
 8020864:	f000 8193 	beq.w	8020b8e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 8020868:	f898 c001 	ldrb.w	ip, [r8, #1]
 802086c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8020870:	940b      	str	r4, [sp, #44]	@ 0x2c
 8020872:	0e24      	lsrs	r4, r4, #24
 8020874:	9412      	str	r4, [sp, #72]	@ 0x48
 8020876:	b178      	cbz	r0, 8020898 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8020878:	eb08 0c01 	add.w	ip, r8, r1
 802087c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8020880:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020884:	9108      	str	r1, [sp, #32]
 8020886:	0e09      	lsrs	r1, r1, #24
 8020888:	9110      	str	r1, [sp, #64]	@ 0x40
 802088a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 802088e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020892:	910c      	str	r1, [sp, #48]	@ 0x30
 8020894:	0e09      	lsrs	r1, r1, #24
 8020896:	9113      	str	r1, [sp, #76]	@ 0x4c
 8020898:	b292      	uxth	r2, r2
 802089a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802089c:	b280      	uxth	r0, r0
 802089e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80208a0:	fb02 f900 	mul.w	r9, r2, r0
 80208a4:	0112      	lsls	r2, r2, #4
 80208a6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80208aa:	eba2 0809 	sub.w	r8, r2, r9
 80208ae:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80208b2:	b280      	uxth	r0, r0
 80208b4:	fa1f f888 	uxth.w	r8, r8
 80208b8:	1a12      	subs	r2, r2, r0
 80208ba:	fb08 f101 	mul.w	r1, r8, r1
 80208be:	b292      	uxth	r2, r2
 80208c0:	fb02 110e 	mla	r1, r2, lr, r1
 80208c4:	fb00 1104 	mla	r1, r0, r4, r1
 80208c8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80208ca:	fb09 1104 	mla	r1, r9, r4, r1
 80208ce:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80208d2:	2900      	cmp	r1, #0
 80208d4:	f000 80de 	beq.w	8020a94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80208d8:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80208dc:	d01b      	beq.n	8020916 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 80208de:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80208e2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80208e6:	fb0e fa0a 	mul.w	sl, lr, sl
 80208ea:	fb0e fe03 	mul.w	lr, lr, r3
 80208ee:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80208f2:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80208f6:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80208fa:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80208fe:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020902:	4453      	add	r3, sl
 8020904:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020908:	0a1b      	lsrs	r3, r3, #8
 802090a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802090e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020912:	ea43 030c 	orr.w	r3, r3, ip
 8020916:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020918:	2cff      	cmp	r4, #255	@ 0xff
 802091a:	d021      	beq.n	8020960 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802091c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802091e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8020922:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020924:	fb04 fb0b 	mul.w	fp, r4, fp
 8020928:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802092a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802092e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020930:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020934:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8020938:	fb04 fa0a 	mul.w	sl, r4, sl
 802093c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020940:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8020944:	44de      	add	lr, fp
 8020946:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802094a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802094e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020952:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020956:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802095a:	ea4e 040a 	orr.w	r4, lr, sl
 802095e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8020960:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020962:	2cff      	cmp	r4, #255	@ 0xff
 8020964:	d021      	beq.n	80209aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8020966:	9c08      	ldr	r4, [sp, #32]
 8020968:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802096c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802096e:	fb04 fb0b 	mul.w	fp, r4, fp
 8020972:	9c08      	ldr	r4, [sp, #32]
 8020974:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020978:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802097a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802097e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8020982:	fb04 fa0a 	mul.w	sl, r4, sl
 8020986:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802098a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802098e:	44de      	add	lr, fp
 8020990:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020994:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020998:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802099c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80209a0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80209a4:	ea4e 040a 	orr.w	r4, lr, sl
 80209a8:	9408      	str	r4, [sp, #32]
 80209aa:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80209ac:	2cff      	cmp	r4, #255	@ 0xff
 80209ae:	d021      	beq.n	80209f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80209b0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80209b2:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80209b6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80209b8:	fb04 fb0b 	mul.w	fp, r4, fp
 80209bc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80209be:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80209c2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80209c4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80209c8:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80209cc:	fb04 fa0a 	mul.w	sl, r4, sl
 80209d0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80209d4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80209d8:	44de      	add	lr, fp
 80209da:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80209de:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80209e2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80209e6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80209ea:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80209ee:	ea4e 040a 	orr.w	r4, lr, sl
 80209f2:	940c      	str	r4, [sp, #48]	@ 0x30
 80209f4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80209f6:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 80209fa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80209fe:	43c9      	mvns	r1, r1
 8020a00:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020a04:	9c08      	ldr	r4, [sp, #32]
 8020a06:	b2c9      	uxtb	r1, r1
 8020a08:	fb08 fc0c 	mul.w	ip, r8, ip
 8020a0c:	fb02 cc0e 	mla	ip, r2, lr, ip
 8020a10:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8020a14:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8020a16:	fb00 cc0e 	mla	ip, r0, lr, ip
 8020a1a:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8020a1e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020a20:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020a24:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8020a28:	fb08 f80e 	mul.w	r8, r8, lr
 8020a2c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020a30:	fb02 8303 	mla	r3, r2, r3, r8
 8020a34:	9a08      	ldr	r2, [sp, #32]
 8020a36:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020a3a:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8020a3e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8020a40:	fb00 330a 	mla	r3, r0, sl, r3
 8020a44:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 8020a48:	fb09 3900 	mla	r9, r9, r0, r3
 8020a4c:	783b      	ldrb	r3, [r7, #0]
 8020a4e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020a52:	fb03 f201 	mul.w	r2, r3, r1
 8020a56:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8020a5a:	1c53      	adds	r3, r2, #1
 8020a5c:	ea4c 0c09 	orr.w	ip, ip, r9
 8020a60:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020a64:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8020a68:	703b      	strb	r3, [r7, #0]
 8020a6a:	787b      	ldrb	r3, [r7, #1]
 8020a6c:	434b      	muls	r3, r1
 8020a6e:	1c5a      	adds	r2, r3, #1
 8020a70:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020a74:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8020a78:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8020a7c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020a80:	707b      	strb	r3, [r7, #1]
 8020a82:	78bb      	ldrb	r3, [r7, #2]
 8020a84:	4359      	muls	r1, r3
 8020a86:	1c4b      	adds	r3, r1, #1
 8020a88:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8020a8c:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8020a90:	f887 c002 	strb.w	ip, [r7, #2]
 8020a94:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8020a96:	3703      	adds	r7, #3
 8020a98:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8020a9a:	441a      	add	r2, r3
 8020a9c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020a9e:	441d      	add	r5, r3
 8020aa0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8020aa2:	9225      	str	r2, [sp, #148]	@ 0x94
 8020aa4:	3b01      	subs	r3, #1
 8020aa6:	9317      	str	r3, [sp, #92]	@ 0x5c
 8020aa8:	e6b0      	b.n	802080c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020aaa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8020aac:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8020aae:	441c      	add	r4, r3
 8020ab0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020ab2:	441d      	add	r5, r3
 8020ab4:	9b07      	ldr	r3, [sp, #28]
 8020ab6:	9425      	str	r4, [sp, #148]	@ 0x94
 8020ab8:	3b01      	subs	r3, #1
 8020aba:	9307      	str	r3, [sp, #28]
 8020abc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020abe:	3303      	adds	r3, #3
 8020ac0:	930a      	str	r3, [sp, #40]	@ 0x28
 8020ac2:	e683      	b.n	80207cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8020ac4:	d026      	beq.n	8020b14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8020ac6:	9b07      	ldr	r3, [sp, #28]
 8020ac8:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8020aca:	3b01      	subs	r3, #1
 8020acc:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8020ace:	fb00 4003 	mla	r0, r0, r3, r4
 8020ad2:	1400      	asrs	r0, r0, #16
 8020ad4:	f53f ae97 	bmi.w	8020806 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020ad8:	3901      	subs	r1, #1
 8020ada:	4288      	cmp	r0, r1
 8020adc:	f6bf ae93 	bge.w	8020806 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020ae0:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8020ae2:	fb01 5303 	mla	r3, r1, r3, r5
 8020ae6:	141b      	asrs	r3, r3, #16
 8020ae8:	f53f ae8d 	bmi.w	8020806 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020aec:	3a01      	subs	r2, #1
 8020aee:	4293      	cmp	r3, r2
 8020af0:	f6bf ae89 	bge.w	8020806 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020af4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020af6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8020afa:	f103 0e03 	add.w	lr, r3, #3
 8020afe:	f1bb 0f00 	cmp.w	fp, #0
 8020b02:	dc6d      	bgt.n	8020be0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 8020b04:	9b07      	ldr	r3, [sp, #28]
 8020b06:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020b0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020b0c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020b10:	4423      	add	r3, r4
 8020b12:	930a      	str	r3, [sp, #40]	@ 0x28
 8020b14:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020b16:	2b00      	cmp	r3, #0
 8020b18:	f340 81a0 	ble.w	8020e5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8020b1c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020b20:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020b22:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020b26:	eeb0 6a62 	vmov.f32	s12, s5
 8020b2a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020b2e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020b32:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020b36:	ed8d 6a25 	vstr	s12, [sp, #148]	@ 0x94
 8020b3a:	eeb0 6a43 	vmov.f32	s12, s6
 8020b3e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020b42:	ee16 5a10 	vmov	r5, s12
 8020b46:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020b4a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020b4e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020b52:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020b56:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020b5a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020b5e:	ee12 2a90 	vmov	r2, s5
 8020b62:	eef0 2a47 	vmov.f32	s5, s14
 8020b66:	fb92 f3f3 	sdiv	r3, r2, r3
 8020b6a:	ee13 2a10 	vmov	r2, s6
 8020b6e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8020b70:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020b72:	eeb0 3a67 	vmov.f32	s6, s15
 8020b76:	fb92 f3f3 	sdiv	r3, r2, r3
 8020b7a:	9328      	str	r3, [sp, #160]	@ 0xa0
 8020b7c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020b7e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8020b80:	3b01      	subs	r3, #1
 8020b82:	9316      	str	r3, [sp, #88]	@ 0x58
 8020b84:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020b86:	bf08      	it	eq
 8020b88:	4613      	moveq	r3, r2
 8020b8a:	9307      	str	r3, [sp, #28]
 8020b8c:	e610      	b.n	80207b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8020b8e:	2800      	cmp	r0, #0
 8020b90:	f43f ae82 	beq.w	8020898 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8020b94:	f818 1001 	ldrb.w	r1, [r8, r1]
 8020b98:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020b9c:	9108      	str	r1, [sp, #32]
 8020b9e:	0e09      	lsrs	r1, r1, #24
 8020ba0:	9110      	str	r1, [sp, #64]	@ 0x40
 8020ba2:	e679      	b.n	8020898 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8020ba4:	f113 0801 	adds.w	r8, r3, #1
 8020ba8:	f53f af74 	bmi.w	8020a94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020bac:	4541      	cmp	r1, r8
 8020bae:	f6ff af71 	blt.w	8020a94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020bb2:	f11c 0801 	adds.w	r8, ip, #1
 8020bb6:	f53f af6d 	bmi.w	8020a94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020bba:	45c6      	cmp	lr, r8
 8020bbc:	f6ff af6a 	blt.w	8020a94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020bc0:	b209      	sxth	r1, r1
 8020bc2:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8020bc6:	fa0f f38e 	sxth.w	r3, lr
 8020bca:	9100      	str	r1, [sp, #0]
 8020bcc:	4639      	mov	r1, r7
 8020bce:	9301      	str	r3, [sp, #4]
 8020bd0:	4633      	mov	r3, r6
 8020bd2:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8020bd6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020bd8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8020bda:	f7ff fca3 	bl	8020524 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8020bde:	e759      	b.n	8020a94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020be0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8020be2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020be6:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8020be8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020bec:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8020bee:	1427      	asrs	r7, r4, #16
 8020bf0:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020bf2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020bf6:	142b      	asrs	r3, r5, #16
 8020bf8:	fb01 7303 	mla	r3, r1, r3, r7
 8020bfc:	18e7      	adds	r7, r4, r3
 8020bfe:	5ce3      	ldrb	r3, [r4, r3]
 8020c00:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020c04:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020c08:	2a00      	cmp	r2, #0
 8020c0a:	f000 811d 	beq.w	8020e48 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 8020c0e:	f897 8001 	ldrb.w	r8, [r7, #1]
 8020c12:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8020c16:	940d      	str	r4, [sp, #52]	@ 0x34
 8020c18:	0e24      	lsrs	r4, r4, #24
 8020c1a:	9414      	str	r4, [sp, #80]	@ 0x50
 8020c1c:	b170      	cbz	r0, 8020c3c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8020c1e:	eb07 0801 	add.w	r8, r7, r1
 8020c22:	5c79      	ldrb	r1, [r7, r1]
 8020c24:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020c28:	9109      	str	r1, [sp, #36]	@ 0x24
 8020c2a:	0e09      	lsrs	r1, r1, #24
 8020c2c:	9111      	str	r1, [sp, #68]	@ 0x44
 8020c2e:	f898 1001 	ldrb.w	r1, [r8, #1]
 8020c32:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020c36:	910e      	str	r1, [sp, #56]	@ 0x38
 8020c38:	0e09      	lsrs	r1, r1, #24
 8020c3a:	9115      	str	r1, [sp, #84]	@ 0x54
 8020c3c:	b292      	uxth	r2, r2
 8020c3e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020c40:	b280      	uxth	r0, r0
 8020c42:	fb02 f900 	mul.w	r9, r2, r0
 8020c46:	0112      	lsls	r2, r2, #4
 8020c48:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8020c4c:	eba2 0809 	sub.w	r8, r2, r9
 8020c50:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8020c54:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020c56:	b280      	uxth	r0, r0
 8020c58:	fa1f f888 	uxth.w	r8, r8
 8020c5c:	1a09      	subs	r1, r1, r0
 8020c5e:	fb08 f202 	mul.w	r2, r8, r2
 8020c62:	b289      	uxth	r1, r1
 8020c64:	fb01 220c 	mla	r2, r1, ip, r2
 8020c68:	fb00 2204 	mla	r2, r0, r4, r2
 8020c6c:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8020c6e:	fb09 2204 	mla	r2, r9, r4, r2
 8020c72:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020c76:	2a00      	cmp	r2, #0
 8020c78:	f000 80db 	beq.w	8020e32 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8020c7c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8020c80:	d019      	beq.n	8020cb6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 8020c82:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8020c86:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8020c8a:	fb0c fa0a 	mul.w	sl, ip, sl
 8020c8e:	fb0c fc03 	mul.w	ip, ip, r3
 8020c92:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020c96:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8020c9a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8020c9e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020ca2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020ca6:	4453      	add	r3, sl
 8020ca8:	0a3f      	lsrs	r7, r7, #8
 8020caa:	0a1b      	lsrs	r3, r3, #8
 8020cac:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8020cb0:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020cb4:	433b      	orrs	r3, r7
 8020cb6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020cb8:	2cff      	cmp	r4, #255	@ 0xff
 8020cba:	d020      	beq.n	8020cfe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 8020cbc:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8020cbe:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8020cc2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020cc4:	4367      	muls	r7, r4
 8020cc6:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8020cc8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020ccc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020cd0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020cd2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8020cd6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020cda:	fb04 fa0a 	mul.w	sl, r4, sl
 8020cde:	44bc      	add	ip, r7
 8020ce0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8020ce4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020ce8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020cec:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020cf0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020cf4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020cf8:	ea4c 040a 	orr.w	r4, ip, sl
 8020cfc:	940d      	str	r4, [sp, #52]	@ 0x34
 8020cfe:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020d00:	2cff      	cmp	r4, #255	@ 0xff
 8020d02:	d020      	beq.n	8020d46 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 8020d04:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8020d06:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8020d0a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020d0c:	4367      	muls	r7, r4
 8020d0e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8020d10:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020d14:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020d18:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020d1a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8020d1e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020d22:	fb04 fa0a 	mul.w	sl, r4, sl
 8020d26:	44bc      	add	ip, r7
 8020d28:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8020d2c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020d30:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020d34:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020d38:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020d3c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020d40:	ea4c 040a 	orr.w	r4, ip, sl
 8020d44:	9409      	str	r4, [sp, #36]	@ 0x24
 8020d46:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8020d48:	2cff      	cmp	r4, #255	@ 0xff
 8020d4a:	d020      	beq.n	8020d8e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 8020d4c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8020d4e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8020d52:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8020d54:	4367      	muls	r7, r4
 8020d56:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8020d58:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020d5c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020d60:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8020d62:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8020d66:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020d6a:	fb04 fa0a 	mul.w	sl, r4, sl
 8020d6e:	44bc      	add	ip, r7
 8020d70:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8020d74:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020d78:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020d7c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020d80:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020d84:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020d88:	ea4c 040a 	orr.w	r4, ip, sl
 8020d8c:	940e      	str	r4, [sp, #56]	@ 0x38
 8020d8e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8020d90:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8020d94:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8020d98:	43d2      	mvns	r2, r2
 8020d9a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8020d9e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8020da0:	b2d2      	uxtb	r2, r2
 8020da2:	fb08 f707 	mul.w	r7, r8, r7
 8020da6:	fb01 770c 	mla	r7, r1, ip, r7
 8020daa:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020dae:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8020db0:	fb00 770c 	mla	r7, r0, ip, r7
 8020db4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020db8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8020dba:	fb09 770c 	mla	r7, r9, ip, r7
 8020dbe:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8020dc2:	fb08 f80c 	mul.w	r8, r8, ip
 8020dc6:	0a3f      	lsrs	r7, r7, #8
 8020dc8:	fb01 8303 	mla	r3, r1, r3, r8
 8020dcc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020dce:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8020dd2:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8020dd6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8020dd8:	fb00 330a 	mla	r3, r0, sl, r3
 8020ddc:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 8020de0:	fb09 3c0c 	mla	ip, r9, ip, r3
 8020de4:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8020de8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020dec:	fb03 f102 	mul.w	r1, r3, r2
 8020df0:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8020df4:	1c4b      	adds	r3, r1, #1
 8020df6:	ea47 070c 	orr.w	r7, r7, ip
 8020dfa:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8020dfe:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8020e02:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8020e06:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8020e0a:	4353      	muls	r3, r2
 8020e0c:	1c59      	adds	r1, r3, #1
 8020e0e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020e12:	0a3b      	lsrs	r3, r7, #8
 8020e14:	0c3f      	lsrs	r7, r7, #16
 8020e16:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8020e1a:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8020e1e:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8020e22:	435a      	muls	r2, r3
 8020e24:	1c53      	adds	r3, r2, #1
 8020e26:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8020e2a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8020e2e:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8020e32:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8020e34:	f10e 0e03 	add.w	lr, lr, #3
 8020e38:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8020e3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020e3e:	441a      	add	r2, r3
 8020e40:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020e42:	9225      	str	r2, [sp, #148]	@ 0x94
 8020e44:	441d      	add	r5, r3
 8020e46:	e65a      	b.n	8020afe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8020e48:	2800      	cmp	r0, #0
 8020e4a:	f43f aef7 	beq.w	8020c3c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8020e4e:	5c79      	ldrb	r1, [r7, r1]
 8020e50:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020e54:	9109      	str	r1, [sp, #36]	@ 0x24
 8020e56:	0e09      	lsrs	r1, r1, #24
 8020e58:	9111      	str	r1, [sp, #68]	@ 0x44
 8020e5a:	e6ef      	b.n	8020c3c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8020e5c:	b01b      	add	sp, #108	@ 0x6c
 8020e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020e62 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8020e62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e66:	b08d      	sub	sp, #52	@ 0x34
 8020e68:	468b      	mov	fp, r1
 8020e6a:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	@ 0x5c
 8020e6e:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 8020e72:	fb0c 5703 	mla	r7, ip, r3, r5
 8020e76:	f1bc 0f00 	cmp.w	ip, #0
 8020e7a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020e7c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020e80:	f9bd e058 	ldrsh.w	lr, [sp, #88]	@ 0x58
 8020e84:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 8020e88:	f89d a068 	ldrb.w	sl, [sp, #104]	@ 0x68
 8020e8c:	eb02 0607 	add.w	r6, r2, r7
 8020e90:	f89b 4000 	ldrb.w	r4, [fp]
 8020e94:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8020e98:	f89b 1002 	ldrb.w	r1, [fp, #2]
 8020e9c:	f2c0 80c1 	blt.w	8021022 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8020ea0:	45e6      	cmp	lr, ip
 8020ea2:	f340 80be 	ble.w	8021022 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8020ea6:	2d00      	cmp	r5, #0
 8020ea8:	f2c0 80b7 	blt.w	802101a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8020eac:	42ab      	cmp	r3, r5
 8020eae:	f340 80b4 	ble.w	802101a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8020eb2:	5dd2      	ldrb	r2, [r2, r7]
 8020eb4:	9205      	str	r2, [sp, #20]
 8020eb6:	7872      	ldrb	r2, [r6, #1]
 8020eb8:	9206      	str	r2, [sp, #24]
 8020eba:	78b2      	ldrb	r2, [r6, #2]
 8020ebc:	9207      	str	r2, [sp, #28]
 8020ebe:	1c6a      	adds	r2, r5, #1
 8020ec0:	f100 80b6 	bmi.w	8021030 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8020ec4:	4293      	cmp	r3, r2
 8020ec6:	f340 80b3 	ble.w	8021030 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8020eca:	f1b8 0f00 	cmp.w	r8, #0
 8020ece:	f000 80af 	beq.w	8021030 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8020ed2:	78f2      	ldrb	r2, [r6, #3]
 8020ed4:	9201      	str	r2, [sp, #4]
 8020ed6:	7932      	ldrb	r2, [r6, #4]
 8020ed8:	9202      	str	r2, [sp, #8]
 8020eda:	7972      	ldrb	r2, [r6, #5]
 8020edc:	9203      	str	r2, [sp, #12]
 8020ede:	f11c 0c01 	adds.w	ip, ip, #1
 8020ee2:	f100 80ad 	bmi.w	8021040 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8020ee6:	45e6      	cmp	lr, ip
 8020ee8:	f340 80aa 	ble.w	8021040 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8020eec:	f1ba 0f00 	cmp.w	sl, #0
 8020ef0:	f000 80a6 	beq.w	8021040 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8020ef4:	2d00      	cmp	r5, #0
 8020ef6:	f2c0 809f 	blt.w	8021038 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8020efa:	42ab      	cmp	r3, r5
 8020efc:	f340 809c 	ble.w	8021038 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8020f00:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8020f04:	f816 9002 	ldrb.w	r9, [r6, r2]
 8020f08:	2203      	movs	r2, #3
 8020f0a:	fb03 6c02 	mla	ip, r3, r2, r6
 8020f0e:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8020f12:	f89c e002 	ldrb.w	lr, [ip, #2]
 8020f16:	9704      	str	r7, [sp, #16]
 8020f18:	3501      	adds	r5, #1
 8020f1a:	f100 8098 	bmi.w	802104e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8020f1e:	42ab      	cmp	r3, r5
 8020f20:	f340 8095 	ble.w	802104e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8020f24:	f1b8 0f00 	cmp.w	r8, #0
 8020f28:	f000 8091 	beq.w	802104e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8020f2c:	f04f 0c03 	mov.w	ip, #3
 8020f30:	fb13 c20c 	smlabb	r2, r3, ip, ip
 8020f34:	5cb5      	ldrb	r5, [r6, r2]
 8020f36:	fb03 620c 	mla	r2, r3, ip, r6
 8020f3a:	fb03 630c 	mla	r3, r3, ip, r6
 8020f3e:	7912      	ldrb	r2, [r2, #4]
 8020f40:	795e      	ldrb	r6, [r3, #5]
 8020f42:	fa1f f388 	uxth.w	r3, r8
 8020f46:	fa1f fc8a 	uxth.w	ip, sl
 8020f4a:	fb03 f70c 	mul.w	r7, r3, ip
 8020f4e:	011b      	lsls	r3, r3, #4
 8020f50:	9708      	str	r7, [sp, #32]
 8020f52:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8020f56:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 8020f5a:	1bdb      	subs	r3, r3, r7
 8020f5c:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 8020f60:	fa1f fc8c 	uxth.w	ip, ip
 8020f64:	b29b      	uxth	r3, r3
 8020f66:	9709      	str	r7, [sp, #36]	@ 0x24
 8020f68:	ebaa 0a0c 	sub.w	sl, sl, ip
 8020f6c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8020f6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8020f70:	fa1f fa8a 	uxth.w	sl, sl
 8020f74:	ea6f 0807 	mvn.w	r8, r7
 8020f78:	9f01      	ldr	r7, [sp, #4]
 8020f7a:	435f      	muls	r7, r3
 8020f7c:	9b05      	ldr	r3, [sp, #20]
 8020f7e:	fa5f f888 	uxtb.w	r8, r8
 8020f82:	fb0a 7703 	mla	r7, sl, r3, r7
 8020f86:	9b08      	ldr	r3, [sp, #32]
 8020f88:	fb14 f408 	smulbb	r4, r4, r8
 8020f8c:	fb0c 7709 	mla	r7, ip, r9, r7
 8020f90:	fb10 f008 	smulbb	r0, r0, r8
 8020f94:	fb11 f108 	smulbb	r1, r1, r8
 8020f98:	fb03 7705 	mla	r7, r3, r5, r7
 8020f9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020f9e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8020fa2:	fb07 4703 	mla	r7, r7, r3, r4
 8020fa6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020fa8:	b2bf      	uxth	r7, r7
 8020faa:	1c7c      	adds	r4, r7, #1
 8020fac:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 8020fb0:	1224      	asrs	r4, r4, #8
 8020fb2:	f88b 4000 	strb.w	r4, [fp]
 8020fb6:	9c02      	ldr	r4, [sp, #8]
 8020fb8:	435c      	muls	r4, r3
 8020fba:	9b06      	ldr	r3, [sp, #24]
 8020fbc:	fb0a 4403 	mla	r4, sl, r3, r4
 8020fc0:	9b04      	ldr	r3, [sp, #16]
 8020fc2:	fb0c 4403 	mla	r4, ip, r3, r4
 8020fc6:	9b08      	ldr	r3, [sp, #32]
 8020fc8:	fb03 4402 	mla	r4, r3, r2, r4
 8020fcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020fce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020fd0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8020fd4:	fb04 0403 	mla	r4, r4, r3, r0
 8020fd8:	9b03      	ldr	r3, [sp, #12]
 8020fda:	435a      	muls	r2, r3
 8020fdc:	b2a4      	uxth	r4, r4
 8020fde:	4613      	mov	r3, r2
 8020fe0:	9a07      	ldr	r2, [sp, #28]
 8020fe2:	1c60      	adds	r0, r4, #1
 8020fe4:	fb0a 3a02 	mla	sl, sl, r2, r3
 8020fe8:	9b08      	ldr	r3, [sp, #32]
 8020fea:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8020fee:	fb0c ac0e 	mla	ip, ip, lr, sl
 8020ff2:	1224      	asrs	r4, r4, #8
 8020ff4:	fb03 c606 	mla	r6, r3, r6, ip
 8020ff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020ffa:	f88b 4001 	strb.w	r4, [fp, #1]
 8020ffe:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8021002:	fb06 1103 	mla	r1, r6, r3, r1
 8021006:	b289      	uxth	r1, r1
 8021008:	1c4e      	adds	r6, r1, #1
 802100a:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 802100e:	1209      	asrs	r1, r1, #8
 8021010:	f88b 1002 	strb.w	r1, [fp, #2]
 8021014:	b00d      	add	sp, #52	@ 0x34
 8021016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802101a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802101e:	9405      	str	r4, [sp, #20]
 8021020:	e74d      	b.n	8020ebe <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 8021022:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021026:	9401      	str	r4, [sp, #4]
 8021028:	9405      	str	r4, [sp, #20]
 802102a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802102e:	e756      	b.n	8020ede <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8021030:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021034:	9401      	str	r4, [sp, #4]
 8021036:	e752      	b.n	8020ede <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8021038:	468e      	mov	lr, r1
 802103a:	9004      	str	r0, [sp, #16]
 802103c:	46a1      	mov	r9, r4
 802103e:	e76b      	b.n	8020f18 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 8021040:	460e      	mov	r6, r1
 8021042:	4602      	mov	r2, r0
 8021044:	4625      	mov	r5, r4
 8021046:	468e      	mov	lr, r1
 8021048:	9004      	str	r0, [sp, #16]
 802104a:	46a1      	mov	r9, r4
 802104c:	e779      	b.n	8020f42 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 802104e:	460e      	mov	r6, r1
 8021050:	4602      	mov	r2, r0
 8021052:	4625      	mov	r5, r4
 8021054:	e775      	b.n	8020f42 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

08021056 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021056:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802105a:	b09f      	sub	sp, #124	@ 0x7c
 802105c:	920e      	str	r2, [sp, #56]	@ 0x38
 802105e:	9307      	str	r3, [sp, #28]
 8021060:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8021062:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 8021066:	901d      	str	r0, [sp, #116]	@ 0x74
 8021068:	930c      	str	r3, [sp, #48]	@ 0x30
 802106a:	6850      	ldr	r0, [r2, #4]
 802106c:	910b      	str	r1, [sp, #44]	@ 0x2c
 802106e:	6812      	ldr	r2, [r2, #0]
 8021070:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 8021074:	e9dd a829 	ldrd	sl, r8, [sp, #164]	@ 0xa4
 8021078:	fb00 1303 	mla	r3, r0, r3, r1
 802107c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021080:	18d3      	adds	r3, r2, r3
 8021082:	9308      	str	r3, [sp, #32]
 8021084:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8021086:	681b      	ldr	r3, [r3, #0]
 8021088:	930a      	str	r3, [sp, #40]	@ 0x28
 802108a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802108c:	43db      	mvns	r3, r3
 802108e:	b2db      	uxtb	r3, r3
 8021090:	9309      	str	r3, [sp, #36]	@ 0x24
 8021092:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021094:	2b00      	cmp	r3, #0
 8021096:	dc03      	bgt.n	80210a0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8021098:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802109a:	2b00      	cmp	r3, #0
 802109c:	f340 81f5 	ble.w	802148a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80210a0:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80210a2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80210a6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80210aa:	1e48      	subs	r0, r1, #1
 80210ac:	1e54      	subs	r4, r2, #1
 80210ae:	9b07      	ldr	r3, [sp, #28]
 80210b0:	2b00      	cmp	r3, #0
 80210b2:	f340 80d5 	ble.w	8021260 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80210b6:	ea5f 452a 	movs.w	r5, sl, asr #16
 80210ba:	ea4f 4328 	mov.w	r3, r8, asr #16
 80210be:	d406      	bmi.n	80210ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80210c0:	4285      	cmp	r5, r0
 80210c2:	da04      	bge.n	80210ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80210c4:	2b00      	cmp	r3, #0
 80210c6:	db02      	blt.n	80210ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80210c8:	42a3      	cmp	r3, r4
 80210ca:	f2c0 80ca 	blt.w	8021262 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80210ce:	3501      	adds	r5, #1
 80210d0:	f100 80bb 	bmi.w	802124a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80210d4:	42a9      	cmp	r1, r5
 80210d6:	f2c0 80b8 	blt.w	802124a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80210da:	3301      	adds	r3, #1
 80210dc:	f100 80b5 	bmi.w	802124a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80210e0:	429a      	cmp	r2, r3
 80210e2:	f2c0 80b2 	blt.w	802124a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80210e6:	9b07      	ldr	r3, [sp, #28]
 80210e8:	9d08      	ldr	r5, [sp, #32]
 80210ea:	930d      	str	r3, [sp, #52]	@ 0x34
 80210ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80210ee:	2b00      	cmp	r3, #0
 80210f0:	f340 80d6 	ble.w	80212a0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 80210f4:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 80210f6:	ea4f 4428 	mov.w	r4, r8, asr #16
 80210fa:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80210fc:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8021100:	68c6      	ldr	r6, [r0, #12]
 8021102:	ea5f 402a 	movs.w	r0, sl, asr #16
 8021106:	f3c8 3103 	ubfx	r1, r8, #12, #4
 802110a:	689b      	ldr	r3, [r3, #8]
 802110c:	f100 810f 	bmi.w	802132e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8021110:	1e5f      	subs	r7, r3, #1
 8021112:	42b8      	cmp	r0, r7
 8021114:	f280 810b 	bge.w	802132e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8021118:	2c00      	cmp	r4, #0
 802111a:	f2c0 8108 	blt.w	802132e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 802111e:	1e77      	subs	r7, r6, #1
 8021120:	42bc      	cmp	r4, r7
 8021122:	f280 8104 	bge.w	802132e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8021126:	b21b      	sxth	r3, r3
 8021128:	fb04 0003 	mla	r0, r4, r3, r0
 802112c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802112e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021132:	1826      	adds	r6, r4, r0
 8021134:	5c24      	ldrb	r4, [r4, r0]
 8021136:	78b7      	ldrb	r7, [r6, #2]
 8021138:	7870      	ldrb	r0, [r6, #1]
 802113a:	970f      	str	r7, [sp, #60]	@ 0x3c
 802113c:	7977      	ldrb	r7, [r6, #5]
 802113e:	f896 e003 	ldrb.w	lr, [r6, #3]
 8021142:	f896 c004 	ldrb.w	ip, [r6, #4]
 8021146:	9710      	str	r7, [sp, #64]	@ 0x40
 8021148:	b1c9      	cbz	r1, 802117e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 802114a:	f04f 0b03 	mov.w	fp, #3
 802114e:	f06f 0904 	mvn.w	r9, #4
 8021152:	3605      	adds	r6, #5
 8021154:	fb13 930b 	smlabb	r3, r3, fp, r9
 8021158:	eb06 0b03 	add.w	fp, r6, r3
 802115c:	5cf3      	ldrb	r3, [r6, r3]
 802115e:	9311      	str	r3, [sp, #68]	@ 0x44
 8021160:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8021164:	9313      	str	r3, [sp, #76]	@ 0x4c
 8021166:	f89b 3002 	ldrb.w	r3, [fp, #2]
 802116a:	9315      	str	r3, [sp, #84]	@ 0x54
 802116c:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8021170:	9312      	str	r3, [sp, #72]	@ 0x48
 8021172:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8021176:	9314      	str	r3, [sp, #80]	@ 0x50
 8021178:	f89b 3005 	ldrb.w	r3, [fp, #5]
 802117c:	9316      	str	r3, [sp, #88]	@ 0x58
 802117e:	b292      	uxth	r2, r2
 8021180:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8021182:	b289      	uxth	r1, r1
 8021184:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8021188:	fb02 f601 	mul.w	r6, r2, r1
 802118c:	0112      	lsls	r2, r2, #4
 802118e:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 8021192:	f5c2 7980 	rsb	r9, r2, #256	@ 0x100
 8021196:	1b92      	subs	r2, r2, r6
 8021198:	b289      	uxth	r1, r1
 802119a:	b292      	uxth	r2, r2
 802119c:	eba9 0901 	sub.w	r9, r9, r1
 80211a0:	fb02 fe0e 	mul.w	lr, r2, lr
 80211a4:	fa1f f989 	uxth.w	r9, r9
 80211a8:	fb02 fc0c 	mul.w	ip, r2, ip
 80211ac:	fb09 e404 	mla	r4, r9, r4, lr
 80211b0:	f895 e000 	ldrb.w	lr, [r5]
 80211b4:	fb09 c000 	mla	r0, r9, r0, ip
 80211b8:	fb01 4407 	mla	r4, r1, r7, r4
 80211bc:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80211be:	fb06 4407 	mla	r4, r6, r7, r4
 80211c2:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80211c4:	fb1e fe07 	smulbb	lr, lr, r7
 80211c8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80211cc:	fb04 e403 	mla	r4, r4, r3, lr
 80211d0:	b2a4      	uxth	r4, r4
 80211d2:	f104 0e01 	add.w	lr, r4, #1
 80211d6:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 80211da:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80211dc:	fb01 0004 	mla	r0, r1, r4, r0
 80211e0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80211e2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80211e6:	fb06 0004 	mla	r0, r6, r4, r0
 80211ea:	786c      	ldrb	r4, [r5, #1]
 80211ec:	f885 e000 	strb.w	lr, [r5]
 80211f0:	fb14 f407 	smulbb	r4, r4, r7
 80211f4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80211f8:	fb00 4003 	mla	r0, r0, r3, r4
 80211fc:	b280      	uxth	r0, r0
 80211fe:	1c44      	adds	r4, r0, #1
 8021200:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8021204:	1200      	asrs	r0, r0, #8
 8021206:	7068      	strb	r0, [r5, #1]
 8021208:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802120a:	4342      	muls	r2, r0
 802120c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802120e:	fb09 2200 	mla	r2, r9, r0, r2
 8021212:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8021214:	fb01 2100 	mla	r1, r1, r0, r2
 8021218:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802121a:	fb06 1602 	mla	r6, r6, r2, r1
 802121e:	78a9      	ldrb	r1, [r5, #2]
 8021220:	fb11 f107 	smulbb	r1, r1, r7
 8021224:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8021228:	fb06 1303 	mla	r3, r6, r3, r1
 802122c:	b29b      	uxth	r3, r3
 802122e:	1c5e      	adds	r6, r3, #1
 8021230:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8021234:	121b      	asrs	r3, r3, #8
 8021236:	70ab      	strb	r3, [r5, #2]
 8021238:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 802123a:	3503      	adds	r5, #3
 802123c:	449a      	add	sl, r3
 802123e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8021240:	4498      	add	r8, r3
 8021242:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021244:	3b01      	subs	r3, #1
 8021246:	930d      	str	r3, [sp, #52]	@ 0x34
 8021248:	e750      	b.n	80210ec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802124a:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 802124c:	449a      	add	sl, r3
 802124e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8021250:	4498      	add	r8, r3
 8021252:	9b07      	ldr	r3, [sp, #28]
 8021254:	3b01      	subs	r3, #1
 8021256:	9307      	str	r3, [sp, #28]
 8021258:	9b08      	ldr	r3, [sp, #32]
 802125a:	3303      	adds	r3, #3
 802125c:	9308      	str	r3, [sp, #32]
 802125e:	e726      	b.n	80210ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8021260:	d026      	beq.n	80212b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8021262:	9b07      	ldr	r3, [sp, #28]
 8021264:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8021266:	3b01      	subs	r3, #1
 8021268:	fb00 a003 	mla	r0, r0, r3, sl
 802126c:	1400      	asrs	r0, r0, #16
 802126e:	f53f af3a 	bmi.w	80210e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021272:	3901      	subs	r1, #1
 8021274:	4288      	cmp	r0, r1
 8021276:	f6bf af36 	bge.w	80210e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802127a:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 802127c:	fb01 8303 	mla	r3, r1, r3, r8
 8021280:	141b      	asrs	r3, r3, #16
 8021282:	f53f af30 	bmi.w	80210e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021286:	3a01      	subs	r2, #1
 8021288:	4293      	cmp	r3, r2
 802128a:	f6bf af2c 	bge.w	80210e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802128e:	9b08      	ldr	r3, [sp, #32]
 8021290:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8021294:	1cdd      	adds	r5, r3, #3
 8021296:	f8bd e030 	ldrh.w	lr, [sp, #48]	@ 0x30
 802129a:	f1bc 0f00 	cmp.w	ip, #0
 802129e:	dc5f      	bgt.n	8021360 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 80212a0:	9b07      	ldr	r3, [sp, #28]
 80212a2:	9a08      	ldr	r2, [sp, #32]
 80212a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80212a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80212ac:	441a      	add	r2, r3
 80212ae:	9208      	str	r2, [sp, #32]
 80212b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80212b2:	2b00      	cmp	r3, #0
 80212b4:	f340 80e9 	ble.w	802148a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80212b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80212bc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80212be:	ee30 0a04 	vadd.f32	s0, s0, s8
 80212c2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80212c6:	eef0 6a62 	vmov.f32	s13, s5
 80212ca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80212ce:	ee31 1a05 	vadd.f32	s2, s2, s10
 80212d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80212d6:	ee16 aa90 	vmov	sl, s13
 80212da:	eef0 6a43 	vmov.f32	s13, s6
 80212de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80212e2:	ee16 8a90 	vmov	r8, s13
 80212e6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80212ea:	ee61 7a27 	vmul.f32	s15, s2, s15
 80212ee:	ee77 2a62 	vsub.f32	s5, s14, s5
 80212f2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80212f6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80212fa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80212fe:	ee12 2a90 	vmov	r2, s5
 8021302:	eef0 2a47 	vmov.f32	s5, s14
 8021306:	fb92 f3f3 	sdiv	r3, r2, r3
 802130a:	ee13 2a10 	vmov	r2, s6
 802130e:	932b      	str	r3, [sp, #172]	@ 0xac
 8021310:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021312:	eeb0 3a67 	vmov.f32	s6, s15
 8021316:	fb92 f3f3 	sdiv	r3, r2, r3
 802131a:	932c      	str	r3, [sp, #176]	@ 0xb0
 802131c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802131e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021320:	3b01      	subs	r3, #1
 8021322:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021324:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021326:	bf08      	it	eq
 8021328:	4613      	moveq	r3, r2
 802132a:	9307      	str	r3, [sp, #28]
 802132c:	e6b1      	b.n	8021092 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802132e:	1c47      	adds	r7, r0, #1
 8021330:	d482      	bmi.n	8021238 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8021332:	42bb      	cmp	r3, r7
 8021334:	db80      	blt.n	8021238 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8021336:	1c67      	adds	r7, r4, #1
 8021338:	f53f af7e 	bmi.w	8021238 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 802133c:	42be      	cmp	r6, r7
 802133e:	f6ff af7b 	blt.w	8021238 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8021342:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8021344:	b236      	sxth	r6, r6
 8021346:	9001      	str	r0, [sp, #4]
 8021348:	b21b      	sxth	r3, r3
 802134a:	9600      	str	r6, [sp, #0]
 802134c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 802134e:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8021352:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8021356:	4629      	mov	r1, r5
 8021358:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802135a:	f7ff fd82 	bl	8020e62 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 802135e:	e76b      	b.n	8021238 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8021360:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 8021362:	ea4f 402a 	mov.w	r0, sl, asr #16
 8021366:	f3c8 3203 	ubfx	r2, r8, #12, #4
 802136a:	f3ca 3303 	ubfx	r3, sl, #12, #4
 802136e:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8021372:	ea4f 4128 	mov.w	r1, r8, asr #16
 8021376:	fb07 0101 	mla	r1, r7, r1, r0
 802137a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802137c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021380:	1844      	adds	r4, r0, r1
 8021382:	5c40      	ldrb	r0, [r0, r1]
 8021384:	78a6      	ldrb	r6, [r4, #2]
 8021386:	7861      	ldrb	r1, [r4, #1]
 8021388:	960f      	str	r6, [sp, #60]	@ 0x3c
 802138a:	78e6      	ldrb	r6, [r4, #3]
 802138c:	910d      	str	r1, [sp, #52]	@ 0x34
 802138e:	9610      	str	r6, [sp, #64]	@ 0x40
 8021390:	f894 9004 	ldrb.w	r9, [r4, #4]
 8021394:	f894 b005 	ldrb.w	fp, [r4, #5]
 8021398:	b192      	cbz	r2, 80213c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 802139a:	f06f 0604 	mvn.w	r6, #4
 802139e:	2103      	movs	r1, #3
 80213a0:	3405      	adds	r4, #5
 80213a2:	fb17 6701 	smlabb	r7, r7, r1, r6
 80213a6:	19e6      	adds	r6, r4, r7
 80213a8:	5de4      	ldrb	r4, [r4, r7]
 80213aa:	9417      	str	r4, [sp, #92]	@ 0x5c
 80213ac:	7874      	ldrb	r4, [r6, #1]
 80213ae:	9419      	str	r4, [sp, #100]	@ 0x64
 80213b0:	78b4      	ldrb	r4, [r6, #2]
 80213b2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80213b4:	78f4      	ldrb	r4, [r6, #3]
 80213b6:	9418      	str	r4, [sp, #96]	@ 0x60
 80213b8:	7934      	ldrb	r4, [r6, #4]
 80213ba:	941a      	str	r4, [sp, #104]	@ 0x68
 80213bc:	7974      	ldrb	r4, [r6, #5]
 80213be:	941c      	str	r4, [sp, #112]	@ 0x70
 80213c0:	b29b      	uxth	r3, r3
 80213c2:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80213c4:	b292      	uxth	r2, r2
 80213c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80213c8:	3503      	adds	r5, #3
 80213ca:	f10c 3cff 	add.w	ip, ip, #4294967295
 80213ce:	fb03 f402 	mul.w	r4, r3, r2
 80213d2:	011b      	lsls	r3, r3, #4
 80213d4:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 80213d8:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 80213dc:	1b1b      	subs	r3, r3, r4
 80213de:	b292      	uxth	r2, r2
 80213e0:	b29b      	uxth	r3, r3
 80213e2:	1ab6      	subs	r6, r6, r2
 80213e4:	435f      	muls	r7, r3
 80213e6:	b2b6      	uxth	r6, r6
 80213e8:	fb03 f909 	mul.w	r9, r3, r9
 80213ec:	fb03 fb0b 	mul.w	fp, r3, fp
 80213f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80213f2:	fb06 7000 	mla	r0, r6, r0, r7
 80213f6:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 80213f8:	fb06 bb03 	mla	fp, r6, r3, fp
 80213fc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80213fe:	fb02 0007 	mla	r0, r2, r7, r0
 8021402:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 8021404:	fb02 bb03 	mla	fp, r2, r3, fp
 8021408:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802140a:	fb04 0007 	mla	r0, r4, r7, r0
 802140e:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8021412:	fb17 f701 	smulbb	r7, r7, r1
 8021416:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802141a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 802141c:	fb00 700e 	mla	r0, r0, lr, r7
 8021420:	fb06 9101 	mla	r1, r6, r1, r9
 8021424:	b280      	uxth	r0, r0
 8021426:	1c47      	adds	r7, r0, #1
 8021428:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 802142c:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 802142e:	1200      	asrs	r0, r0, #8
 8021430:	f805 0c06 	strb.w	r0, [r5, #-6]
 8021434:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8021436:	fb02 1100 	mla	r1, r2, r0, r1
 802143a:	981a      	ldr	r0, [sp, #104]	@ 0x68
 802143c:	fb04 1100 	mla	r1, r4, r0, r1
 8021440:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8021444:	fb04 b403 	mla	r4, r4, r3, fp
 8021448:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 802144c:	fb10 f007 	smulbb	r0, r0, r7
 8021450:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021454:	fb13 f307 	smulbb	r3, r3, r7
 8021458:	f3c4 2407 	ubfx	r4, r4, #8, #8
 802145c:	fb01 010e 	mla	r1, r1, lr, r0
 8021460:	fb04 340e 	mla	r4, r4, lr, r3
 8021464:	b289      	uxth	r1, r1
 8021466:	b2a4      	uxth	r4, r4
 8021468:	1c48      	adds	r0, r1, #1
 802146a:	1c63      	adds	r3, r4, #1
 802146c:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8021470:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8021474:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8021476:	1209      	asrs	r1, r1, #8
 8021478:	1224      	asrs	r4, r4, #8
 802147a:	449a      	add	sl, r3
 802147c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802147e:	f805 1c05 	strb.w	r1, [r5, #-5]
 8021482:	f805 4c04 	strb.w	r4, [r5, #-4]
 8021486:	4498      	add	r8, r3
 8021488:	e707      	b.n	802129a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 802148a:	b01f      	add	sp, #124	@ 0x7c
 802148c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021490 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8021490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021494:	b087      	sub	sp, #28
 8021496:	780d      	ldrb	r5, [r1, #0]
 8021498:	784c      	ldrb	r4, [r1, #1]
 802149a:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 802149e:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	@ 0x40
 80214a2:	9004      	str	r0, [sp, #16]
 80214a4:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 80214a8:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 80214ac:	9005      	str	r0, [sp, #20]
 80214ae:	fb06 bc03 	mla	ip, r6, r3, fp
 80214b2:	2e00      	cmp	r6, #0
 80214b4:	7888      	ldrb	r0, [r1, #2]
 80214b6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80214ba:	eb02 090c 	add.w	r9, r2, ip
 80214be:	f2c0 8084 	blt.w	80215ca <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 80214c2:	42b7      	cmp	r7, r6
 80214c4:	f340 8081 	ble.w	80215ca <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 80214c8:	f1bb 0f00 	cmp.w	fp, #0
 80214cc:	db79      	blt.n	80215c2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 80214ce:	455b      	cmp	r3, fp
 80214d0:	dd77      	ble.n	80215c2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 80214d2:	f812 200c 	ldrb.w	r2, [r2, ip]
 80214d6:	9201      	str	r2, [sp, #4]
 80214d8:	f899 2001 	ldrb.w	r2, [r9, #1]
 80214dc:	9202      	str	r2, [sp, #8]
 80214de:	f899 2002 	ldrb.w	r2, [r9, #2]
 80214e2:	9203      	str	r2, [sp, #12]
 80214e4:	f11b 0201 	adds.w	r2, fp, #1
 80214e8:	d476      	bmi.n	80215d8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 80214ea:	4293      	cmp	r3, r2
 80214ec:	dd74      	ble.n	80215d8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 80214ee:	9a04      	ldr	r2, [sp, #16]
 80214f0:	2a00      	cmp	r2, #0
 80214f2:	d071      	beq.n	80215d8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 80214f4:	f899 8003 	ldrb.w	r8, [r9, #3]
 80214f8:	f899 c004 	ldrb.w	ip, [r9, #4]
 80214fc:	f899 a005 	ldrb.w	sl, [r9, #5]
 8021500:	3601      	adds	r6, #1
 8021502:	d471      	bmi.n	80215e8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8021504:	42b7      	cmp	r7, r6
 8021506:	dd6f      	ble.n	80215e8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8021508:	9a05      	ldr	r2, [sp, #20]
 802150a:	2a00      	cmp	r2, #0
 802150c:	d06c      	beq.n	80215e8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 802150e:	f1bb 0f00 	cmp.w	fp, #0
 8021512:	db65      	blt.n	80215e0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8021514:	455b      	cmp	r3, fp
 8021516:	dd63      	ble.n	80215e0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8021518:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 802151c:	f819 e002 	ldrb.w	lr, [r9, r2]
 8021520:	2203      	movs	r2, #3
 8021522:	fb03 9602 	mla	r6, r3, r2, r9
 8021526:	7877      	ldrb	r7, [r6, #1]
 8021528:	78b6      	ldrb	r6, [r6, #2]
 802152a:	f11b 0b01 	adds.w	fp, fp, #1
 802152e:	d40c      	bmi.n	802154a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8021530:	455b      	cmp	r3, fp
 8021532:	dd0a      	ble.n	802154a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8021534:	9a04      	ldr	r2, [sp, #16]
 8021536:	b142      	cbz	r2, 802154a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8021538:	2203      	movs	r2, #3
 802153a:	fb13 2002 	smlabb	r0, r3, r2, r2
 802153e:	f819 5000 	ldrb.w	r5, [r9, r0]
 8021542:	fb03 9002 	mla	r0, r3, r2, r9
 8021546:	7904      	ldrb	r4, [r0, #4]
 8021548:	7940      	ldrb	r0, [r0, #5]
 802154a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 802154e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8021552:	fb03 fb02 	mul.w	fp, r3, r2
 8021556:	011b      	lsls	r3, r3, #4
 8021558:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 802155c:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 8021560:	eba3 030b 	sub.w	r3, r3, fp
 8021564:	b292      	uxth	r2, r2
 8021566:	b29b      	uxth	r3, r3
 8021568:	eba9 0902 	sub.w	r9, r9, r2
 802156c:	9304      	str	r3, [sp, #16]
 802156e:	fa1f f989 	uxth.w	r9, r9
 8021572:	fb03 f808 	mul.w	r8, r3, r8
 8021576:	9b01      	ldr	r3, [sp, #4]
 8021578:	fb09 8803 	mla	r8, r9, r3, r8
 802157c:	9b04      	ldr	r3, [sp, #16]
 802157e:	fb03 fc0c 	mul.w	ip, r3, ip
 8021582:	9b02      	ldr	r3, [sp, #8]
 8021584:	fb02 880e 	mla	r8, r2, lr, r8
 8021588:	fb09 cc03 	mla	ip, r9, r3, ip
 802158c:	9b04      	ldr	r3, [sp, #16]
 802158e:	fb0b 8805 	mla	r8, fp, r5, r8
 8021592:	fb02 c707 	mla	r7, r2, r7, ip
 8021596:	fb03 f30a 	mul.w	r3, r3, sl
 802159a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802159e:	fb0b 7404 	mla	r4, fp, r4, r7
 80215a2:	f881 8000 	strb.w	r8, [r1]
 80215a6:	1224      	asrs	r4, r4, #8
 80215a8:	704c      	strb	r4, [r1, #1]
 80215aa:	9c03      	ldr	r4, [sp, #12]
 80215ac:	fb09 3904 	mla	r9, r9, r4, r3
 80215b0:	fb02 9206 	mla	r2, r2, r6, r9
 80215b4:	fb0b 2000 	mla	r0, fp, r0, r2
 80215b8:	1200      	asrs	r0, r0, #8
 80215ba:	7088      	strb	r0, [r1, #2]
 80215bc:	b007      	add	sp, #28
 80215be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80215c2:	e9cd 4002 	strd	r4, r0, [sp, #8]
 80215c6:	9501      	str	r5, [sp, #4]
 80215c8:	e78c      	b.n	80214e4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 80215ca:	4682      	mov	sl, r0
 80215cc:	46a4      	mov	ip, r4
 80215ce:	46a8      	mov	r8, r5
 80215d0:	9501      	str	r5, [sp, #4]
 80215d2:	e9cd 4002 	strd	r4, r0, [sp, #8]
 80215d6:	e793      	b.n	8021500 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 80215d8:	4682      	mov	sl, r0
 80215da:	46a4      	mov	ip, r4
 80215dc:	46a8      	mov	r8, r5
 80215de:	e78f      	b.n	8021500 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 80215e0:	4606      	mov	r6, r0
 80215e2:	4627      	mov	r7, r4
 80215e4:	46ae      	mov	lr, r5
 80215e6:	e7a0      	b.n	802152a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 80215e8:	4606      	mov	r6, r0
 80215ea:	4627      	mov	r7, r4
 80215ec:	46ae      	mov	lr, r5
 80215ee:	e7ac      	b.n	802154a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

080215f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80215f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215f4:	b09b      	sub	sp, #108	@ 0x6c
 80215f6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80215f8:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80215fa:	9019      	str	r0, [sp, #100]	@ 0x64
 80215fc:	9109      	str	r1, [sp, #36]	@ 0x24
 80215fe:	6850      	ldr	r0, [r2, #4]
 8021600:	9306      	str	r3, [sp, #24]
 8021602:	6812      	ldr	r2, [r2, #0]
 8021604:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8021608:	e9dd b425 	ldrd	fp, r4, [sp, #148]	@ 0x94
 802160c:	fb00 1303 	mla	r3, r0, r3, r1
 8021610:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021614:	18d3      	adds	r3, r2, r3
 8021616:	9307      	str	r3, [sp, #28]
 8021618:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802161a:	681b      	ldr	r3, [r3, #0]
 802161c:	9308      	str	r3, [sp, #32]
 802161e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021620:	2b00      	cmp	r3, #0
 8021622:	dc03      	bgt.n	802162c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8021624:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021626:	2b00      	cmp	r3, #0
 8021628:	f340 81ab 	ble.w	8021982 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 802162c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802162e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021632:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021636:	1e48      	subs	r0, r1, #1
 8021638:	1e55      	subs	r5, r2, #1
 802163a:	9b06      	ldr	r3, [sp, #24]
 802163c:	2b00      	cmp	r3, #0
 802163e:	f340 80b1 	ble.w	80217a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8021642:	ea5f 462b 	movs.w	r6, fp, asr #16
 8021646:	ea4f 4324 	mov.w	r3, r4, asr #16
 802164a:	d406      	bmi.n	802165a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802164c:	4286      	cmp	r6, r0
 802164e:	da04      	bge.n	802165a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8021650:	2b00      	cmp	r3, #0
 8021652:	db02      	blt.n	802165a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8021654:	42ab      	cmp	r3, r5
 8021656:	f2c0 80a6 	blt.w	80217a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802165a:	3601      	adds	r6, #1
 802165c:	f100 8097 	bmi.w	802178e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8021660:	42b1      	cmp	r1, r6
 8021662:	f2c0 8094 	blt.w	802178e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8021666:	3301      	adds	r3, #1
 8021668:	f100 8091 	bmi.w	802178e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 802166c:	429a      	cmp	r2, r3
 802166e:	f2c0 808e 	blt.w	802178e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8021672:	9b06      	ldr	r3, [sp, #24]
 8021674:	9e07      	ldr	r6, [sp, #28]
 8021676:	930a      	str	r3, [sp, #40]	@ 0x28
 8021678:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802167a:	2b00      	cmp	r3, #0
 802167c:	f340 80b0 	ble.w	80217e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8021680:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8021682:	1425      	asrs	r5, r4, #16
 8021684:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8021686:	f3cb 3203 	ubfx	r2, fp, #12, #4
 802168a:	68c7      	ldr	r7, [r0, #12]
 802168c:	ea5f 402b 	movs.w	r0, fp, asr #16
 8021690:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8021694:	689b      	ldr	r3, [r3, #8]
 8021696:	f100 80ea 	bmi.w	802186e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802169a:	f103 3cff 	add.w	ip, r3, #4294967295
 802169e:	4560      	cmp	r0, ip
 80216a0:	f280 80e5 	bge.w	802186e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80216a4:	2d00      	cmp	r5, #0
 80216a6:	f2c0 80e2 	blt.w	802186e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80216aa:	f107 3cff 	add.w	ip, r7, #4294967295
 80216ae:	4565      	cmp	r5, ip
 80216b0:	f280 80dd 	bge.w	802186e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80216b4:	b21b      	sxth	r3, r3
 80216b6:	fb05 0003 	mla	r0, r5, r3, r0
 80216ba:	9d08      	ldr	r5, [sp, #32]
 80216bc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80216c0:	182f      	adds	r7, r5, r0
 80216c2:	5c2d      	ldrb	r5, [r5, r0]
 80216c4:	7878      	ldrb	r0, [r7, #1]
 80216c6:	f897 e002 	ldrb.w	lr, [r7, #2]
 80216ca:	900c      	str	r0, [sp, #48]	@ 0x30
 80216cc:	f897 9003 	ldrb.w	r9, [r7, #3]
 80216d0:	f897 8004 	ldrb.w	r8, [r7, #4]
 80216d4:	f897 a005 	ldrb.w	sl, [r7, #5]
 80216d8:	b1c9      	cbz	r1, 802170e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80216da:	f04f 0c03 	mov.w	ip, #3
 80216de:	f06f 0004 	mvn.w	r0, #4
 80216e2:	3705      	adds	r7, #5
 80216e4:	fb13 030c 	smlabb	r3, r3, ip, r0
 80216e8:	eb07 0c03 	add.w	ip, r7, r3
 80216ec:	5cfb      	ldrb	r3, [r7, r3]
 80216ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80216f0:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80216f4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80216f6:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80216fa:	9311      	str	r3, [sp, #68]	@ 0x44
 80216fc:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8021700:	930e      	str	r3, [sp, #56]	@ 0x38
 8021702:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8021706:	9310      	str	r3, [sp, #64]	@ 0x40
 8021708:	f89c 3005 	ldrb.w	r3, [ip, #5]
 802170c:	9312      	str	r3, [sp, #72]	@ 0x48
 802170e:	b292      	uxth	r2, r2
 8021710:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8021712:	b289      	uxth	r1, r1
 8021714:	fb02 f301 	mul.w	r3, r2, r1
 8021718:	0112      	lsls	r2, r2, #4
 802171a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802171e:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8021722:	1ad2      	subs	r2, r2, r3
 8021724:	b289      	uxth	r1, r1
 8021726:	b292      	uxth	r2, r2
 8021728:	1a7f      	subs	r7, r7, r1
 802172a:	fb02 f909 	mul.w	r9, r2, r9
 802172e:	b2bf      	uxth	r7, r7
 8021730:	fb02 f808 	mul.w	r8, r2, r8
 8021734:	fb02 fa0a 	mul.w	sl, r2, sl
 8021738:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802173a:	fb07 9905 	mla	r9, r7, r5, r9
 802173e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8021740:	fb07 8800 	mla	r8, r7, r0, r8
 8021744:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8021746:	fb07 aa0e 	mla	sl, r7, lr, sl
 802174a:	fb01 9905 	mla	r9, r1, r5, r9
 802174e:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8021750:	fb01 8800 	mla	r8, r1, r0, r8
 8021754:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021756:	fb01 a102 	mla	r1, r1, r2, sl
 802175a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802175c:	fb03 9905 	mla	r9, r3, r5, r9
 8021760:	fb03 8800 	mla	r8, r3, r0, r8
 8021764:	fb03 1302 	mla	r3, r3, r2, r1
 8021768:	ea4f 2929 	mov.w	r9, r9, asr #8
 802176c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021770:	121b      	asrs	r3, r3, #8
 8021772:	f886 9000 	strb.w	r9, [r6]
 8021776:	f886 8001 	strb.w	r8, [r6, #1]
 802177a:	70b3      	strb	r3, [r6, #2]
 802177c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802177e:	3603      	adds	r6, #3
 8021780:	449b      	add	fp, r3
 8021782:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021784:	441c      	add	r4, r3
 8021786:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021788:	3b01      	subs	r3, #1
 802178a:	930a      	str	r3, [sp, #40]	@ 0x28
 802178c:	e774      	b.n	8021678 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802178e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8021790:	449b      	add	fp, r3
 8021792:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021794:	441c      	add	r4, r3
 8021796:	9b06      	ldr	r3, [sp, #24]
 8021798:	3b01      	subs	r3, #1
 802179a:	9306      	str	r3, [sp, #24]
 802179c:	9b07      	ldr	r3, [sp, #28]
 802179e:	3303      	adds	r3, #3
 80217a0:	9307      	str	r3, [sp, #28]
 80217a2:	e74a      	b.n	802163a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80217a4:	d024      	beq.n	80217f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80217a6:	9b06      	ldr	r3, [sp, #24]
 80217a8:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 80217aa:	3b01      	subs	r3, #1
 80217ac:	fb00 b003 	mla	r0, r0, r3, fp
 80217b0:	1400      	asrs	r0, r0, #16
 80217b2:	f53f af5e 	bmi.w	8021672 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80217b6:	3901      	subs	r1, #1
 80217b8:	4288      	cmp	r0, r1
 80217ba:	f6bf af5a 	bge.w	8021672 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80217be:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 80217c0:	fb01 4303 	mla	r3, r1, r3, r4
 80217c4:	141b      	asrs	r3, r3, #16
 80217c6:	f53f af54 	bmi.w	8021672 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80217ca:	3a01      	subs	r2, #1
 80217cc:	4293      	cmp	r3, r2
 80217ce:	f6bf af50 	bge.w	8021672 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80217d2:	9b07      	ldr	r3, [sp, #28]
 80217d4:	f8dd e018 	ldr.w	lr, [sp, #24]
 80217d8:	1cde      	adds	r6, r3, #3
 80217da:	f1be 0f00 	cmp.w	lr, #0
 80217de:	dc5f      	bgt.n	80218a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80217e0:	9b06      	ldr	r3, [sp, #24]
 80217e2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80217e6:	9b07      	ldr	r3, [sp, #28]
 80217e8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80217ec:	4423      	add	r3, r4
 80217ee:	9307      	str	r3, [sp, #28]
 80217f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80217f2:	2b00      	cmp	r3, #0
 80217f4:	f340 80c5 	ble.w	8021982 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80217f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80217fc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80217fe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021802:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021806:	eef0 6a62 	vmov.f32	s13, s5
 802180a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802180e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021812:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021816:	ee16 ba90 	vmov	fp, s13
 802181a:	eef0 6a43 	vmov.f32	s13, s6
 802181e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021822:	ee16 4a90 	vmov	r4, s13
 8021826:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802182a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802182e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021832:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021836:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802183a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802183e:	ee12 2a90 	vmov	r2, s5
 8021842:	eef0 2a47 	vmov.f32	s5, s14
 8021846:	fb92 f3f3 	sdiv	r3, r2, r3
 802184a:	ee13 2a10 	vmov	r2, s6
 802184e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8021850:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021852:	eeb0 3a67 	vmov.f32	s6, s15
 8021856:	fb92 f3f3 	sdiv	r3, r2, r3
 802185a:	9328      	str	r3, [sp, #160]	@ 0xa0
 802185c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802185e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8021860:	3b01      	subs	r3, #1
 8021862:	9309      	str	r3, [sp, #36]	@ 0x24
 8021864:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021866:	bf08      	it	eq
 8021868:	4613      	moveq	r3, r2
 802186a:	9306      	str	r3, [sp, #24]
 802186c:	e6d7      	b.n	802161e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802186e:	f110 0c01 	adds.w	ip, r0, #1
 8021872:	d483      	bmi.n	802177c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8021874:	4563      	cmp	r3, ip
 8021876:	db81      	blt.n	802177c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8021878:	f115 0c01 	adds.w	ip, r5, #1
 802187c:	f53f af7e 	bmi.w	802177c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8021880:	4567      	cmp	r7, ip
 8021882:	f6ff af7b 	blt.w	802177c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8021886:	b23f      	sxth	r7, r7
 8021888:	b21b      	sxth	r3, r3
 802188a:	9700      	str	r7, [sp, #0]
 802188c:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8021890:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8021894:	9a08      	ldr	r2, [sp, #32]
 8021896:	4631      	mov	r1, r6
 8021898:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802189a:	f7ff fdf9 	bl	8021490 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 802189e:	e76d      	b.n	802177c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80218a0:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 80218a2:	ea4f 402b 	mov.w	r0, fp, asr #16
 80218a6:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80218aa:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80218ae:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 80218b2:	1421      	asrs	r1, r4, #16
 80218b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80218b6:	fb0c 0101 	mla	r1, ip, r1, r0
 80218ba:	9808      	ldr	r0, [sp, #32]
 80218bc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80218c0:	1845      	adds	r5, r0, r1
 80218c2:	5c40      	ldrb	r0, [r0, r1]
 80218c4:	796f      	ldrb	r7, [r5, #5]
 80218c6:	7869      	ldrb	r1, [r5, #1]
 80218c8:	f895 8002 	ldrb.w	r8, [r5, #2]
 80218cc:	f895 a003 	ldrb.w	sl, [r5, #3]
 80218d0:	f895 9004 	ldrb.w	r9, [r5, #4]
 80218d4:	970c      	str	r7, [sp, #48]	@ 0x30
 80218d6:	b1a2      	cbz	r2, 8021902 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 80218d8:	2703      	movs	r7, #3
 80218da:	f06f 0304 	mvn.w	r3, #4
 80218de:	3505      	adds	r5, #5
 80218e0:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 80218e4:	eb05 070c 	add.w	r7, r5, ip
 80218e8:	f815 500c 	ldrb.w	r5, [r5, ip]
 80218ec:	9513      	str	r5, [sp, #76]	@ 0x4c
 80218ee:	787d      	ldrb	r5, [r7, #1]
 80218f0:	9515      	str	r5, [sp, #84]	@ 0x54
 80218f2:	78bd      	ldrb	r5, [r7, #2]
 80218f4:	9517      	str	r5, [sp, #92]	@ 0x5c
 80218f6:	78fd      	ldrb	r5, [r7, #3]
 80218f8:	9514      	str	r5, [sp, #80]	@ 0x50
 80218fa:	793d      	ldrb	r5, [r7, #4]
 80218fc:	9516      	str	r5, [sp, #88]	@ 0x58
 80218fe:	797d      	ldrb	r5, [r7, #5]
 8021900:	9518      	str	r5, [sp, #96]	@ 0x60
 8021902:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8021906:	b292      	uxth	r2, r2
 8021908:	3603      	adds	r6, #3
 802190a:	f10e 3eff 	add.w	lr, lr, #4294967295
 802190e:	fb03 f502 	mul.w	r5, r3, r2
 8021912:	011b      	lsls	r3, r3, #4
 8021914:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8021918:	f5c3 7780 	rsb	r7, r3, #256	@ 0x100
 802191c:	1b5b      	subs	r3, r3, r5
 802191e:	b292      	uxth	r2, r2
 8021920:	b29b      	uxth	r3, r3
 8021922:	1abf      	subs	r7, r7, r2
 8021924:	fb03 f909 	mul.w	r9, r3, r9
 8021928:	b2bf      	uxth	r7, r7
 802192a:	fb03 fa0a 	mul.w	sl, r3, sl
 802192e:	fb07 9901 	mla	r9, r7, r1, r9
 8021932:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8021934:	fb07 aa00 	mla	sl, r7, r0, sl
 8021938:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802193a:	fb02 9901 	mla	r9, r2, r1, r9
 802193e:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8021940:	fb02 aa00 	mla	sl, r2, r0, sl
 8021944:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8021946:	fb05 9901 	mla	r9, r5, r1, r9
 802194a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802194c:	fb05 aa00 	mla	sl, r5, r0, sl
 8021950:	434b      	muls	r3, r1
 8021952:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8021954:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021958:	fb07 3308 	mla	r3, r7, r8, r3
 802195c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021960:	f806 ac06 	strb.w	sl, [r6, #-6]
 8021964:	fb02 3201 	mla	r2, r2, r1, r3
 8021968:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802196a:	f806 9c05 	strb.w	r9, [r6, #-5]
 802196e:	fb05 2503 	mla	r5, r5, r3, r2
 8021972:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8021974:	122d      	asrs	r5, r5, #8
 8021976:	449b      	add	fp, r3
 8021978:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802197a:	f806 5c04 	strb.w	r5, [r6, #-4]
 802197e:	441c      	add	r4, r3
 8021980:	e72b      	b.n	80217da <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8021982:	b01b      	add	sp, #108	@ 0x6c
 8021984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021988 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8021988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802198c:	b087      	sub	sp, #28
 802198e:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 8021992:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 8021996:	fb05 7003 	mla	r0, r5, r3, r7
 802199a:	2d00      	cmp	r5, #0
 802199c:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 80219a0:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 80219a4:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 80219a8:	f2c0 811f 	blt.w	8021bea <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 80219ac:	45a8      	cmp	r8, r5
 80219ae:	f340 811c 	ble.w	8021bea <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 80219b2:	2f00      	cmp	r7, #0
 80219b4:	f2c0 8117 	blt.w	8021be6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 80219b8:	42bb      	cmp	r3, r7
 80219ba:	f340 8114 	ble.w	8021be6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 80219be:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 80219c2:	1c7a      	adds	r2, r7, #1
 80219c4:	f100 8114 	bmi.w	8021bf0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 80219c8:	4293      	cmp	r3, r2
 80219ca:	f340 8111 	ble.w	8021bf0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 80219ce:	2c00      	cmp	r4, #0
 80219d0:	f000 8110 	beq.w	8021bf4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 80219d4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80219d8:	3501      	adds	r5, #1
 80219da:	f100 810f 	bmi.w	8021bfc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 80219de:	45a8      	cmp	r8, r5
 80219e0:	f340 810c 	ble.w	8021bfc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 80219e4:	f1be 0f00 	cmp.w	lr, #0
 80219e8:	f000 810b 	beq.w	8021c02 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 80219ec:	2f00      	cmp	r7, #0
 80219ee:	f2c0 8103 	blt.w	8021bf8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 80219f2:	42bb      	cmp	r3, r7
 80219f4:	f340 8100 	ble.w	8021bf8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 80219f8:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 80219fc:	3701      	adds	r7, #1
 80219fe:	f100 8103 	bmi.w	8021c08 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8021a02:	42bb      	cmp	r3, r7
 8021a04:	f340 8100 	ble.w	8021c08 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8021a08:	2c00      	cmp	r4, #0
 8021a0a:	f000 80ff 	beq.w	8021c0c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 8021a0e:	3301      	adds	r3, #1
 8021a10:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8021a14:	fa1f fc84 	uxth.w	ip, r4
 8021a18:	fa1f fe8e 	uxth.w	lr, lr
 8021a1c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021a20:	fb0c f90e 	mul.w	r9, ip, lr
 8021a24:	0e13      	lsrs	r3, r2, #24
 8021a26:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8021a2a:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8021a2e:	9302      	str	r3, [sp, #8]
 8021a30:	ebac 0709 	sub.w	r7, ip, r9
 8021a34:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 8021a38:	fa1f f48e 	uxth.w	r4, lr
 8021a3c:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 8021a40:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8021a44:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8021a48:	fb0a fe0e 	mul.w	lr, sl, lr
 8021a4c:	1b1b      	subs	r3, r3, r4
 8021a4e:	fb0a f606 	mul.w	r6, sl, r6
 8021a52:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8021a56:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8021a5a:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 8021a5e:	b29b      	uxth	r3, r3
 8021a60:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021a64:	b2bf      	uxth	r7, r7
 8021a66:	9301      	str	r3, [sp, #4]
 8021a68:	44e6      	add	lr, ip
 8021a6a:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8021a6e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021a72:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8021a76:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 8021a7a:	9303      	str	r3, [sp, #12]
 8021a7c:	0a33      	lsrs	r3, r6, #8
 8021a7e:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 8021a82:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8021a86:	9304      	str	r3, [sp, #16]
 8021a88:	fb0b f606 	mul.w	r6, fp, r6
 8021a8c:	fb0b f000 	mul.w	r0, fp, r0
 8021a90:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8021a94:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8021a98:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021a9c:	44b6      	add	lr, r6
 8021a9e:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 8021aa2:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8021aa6:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 8021aaa:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8021aae:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021ab2:	fb08 f606 	mul.w	r6, r8, r6
 8021ab6:	0a03      	lsrs	r3, r0, #8
 8021ab8:	fb08 f505 	mul.w	r5, r8, r5
 8021abc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021ac0:	0a30      	lsrs	r0, r6, #8
 8021ac2:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8021ac6:	9305      	str	r3, [sp, #20]
 8021ac8:	0e13      	lsrs	r3, r2, #24
 8021aca:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8021ace:	fb0e fe07 	mul.w	lr, lr, r7
 8021ad2:	4430      	add	r0, r6
 8021ad4:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 8021ad8:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8021adc:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 8021ae0:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8021ae4:	0a00      	lsrs	r0, r0, #8
 8021ae6:	435e      	muls	r6, r3
 8021ae8:	0a2d      	lsrs	r5, r5, #8
 8021aea:	435a      	muls	r2, r3
 8021aec:	9b03      	ldr	r3, [sp, #12]
 8021aee:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8021af2:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8021af6:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8021afa:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021afe:	44b4      	add	ip, r6
 8021b00:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 8021b04:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021b08:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8021b0c:	9e01      	ldr	r6, [sp, #4]
 8021b0e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021b12:	fb03 ee06 	mla	lr, r3, r6, lr
 8021b16:	9b04      	ldr	r3, [sp, #16]
 8021b18:	0a12      	lsrs	r2, r2, #8
 8021b1a:	fb0c ee09 	mla	lr, ip, r9, lr
 8021b1e:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 8021b22:	9b05      	ldr	r3, [sp, #20]
 8021b24:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8021b28:	fb00 ee04 	mla	lr, r0, r4, lr
 8021b2c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021b30:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 8021b34:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 8021b38:	9b01      	ldr	r3, [sp, #4]
 8021b3a:	fb07 fe0e 	mul.w	lr, r7, lr
 8021b3e:	fb07 f70b 	mul.w	r7, r7, fp
 8021b42:	fb03 ee06 	mla	lr, r3, r6, lr
 8021b46:	fb03 730a 	mla	r3, r3, sl, r7
 8021b4a:	fb09 e202 	mla	r2, r9, r2, lr
 8021b4e:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8021b52:	fb04 2e0e 	mla	lr, r4, lr, r2
 8021b56:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 8021b5a:	fb04 3408 	mla	r4, r4, r8, r3
 8021b5e:	9b02      	ldr	r3, [sp, #8]
 8021b60:	b292      	uxth	r2, r2
 8021b62:	fb09 4903 	mla	r9, r9, r3, r4
 8021b66:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021b6a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8021b6e:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8021b72:	fb09 f902 	mul.w	r9, r9, r2
 8021b76:	ea40 0e0e 	orr.w	lr, r0, lr
 8021b7a:	f109 0301 	add.w	r3, r9, #1
 8021b7e:	fa5f f08e 	uxtb.w	r0, lr
 8021b82:	fb10 f002 	smulbb	r0, r0, r2
 8021b86:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8021b8a:	780b      	ldrb	r3, [r1, #0]
 8021b8c:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 8021b90:	fa5f f989 	uxtb.w	r9, r9
 8021b94:	fb03 0309 	mla	r3, r3, r9, r0
 8021b98:	b29b      	uxth	r3, r3
 8021b9a:	1c58      	adds	r0, r3, #1
 8021b9c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8021ba0:	7848      	ldrb	r0, [r1, #1]
 8021ba2:	fb10 f009 	smulbb	r0, r0, r9
 8021ba6:	121b      	asrs	r3, r3, #8
 8021ba8:	700b      	strb	r3, [r1, #0]
 8021baa:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8021bae:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8021bb2:	fb03 0302 	mla	r3, r3, r2, r0
 8021bb6:	b29b      	uxth	r3, r3
 8021bb8:	1c58      	adds	r0, r3, #1
 8021bba:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8021bbe:	121b      	asrs	r3, r3, #8
 8021bc0:	704b      	strb	r3, [r1, #1]
 8021bc2:	788b      	ldrb	r3, [r1, #2]
 8021bc4:	fb13 f909 	smulbb	r9, r3, r9
 8021bc8:	fb0e 9e02 	mla	lr, lr, r2, r9
 8021bcc:	fa1f fe8e 	uxth.w	lr, lr
 8021bd0:	f10e 0301 	add.w	r3, lr, #1
 8021bd4:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8021bd8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021bdc:	f881 e002 	strb.w	lr, [r1, #2]
 8021be0:	b007      	add	sp, #28
 8021be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021be6:	2600      	movs	r6, #0
 8021be8:	e6eb      	b.n	80219c2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 8021bea:	2000      	movs	r0, #0
 8021bec:	4606      	mov	r6, r0
 8021bee:	e6f3      	b.n	80219d8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8021bf0:	2000      	movs	r0, #0
 8021bf2:	e6f1      	b.n	80219d8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8021bf4:	4620      	mov	r0, r4
 8021bf6:	e6ef      	b.n	80219d8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8021bf8:	2500      	movs	r5, #0
 8021bfa:	e6ff      	b.n	80219fc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 8021bfc:	2200      	movs	r2, #0
 8021bfe:	4615      	mov	r5, r2
 8021c00:	e708      	b.n	8021a14 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021c02:	4672      	mov	r2, lr
 8021c04:	4675      	mov	r5, lr
 8021c06:	e705      	b.n	8021a14 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021c08:	2200      	movs	r2, #0
 8021c0a:	e703      	b.n	8021a14 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021c0c:	4622      	mov	r2, r4
 8021c0e:	e701      	b.n	8021a14 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

08021c10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c14:	b09d      	sub	sp, #116	@ 0x74
 8021c16:	9219      	str	r2, [sp, #100]	@ 0x64
 8021c18:	9307      	str	r3, [sp, #28]
 8021c1a:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8021c1c:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 8021c20:	901b      	str	r0, [sp, #108]	@ 0x6c
 8021c22:	931a      	str	r3, [sp, #104]	@ 0x68
 8021c24:	6850      	ldr	r0, [r2, #4]
 8021c26:	9117      	str	r1, [sp, #92]	@ 0x5c
 8021c28:	6812      	ldr	r2, [r2, #0]
 8021c2a:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 8021c2e:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 8021c32:	fb00 1303 	mla	r3, r0, r3, r1
 8021c36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021c3a:	18d3      	adds	r3, r2, r3
 8021c3c:	930a      	str	r3, [sp, #40]	@ 0x28
 8021c3e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8021c40:	681b      	ldr	r3, [r3, #0]
 8021c42:	9310      	str	r3, [sp, #64]	@ 0x40
 8021c44:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8021c48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021c4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8021c4c:	2b00      	cmp	r3, #0
 8021c4e:	dc03      	bgt.n	8021c58 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021c50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8021c52:	2b00      	cmp	r3, #0
 8021c54:	f340 8368 	ble.w	8022328 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8021c58:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8021c5a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021c5e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021c62:	1e48      	subs	r0, r1, #1
 8021c64:	1e57      	subs	r7, r2, #1
 8021c66:	9b07      	ldr	r3, [sp, #28]
 8021c68:	2b00      	cmp	r3, #0
 8021c6a:	f340 8187 	ble.w	8021f7c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8021c6e:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8021c72:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021c76:	d406      	bmi.n	8021c86 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021c78:	4584      	cmp	ip, r0
 8021c7a:	da04      	bge.n	8021c86 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021c7c:	2b00      	cmp	r3, #0
 8021c7e:	db02      	blt.n	8021c86 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021c80:	42bb      	cmp	r3, r7
 8021c82:	f2c0 817c 	blt.w	8021f7e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8021c86:	f11c 0c01 	adds.w	ip, ip, #1
 8021c8a:	f100 816c 	bmi.w	8021f66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8021c8e:	4561      	cmp	r1, ip
 8021c90:	f2c0 8169 	blt.w	8021f66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8021c94:	3301      	adds	r3, #1
 8021c96:	f100 8166 	bmi.w	8021f66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8021c9a:	429a      	cmp	r2, r3
 8021c9c:	f2c0 8163 	blt.w	8021f66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8021ca0:	9b07      	ldr	r3, [sp, #28]
 8021ca2:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8021ca4:	9318      	str	r3, [sp, #96]	@ 0x60
 8021ca6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8021ca8:	2b00      	cmp	r3, #0
 8021caa:	f340 8186 	ble.w	8021fba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8021cae:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8021cb0:	142a      	asrs	r2, r5, #16
 8021cb2:	ea4f 4026 	mov.w	r0, r6, asr #16
 8021cb6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8021cba:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8021cbe:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8021cc2:	f100 81cb 	bmi.w	802205c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8021cc6:	f10e 38ff 	add.w	r8, lr, #4294967295
 8021cca:	4542      	cmp	r2, r8
 8021ccc:	f280 81c6 	bge.w	802205c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8021cd0:	2800      	cmp	r0, #0
 8021cd2:	f2c0 81c3 	blt.w	802205c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8021cd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8021cda:	4540      	cmp	r0, r8
 8021cdc:	f280 81be 	bge.w	802205c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8021ce0:	fa0f f38e 	sxth.w	r3, lr
 8021ce4:	fb00 2203 	mla	r2, r0, r3, r2
 8021ce8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021cea:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8021cee:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8021cf2:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8021cf6:	2900      	cmp	r1, #0
 8021cf8:	f000 81a6 	beq.w	8022048 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8021cfc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8021d00:	900c      	str	r0, [sp, #48]	@ 0x30
 8021d02:	0e00      	lsrs	r0, r0, #24
 8021d04:	9013      	str	r0, [sp, #76]	@ 0x4c
 8021d06:	f1bc 0f00 	cmp.w	ip, #0
 8021d0a:	d00f      	beq.n	8021d2c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8021d0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8021d10:	3b01      	subs	r3, #1
 8021d12:	009b      	lsls	r3, r3, #2
 8021d14:	3304      	adds	r3, #4
 8021d16:	eb08 0003 	add.w	r0, r8, r3
 8021d1a:	f858 3003 	ldr.w	r3, [r8, r3]
 8021d1e:	9308      	str	r3, [sp, #32]
 8021d20:	0e1b      	lsrs	r3, r3, #24
 8021d22:	9311      	str	r3, [sp, #68]	@ 0x44
 8021d24:	6843      	ldr	r3, [r0, #4]
 8021d26:	930d      	str	r3, [sp, #52]	@ 0x34
 8021d28:	0e1b      	lsrs	r3, r3, #24
 8021d2a:	9314      	str	r3, [sp, #80]	@ 0x50
 8021d2c:	b289      	uxth	r1, r1
 8021d2e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8021d30:	fa1f fc8c 	uxth.w	ip, ip
 8021d34:	0108      	lsls	r0, r1, #4
 8021d36:	fb01 f90c 	mul.w	r9, r1, ip
 8021d3a:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8021d3e:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 8021d42:	eba0 0809 	sub.w	r8, r0, r9
 8021d46:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8021d48:	fa1f f18c 	uxth.w	r1, ip
 8021d4c:	fa1f f888 	uxth.w	r8, r8
 8021d50:	1a5b      	subs	r3, r3, r1
 8021d52:	fb08 f000 	mul.w	r0, r8, r0
 8021d56:	b29b      	uxth	r3, r3
 8021d58:	fb03 000e 	mla	r0, r3, lr, r0
 8021d5c:	fb01 0004 	mla	r0, r1, r4, r0
 8021d60:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8021d62:	fb09 0004 	mla	r0, r9, r4, r0
 8021d66:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021d6a:	2800      	cmp	r0, #0
 8021d6c:	f000 80f2 	beq.w	8021f54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8021d70:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8021d74:	d01b      	beq.n	8021dae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8021d76:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 8021d7a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8021d7e:	fb0e fa0a 	mul.w	sl, lr, sl
 8021d82:	fb0e fe02 	mul.w	lr, lr, r2
 8021d86:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8021d8a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8021d8e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8021d92:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8021d96:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021d9a:	4452      	add	r2, sl
 8021d9c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021da0:	0a12      	lsrs	r2, r2, #8
 8021da2:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8021da6:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8021daa:	ea42 020c 	orr.w	r2, r2, ip
 8021dae:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8021db0:	2cff      	cmp	r4, #255	@ 0xff
 8021db2:	d021      	beq.n	8021df8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8021db4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8021db6:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8021dba:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8021dbc:	fb04 fb0b 	mul.w	fp, r4, fp
 8021dc0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8021dc2:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8021dc6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8021dc8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021dcc:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8021dd0:	fb04 fa0a 	mul.w	sl, r4, sl
 8021dd4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021dd8:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8021ddc:	44de      	add	lr, fp
 8021dde:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021de2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021de6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021dea:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021dee:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021df2:	ea4e 040a 	orr.w	r4, lr, sl
 8021df6:	940c      	str	r4, [sp, #48]	@ 0x30
 8021df8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8021dfa:	2cff      	cmp	r4, #255	@ 0xff
 8021dfc:	d021      	beq.n	8021e42 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8021dfe:	9c08      	ldr	r4, [sp, #32]
 8021e00:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8021e04:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8021e06:	fb04 fb0b 	mul.w	fp, r4, fp
 8021e0a:	9c08      	ldr	r4, [sp, #32]
 8021e0c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8021e10:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8021e12:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021e16:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8021e1a:	fb04 fa0a 	mul.w	sl, r4, sl
 8021e1e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021e22:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8021e26:	44de      	add	lr, fp
 8021e28:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021e2c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021e30:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021e34:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021e38:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021e3c:	ea4e 040a 	orr.w	r4, lr, sl
 8021e40:	9408      	str	r4, [sp, #32]
 8021e42:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8021e44:	2cff      	cmp	r4, #255	@ 0xff
 8021e46:	d021      	beq.n	8021e8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8021e48:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8021e4a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8021e4e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8021e50:	fb04 fb0b 	mul.w	fp, r4, fp
 8021e54:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8021e56:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8021e5a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8021e5c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021e60:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8021e64:	fb04 fa0a 	mul.w	sl, r4, sl
 8021e68:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021e6c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8021e70:	44de      	add	lr, fp
 8021e72:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021e76:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021e7a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021e7e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021e82:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021e86:	ea4e 040a 	orr.w	r4, lr, sl
 8021e8a:	940d      	str	r4, [sp, #52]	@ 0x34
 8021e8c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8021e8e:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8021e92:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8021e96:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8021e9a:	9c08      	ldr	r4, [sp, #32]
 8021e9c:	fb08 fc0c 	mul.w	ip, r8, ip
 8021ea0:	fb03 cc0e 	mla	ip, r3, lr, ip
 8021ea4:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8021ea8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8021eaa:	fb01 cc0e 	mla	ip, r1, lr, ip
 8021eae:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8021eb2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8021eb4:	fb09 cc0e 	mla	ip, r9, lr, ip
 8021eb8:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8021ebc:	fb08 f80e 	mul.w	r8, r8, lr
 8021ec0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021ec4:	fb03 8202 	mla	r2, r3, r2, r8
 8021ec8:	9b08      	ldr	r3, [sp, #32]
 8021eca:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021ece:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 8021ed2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021ed4:	fb01 220a 	mla	r2, r1, sl, r2
 8021ed8:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 8021edc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021ede:	fb09 2901 	mla	r9, r9, r1, r2
 8021ee2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8021ee4:	4343      	muls	r3, r0
 8021ee6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021eea:	1c58      	adds	r0, r3, #1
 8021eec:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8021ef0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021ef4:	783b      	ldrb	r3, [r7, #0]
 8021ef6:	ea4c 0c09 	orr.w	ip, ip, r9
 8021efa:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8021efe:	fa5f f28c 	uxtb.w	r2, ip
 8021f02:	b2c0      	uxtb	r0, r0
 8021f04:	fb12 f201 	smulbb	r2, r2, r1
 8021f08:	fb03 2300 	mla	r3, r3, r0, r2
 8021f0c:	b29b      	uxth	r3, r3
 8021f0e:	1c5a      	adds	r2, r3, #1
 8021f10:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021f14:	787a      	ldrb	r2, [r7, #1]
 8021f16:	fb12 f200 	smulbb	r2, r2, r0
 8021f1a:	121b      	asrs	r3, r3, #8
 8021f1c:	703b      	strb	r3, [r7, #0]
 8021f1e:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8021f22:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8021f26:	fb03 2301 	mla	r3, r3, r1, r2
 8021f2a:	b29b      	uxth	r3, r3
 8021f2c:	1c5a      	adds	r2, r3, #1
 8021f2e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021f32:	121b      	asrs	r3, r3, #8
 8021f34:	707b      	strb	r3, [r7, #1]
 8021f36:	78bb      	ldrb	r3, [r7, #2]
 8021f38:	fb13 f000 	smulbb	r0, r3, r0
 8021f3c:	fb0c 0c01 	mla	ip, ip, r1, r0
 8021f40:	fa1f fc8c 	uxth.w	ip, ip
 8021f44:	f10c 0301 	add.w	r3, ip, #1
 8021f48:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8021f4c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8021f50:	f887 c002 	strb.w	ip, [r7, #2]
 8021f54:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8021f56:	3703      	adds	r7, #3
 8021f58:	441d      	add	r5, r3
 8021f5a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021f5c:	441e      	add	r6, r3
 8021f5e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8021f60:	3b01      	subs	r3, #1
 8021f62:	9318      	str	r3, [sp, #96]	@ 0x60
 8021f64:	e69f      	b.n	8021ca6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021f66:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8021f68:	441d      	add	r5, r3
 8021f6a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021f6c:	441e      	add	r6, r3
 8021f6e:	9b07      	ldr	r3, [sp, #28]
 8021f70:	3b01      	subs	r3, #1
 8021f72:	9307      	str	r3, [sp, #28]
 8021f74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021f76:	3303      	adds	r3, #3
 8021f78:	930a      	str	r3, [sp, #40]	@ 0x28
 8021f7a:	e674      	b.n	8021c66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8021f7c:	d025      	beq.n	8021fca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8021f7e:	9b07      	ldr	r3, [sp, #28]
 8021f80:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8021f82:	3b01      	subs	r3, #1
 8021f84:	fb00 5003 	mla	r0, r0, r3, r5
 8021f88:	1400      	asrs	r0, r0, #16
 8021f8a:	f53f ae89 	bmi.w	8021ca0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021f8e:	3901      	subs	r1, #1
 8021f90:	4288      	cmp	r0, r1
 8021f92:	f6bf ae85 	bge.w	8021ca0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021f96:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8021f98:	fb01 6303 	mla	r3, r1, r3, r6
 8021f9c:	141b      	asrs	r3, r3, #16
 8021f9e:	f53f ae7f 	bmi.w	8021ca0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021fa2:	3a01      	subs	r2, #1
 8021fa4:	4293      	cmp	r3, r2
 8021fa6:	f6bf ae7b 	bge.w	8021ca0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021faa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021fac:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8021fb0:	f103 0e03 	add.w	lr, r3, #3
 8021fb4:	f1bb 0f00 	cmp.w	fp, #0
 8021fb8:	dc6e      	bgt.n	8022098 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8021fba:	9b07      	ldr	r3, [sp, #28]
 8021fbc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021fc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021fc2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021fc6:	4423      	add	r3, r4
 8021fc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8021fca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8021fcc:	2b00      	cmp	r3, #0
 8021fce:	f340 81ab 	ble.w	8022328 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8021fd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021fd6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8021fd8:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021fdc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021fe0:	eef0 6a62 	vmov.f32	s13, s5
 8021fe4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021fe8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021fec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021ff0:	ee16 5a90 	vmov	r5, s13
 8021ff4:	eef0 6a43 	vmov.f32	s13, s6
 8021ff8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021ffc:	ee16 6a90 	vmov	r6, s13
 8022000:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022004:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022008:	ee77 2a62 	vsub.f32	s5, s14, s5
 802200c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022010:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022014:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022018:	ee12 2a90 	vmov	r2, s5
 802201c:	eef0 2a47 	vmov.f32	s5, s14
 8022020:	fb92 f3f3 	sdiv	r3, r2, r3
 8022024:	ee13 2a10 	vmov	r2, s6
 8022028:	9329      	str	r3, [sp, #164]	@ 0xa4
 802202a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802202c:	eeb0 3a67 	vmov.f32	s6, s15
 8022030:	fb92 f3f3 	sdiv	r3, r2, r3
 8022034:	932a      	str	r3, [sp, #168]	@ 0xa8
 8022036:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8022038:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802203a:	3b01      	subs	r3, #1
 802203c:	9317      	str	r3, [sp, #92]	@ 0x5c
 802203e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022040:	bf08      	it	eq
 8022042:	4613      	moveq	r3, r2
 8022044:	9307      	str	r3, [sp, #28]
 8022046:	e600      	b.n	8021c4a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8022048:	f1bc 0f00 	cmp.w	ip, #0
 802204c:	f43f ae6e 	beq.w	8021d2c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8022050:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8022054:	9308      	str	r3, [sp, #32]
 8022056:	0e1b      	lsrs	r3, r3, #24
 8022058:	9311      	str	r3, [sp, #68]	@ 0x44
 802205a:	e667      	b.n	8021d2c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802205c:	f112 0801 	adds.w	r8, r2, #1
 8022060:	f53f af78 	bmi.w	8021f54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8022064:	45c6      	cmp	lr, r8
 8022066:	f6ff af75 	blt.w	8021f54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802206a:	f110 0801 	adds.w	r8, r0, #1
 802206e:	f53f af71 	bmi.w	8021f54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8022072:	4543      	cmp	r3, r8
 8022074:	f6ff af6e 	blt.w	8021f54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8022078:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 802207a:	b21b      	sxth	r3, r3
 802207c:	9201      	str	r2, [sp, #4]
 802207e:	9300      	str	r3, [sp, #0]
 8022080:	fa0f f38e 	sxth.w	r3, lr
 8022084:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8022086:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802208a:	e9cd c404 	strd	ip, r4, [sp, #16]
 802208e:	4639      	mov	r1, r7
 8022090:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8022092:	f7ff fc79 	bl	8021988 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8022096:	e75d      	b.n	8021f54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8022098:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802209a:	142f      	asrs	r7, r5, #16
 802209c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802209e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80220a2:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80220a6:	1433      	asrs	r3, r6, #16
 80220a8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80220ac:	fb02 7303 	mla	r3, r2, r3, r7
 80220b0:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 80220b4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80220b8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80220bc:	2900      	cmp	r1, #0
 80220be:	f000 812a 	beq.w	8022316 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 80220c2:	687c      	ldr	r4, [r7, #4]
 80220c4:	940e      	str	r4, [sp, #56]	@ 0x38
 80220c6:	0e24      	lsrs	r4, r4, #24
 80220c8:	9415      	str	r4, [sp, #84]	@ 0x54
 80220ca:	b178      	cbz	r0, 80220ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80220cc:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80220d0:	3a01      	subs	r2, #1
 80220d2:	0092      	lsls	r2, r2, #2
 80220d4:	3204      	adds	r2, #4
 80220d6:	eb07 0802 	add.w	r8, r7, r2
 80220da:	58ba      	ldr	r2, [r7, r2]
 80220dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80220de:	0e12      	lsrs	r2, r2, #24
 80220e0:	9212      	str	r2, [sp, #72]	@ 0x48
 80220e2:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80220e6:	920f      	str	r2, [sp, #60]	@ 0x3c
 80220e8:	0e12      	lsrs	r2, r2, #24
 80220ea:	9216      	str	r2, [sp, #88]	@ 0x58
 80220ec:	b289      	uxth	r1, r1
 80220ee:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80220f0:	b280      	uxth	r0, r0
 80220f2:	fb01 f900 	mul.w	r9, r1, r0
 80220f6:	0109      	lsls	r1, r1, #4
 80220f8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80220fc:	eba1 0809 	sub.w	r8, r1, r9
 8022100:	f5c1 7280 	rsb	r2, r1, #256	@ 0x100
 8022104:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8022106:	b280      	uxth	r0, r0
 8022108:	fa1f f888 	uxth.w	r8, r8
 802210c:	1a12      	subs	r2, r2, r0
 802210e:	fb08 f101 	mul.w	r1, r8, r1
 8022112:	b292      	uxth	r2, r2
 8022114:	fb02 110c 	mla	r1, r2, ip, r1
 8022118:	fb00 1104 	mla	r1, r0, r4, r1
 802211c:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802211e:	fb09 1104 	mla	r1, r9, r4, r1
 8022122:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8022126:	2900      	cmp	r1, #0
 8022128:	f000 80ec 	beq.w	8022304 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 802212c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8022130:	d019      	beq.n	8022166 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8022132:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8022136:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802213a:	fb0c fa0a 	mul.w	sl, ip, sl
 802213e:	fb0c fc03 	mul.w	ip, ip, r3
 8022142:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8022146:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802214a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802214e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8022152:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8022156:	4453      	add	r3, sl
 8022158:	0a3f      	lsrs	r7, r7, #8
 802215a:	0a1b      	lsrs	r3, r3, #8
 802215c:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8022160:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8022164:	433b      	orrs	r3, r7
 8022166:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8022168:	2cff      	cmp	r4, #255	@ 0xff
 802216a:	d020      	beq.n	80221ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 802216c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802216e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8022172:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8022174:	4367      	muls	r7, r4
 8022176:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8022178:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802217c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8022180:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8022182:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8022186:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802218a:	fb04 fa0a 	mul.w	sl, r4, sl
 802218e:	44bc      	add	ip, r7
 8022190:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8022194:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022198:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802219c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80221a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80221a4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80221a8:	ea4c 040a 	orr.w	r4, ip, sl
 80221ac:	940e      	str	r4, [sp, #56]	@ 0x38
 80221ae:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80221b0:	2cff      	cmp	r4, #255	@ 0xff
 80221b2:	d020      	beq.n	80221f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 80221b4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80221b6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80221ba:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80221bc:	4367      	muls	r7, r4
 80221be:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80221c0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80221c4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80221c8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80221ca:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80221ce:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80221d2:	fb04 fa0a 	mul.w	sl, r4, sl
 80221d6:	44bc      	add	ip, r7
 80221d8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80221dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80221e0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80221e4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80221e8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80221ec:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80221f0:	ea4c 040a 	orr.w	r4, ip, sl
 80221f4:	9409      	str	r4, [sp, #36]	@ 0x24
 80221f6:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80221f8:	2cff      	cmp	r4, #255	@ 0xff
 80221fa:	d020      	beq.n	802223e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 80221fc:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80221fe:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8022202:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8022204:	4367      	muls	r7, r4
 8022206:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8022208:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802220c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8022210:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8022212:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8022216:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802221a:	fb04 fa0a 	mul.w	sl, r4, sl
 802221e:	44bc      	add	ip, r7
 8022220:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8022224:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022228:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802222c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022230:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022234:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022238:	ea4c 040a 	orr.w	r4, ip, sl
 802223c:	940f      	str	r4, [sp, #60]	@ 0x3c
 802223e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8022240:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8022244:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8022248:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802224c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802224e:	fb08 f707 	mul.w	r7, r8, r7
 8022252:	fb02 770c 	mla	r7, r2, ip, r7
 8022256:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802225a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802225c:	fb00 770c 	mla	r7, r0, ip, r7
 8022260:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8022264:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8022266:	fb09 770c 	mla	r7, r9, ip, r7
 802226a:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 802226e:	fb08 f80c 	mul.w	r8, r8, ip
 8022272:	0a3f      	lsrs	r7, r7, #8
 8022274:	fb02 8303 	mla	r3, r2, r3, r8
 8022278:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802227a:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 802227e:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8022282:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8022284:	fb00 330a 	mla	r3, r0, sl, r3
 8022288:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 802228c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802228e:	fb09 3c0c 	mla	ip, r9, ip, r3
 8022292:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022294:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022298:	434b      	muls	r3, r1
 802229a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802229e:	1c59      	adds	r1, r3, #1
 80222a0:	ea47 070c 	orr.w	r7, r7, ip
 80222a4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80222a8:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80222ac:	b2fa      	uxtb	r2, r7
 80222ae:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80222b2:	fb12 f200 	smulbb	r2, r2, r0
 80222b6:	b2c9      	uxtb	r1, r1
 80222b8:	fb03 2301 	mla	r3, r3, r1, r2
 80222bc:	b29b      	uxth	r3, r3
 80222be:	1c5a      	adds	r2, r3, #1
 80222c0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80222c4:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80222c8:	fb12 f201 	smulbb	r2, r2, r1
 80222cc:	121b      	asrs	r3, r3, #8
 80222ce:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80222d2:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80222d6:	0c3f      	lsrs	r7, r7, #16
 80222d8:	fb03 2300 	mla	r3, r3, r0, r2
 80222dc:	b29b      	uxth	r3, r3
 80222de:	1c5a      	adds	r2, r3, #1
 80222e0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80222e4:	121b      	asrs	r3, r3, #8
 80222e6:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80222ea:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80222ee:	fb13 f101 	smulbb	r1, r3, r1
 80222f2:	fb07 1700 	mla	r7, r7, r0, r1
 80222f6:	b2bf      	uxth	r7, r7
 80222f8:	1c79      	adds	r1, r7, #1
 80222fa:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80222fe:	123f      	asrs	r7, r7, #8
 8022300:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8022304:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8022306:	f10e 0e03 	add.w	lr, lr, #3
 802230a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802230e:	441d      	add	r5, r3
 8022310:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8022312:	441e      	add	r6, r3
 8022314:	e64e      	b.n	8021fb4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8022316:	2800      	cmp	r0, #0
 8022318:	f43f aee8 	beq.w	80220ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 802231c:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8022320:	9209      	str	r2, [sp, #36]	@ 0x24
 8022322:	0e12      	lsrs	r2, r2, #24
 8022324:	9212      	str	r2, [sp, #72]	@ 0x48
 8022326:	e6e1      	b.n	80220ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8022328:	b01d      	add	sp, #116	@ 0x74
 802232a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802232e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 802232e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022332:	b087      	sub	sp, #28
 8022334:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 8022338:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 802233c:	fb05 7003 	mla	r0, r5, r3, r7
 8022340:	2d00      	cmp	r5, #0
 8022342:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 8022346:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 802234a:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 802234e:	f2c0 810a 	blt.w	8022566 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8022352:	45a8      	cmp	r8, r5
 8022354:	f340 8107 	ble.w	8022566 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8022358:	2f00      	cmp	r7, #0
 802235a:	f2c0 8102 	blt.w	8022562 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 802235e:	42bb      	cmp	r3, r7
 8022360:	f340 80ff 	ble.w	8022562 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8022364:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8022368:	1c7a      	adds	r2, r7, #1
 802236a:	f100 80ff 	bmi.w	802256c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 802236e:	4293      	cmp	r3, r2
 8022370:	f340 80fc 	ble.w	802256c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8022374:	2c00      	cmp	r4, #0
 8022376:	f000 80fb 	beq.w	8022570 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 802237a:	f8dc 0004 	ldr.w	r0, [ip, #4]
 802237e:	3501      	adds	r5, #1
 8022380:	f100 80fa 	bmi.w	8022578 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8022384:	45a8      	cmp	r8, r5
 8022386:	f340 80f7 	ble.w	8022578 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 802238a:	f1be 0f00 	cmp.w	lr, #0
 802238e:	f000 80f6 	beq.w	802257e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 8022392:	2f00      	cmp	r7, #0
 8022394:	f2c0 80ee 	blt.w	8022574 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8022398:	42bb      	cmp	r3, r7
 802239a:	f340 80eb 	ble.w	8022574 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 802239e:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 80223a2:	3701      	adds	r7, #1
 80223a4:	f100 80ee 	bmi.w	8022584 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 80223a8:	42bb      	cmp	r3, r7
 80223aa:	f340 80eb 	ble.w	8022584 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 80223ae:	2c00      	cmp	r4, #0
 80223b0:	f000 80ea 	beq.w	8022588 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 80223b4:	3301      	adds	r3, #1
 80223b6:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80223ba:	fa1f fc84 	uxth.w	ip, r4
 80223be:	fa1f fe8e 	uxth.w	lr, lr
 80223c2:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80223c6:	fb0c f90e 	mul.w	r9, ip, lr
 80223ca:	0e13      	lsrs	r3, r2, #24
 80223cc:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80223d0:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 80223d4:	9302      	str	r3, [sp, #8]
 80223d6:	ebac 0709 	sub.w	r7, ip, r9
 80223da:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 80223de:	fa1f f48e 	uxth.w	r4, lr
 80223e2:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 80223e6:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80223ea:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 80223ee:	fb0a fe0e 	mul.w	lr, sl, lr
 80223f2:	1b1b      	subs	r3, r3, r4
 80223f4:	fb0a f606 	mul.w	r6, sl, r6
 80223f8:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80223fc:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022400:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 8022404:	b29b      	uxth	r3, r3
 8022406:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802240a:	b2bf      	uxth	r7, r7
 802240c:	9301      	str	r3, [sp, #4]
 802240e:	44e6      	add	lr, ip
 8022410:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8022414:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022418:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 802241c:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 8022420:	9303      	str	r3, [sp, #12]
 8022422:	0a33      	lsrs	r3, r6, #8
 8022424:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 8022428:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802242c:	9304      	str	r3, [sp, #16]
 802242e:	fb0b f606 	mul.w	r6, fp, r6
 8022432:	fb0b f000 	mul.w	r0, fp, r0
 8022436:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 802243a:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 802243e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022442:	44b6      	add	lr, r6
 8022444:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 8022448:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 802244c:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 8022450:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8022454:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022458:	fb08 f606 	mul.w	r6, r8, r6
 802245c:	0a03      	lsrs	r3, r0, #8
 802245e:	fb08 f505 	mul.w	r5, r8, r5
 8022462:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022466:	0a30      	lsrs	r0, r6, #8
 8022468:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 802246c:	9305      	str	r3, [sp, #20]
 802246e:	0e13      	lsrs	r3, r2, #24
 8022470:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8022474:	fb0e fe07 	mul.w	lr, lr, r7
 8022478:	4430      	add	r0, r6
 802247a:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 802247e:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8022482:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 8022486:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802248a:	0a00      	lsrs	r0, r0, #8
 802248c:	435e      	muls	r6, r3
 802248e:	0a2d      	lsrs	r5, r5, #8
 8022490:	435a      	muls	r2, r3
 8022492:	9b03      	ldr	r3, [sp, #12]
 8022494:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8022498:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 802249c:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80224a0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80224a4:	44b4      	add	ip, r6
 80224a6:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 80224aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80224ae:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 80224b2:	9e01      	ldr	r6, [sp, #4]
 80224b4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80224b8:	fb03 ee06 	mla	lr, r3, r6, lr
 80224bc:	9b04      	ldr	r3, [sp, #16]
 80224be:	0a12      	lsrs	r2, r2, #8
 80224c0:	fb0c ee09 	mla	lr, ip, r9, lr
 80224c4:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 80224c8:	9b05      	ldr	r3, [sp, #20]
 80224ca:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80224ce:	fb00 ee04 	mla	lr, r0, r4, lr
 80224d2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80224d6:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 80224da:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 80224de:	9b01      	ldr	r3, [sp, #4]
 80224e0:	fb07 fe0e 	mul.w	lr, r7, lr
 80224e4:	fb07 f70b 	mul.w	r7, r7, fp
 80224e8:	fb03 ee06 	mla	lr, r3, r6, lr
 80224ec:	fb03 730a 	mla	r3, r3, sl, r7
 80224f0:	fb09 e202 	mla	r2, r9, r2, lr
 80224f4:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 80224f8:	fb04 2e0e 	mla	lr, r4, lr, r2
 80224fc:	fb04 3408 	mla	r4, r4, r8, r3
 8022500:	9b02      	ldr	r3, [sp, #8]
 8022502:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022506:	fb09 4903 	mla	r9, r9, r3, r4
 802250a:	780b      	ldrb	r3, [r1, #0]
 802250c:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8022510:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8022514:	ea40 0e0e 	orr.w	lr, r0, lr
 8022518:	fa5f f989 	uxtb.w	r9, r9
 802251c:	fb03 f209 	mul.w	r2, r3, r9
 8022520:	1c53      	adds	r3, r2, #1
 8022522:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022526:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 802252a:	700b      	strb	r3, [r1, #0]
 802252c:	784b      	ldrb	r3, [r1, #1]
 802252e:	fb03 f309 	mul.w	r3, r3, r9
 8022532:	1c5a      	adds	r2, r3, #1
 8022534:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022538:	ea4f 231e 	mov.w	r3, lr, lsr #8
 802253c:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8022540:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022544:	704b      	strb	r3, [r1, #1]
 8022546:	788b      	ldrb	r3, [r1, #2]
 8022548:	fb03 f909 	mul.w	r9, r3, r9
 802254c:	f109 0301 	add.w	r3, r9, #1
 8022550:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8022554:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 8022558:	f881 e002 	strb.w	lr, [r1, #2]
 802255c:	b007      	add	sp, #28
 802255e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022562:	2600      	movs	r6, #0
 8022564:	e700      	b.n	8022368 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 8022566:	2000      	movs	r0, #0
 8022568:	4606      	mov	r6, r0
 802256a:	e708      	b.n	802237e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 802256c:	2000      	movs	r0, #0
 802256e:	e706      	b.n	802237e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8022570:	4620      	mov	r0, r4
 8022572:	e704      	b.n	802237e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8022574:	2500      	movs	r5, #0
 8022576:	e714      	b.n	80223a2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 8022578:	2200      	movs	r2, #0
 802257a:	4615      	mov	r5, r2
 802257c:	e71d      	b.n	80223ba <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802257e:	4672      	mov	r2, lr
 8022580:	4675      	mov	r5, lr
 8022582:	e71a      	b.n	80223ba <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8022584:	2200      	movs	r2, #0
 8022586:	e718      	b.n	80223ba <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8022588:	4622      	mov	r2, r4
 802258a:	e716      	b.n	80223ba <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0802258c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802258c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022590:	b099      	sub	sp, #100	@ 0x64
 8022592:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
 8022596:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8022598:	9017      	str	r0, [sp, #92]	@ 0x5c
 802259a:	9306      	str	r3, [sp, #24]
 802259c:	6850      	ldr	r0, [r2, #4]
 802259e:	6812      	ldr	r2, [r2, #0]
 80225a0:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 80225a4:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	@ 0x8c
 80225a8:	fb00 1303 	mla	r3, r0, r3, r1
 80225ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80225b0:	18d3      	adds	r3, r2, r3
 80225b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80225b4:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80225b6:	681b      	ldr	r3, [r3, #0]
 80225b8:	930e      	str	r3, [sp, #56]	@ 0x38
 80225ba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80225bc:	2b00      	cmp	r3, #0
 80225be:	dc03      	bgt.n	80225c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80225c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80225c2:	2b00      	cmp	r3, #0
 80225c4:	f340 8360 	ble.w	8022c88 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 80225c8:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80225ca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80225ce:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80225d2:	1e48      	subs	r0, r1, #1
 80225d4:	1e57      	subs	r7, r2, #1
 80225d6:	9b06      	ldr	r3, [sp, #24]
 80225d8:	2b00      	cmp	r3, #0
 80225da:	f340 817b 	ble.w	80228d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 80225de:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80225e2:	ea4f 4326 	mov.w	r3, r6, asr #16
 80225e6:	d406      	bmi.n	80225f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80225e8:	4584      	cmp	ip, r0
 80225ea:	da04      	bge.n	80225f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80225ec:	2b00      	cmp	r3, #0
 80225ee:	db02      	blt.n	80225f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80225f0:	42bb      	cmp	r3, r7
 80225f2:	f2c0 8170 	blt.w	80228d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80225f6:	f11c 0c01 	adds.w	ip, ip, #1
 80225fa:	f100 8160 	bmi.w	80228be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80225fe:	4561      	cmp	r1, ip
 8022600:	f2c0 815d 	blt.w	80228be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8022604:	3301      	adds	r3, #1
 8022606:	f100 815a 	bmi.w	80228be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 802260a:	429a      	cmp	r2, r3
 802260c:	f2c0 8157 	blt.w	80228be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8022610:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8022614:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8022616:	f1b8 0f00 	cmp.w	r8, #0
 802261a:	f340 8179 	ble.w	8022910 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 802261e:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8022620:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8022624:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8022626:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802262a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802262e:	142a      	asrs	r2, r5, #16
 8022630:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022634:	689b      	ldr	r3, [r3, #8]
 8022636:	f100 81be 	bmi.w	80229b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802263a:	f103 39ff 	add.w	r9, r3, #4294967295
 802263e:	454a      	cmp	r2, r9
 8022640:	f280 81b9 	bge.w	80229b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8022644:	f1bc 0f00 	cmp.w	ip, #0
 8022648:	f2c0 81b5 	blt.w	80229b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802264c:	f10e 39ff 	add.w	r9, lr, #4294967295
 8022650:	45cc      	cmp	ip, r9
 8022652:	f280 81b0 	bge.w	80229b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8022656:	b21b      	sxth	r3, r3
 8022658:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802265a:	fb0c 2203 	mla	r2, ip, r3, r2
 802265e:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8022662:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8022666:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802266a:	2900      	cmp	r1, #0
 802266c:	f000 8197 	beq.w	802299e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8022670:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8022674:	940a      	str	r4, [sp, #40]	@ 0x28
 8022676:	0e24      	lsrs	r4, r4, #24
 8022678:	9411      	str	r4, [sp, #68]	@ 0x44
 802267a:	b180      	cbz	r0, 802269e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 802267c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8022680:	3b01      	subs	r3, #1
 8022682:	009b      	lsls	r3, r3, #2
 8022684:	3304      	adds	r3, #4
 8022686:	eb09 0c03 	add.w	ip, r9, r3
 802268a:	f859 3003 	ldr.w	r3, [r9, r3]
 802268e:	9307      	str	r3, [sp, #28]
 8022690:	0e1b      	lsrs	r3, r3, #24
 8022692:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022694:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8022698:	930b      	str	r3, [sp, #44]	@ 0x2c
 802269a:	0e1b      	lsrs	r3, r3, #24
 802269c:	9312      	str	r3, [sp, #72]	@ 0x48
 802269e:	b289      	uxth	r1, r1
 80226a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80226a2:	b280      	uxth	r0, r0
 80226a4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80226a6:	fb01 fa00 	mul.w	sl, r1, r0
 80226aa:	0109      	lsls	r1, r1, #4
 80226ac:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80226b0:	eba1 090a 	sub.w	r9, r1, sl
 80226b4:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80226b8:	b280      	uxth	r0, r0
 80226ba:	fa1f f989 	uxth.w	r9, r9
 80226be:	1a09      	subs	r1, r1, r0
 80226c0:	fb09 f303 	mul.w	r3, r9, r3
 80226c4:	b289      	uxth	r1, r1
 80226c6:	fb01 330e 	mla	r3, r1, lr, r3
 80226ca:	fb00 3304 	mla	r3, r0, r4, r3
 80226ce:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80226d0:	fb0a 3304 	mla	r3, sl, r4, r3
 80226d4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80226d8:	2b00      	cmp	r3, #0
 80226da:	f000 80e8 	beq.w	80228ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80226de:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80226e2:	d01b      	beq.n	802271c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 80226e4:	f002 1bff 	and.w	fp, r2, #16711935	@ 0xff00ff
 80226e8:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80226ec:	fb0e fb0b 	mul.w	fp, lr, fp
 80226f0:	fb0e fe02 	mul.w	lr, lr, r2
 80226f4:	ea4f 221b 	mov.w	r2, fp, lsr #8
 80226f8:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80226fc:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8022700:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8022704:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8022708:	445a      	add	r2, fp
 802270a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802270e:	0a12      	lsrs	r2, r2, #8
 8022710:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8022714:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8022718:	ea42 020c 	orr.w	r2, r2, ip
 802271c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802271e:	2cff      	cmp	r4, #255	@ 0xff
 8022720:	d021      	beq.n	8022766 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8022722:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8022724:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8022728:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802272a:	fb04 fc0c 	mul.w	ip, r4, ip
 802272e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8022730:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022734:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8022738:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802273a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802273e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022742:	fb04 fb0b 	mul.w	fp, r4, fp
 8022746:	44e6      	add	lr, ip
 8022748:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 802274c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022750:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8022754:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022758:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802275c:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8022760:	ea4e 040b 	orr.w	r4, lr, fp
 8022764:	940a      	str	r4, [sp, #40]	@ 0x28
 8022766:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8022768:	2cff      	cmp	r4, #255	@ 0xff
 802276a:	d021      	beq.n	80227b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802276c:	9c07      	ldr	r4, [sp, #28]
 802276e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8022772:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8022774:	fb04 fc0c 	mul.w	ip, r4, ip
 8022778:	9c07      	ldr	r4, [sp, #28]
 802277a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802277e:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8022782:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8022784:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8022788:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802278c:	fb04 fb0b 	mul.w	fp, r4, fp
 8022790:	44e6      	add	lr, ip
 8022792:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8022796:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802279a:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 802279e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80227a2:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80227a6:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 80227aa:	ea4e 040b 	orr.w	r4, lr, fp
 80227ae:	9407      	str	r4, [sp, #28]
 80227b0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80227b2:	2cff      	cmp	r4, #255	@ 0xff
 80227b4:	d021      	beq.n	80227fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 80227b6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80227b8:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80227bc:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80227be:	fb04 fc0c 	mul.w	ip, r4, ip
 80227c2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80227c4:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80227c8:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 80227cc:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80227ce:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80227d2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80227d6:	fb04 fb0b 	mul.w	fp, r4, fp
 80227da:	44e6      	add	lr, ip
 80227dc:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 80227e0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80227e4:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80227e8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80227ec:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80227f0:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 80227f4:	ea4e 040b 	orr.w	r4, lr, fp
 80227f8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80227fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80227fc:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8022800:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8022804:	2bff      	cmp	r3, #255	@ 0xff
 8022806:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802280a:	9c07      	ldr	r4, [sp, #28]
 802280c:	fb09 fc0c 	mul.w	ip, r9, ip
 8022810:	fb01 cc0e 	mla	ip, r1, lr, ip
 8022814:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8022818:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802281a:	fb00 cc0e 	mla	ip, r0, lr, ip
 802281e:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8022822:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8022824:	fb0a cc0e 	mla	ip, sl, lr, ip
 8022828:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 802282c:	fb09 f90e 	mul.w	r9, r9, lr
 8022830:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022834:	fb01 9202 	mla	r2, r1, r2, r9
 8022838:	9907      	ldr	r1, [sp, #28]
 802283a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802283e:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 8022842:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8022844:	fb00 220b 	mla	r2, r0, fp, r2
 8022848:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 802284c:	fb0a 2a00 	mla	sl, sl, r0, r2
 8022850:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022854:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022858:	ea4c 0c0a 	orr.w	ip, ip, sl
 802285c:	fa5f f08c 	uxtb.w	r0, ip
 8022860:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8022864:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8022868:	f000 80a2 	beq.w	80229b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 802286c:	43db      	mvns	r3, r3
 802286e:	783a      	ldrb	r2, [r7, #0]
 8022870:	f897 a002 	ldrb.w	sl, [r7, #2]
 8022874:	b2db      	uxtb	r3, r3
 8022876:	fb02 fe03 	mul.w	lr, r2, r3
 802287a:	fb0a fa03 	mul.w	sl, sl, r3
 802287e:	f10e 0201 	add.w	r2, lr, #1
 8022882:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8022886:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802288a:	703a      	strb	r2, [r7, #0]
 802288c:	787a      	ldrb	r2, [r7, #1]
 802288e:	fb02 f003 	mul.w	r0, r2, r3
 8022892:	f10a 0301 	add.w	r3, sl, #1
 8022896:	1c42      	adds	r2, r0, #1
 8022898:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 802289c:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80228a0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80228a4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80228a8:	707a      	strb	r2, [r7, #1]
 80228aa:	f887 c002 	strb.w	ip, [r7, #2]
 80228ae:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80228b0:	3703      	adds	r7, #3
 80228b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80228b6:	441d      	add	r5, r3
 80228b8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80228ba:	441e      	add	r6, r3
 80228bc:	e6ab      	b.n	8022616 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80228be:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80228c0:	441d      	add	r5, r3
 80228c2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80228c4:	441e      	add	r6, r3
 80228c6:	9b06      	ldr	r3, [sp, #24]
 80228c8:	3b01      	subs	r3, #1
 80228ca:	9306      	str	r3, [sp, #24]
 80228cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80228ce:	3303      	adds	r3, #3
 80228d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80228d2:	e680      	b.n	80225d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80228d4:	d024      	beq.n	8022920 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80228d6:	9b06      	ldr	r3, [sp, #24]
 80228d8:	9825      	ldr	r0, [sp, #148]	@ 0x94
 80228da:	3b01      	subs	r3, #1
 80228dc:	fb00 5003 	mla	r0, r0, r3, r5
 80228e0:	1400      	asrs	r0, r0, #16
 80228e2:	f53f ae95 	bmi.w	8022610 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80228e6:	3901      	subs	r1, #1
 80228e8:	4288      	cmp	r0, r1
 80228ea:	f6bf ae91 	bge.w	8022610 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80228ee:	9926      	ldr	r1, [sp, #152]	@ 0x98
 80228f0:	fb01 6303 	mla	r3, r1, r3, r6
 80228f4:	141b      	asrs	r3, r3, #16
 80228f6:	f53f ae8b 	bmi.w	8022610 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80228fa:	3a01      	subs	r2, #1
 80228fc:	4293      	cmp	r3, r2
 80228fe:	f6bf ae87 	bge.w	8022610 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022902:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022904:	f8dd b018 	ldr.w	fp, [sp, #24]
 8022908:	1cdf      	adds	r7, r3, #3
 802290a:	f1bb 0f00 	cmp.w	fp, #0
 802290e:	dc6e      	bgt.n	80229ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8022910:	9b06      	ldr	r3, [sp, #24]
 8022912:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022918:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802291c:	4423      	add	r3, r4
 802291e:	9309      	str	r3, [sp, #36]	@ 0x24
 8022920:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8022922:	2b00      	cmp	r3, #0
 8022924:	f340 81b0 	ble.w	8022c88 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8022928:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802292c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802292e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022932:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022936:	eef0 6a62 	vmov.f32	s13, s5
 802293a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802293e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022942:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022946:	ee16 5a90 	vmov	r5, s13
 802294a:	eef0 6a43 	vmov.f32	s13, s6
 802294e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022952:	ee16 6a90 	vmov	r6, s13
 8022956:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802295a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802295e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022962:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022966:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802296a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802296e:	ee12 2a90 	vmov	r2, s5
 8022972:	eef0 2a47 	vmov.f32	s5, s14
 8022976:	fb92 f3f3 	sdiv	r3, r2, r3
 802297a:	ee13 2a10 	vmov	r2, s6
 802297e:	9325      	str	r3, [sp, #148]	@ 0x94
 8022980:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8022982:	eeb0 3a67 	vmov.f32	s6, s15
 8022986:	fb92 f3f3 	sdiv	r3, r2, r3
 802298a:	9326      	str	r3, [sp, #152]	@ 0x98
 802298c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802298e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8022990:	3b01      	subs	r3, #1
 8022992:	9315      	str	r3, [sp, #84]	@ 0x54
 8022994:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8022996:	bf08      	it	eq
 8022998:	4613      	moveq	r3, r2
 802299a:	9306      	str	r3, [sp, #24]
 802299c:	e60d      	b.n	80225ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802299e:	2800      	cmp	r0, #0
 80229a0:	f43f ae7d 	beq.w	802269e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 80229a4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80229a8:	9307      	str	r3, [sp, #28]
 80229aa:	0e1b      	lsrs	r3, r3, #24
 80229ac:	930f      	str	r3, [sp, #60]	@ 0x3c
 80229ae:	e676      	b.n	802269e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 80229b0:	7038      	strb	r0, [r7, #0]
 80229b2:	7079      	strb	r1, [r7, #1]
 80229b4:	e779      	b.n	80228aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80229b6:	f112 0901 	adds.w	r9, r2, #1
 80229ba:	f53f af78 	bmi.w	80228ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80229be:	454b      	cmp	r3, r9
 80229c0:	f6ff af75 	blt.w	80228ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80229c4:	f11c 0901 	adds.w	r9, ip, #1
 80229c8:	f53f af71 	bmi.w	80228ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80229cc:	45ce      	cmp	lr, r9
 80229ce:	f6ff af6e 	blt.w	80228ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80229d2:	b21b      	sxth	r3, r3
 80229d4:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 80229d8:	fa0f f28e 	sxth.w	r2, lr
 80229dc:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80229e0:	9200      	str	r2, [sp, #0]
 80229e2:	4639      	mov	r1, r7
 80229e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80229e6:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80229e8:	f7ff fca1 	bl	802232e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 80229ec:	e75f      	b.n	80228ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80229ee:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80229f0:	1429      	asrs	r1, r5, #16
 80229f2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80229f4:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80229f8:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 80229fc:	1433      	asrs	r3, r6, #16
 80229fe:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022a02:	fb0c 1303 	mla	r3, ip, r3, r1
 8022a06:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8022a08:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8022a0c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8022a10:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8022a14:	2a00      	cmp	r2, #0
 8022a16:	f000 8129 	beq.w	8022c6c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8022a1a:	684c      	ldr	r4, [r1, #4]
 8022a1c:	940c      	str	r4, [sp, #48]	@ 0x30
 8022a1e:	0e24      	lsrs	r4, r4, #24
 8022a20:	9413      	str	r4, [sp, #76]	@ 0x4c
 8022a22:	b198      	cbz	r0, 8022a4c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8022a24:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 8022a28:	f10c 3cff 	add.w	ip, ip, #4294967295
 8022a2c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8022a30:	f10c 0c04 	add.w	ip, ip, #4
 8022a34:	eb01 080c 	add.w	r8, r1, ip
 8022a38:	f851 100c 	ldr.w	r1, [r1, ip]
 8022a3c:	9108      	str	r1, [sp, #32]
 8022a3e:	0e09      	lsrs	r1, r1, #24
 8022a40:	9110      	str	r1, [sp, #64]	@ 0x40
 8022a42:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8022a46:	910d      	str	r1, [sp, #52]	@ 0x34
 8022a48:	0e09      	lsrs	r1, r1, #24
 8022a4a:	9114      	str	r1, [sp, #80]	@ 0x50
 8022a4c:	b292      	uxth	r2, r2
 8022a4e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8022a50:	b280      	uxth	r0, r0
 8022a52:	fb02 f900 	mul.w	r9, r2, r0
 8022a56:	0112      	lsls	r2, r2, #4
 8022a58:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8022a5c:	eba2 0809 	sub.w	r8, r2, r9
 8022a60:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8022a64:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8022a66:	b280      	uxth	r0, r0
 8022a68:	fa1f f888 	uxth.w	r8, r8
 8022a6c:	1a09      	subs	r1, r1, r0
 8022a6e:	fb08 f202 	mul.w	r2, r8, r2
 8022a72:	b289      	uxth	r1, r1
 8022a74:	fb01 220e 	mla	r2, r1, lr, r2
 8022a78:	fb00 2204 	mla	r2, r0, r4, r2
 8022a7c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8022a7e:	fb09 2204 	mla	r2, r9, r4, r2
 8022a82:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022a86:	2a00      	cmp	r2, #0
 8022a88:	f000 80e8 	beq.w	8022c5c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 8022a8c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8022a90:	d01b      	beq.n	8022aca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 8022a92:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8022a96:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8022a9a:	fb0e fa0a 	mul.w	sl, lr, sl
 8022a9e:	fb0e fe03 	mul.w	lr, lr, r3
 8022aa2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8022aa6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8022aaa:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8022aae:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8022ab2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8022ab6:	4453      	add	r3, sl
 8022ab8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022abc:	0a1b      	lsrs	r3, r3, #8
 8022abe:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8022ac2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8022ac6:	ea43 030c 	orr.w	r3, r3, ip
 8022aca:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8022acc:	2cff      	cmp	r4, #255	@ 0xff
 8022ace:	d021      	beq.n	8022b14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8022ad0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8022ad2:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8022ad6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8022ad8:	fb04 fc0c 	mul.w	ip, r4, ip
 8022adc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8022ade:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022ae2:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8022ae6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8022ae8:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8022aec:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022af0:	fb04 fa0a 	mul.w	sl, r4, sl
 8022af4:	44e6      	add	lr, ip
 8022af6:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8022afa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022afe:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022b02:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022b06:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022b0a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022b0e:	ea4e 040a 	orr.w	r4, lr, sl
 8022b12:	940c      	str	r4, [sp, #48]	@ 0x30
 8022b14:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8022b16:	2cff      	cmp	r4, #255	@ 0xff
 8022b18:	d021      	beq.n	8022b5e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 8022b1a:	9c08      	ldr	r4, [sp, #32]
 8022b1c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8022b20:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8022b22:	fb04 fc0c 	mul.w	ip, r4, ip
 8022b26:	9c08      	ldr	r4, [sp, #32]
 8022b28:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8022b2c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8022b2e:	fb04 fa0e 	mul.w	sl, r4, lr
 8022b32:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022b36:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8022b3a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022b3e:	44e6      	add	lr, ip
 8022b40:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8022b44:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022b48:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022b4c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022b50:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022b54:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022b58:	ea4e 040a 	orr.w	r4, lr, sl
 8022b5c:	9408      	str	r4, [sp, #32]
 8022b5e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8022b60:	2cff      	cmp	r4, #255	@ 0xff
 8022b62:	d021      	beq.n	8022ba8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8022b64:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8022b66:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8022b6a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8022b6c:	fb04 fc0c 	mul.w	ip, r4, ip
 8022b70:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8022b72:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022b76:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8022b7a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8022b7c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8022b80:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022b84:	fb04 fa0a 	mul.w	sl, r4, sl
 8022b88:	44e6      	add	lr, ip
 8022b8a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8022b8e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022b92:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022b96:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022b9a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022b9e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022ba2:	ea4e 040a 	orr.w	r4, lr, sl
 8022ba6:	940d      	str	r4, [sp, #52]	@ 0x34
 8022ba8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8022baa:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8022bae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8022bb2:	2aff      	cmp	r2, #255	@ 0xff
 8022bb4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8022bb8:	9c08      	ldr	r4, [sp, #32]
 8022bba:	fb08 fc0c 	mul.w	ip, r8, ip
 8022bbe:	fb01 cc0e 	mla	ip, r1, lr, ip
 8022bc2:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8022bc6:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8022bc8:	fb00 cc0e 	mla	ip, r0, lr, ip
 8022bcc:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8022bd0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8022bd2:	fb09 cc0e 	mla	ip, r9, lr, ip
 8022bd6:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8022bda:	fb08 f80e 	mul.w	r8, r8, lr
 8022bde:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022be2:	fb01 8303 	mla	r3, r1, r3, r8
 8022be6:	9908      	ldr	r1, [sp, #32]
 8022be8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022bec:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8022bf0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8022bf2:	fb00 330a 	mla	r3, r0, sl, r3
 8022bf6:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 8022bfa:	fb09 3e0e 	mla	lr, r9, lr, r3
 8022bfe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022c02:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8022c06:	ea4c 0c0e 	orr.w	ip, ip, lr
 8022c0a:	fa5f f08c 	uxtb.w	r0, ip
 8022c0e:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8022c12:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8022c16:	d032      	beq.n	8022c7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8022c18:	43d2      	mvns	r2, r2
 8022c1a:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 8022c1e:	b2d2      	uxtb	r2, r2
 8022c20:	fb0e fe02 	mul.w	lr, lr, r2
 8022c24:	f10e 0301 	add.w	r3, lr, #1
 8022c28:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8022c2c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022c30:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8022c34:	4350      	muls	r0, r2
 8022c36:	f807 3c03 	strb.w	r3, [r7, #-3]
 8022c3a:	1c43      	adds	r3, r0, #1
 8022c3c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022c40:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022c44:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8022c48:	4353      	muls	r3, r2
 8022c4a:	f807 1c02 	strb.w	r1, [r7, #-2]
 8022c4e:	1c5a      	adds	r2, r3, #1
 8022c50:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022c54:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8022c58:	f807 cc01 	strb.w	ip, [r7, #-1]
 8022c5c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8022c5e:	3703      	adds	r7, #3
 8022c60:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022c64:	441d      	add	r5, r3
 8022c66:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022c68:	441e      	add	r6, r3
 8022c6a:	e64e      	b.n	802290a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8022c6c:	2800      	cmp	r0, #0
 8022c6e:	f43f aeed 	beq.w	8022a4c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8022c72:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8022c76:	9108      	str	r1, [sp, #32]
 8022c78:	0e09      	lsrs	r1, r1, #24
 8022c7a:	9110      	str	r1, [sp, #64]	@ 0x40
 8022c7c:	e6e6      	b.n	8022a4c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8022c7e:	f807 0c03 	strb.w	r0, [r7, #-3]
 8022c82:	f807 1c02 	strb.w	r1, [r7, #-2]
 8022c86:	e7e7      	b.n	8022c58 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 8022c88:	b019      	add	sp, #100	@ 0x64
 8022c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08022c90 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8022c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c94:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 8022c98:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8022c9c:	2c00      	cmp	r4, #0
 8022c9e:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 8022ca2:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 8022ca6:	fb00 4e03 	mla	lr, r0, r3, r4
 8022caa:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 8022cae:	f2c0 80b8 	blt.w	8022e22 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8022cb2:	45a1      	cmp	r9, r4
 8022cb4:	f340 80b5 	ble.w	8022e22 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8022cb8:	2800      	cmp	r0, #0
 8022cba:	f2c0 80b2 	blt.w	8022e22 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8022cbe:	4580      	cmp	r8, r0
 8022cc0:	f340 80af 	ble.w	8022e22 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8022cc4:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8022cc8:	f01e 0f01 	tst.w	lr, #1
 8022ccc:	5d56      	ldrb	r6, [r2, r5]
 8022cce:	bf0c      	ite	eq
 8022cd0:	f006 060f 	andeq.w	r6, r6, #15
 8022cd4:	1136      	asrne	r6, r6, #4
 8022cd6:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8022cda:	b2f6      	uxtb	r6, r6
 8022cdc:	f114 0a01 	adds.w	sl, r4, #1
 8022ce0:	f100 80a1 	bmi.w	8022e26 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8022ce4:	45d1      	cmp	r9, sl
 8022ce6:	f340 809e 	ble.w	8022e26 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8022cea:	2800      	cmp	r0, #0
 8022cec:	f2c0 809b 	blt.w	8022e26 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8022cf0:	4580      	cmp	r8, r0
 8022cf2:	f340 8098 	ble.w	8022e26 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8022cf6:	2f00      	cmp	r7, #0
 8022cf8:	f000 8097 	beq.w	8022e2a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 8022cfc:	f10e 0b01 	add.w	fp, lr, #1
 8022d00:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8022d04:	f01b 0f01 	tst.w	fp, #1
 8022d08:	5d55      	ldrb	r5, [r2, r5]
 8022d0a:	bf0c      	ite	eq
 8022d0c:	f005 050f 	andeq.w	r5, r5, #15
 8022d10:	112d      	asrne	r5, r5, #4
 8022d12:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8022d16:	b2ed      	uxtb	r5, r5
 8022d18:	f1bc 0f00 	cmp.w	ip, #0
 8022d1c:	f000 8089 	beq.w	8022e32 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 8022d20:	2c00      	cmp	r4, #0
 8022d22:	f100 0001 	add.w	r0, r0, #1
 8022d26:	f2c0 8082 	blt.w	8022e2e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8022d2a:	45a1      	cmp	r9, r4
 8022d2c:	dd7f      	ble.n	8022e2e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8022d2e:	2800      	cmp	r0, #0
 8022d30:	db7d      	blt.n	8022e2e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8022d32:	4580      	cmp	r8, r0
 8022d34:	dd7b      	ble.n	8022e2e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8022d36:	eb03 0b0e 	add.w	fp, r3, lr
 8022d3a:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8022d3e:	f01b 0f01 	tst.w	fp, #1
 8022d42:	5d14      	ldrb	r4, [r2, r4]
 8022d44:	bf0c      	ite	eq
 8022d46:	f004 040f 	andeq.w	r4, r4, #15
 8022d4a:	1124      	asrne	r4, r4, #4
 8022d4c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8022d50:	b2e4      	uxtb	r4, r4
 8022d52:	f1ba 0f00 	cmp.w	sl, #0
 8022d56:	db6f      	blt.n	8022e38 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8022d58:	45d1      	cmp	r9, sl
 8022d5a:	dd6d      	ble.n	8022e38 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8022d5c:	2800      	cmp	r0, #0
 8022d5e:	db6b      	blt.n	8022e38 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8022d60:	4580      	cmp	r8, r0
 8022d62:	dd69      	ble.n	8022e38 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8022d64:	2f00      	cmp	r7, #0
 8022d66:	d069      	beq.n	8022e3c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 8022d68:	3301      	adds	r3, #1
 8022d6a:	449e      	add	lr, r3
 8022d6c:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8022d70:	f01e 0f01 	tst.w	lr, #1
 8022d74:	5cd0      	ldrb	r0, [r2, r3]
 8022d76:	bf0c      	ite	eq
 8022d78:	f000 000f 	andeq.w	r0, r0, #15
 8022d7c:	1100      	asrne	r0, r0, #4
 8022d7e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022d82:	b2c3      	uxtb	r3, r0
 8022d84:	b2ba      	uxth	r2, r7
 8022d86:	fa1f fc8c 	uxth.w	ip, ip
 8022d8a:	fb02 f00c 	mul.w	r0, r2, ip
 8022d8e:	0112      	lsls	r2, r2, #4
 8022d90:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8022d94:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8022d98:	1a12      	subs	r2, r2, r0
 8022d9a:	fa1f fc8c 	uxth.w	ip, ip
 8022d9e:	b292      	uxth	r2, r2
 8022da0:	eba7 070c 	sub.w	r7, r7, ip
 8022da4:	436a      	muls	r2, r5
 8022da6:	b2bf      	uxth	r7, r7
 8022da8:	fb06 2207 	mla	r2, r6, r7, r2
 8022dac:	fb0c 2404 	mla	r4, ip, r4, r2
 8022db0:	fb00 4303 	mla	r3, r0, r3, r4
 8022db4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022db8:	b38b      	cbz	r3, 8022e1e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 8022dba:	4a21      	ldr	r2, [pc, #132]	@ (8022e40 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8022dbc:	6814      	ldr	r4, [r2, #0]
 8022dbe:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 8022dc2:	b2e5      	uxtb	r5, r4
 8022dc4:	4353      	muls	r3, r2
 8022dc6:	1c5a      	adds	r2, r3, #1
 8022dc8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022dcc:	1212      	asrs	r2, r2, #8
 8022dce:	b290      	uxth	r0, r2
 8022dd0:	43d2      	mvns	r2, r2
 8022dd2:	fb15 f500 	smulbb	r5, r5, r0
 8022dd6:	b2d3      	uxtb	r3, r2
 8022dd8:	780a      	ldrb	r2, [r1, #0]
 8022dda:	fb02 5203 	mla	r2, r2, r3, r5
 8022dde:	b292      	uxth	r2, r2
 8022de0:	1c55      	adds	r5, r2, #1
 8022de2:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8022de6:	784d      	ldrb	r5, [r1, #1]
 8022de8:	fb15 f503 	smulbb	r5, r5, r3
 8022dec:	1212      	asrs	r2, r2, #8
 8022dee:	700a      	strb	r2, [r1, #0]
 8022df0:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8022df4:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8022df8:	fb02 5200 	mla	r2, r2, r0, r5
 8022dfc:	b292      	uxth	r2, r2
 8022dfe:	1c55      	adds	r5, r2, #1
 8022e00:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8022e04:	1212      	asrs	r2, r2, #8
 8022e06:	704a      	strb	r2, [r1, #1]
 8022e08:	788a      	ldrb	r2, [r1, #2]
 8022e0a:	fb12 f303 	smulbb	r3, r2, r3
 8022e0e:	fb04 3300 	mla	r3, r4, r0, r3
 8022e12:	b29b      	uxth	r3, r3
 8022e14:	1c5a      	adds	r2, r3, #1
 8022e16:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022e1a:	121b      	asrs	r3, r3, #8
 8022e1c:	708b      	strb	r3, [r1, #2]
 8022e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e22:	2600      	movs	r6, #0
 8022e24:	e75a      	b.n	8022cdc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 8022e26:	2500      	movs	r5, #0
 8022e28:	e776      	b.n	8022d18 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8022e2a:	463d      	mov	r5, r7
 8022e2c:	e774      	b.n	8022d18 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8022e2e:	2400      	movs	r4, #0
 8022e30:	e78f      	b.n	8022d52 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 8022e32:	4663      	mov	r3, ip
 8022e34:	4664      	mov	r4, ip
 8022e36:	e7a5      	b.n	8022d84 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8022e38:	2300      	movs	r3, #0
 8022e3a:	e7a3      	b.n	8022d84 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8022e3c:	463b      	mov	r3, r7
 8022e3e:	e7a1      	b.n	8022d84 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8022e40:	24026428 	.word	0x24026428

08022e44 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e48:	b097      	sub	sp, #92	@ 0x5c
 8022e4a:	9214      	str	r2, [sp, #80]	@ 0x50
 8022e4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8022e4e:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8022e50:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8022e54:	9015      	str	r0, [sp, #84]	@ 0x54
 8022e56:	910c      	str	r1, [sp, #48]	@ 0x30
 8022e58:	6850      	ldr	r0, [r2, #4]
 8022e5a:	930e      	str	r3, [sp, #56]	@ 0x38
 8022e5c:	6812      	ldr	r2, [r2, #0]
 8022e5e:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8022e62:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	@ 0x84
 8022e66:	fb00 1303 	mla	r3, r0, r3, r1
 8022e6a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022e6e:	eb02 0a03 	add.w	sl, r2, r3
 8022e72:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022e74:	689b      	ldr	r3, [r3, #8]
 8022e76:	3301      	adds	r3, #1
 8022e78:	f023 0301 	bic.w	r3, r3, #1
 8022e7c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022e7e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022e80:	681f      	ldr	r7, [r3, #0]
 8022e82:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022e84:	2b00      	cmp	r3, #0
 8022e86:	dc03      	bgt.n	8022e90 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8022e88:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8022e8a:	2b00      	cmp	r3, #0
 8022e8c:	f340 8247 	ble.w	802331e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8022e90:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022e92:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022e96:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022e9a:	1e48      	subs	r0, r1, #1
 8022e9c:	f102 3cff 	add.w	ip, r2, #4294967295
 8022ea0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022ea2:	2b00      	cmp	r3, #0
 8022ea4:	f340 80e5 	ble.w	8023072 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8022ea8:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8022eac:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022eb0:	d406      	bmi.n	8022ec0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022eb2:	4586      	cmp	lr, r0
 8022eb4:	da04      	bge.n	8022ec0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022eb6:	2b00      	cmp	r3, #0
 8022eb8:	db02      	blt.n	8022ec0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022eba:	4563      	cmp	r3, ip
 8022ebc:	f2c0 80da 	blt.w	8023074 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8022ec0:	f11e 0e01 	adds.w	lr, lr, #1
 8022ec4:	f100 80cb 	bmi.w	802305e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8022ec8:	4571      	cmp	r1, lr
 8022eca:	f2c0 80c8 	blt.w	802305e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8022ece:	3301      	adds	r3, #1
 8022ed0:	f100 80c5 	bmi.w	802305e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8022ed4:	429a      	cmp	r2, r3
 8022ed6:	f2c0 80c2 	blt.w	802305e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8022eda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022edc:	46d0      	mov	r8, sl
 8022ede:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 8022ee2:	930d      	str	r3, [sp, #52]	@ 0x34
 8022ee4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022ee6:	2b00      	cmp	r3, #0
 8022ee8:	f340 80e3 	ble.w	80230b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8022eec:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022eee:	1430      	asrs	r0, r6, #16
 8022ef0:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8022ef4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022ef8:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8022efc:	142b      	asrs	r3, r5, #16
 8022efe:	f100 812e 	bmi.w	802315e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8022f02:	f10c 3bff 	add.w	fp, ip, #4294967295
 8022f06:	455b      	cmp	r3, fp
 8022f08:	f280 8129 	bge.w	802315e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8022f0c:	2800      	cmp	r0, #0
 8022f0e:	f2c0 8126 	blt.w	802315e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8022f12:	f10e 3bff 	add.w	fp, lr, #4294967295
 8022f16:	4558      	cmp	r0, fp
 8022f18:	f280 8121 	bge.w	802315e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8022f1c:	fb00 3309 	mla	r3, r0, r9, r3
 8022f20:	0858      	lsrs	r0, r3, #1
 8022f22:	07dc      	lsls	r4, r3, #31
 8022f24:	f817 c000 	ldrb.w	ip, [r7, r0]
 8022f28:	bf54      	ite	pl
 8022f2a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022f2e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022f32:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022f36:	fa5f fc8c 	uxtb.w	ip, ip
 8022f3a:	2a00      	cmp	r2, #0
 8022f3c:	f000 80fe 	beq.w	802313c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8022f40:	1c58      	adds	r0, r3, #1
 8022f42:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8022f46:	07c0      	lsls	r0, r0, #31
 8022f48:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8022f4c:	bf54      	ite	pl
 8022f4e:	f00e 0e0f 	andpl.w	lr, lr, #15
 8022f52:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8022f56:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8022f5a:	fa5f f08e 	uxtb.w	r0, lr
 8022f5e:	9010      	str	r0, [sp, #64]	@ 0x40
 8022f60:	b1d9      	cbz	r1, 8022f9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8022f62:	444b      	add	r3, r9
 8022f64:	0858      	lsrs	r0, r3, #1
 8022f66:	07dc      	lsls	r4, r3, #31
 8022f68:	f103 0301 	add.w	r3, r3, #1
 8022f6c:	5c38      	ldrb	r0, [r7, r0]
 8022f6e:	bf54      	ite	pl
 8022f70:	f000 000f 	andpl.w	r0, r0, #15
 8022f74:	1100      	asrmi	r0, r0, #4
 8022f76:	07dc      	lsls	r4, r3, #31
 8022f78:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022f7c:	b2c0      	uxtb	r0, r0
 8022f7e:	900a      	str	r0, [sp, #40]	@ 0x28
 8022f80:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8022f84:	f817 e000 	ldrb.w	lr, [r7, r0]
 8022f88:	bf54      	ite	pl
 8022f8a:	f00e 030f 	andpl.w	r3, lr, #15
 8022f8e:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8022f92:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022f96:	b2db      	uxtb	r3, r3
 8022f98:	9311      	str	r3, [sp, #68]	@ 0x44
 8022f9a:	b292      	uxth	r2, r2
 8022f9c:	b289      	uxth	r1, r1
 8022f9e:	0113      	lsls	r3, r2, #4
 8022fa0:	fb02 f001 	mul.w	r0, r2, r1
 8022fa4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8022fa6:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8022faa:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8022fae:	1a1b      	subs	r3, r3, r0
 8022fb0:	b289      	uxth	r1, r1
 8022fb2:	b29b      	uxth	r3, r3
 8022fb4:	ebae 0e01 	sub.w	lr, lr, r1
 8022fb8:	4353      	muls	r3, r2
 8022fba:	fa1f fe8e 	uxth.w	lr, lr
 8022fbe:	fb0c 320e 	mla	r2, ip, lr, r3
 8022fc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022fc4:	fb01 2203 	mla	r2, r1, r3, r2
 8022fc8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022fca:	fb00 2203 	mla	r2, r0, r3, r2
 8022fce:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022fd2:	2a00      	cmp	r2, #0
 8022fd4:	d039      	beq.n	802304a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8022fd6:	4bc7      	ldr	r3, [pc, #796]	@ (80232f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8022fd8:	6819      	ldr	r1, [r3, #0]
 8022fda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022fdc:	fa5f fc81 	uxtb.w	ip, r1
 8022fe0:	435a      	muls	r2, r3
 8022fe2:	1c53      	adds	r3, r2, #1
 8022fe4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022fe8:	1212      	asrs	r2, r2, #8
 8022fea:	b290      	uxth	r0, r2
 8022fec:	43d2      	mvns	r2, r2
 8022fee:	fb1c fc00 	smulbb	ip, ip, r0
 8022ff2:	b2d3      	uxtb	r3, r2
 8022ff4:	f898 2000 	ldrb.w	r2, [r8]
 8022ff8:	fb02 c203 	mla	r2, r2, r3, ip
 8022ffc:	b292      	uxth	r2, r2
 8022ffe:	f102 0c01 	add.w	ip, r2, #1
 8023002:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8023006:	f898 c001 	ldrb.w	ip, [r8, #1]
 802300a:	fb1c fc03 	smulbb	ip, ip, r3
 802300e:	1212      	asrs	r2, r2, #8
 8023010:	f888 2000 	strb.w	r2, [r8]
 8023014:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8023018:	f3c1 4107 	ubfx	r1, r1, #16, #8
 802301c:	fb02 c200 	mla	r2, r2, r0, ip
 8023020:	b292      	uxth	r2, r2
 8023022:	f102 0c01 	add.w	ip, r2, #1
 8023026:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802302a:	1212      	asrs	r2, r2, #8
 802302c:	f888 2001 	strb.w	r2, [r8, #1]
 8023030:	f898 2002 	ldrb.w	r2, [r8, #2]
 8023034:	fb12 f303 	smulbb	r3, r2, r3
 8023038:	fb01 3300 	mla	r3, r1, r0, r3
 802303c:	b29b      	uxth	r3, r3
 802303e:	1c5a      	adds	r2, r3, #1
 8023040:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023044:	121b      	asrs	r3, r3, #8
 8023046:	f888 3002 	strb.w	r3, [r8, #2]
 802304a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802304c:	f108 0803 	add.w	r8, r8, #3
 8023050:	441d      	add	r5, r3
 8023052:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023054:	441e      	add	r6, r3
 8023056:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023058:	3b01      	subs	r3, #1
 802305a:	930d      	str	r3, [sp, #52]	@ 0x34
 802305c:	e742      	b.n	8022ee4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802305e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8023060:	f10a 0a03 	add.w	sl, sl, #3
 8023064:	441d      	add	r5, r3
 8023066:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023068:	441e      	add	r6, r3
 802306a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802306c:	3b01      	subs	r3, #1
 802306e:	9309      	str	r3, [sp, #36]	@ 0x24
 8023070:	e716      	b.n	8022ea0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8023072:	d024      	beq.n	80230be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8023074:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023076:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8023078:	3b01      	subs	r3, #1
 802307a:	fb00 5003 	mla	r0, r0, r3, r5
 802307e:	1400      	asrs	r0, r0, #16
 8023080:	f53f af2b 	bmi.w	8022eda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023084:	3901      	subs	r1, #1
 8023086:	4288      	cmp	r0, r1
 8023088:	f6bf af27 	bge.w	8022eda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802308c:	9924      	ldr	r1, [sp, #144]	@ 0x90
 802308e:	fb01 6303 	mla	r3, r1, r3, r6
 8023092:	141b      	asrs	r3, r3, #16
 8023094:	f53f af21 	bmi.w	8022eda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023098:	3a01      	subs	r2, #1
 802309a:	4293      	cmp	r3, r2
 802309c:	f6bf af1d 	bge.w	8022eda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80230a0:	f10a 0e03 	add.w	lr, sl, #3
 80230a4:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 80230a8:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 80230ac:	f1b8 0f00 	cmp.w	r8, #0
 80230b0:	dc76      	bgt.n	80231a0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 80230b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80230b4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80230b8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80230bc:	44a2      	add	sl, r4
 80230be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80230c0:	2b00      	cmp	r3, #0
 80230c2:	f340 812c 	ble.w	802331e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 80230c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80230ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80230cc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80230d0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80230d4:	eef0 6a62 	vmov.f32	s13, s5
 80230d8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80230dc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80230e0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80230e4:	ee16 5a90 	vmov	r5, s13
 80230e8:	eef0 6a43 	vmov.f32	s13, s6
 80230ec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80230f0:	ee16 6a90 	vmov	r6, s13
 80230f4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80230f8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80230fc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023100:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023104:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023108:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802310c:	ee12 2a90 	vmov	r2, s5
 8023110:	eef0 2a47 	vmov.f32	s5, s14
 8023114:	fb92 f3f3 	sdiv	r3, r2, r3
 8023118:	ee13 2a10 	vmov	r2, s6
 802311c:	9323      	str	r3, [sp, #140]	@ 0x8c
 802311e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023120:	eeb0 3a67 	vmov.f32	s6, s15
 8023124:	fb92 f3f3 	sdiv	r3, r2, r3
 8023128:	9324      	str	r3, [sp, #144]	@ 0x90
 802312a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802312c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802312e:	3b01      	subs	r3, #1
 8023130:	930c      	str	r3, [sp, #48]	@ 0x30
 8023132:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023134:	bf08      	it	eq
 8023136:	4613      	moveq	r3, r2
 8023138:	9309      	str	r3, [sp, #36]	@ 0x24
 802313a:	e6a2      	b.n	8022e82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 802313c:	2900      	cmp	r1, #0
 802313e:	f43f af2c 	beq.w	8022f9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8023142:	eb09 0003 	add.w	r0, r9, r3
 8023146:	0843      	lsrs	r3, r0, #1
 8023148:	07c0      	lsls	r0, r0, #31
 802314a:	5cfb      	ldrb	r3, [r7, r3]
 802314c:	bf54      	ite	pl
 802314e:	f003 030f 	andpl.w	r3, r3, #15
 8023152:	111b      	asrmi	r3, r3, #4
 8023154:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023158:	b2db      	uxtb	r3, r3
 802315a:	930a      	str	r3, [sp, #40]	@ 0x28
 802315c:	e71d      	b.n	8022f9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 802315e:	f113 0b01 	adds.w	fp, r3, #1
 8023162:	f53f af72 	bmi.w	802304a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8023166:	45dc      	cmp	ip, fp
 8023168:	f6ff af6f 	blt.w	802304a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802316c:	f110 0b01 	adds.w	fp, r0, #1
 8023170:	f53f af6b 	bmi.w	802304a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8023174:	45de      	cmp	lr, fp
 8023176:	f6ff af68 	blt.w	802304a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802317a:	9302      	str	r3, [sp, #8]
 802317c:	fa0f f38e 	sxth.w	r3, lr
 8023180:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8023182:	9301      	str	r3, [sp, #4]
 8023184:	fa0f f38c 	sxth.w	r3, ip
 8023188:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802318c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8023190:	9300      	str	r3, [sp, #0]
 8023192:	463a      	mov	r2, r7
 8023194:	464b      	mov	r3, r9
 8023196:	4641      	mov	r1, r8
 8023198:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802319a:	f7ff fd79 	bl	8022c90 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 802319e:	e754      	b.n	802304a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80231a0:	142a      	asrs	r2, r5, #16
 80231a2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80231a6:	1433      	asrs	r3, r6, #16
 80231a8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80231ac:	fb09 2303 	mla	r3, r9, r3, r2
 80231b0:	085a      	lsrs	r2, r3, #1
 80231b2:	07dc      	lsls	r4, r3, #31
 80231b4:	5cba      	ldrb	r2, [r7, r2]
 80231b6:	bf54      	ite	pl
 80231b8:	f002 020f 	andpl.w	r2, r2, #15
 80231bc:	1112      	asrmi	r2, r2, #4
 80231be:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80231c2:	b2d2      	uxtb	r2, r2
 80231c4:	2900      	cmp	r1, #0
 80231c6:	f000 8097 	beq.w	80232f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80231ca:	f103 0b01 	add.w	fp, r3, #1
 80231ce:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 80231d2:	f01b 0f01 	tst.w	fp, #1
 80231d6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80231da:	bf0c      	ite	eq
 80231dc:	f00c 0c0f 	andeq.w	ip, ip, #15
 80231e0:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80231e4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80231e8:	fa5f f48c 	uxtb.w	r4, ip
 80231ec:	9412      	str	r4, [sp, #72]	@ 0x48
 80231ee:	b300      	cbz	r0, 8023232 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80231f0:	444b      	add	r3, r9
 80231f2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80231f6:	07dc      	lsls	r4, r3, #31
 80231f8:	f103 0301 	add.w	r3, r3, #1
 80231fc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023200:	bf54      	ite	pl
 8023202:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023206:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802320a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802320e:	fa5f f48c 	uxtb.w	r4, ip
 8023212:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023216:	940b      	str	r4, [sp, #44]	@ 0x2c
 8023218:	07dc      	lsls	r4, r3, #31
 802321a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802321e:	bf54      	ite	pl
 8023220:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023224:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023228:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802322c:	fa5f f38c 	uxtb.w	r3, ip
 8023230:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023232:	b289      	uxth	r1, r1
 8023234:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023236:	b280      	uxth	r0, r0
 8023238:	fb01 f300 	mul.w	r3, r1, r0
 802323c:	0109      	lsls	r1, r1, #4
 802323e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8023242:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 8023246:	1ac9      	subs	r1, r1, r3
 8023248:	b280      	uxth	r0, r0
 802324a:	b289      	uxth	r1, r1
 802324c:	ebac 0c00 	sub.w	ip, ip, r0
 8023250:	4361      	muls	r1, r4
 8023252:	fa1f fc8c 	uxth.w	ip, ip
 8023256:	fb02 120c 	mla	r2, r2, ip, r1
 802325a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802325c:	fb00 2001 	mla	r0, r0, r1, r2
 8023260:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8023262:	fb03 0302 	mla	r3, r3, r2, r0
 8023266:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802326a:	2b00      	cmp	r3, #0
 802326c:	d039      	beq.n	80232e2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 802326e:	4a21      	ldr	r2, [pc, #132]	@ (80232f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8023270:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8023274:	6810      	ldr	r0, [r2, #0]
 8023276:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023278:	fa5f fc80 	uxtb.w	ip, r0
 802327c:	4353      	muls	r3, r2
 802327e:	1c5a      	adds	r2, r3, #1
 8023280:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023284:	121b      	asrs	r3, r3, #8
 8023286:	b29a      	uxth	r2, r3
 8023288:	43db      	mvns	r3, r3
 802328a:	fb1c fc02 	smulbb	ip, ip, r2
 802328e:	b2db      	uxtb	r3, r3
 8023290:	fb01 c103 	mla	r1, r1, r3, ip
 8023294:	b289      	uxth	r1, r1
 8023296:	f101 0c01 	add.w	ip, r1, #1
 802329a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802329e:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 80232a2:	fb1c fc03 	smulbb	ip, ip, r3
 80232a6:	1209      	asrs	r1, r1, #8
 80232a8:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80232ac:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80232b0:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80232b4:	fb01 c102 	mla	r1, r1, r2, ip
 80232b8:	b289      	uxth	r1, r1
 80232ba:	f101 0c01 	add.w	ip, r1, #1
 80232be:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80232c2:	1209      	asrs	r1, r1, #8
 80232c4:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80232c8:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80232cc:	fb11 f303 	smulbb	r3, r1, r3
 80232d0:	fb00 3002 	mla	r0, r0, r2, r3
 80232d4:	b280      	uxth	r0, r0
 80232d6:	1c42      	adds	r2, r0, #1
 80232d8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80232dc:	1200      	asrs	r0, r0, #8
 80232de:	f80e 0c01 	strb.w	r0, [lr, #-1]
 80232e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80232e4:	f10e 0e03 	add.w	lr, lr, #3
 80232e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80232ec:	441d      	add	r5, r3
 80232ee:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80232f0:	441e      	add	r6, r3
 80232f2:	e6db      	b.n	80230ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 80232f4:	24026428 	.word	0x24026428
 80232f8:	2800      	cmp	r0, #0
 80232fa:	d09a      	beq.n	8023232 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80232fc:	444b      	add	r3, r9
 80232fe:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023302:	07db      	lsls	r3, r3, #31
 8023304:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023308:	bf54      	ite	pl
 802330a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802330e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023312:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023316:	fa5f f38c 	uxtb.w	r3, ip
 802331a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802331c:	e789      	b.n	8023232 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 802331e:	b017      	add	sp, #92	@ 0x5c
 8023320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023324 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8023324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023328:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
 802332c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8023330:	2d00      	cmp	r5, #0
 8023332:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 8023336:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 802333a:	fb04 5e03 	mla	lr, r4, r3, r5
 802333e:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 8023342:	f2c0 80b1 	blt.w	80234a8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8023346:	45a9      	cmp	r9, r5
 8023348:	f340 80ae 	ble.w	80234a8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 802334c:	2c00      	cmp	r4, #0
 802334e:	f2c0 80ab 	blt.w	80234a8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8023352:	45a0      	cmp	r8, r4
 8023354:	f340 80a8 	ble.w	80234a8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8023358:	ea4f 065e 	mov.w	r6, lr, lsr #1
 802335c:	f01e 0f01 	tst.w	lr, #1
 8023360:	5d97      	ldrb	r7, [r2, r6]
 8023362:	bf0c      	ite	eq
 8023364:	f007 070f 	andeq.w	r7, r7, #15
 8023368:	113f      	asrne	r7, r7, #4
 802336a:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 802336e:	b2ff      	uxtb	r7, r7
 8023370:	f115 0a01 	adds.w	sl, r5, #1
 8023374:	f100 809a 	bmi.w	80234ac <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8023378:	45d1      	cmp	r9, sl
 802337a:	f340 8097 	ble.w	80234ac <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 802337e:	2c00      	cmp	r4, #0
 8023380:	f2c0 8094 	blt.w	80234ac <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8023384:	45a0      	cmp	r8, r4
 8023386:	f340 8091 	ble.w	80234ac <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 802338a:	2800      	cmp	r0, #0
 802338c:	f000 8090 	beq.w	80234b0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 8023390:	f10e 0b01 	add.w	fp, lr, #1
 8023394:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8023398:	f01b 0f01 	tst.w	fp, #1
 802339c:	5d96      	ldrb	r6, [r2, r6]
 802339e:	bf0c      	ite	eq
 80233a0:	f006 060f 	andeq.w	r6, r6, #15
 80233a4:	1136      	asrne	r6, r6, #4
 80233a6:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80233aa:	b2f6      	uxtb	r6, r6
 80233ac:	f1bc 0f00 	cmp.w	ip, #0
 80233b0:	f000 8082 	beq.w	80234b8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 80233b4:	2d00      	cmp	r5, #0
 80233b6:	f104 0401 	add.w	r4, r4, #1
 80233ba:	db7b      	blt.n	80234b4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80233bc:	45a9      	cmp	r9, r5
 80233be:	dd79      	ble.n	80234b4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80233c0:	2c00      	cmp	r4, #0
 80233c2:	db77      	blt.n	80234b4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80233c4:	45a0      	cmp	r8, r4
 80233c6:	dd75      	ble.n	80234b4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80233c8:	eb03 0b0e 	add.w	fp, r3, lr
 80233cc:	ea4f 055b 	mov.w	r5, fp, lsr #1
 80233d0:	f01b 0f01 	tst.w	fp, #1
 80233d4:	5d55      	ldrb	r5, [r2, r5]
 80233d6:	bf0c      	ite	eq
 80233d8:	f005 050f 	andeq.w	r5, r5, #15
 80233dc:	112d      	asrne	r5, r5, #4
 80233de:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80233e2:	b2ed      	uxtb	r5, r5
 80233e4:	f1ba 0f00 	cmp.w	sl, #0
 80233e8:	db69      	blt.n	80234be <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80233ea:	45d1      	cmp	r9, sl
 80233ec:	dd67      	ble.n	80234be <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80233ee:	2c00      	cmp	r4, #0
 80233f0:	db65      	blt.n	80234be <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80233f2:	45a0      	cmp	r8, r4
 80233f4:	dd63      	ble.n	80234be <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80233f6:	2800      	cmp	r0, #0
 80233f8:	d063      	beq.n	80234c2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 80233fa:	3301      	adds	r3, #1
 80233fc:	449e      	add	lr, r3
 80233fe:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8023402:	f01e 0f01 	tst.w	lr, #1
 8023406:	5cd4      	ldrb	r4, [r2, r3]
 8023408:	bf0c      	ite	eq
 802340a:	f004 040f 	andeq.w	r4, r4, #15
 802340e:	1124      	asrne	r4, r4, #4
 8023410:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8023414:	b2e3      	uxtb	r3, r4
 8023416:	b282      	uxth	r2, r0
 8023418:	fa1f fc8c 	uxth.w	ip, ip
 802341c:	fb02 f40c 	mul.w	r4, r2, ip
 8023420:	0112      	lsls	r2, r2, #4
 8023422:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 8023426:	fa1f f08c 	uxth.w	r0, ip
 802342a:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 802342e:	1b12      	subs	r2, r2, r4
 8023430:	ebac 0c00 	sub.w	ip, ip, r0
 8023434:	b292      	uxth	r2, r2
 8023436:	fa1f fc8c 	uxth.w	ip, ip
 802343a:	4372      	muls	r2, r6
 802343c:	fb07 220c 	mla	r2, r7, ip, r2
 8023440:	fb00 2005 	mla	r0, r0, r5, r2
 8023444:	fb04 0303 	mla	r3, r4, r3, r0
 8023448:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802344c:	b353      	cbz	r3, 80234a4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 802344e:	4a1e      	ldr	r2, [pc, #120]	@ (80234c8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 8023450:	7808      	ldrb	r0, [r1, #0]
 8023452:	6814      	ldr	r4, [r2, #0]
 8023454:	b29a      	uxth	r2, r3
 8023456:	43db      	mvns	r3, r3
 8023458:	b2e5      	uxtb	r5, r4
 802345a:	b2db      	uxtb	r3, r3
 802345c:	fb15 f502 	smulbb	r5, r5, r2
 8023460:	fb00 5003 	mla	r0, r0, r3, r5
 8023464:	b280      	uxth	r0, r0
 8023466:	1c45      	adds	r5, r0, #1
 8023468:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802346c:	784d      	ldrb	r5, [r1, #1]
 802346e:	fb15 f503 	smulbb	r5, r5, r3
 8023472:	1200      	asrs	r0, r0, #8
 8023474:	7008      	strb	r0, [r1, #0]
 8023476:	f3c4 2007 	ubfx	r0, r4, #8, #8
 802347a:	f3c4 4407 	ubfx	r4, r4, #16, #8
 802347e:	fb00 5002 	mla	r0, r0, r2, r5
 8023482:	b280      	uxth	r0, r0
 8023484:	1c45      	adds	r5, r0, #1
 8023486:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802348a:	1200      	asrs	r0, r0, #8
 802348c:	7048      	strb	r0, [r1, #1]
 802348e:	7888      	ldrb	r0, [r1, #2]
 8023490:	fb10 f303 	smulbb	r3, r0, r3
 8023494:	fb04 3202 	mla	r2, r4, r2, r3
 8023498:	b292      	uxth	r2, r2
 802349a:	1c53      	adds	r3, r2, #1
 802349c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80234a0:	1212      	asrs	r2, r2, #8
 80234a2:	708a      	strb	r2, [r1, #2]
 80234a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80234a8:	2700      	movs	r7, #0
 80234aa:	e761      	b.n	8023370 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 80234ac:	2600      	movs	r6, #0
 80234ae:	e77d      	b.n	80233ac <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 80234b0:	4606      	mov	r6, r0
 80234b2:	e77b      	b.n	80233ac <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 80234b4:	2500      	movs	r5, #0
 80234b6:	e795      	b.n	80233e4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 80234b8:	4663      	mov	r3, ip
 80234ba:	4665      	mov	r5, ip
 80234bc:	e7ab      	b.n	8023416 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 80234be:	2300      	movs	r3, #0
 80234c0:	e7a9      	b.n	8023416 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 80234c2:	4603      	mov	r3, r0
 80234c4:	e7a7      	b.n	8023416 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 80234c6:	bf00      	nop
 80234c8:	24026428 	.word	0x24026428

080234cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80234cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80234d0:	b093      	sub	sp, #76	@ 0x4c
 80234d2:	461c      	mov	r4, r3
 80234d4:	920c      	str	r2, [sp, #48]	@ 0x30
 80234d6:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80234d8:	9011      	str	r0, [sp, #68]	@ 0x44
 80234da:	9107      	str	r1, [sp, #28]
 80234dc:	6850      	ldr	r0, [r2, #4]
 80234de:	6812      	ldr	r2, [r2, #0]
 80234e0:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 80234e4:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	@ 0x74
 80234e8:	fb00 1303 	mla	r3, r0, r3, r1
 80234ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80234f0:	eb02 0b03 	add.w	fp, r2, r3
 80234f4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80234f6:	689b      	ldr	r3, [r3, #8]
 80234f8:	3301      	adds	r3, #1
 80234fa:	f023 0301 	bic.w	r3, r3, #1
 80234fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8023500:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023502:	f8d3 8000 	ldr.w	r8, [r3]
 8023506:	9b07      	ldr	r3, [sp, #28]
 8023508:	2b00      	cmp	r3, #0
 802350a:	dc03      	bgt.n	8023514 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802350c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802350e:	2b00      	cmp	r3, #0
 8023510:	f340 822b 	ble.w	802396a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8023514:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023516:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802351a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802351e:	1e48      	subs	r0, r1, #1
 8023520:	1e57      	subs	r7, r2, #1
 8023522:	2c00      	cmp	r4, #0
 8023524:	f340 80d7 	ble.w	80236d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8023528:	ea5f 4c25 	movs.w	ip, r5, asr #16
 802352c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023530:	d406      	bmi.n	8023540 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023532:	4584      	cmp	ip, r0
 8023534:	da04      	bge.n	8023540 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023536:	2b00      	cmp	r3, #0
 8023538:	db02      	blt.n	8023540 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802353a:	42bb      	cmp	r3, r7
 802353c:	f2c0 80cc 	blt.w	80236d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8023540:	f11c 0c01 	adds.w	ip, ip, #1
 8023544:	f100 80bf 	bmi.w	80236c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8023548:	4561      	cmp	r1, ip
 802354a:	f2c0 80bc 	blt.w	80236c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802354e:	3301      	adds	r3, #1
 8023550:	f100 80b9 	bmi.w	80236c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8023554:	429a      	cmp	r2, r3
 8023556:	f2c0 80b6 	blt.w	80236c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802355a:	46a2      	mov	sl, r4
 802355c:	465f      	mov	r7, fp
 802355e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8023562:	f1ba 0f00 	cmp.w	sl, #0
 8023566:	f340 80d4 	ble.w	8023712 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 802356a:	f3c5 3303 	ubfx	r3, r5, #12, #4
 802356e:	1430      	asrs	r0, r6, #16
 8023570:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023574:	9308      	str	r3, [sp, #32]
 8023576:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023578:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802357c:	142b      	asrs	r3, r5, #16
 802357e:	f100 8124 	bmi.w	80237ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8023582:	f10c 32ff 	add.w	r2, ip, #4294967295
 8023586:	4293      	cmp	r3, r2
 8023588:	f280 811f 	bge.w	80237ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802358c:	2800      	cmp	r0, #0
 802358e:	f2c0 811c 	blt.w	80237ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8023592:	f10e 32ff 	add.w	r2, lr, #4294967295
 8023596:	4290      	cmp	r0, r2
 8023598:	f280 8117 	bge.w	80237ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802359c:	fb00 3309 	mla	r3, r0, r9, r3
 80235a0:	0858      	lsrs	r0, r3, #1
 80235a2:	07da      	lsls	r2, r3, #31
 80235a4:	9a08      	ldr	r2, [sp, #32]
 80235a6:	f818 c000 	ldrb.w	ip, [r8, r0]
 80235aa:	bf54      	ite	pl
 80235ac:	f00c 0c0f 	andpl.w	ip, ip, #15
 80235b0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80235b4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80235b8:	fa5f fc8c 	uxtb.w	ip, ip
 80235bc:	2a00      	cmp	r2, #0
 80235be:	f000 80ed 	beq.w	802379c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 80235c2:	1c58      	adds	r0, r3, #1
 80235c4:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80235c8:	07c0      	lsls	r0, r0, #31
 80235ca:	f818 e00e 	ldrb.w	lr, [r8, lr]
 80235ce:	bf54      	ite	pl
 80235d0:	f00e 0e0f 	andpl.w	lr, lr, #15
 80235d4:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80235d8:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80235dc:	fa5f fe8e 	uxtb.w	lr, lr
 80235e0:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 80235e4:	b1c9      	cbz	r1, 802361a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80235e6:	444b      	add	r3, r9
 80235e8:	0858      	lsrs	r0, r3, #1
 80235ea:	07da      	lsls	r2, r3, #31
 80235ec:	f818 0000 	ldrb.w	r0, [r8, r0]
 80235f0:	bf54      	ite	pl
 80235f2:	f000 000f 	andpl.w	r0, r0, #15
 80235f6:	1100      	asrmi	r0, r0, #4
 80235f8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80235fc:	b2c0      	uxtb	r0, r0
 80235fe:	900a      	str	r0, [sp, #40]	@ 0x28
 8023600:	1c58      	adds	r0, r3, #1
 8023602:	0843      	lsrs	r3, r0, #1
 8023604:	07c2      	lsls	r2, r0, #31
 8023606:	f818 3003 	ldrb.w	r3, [r8, r3]
 802360a:	bf54      	ite	pl
 802360c:	f003 030f 	andpl.w	r3, r3, #15
 8023610:	111b      	asrmi	r3, r3, #4
 8023612:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023616:	b2db      	uxtb	r3, r3
 8023618:	930e      	str	r3, [sp, #56]	@ 0x38
 802361a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802361e:	b289      	uxth	r1, r1
 8023620:	fb02 f301 	mul.w	r3, r2, r1
 8023624:	0112      	lsls	r2, r2, #4
 8023626:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802362a:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 802362e:	1ad2      	subs	r2, r2, r3
 8023630:	b289      	uxth	r1, r1
 8023632:	b292      	uxth	r2, r2
 8023634:	1a40      	subs	r0, r0, r1
 8023636:	fa1f fe80 	uxth.w	lr, r0
 802363a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802363c:	4342      	muls	r2, r0
 802363e:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8023642:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023644:	fb01 c102 	mla	r1, r1, r2, ip
 8023648:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802364a:	fb03 1302 	mla	r3, r3, r2, r1
 802364e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023652:	b383      	cbz	r3, 80236b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8023654:	4ac6      	ldr	r2, [pc, #792]	@ (8023970 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8023656:	2bff      	cmp	r3, #255	@ 0xff
 8023658:	6812      	ldr	r2, [r2, #0]
 802365a:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 802365e:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8023662:	b2d2      	uxtb	r2, r2
 8023664:	f000 80ac 	beq.w	80237c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023668:	b299      	uxth	r1, r3
 802366a:	43db      	mvns	r3, r3
 802366c:	f897 c000 	ldrb.w	ip, [r7]
 8023670:	fb12 f201 	smulbb	r2, r2, r1
 8023674:	b2db      	uxtb	r3, r3
 8023676:	fb10 f001 	smulbb	r0, r0, r1
 802367a:	fb0c 2203 	mla	r2, ip, r3, r2
 802367e:	fb1e f101 	smulbb	r1, lr, r1
 8023682:	b292      	uxth	r2, r2
 8023684:	f102 0c01 	add.w	ip, r2, #1
 8023688:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802368c:	1212      	asrs	r2, r2, #8
 802368e:	703a      	strb	r2, [r7, #0]
 8023690:	787a      	ldrb	r2, [r7, #1]
 8023692:	fb02 0003 	mla	r0, r2, r3, r0
 8023696:	b280      	uxth	r0, r0
 8023698:	1c42      	adds	r2, r0, #1
 802369a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802369e:	78ba      	ldrb	r2, [r7, #2]
 80236a0:	fb02 1303 	mla	r3, r2, r3, r1
 80236a4:	1200      	asrs	r0, r0, #8
 80236a6:	b29b      	uxth	r3, r3
 80236a8:	7078      	strb	r0, [r7, #1]
 80236aa:	f103 0e01 	add.w	lr, r3, #1
 80236ae:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80236b2:	121b      	asrs	r3, r3, #8
 80236b4:	70bb      	strb	r3, [r7, #2]
 80236b6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80236b8:	3703      	adds	r7, #3
 80236ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80236be:	441d      	add	r5, r3
 80236c0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80236c2:	441e      	add	r6, r3
 80236c4:	e74d      	b.n	8023562 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80236c6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80236c8:	3c01      	subs	r4, #1
 80236ca:	f10b 0b03 	add.w	fp, fp, #3
 80236ce:	441d      	add	r5, r3
 80236d0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80236d2:	441e      	add	r6, r3
 80236d4:	e725      	b.n	8023522 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80236d6:	d021      	beq.n	802371c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 80236d8:	1e63      	subs	r3, r4, #1
 80236da:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80236dc:	fb00 5003 	mla	r0, r0, r3, r5
 80236e0:	1400      	asrs	r0, r0, #16
 80236e2:	f53f af3a 	bmi.w	802355a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80236e6:	3901      	subs	r1, #1
 80236e8:	4288      	cmp	r0, r1
 80236ea:	f6bf af36 	bge.w	802355a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80236ee:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80236f0:	fb01 6303 	mla	r3, r1, r3, r6
 80236f4:	141b      	asrs	r3, r3, #16
 80236f6:	f53f af30 	bmi.w	802355a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80236fa:	3a01      	subs	r2, #1
 80236fc:	4293      	cmp	r3, r2
 80236fe:	f6bf af2c 	bge.w	802355a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023702:	f10b 0c03 	add.w	ip, fp, #3
 8023706:	46a6      	mov	lr, r4
 8023708:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802370c:	f1be 0f00 	cmp.w	lr, #0
 8023710:	dc79      	bgt.n	8023806 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8023712:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8023716:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802371a:	44a3      	add	fp, r4
 802371c:	9b07      	ldr	r3, [sp, #28]
 802371e:	2b00      	cmp	r3, #0
 8023720:	f340 8123 	ble.w	802396a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8023724:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8023728:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802372a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802372e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023732:	eef0 6a62 	vmov.f32	s13, s5
 8023736:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802373a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802373e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023742:	ee16 5a90 	vmov	r5, s13
 8023746:	eef0 6a43 	vmov.f32	s13, s6
 802374a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802374e:	ee16 6a90 	vmov	r6, s13
 8023752:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023756:	ee61 7a27 	vmul.f32	s15, s2, s15
 802375a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802375e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023762:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023766:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802376a:	ee12 2a90 	vmov	r2, s5
 802376e:	eef0 2a47 	vmov.f32	s5, s14
 8023772:	fb92 f3f3 	sdiv	r3, r2, r3
 8023776:	ee13 2a10 	vmov	r2, s6
 802377a:	931f      	str	r3, [sp, #124]	@ 0x7c
 802377c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802377e:	eeb0 3a67 	vmov.f32	s6, s15
 8023782:	fb92 f3f3 	sdiv	r3, r2, r3
 8023786:	9320      	str	r3, [sp, #128]	@ 0x80
 8023788:	9b07      	ldr	r3, [sp, #28]
 802378a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802378c:	3b01      	subs	r3, #1
 802378e:	9307      	str	r3, [sp, #28]
 8023790:	bf08      	it	eq
 8023792:	4614      	moveq	r4, r2
 8023794:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8023796:	bf18      	it	ne
 8023798:	461c      	movne	r4, r3
 802379a:	e6b4      	b.n	8023506 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802379c:	2900      	cmp	r1, #0
 802379e:	f43f af3c 	beq.w	802361a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80237a2:	eb09 0003 	add.w	r0, r9, r3
 80237a6:	0843      	lsrs	r3, r0, #1
 80237a8:	07c0      	lsls	r0, r0, #31
 80237aa:	f818 3003 	ldrb.w	r3, [r8, r3]
 80237ae:	bf54      	ite	pl
 80237b0:	f003 030f 	andpl.w	r3, r3, #15
 80237b4:	111b      	asrmi	r3, r3, #4
 80237b6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80237ba:	b2db      	uxtb	r3, r3
 80237bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80237be:	e72c      	b.n	802361a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80237c0:	703a      	strb	r2, [r7, #0]
 80237c2:	7078      	strb	r0, [r7, #1]
 80237c4:	f887 e002 	strb.w	lr, [r7, #2]
 80237c8:	e775      	b.n	80236b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80237ca:	1c5a      	adds	r2, r3, #1
 80237cc:	f53f af73 	bmi.w	80236b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80237d0:	4594      	cmp	ip, r2
 80237d2:	f6ff af70 	blt.w	80236b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80237d6:	1c42      	adds	r2, r0, #1
 80237d8:	f53f af6d 	bmi.w	80236b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80237dc:	4596      	cmp	lr, r2
 80237de:	f6ff af6a 	blt.w	80236b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80237e2:	9302      	str	r3, [sp, #8]
 80237e4:	fa0f f38e 	sxth.w	r3, lr
 80237e8:	9a08      	ldr	r2, [sp, #32]
 80237ea:	9301      	str	r3, [sp, #4]
 80237ec:	fa0f f38c 	sxth.w	r3, ip
 80237f0:	9105      	str	r1, [sp, #20]
 80237f2:	4639      	mov	r1, r7
 80237f4:	9300      	str	r3, [sp, #0]
 80237f6:	464b      	mov	r3, r9
 80237f8:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80237fc:	4642      	mov	r2, r8
 80237fe:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8023800:	f7ff fd90 	bl	8023324 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8023804:	e757      	b.n	80236b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8023806:	142a      	asrs	r2, r5, #16
 8023808:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802380c:	1433      	asrs	r3, r6, #16
 802380e:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8023812:	fb09 2303 	mla	r3, r9, r3, r2
 8023816:	085a      	lsrs	r2, r3, #1
 8023818:	07d9      	lsls	r1, r3, #31
 802381a:	f818 2002 	ldrb.w	r2, [r8, r2]
 802381e:	bf54      	ite	pl
 8023820:	f002 020f 	andpl.w	r2, r2, #15
 8023824:	1112      	asrmi	r2, r2, #4
 8023826:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802382a:	b2d2      	uxtb	r2, r2
 802382c:	2800      	cmp	r0, #0
 802382e:	f000 8085 	beq.w	802393c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8023832:	f103 0a01 	add.w	sl, r3, #1
 8023836:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802383a:	f01a 0f01 	tst.w	sl, #1
 802383e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8023842:	bf0c      	ite	eq
 8023844:	f001 010f 	andeq.w	r1, r1, #15
 8023848:	1109      	asrne	r1, r1, #4
 802384a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802384e:	b2c9      	uxtb	r1, r1
 8023850:	910f      	str	r1, [sp, #60]	@ 0x3c
 8023852:	b1df      	cbz	r7, 802388c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8023854:	444b      	add	r3, r9
 8023856:	0859      	lsrs	r1, r3, #1
 8023858:	f013 0f01 	tst.w	r3, #1
 802385c:	f103 0301 	add.w	r3, r3, #1
 8023860:	f818 1001 	ldrb.w	r1, [r8, r1]
 8023864:	bf0c      	ite	eq
 8023866:	f001 010f 	andeq.w	r1, r1, #15
 802386a:	1109      	asrne	r1, r1, #4
 802386c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023870:	b2c9      	uxtb	r1, r1
 8023872:	910b      	str	r1, [sp, #44]	@ 0x2c
 8023874:	0859      	lsrs	r1, r3, #1
 8023876:	07db      	lsls	r3, r3, #31
 8023878:	f818 1001 	ldrb.w	r1, [r8, r1]
 802387c:	bf54      	ite	pl
 802387e:	f001 010f 	andpl.w	r1, r1, #15
 8023882:	1109      	asrmi	r1, r1, #4
 8023884:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023888:	b2c9      	uxtb	r1, r1
 802388a:	9110      	str	r1, [sp, #64]	@ 0x40
 802388c:	b280      	uxth	r0, r0
 802388e:	b2bf      	uxth	r7, r7
 8023890:	fb00 f307 	mul.w	r3, r0, r7
 8023894:	0100      	lsls	r0, r0, #4
 8023896:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 802389a:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 802389e:	1ac0      	subs	r0, r0, r3
 80238a0:	b2bf      	uxth	r7, r7
 80238a2:	b280      	uxth	r0, r0
 80238a4:	1bc9      	subs	r1, r1, r7
 80238a6:	fa1f fa81 	uxth.w	sl, r1
 80238aa:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80238ac:	4348      	muls	r0, r1
 80238ae:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80238b0:	fb02 020a 	mla	r2, r2, sl, r0
 80238b4:	fb07 2701 	mla	r7, r7, r1, r2
 80238b8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80238ba:	fb03 7302 	mla	r3, r3, r2, r7
 80238be:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80238c2:	b393      	cbz	r3, 802392a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80238c4:	4a2a      	ldr	r2, [pc, #168]	@ (8023970 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 80238c6:	2bff      	cmp	r3, #255	@ 0xff
 80238c8:	6811      	ldr	r1, [r2, #0]
 80238ca:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 80238ce:	f3c1 2707 	ubfx	r7, r1, #8, #8
 80238d2:	b2c9      	uxtb	r1, r1
 80238d4:	d042      	beq.n	802395c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 80238d6:	b298      	uxth	r0, r3
 80238d8:	43db      	mvns	r3, r3
 80238da:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 80238de:	fb11 f100 	smulbb	r1, r1, r0
 80238e2:	b2db      	uxtb	r3, r3
 80238e4:	fb17 f700 	smulbb	r7, r7, r0
 80238e8:	fb02 1103 	mla	r1, r2, r3, r1
 80238ec:	fb1a f000 	smulbb	r0, sl, r0
 80238f0:	b289      	uxth	r1, r1
 80238f2:	1c4a      	adds	r2, r1, #1
 80238f4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80238f8:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 80238fc:	fb02 7703 	mla	r7, r2, r3, r7
 8023900:	1209      	asrs	r1, r1, #8
 8023902:	b2bf      	uxth	r7, r7
 8023904:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8023908:	1c7a      	adds	r2, r7, #1
 802390a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 802390e:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8023912:	fb02 0303 	mla	r3, r2, r3, r0
 8023916:	123f      	asrs	r7, r7, #8
 8023918:	b29b      	uxth	r3, r3
 802391a:	f80c 7c02 	strb.w	r7, [ip, #-2]
 802391e:	1c5a      	adds	r2, r3, #1
 8023920:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023924:	121b      	asrs	r3, r3, #8
 8023926:	f80c 3c01 	strb.w	r3, [ip, #-1]
 802392a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802392c:	f10c 0c03 	add.w	ip, ip, #3
 8023930:	f10e 3eff 	add.w	lr, lr, #4294967295
 8023934:	441d      	add	r5, r3
 8023936:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023938:	441e      	add	r6, r3
 802393a:	e6e7      	b.n	802370c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802393c:	2f00      	cmp	r7, #0
 802393e:	d0a5      	beq.n	802388c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8023940:	444b      	add	r3, r9
 8023942:	0859      	lsrs	r1, r3, #1
 8023944:	07db      	lsls	r3, r3, #31
 8023946:	f818 1001 	ldrb.w	r1, [r8, r1]
 802394a:	bf54      	ite	pl
 802394c:	f001 010f 	andpl.w	r1, r1, #15
 8023950:	1109      	asrmi	r1, r1, #4
 8023952:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023956:	b2c9      	uxtb	r1, r1
 8023958:	910b      	str	r1, [sp, #44]	@ 0x2c
 802395a:	e797      	b.n	802388c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 802395c:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8023960:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8023964:	f80c ac01 	strb.w	sl, [ip, #-1]
 8023968:	e7df      	b.n	802392a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802396a:	b013      	add	sp, #76	@ 0x4c
 802396c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023970:	24026428 	.word	0x24026428

08023974 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 8023974:	b530      	push	{r4, r5, lr}
 8023976:	b29d      	uxth	r5, r3
 8023978:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 802397c:	780c      	ldrb	r4, [r1, #0]
 802397e:	b298      	uxth	r0, r3
 8023980:	7813      	ldrb	r3, [r2, #0]
 8023982:	fb14 f405 	smulbb	r4, r4, r5
 8023986:	fb13 f300 	smulbb	r3, r3, r0
 802398a:	441c      	add	r4, r3
 802398c:	b2a4      	uxth	r4, r4
 802398e:	1c63      	adds	r3, r4, #1
 8023990:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8023994:	7853      	ldrb	r3, [r2, #1]
 8023996:	fb13 f300 	smulbb	r3, r3, r0
 802399a:	1224      	asrs	r4, r4, #8
 802399c:	7014      	strb	r4, [r2, #0]
 802399e:	784c      	ldrb	r4, [r1, #1]
 80239a0:	fb14 f405 	smulbb	r4, r4, r5
 80239a4:	441c      	add	r4, r3
 80239a6:	b2a4      	uxth	r4, r4
 80239a8:	1c63      	adds	r3, r4, #1
 80239aa:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80239ae:	1224      	asrs	r4, r4, #8
 80239b0:	7054      	strb	r4, [r2, #1]
 80239b2:	788b      	ldrb	r3, [r1, #2]
 80239b4:	7891      	ldrb	r1, [r2, #2]
 80239b6:	fb13 f305 	smulbb	r3, r3, r5
 80239ba:	fb11 f000 	smulbb	r0, r1, r0
 80239be:	4403      	add	r3, r0
 80239c0:	b29b      	uxth	r3, r3
 80239c2:	1c59      	adds	r1, r3, #1
 80239c4:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80239c8:	121b      	asrs	r3, r3, #8
 80239ca:	7093      	strb	r3, [r2, #2]
 80239cc:	bd30      	pop	{r4, r5, pc}
	...

080239d0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 80239d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80239d4:	461c      	mov	r4, r3
 80239d6:	b08b      	sub	sp, #44	@ 0x2c
 80239d8:	460e      	mov	r6, r1
 80239da:	4615      	mov	r5, r2
 80239dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80239de:	4682      	mov	sl, r0
 80239e0:	6861      	ldr	r1, [r4, #4]
 80239e2:	aa06      	add	r2, sp, #24
 80239e4:	6820      	ldr	r0, [r4, #0]
 80239e6:	2702      	movs	r7, #2
 80239e8:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 80239ec:	3504      	adds	r5, #4
 80239ee:	c203      	stmia	r2!, {r0, r1}
 80239f0:	6818      	ldr	r0, [r3, #0]
 80239f2:	aa08      	add	r2, sp, #32
 80239f4:	6859      	ldr	r1, [r3, #4]
 80239f6:	c203      	stmia	r2!, {r0, r1}
 80239f8:	a806      	add	r0, sp, #24
 80239fa:	f7f2 fef3 	bl	80167e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80239fe:	4621      	mov	r1, r4
 8023a00:	a808      	add	r0, sp, #32
 8023a02:	f7f2 ff17 	bl	8016834 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023a06:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8023a0a:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 8023a0e:	f002 0301 	and.w	r3, r2, #1
 8023a12:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 8023a16:	9302      	str	r3, [sp, #8]
 8023a18:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8023a1c:	f003 0101 	and.w	r1, r3, #1
 8023a20:	9101      	str	r1, [sp, #4]
 8023a22:	9801      	ldr	r0, [sp, #4]
 8023a24:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 8023a28:	4403      	add	r3, r0
 8023a2a:	fb01 2303 	mla	r3, r1, r3, r2
 8023a2e:	fb93 f3f7 	sdiv	r3, r3, r7
 8023a32:	441e      	add	r6, r3
 8023a34:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8023a38:	441a      	add	r2, r3
 8023a3a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8023a3e:	4419      	add	r1, r3
 8023a40:	4b70      	ldr	r3, [pc, #448]	@ (8023c04 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8023a42:	f8ad 2020 	strh.w	r2, [sp, #32]
 8023a46:	6818      	ldr	r0, [r3, #0]
 8023a48:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 8023a4c:	6803      	ldr	r3, [r0, #0]
 8023a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023a50:	4798      	blx	r3
 8023a52:	4a6d      	ldr	r2, [pc, #436]	@ (8023c08 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 8023a54:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8023a58:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8023a5c:	8813      	ldrh	r3, [r2, #0]
 8023a5e:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 8023a62:	fb03 1404 	mla	r4, r3, r4, r1
 8023a66:	4611      	mov	r1, r2
 8023a68:	fb0b f303 	mul.w	r3, fp, r3
 8023a6c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023a70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023a74:	4404      	add	r4, r0
 8023a76:	4423      	add	r3, r4
 8023a78:	d073      	beq.n	8023b62 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 8023a7a:	9705      	str	r7, [sp, #20]
 8023a7c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8023a80:	9b03      	ldr	r3, [sp, #12]
 8023a82:	429c      	cmp	r4, r3
 8023a84:	f080 80b5 	bcs.w	8023bf2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8023a88:	9b02      	ldr	r3, [sp, #8]
 8023a8a:	b35b      	cbz	r3, 8023ae4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 8023a8c:	7831      	ldrb	r1, [r6, #0]
 8023a8e:	4622      	mov	r2, r4
 8023a90:	1c77      	adds	r7, r6, #1
 8023a92:	3403      	adds	r4, #3
 8023a94:	f001 010f 	and.w	r1, r1, #15
 8023a98:	f108 3bff 	add.w	fp, r8, #4294967295
 8023a9c:	464b      	mov	r3, r9
 8023a9e:	4650      	mov	r0, sl
 8023aa0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023aa4:	4429      	add	r1, r5
 8023aa6:	f7ff ff65 	bl	8023974 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8023aaa:	f1bb 0f01 	cmp.w	fp, #1
 8023aae:	dd1c      	ble.n	8023aea <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8023ab0:	7839      	ldrb	r1, [r7, #0]
 8023ab2:	4622      	mov	r2, r4
 8023ab4:	464b      	mov	r3, r9
 8023ab6:	4650      	mov	r0, sl
 8023ab8:	0909      	lsrs	r1, r1, #4
 8023aba:	f1ab 0b02 	sub.w	fp, fp, #2
 8023abe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023ac2:	4429      	add	r1, r5
 8023ac4:	f7ff ff56 	bl	8023974 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8023ac8:	f817 1b01 	ldrb.w	r1, [r7], #1
 8023acc:	1ce2      	adds	r2, r4, #3
 8023ace:	464b      	mov	r3, r9
 8023ad0:	f001 010f 	and.w	r1, r1, #15
 8023ad4:	4650      	mov	r0, sl
 8023ad6:	3406      	adds	r4, #6
 8023ad8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023adc:	4429      	add	r1, r5
 8023ade:	f7ff ff49 	bl	8023974 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8023ae2:	e7e2      	b.n	8023aaa <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8023ae4:	4637      	mov	r7, r6
 8023ae6:	46c3      	mov	fp, r8
 8023ae8:	e7df      	b.n	8023aaa <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8023aea:	d10a      	bne.n	8023b02 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 8023aec:	7839      	ldrb	r1, [r7, #0]
 8023aee:	4622      	mov	r2, r4
 8023af0:	3403      	adds	r4, #3
 8023af2:	464b      	mov	r3, r9
 8023af4:	0909      	lsrs	r1, r1, #4
 8023af6:	4650      	mov	r0, sl
 8023af8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023afc:	4429      	add	r1, r5
 8023afe:	f7ff ff39 	bl	8023974 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8023b02:	9b04      	ldr	r3, [sp, #16]
 8023b04:	9a01      	ldr	r2, [sp, #4]
 8023b06:	881b      	ldrh	r3, [r3, #0]
 8023b08:	eba3 0308 	sub.w	r3, r3, r8
 8023b0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023b10:	441c      	add	r4, r3
 8023b12:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8023b16:	4413      	add	r3, r2
 8023b18:	9a05      	ldr	r2, [sp, #20]
 8023b1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8023b1e:	441e      	add	r6, r3
 8023b20:	e7ae      	b.n	8023a80 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 8023b22:	4632      	mov	r2, r6
 8023b24:	46c4      	mov	ip, r8
 8023b26:	e037      	b.n	8023b98 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8023b28:	d10e      	bne.n	8023b48 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 8023b2a:	7812      	ldrb	r2, [r2, #0]
 8023b2c:	3003      	adds	r0, #3
 8023b2e:	0912      	lsrs	r2, r2, #4
 8023b30:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023b34:	18ac      	adds	r4, r5, r2
 8023b36:	5caa      	ldrb	r2, [r5, r2]
 8023b38:	f800 2c03 	strb.w	r2, [r0, #-3]
 8023b3c:	7862      	ldrb	r2, [r4, #1]
 8023b3e:	f800 2c02 	strb.w	r2, [r0, #-2]
 8023b42:	78a2      	ldrb	r2, [r4, #2]
 8023b44:	f800 2c01 	strb.w	r2, [r0, #-1]
 8023b48:	880c      	ldrh	r4, [r1, #0]
 8023b4a:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8023b4e:	eba4 0408 	sub.w	r4, r4, r8
 8023b52:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023b56:	4404      	add	r4, r0
 8023b58:	9801      	ldr	r0, [sp, #4]
 8023b5a:	4402      	add	r2, r0
 8023b5c:	fb92 f2f7 	sdiv	r2, r2, r7
 8023b60:	4416      	add	r6, r2
 8023b62:	429c      	cmp	r4, r3
 8023b64:	d245      	bcs.n	8023bf2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8023b66:	9a02      	ldr	r2, [sp, #8]
 8023b68:	2a00      	cmp	r2, #0
 8023b6a:	d0da      	beq.n	8023b22 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 8023b6c:	7830      	ldrb	r0, [r6, #0]
 8023b6e:	1c72      	adds	r2, r6, #1
 8023b70:	3403      	adds	r4, #3
 8023b72:	f000 000f 	and.w	r0, r0, #15
 8023b76:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023b7a:	eb05 0c00 	add.w	ip, r5, r0
 8023b7e:	5c28      	ldrb	r0, [r5, r0]
 8023b80:	f804 0c03 	strb.w	r0, [r4, #-3]
 8023b84:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8023b88:	f804 0c02 	strb.w	r0, [r4, #-2]
 8023b8c:	f89c 0002 	ldrb.w	r0, [ip, #2]
 8023b90:	f108 3cff 	add.w	ip, r8, #4294967295
 8023b94:	f804 0c01 	strb.w	r0, [r4, #-1]
 8023b98:	f1bc 0f01 	cmp.w	ip, #1
 8023b9c:	4620      	mov	r0, r4
 8023b9e:	f104 0406 	add.w	r4, r4, #6
 8023ba2:	ddc1      	ble.n	8023b28 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 8023ba4:	7810      	ldrb	r0, [r2, #0]
 8023ba6:	f1ac 0c02 	sub.w	ip, ip, #2
 8023baa:	0900      	lsrs	r0, r0, #4
 8023bac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023bb0:	eb05 0e00 	add.w	lr, r5, r0
 8023bb4:	5c28      	ldrb	r0, [r5, r0]
 8023bb6:	f804 0c06 	strb.w	r0, [r4, #-6]
 8023bba:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8023bbe:	f804 0c05 	strb.w	r0, [r4, #-5]
 8023bc2:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8023bc6:	f804 0c04 	strb.w	r0, [r4, #-4]
 8023bca:	f812 0b01 	ldrb.w	r0, [r2], #1
 8023bce:	f000 000f 	and.w	r0, r0, #15
 8023bd2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023bd6:	eb05 0e00 	add.w	lr, r5, r0
 8023bda:	5c28      	ldrb	r0, [r5, r0]
 8023bdc:	f804 0c03 	strb.w	r0, [r4, #-3]
 8023be0:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8023be4:	f804 0c02 	strb.w	r0, [r4, #-2]
 8023be8:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8023bec:	f804 0c01 	strb.w	r0, [r4, #-1]
 8023bf0:	e7d2      	b.n	8023b98 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8023bf2:	4b04      	ldr	r3, [pc, #16]	@ (8023c04 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8023bf4:	6818      	ldr	r0, [r3, #0]
 8023bf6:	6803      	ldr	r3, [r0, #0]
 8023bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023bfa:	4798      	blx	r3
 8023bfc:	b00b      	add	sp, #44	@ 0x2c
 8023bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c02:	bf00      	nop
 8023c04:	24026418 	.word	0x24026418
 8023c08:	24026412 	.word	0x24026412

08023c0c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 8023c0c:	b530      	push	{r4, r5, lr}
 8023c0e:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8023c12:	780d      	ldrb	r5, [r1, #0]
 8023c14:	28ff      	cmp	r0, #255	@ 0xff
 8023c16:	d107      	bne.n	8023c28 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8023c18:	2bff      	cmp	r3, #255	@ 0xff
 8023c1a:	d105      	bne.n	8023c28 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8023c1c:	7015      	strb	r5, [r2, #0]
 8023c1e:	784b      	ldrb	r3, [r1, #1]
 8023c20:	7053      	strb	r3, [r2, #1]
 8023c22:	788b      	ldrb	r3, [r1, #2]
 8023c24:	7093      	strb	r3, [r2, #2]
 8023c26:	bd30      	pop	{r4, r5, pc}
 8023c28:	fb10 f003 	smulbb	r0, r0, r3
 8023c2c:	b283      	uxth	r3, r0
 8023c2e:	1c58      	adds	r0, r3, #1
 8023c30:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8023c34:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023c38:	b284      	uxth	r4, r0
 8023c3a:	43c0      	mvns	r0, r0
 8023c3c:	fb15 f504 	smulbb	r5, r5, r4
 8023c40:	b2c3      	uxtb	r3, r0
 8023c42:	7810      	ldrb	r0, [r2, #0]
 8023c44:	fb00 5003 	mla	r0, r0, r3, r5
 8023c48:	b280      	uxth	r0, r0
 8023c4a:	1c45      	adds	r5, r0, #1
 8023c4c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023c50:	7855      	ldrb	r5, [r2, #1]
 8023c52:	fb15 f503 	smulbb	r5, r5, r3
 8023c56:	1200      	asrs	r0, r0, #8
 8023c58:	7010      	strb	r0, [r2, #0]
 8023c5a:	7848      	ldrb	r0, [r1, #1]
 8023c5c:	fb00 5004 	mla	r0, r0, r4, r5
 8023c60:	b280      	uxth	r0, r0
 8023c62:	1c45      	adds	r5, r0, #1
 8023c64:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023c68:	1200      	asrs	r0, r0, #8
 8023c6a:	7050      	strb	r0, [r2, #1]
 8023c6c:	7888      	ldrb	r0, [r1, #2]
 8023c6e:	7891      	ldrb	r1, [r2, #2]
 8023c70:	fb11 f303 	smulbb	r3, r1, r3
 8023c74:	fb00 3304 	mla	r3, r0, r4, r3
 8023c78:	b29b      	uxth	r3, r3
 8023c7a:	1c59      	adds	r1, r3, #1
 8023c7c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8023c80:	121b      	asrs	r3, r3, #8
 8023c82:	e7cf      	b.n	8023c24 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

08023c84 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8023c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c88:	461d      	mov	r5, r3
 8023c8a:	b08f      	sub	sp, #60	@ 0x3c
 8023c8c:	460c      	mov	r4, r1
 8023c8e:	4616      	mov	r6, r2
 8023c90:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023c92:	4680      	mov	r8, r0
 8023c94:	6869      	ldr	r1, [r5, #4]
 8023c96:	aa0a      	add	r2, sp, #40	@ 0x28
 8023c98:	6828      	ldr	r0, [r5, #0]
 8023c9a:	3604      	adds	r6, #4
 8023c9c:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 8023ca0:	4f57      	ldr	r7, [pc, #348]	@ (8023e00 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 8023ca2:	c203      	stmia	r2!, {r0, r1}
 8023ca4:	6818      	ldr	r0, [r3, #0]
 8023ca6:	aa0c      	add	r2, sp, #48	@ 0x30
 8023ca8:	6859      	ldr	r1, [r3, #4]
 8023caa:	c203      	stmia	r2!, {r0, r1}
 8023cac:	a80a      	add	r0, sp, #40	@ 0x28
 8023cae:	f7f2 fd99 	bl	80167e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023cb2:	4629      	mov	r1, r5
 8023cb4:	a80c      	add	r0, sp, #48	@ 0x30
 8023cb6:	2502      	movs	r5, #2
 8023cb8:	f7f2 fdbc 	bl	8016834 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023cbc:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8023cc0:	f9bd a036 	ldrsh.w	sl, [sp, #54]	@ 0x36
 8023cc4:	f002 0301 	and.w	r3, r2, #1
 8023cc8:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 8023ccc:	9304      	str	r3, [sp, #16]
 8023cce:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8023cd2:	f003 0101 	and.w	r1, r3, #1
 8023cd6:	9103      	str	r1, [sp, #12]
 8023cd8:	9803      	ldr	r0, [sp, #12]
 8023cda:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8023cde:	4403      	add	r3, r0
 8023ce0:	6838      	ldr	r0, [r7, #0]
 8023ce2:	fb01 2303 	mla	r3, r1, r3, r2
 8023ce6:	fb93 f3f5 	sdiv	r3, r3, r5
 8023cea:	18e5      	adds	r5, r4, r3
 8023cec:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8023cf0:	441a      	add	r2, r3
 8023cf2:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8023cf6:	4419      	add	r1, r3
 8023cf8:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8023cfc:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8023d00:	6803      	ldr	r3, [r0, #0]
 8023d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023d04:	4798      	blx	r3
 8023d06:	4a3f      	ldr	r2, [pc, #252]	@ (8023e04 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 8023d08:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8023d0c:	8813      	ldrh	r3, [r2, #0]
 8023d0e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8023d12:	9207      	str	r2, [sp, #28]
 8023d14:	fb03 1404 	mla	r4, r3, r4, r1
 8023d18:	fb0a f303 	mul.w	r3, sl, r3
 8023d1c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023d20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023d24:	4404      	add	r4, r0
 8023d26:	18e3      	adds	r3, r4, r3
 8023d28:	e9cd 3705 	strd	r3, r7, [sp, #20]
 8023d2c:	9b05      	ldr	r3, [sp, #20]
 8023d2e:	429c      	cmp	r4, r3
 8023d30:	d25d      	bcs.n	8023dee <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 8023d32:	9b04      	ldr	r3, [sp, #16]
 8023d34:	2b00      	cmp	r3, #0
 8023d36:	d037      	beq.n	8023da8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 8023d38:	782b      	ldrb	r3, [r5, #0]
 8023d3a:	1c6f      	adds	r7, r5, #1
 8023d3c:	f003 030f 	and.w	r3, r3, #15
 8023d40:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023d44:	9309      	str	r3, [sp, #36]	@ 0x24
 8023d46:	0e1b      	lsrs	r3, r3, #24
 8023d48:	d006      	beq.n	8023d58 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 8023d4a:	9300      	str	r3, [sp, #0]
 8023d4c:	4622      	mov	r2, r4
 8023d4e:	464b      	mov	r3, r9
 8023d50:	a909      	add	r1, sp, #36	@ 0x24
 8023d52:	4640      	mov	r0, r8
 8023d54:	f7ff ff5a 	bl	8023c0c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8023d58:	3403      	adds	r4, #3
 8023d5a:	f10b 3aff 	add.w	sl, fp, #4294967295
 8023d5e:	f1ba 0f01 	cmp.w	sl, #1
 8023d62:	dd24      	ble.n	8023dae <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 8023d64:	783b      	ldrb	r3, [r7, #0]
 8023d66:	091b      	lsrs	r3, r3, #4
 8023d68:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023d6c:	9308      	str	r3, [sp, #32]
 8023d6e:	0e1b      	lsrs	r3, r3, #24
 8023d70:	d006      	beq.n	8023d80 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 8023d72:	9300      	str	r3, [sp, #0]
 8023d74:	4622      	mov	r2, r4
 8023d76:	464b      	mov	r3, r9
 8023d78:	a908      	add	r1, sp, #32
 8023d7a:	4640      	mov	r0, r8
 8023d7c:	f7ff ff46 	bl	8023c0c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8023d80:	f817 3b01 	ldrb.w	r3, [r7], #1
 8023d84:	f003 030f 	and.w	r3, r3, #15
 8023d88:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023d8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8023d8e:	0e1b      	lsrs	r3, r3, #24
 8023d90:	d006      	beq.n	8023da0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8023d92:	9300      	str	r3, [sp, #0]
 8023d94:	1ce2      	adds	r2, r4, #3
 8023d96:	464b      	mov	r3, r9
 8023d98:	a909      	add	r1, sp, #36	@ 0x24
 8023d9a:	4640      	mov	r0, r8
 8023d9c:	f7ff ff36 	bl	8023c0c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8023da0:	3406      	adds	r4, #6
 8023da2:	f1aa 0a02 	sub.w	sl, sl, #2
 8023da6:	e7da      	b.n	8023d5e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8023da8:	462f      	mov	r7, r5
 8023daa:	46da      	mov	sl, fp
 8023dac:	e7d7      	b.n	8023d5e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8023dae:	d10e      	bne.n	8023dce <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 8023db0:	783b      	ldrb	r3, [r7, #0]
 8023db2:	091b      	lsrs	r3, r3, #4
 8023db4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023db8:	9309      	str	r3, [sp, #36]	@ 0x24
 8023dba:	0e1b      	lsrs	r3, r3, #24
 8023dbc:	d006      	beq.n	8023dcc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 8023dbe:	9300      	str	r3, [sp, #0]
 8023dc0:	4622      	mov	r2, r4
 8023dc2:	464b      	mov	r3, r9
 8023dc4:	a909      	add	r1, sp, #36	@ 0x24
 8023dc6:	4640      	mov	r0, r8
 8023dc8:	f7ff ff20 	bl	8023c0c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8023dcc:	3403      	adds	r4, #3
 8023dce:	9b07      	ldr	r3, [sp, #28]
 8023dd0:	9a03      	ldr	r2, [sp, #12]
 8023dd2:	881b      	ldrh	r3, [r3, #0]
 8023dd4:	eba3 030b 	sub.w	r3, r3, fp
 8023dd8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023ddc:	441c      	add	r4, r3
 8023dde:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8023de2:	4413      	add	r3, r2
 8023de4:	2202      	movs	r2, #2
 8023de6:	fb93 f3f2 	sdiv	r3, r3, r2
 8023dea:	441d      	add	r5, r3
 8023dec:	e79e      	b.n	8023d2c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 8023dee:	9b06      	ldr	r3, [sp, #24]
 8023df0:	6818      	ldr	r0, [r3, #0]
 8023df2:	6803      	ldr	r3, [r0, #0]
 8023df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023df6:	4798      	blx	r3
 8023df8:	b00f      	add	sp, #60	@ 0x3c
 8023dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023dfe:	bf00      	nop
 8023e00:	24026418 	.word	0x24026418
 8023e04:	24026412 	.word	0x24026412

08023e08 <CRC_Lock>:
 8023e08:	4a2d      	ldr	r2, [pc, #180]	@ (8023ec0 <CRC_Lock+0xb8>)
 8023e0a:	b530      	push	{r4, r5, lr}
 8023e0c:	6813      	ldr	r3, [r2, #0]
 8023e0e:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8023e12:	f023 0301 	bic.w	r3, r3, #1
 8023e16:	6013      	str	r3, [r2, #0]
 8023e18:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8023e1c:	4b29      	ldr	r3, [pc, #164]	@ (8023ec4 <CRC_Lock+0xbc>)
 8023e1e:	681c      	ldr	r4, [r3, #0]
 8023e20:	4014      	ands	r4, r2
 8023e22:	42ac      	cmp	r4, r5
 8023e24:	d005      	beq.n	8023e32 <CRC_Lock+0x2a>
 8023e26:	681c      	ldr	r4, [r3, #0]
 8023e28:	f24c 2570 	movw	r5, #49776	@ 0xc270
 8023e2c:	4014      	ands	r4, r2
 8023e2e:	42ac      	cmp	r4, r5
 8023e30:	d125      	bne.n	8023e7e <CRC_Lock+0x76>
 8023e32:	4b25      	ldr	r3, [pc, #148]	@ (8023ec8 <CRC_Lock+0xc0>)
 8023e34:	681b      	ldr	r3, [r3, #0]
 8023e36:	2b00      	cmp	r3, #0
 8023e38:	d139      	bne.n	8023eae <CRC_Lock+0xa6>
 8023e3a:	4b24      	ldr	r3, [pc, #144]	@ (8023ecc <CRC_Lock+0xc4>)
 8023e3c:	681a      	ldr	r2, [r3, #0]
 8023e3e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8023e42:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 8023e46:	d00d      	beq.n	8023e64 <CRC_Lock+0x5c>
 8023e48:	681a      	ldr	r2, [r3, #0]
 8023e4a:	f240 4483 	movw	r4, #1155	@ 0x483
 8023e4e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8023e52:	42a2      	cmp	r2, r4
 8023e54:	d006      	beq.n	8023e64 <CRC_Lock+0x5c>
 8023e56:	681b      	ldr	r3, [r3, #0]
 8023e58:	f240 4285 	movw	r2, #1157	@ 0x485
 8023e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023e60:	4293      	cmp	r3, r2
 8023e62:	d124      	bne.n	8023eae <CRC_Lock+0xa6>
 8023e64:	4b1a      	ldr	r3, [pc, #104]	@ (8023ed0 <CRC_Lock+0xc8>)
 8023e66:	2201      	movs	r2, #1
 8023e68:	601a      	str	r2, [r3, #0]
 8023e6a:	681a      	ldr	r2, [r3, #0]
 8023e6c:	2a00      	cmp	r2, #0
 8023e6e:	d1fc      	bne.n	8023e6a <CRC_Lock+0x62>
 8023e70:	4b18      	ldr	r3, [pc, #96]	@ (8023ed4 <CRC_Lock+0xcc>)
 8023e72:	6018      	str	r0, [r3, #0]
 8023e74:	6818      	ldr	r0, [r3, #0]
 8023e76:	1a43      	subs	r3, r0, r1
 8023e78:	4258      	negs	r0, r3
 8023e7a:	4158      	adcs	r0, r3
 8023e7c:	e00e      	b.n	8023e9c <CRC_Lock+0x94>
 8023e7e:	681b      	ldr	r3, [r3, #0]
 8023e80:	4013      	ands	r3, r2
 8023e82:	f24d 2220 	movw	r2, #53792	@ 0xd220
 8023e86:	4293      	cmp	r3, r2
 8023e88:	d111      	bne.n	8023eae <CRC_Lock+0xa6>
 8023e8a:	4b13      	ldr	r3, [pc, #76]	@ (8023ed8 <CRC_Lock+0xd0>)
 8023e8c:	f240 4286 	movw	r2, #1158	@ 0x486
 8023e90:	681b      	ldr	r3, [r3, #0]
 8023e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023e96:	4293      	cmp	r3, r2
 8023e98:	d001      	beq.n	8023e9e <CRC_Lock+0x96>
 8023e9a:	2000      	movs	r0, #0
 8023e9c:	bd30      	pop	{r4, r5, pc}
 8023e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8023edc <CRC_Lock+0xd4>)
 8023ea0:	2201      	movs	r2, #1
 8023ea2:	601a      	str	r2, [r3, #0]
 8023ea4:	681a      	ldr	r2, [r3, #0]
 8023ea6:	2a00      	cmp	r2, #0
 8023ea8:	d1fc      	bne.n	8023ea4 <CRC_Lock+0x9c>
 8023eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8023ee0 <CRC_Lock+0xd8>)
 8023eac:	e7e1      	b.n	8023e72 <CRC_Lock+0x6a>
 8023eae:	4b0d      	ldr	r3, [pc, #52]	@ (8023ee4 <CRC_Lock+0xdc>)
 8023eb0:	2201      	movs	r2, #1
 8023eb2:	601a      	str	r2, [r3, #0]
 8023eb4:	681a      	ldr	r2, [r3, #0]
 8023eb6:	2a00      	cmp	r2, #0
 8023eb8:	d1fc      	bne.n	8023eb4 <CRC_Lock+0xac>
 8023eba:	4b0b      	ldr	r3, [pc, #44]	@ (8023ee8 <CRC_Lock+0xe0>)
 8023ebc:	e7d9      	b.n	8023e72 <CRC_Lock+0x6a>
 8023ebe:	bf00      	nop
 8023ec0:	e0002000 	.word	0xe0002000
 8023ec4:	e000ed00 	.word	0xe000ed00
 8023ec8:	e0042000 	.word	0xe0042000
 8023ecc:	5c001000 	.word	0x5c001000
 8023ed0:	58024c08 	.word	0x58024c08
 8023ed4:	58024c00 	.word	0x58024c00
 8023ed8:	46008ff0 	.word	0x46008ff0
 8023edc:	46024c08 	.word	0x46024c08
 8023ee0:	46024c00 	.word	0x46024c00
 8023ee4:	40023008 	.word	0x40023008
 8023ee8:	40023000 	.word	0x40023000

08023eec <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8023eec:	6101      	str	r1, [r0, #16]
 8023eee:	4770      	bx	lr

08023ef0 <_ZN8touchgfx8Gestures4tickEv>:
 8023ef0:	7b83      	ldrb	r3, [r0, #14]
 8023ef2:	b14b      	cbz	r3, 8023f08 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8023ef4:	8903      	ldrh	r3, [r0, #8]
 8023ef6:	3301      	adds	r3, #1
 8023ef8:	b29b      	uxth	r3, r3
 8023efa:	2b07      	cmp	r3, #7
 8023efc:	8103      	strh	r3, [r0, #8]
 8023efe:	bf81      	itttt	hi
 8023f00:	2300      	movhi	r3, #0
 8023f02:	8143      	strhhi	r3, [r0, #10]
 8023f04:	8183      	strhhi	r3, [r0, #12]
 8023f06:	7383      	strbhi	r3, [r0, #14]
 8023f08:	4770      	bx	lr
	...

08023f0c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8023f0c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8023f10:	4698      	mov	r8, r3
 8023f12:	8883      	ldrh	r3, [r0, #4]
 8023f14:	4604      	mov	r4, r0
 8023f16:	4617      	mov	r7, r2
 8023f18:	f8ad 3006 	strh.w	r3, [sp, #6]
 8023f1c:	eba8 0303 	sub.w	r3, r8, r3
 8023f20:	4a19      	ldr	r2, [pc, #100]	@ (8023f88 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8023f22:	460e      	mov	r6, r1
 8023f24:	b21b      	sxth	r3, r3
 8023f26:	88c1      	ldrh	r1, [r0, #6]
 8023f28:	9200      	str	r2, [sp, #0]
 8023f2a:	2000      	movs	r0, #0
 8023f2c:	2b00      	cmp	r3, #0
 8023f2e:	8aa2      	ldrh	r2, [r4, #20]
 8023f30:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8023f34:	bfb8      	it	lt
 8023f36:	425b      	neglt	r3, r3
 8023f38:	f88d 0004 	strb.w	r0, [sp, #4]
 8023f3c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8023f40:	b21b      	sxth	r3, r3
 8023f42:	f8ad 800a 	strh.w	r8, [sp, #10]
 8023f46:	f8ad 500c 	strh.w	r5, [sp, #12]
 8023f4a:	4293      	cmp	r3, r2
 8023f4c:	dc07      	bgt.n	8023f5e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8023f4e:	1a69      	subs	r1, r5, r1
 8023f50:	b209      	sxth	r1, r1
 8023f52:	2900      	cmp	r1, #0
 8023f54:	bfb8      	it	lt
 8023f56:	4249      	neglt	r1, r1
 8023f58:	b209      	sxth	r1, r1
 8023f5a:	428a      	cmp	r2, r1
 8023f5c:	da10      	bge.n	8023f80 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8023f5e:	6920      	ldr	r0, [r4, #16]
 8023f60:	4669      	mov	r1, sp
 8023f62:	eba8 0606 	sub.w	r6, r8, r6
 8023f66:	1bef      	subs	r7, r5, r7
 8023f68:	6803      	ldr	r3, [r0, #0]
 8023f6a:	685b      	ldr	r3, [r3, #4]
 8023f6c:	4798      	blx	r3
 8023f6e:	2300      	movs	r3, #0
 8023f70:	2001      	movs	r0, #1
 8023f72:	8166      	strh	r6, [r4, #10]
 8023f74:	8123      	strh	r3, [r4, #8]
 8023f76:	81a7      	strh	r7, [r4, #12]
 8023f78:	f8a4 8004 	strh.w	r8, [r4, #4]
 8023f7c:	80e5      	strh	r5, [r4, #6]
 8023f7e:	73a0      	strb	r0, [r4, #14]
 8023f80:	b004      	add	sp, #16
 8023f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023f86:	bf00      	nop
 8023f88:	080299a4 	.word	0x080299a4

08023f8c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8023f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023f8e:	461e      	mov	r6, r3
 8023f90:	1e4b      	subs	r3, r1, #1
 8023f92:	b085      	sub	sp, #20
 8023f94:	4604      	mov	r4, r0
 8023f96:	2b01      	cmp	r3, #1
 8023f98:	460d      	mov	r5, r1
 8023f9a:	4617      	mov	r7, r2
 8023f9c:	d84b      	bhi.n	8024036 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8023f9e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8023fa2:	1cd3      	adds	r3, r2, #3
 8023fa4:	b29b      	uxth	r3, r3
 8023fa6:	2b06      	cmp	r3, #6
 8023fa8:	d916      	bls.n	8023fd8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8023faa:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 802404c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8023fae:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023fb2:	f8cd c004 	str.w	ip, [sp, #4]
 8023fb6:	f04f 0c00 	mov.w	ip, #0
 8023fba:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8023fbe:	6900      	ldr	r0, [r0, #16]
 8023fc0:	f8ad 100c 	strh.w	r1, [sp, #12]
 8023fc4:	a901      	add	r1, sp, #4
 8023fc6:	f88d c008 	strb.w	ip, [sp, #8]
 8023fca:	f8ad 200a 	strh.w	r2, [sp, #10]
 8023fce:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023fd2:	6803      	ldr	r3, [r0, #0]
 8023fd4:	689b      	ldr	r3, [r3, #8]
 8023fd6:	4798      	blx	r3
 8023fd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023fdc:	1cd3      	adds	r3, r2, #3
 8023fde:	b29b      	uxth	r3, r3
 8023fe0:	2b06      	cmp	r3, #6
 8023fe2:	d916      	bls.n	8024012 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023fe4:	f8df c064 	ldr.w	ip, [pc, #100]	@ 802404c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8023fe8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023fec:	f8cd c004 	str.w	ip, [sp, #4]
 8023ff0:	f04f 0c01 	mov.w	ip, #1
 8023ff4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8023ff8:	6920      	ldr	r0, [r4, #16]
 8023ffa:	f8ad 100c 	strh.w	r1, [sp, #12]
 8023ffe:	a901      	add	r1, sp, #4
 8024000:	f88d c008 	strb.w	ip, [sp, #8]
 8024004:	f8ad 200a 	strh.w	r2, [sp, #10]
 8024008:	f8ad 300e 	strh.w	r3, [sp, #14]
 802400c:	6803      	ldr	r3, [r0, #0]
 802400e:	689b      	ldr	r3, [r3, #8]
 8024010:	4798      	blx	r3
 8024012:	4b0d      	ldr	r3, [pc, #52]	@ (8024048 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8024014:	a901      	add	r1, sp, #4
 8024016:	6920      	ldr	r0, [r4, #16]
 8024018:	9301      	str	r3, [sp, #4]
 802401a:	2300      	movs	r3, #0
 802401c:	f88d 5008 	strb.w	r5, [sp, #8]
 8024020:	f8ad 700a 	strh.w	r7, [sp, #10]
 8024024:	f8ad 600c 	strh.w	r6, [sp, #12]
 8024028:	f8ad 300e 	strh.w	r3, [sp, #14]
 802402c:	6803      	ldr	r3, [r0, #0]
 802402e:	681b      	ldr	r3, [r3, #0]
 8024030:	4798      	blx	r3
 8024032:	b005      	add	sp, #20
 8024034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024036:	2900      	cmp	r1, #0
 8024038:	d1eb      	bne.n	8024012 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802403a:	80a2      	strh	r2, [r4, #4]
 802403c:	80c6      	strh	r6, [r0, #6]
 802403e:	60a1      	str	r1, [r4, #8]
 8024040:	81a1      	strh	r1, [r4, #12]
 8024042:	73a1      	strb	r1, [r4, #14]
 8024044:	e7e5      	b.n	8024012 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024046:	bf00      	nop
 8024048:	08029990 	.word	0x08029990
 802404c:	080299b8 	.word	0x080299b8

08024050 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 8024050:	10c9      	asrs	r1, r1, #3
 8024052:	2900      	cmp	r1, #0
 8024054:	bfb8      	it	lt
 8024056:	4249      	neglt	r1, r1
 8024058:	2801      	cmp	r0, #1
 802405a:	d108      	bne.n	802406e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 802405c:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8024060:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8024064:	4601      	mov	r1, r0
 8024066:	dd02      	ble.n	802406e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8024068:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 802406c:	4770      	bx	lr
 802406e:	29ff      	cmp	r1, #255	@ 0xff
 8024070:	bfa8      	it	ge
 8024072:	21ff      	movge	r1, #255	@ 0xff
 8024074:	4608      	mov	r0, r1
 8024076:	4770      	bx	lr

08024078 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8024078:	b410      	push	{r4}
 802407a:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 802407e:	429c      	cmp	r4, r3
 8024080:	d803      	bhi.n	802408a <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 8024082:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024086:	f7f0 beb7 	b.w	8014df8 <_ZN8touchgfx7Outline6lineToEii>
 802408a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802408e:	4770      	bx	lr

08024090 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8024090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024094:	b08b      	sub	sp, #44	@ 0x2c
 8024096:	4606      	mov	r6, r0
 8024098:	468a      	mov	sl, r1
 802409a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802409e:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80240a2:	9308      	str	r3, [sp, #32]
 80240a4:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 80240a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80240aa:	f7f1 f810 	bl	80150ce <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 80240ae:	68b5      	ldr	r5, [r6, #8]
 80240b0:	4604      	mov	r4, r0
 80240b2:	2d00      	cmp	r5, #0
 80240b4:	d044      	beq.n	8024140 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80240b6:	6873      	ldr	r3, [r6, #4]
 80240b8:	42ab      	cmp	r3, r5
 80240ba:	d33d      	bcc.n	8024138 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 80240bc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80240c0:	f04f 0800 	mov.w	r8, #0
 80240c4:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 80240c8:	eb02 0b03 	add.w	fp, r2, r3
 80240cc:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80240d0:	fb02 1203 	mla	r2, r2, r3, r1
 80240d4:	9205      	str	r2, [sp, #20]
 80240d6:	1e6a      	subs	r2, r5, #1
 80240d8:	9204      	str	r2, [sp, #16]
 80240da:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 80240de:	f9b4 7000 	ldrsh.w	r7, [r4]
 80240e2:	454b      	cmp	r3, r9
 80240e4:	463a      	mov	r2, r7
 80240e6:	d008      	beq.n	80240fa <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 80240e8:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 80240ec:	eb03 0b09 	add.w	fp, r3, r9
 80240f0:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 80240f4:	fb03 1309 	mla	r3, r3, r9, r1
 80240f8:	9305      	str	r3, [sp, #20]
 80240fa:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80240fe:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8024102:	4498      	add	r8, r3
 8024104:	9b04      	ldr	r3, [sp, #16]
 8024106:	3b01      	subs	r3, #1
 8024108:	9304      	str	r3, [sp, #16]
 802410a:	9b04      	ldr	r3, [sp, #16]
 802410c:	3301      	adds	r3, #1
 802410e:	d015      	beq.n	802413c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 8024110:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8024114:	42bb      	cmp	r3, r7
 8024116:	d117      	bne.n	8024148 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 8024118:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 802411c:	9b04      	ldr	r3, [sp, #16]
 802411e:	4548      	cmp	r0, r9
 8024120:	f103 33ff 	add.w	r3, r3, #4294967295
 8024124:	d17d      	bne.n	8024222 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 8024126:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 802412a:	4401      	add	r1, r0
 802412c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8024130:	4480      	add	r8, r0
 8024132:	e7e9      	b.n	8024108 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 8024134:	461f      	mov	r7, r3
 8024136:	e042      	b.n	80241be <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 8024138:	2000      	movs	r0, #0
 802413a:	e002      	b.n	8024142 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 802413c:	2900      	cmp	r1, #0
 802413e:	d16d      	bne.n	802421c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8024140:	2001      	movs	r0, #1
 8024142:	b00b      	add	sp, #44	@ 0x2c
 8024144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024148:	b379      	cbz	r1, 80241aa <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 802414a:	2f00      	cmp	r7, #0
 802414c:	db29      	blt.n	80241a2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802414e:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8024152:	42bb      	cmp	r3, r7
 8024154:	dd25      	ble.n	80241a2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8024156:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 802415a:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802415e:	f7ff ff77 	bl	8024050 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 8024162:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024164:	fb10 f003 	smulbb	r0, r0, r3
 8024168:	b280      	uxth	r0, r0
 802416a:	1c41      	adds	r1, r0, #1
 802416c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8024170:	1209      	asrs	r1, r1, #8
 8024172:	f011 0fff 	tst.w	r1, #255	@ 0xff
 8024176:	d014      	beq.n	80241a2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8024178:	b2c9      	uxtb	r1, r1
 802417a:	9808      	ldr	r0, [sp, #32]
 802417c:	b2ba      	uxth	r2, r7
 802417e:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8024180:	9102      	str	r1, [sp, #8]
 8024182:	2101      	movs	r1, #1
 8024184:	4413      	add	r3, r2
 8024186:	4402      	add	r2, r0
 8024188:	9101      	str	r1, [sp, #4]
 802418a:	fa0f f18b 	sxth.w	r1, fp
 802418e:	f8da 0000 	ldr.w	r0, [sl]
 8024192:	b21b      	sxth	r3, r3
 8024194:	9100      	str	r1, [sp, #0]
 8024196:	b212      	sxth	r2, r2
 8024198:	6941      	ldr	r1, [r0, #20]
 802419a:	4650      	mov	r0, sl
 802419c:	460d      	mov	r5, r1
 802419e:	9905      	ldr	r1, [sp, #20]
 80241a0:	47a8      	blx	r5
 80241a2:	9b04      	ldr	r3, [sp, #16]
 80241a4:	1c7a      	adds	r2, r7, #1
 80241a6:	3301      	adds	r3, #1
 80241a8:	d0ca      	beq.n	8024140 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80241aa:	f9b4 7000 	ldrsh.w	r7, [r4]
 80241ae:	1abb      	subs	r3, r7, r2
 80241b0:	2b00      	cmp	r3, #0
 80241b2:	dd31      	ble.n	8024218 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80241b4:	2a00      	cmp	r2, #0
 80241b6:	dabd      	bge.n	8024134 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 80241b8:	2f00      	cmp	r7, #0
 80241ba:	dd2d      	ble.n	8024218 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80241bc:	2200      	movs	r2, #0
 80241be:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 80241c2:	19d1      	adds	r1, r2, r7
 80241c4:	4299      	cmp	r1, r3
 80241c6:	db02      	blt.n	80241ce <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 80241c8:	1a9f      	subs	r7, r3, r2
 80241ca:	2f00      	cmp	r7, #0
 80241cc:	dd24      	ble.n	8024218 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80241ce:	ea4f 1188 	mov.w	r1, r8, lsl #6
 80241d2:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 80241d6:	f7ff ff3b 	bl	8024050 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 80241da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80241dc:	fb10 f003 	smulbb	r0, r0, r3
 80241e0:	b280      	uxth	r0, r0
 80241e2:	1c41      	adds	r1, r0, #1
 80241e4:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80241e8:	1209      	asrs	r1, r1, #8
 80241ea:	f011 0fff 	tst.w	r1, #255	@ 0xff
 80241ee:	d013      	beq.n	8024218 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80241f0:	b292      	uxth	r2, r2
 80241f2:	9808      	ldr	r0, [sp, #32]
 80241f4:	b2c9      	uxtb	r1, r1
 80241f6:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 80241f8:	b23f      	sxth	r7, r7
 80241fa:	4413      	add	r3, r2
 80241fc:	9102      	str	r1, [sp, #8]
 80241fe:	4402      	add	r2, r0
 8024200:	fa0f f18b 	sxth.w	r1, fp
 8024204:	f8da 0000 	ldr.w	r0, [sl]
 8024208:	b21b      	sxth	r3, r3
 802420a:	9100      	str	r1, [sp, #0]
 802420c:	b212      	sxth	r2, r2
 802420e:	9701      	str	r7, [sp, #4]
 8024210:	9905      	ldr	r1, [sp, #20]
 8024212:	6947      	ldr	r7, [r0, #20]
 8024214:	4650      	mov	r0, sl
 8024216:	47b8      	blx	r7
 8024218:	464b      	mov	r3, r9
 802421a:	e75e      	b.n	80240da <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 802421c:	2f00      	cmp	r7, #0
 802421e:	da96      	bge.n	802414e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 8024220:	e78e      	b.n	8024140 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8024222:	2900      	cmp	r1, #0
 8024224:	d0f8      	beq.n	8024218 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8024226:	e790      	b.n	802414a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

08024228 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 8024228:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802422c:	461e      	mov	r6, r3
 802422e:	4b36      	ldr	r3, [pc, #216]	@ (8024308 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 8024230:	2500      	movs	r5, #0
 8024232:	f100 0814 	add.w	r8, r0, #20
 8024236:	4604      	mov	r4, r0
 8024238:	4617      	mov	r7, r2
 802423a:	e9c0 3100 	strd	r3, r1, [r0]
 802423e:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8024242:	8185      	strh	r5, [r0, #12]
 8024244:	8103      	strh	r3, [r0, #8]
 8024246:	f89d 3020 	ldrb.w	r3, [sp, #32]
 802424a:	81c5      	strh	r5, [r0, #14]
 802424c:	7283      	strb	r3, [r0, #10]
 802424e:	8205      	strh	r5, [r0, #16]
 8024250:	8245      	strh	r5, [r0, #18]
 8024252:	4640      	mov	r0, r8
 8024254:	f7f0 f916 	bl	8014484 <_ZN8touchgfx7OutlineC1Ev>
 8024258:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 802425c:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 8024260:	466b      	mov	r3, sp
 8024262:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 8024266:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 802426a:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 802426e:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 8024272:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 8024276:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 802427a:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 802427e:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 8024282:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 8024286:	6830      	ldr	r0, [r6, #0]
 8024288:	6871      	ldr	r1, [r6, #4]
 802428a:	8872      	ldrh	r2, [r6, #2]
 802428c:	8835      	ldrh	r5, [r6, #0]
 802428e:	c303      	stmia	r3!, {r0, r1}
 8024290:	887b      	ldrh	r3, [r7, #2]
 8024292:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 8024296:	4413      	add	r3, r2
 8024298:	883a      	ldrh	r2, [r7, #0]
 802429a:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 802429e:	442a      	add	r2, r5
 80242a0:	81e3      	strh	r3, [r4, #14]
 80242a2:	8220      	strh	r0, [r4, #16]
 80242a4:	4668      	mov	r0, sp
 80242a6:	81a2      	strh	r2, [r4, #12]
 80242a8:	8261      	strh	r1, [r4, #18]
 80242aa:	4639      	mov	r1, r7
 80242ac:	f7f2 fac2 	bl	8016834 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80242b0:	f104 000c 	add.w	r0, r4, #12
 80242b4:	f7f2 fa96 	bl	80167e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80242b8:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80242bc:	f8bd 2000 	ldrh.w	r2, [sp]
 80242c0:	4640      	mov	r0, r8
 80242c2:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 80242c6:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 80242ca:	f7f0 f8c0 	bl	801444e <_ZN8touchgfx7Outline5resetEv>
 80242ce:	f9bd 3000 	ldrsh.w	r3, [sp]
 80242d2:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80242d6:	4620      	mov	r0, r4
 80242d8:	015b      	lsls	r3, r3, #5
 80242da:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80242dc:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80242e0:	015b      	lsls	r3, r3, #5
 80242e2:	6523      	str	r3, [r4, #80]	@ 0x50
 80242e4:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80242e8:	015b      	lsls	r3, r3, #5
 80242ea:	6563      	str	r3, [r4, #84]	@ 0x54
 80242ec:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80242f0:	015b      	lsls	r3, r3, #5
 80242f2:	65a3      	str	r3, [r4, #88]	@ 0x58
 80242f4:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 80242f8:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 80242fc:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8024300:	b002      	add	sp, #8
 8024302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024306:	bf00      	nop
 8024308:	08029c48 	.word	0x08029c48

0802430c <_ZN8touchgfx6Canvas5closeEv>:
 802430c:	b538      	push	{r3, r4, r5, lr}
 802430e:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8024312:	4604      	mov	r4, r0
 8024314:	b193      	cbz	r3, 802433c <_ZN8touchgfx6Canvas5closeEv+0x30>
 8024316:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 802431a:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 802431e:	4213      	tst	r3, r2
 8024320:	d10c      	bne.n	802433c <_ZN8touchgfx6Canvas5closeEv+0x30>
 8024322:	f100 0514 	add.w	r5, r0, #20
 8024326:	b123      	cbz	r3, 8024332 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8024328:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 802432c:	4628      	mov	r0, r5
 802432e:	f7ff fea3 	bl	8024078 <_ZN8touchgfx10Rasterizer6lineToEii>
 8024332:	4628      	mov	r0, r5
 8024334:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 8024338:	f7ff fe9e 	bl	8024078 <_ZN8touchgfx10Rasterizer6lineToEii>
 802433c:	2300      	movs	r3, #0
 802433e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8024342:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 8024346:	4298      	cmp	r0, r3
 8024348:	bf34      	ite	cc
 802434a:	2000      	movcc	r0, #0
 802434c:	2001      	movcs	r0, #1
 802434e:	bd38      	pop	{r3, r4, r5, pc}

08024350 <_ZN8touchgfx6Canvas6renderEh>:
 8024350:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8024354:	7a85      	ldrb	r5, [r0, #10]
 8024356:	4604      	mov	r4, r0
 8024358:	4369      	muls	r1, r5
 802435a:	1c4d      	adds	r5, r1, #1
 802435c:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8024360:	122d      	asrs	r5, r5, #8
 8024362:	f000 8098 	beq.w	8024496 <_ZN8touchgfx6Canvas6renderEh+0x146>
 8024366:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 802436a:	2b00      	cmp	r3, #0
 802436c:	f000 8093 	beq.w	8024496 <_ZN8touchgfx6Canvas6renderEh+0x146>
 8024370:	f7ff ffcc 	bl	802430c <_ZN8touchgfx6Canvas5closeEv>
 8024374:	4607      	mov	r7, r0
 8024376:	2800      	cmp	r0, #0
 8024378:	d045      	beq.n	8024406 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802437a:	6860      	ldr	r0, [r4, #4]
 802437c:	4e47      	ldr	r6, [pc, #284]	@ (802449c <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 802437e:	6803      	ldr	r3, [r0, #0]
 8024380:	6837      	ldr	r7, [r6, #0]
 8024382:	689b      	ldr	r3, [r3, #8]
 8024384:	4798      	blx	r3
 8024386:	4601      	mov	r1, r0
 8024388:	4638      	mov	r0, r7
 802438a:	f7ed fb99 	bl	8011ac0 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 802438e:	4607      	mov	r7, r0
 8024390:	f7df ffbe 	bl	8004310 <_ZN8touchgfx3HAL3lcdEv>
 8024394:	6803      	ldr	r3, [r0, #0]
 8024396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8024398:	4798      	blx	r3
 802439a:	4680      	mov	r8, r0
 802439c:	f7df ffb8 	bl	8004310 <_ZN8touchgfx3HAL3lcdEv>
 80243a0:	6803      	ldr	r3, [r0, #0]
 80243a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80243a4:	4798      	blx	r3
 80243a6:	280b      	cmp	r0, #11
 80243a8:	d85a      	bhi.n	8024460 <_ZN8touchgfx6Canvas6renderEh+0x110>
 80243aa:	e8df f000 	tbb	[pc, r0]
 80243ae:	5b50      	.short	0x5b50
 80243b0:	3059066b 	.word	0x3059066b
 80243b4:	64646440 	.word	0x64646440
 80243b8:	6464      	.short	0x6464
 80243ba:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80243be:	2208      	movs	r2, #8
 80243c0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80243c4:	fb91 f2f2 	sdiv	r2, r1, r2
 80243c8:	fb08 2303 	mla	r3, r8, r3, r2
 80243cc:	441f      	add	r7, r3
 80243ce:	424b      	negs	r3, r1
 80243d0:	f001 0107 	and.w	r1, r1, #7
 80243d4:	f003 0307 	and.w	r3, r3, #7
 80243d8:	bf58      	it	pl
 80243da:	4259      	negpl	r1, r3
 80243dc:	b2c9      	uxtb	r1, r1
 80243de:	b2ed      	uxtb	r5, r5
 80243e0:	463a      	mov	r2, r7
 80243e2:	fa0f f388 	sxth.w	r3, r8
 80243e6:	f104 0014 	add.w	r0, r4, #20
 80243ea:	e9cd 1500 	strd	r1, r5, [sp]
 80243ee:	6861      	ldr	r1, [r4, #4]
 80243f0:	f7ff fe4e 	bl	8024090 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 80243f4:	4607      	mov	r7, r0
 80243f6:	6860      	ldr	r0, [r4, #4]
 80243f8:	6803      	ldr	r3, [r0, #0]
 80243fa:	691b      	ldr	r3, [r3, #16]
 80243fc:	4798      	blx	r3
 80243fe:	6830      	ldr	r0, [r6, #0]
 8024400:	6803      	ldr	r3, [r0, #0]
 8024402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024404:	4798      	blx	r3
 8024406:	4638      	mov	r0, r7
 8024408:	b002      	add	sp, #8
 802440a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802440e:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8024412:	2204      	movs	r2, #4
 8024414:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8024418:	fb91 f2f2 	sdiv	r2, r1, r2
 802441c:	fb08 2303 	mla	r3, r8, r3, r2
 8024420:	441f      	add	r7, r3
 8024422:	424b      	negs	r3, r1
 8024424:	f001 0103 	and.w	r1, r1, #3
 8024428:	f003 0303 	and.w	r3, r3, #3
 802442c:	e7d4      	b.n	80243d8 <_ZN8touchgfx6Canvas6renderEh+0x88>
 802442e:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8024432:	2202      	movs	r2, #2
 8024434:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8024438:	2900      	cmp	r1, #0
 802443a:	fb91 f2f2 	sdiv	r2, r1, r2
 802443e:	f001 0101 	and.w	r1, r1, #1
 8024442:	fb08 2303 	mla	r3, r8, r3, r2
 8024446:	bfb8      	it	lt
 8024448:	4249      	neglt	r1, r1
 802444a:	441f      	add	r7, r3
 802444c:	e7c6      	b.n	80243dc <_ZN8touchgfx6Canvas6renderEh+0x8c>
 802444e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8024452:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024456:	fb08 f303 	mul.w	r3, r8, r3
 802445a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802445e:	441f      	add	r7, r3
 8024460:	2100      	movs	r1, #0
 8024462:	e7bc      	b.n	80243de <_ZN8touchgfx6Canvas6renderEh+0x8e>
 8024464:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8024468:	2103      	movs	r1, #3
 802446a:	fb08 f203 	mul.w	r2, r8, r3
 802446e:	89a3      	ldrh	r3, [r4, #12]
 8024470:	fb13 2301 	smlabb	r3, r3, r1, r2
 8024474:	e7f3      	b.n	802445e <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8024476:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802447a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802447e:	fb08 2303 	mla	r3, r8, r3, r2
 8024482:	e7ec      	b.n	802445e <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8024484:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8024488:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802448c:	fb08 f303 	mul.w	r3, r8, r3
 8024490:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8024494:	e7e3      	b.n	802445e <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8024496:	2701      	movs	r7, #1
 8024498:	e7b5      	b.n	8024406 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802449a:	bf00      	nop
 802449c:	24026418 	.word	0x24026418

080244a0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 80244a0:	4b06      	ldr	r3, [pc, #24]	@ (80244bc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 80244a2:	b510      	push	{r4, lr}
 80244a4:	781b      	ldrb	r3, [r3, #0]
 80244a6:	2b01      	cmp	r3, #1
 80244a8:	d107      	bne.n	80244ba <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 80244aa:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80244ae:	680b      	ldr	r3, [r1, #0]
 80244b0:	6814      	ldr	r4, [r2, #0]
 80244b2:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80244b6:	6013      	str	r3, [r2, #0]
 80244b8:	600c      	str	r4, [r1, #0]
 80244ba:	bd10      	pop	{r4, pc}
 80244bc:	24026410 	.word	0x24026410

080244c0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 80244c0:	b513      	push	{r0, r1, r4, lr}
 80244c2:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 80244c6:	4604      	mov	r4, r0
 80244c8:	e9cd 2100 	strd	r2, r1, [sp]
 80244cc:	b9a3      	cbnz	r3, 80244f8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 80244ce:	466a      	mov	r2, sp
 80244d0:	a901      	add	r1, sp, #4
 80244d2:	4620      	mov	r0, r4
 80244d4:	f7ff ffe4 	bl	80244a0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80244d8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80244da:	9901      	ldr	r1, [sp, #4]
 80244dc:	9a00      	ldr	r2, [sp, #0]
 80244de:	1ac9      	subs	r1, r1, r3
 80244e0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80244e2:	1ad2      	subs	r2, r2, r3
 80244e4:	9101      	str	r1, [sp, #4]
 80244e6:	2a00      	cmp	r2, #0
 80244e8:	9200      	str	r2, [sp, #0]
 80244ea:	da0b      	bge.n	8024504 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 80244ec:	2301      	movs	r3, #1
 80244ee:	2900      	cmp	r1, #0
 80244f0:	da0e      	bge.n	8024510 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 80244f2:	f043 0304 	orr.w	r3, r3, #4
 80244f6:	e013      	b.n	8024520 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 80244f8:	f7ff ff08 	bl	802430c <_ZN8touchgfx6Canvas5closeEv>
 80244fc:	2800      	cmp	r0, #0
 80244fe:	d1e6      	bne.n	80244ce <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 8024500:	b002      	add	sp, #8
 8024502:	bd10      	pop	{r4, pc}
 8024504:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8024506:	429a      	cmp	r2, r3
 8024508:	bfac      	ite	ge
 802450a:	2302      	movge	r3, #2
 802450c:	2300      	movlt	r3, #0
 802450e:	e7ee      	b.n	80244ee <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 8024510:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8024512:	4281      	cmp	r1, r0
 8024514:	bfac      	ite	ge
 8024516:	2008      	movge	r0, #8
 8024518:	2000      	movlt	r0, #0
 802451a:	4318      	orrs	r0, r3
 802451c:	b2c3      	uxtb	r3, r0
 802451e:	b158      	cbz	r0, 8024538 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 8024520:	2200      	movs	r2, #0
 8024522:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 8024526:	9901      	ldr	r1, [sp, #4]
 8024528:	9a00      	ldr	r2, [sp, #0]
 802452a:	66e1      	str	r1, [r4, #108]	@ 0x6c
 802452c:	6722      	str	r2, [r4, #112]	@ 0x70
 802452e:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 8024532:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 8024536:	e7e3      	b.n	8024500 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 8024538:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 802453c:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8024540:	4298      	cmp	r0, r3
 8024542:	d803      	bhi.n	802454c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8024544:	f104 0014 	add.w	r0, r4, #20
 8024548:	f7f0 fc70 	bl	8014e2c <_ZN8touchgfx7Outline6moveToEii>
 802454c:	2301      	movs	r3, #1
 802454e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8024552:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8024556:	2300      	movs	r3, #0
 8024558:	e7e5      	b.n	8024526 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

0802455a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 802455a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802455c:	ab02      	add	r3, sp, #8
 802455e:	4604      	mov	r4, r0
 8024560:	9101      	str	r1, [sp, #4]
 8024562:	a901      	add	r1, sp, #4
 8024564:	f843 2d08 	str.w	r2, [r3, #-8]!
 8024568:	461a      	mov	r2, r3
 802456a:	f7ff ff99 	bl	80244a0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802456e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8024570:	9901      	ldr	r1, [sp, #4]
 8024572:	9a00      	ldr	r2, [sp, #0]
 8024574:	1ac9      	subs	r1, r1, r3
 8024576:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8024578:	1ad2      	subs	r2, r2, r3
 802457a:	9101      	str	r1, [sp, #4]
 802457c:	2a00      	cmp	r2, #0
 802457e:	9200      	str	r2, [sp, #0]
 8024580:	db1c      	blt.n	80245bc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 8024582:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8024584:	429a      	cmp	r2, r3
 8024586:	bfac      	ite	ge
 8024588:	2002      	movge	r0, #2
 802458a:	2000      	movlt	r0, #0
 802458c:	2900      	cmp	r1, #0
 802458e:	db17      	blt.n	80245c0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 8024590:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8024592:	4299      	cmp	r1, r3
 8024594:	bfac      	ite	ge
 8024596:	2308      	movge	r3, #8
 8024598:	2300      	movlt	r3, #0
 802459a:	4303      	orrs	r3, r0
 802459c:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 80245a0:	b2dd      	uxtb	r5, r3
 80245a2:	b978      	cbnz	r0, 80245c4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 80245a4:	f104 0014 	add.w	r0, r4, #20
 80245a8:	f7ff fd66 	bl	8024078 <_ZN8touchgfx10Rasterizer6lineToEii>
 80245ac:	9b01      	ldr	r3, [sp, #4]
 80245ae:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 80245b2:	6623      	str	r3, [r4, #96]	@ 0x60
 80245b4:	9b00      	ldr	r3, [sp, #0]
 80245b6:	6663      	str	r3, [r4, #100]	@ 0x64
 80245b8:	b002      	add	sp, #8
 80245ba:	bd70      	pop	{r4, r5, r6, pc}
 80245bc:	2001      	movs	r0, #1
 80245be:	e7e5      	b.n	802458c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 80245c0:	2304      	movs	r3, #4
 80245c2:	e7ea      	b.n	802459a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 80245c4:	b113      	cbz	r3, 80245cc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 80245c6:	ea10 0305 	ands.w	r3, r0, r5
 80245ca:	d11c      	bne.n	8024606 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 80245cc:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 80245d0:	f104 0614 	add.w	r6, r4, #20
 80245d4:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 80245d8:	b98b      	cbnz	r3, 80245fe <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 80245da:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 80245de:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 80245e2:	4298      	cmp	r0, r3
 80245e4:	d802      	bhi.n	80245ec <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 80245e6:	4630      	mov	r0, r6
 80245e8:	f7f0 fc20 	bl	8014e2c <_ZN8touchgfx7Outline6moveToEii>
 80245ec:	2301      	movs	r3, #1
 80245ee:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 80245f2:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 80245f6:	4630      	mov	r0, r6
 80245f8:	e9dd 2100 	ldrd	r2, r1, [sp]
 80245fc:	e7d4      	b.n	80245a8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 80245fe:	4630      	mov	r0, r6
 8024600:	f7ff fd3a 	bl	8024078 <_ZN8touchgfx10Rasterizer6lineToEii>
 8024604:	e7f7      	b.n	80245f6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 8024606:	461d      	mov	r5, r3
 8024608:	e7d0      	b.n	80245ac <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

0802460c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 802460c:	b538      	push	{r3, r4, r5, lr}
 802460e:	ed2d 8b10 	vpush	{d8-d15}
 8024612:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 8024616:	4605      	mov	r5, r0
 8024618:	eeb0 ca40 	vmov.f32	s24, s0
 802461c:	460c      	mov	r4, r1
 802461e:	eef0 ca60 	vmov.f32	s25, s1
 8024622:	ed9f ba57 	vldr	s22, [pc, #348]	@ 8024780 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 8024626:	eeb0 da41 	vmov.f32	s26, s2
 802462a:	eef0 da61 	vmov.f32	s27, s3
 802462e:	eeb0 ea42 	vmov.f32	s28, s4
 8024632:	eef0 ea62 	vmov.f32	s29, s5
 8024636:	eef0 aa6b 	vmov.f32	s21, s23
 802463a:	2c08      	cmp	r4, #8
 802463c:	d86e      	bhi.n	802471c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 802463e:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 8024642:	ee7d 7aee 	vsub.f32	s15, s27, s29
 8024646:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 802464a:	ee3e 7aec 	vsub.f32	s14, s29, s25
 802464e:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 8024652:	ee3c fa0d 	vadd.f32	s30, s24, s26
 8024656:	ee7c faad 	vadd.f32	s31, s25, s27
 802465a:	eee6 7a07 	vfma.f32	s15, s12, s14
 802465e:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 8024662:	ee3d aaae 	vadd.f32	s20, s27, s29
 8024666:	ee2f fa2b 	vmul.f32	s30, s30, s23
 802466a:	ee6f faab 	vmul.f32	s31, s31, s23
 802466e:	ee69 9aab 	vmul.f32	s19, s19, s23
 8024672:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8024676:	ee2a aa2b 	vmul.f32	s20, s20, s23
 802467a:	ee7f 8a29 	vadd.f32	s17, s30, s19
 802467e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024682:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 8024686:	ee68 8aab 	vmul.f32	s17, s17, s23
 802468a:	bf48      	it	mi
 802468c:	eef1 7a67 	vnegmi.f32	s15, s15
 8024690:	ee29 9a2b 	vmul.f32	s18, s18, s23
 8024694:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 8024698:	eef4 7acb 	vcmpe.f32	s15, s22
 802469c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80246a0:	dd3f      	ble.n	8024722 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 80246a2:	ee27 7a07 	vmul.f32	s14, s14, s14
 80246a6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80246aa:	eea6 7aa6 	vfma.f32	s14, s13, s13
 80246ae:	ee27 7a06 	vmul.f32	s14, s14, s12
 80246b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80246b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80246ba:	d847      	bhi.n	802474c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 80246bc:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 80246c0:	ee3e 0aed 	vsub.f32	s0, s29, s27
 80246c4:	f000 fa39 	bl	8024b3a <atan2f>
 80246c8:	eeb0 8a40 	vmov.f32	s16, s0
 80246cc:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 80246d0:	ee3d 0aec 	vsub.f32	s0, s27, s25
 80246d4:	f000 fa31 	bl	8024b3a <atan2f>
 80246d8:	ee38 0a40 	vsub.f32	s0, s16, s0
 80246dc:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8024784 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 80246e0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80246e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80246e8:	bf48      	it	mi
 80246ea:	eeb1 0a40 	vnegmi.f32	s0, s0
 80246ee:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80246f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80246f6:	bfa4      	itt	ge
 80246f8:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 8024788 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 80246fc:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8024700:	eddf 7a22 	vldr	s15, [pc, #136]	@ 802478c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 8024704:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8024708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802470c:	d51e      	bpl.n	802474c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 802470e:	eef0 0a49 	vmov.f32	s1, s18
 8024712:	4628      	mov	r0, r5
 8024714:	eeb0 0a68 	vmov.f32	s0, s17
 8024718:	f7ee f852 	bl	80127c0 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802471c:	ecbd 8b10 	vpop	{d8-d15}
 8024720:	bd38      	pop	{r3, r4, r5, pc}
 8024722:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 8024726:	eeb0 7a68 	vmov.f32	s14, s17
 802472a:	eef0 6a49 	vmov.f32	s13, s18
 802472e:	eea7 7aea 	vfms.f32	s14, s15, s21
 8024732:	ee7c 7aae 	vadd.f32	s15, s25, s29
 8024736:	eee7 6aea 	vfms.f32	s13, s15, s21
 802473a:	ee66 7aa6 	vmul.f32	s15, s13, s13
 802473e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8024742:	eef4 7ac6 	vcmpe.f32	s15, s12
 8024746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802474a:	d9e0      	bls.n	802470e <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 802474c:	3401      	adds	r4, #1
 802474e:	eef0 0a6c 	vmov.f32	s1, s25
 8024752:	eeb0 0a4c 	vmov.f32	s0, s24
 8024756:	4628      	mov	r0, r5
 8024758:	4621      	mov	r1, r4
 802475a:	eef0 2a49 	vmov.f32	s5, s18
 802475e:	eeb0 2a68 	vmov.f32	s4, s17
 8024762:	eef0 1a6f 	vmov.f32	s3, s31
 8024766:	eeb0 1a4f 	vmov.f32	s2, s30
 802476a:	f7ff ff4f 	bl	802460c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 802476e:	eef0 da4a 	vmov.f32	s27, s20
 8024772:	eeb0 da69 	vmov.f32	s26, s19
 8024776:	eef0 ca49 	vmov.f32	s25, s18
 802477a:	eeb0 ca68 	vmov.f32	s24, s17
 802477e:	e75c      	b.n	802463a <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 8024780:	2edbe6ff 	.word	0x2edbe6ff
 8024784:	40490fdb 	.word	0x40490fdb
 8024788:	40c90fdb 	.word	0x40c90fdb
 802478c:	3dcccccd 	.word	0x3dcccccd

08024790 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 8024790:	b530      	push	{r4, r5, lr}
 8024792:	ed2d 8b10 	vpush	{d8-d15}
 8024796:	eef0 8a40 	vmov.f32	s17, s0
 802479a:	b085      	sub	sp, #20
 802479c:	eef0 9a60 	vmov.f32	s19, s1
 80247a0:	4604      	mov	r4, r0
 80247a2:	eef0 fa41 	vmov.f32	s31, s2
 80247a6:	460d      	mov	r5, r1
 80247a8:	eeb0 fa61 	vmov.f32	s30, s3
 80247ac:	eef0 ba42 	vmov.f32	s23, s4
 80247b0:	eeb0 ca62 	vmov.f32	s24, s5
 80247b4:	eef0 aa43 	vmov.f32	s21, s6
 80247b8:	eeb0 ba63 	vmov.f32	s22, s7
 80247bc:	2d08      	cmp	r5, #8
 80247be:	f200 8113 	bhi.w	80249e8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 80247c2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80247c6:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 80247ca:	ee7f 6aab 	vadd.f32	s13, s31, s23
 80247ce:	ee38 daaf 	vadd.f32	s26, s17, s31
 80247d2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80247d6:	ee7c ca0b 	vadd.f32	s25, s24, s22
 80247da:	ee2d da27 	vmul.f32	s26, s26, s15
 80247de:	ed8d 6a01 	vstr	s12, [sp, #4]
 80247e2:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80247e6:	ee6c caa7 	vmul.f32	s25, s25, s15
 80247ea:	eeb0 ea4d 	vmov.f32	s28, s26
 80247ee:	ee79 da8f 	vadd.f32	s27, s19, s30
 80247f2:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 80247f6:	eea6 eaa7 	vfma.f32	s28, s13, s15
 80247fa:	ee66 6a27 	vmul.f32	s13, s12, s15
 80247fe:	ee6d daa7 	vmul.f32	s27, s27, s15
 8024802:	edcd 6a03 	vstr	s13, [sp, #12]
 8024806:	eef0 6a6c 	vmov.f32	s13, s25
 802480a:	eef0 ea6d 	vmov.f32	s29, s27
 802480e:	ee2e ea27 	vmul.f32	s28, s28, s15
 8024812:	eee7 6a27 	vfma.f32	s13, s14, s15
 8024816:	eee7 ea27 	vfma.f32	s29, s14, s15
 802481a:	ee26 7aa7 	vmul.f32	s14, s13, s15
 802481e:	ee6e eaa7 	vmul.f32	s29, s29, s15
 8024822:	eef0 6a67 	vmov.f32	s13, s15
 8024826:	ed8d 7a02 	vstr	s14, [sp, #8]
 802482a:	ed9d 7a03 	vldr	s14, [sp, #12]
 802482e:	ee3e 9a07 	vadd.f32	s18, s28, s14
 8024832:	ed9d 7a02 	vldr	s14, [sp, #8]
 8024836:	ee3e aa87 	vadd.f32	s20, s29, s14
 802483a:	ee29 9a27 	vmul.f32	s18, s18, s15
 802483e:	ee2a aa27 	vmul.f32	s20, s20, s15
 8024842:	2d00      	cmp	r5, #0
 8024844:	f000 810b 	beq.w	8024a5e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8024848:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 802484c:	eddf 4a95 	vldr	s9, [pc, #596]	@ 8024aa4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8024850:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 8024854:	ee7b 7a69 	vsub.f32	s15, s22, s19
 8024858:	ee3f 6aea 	vsub.f32	s12, s31, s21
 802485c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8024860:	ee3b 5aea 	vsub.f32	s10, s23, s21
 8024864:	eea6 7a27 	vfma.f32	s14, s12, s15
 8024868:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 802486c:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 8024870:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8024874:	eea5 6a27 	vfma.f32	s12, s10, s15
 8024878:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 802487c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024880:	bf48      	it	mi
 8024882:	eeb1 7a47 	vnegmi.f32	s14, s14
 8024886:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 802488a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802488e:	eeb4 7ae4 	vcmpe.f32	s14, s9
 8024892:	bf48      	it	mi
 8024894:	eeb1 6a46 	vnegmi.f32	s12, s12
 8024898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802489c:	f340 80a8 	ble.w	80249f0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 80248a0:	eeb4 6ae4 	vcmpe.f32	s12, s9
 80248a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80248a8:	dd5a      	ble.n	8024960 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 80248aa:	ee65 5aa5 	vmul.f32	s11, s11, s11
 80248ae:	ee37 7a06 	vadd.f32	s14, s14, s12
 80248b2:	eee7 5aa7 	vfma.f32	s11, s15, s15
 80248b6:	ee27 7a07 	vmul.f32	s14, s14, s14
 80248ba:	ee65 7a85 	vmul.f32	s15, s11, s10
 80248be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80248c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80248c6:	f200 80ca 	bhi.w	8024a5e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 80248ca:	ee7b 0aef 	vsub.f32	s1, s23, s31
 80248ce:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 80248d2:	f000 f932 	bl	8024b3a <atan2f>
 80248d6:	eeb0 8a40 	vmov.f32	s16, s0
 80248da:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 80248de:	ee3f 0a69 	vsub.f32	s0, s30, s19
 80248e2:	f000 f92a 	bl	8024b3a <atan2f>
 80248e6:	ee38 fa40 	vsub.f32	s30, s16, s0
 80248ea:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 80248ee:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 80248f2:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 80248f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80248fa:	bf48      	it	mi
 80248fc:	eeb1 fa4f 	vnegmi.f32	s30, s30
 8024900:	f000 f91b 	bl	8024b3a <atan2f>
 8024904:	ee30 0a48 	vsub.f32	s0, s0, s16
 8024908:	eddf 7a67 	vldr	s15, [pc, #412]	@ 8024aa8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 802490c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8024910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024914:	eeb4 fae7 	vcmpe.f32	s30, s15
 8024918:	eddf 7a63 	vldr	s15, [pc, #396]	@ 8024aa8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 802491c:	bf48      	it	mi
 802491e:	eeb1 0a40 	vnegmi.f32	s0, s0
 8024922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024926:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802492a:	eddf 7a60 	vldr	s15, [pc, #384]	@ 8024aac <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 802492e:	bfa4      	itt	ge
 8024930:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 8024ab0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8024934:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 8024938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802493c:	bfa4      	itt	ge
 802493e:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 8024ab0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8024942:	ee37 0a40 	vsubge.f32	s0, s14, s0
 8024946:	ee3f 0a00 	vadd.f32	s0, s30, s0
 802494a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802494e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024952:	f140 8084 	bpl.w	8024a5e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8024956:	eef0 0a4a 	vmov.f32	s1, s20
 802495a:	eeb0 0a49 	vmov.f32	s0, s18
 802495e:	e040      	b.n	80249e2 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 8024960:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8024964:	ee27 7a07 	vmul.f32	s14, s14, s14
 8024968:	eee5 7aa5 	vfma.f32	s15, s11, s11
 802496c:	ee67 7a85 	vmul.f32	s15, s15, s10
 8024970:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8024974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024978:	d871      	bhi.n	8024a5e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802497a:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802497e:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8024982:	f000 f8da 	bl	8024b3a <atan2f>
 8024986:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 802498a:	eeb0 8a40 	vmov.f32	s16, s0
 802498e:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8024992:	f000 f8d2 	bl	8024b3a <atan2f>
 8024996:	ee38 0a40 	vsub.f32	s0, s16, s0
 802499a:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8024aa8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 802499e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80249a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80249a6:	bf48      	it	mi
 80249a8:	eeb1 0a40 	vnegmi.f32	s0, s0
 80249ac:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80249b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80249b4:	bfa4      	itt	ge
 80249b6:	eddf 7a3e 	vldrge	s15, [pc, #248]	@ 8024ab0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 80249ba:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 80249be:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8024aac <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 80249c2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80249c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80249ca:	d548      	bpl.n	8024a5e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 80249cc:	eef0 0a4f 	vmov.f32	s1, s30
 80249d0:	4620      	mov	r0, r4
 80249d2:	eeb0 0a6f 	vmov.f32	s0, s31
 80249d6:	f7ed fef3 	bl	80127c0 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 80249da:	eef0 0a4c 	vmov.f32	s1, s24
 80249de:	eeb0 0a6b 	vmov.f32	s0, s23
 80249e2:	4620      	mov	r0, r4
 80249e4:	f7ed feec 	bl	80127c0 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 80249e8:	b005      	add	sp, #20
 80249ea:	ecbd 8b10 	vpop	{d8-d15}
 80249ee:	bd30      	pop	{r4, r5, pc}
 80249f0:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8024aa4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 80249f4:	eeb4 6ac7 	vcmpe.f32	s12, s14
 80249f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80249fc:	dd19      	ble.n	8024a32 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 80249fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8024a02:	ee26 7a06 	vmul.f32	s14, s12, s12
 8024a06:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8024a0a:	ee67 7a85 	vmul.f32	s15, s15, s10
 8024a0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8024a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024a16:	d822      	bhi.n	8024a5e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8024a18:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8024a1c:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8024a20:	f000 f88b 	bl	8024b3a <atan2f>
 8024a24:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8024a28:	eeb0 8a40 	vmov.f32	s16, s0
 8024a2c:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8024a30:	e7af      	b.n	8024992 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 8024a32:	ee78 7aaa 	vadd.f32	s15, s17, s21
 8024a36:	eeb0 7a49 	vmov.f32	s14, s18
 8024a3a:	eeb0 6a4a 	vmov.f32	s12, s20
 8024a3e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8024a42:	ee79 7a8b 	vadd.f32	s15, s19, s22
 8024a46:	eea7 6ae6 	vfms.f32	s12, s15, s13
 8024a4a:	ee66 7a06 	vmul.f32	s15, s12, s12
 8024a4e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8024a52:	eef4 7ac5 	vcmpe.f32	s15, s10
 8024a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024a5a:	f67f af7c 	bls.w	8024956 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 8024a5e:	3501      	adds	r5, #1
 8024a60:	eef0 0a69 	vmov.f32	s1, s19
 8024a64:	eeb0 0a68 	vmov.f32	s0, s17
 8024a68:	4620      	mov	r0, r4
 8024a6a:	4629      	mov	r1, r5
 8024a6c:	eef0 3a4a 	vmov.f32	s7, s20
 8024a70:	eeb0 3a49 	vmov.f32	s6, s18
 8024a74:	eef0 2a6e 	vmov.f32	s5, s29
 8024a78:	eeb0 2a4e 	vmov.f32	s4, s28
 8024a7c:	eef0 1a6d 	vmov.f32	s3, s27
 8024a80:	eeb0 1a4d 	vmov.f32	s2, s26
 8024a84:	f7ff fe84 	bl	8024790 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8024a88:	eeb0 ca6c 	vmov.f32	s24, s25
 8024a8c:	eddd ba01 	vldr	s23, [sp, #4]
 8024a90:	eef0 9a4a 	vmov.f32	s19, s20
 8024a94:	ed9d fa02 	vldr	s30, [sp, #8]
 8024a98:	eef0 8a49 	vmov.f32	s17, s18
 8024a9c:	eddd fa03 	vldr	s31, [sp, #12]
 8024aa0:	e68c      	b.n	80247bc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 8024aa2:	bf00      	nop
 8024aa4:	2edbe6ff 	.word	0x2edbe6ff
 8024aa8:	40490fdb 	.word	0x40490fdb
 8024aac:	3dcccccd 	.word	0x3dcccccd
 8024ab0:	40c90fdb 	.word	0x40c90fdb

08024ab4 <_ZN8touchgfx6CanvasD1Ev>:
 8024ab4:	4b04      	ldr	r3, [pc, #16]	@ (8024ac8 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 8024ab6:	b510      	push	{r4, lr}
 8024ab8:	4604      	mov	r4, r0
 8024aba:	f840 3b14 	str.w	r3, [r0], #20
 8024abe:	f7ef fcbe 	bl	801443e <_ZN8touchgfx7OutlineD1Ev>
 8024ac2:	4620      	mov	r0, r4
 8024ac4:	bd10      	pop	{r4, pc}
 8024ac6:	bf00      	nop
 8024ac8:	08029c48 	.word	0x08029c48

08024acc <_ZN8touchgfx6CanvasD0Ev>:
 8024acc:	b510      	push	{r4, lr}
 8024ace:	4604      	mov	r4, r0
 8024ad0:	f7ff fff0 	bl	8024ab4 <_ZN8touchgfx6CanvasD1Ev>
 8024ad4:	2174      	movs	r1, #116	@ 0x74
 8024ad6:	4620      	mov	r0, r4
 8024ad8:	f000 f807 	bl	8024aea <_ZdlPvj>
 8024adc:	4620      	mov	r0, r4
 8024ade:	bd10      	pop	{r4, pc}

08024ae0 <__aeabi_atexit>:
 8024ae0:	460b      	mov	r3, r1
 8024ae2:	4601      	mov	r1, r0
 8024ae4:	4618      	mov	r0, r3
 8024ae6:	f000 bc59 	b.w	802539c <__cxa_atexit>

08024aea <_ZdlPvj>:
 8024aea:	f000 b812 	b.w	8024b12 <_ZdlPv>

08024aee <__cxa_guard_acquire>:
 8024aee:	6802      	ldr	r2, [r0, #0]
 8024af0:	07d2      	lsls	r2, r2, #31
 8024af2:	4603      	mov	r3, r0
 8024af4:	d405      	bmi.n	8024b02 <__cxa_guard_acquire+0x14>
 8024af6:	7842      	ldrb	r2, [r0, #1]
 8024af8:	b102      	cbz	r2, 8024afc <__cxa_guard_acquire+0xe>
 8024afa:	deff      	udf	#255	@ 0xff
 8024afc:	2001      	movs	r0, #1
 8024afe:	7058      	strb	r0, [r3, #1]
 8024b00:	4770      	bx	lr
 8024b02:	2000      	movs	r0, #0
 8024b04:	4770      	bx	lr

08024b06 <__cxa_guard_release>:
 8024b06:	2301      	movs	r3, #1
 8024b08:	6003      	str	r3, [r0, #0]
 8024b0a:	4770      	bx	lr

08024b0c <__cxa_pure_virtual>:
 8024b0c:	b508      	push	{r3, lr}
 8024b0e:	f000 f80f 	bl	8024b30 <_ZSt9terminatev>

08024b12 <_ZdlPv>:
 8024b12:	f000 bb8d 	b.w	8025230 <free>

08024b16 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8024b16:	b508      	push	{r3, lr}
 8024b18:	4780      	blx	r0
 8024b1a:	f000 fb56 	bl	80251ca <abort>
	...

08024b20 <_ZSt13get_terminatev>:
 8024b20:	4b02      	ldr	r3, [pc, #8]	@ (8024b2c <_ZSt13get_terminatev+0xc>)
 8024b22:	6818      	ldr	r0, [r3, #0]
 8024b24:	f3bf 8f5b 	dmb	ish
 8024b28:	4770      	bx	lr
 8024b2a:	bf00      	nop
 8024b2c:	240000d8 	.word	0x240000d8

08024b30 <_ZSt9terminatev>:
 8024b30:	b508      	push	{r3, lr}
 8024b32:	f7ff fff5 	bl	8024b20 <_ZSt13get_terminatev>
 8024b36:	f7ff ffee 	bl	8024b16 <_ZN10__cxxabiv111__terminateEPFvvE>

08024b3a <atan2f>:
 8024b3a:	f000 b9cd 	b.w	8024ed8 <__ieee754_atan2f>
	...

08024b40 <sqrtf>:
 8024b40:	b508      	push	{r3, lr}
 8024b42:	ed2d 8b02 	vpush	{d8}
 8024b46:	eeb0 8a40 	vmov.f32	s16, s0
 8024b4a:	f000 f9c2 	bl	8024ed2 <__ieee754_sqrtf>
 8024b4e:	eeb4 8a48 	vcmp.f32	s16, s16
 8024b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024b56:	d60c      	bvs.n	8024b72 <sqrtf+0x32>
 8024b58:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8024b78 <sqrtf+0x38>
 8024b5c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8024b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024b64:	d505      	bpl.n	8024b72 <sqrtf+0x32>
 8024b66:	f000 fe87 	bl	8025878 <__errno>
 8024b6a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8024b6e:	2321      	movs	r3, #33	@ 0x21
 8024b70:	6003      	str	r3, [r0, #0]
 8024b72:	ecbd 8b02 	vpop	{d8}
 8024b76:	bd08      	pop	{r3, pc}
 8024b78:	00000000 	.word	0x00000000

08024b7c <sinf_poly>:
 8024b7c:	07cb      	lsls	r3, r1, #31
 8024b7e:	d412      	bmi.n	8024ba6 <sinf_poly+0x2a>
 8024b80:	ee21 5b00 	vmul.f64	d5, d1, d0
 8024b84:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8024b88:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8024b8c:	eea6 7b01 	vfma.f64	d7, d6, d1
 8024b90:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8024b94:	ee21 1b05 	vmul.f64	d1, d1, d5
 8024b98:	eea6 0b05 	vfma.f64	d0, d6, d5
 8024b9c:	eea7 0b01 	vfma.f64	d0, d7, d1
 8024ba0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8024ba4:	4770      	bx	lr
 8024ba6:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8024baa:	ee21 5b01 	vmul.f64	d5, d1, d1
 8024bae:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8024bb2:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8024bb6:	eea1 7b06 	vfma.f64	d7, d1, d6
 8024bba:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8024bbe:	eea1 0b06 	vfma.f64	d0, d1, d6
 8024bc2:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8024bc6:	ee21 1b05 	vmul.f64	d1, d1, d5
 8024bca:	eea5 0b06 	vfma.f64	d0, d5, d6
 8024bce:	e7e5      	b.n	8024b9c <sinf_poly+0x20>

08024bd0 <sinf>:
 8024bd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8024bd2:	ee10 4a10 	vmov	r4, s0
 8024bd6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8024bda:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8024bde:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8024be2:	eef0 7a40 	vmov.f32	s15, s0
 8024be6:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8024bea:	d218      	bcs.n	8024c1e <sinf+0x4e>
 8024bec:	ee26 1b06 	vmul.f64	d1, d6, d6
 8024bf0:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8024bf4:	d20a      	bcs.n	8024c0c <sinf+0x3c>
 8024bf6:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 8024bfa:	d103      	bne.n	8024c04 <sinf+0x34>
 8024bfc:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8024c00:	ed8d 1a01 	vstr	s2, [sp, #4]
 8024c04:	eeb0 0a67 	vmov.f32	s0, s15
 8024c08:	b003      	add	sp, #12
 8024c0a:	bd30      	pop	{r4, r5, pc}
 8024c0c:	483a      	ldr	r0, [pc, #232]	@ (8024cf8 <sinf+0x128>)
 8024c0e:	eeb0 0b46 	vmov.f64	d0, d6
 8024c12:	2100      	movs	r1, #0
 8024c14:	b003      	add	sp, #12
 8024c16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024c1a:	f7ff bfaf 	b.w	8024b7c <sinf_poly>
 8024c1e:	f240 422e 	movw	r2, #1070	@ 0x42e
 8024c22:	4293      	cmp	r3, r2
 8024c24:	d824      	bhi.n	8024c70 <sinf+0xa0>
 8024c26:	4b34      	ldr	r3, [pc, #208]	@ (8024cf8 <sinf+0x128>)
 8024c28:	ed93 7b08 	vldr	d7, [r3, #32]
 8024c2c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8024c30:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8024c34:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8024c38:	ee17 1a90 	vmov	r1, s15
 8024c3c:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8024c40:	1609      	asrs	r1, r1, #24
 8024c42:	ee07 1a90 	vmov	s15, r1
 8024c46:	f001 0203 	and.w	r2, r1, #3
 8024c4a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8024c4e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8024c52:	ed92 0b00 	vldr	d0, [r2]
 8024c56:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8024c5a:	f011 0f02 	tst.w	r1, #2
 8024c5e:	eea5 6b47 	vfms.f64	d6, d5, d7
 8024c62:	bf08      	it	eq
 8024c64:	4618      	moveq	r0, r3
 8024c66:	ee26 1b06 	vmul.f64	d1, d6, d6
 8024c6a:	ee20 0b06 	vmul.f64	d0, d0, d6
 8024c6e:	e7d1      	b.n	8024c14 <sinf+0x44>
 8024c70:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8024c74:	d237      	bcs.n	8024ce6 <sinf+0x116>
 8024c76:	4921      	ldr	r1, [pc, #132]	@ (8024cfc <sinf+0x12c>)
 8024c78:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8024c7c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8024c80:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8024c84:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8024c88:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8024c8c:	6a10      	ldr	r0, [r2, #32]
 8024c8e:	6912      	ldr	r2, [r2, #16]
 8024c90:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8024c94:	40ab      	lsls	r3, r5
 8024c96:	fba0 5003 	umull	r5, r0, r0, r3
 8024c9a:	4359      	muls	r1, r3
 8024c9c:	fbe3 0102 	umlal	r0, r1, r3, r2
 8024ca0:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8024ca4:	0f9d      	lsrs	r5, r3, #30
 8024ca6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8024caa:	1ac9      	subs	r1, r1, r3
 8024cac:	f7db fcf6 	bl	800069c <__aeabi_l2d>
 8024cb0:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8024cb4:	4b10      	ldr	r3, [pc, #64]	@ (8024cf8 <sinf+0x128>)
 8024cb6:	f004 0203 	and.w	r2, r4, #3
 8024cba:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8024cbe:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8024cf0 <sinf+0x120>
 8024cc2:	ed92 0b00 	vldr	d0, [r2]
 8024cc6:	ec41 0b17 	vmov	d7, r0, r1
 8024cca:	f014 0f02 	tst.w	r4, #2
 8024cce:	ee27 7b06 	vmul.f64	d7, d7, d6
 8024cd2:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8024cd6:	4629      	mov	r1, r5
 8024cd8:	bf08      	it	eq
 8024cda:	4618      	moveq	r0, r3
 8024cdc:	ee27 1b07 	vmul.f64	d1, d7, d7
 8024ce0:	ee20 0b07 	vmul.f64	d0, d0, d7
 8024ce4:	e796      	b.n	8024c14 <sinf+0x44>
 8024ce6:	b003      	add	sp, #12
 8024ce8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024cec:	f000 b8e2 	b.w	8024eb4 <__math_invalidf>
 8024cf0:	54442d18 	.word	0x54442d18
 8024cf4:	3c1921fb 	.word	0x3c1921fb
 8024cf8:	08029cb8 	.word	0x08029cb8
 8024cfc:	08029c54 	.word	0x08029c54

08024d00 <sinf_poly>:
 8024d00:	07cb      	lsls	r3, r1, #31
 8024d02:	d412      	bmi.n	8024d2a <sinf_poly+0x2a>
 8024d04:	ee21 5b00 	vmul.f64	d5, d1, d0
 8024d08:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8024d0c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8024d10:	eea6 7b01 	vfma.f64	d7, d6, d1
 8024d14:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8024d18:	ee21 1b05 	vmul.f64	d1, d1, d5
 8024d1c:	eea6 0b05 	vfma.f64	d0, d6, d5
 8024d20:	eea7 0b01 	vfma.f64	d0, d7, d1
 8024d24:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8024d28:	4770      	bx	lr
 8024d2a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8024d2e:	ee21 5b01 	vmul.f64	d5, d1, d1
 8024d32:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8024d36:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8024d3a:	eea1 7b06 	vfma.f64	d7, d1, d6
 8024d3e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8024d42:	eea1 0b06 	vfma.f64	d0, d1, d6
 8024d46:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8024d4a:	ee21 1b05 	vmul.f64	d1, d1, d5
 8024d4e:	eea5 0b06 	vfma.f64	d0, d5, d6
 8024d52:	e7e5      	b.n	8024d20 <sinf_poly+0x20>
 8024d54:	0000      	movs	r0, r0
	...

08024d58 <cosf>:
 8024d58:	b538      	push	{r3, r4, r5, lr}
 8024d5a:	ee10 4a10 	vmov	r4, s0
 8024d5e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8024d62:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8024d66:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8024d6a:	d21f      	bcs.n	8024dac <cosf+0x54>
 8024d6c:	ee27 7b07 	vmul.f64	d7, d7, d7
 8024d70:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8024d74:	f0c0 8082 	bcc.w	8024e7c <cosf+0x124>
 8024d78:	ee27 4b07 	vmul.f64	d4, d7, d7
 8024d7c:	4b44      	ldr	r3, [pc, #272]	@ (8024e90 <cosf+0x138>)
 8024d7e:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 8024d82:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8024d86:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 8024d8a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8024d8e:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8024d92:	eea7 0b05 	vfma.f64	d0, d7, d5
 8024d96:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 8024d9a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8024d9e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8024da2:	eea6 0b07 	vfma.f64	d0, d6, d7
 8024da6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8024daa:	bd38      	pop	{r3, r4, r5, pc}
 8024dac:	f240 422e 	movw	r2, #1070	@ 0x42e
 8024db0:	4293      	cmp	r3, r2
 8024db2:	d829      	bhi.n	8024e08 <cosf+0xb0>
 8024db4:	4b36      	ldr	r3, [pc, #216]	@ (8024e90 <cosf+0x138>)
 8024db6:	ed93 6b08 	vldr	d6, [r3, #32]
 8024dba:	ee27 6b06 	vmul.f64	d6, d7, d6
 8024dbe:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 8024dc2:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8024dc6:	ee16 1a90 	vmov	r1, s13
 8024dca:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8024dce:	1609      	asrs	r1, r1, #24
 8024dd0:	ee06 1a90 	vmov	s13, r1
 8024dd4:	f001 0203 	and.w	r2, r1, #3
 8024dd8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8024ddc:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8024de0:	ed92 0b00 	vldr	d0, [r2]
 8024de4:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8024de8:	f011 0f02 	tst.w	r1, #2
 8024dec:	f081 0101 	eor.w	r1, r1, #1
 8024df0:	eea5 7b46 	vfms.f64	d7, d5, d6
 8024df4:	bf08      	it	eq
 8024df6:	4618      	moveq	r0, r3
 8024df8:	ee27 1b07 	vmul.f64	d1, d7, d7
 8024dfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024e00:	ee20 0b07 	vmul.f64	d0, d0, d7
 8024e04:	f7ff bf7c 	b.w	8024d00 <sinf_poly>
 8024e08:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8024e0c:	d232      	bcs.n	8024e74 <cosf+0x11c>
 8024e0e:	4921      	ldr	r1, [pc, #132]	@ (8024e94 <cosf+0x13c>)
 8024e10:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8024e14:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8024e18:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8024e1c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8024e20:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8024e24:	6a10      	ldr	r0, [r2, #32]
 8024e26:	6912      	ldr	r2, [r2, #16]
 8024e28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8024e2c:	40ab      	lsls	r3, r5
 8024e2e:	fba0 5003 	umull	r5, r0, r0, r3
 8024e32:	4359      	muls	r1, r3
 8024e34:	fbe3 0102 	umlal	r0, r1, r3, r2
 8024e38:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8024e3c:	0f9d      	lsrs	r5, r3, #30
 8024e3e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8024e42:	1ac9      	subs	r1, r1, r3
 8024e44:	f7db fc2a 	bl	800069c <__aeabi_l2d>
 8024e48:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8024e4c:	4b10      	ldr	r3, [pc, #64]	@ (8024e90 <cosf+0x138>)
 8024e4e:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8024e88 <cosf+0x130>
 8024e52:	ec41 0b17 	vmov	d7, r0, r1
 8024e56:	f004 0203 	and.w	r2, r4, #3
 8024e5a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8024e5e:	ed92 0b00 	vldr	d0, [r2]
 8024e62:	ee27 7b06 	vmul.f64	d7, d7, d6
 8024e66:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8024e6a:	f014 0f02 	tst.w	r4, #2
 8024e6e:	f085 0101 	eor.w	r1, r5, #1
 8024e72:	e7bf      	b.n	8024df4 <cosf+0x9c>
 8024e74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024e78:	f000 b81c 	b.w	8024eb4 <__math_invalidf>
 8024e7c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8024e80:	e793      	b.n	8024daa <cosf+0x52>
 8024e82:	bf00      	nop
 8024e84:	f3af 8000 	nop.w
 8024e88:	54442d18 	.word	0x54442d18
 8024e8c:	3c1921fb 	.word	0x3c1921fb
 8024e90:	08029cb8 	.word	0x08029cb8
 8024e94:	08029c54 	.word	0x08029c54

08024e98 <with_errnof>:
 8024e98:	b510      	push	{r4, lr}
 8024e9a:	ed2d 8b02 	vpush	{d8}
 8024e9e:	eeb0 8a40 	vmov.f32	s16, s0
 8024ea2:	4604      	mov	r4, r0
 8024ea4:	f000 fce8 	bl	8025878 <__errno>
 8024ea8:	eeb0 0a48 	vmov.f32	s0, s16
 8024eac:	ecbd 8b02 	vpop	{d8}
 8024eb0:	6004      	str	r4, [r0, #0]
 8024eb2:	bd10      	pop	{r4, pc}

08024eb4 <__math_invalidf>:
 8024eb4:	eef0 7a40 	vmov.f32	s15, s0
 8024eb8:	ee30 7a40 	vsub.f32	s14, s0, s0
 8024ebc:	eef4 7a67 	vcmp.f32	s15, s15
 8024ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024ec4:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8024ec8:	d602      	bvs.n	8024ed0 <__math_invalidf+0x1c>
 8024eca:	2021      	movs	r0, #33	@ 0x21
 8024ecc:	f7ff bfe4 	b.w	8024e98 <with_errnof>
 8024ed0:	4770      	bx	lr

08024ed2 <__ieee754_sqrtf>:
 8024ed2:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8024ed6:	4770      	bx	lr

08024ed8 <__ieee754_atan2f>:
 8024ed8:	ee10 2a90 	vmov	r2, s1
 8024edc:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8024ee0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8024ee4:	b510      	push	{r4, lr}
 8024ee6:	eef0 7a40 	vmov.f32	s15, s0
 8024eea:	d806      	bhi.n	8024efa <__ieee754_atan2f+0x22>
 8024eec:	ee10 0a10 	vmov	r0, s0
 8024ef0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8024ef4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8024ef8:	d904      	bls.n	8024f04 <__ieee754_atan2f+0x2c>
 8024efa:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8024efe:	eeb0 0a67 	vmov.f32	s0, s15
 8024f02:	bd10      	pop	{r4, pc}
 8024f04:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8024f08:	d103      	bne.n	8024f12 <__ieee754_atan2f+0x3a>
 8024f0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024f0e:	f000 b881 	b.w	8025014 <atanf>
 8024f12:	1794      	asrs	r4, r2, #30
 8024f14:	f004 0402 	and.w	r4, r4, #2
 8024f18:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8024f1c:	b93b      	cbnz	r3, 8024f2e <__ieee754_atan2f+0x56>
 8024f1e:	2c02      	cmp	r4, #2
 8024f20:	d05c      	beq.n	8024fdc <__ieee754_atan2f+0x104>
 8024f22:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8024ff0 <__ieee754_atan2f+0x118>
 8024f26:	2c03      	cmp	r4, #3
 8024f28:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8024f2c:	e7e7      	b.n	8024efe <__ieee754_atan2f+0x26>
 8024f2e:	b939      	cbnz	r1, 8024f40 <__ieee754_atan2f+0x68>
 8024f30:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8024ff4 <__ieee754_atan2f+0x11c>
 8024f34:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8024ff8 <__ieee754_atan2f+0x120>
 8024f38:	2800      	cmp	r0, #0
 8024f3a:	fe67 7a87 	vselge.f32	s15, s15, s14
 8024f3e:	e7de      	b.n	8024efe <__ieee754_atan2f+0x26>
 8024f40:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8024f44:	d110      	bne.n	8024f68 <__ieee754_atan2f+0x90>
 8024f46:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8024f4a:	f104 34ff 	add.w	r4, r4, #4294967295
 8024f4e:	d107      	bne.n	8024f60 <__ieee754_atan2f+0x88>
 8024f50:	2c02      	cmp	r4, #2
 8024f52:	d846      	bhi.n	8024fe2 <__ieee754_atan2f+0x10a>
 8024f54:	4b29      	ldr	r3, [pc, #164]	@ (8024ffc <__ieee754_atan2f+0x124>)
 8024f56:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8024f5a:	edd3 7a00 	vldr	s15, [r3]
 8024f5e:	e7ce      	b.n	8024efe <__ieee754_atan2f+0x26>
 8024f60:	2c02      	cmp	r4, #2
 8024f62:	d841      	bhi.n	8024fe8 <__ieee754_atan2f+0x110>
 8024f64:	4b26      	ldr	r3, [pc, #152]	@ (8025000 <__ieee754_atan2f+0x128>)
 8024f66:	e7f6      	b.n	8024f56 <__ieee754_atan2f+0x7e>
 8024f68:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8024f6c:	d0e0      	beq.n	8024f30 <__ieee754_atan2f+0x58>
 8024f6e:	1a5b      	subs	r3, r3, r1
 8024f70:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8024f74:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8024f78:	da1a      	bge.n	8024fb0 <__ieee754_atan2f+0xd8>
 8024f7a:	2a00      	cmp	r2, #0
 8024f7c:	da01      	bge.n	8024f82 <__ieee754_atan2f+0xaa>
 8024f7e:	313c      	adds	r1, #60	@ 0x3c
 8024f80:	db19      	blt.n	8024fb6 <__ieee754_atan2f+0xde>
 8024f82:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8024f86:	f000 f919 	bl	80251bc <fabsf>
 8024f8a:	f000 f843 	bl	8025014 <atanf>
 8024f8e:	eef0 7a40 	vmov.f32	s15, s0
 8024f92:	2c01      	cmp	r4, #1
 8024f94:	d012      	beq.n	8024fbc <__ieee754_atan2f+0xe4>
 8024f96:	2c02      	cmp	r4, #2
 8024f98:	d017      	beq.n	8024fca <__ieee754_atan2f+0xf2>
 8024f9a:	2c00      	cmp	r4, #0
 8024f9c:	d0af      	beq.n	8024efe <__ieee754_atan2f+0x26>
 8024f9e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8025004 <__ieee754_atan2f+0x12c>
 8024fa2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8024fa6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8025008 <__ieee754_atan2f+0x130>
 8024faa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024fae:	e7a6      	b.n	8024efe <__ieee754_atan2f+0x26>
 8024fb0:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8024ff4 <__ieee754_atan2f+0x11c>
 8024fb4:	e7ed      	b.n	8024f92 <__ieee754_atan2f+0xba>
 8024fb6:	eddf 7a15 	vldr	s15, [pc, #84]	@ 802500c <__ieee754_atan2f+0x134>
 8024fba:	e7ea      	b.n	8024f92 <__ieee754_atan2f+0xba>
 8024fbc:	ee17 3a90 	vmov	r3, s15
 8024fc0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8024fc4:	ee07 3a90 	vmov	s15, r3
 8024fc8:	e799      	b.n	8024efe <__ieee754_atan2f+0x26>
 8024fca:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8025004 <__ieee754_atan2f+0x12c>
 8024fce:	ee77 7a87 	vadd.f32	s15, s15, s14
 8024fd2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8025008 <__ieee754_atan2f+0x130>
 8024fd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8024fda:	e790      	b.n	8024efe <__ieee754_atan2f+0x26>
 8024fdc:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8025008 <__ieee754_atan2f+0x130>
 8024fe0:	e78d      	b.n	8024efe <__ieee754_atan2f+0x26>
 8024fe2:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8025010 <__ieee754_atan2f+0x138>
 8024fe6:	e78a      	b.n	8024efe <__ieee754_atan2f+0x26>
 8024fe8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 802500c <__ieee754_atan2f+0x134>
 8024fec:	e787      	b.n	8024efe <__ieee754_atan2f+0x26>
 8024fee:	bf00      	nop
 8024ff0:	c0490fdb 	.word	0xc0490fdb
 8024ff4:	3fc90fdb 	.word	0x3fc90fdb
 8024ff8:	bfc90fdb 	.word	0xbfc90fdb
 8024ffc:	08029da4 	.word	0x08029da4
 8025000:	08029d98 	.word	0x08029d98
 8025004:	33bbbd2e 	.word	0x33bbbd2e
 8025008:	40490fdb 	.word	0x40490fdb
 802500c:	00000000 	.word	0x00000000
 8025010:	3f490fdb 	.word	0x3f490fdb

08025014 <atanf>:
 8025014:	b538      	push	{r3, r4, r5, lr}
 8025016:	ee10 5a10 	vmov	r5, s0
 802501a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 802501e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8025022:	eef0 7a40 	vmov.f32	s15, s0
 8025026:	d30f      	bcc.n	8025048 <atanf+0x34>
 8025028:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 802502c:	d904      	bls.n	8025038 <atanf+0x24>
 802502e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8025032:	eeb0 0a67 	vmov.f32	s0, s15
 8025036:	bd38      	pop	{r3, r4, r5, pc}
 8025038:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8025170 <atanf+0x15c>
 802503c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8025174 <atanf+0x160>
 8025040:	2d00      	cmp	r5, #0
 8025042:	fe77 7a27 	vselgt.f32	s15, s14, s15
 8025046:	e7f4      	b.n	8025032 <atanf+0x1e>
 8025048:	4b4b      	ldr	r3, [pc, #300]	@ (8025178 <atanf+0x164>)
 802504a:	429c      	cmp	r4, r3
 802504c:	d810      	bhi.n	8025070 <atanf+0x5c>
 802504e:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8025052:	d20a      	bcs.n	802506a <atanf+0x56>
 8025054:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 802517c <atanf+0x168>
 8025058:	ee30 7a07 	vadd.f32	s14, s0, s14
 802505c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8025060:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8025064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025068:	dce3      	bgt.n	8025032 <atanf+0x1e>
 802506a:	f04f 33ff 	mov.w	r3, #4294967295
 802506e:	e013      	b.n	8025098 <atanf+0x84>
 8025070:	f000 f8a4 	bl	80251bc <fabsf>
 8025074:	4b42      	ldr	r3, [pc, #264]	@ (8025180 <atanf+0x16c>)
 8025076:	429c      	cmp	r4, r3
 8025078:	d84f      	bhi.n	802511a <atanf+0x106>
 802507a:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 802507e:	429c      	cmp	r4, r3
 8025080:	d841      	bhi.n	8025106 <atanf+0xf2>
 8025082:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8025086:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802508a:	eea0 7a27 	vfma.f32	s14, s0, s15
 802508e:	2300      	movs	r3, #0
 8025090:	ee30 0a27 	vadd.f32	s0, s0, s15
 8025094:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025098:	1c5a      	adds	r2, r3, #1
 802509a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 802509e:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8025184 <atanf+0x170>
 80250a2:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8025188 <atanf+0x174>
 80250a6:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 802518c <atanf+0x178>
 80250aa:	ee66 6a06 	vmul.f32	s13, s12, s12
 80250ae:	eee6 5a87 	vfma.f32	s11, s13, s14
 80250b2:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8025190 <atanf+0x17c>
 80250b6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80250ba:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8025194 <atanf+0x180>
 80250be:	eee7 5a26 	vfma.f32	s11, s14, s13
 80250c2:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8025198 <atanf+0x184>
 80250c6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80250ca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 802519c <atanf+0x188>
 80250ce:	eee7 5a26 	vfma.f32	s11, s14, s13
 80250d2:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80251a0 <atanf+0x18c>
 80250d6:	eea6 5a87 	vfma.f32	s10, s13, s14
 80250da:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80251a4 <atanf+0x190>
 80250de:	eea5 7a26 	vfma.f32	s14, s10, s13
 80250e2:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 80251a8 <atanf+0x194>
 80250e6:	eea7 5a26 	vfma.f32	s10, s14, s13
 80250ea:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80251ac <atanf+0x198>
 80250ee:	eea5 7a26 	vfma.f32	s14, s10, s13
 80250f2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80250f6:	eea5 7a86 	vfma.f32	s14, s11, s12
 80250fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80250fe:	d121      	bne.n	8025144 <atanf+0x130>
 8025100:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025104:	e795      	b.n	8025032 <atanf+0x1e>
 8025106:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 802510a:	ee30 7a67 	vsub.f32	s14, s0, s15
 802510e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8025112:	2301      	movs	r3, #1
 8025114:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025118:	e7be      	b.n	8025098 <atanf+0x84>
 802511a:	4b25      	ldr	r3, [pc, #148]	@ (80251b0 <atanf+0x19c>)
 802511c:	429c      	cmp	r4, r3
 802511e:	d80b      	bhi.n	8025138 <atanf+0x124>
 8025120:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8025124:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8025128:	eea0 7a27 	vfma.f32	s14, s0, s15
 802512c:	2302      	movs	r3, #2
 802512e:	ee70 6a67 	vsub.f32	s13, s0, s15
 8025132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8025136:	e7af      	b.n	8025098 <atanf+0x84>
 8025138:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802513c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025140:	2303      	movs	r3, #3
 8025142:	e7a9      	b.n	8025098 <atanf+0x84>
 8025144:	4a1b      	ldr	r2, [pc, #108]	@ (80251b4 <atanf+0x1a0>)
 8025146:	491c      	ldr	r1, [pc, #112]	@ (80251b8 <atanf+0x1a4>)
 8025148:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802514c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8025150:	edd3 6a00 	vldr	s13, [r3]
 8025154:	ee37 7a66 	vsub.f32	s14, s14, s13
 8025158:	2d00      	cmp	r5, #0
 802515a:	ee37 7a67 	vsub.f32	s14, s14, s15
 802515e:	edd2 7a00 	vldr	s15, [r2]
 8025162:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025166:	bfb8      	it	lt
 8025168:	eef1 7a67 	vneglt.f32	s15, s15
 802516c:	e761      	b.n	8025032 <atanf+0x1e>
 802516e:	bf00      	nop
 8025170:	bfc90fdb 	.word	0xbfc90fdb
 8025174:	3fc90fdb 	.word	0x3fc90fdb
 8025178:	3edfffff 	.word	0x3edfffff
 802517c:	7149f2ca 	.word	0x7149f2ca
 8025180:	3f97ffff 	.word	0x3f97ffff
 8025184:	3c8569d7 	.word	0x3c8569d7
 8025188:	3d4bda59 	.word	0x3d4bda59
 802518c:	bd6ef16b 	.word	0xbd6ef16b
 8025190:	3d886b35 	.word	0x3d886b35
 8025194:	3dba2e6e 	.word	0x3dba2e6e
 8025198:	3e124925 	.word	0x3e124925
 802519c:	3eaaaaab 	.word	0x3eaaaaab
 80251a0:	bd15a221 	.word	0xbd15a221
 80251a4:	bd9d8795 	.word	0xbd9d8795
 80251a8:	bde38e38 	.word	0xbde38e38
 80251ac:	be4ccccd 	.word	0xbe4ccccd
 80251b0:	401bffff 	.word	0x401bffff
 80251b4:	08029dc0 	.word	0x08029dc0
 80251b8:	08029db0 	.word	0x08029db0

080251bc <fabsf>:
 80251bc:	ee10 3a10 	vmov	r3, s0
 80251c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80251c4:	ee00 3a10 	vmov	s0, r3
 80251c8:	4770      	bx	lr

080251ca <abort>:
 80251ca:	b508      	push	{r3, lr}
 80251cc:	2006      	movs	r0, #6
 80251ce:	f000 fae1 	bl	8025794 <raise>
 80251d2:	2001      	movs	r0, #1
 80251d4:	f7dc fc02 	bl	80019dc <_exit>

080251d8 <__assert_func>:
 80251d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80251da:	4614      	mov	r4, r2
 80251dc:	461a      	mov	r2, r3
 80251de:	4b09      	ldr	r3, [pc, #36]	@ (8025204 <__assert_func+0x2c>)
 80251e0:	681b      	ldr	r3, [r3, #0]
 80251e2:	4605      	mov	r5, r0
 80251e4:	68d8      	ldr	r0, [r3, #12]
 80251e6:	b954      	cbnz	r4, 80251fe <__assert_func+0x26>
 80251e8:	4b07      	ldr	r3, [pc, #28]	@ (8025208 <__assert_func+0x30>)
 80251ea:	461c      	mov	r4, r3
 80251ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80251f0:	9100      	str	r1, [sp, #0]
 80251f2:	462b      	mov	r3, r5
 80251f4:	4905      	ldr	r1, [pc, #20]	@ (802520c <__assert_func+0x34>)
 80251f6:	f000 f983 	bl	8025500 <fiprintf>
 80251fa:	f7ff ffe6 	bl	80251ca <abort>
 80251fe:	4b04      	ldr	r3, [pc, #16]	@ (8025210 <__assert_func+0x38>)
 8025200:	e7f4      	b.n	80251ec <__assert_func+0x14>
 8025202:	bf00      	nop
 8025204:	240000e8 	.word	0x240000e8
 8025208:	08029e0b 	.word	0x08029e0b
 802520c:	08029ddd 	.word	0x08029ddd
 8025210:	08029dd0 	.word	0x08029dd0

08025214 <atexit>:
 8025214:	2300      	movs	r3, #0
 8025216:	4601      	mov	r1, r0
 8025218:	461a      	mov	r2, r3
 802521a:	4618      	mov	r0, r3
 802521c:	f000 bb68 	b.w	80258f0 <__register_exitproc>

08025220 <malloc>:
 8025220:	4b02      	ldr	r3, [pc, #8]	@ (802522c <malloc+0xc>)
 8025222:	4601      	mov	r1, r0
 8025224:	6818      	ldr	r0, [r3, #0]
 8025226:	f000 b82d 	b.w	8025284 <_malloc_r>
 802522a:	bf00      	nop
 802522c:	240000e8 	.word	0x240000e8

08025230 <free>:
 8025230:	4b02      	ldr	r3, [pc, #8]	@ (802523c <free+0xc>)
 8025232:	4601      	mov	r1, r0
 8025234:	6818      	ldr	r0, [r3, #0]
 8025236:	f000 bbb7 	b.w	80259a8 <_free_r>
 802523a:	bf00      	nop
 802523c:	240000e8 	.word	0x240000e8

08025240 <sbrk_aligned>:
 8025240:	b570      	push	{r4, r5, r6, lr}
 8025242:	4e0f      	ldr	r6, [pc, #60]	@ (8025280 <sbrk_aligned+0x40>)
 8025244:	460c      	mov	r4, r1
 8025246:	6831      	ldr	r1, [r6, #0]
 8025248:	4605      	mov	r5, r0
 802524a:	b911      	cbnz	r1, 8025252 <sbrk_aligned+0x12>
 802524c:	f000 faf2 	bl	8025834 <_sbrk_r>
 8025250:	6030      	str	r0, [r6, #0]
 8025252:	4621      	mov	r1, r4
 8025254:	4628      	mov	r0, r5
 8025256:	f000 faed 	bl	8025834 <_sbrk_r>
 802525a:	1c43      	adds	r3, r0, #1
 802525c:	d103      	bne.n	8025266 <sbrk_aligned+0x26>
 802525e:	f04f 34ff 	mov.w	r4, #4294967295
 8025262:	4620      	mov	r0, r4
 8025264:	bd70      	pop	{r4, r5, r6, pc}
 8025266:	1cc4      	adds	r4, r0, #3
 8025268:	f024 0403 	bic.w	r4, r4, #3
 802526c:	42a0      	cmp	r0, r4
 802526e:	d0f8      	beq.n	8025262 <sbrk_aligned+0x22>
 8025270:	1a21      	subs	r1, r4, r0
 8025272:	4628      	mov	r0, r5
 8025274:	f000 fade 	bl	8025834 <_sbrk_r>
 8025278:	3001      	adds	r0, #1
 802527a:	d1f2      	bne.n	8025262 <sbrk_aligned+0x22>
 802527c:	e7ef      	b.n	802525e <sbrk_aligned+0x1e>
 802527e:	bf00      	nop
 8025280:	24026e54 	.word	0x24026e54

08025284 <_malloc_r>:
 8025284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025288:	1ccd      	adds	r5, r1, #3
 802528a:	f025 0503 	bic.w	r5, r5, #3
 802528e:	3508      	adds	r5, #8
 8025290:	2d0c      	cmp	r5, #12
 8025292:	bf38      	it	cc
 8025294:	250c      	movcc	r5, #12
 8025296:	2d00      	cmp	r5, #0
 8025298:	4606      	mov	r6, r0
 802529a:	db01      	blt.n	80252a0 <_malloc_r+0x1c>
 802529c:	42a9      	cmp	r1, r5
 802529e:	d904      	bls.n	80252aa <_malloc_r+0x26>
 80252a0:	230c      	movs	r3, #12
 80252a2:	6033      	str	r3, [r6, #0]
 80252a4:	2000      	movs	r0, #0
 80252a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80252aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8025380 <_malloc_r+0xfc>
 80252ae:	f000 f869 	bl	8025384 <__malloc_lock>
 80252b2:	f8d8 3000 	ldr.w	r3, [r8]
 80252b6:	461c      	mov	r4, r3
 80252b8:	bb44      	cbnz	r4, 802530c <_malloc_r+0x88>
 80252ba:	4629      	mov	r1, r5
 80252bc:	4630      	mov	r0, r6
 80252be:	f7ff ffbf 	bl	8025240 <sbrk_aligned>
 80252c2:	1c43      	adds	r3, r0, #1
 80252c4:	4604      	mov	r4, r0
 80252c6:	d158      	bne.n	802537a <_malloc_r+0xf6>
 80252c8:	f8d8 4000 	ldr.w	r4, [r8]
 80252cc:	4627      	mov	r7, r4
 80252ce:	2f00      	cmp	r7, #0
 80252d0:	d143      	bne.n	802535a <_malloc_r+0xd6>
 80252d2:	2c00      	cmp	r4, #0
 80252d4:	d04b      	beq.n	802536e <_malloc_r+0xea>
 80252d6:	6823      	ldr	r3, [r4, #0]
 80252d8:	4639      	mov	r1, r7
 80252da:	4630      	mov	r0, r6
 80252dc:	eb04 0903 	add.w	r9, r4, r3
 80252e0:	f000 faa8 	bl	8025834 <_sbrk_r>
 80252e4:	4581      	cmp	r9, r0
 80252e6:	d142      	bne.n	802536e <_malloc_r+0xea>
 80252e8:	6821      	ldr	r1, [r4, #0]
 80252ea:	1a6d      	subs	r5, r5, r1
 80252ec:	4629      	mov	r1, r5
 80252ee:	4630      	mov	r0, r6
 80252f0:	f7ff ffa6 	bl	8025240 <sbrk_aligned>
 80252f4:	3001      	adds	r0, #1
 80252f6:	d03a      	beq.n	802536e <_malloc_r+0xea>
 80252f8:	6823      	ldr	r3, [r4, #0]
 80252fa:	442b      	add	r3, r5
 80252fc:	6023      	str	r3, [r4, #0]
 80252fe:	f8d8 3000 	ldr.w	r3, [r8]
 8025302:	685a      	ldr	r2, [r3, #4]
 8025304:	bb62      	cbnz	r2, 8025360 <_malloc_r+0xdc>
 8025306:	f8c8 7000 	str.w	r7, [r8]
 802530a:	e00f      	b.n	802532c <_malloc_r+0xa8>
 802530c:	6822      	ldr	r2, [r4, #0]
 802530e:	1b52      	subs	r2, r2, r5
 8025310:	d420      	bmi.n	8025354 <_malloc_r+0xd0>
 8025312:	2a0b      	cmp	r2, #11
 8025314:	d917      	bls.n	8025346 <_malloc_r+0xc2>
 8025316:	1961      	adds	r1, r4, r5
 8025318:	42a3      	cmp	r3, r4
 802531a:	6025      	str	r5, [r4, #0]
 802531c:	bf18      	it	ne
 802531e:	6059      	strne	r1, [r3, #4]
 8025320:	6863      	ldr	r3, [r4, #4]
 8025322:	bf08      	it	eq
 8025324:	f8c8 1000 	streq.w	r1, [r8]
 8025328:	5162      	str	r2, [r4, r5]
 802532a:	604b      	str	r3, [r1, #4]
 802532c:	4630      	mov	r0, r6
 802532e:	f000 f82f 	bl	8025390 <__malloc_unlock>
 8025332:	f104 000b 	add.w	r0, r4, #11
 8025336:	1d23      	adds	r3, r4, #4
 8025338:	f020 0007 	bic.w	r0, r0, #7
 802533c:	1ac2      	subs	r2, r0, r3
 802533e:	bf1c      	itt	ne
 8025340:	1a1b      	subne	r3, r3, r0
 8025342:	50a3      	strne	r3, [r4, r2]
 8025344:	e7af      	b.n	80252a6 <_malloc_r+0x22>
 8025346:	6862      	ldr	r2, [r4, #4]
 8025348:	42a3      	cmp	r3, r4
 802534a:	bf0c      	ite	eq
 802534c:	f8c8 2000 	streq.w	r2, [r8]
 8025350:	605a      	strne	r2, [r3, #4]
 8025352:	e7eb      	b.n	802532c <_malloc_r+0xa8>
 8025354:	4623      	mov	r3, r4
 8025356:	6864      	ldr	r4, [r4, #4]
 8025358:	e7ae      	b.n	80252b8 <_malloc_r+0x34>
 802535a:	463c      	mov	r4, r7
 802535c:	687f      	ldr	r7, [r7, #4]
 802535e:	e7b6      	b.n	80252ce <_malloc_r+0x4a>
 8025360:	461a      	mov	r2, r3
 8025362:	685b      	ldr	r3, [r3, #4]
 8025364:	42a3      	cmp	r3, r4
 8025366:	d1fb      	bne.n	8025360 <_malloc_r+0xdc>
 8025368:	2300      	movs	r3, #0
 802536a:	6053      	str	r3, [r2, #4]
 802536c:	e7de      	b.n	802532c <_malloc_r+0xa8>
 802536e:	230c      	movs	r3, #12
 8025370:	6033      	str	r3, [r6, #0]
 8025372:	4630      	mov	r0, r6
 8025374:	f000 f80c 	bl	8025390 <__malloc_unlock>
 8025378:	e794      	b.n	80252a4 <_malloc_r+0x20>
 802537a:	6005      	str	r5, [r0, #0]
 802537c:	e7d6      	b.n	802532c <_malloc_r+0xa8>
 802537e:	bf00      	nop
 8025380:	24026e58 	.word	0x24026e58

08025384 <__malloc_lock>:
 8025384:	4801      	ldr	r0, [pc, #4]	@ (802538c <__malloc_lock+0x8>)
 8025386:	f000 baa2 	b.w	80258ce <__retarget_lock_acquire_recursive>
 802538a:	bf00      	nop
 802538c:	24026f9c 	.word	0x24026f9c

08025390 <__malloc_unlock>:
 8025390:	4801      	ldr	r0, [pc, #4]	@ (8025398 <__malloc_unlock+0x8>)
 8025392:	f000 ba9d 	b.w	80258d0 <__retarget_lock_release_recursive>
 8025396:	bf00      	nop
 8025398:	24026f9c 	.word	0x24026f9c

0802539c <__cxa_atexit>:
 802539c:	b510      	push	{r4, lr}
 802539e:	4604      	mov	r4, r0
 80253a0:	4804      	ldr	r0, [pc, #16]	@ (80253b4 <__cxa_atexit+0x18>)
 80253a2:	4613      	mov	r3, r2
 80253a4:	b120      	cbz	r0, 80253b0 <__cxa_atexit+0x14>
 80253a6:	460a      	mov	r2, r1
 80253a8:	2002      	movs	r0, #2
 80253aa:	4621      	mov	r1, r4
 80253ac:	f000 faa0 	bl	80258f0 <__register_exitproc>
 80253b0:	bd10      	pop	{r4, pc}
 80253b2:	bf00      	nop
 80253b4:	080258f1 	.word	0x080258f1

080253b8 <std>:
 80253b8:	2300      	movs	r3, #0
 80253ba:	b510      	push	{r4, lr}
 80253bc:	4604      	mov	r4, r0
 80253be:	e9c0 3300 	strd	r3, r3, [r0]
 80253c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80253c6:	6083      	str	r3, [r0, #8]
 80253c8:	8181      	strh	r1, [r0, #12]
 80253ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80253cc:	81c2      	strh	r2, [r0, #14]
 80253ce:	6183      	str	r3, [r0, #24]
 80253d0:	4619      	mov	r1, r3
 80253d2:	2208      	movs	r2, #8
 80253d4:	305c      	adds	r0, #92	@ 0x5c
 80253d6:	f000 f99b 	bl	8025710 <memset>
 80253da:	4b0d      	ldr	r3, [pc, #52]	@ (8025410 <std+0x58>)
 80253dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80253de:	4b0d      	ldr	r3, [pc, #52]	@ (8025414 <std+0x5c>)
 80253e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80253e2:	4b0d      	ldr	r3, [pc, #52]	@ (8025418 <std+0x60>)
 80253e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80253e6:	4b0d      	ldr	r3, [pc, #52]	@ (802541c <std+0x64>)
 80253e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80253ea:	4b0d      	ldr	r3, [pc, #52]	@ (8025420 <std+0x68>)
 80253ec:	6224      	str	r4, [r4, #32]
 80253ee:	429c      	cmp	r4, r3
 80253f0:	d006      	beq.n	8025400 <std+0x48>
 80253f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80253f6:	4294      	cmp	r4, r2
 80253f8:	d002      	beq.n	8025400 <std+0x48>
 80253fa:	33d0      	adds	r3, #208	@ 0xd0
 80253fc:	429c      	cmp	r4, r3
 80253fe:	d105      	bne.n	802540c <std+0x54>
 8025400:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8025404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025408:	f000 ba60 	b.w	80258cc <__retarget_lock_init_recursive>
 802540c:	bd10      	pop	{r4, pc}
 802540e:	bf00      	nop
 8025410:	08025561 	.word	0x08025561
 8025414:	08025583 	.word	0x08025583
 8025418:	080255bb 	.word	0x080255bb
 802541c:	080255df 	.word	0x080255df
 8025420:	24026e5c 	.word	0x24026e5c

08025424 <stdio_exit_handler>:
 8025424:	4a02      	ldr	r2, [pc, #8]	@ (8025430 <stdio_exit_handler+0xc>)
 8025426:	4903      	ldr	r1, [pc, #12]	@ (8025434 <stdio_exit_handler+0x10>)
 8025428:	4803      	ldr	r0, [pc, #12]	@ (8025438 <stdio_exit_handler+0x14>)
 802542a:	f000 b87b 	b.w	8025524 <_fwalk_sglue>
 802542e:	bf00      	nop
 8025430:	240000dc 	.word	0x240000dc
 8025434:	080260e5 	.word	0x080260e5
 8025438:	240000ec 	.word	0x240000ec

0802543c <cleanup_stdio>:
 802543c:	6841      	ldr	r1, [r0, #4]
 802543e:	4b0c      	ldr	r3, [pc, #48]	@ (8025470 <cleanup_stdio+0x34>)
 8025440:	4299      	cmp	r1, r3
 8025442:	b510      	push	{r4, lr}
 8025444:	4604      	mov	r4, r0
 8025446:	d001      	beq.n	802544c <cleanup_stdio+0x10>
 8025448:	f000 fe4c 	bl	80260e4 <_fflush_r>
 802544c:	68a1      	ldr	r1, [r4, #8]
 802544e:	4b09      	ldr	r3, [pc, #36]	@ (8025474 <cleanup_stdio+0x38>)
 8025450:	4299      	cmp	r1, r3
 8025452:	d002      	beq.n	802545a <cleanup_stdio+0x1e>
 8025454:	4620      	mov	r0, r4
 8025456:	f000 fe45 	bl	80260e4 <_fflush_r>
 802545a:	68e1      	ldr	r1, [r4, #12]
 802545c:	4b06      	ldr	r3, [pc, #24]	@ (8025478 <cleanup_stdio+0x3c>)
 802545e:	4299      	cmp	r1, r3
 8025460:	d004      	beq.n	802546c <cleanup_stdio+0x30>
 8025462:	4620      	mov	r0, r4
 8025464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025468:	f000 be3c 	b.w	80260e4 <_fflush_r>
 802546c:	bd10      	pop	{r4, pc}
 802546e:	bf00      	nop
 8025470:	24026e5c 	.word	0x24026e5c
 8025474:	24026ec4 	.word	0x24026ec4
 8025478:	24026f2c 	.word	0x24026f2c

0802547c <global_stdio_init.part.0>:
 802547c:	b510      	push	{r4, lr}
 802547e:	4b0b      	ldr	r3, [pc, #44]	@ (80254ac <global_stdio_init.part.0+0x30>)
 8025480:	4c0b      	ldr	r4, [pc, #44]	@ (80254b0 <global_stdio_init.part.0+0x34>)
 8025482:	4a0c      	ldr	r2, [pc, #48]	@ (80254b4 <global_stdio_init.part.0+0x38>)
 8025484:	601a      	str	r2, [r3, #0]
 8025486:	4620      	mov	r0, r4
 8025488:	2200      	movs	r2, #0
 802548a:	2104      	movs	r1, #4
 802548c:	f7ff ff94 	bl	80253b8 <std>
 8025490:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8025494:	2201      	movs	r2, #1
 8025496:	2109      	movs	r1, #9
 8025498:	f7ff ff8e 	bl	80253b8 <std>
 802549c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80254a0:	2202      	movs	r2, #2
 80254a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80254a6:	2112      	movs	r1, #18
 80254a8:	f7ff bf86 	b.w	80253b8 <std>
 80254ac:	24026f94 	.word	0x24026f94
 80254b0:	24026e5c 	.word	0x24026e5c
 80254b4:	08025425 	.word	0x08025425

080254b8 <__sfp_lock_acquire>:
 80254b8:	4801      	ldr	r0, [pc, #4]	@ (80254c0 <__sfp_lock_acquire+0x8>)
 80254ba:	f000 ba08 	b.w	80258ce <__retarget_lock_acquire_recursive>
 80254be:	bf00      	nop
 80254c0:	24026f9e 	.word	0x24026f9e

080254c4 <__sfp_lock_release>:
 80254c4:	4801      	ldr	r0, [pc, #4]	@ (80254cc <__sfp_lock_release+0x8>)
 80254c6:	f000 ba03 	b.w	80258d0 <__retarget_lock_release_recursive>
 80254ca:	bf00      	nop
 80254cc:	24026f9e 	.word	0x24026f9e

080254d0 <__sinit>:
 80254d0:	b510      	push	{r4, lr}
 80254d2:	4604      	mov	r4, r0
 80254d4:	f7ff fff0 	bl	80254b8 <__sfp_lock_acquire>
 80254d8:	6a23      	ldr	r3, [r4, #32]
 80254da:	b11b      	cbz	r3, 80254e4 <__sinit+0x14>
 80254dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80254e0:	f7ff bff0 	b.w	80254c4 <__sfp_lock_release>
 80254e4:	4b04      	ldr	r3, [pc, #16]	@ (80254f8 <__sinit+0x28>)
 80254e6:	6223      	str	r3, [r4, #32]
 80254e8:	4b04      	ldr	r3, [pc, #16]	@ (80254fc <__sinit+0x2c>)
 80254ea:	681b      	ldr	r3, [r3, #0]
 80254ec:	2b00      	cmp	r3, #0
 80254ee:	d1f5      	bne.n	80254dc <__sinit+0xc>
 80254f0:	f7ff ffc4 	bl	802547c <global_stdio_init.part.0>
 80254f4:	e7f2      	b.n	80254dc <__sinit+0xc>
 80254f6:	bf00      	nop
 80254f8:	0802543d 	.word	0x0802543d
 80254fc:	24026f94 	.word	0x24026f94

08025500 <fiprintf>:
 8025500:	b40e      	push	{r1, r2, r3}
 8025502:	b503      	push	{r0, r1, lr}
 8025504:	4601      	mov	r1, r0
 8025506:	ab03      	add	r3, sp, #12
 8025508:	4805      	ldr	r0, [pc, #20]	@ (8025520 <fiprintf+0x20>)
 802550a:	f853 2b04 	ldr.w	r2, [r3], #4
 802550e:	6800      	ldr	r0, [r0, #0]
 8025510:	9301      	str	r3, [sp, #4]
 8025512:	f000 fabd 	bl	8025a90 <_vfiprintf_r>
 8025516:	b002      	add	sp, #8
 8025518:	f85d eb04 	ldr.w	lr, [sp], #4
 802551c:	b003      	add	sp, #12
 802551e:	4770      	bx	lr
 8025520:	240000e8 	.word	0x240000e8

08025524 <_fwalk_sglue>:
 8025524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025528:	4607      	mov	r7, r0
 802552a:	4688      	mov	r8, r1
 802552c:	4614      	mov	r4, r2
 802552e:	2600      	movs	r6, #0
 8025530:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8025534:	f1b9 0901 	subs.w	r9, r9, #1
 8025538:	d505      	bpl.n	8025546 <_fwalk_sglue+0x22>
 802553a:	6824      	ldr	r4, [r4, #0]
 802553c:	2c00      	cmp	r4, #0
 802553e:	d1f7      	bne.n	8025530 <_fwalk_sglue+0xc>
 8025540:	4630      	mov	r0, r6
 8025542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025546:	89ab      	ldrh	r3, [r5, #12]
 8025548:	2b01      	cmp	r3, #1
 802554a:	d907      	bls.n	802555c <_fwalk_sglue+0x38>
 802554c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025550:	3301      	adds	r3, #1
 8025552:	d003      	beq.n	802555c <_fwalk_sglue+0x38>
 8025554:	4629      	mov	r1, r5
 8025556:	4638      	mov	r0, r7
 8025558:	47c0      	blx	r8
 802555a:	4306      	orrs	r6, r0
 802555c:	3568      	adds	r5, #104	@ 0x68
 802555e:	e7e9      	b.n	8025534 <_fwalk_sglue+0x10>

08025560 <__sread>:
 8025560:	b510      	push	{r4, lr}
 8025562:	460c      	mov	r4, r1
 8025564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025568:	f000 f93e 	bl	80257e8 <_read_r>
 802556c:	2800      	cmp	r0, #0
 802556e:	bfab      	itete	ge
 8025570:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8025572:	89a3      	ldrhlt	r3, [r4, #12]
 8025574:	181b      	addge	r3, r3, r0
 8025576:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802557a:	bfac      	ite	ge
 802557c:	6563      	strge	r3, [r4, #84]	@ 0x54
 802557e:	81a3      	strhlt	r3, [r4, #12]
 8025580:	bd10      	pop	{r4, pc}

08025582 <__swrite>:
 8025582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025586:	461f      	mov	r7, r3
 8025588:	898b      	ldrh	r3, [r1, #12]
 802558a:	05db      	lsls	r3, r3, #23
 802558c:	4605      	mov	r5, r0
 802558e:	460c      	mov	r4, r1
 8025590:	4616      	mov	r6, r2
 8025592:	d505      	bpl.n	80255a0 <__swrite+0x1e>
 8025594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025598:	2302      	movs	r3, #2
 802559a:	2200      	movs	r2, #0
 802559c:	f000 f912 	bl	80257c4 <_lseek_r>
 80255a0:	89a3      	ldrh	r3, [r4, #12]
 80255a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80255a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80255aa:	81a3      	strh	r3, [r4, #12]
 80255ac:	4632      	mov	r2, r6
 80255ae:	463b      	mov	r3, r7
 80255b0:	4628      	mov	r0, r5
 80255b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80255b6:	f000 b94d 	b.w	8025854 <_write_r>

080255ba <__sseek>:
 80255ba:	b510      	push	{r4, lr}
 80255bc:	460c      	mov	r4, r1
 80255be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80255c2:	f000 f8ff 	bl	80257c4 <_lseek_r>
 80255c6:	1c43      	adds	r3, r0, #1
 80255c8:	89a3      	ldrh	r3, [r4, #12]
 80255ca:	bf15      	itete	ne
 80255cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80255ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80255d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80255d6:	81a3      	strheq	r3, [r4, #12]
 80255d8:	bf18      	it	ne
 80255da:	81a3      	strhne	r3, [r4, #12]
 80255dc:	bd10      	pop	{r4, pc}

080255de <__sclose>:
 80255de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80255e2:	f000 b8df 	b.w	80257a4 <_close_r>

080255e6 <__swbuf_r>:
 80255e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80255e8:	460e      	mov	r6, r1
 80255ea:	4614      	mov	r4, r2
 80255ec:	4605      	mov	r5, r0
 80255ee:	b118      	cbz	r0, 80255f8 <__swbuf_r+0x12>
 80255f0:	6a03      	ldr	r3, [r0, #32]
 80255f2:	b90b      	cbnz	r3, 80255f8 <__swbuf_r+0x12>
 80255f4:	f7ff ff6c 	bl	80254d0 <__sinit>
 80255f8:	69a3      	ldr	r3, [r4, #24]
 80255fa:	60a3      	str	r3, [r4, #8]
 80255fc:	89a3      	ldrh	r3, [r4, #12]
 80255fe:	071a      	lsls	r2, r3, #28
 8025600:	d501      	bpl.n	8025606 <__swbuf_r+0x20>
 8025602:	6923      	ldr	r3, [r4, #16]
 8025604:	b943      	cbnz	r3, 8025618 <__swbuf_r+0x32>
 8025606:	4621      	mov	r1, r4
 8025608:	4628      	mov	r0, r5
 802560a:	f000 f82b 	bl	8025664 <__swsetup_r>
 802560e:	b118      	cbz	r0, 8025618 <__swbuf_r+0x32>
 8025610:	f04f 37ff 	mov.w	r7, #4294967295
 8025614:	4638      	mov	r0, r7
 8025616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025618:	6823      	ldr	r3, [r4, #0]
 802561a:	6922      	ldr	r2, [r4, #16]
 802561c:	1a98      	subs	r0, r3, r2
 802561e:	6963      	ldr	r3, [r4, #20]
 8025620:	b2f6      	uxtb	r6, r6
 8025622:	4283      	cmp	r3, r0
 8025624:	4637      	mov	r7, r6
 8025626:	dc05      	bgt.n	8025634 <__swbuf_r+0x4e>
 8025628:	4621      	mov	r1, r4
 802562a:	4628      	mov	r0, r5
 802562c:	f000 fd5a 	bl	80260e4 <_fflush_r>
 8025630:	2800      	cmp	r0, #0
 8025632:	d1ed      	bne.n	8025610 <__swbuf_r+0x2a>
 8025634:	68a3      	ldr	r3, [r4, #8]
 8025636:	3b01      	subs	r3, #1
 8025638:	60a3      	str	r3, [r4, #8]
 802563a:	6823      	ldr	r3, [r4, #0]
 802563c:	1c5a      	adds	r2, r3, #1
 802563e:	6022      	str	r2, [r4, #0]
 8025640:	701e      	strb	r6, [r3, #0]
 8025642:	6962      	ldr	r2, [r4, #20]
 8025644:	1c43      	adds	r3, r0, #1
 8025646:	429a      	cmp	r2, r3
 8025648:	d004      	beq.n	8025654 <__swbuf_r+0x6e>
 802564a:	89a3      	ldrh	r3, [r4, #12]
 802564c:	07db      	lsls	r3, r3, #31
 802564e:	d5e1      	bpl.n	8025614 <__swbuf_r+0x2e>
 8025650:	2e0a      	cmp	r6, #10
 8025652:	d1df      	bne.n	8025614 <__swbuf_r+0x2e>
 8025654:	4621      	mov	r1, r4
 8025656:	4628      	mov	r0, r5
 8025658:	f000 fd44 	bl	80260e4 <_fflush_r>
 802565c:	2800      	cmp	r0, #0
 802565e:	d0d9      	beq.n	8025614 <__swbuf_r+0x2e>
 8025660:	e7d6      	b.n	8025610 <__swbuf_r+0x2a>
	...

08025664 <__swsetup_r>:
 8025664:	b538      	push	{r3, r4, r5, lr}
 8025666:	4b29      	ldr	r3, [pc, #164]	@ (802570c <__swsetup_r+0xa8>)
 8025668:	4605      	mov	r5, r0
 802566a:	6818      	ldr	r0, [r3, #0]
 802566c:	460c      	mov	r4, r1
 802566e:	b118      	cbz	r0, 8025678 <__swsetup_r+0x14>
 8025670:	6a03      	ldr	r3, [r0, #32]
 8025672:	b90b      	cbnz	r3, 8025678 <__swsetup_r+0x14>
 8025674:	f7ff ff2c 	bl	80254d0 <__sinit>
 8025678:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802567c:	0719      	lsls	r1, r3, #28
 802567e:	d422      	bmi.n	80256c6 <__swsetup_r+0x62>
 8025680:	06da      	lsls	r2, r3, #27
 8025682:	d407      	bmi.n	8025694 <__swsetup_r+0x30>
 8025684:	2209      	movs	r2, #9
 8025686:	602a      	str	r2, [r5, #0]
 8025688:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802568c:	81a3      	strh	r3, [r4, #12]
 802568e:	f04f 30ff 	mov.w	r0, #4294967295
 8025692:	e033      	b.n	80256fc <__swsetup_r+0x98>
 8025694:	0758      	lsls	r0, r3, #29
 8025696:	d512      	bpl.n	80256be <__swsetup_r+0x5a>
 8025698:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802569a:	b141      	cbz	r1, 80256ae <__swsetup_r+0x4a>
 802569c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80256a0:	4299      	cmp	r1, r3
 80256a2:	d002      	beq.n	80256aa <__swsetup_r+0x46>
 80256a4:	4628      	mov	r0, r5
 80256a6:	f000 f97f 	bl	80259a8 <_free_r>
 80256aa:	2300      	movs	r3, #0
 80256ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80256ae:	89a3      	ldrh	r3, [r4, #12]
 80256b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80256b4:	81a3      	strh	r3, [r4, #12]
 80256b6:	2300      	movs	r3, #0
 80256b8:	6063      	str	r3, [r4, #4]
 80256ba:	6923      	ldr	r3, [r4, #16]
 80256bc:	6023      	str	r3, [r4, #0]
 80256be:	89a3      	ldrh	r3, [r4, #12]
 80256c0:	f043 0308 	orr.w	r3, r3, #8
 80256c4:	81a3      	strh	r3, [r4, #12]
 80256c6:	6923      	ldr	r3, [r4, #16]
 80256c8:	b94b      	cbnz	r3, 80256de <__swsetup_r+0x7a>
 80256ca:	89a3      	ldrh	r3, [r4, #12]
 80256cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80256d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80256d4:	d003      	beq.n	80256de <__swsetup_r+0x7a>
 80256d6:	4621      	mov	r1, r4
 80256d8:	4628      	mov	r0, r5
 80256da:	f000 fd51 	bl	8026180 <__smakebuf_r>
 80256de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80256e2:	f013 0201 	ands.w	r2, r3, #1
 80256e6:	d00a      	beq.n	80256fe <__swsetup_r+0x9a>
 80256e8:	2200      	movs	r2, #0
 80256ea:	60a2      	str	r2, [r4, #8]
 80256ec:	6962      	ldr	r2, [r4, #20]
 80256ee:	4252      	negs	r2, r2
 80256f0:	61a2      	str	r2, [r4, #24]
 80256f2:	6922      	ldr	r2, [r4, #16]
 80256f4:	b942      	cbnz	r2, 8025708 <__swsetup_r+0xa4>
 80256f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80256fa:	d1c5      	bne.n	8025688 <__swsetup_r+0x24>
 80256fc:	bd38      	pop	{r3, r4, r5, pc}
 80256fe:	0799      	lsls	r1, r3, #30
 8025700:	bf58      	it	pl
 8025702:	6962      	ldrpl	r2, [r4, #20]
 8025704:	60a2      	str	r2, [r4, #8]
 8025706:	e7f4      	b.n	80256f2 <__swsetup_r+0x8e>
 8025708:	2000      	movs	r0, #0
 802570a:	e7f7      	b.n	80256fc <__swsetup_r+0x98>
 802570c:	240000e8 	.word	0x240000e8

08025710 <memset>:
 8025710:	4402      	add	r2, r0
 8025712:	4603      	mov	r3, r0
 8025714:	4293      	cmp	r3, r2
 8025716:	d100      	bne.n	802571a <memset+0xa>
 8025718:	4770      	bx	lr
 802571a:	f803 1b01 	strb.w	r1, [r3], #1
 802571e:	e7f9      	b.n	8025714 <memset+0x4>

08025720 <strncmp>:
 8025720:	b510      	push	{r4, lr}
 8025722:	b16a      	cbz	r2, 8025740 <strncmp+0x20>
 8025724:	3901      	subs	r1, #1
 8025726:	1884      	adds	r4, r0, r2
 8025728:	f810 2b01 	ldrb.w	r2, [r0], #1
 802572c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8025730:	429a      	cmp	r2, r3
 8025732:	d103      	bne.n	802573c <strncmp+0x1c>
 8025734:	42a0      	cmp	r0, r4
 8025736:	d001      	beq.n	802573c <strncmp+0x1c>
 8025738:	2a00      	cmp	r2, #0
 802573a:	d1f5      	bne.n	8025728 <strncmp+0x8>
 802573c:	1ad0      	subs	r0, r2, r3
 802573e:	bd10      	pop	{r4, pc}
 8025740:	4610      	mov	r0, r2
 8025742:	e7fc      	b.n	802573e <strncmp+0x1e>

08025744 <_raise_r>:
 8025744:	291f      	cmp	r1, #31
 8025746:	b538      	push	{r3, r4, r5, lr}
 8025748:	4605      	mov	r5, r0
 802574a:	460c      	mov	r4, r1
 802574c:	d904      	bls.n	8025758 <_raise_r+0x14>
 802574e:	2316      	movs	r3, #22
 8025750:	6003      	str	r3, [r0, #0]
 8025752:	f04f 30ff 	mov.w	r0, #4294967295
 8025756:	bd38      	pop	{r3, r4, r5, pc}
 8025758:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802575a:	b112      	cbz	r2, 8025762 <_raise_r+0x1e>
 802575c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8025760:	b94b      	cbnz	r3, 8025776 <_raise_r+0x32>
 8025762:	4628      	mov	r0, r5
 8025764:	f000 f864 	bl	8025830 <_getpid_r>
 8025768:	4622      	mov	r2, r4
 802576a:	4601      	mov	r1, r0
 802576c:	4628      	mov	r0, r5
 802576e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025772:	f000 b84b 	b.w	802580c <_kill_r>
 8025776:	2b01      	cmp	r3, #1
 8025778:	d00a      	beq.n	8025790 <_raise_r+0x4c>
 802577a:	1c59      	adds	r1, r3, #1
 802577c:	d103      	bne.n	8025786 <_raise_r+0x42>
 802577e:	2316      	movs	r3, #22
 8025780:	6003      	str	r3, [r0, #0]
 8025782:	2001      	movs	r0, #1
 8025784:	e7e7      	b.n	8025756 <_raise_r+0x12>
 8025786:	2100      	movs	r1, #0
 8025788:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802578c:	4620      	mov	r0, r4
 802578e:	4798      	blx	r3
 8025790:	2000      	movs	r0, #0
 8025792:	e7e0      	b.n	8025756 <_raise_r+0x12>

08025794 <raise>:
 8025794:	4b02      	ldr	r3, [pc, #8]	@ (80257a0 <raise+0xc>)
 8025796:	4601      	mov	r1, r0
 8025798:	6818      	ldr	r0, [r3, #0]
 802579a:	f7ff bfd3 	b.w	8025744 <_raise_r>
 802579e:	bf00      	nop
 80257a0:	240000e8 	.word	0x240000e8

080257a4 <_close_r>:
 80257a4:	b538      	push	{r3, r4, r5, lr}
 80257a6:	4d06      	ldr	r5, [pc, #24]	@ (80257c0 <_close_r+0x1c>)
 80257a8:	2300      	movs	r3, #0
 80257aa:	4604      	mov	r4, r0
 80257ac:	4608      	mov	r0, r1
 80257ae:	602b      	str	r3, [r5, #0]
 80257b0:	f7dc f936 	bl	8001a20 <_close>
 80257b4:	1c43      	adds	r3, r0, #1
 80257b6:	d102      	bne.n	80257be <_close_r+0x1a>
 80257b8:	682b      	ldr	r3, [r5, #0]
 80257ba:	b103      	cbz	r3, 80257be <_close_r+0x1a>
 80257bc:	6023      	str	r3, [r4, #0]
 80257be:	bd38      	pop	{r3, r4, r5, pc}
 80257c0:	24026f98 	.word	0x24026f98

080257c4 <_lseek_r>:
 80257c4:	b538      	push	{r3, r4, r5, lr}
 80257c6:	4d07      	ldr	r5, [pc, #28]	@ (80257e4 <_lseek_r+0x20>)
 80257c8:	4604      	mov	r4, r0
 80257ca:	4608      	mov	r0, r1
 80257cc:	4611      	mov	r1, r2
 80257ce:	2200      	movs	r2, #0
 80257d0:	602a      	str	r2, [r5, #0]
 80257d2:	461a      	mov	r2, r3
 80257d4:	f7dc f92e 	bl	8001a34 <_lseek>
 80257d8:	1c43      	adds	r3, r0, #1
 80257da:	d102      	bne.n	80257e2 <_lseek_r+0x1e>
 80257dc:	682b      	ldr	r3, [r5, #0]
 80257de:	b103      	cbz	r3, 80257e2 <_lseek_r+0x1e>
 80257e0:	6023      	str	r3, [r4, #0]
 80257e2:	bd38      	pop	{r3, r4, r5, pc}
 80257e4:	24026f98 	.word	0x24026f98

080257e8 <_read_r>:
 80257e8:	b538      	push	{r3, r4, r5, lr}
 80257ea:	4d07      	ldr	r5, [pc, #28]	@ (8025808 <_read_r+0x20>)
 80257ec:	4604      	mov	r4, r0
 80257ee:	4608      	mov	r0, r1
 80257f0:	4611      	mov	r1, r2
 80257f2:	2200      	movs	r2, #0
 80257f4:	602a      	str	r2, [r5, #0]
 80257f6:	461a      	mov	r2, r3
 80257f8:	f7dc f8f6 	bl	80019e8 <_read>
 80257fc:	1c43      	adds	r3, r0, #1
 80257fe:	d102      	bne.n	8025806 <_read_r+0x1e>
 8025800:	682b      	ldr	r3, [r5, #0]
 8025802:	b103      	cbz	r3, 8025806 <_read_r+0x1e>
 8025804:	6023      	str	r3, [r4, #0]
 8025806:	bd38      	pop	{r3, r4, r5, pc}
 8025808:	24026f98 	.word	0x24026f98

0802580c <_kill_r>:
 802580c:	b538      	push	{r3, r4, r5, lr}
 802580e:	4d07      	ldr	r5, [pc, #28]	@ (802582c <_kill_r+0x20>)
 8025810:	2300      	movs	r3, #0
 8025812:	4604      	mov	r4, r0
 8025814:	4608      	mov	r0, r1
 8025816:	4611      	mov	r1, r2
 8025818:	602b      	str	r3, [r5, #0]
 802581a:	f7dc f8d7 	bl	80019cc <_kill>
 802581e:	1c43      	adds	r3, r0, #1
 8025820:	d102      	bne.n	8025828 <_kill_r+0x1c>
 8025822:	682b      	ldr	r3, [r5, #0]
 8025824:	b103      	cbz	r3, 8025828 <_kill_r+0x1c>
 8025826:	6023      	str	r3, [r4, #0]
 8025828:	bd38      	pop	{r3, r4, r5, pc}
 802582a:	bf00      	nop
 802582c:	24026f98 	.word	0x24026f98

08025830 <_getpid_r>:
 8025830:	f7dc b8ca 	b.w	80019c8 <_getpid>

08025834 <_sbrk_r>:
 8025834:	b538      	push	{r3, r4, r5, lr}
 8025836:	4d06      	ldr	r5, [pc, #24]	@ (8025850 <_sbrk_r+0x1c>)
 8025838:	2300      	movs	r3, #0
 802583a:	4604      	mov	r4, r0
 802583c:	4608      	mov	r0, r1
 802583e:	602b      	str	r3, [r5, #0]
 8025840:	f7dc f8fa 	bl	8001a38 <_sbrk>
 8025844:	1c43      	adds	r3, r0, #1
 8025846:	d102      	bne.n	802584e <_sbrk_r+0x1a>
 8025848:	682b      	ldr	r3, [r5, #0]
 802584a:	b103      	cbz	r3, 802584e <_sbrk_r+0x1a>
 802584c:	6023      	str	r3, [r4, #0]
 802584e:	bd38      	pop	{r3, r4, r5, pc}
 8025850:	24026f98 	.word	0x24026f98

08025854 <_write_r>:
 8025854:	b538      	push	{r3, r4, r5, lr}
 8025856:	4d07      	ldr	r5, [pc, #28]	@ (8025874 <_write_r+0x20>)
 8025858:	4604      	mov	r4, r0
 802585a:	4608      	mov	r0, r1
 802585c:	4611      	mov	r1, r2
 802585e:	2200      	movs	r2, #0
 8025860:	602a      	str	r2, [r5, #0]
 8025862:	461a      	mov	r2, r3
 8025864:	f7dc f8ce 	bl	8001a04 <_write>
 8025868:	1c43      	adds	r3, r0, #1
 802586a:	d102      	bne.n	8025872 <_write_r+0x1e>
 802586c:	682b      	ldr	r3, [r5, #0]
 802586e:	b103      	cbz	r3, 8025872 <_write_r+0x1e>
 8025870:	6023      	str	r3, [r4, #0]
 8025872:	bd38      	pop	{r3, r4, r5, pc}
 8025874:	24026f98 	.word	0x24026f98

08025878 <__errno>:
 8025878:	4b01      	ldr	r3, [pc, #4]	@ (8025880 <__errno+0x8>)
 802587a:	6818      	ldr	r0, [r3, #0]
 802587c:	4770      	bx	lr
 802587e:	bf00      	nop
 8025880:	240000e8 	.word	0x240000e8

08025884 <__libc_init_array>:
 8025884:	b570      	push	{r4, r5, r6, lr}
 8025886:	4d0d      	ldr	r5, [pc, #52]	@ (80258bc <__libc_init_array+0x38>)
 8025888:	4c0d      	ldr	r4, [pc, #52]	@ (80258c0 <__libc_init_array+0x3c>)
 802588a:	1b64      	subs	r4, r4, r5
 802588c:	10a4      	asrs	r4, r4, #2
 802588e:	2600      	movs	r6, #0
 8025890:	42a6      	cmp	r6, r4
 8025892:	d109      	bne.n	80258a8 <__libc_init_array+0x24>
 8025894:	4d0b      	ldr	r5, [pc, #44]	@ (80258c4 <__libc_init_array+0x40>)
 8025896:	4c0c      	ldr	r4, [pc, #48]	@ (80258c8 <__libc_init_array+0x44>)
 8025898:	f000 fcd0 	bl	802623c <_init>
 802589c:	1b64      	subs	r4, r4, r5
 802589e:	10a4      	asrs	r4, r4, #2
 80258a0:	2600      	movs	r6, #0
 80258a2:	42a6      	cmp	r6, r4
 80258a4:	d105      	bne.n	80258b2 <__libc_init_array+0x2e>
 80258a6:	bd70      	pop	{r4, r5, r6, pc}
 80258a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80258ac:	4798      	blx	r3
 80258ae:	3601      	adds	r6, #1
 80258b0:	e7ee      	b.n	8025890 <__libc_init_array+0xc>
 80258b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80258b6:	4798      	blx	r3
 80258b8:	3601      	adds	r6, #1
 80258ba:	e7f2      	b.n	80258a2 <__libc_init_array+0x1e>
 80258bc:	0802a2ac 	.word	0x0802a2ac
 80258c0:	0802a2ac 	.word	0x0802a2ac
 80258c4:	0802a2ac 	.word	0x0802a2ac
 80258c8:	0802a2c8 	.word	0x0802a2c8

080258cc <__retarget_lock_init_recursive>:
 80258cc:	4770      	bx	lr

080258ce <__retarget_lock_acquire_recursive>:
 80258ce:	4770      	bx	lr

080258d0 <__retarget_lock_release_recursive>:
 80258d0:	4770      	bx	lr

080258d2 <memcpy>:
 80258d2:	440a      	add	r2, r1
 80258d4:	4291      	cmp	r1, r2
 80258d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80258da:	d100      	bne.n	80258de <memcpy+0xc>
 80258dc:	4770      	bx	lr
 80258de:	b510      	push	{r4, lr}
 80258e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80258e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80258e8:	4291      	cmp	r1, r2
 80258ea:	d1f9      	bne.n	80258e0 <memcpy+0xe>
 80258ec:	bd10      	pop	{r4, pc}
	...

080258f0 <__register_exitproc>:
 80258f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80258f4:	4d27      	ldr	r5, [pc, #156]	@ (8025994 <__register_exitproc+0xa4>)
 80258f6:	4607      	mov	r7, r0
 80258f8:	6828      	ldr	r0, [r5, #0]
 80258fa:	4691      	mov	r9, r2
 80258fc:	460e      	mov	r6, r1
 80258fe:	4698      	mov	r8, r3
 8025900:	f7ff ffe5 	bl	80258ce <__retarget_lock_acquire_recursive>
 8025904:	4a24      	ldr	r2, [pc, #144]	@ (8025998 <__register_exitproc+0xa8>)
 8025906:	6814      	ldr	r4, [r2, #0]
 8025908:	b93c      	cbnz	r4, 802591a <__register_exitproc+0x2a>
 802590a:	4b24      	ldr	r3, [pc, #144]	@ (802599c <__register_exitproc+0xac>)
 802590c:	6013      	str	r3, [r2, #0]
 802590e:	4a24      	ldr	r2, [pc, #144]	@ (80259a0 <__register_exitproc+0xb0>)
 8025910:	b112      	cbz	r2, 8025918 <__register_exitproc+0x28>
 8025912:	6812      	ldr	r2, [r2, #0]
 8025914:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8025918:	4c20      	ldr	r4, [pc, #128]	@ (802599c <__register_exitproc+0xac>)
 802591a:	6863      	ldr	r3, [r4, #4]
 802591c:	2b1f      	cmp	r3, #31
 802591e:	dd06      	ble.n	802592e <__register_exitproc+0x3e>
 8025920:	6828      	ldr	r0, [r5, #0]
 8025922:	f7ff ffd5 	bl	80258d0 <__retarget_lock_release_recursive>
 8025926:	f04f 30ff 	mov.w	r0, #4294967295
 802592a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802592e:	b32f      	cbz	r7, 802597c <__register_exitproc+0x8c>
 8025930:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8025934:	b968      	cbnz	r0, 8025952 <__register_exitproc+0x62>
 8025936:	4b1b      	ldr	r3, [pc, #108]	@ (80259a4 <__register_exitproc+0xb4>)
 8025938:	2b00      	cmp	r3, #0
 802593a:	d0f1      	beq.n	8025920 <__register_exitproc+0x30>
 802593c:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8025940:	f7ff fc6e 	bl	8025220 <malloc>
 8025944:	2800      	cmp	r0, #0
 8025946:	d0eb      	beq.n	8025920 <__register_exitproc+0x30>
 8025948:	2300      	movs	r3, #0
 802594a:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 802594e:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8025952:	6863      	ldr	r3, [r4, #4]
 8025954:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8025958:	2201      	movs	r2, #1
 802595a:	409a      	lsls	r2, r3
 802595c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8025960:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8025964:	4313      	orrs	r3, r2
 8025966:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 802596a:	2f02      	cmp	r7, #2
 802596c:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8025970:	bf02      	ittt	eq
 8025972:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 8025976:	4313      	orreq	r3, r2
 8025978:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 802597c:	6863      	ldr	r3, [r4, #4]
 802597e:	6828      	ldr	r0, [r5, #0]
 8025980:	1c5a      	adds	r2, r3, #1
 8025982:	3302      	adds	r3, #2
 8025984:	6062      	str	r2, [r4, #4]
 8025986:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802598a:	f7ff ffa1 	bl	80258d0 <__retarget_lock_release_recursive>
 802598e:	2000      	movs	r0, #0
 8025990:	e7cb      	b.n	802592a <__register_exitproc+0x3a>
 8025992:	bf00      	nop
 8025994:	24000138 	.word	0x24000138
 8025998:	2402702c 	.word	0x2402702c
 802599c:	24026fa0 	.word	0x24026fa0
 80259a0:	08029e0c 	.word	0x08029e0c
 80259a4:	08025221 	.word	0x08025221

080259a8 <_free_r>:
 80259a8:	b538      	push	{r3, r4, r5, lr}
 80259aa:	4605      	mov	r5, r0
 80259ac:	2900      	cmp	r1, #0
 80259ae:	d041      	beq.n	8025a34 <_free_r+0x8c>
 80259b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80259b4:	1f0c      	subs	r4, r1, #4
 80259b6:	2b00      	cmp	r3, #0
 80259b8:	bfb8      	it	lt
 80259ba:	18e4      	addlt	r4, r4, r3
 80259bc:	f7ff fce2 	bl	8025384 <__malloc_lock>
 80259c0:	4a1d      	ldr	r2, [pc, #116]	@ (8025a38 <_free_r+0x90>)
 80259c2:	6813      	ldr	r3, [r2, #0]
 80259c4:	b933      	cbnz	r3, 80259d4 <_free_r+0x2c>
 80259c6:	6063      	str	r3, [r4, #4]
 80259c8:	6014      	str	r4, [r2, #0]
 80259ca:	4628      	mov	r0, r5
 80259cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80259d0:	f7ff bcde 	b.w	8025390 <__malloc_unlock>
 80259d4:	42a3      	cmp	r3, r4
 80259d6:	d908      	bls.n	80259ea <_free_r+0x42>
 80259d8:	6820      	ldr	r0, [r4, #0]
 80259da:	1821      	adds	r1, r4, r0
 80259dc:	428b      	cmp	r3, r1
 80259de:	bf01      	itttt	eq
 80259e0:	6819      	ldreq	r1, [r3, #0]
 80259e2:	685b      	ldreq	r3, [r3, #4]
 80259e4:	1809      	addeq	r1, r1, r0
 80259e6:	6021      	streq	r1, [r4, #0]
 80259e8:	e7ed      	b.n	80259c6 <_free_r+0x1e>
 80259ea:	461a      	mov	r2, r3
 80259ec:	685b      	ldr	r3, [r3, #4]
 80259ee:	b10b      	cbz	r3, 80259f4 <_free_r+0x4c>
 80259f0:	42a3      	cmp	r3, r4
 80259f2:	d9fa      	bls.n	80259ea <_free_r+0x42>
 80259f4:	6811      	ldr	r1, [r2, #0]
 80259f6:	1850      	adds	r0, r2, r1
 80259f8:	42a0      	cmp	r0, r4
 80259fa:	d10b      	bne.n	8025a14 <_free_r+0x6c>
 80259fc:	6820      	ldr	r0, [r4, #0]
 80259fe:	4401      	add	r1, r0
 8025a00:	1850      	adds	r0, r2, r1
 8025a02:	4283      	cmp	r3, r0
 8025a04:	6011      	str	r1, [r2, #0]
 8025a06:	d1e0      	bne.n	80259ca <_free_r+0x22>
 8025a08:	6818      	ldr	r0, [r3, #0]
 8025a0a:	685b      	ldr	r3, [r3, #4]
 8025a0c:	6053      	str	r3, [r2, #4]
 8025a0e:	4408      	add	r0, r1
 8025a10:	6010      	str	r0, [r2, #0]
 8025a12:	e7da      	b.n	80259ca <_free_r+0x22>
 8025a14:	d902      	bls.n	8025a1c <_free_r+0x74>
 8025a16:	230c      	movs	r3, #12
 8025a18:	602b      	str	r3, [r5, #0]
 8025a1a:	e7d6      	b.n	80259ca <_free_r+0x22>
 8025a1c:	6820      	ldr	r0, [r4, #0]
 8025a1e:	1821      	adds	r1, r4, r0
 8025a20:	428b      	cmp	r3, r1
 8025a22:	bf04      	itt	eq
 8025a24:	6819      	ldreq	r1, [r3, #0]
 8025a26:	685b      	ldreq	r3, [r3, #4]
 8025a28:	6063      	str	r3, [r4, #4]
 8025a2a:	bf04      	itt	eq
 8025a2c:	1809      	addeq	r1, r1, r0
 8025a2e:	6021      	streq	r1, [r4, #0]
 8025a30:	6054      	str	r4, [r2, #4]
 8025a32:	e7ca      	b.n	80259ca <_free_r+0x22>
 8025a34:	bd38      	pop	{r3, r4, r5, pc}
 8025a36:	bf00      	nop
 8025a38:	24026e58 	.word	0x24026e58

08025a3c <__sfputc_r>:
 8025a3c:	6893      	ldr	r3, [r2, #8]
 8025a3e:	3b01      	subs	r3, #1
 8025a40:	2b00      	cmp	r3, #0
 8025a42:	b410      	push	{r4}
 8025a44:	6093      	str	r3, [r2, #8]
 8025a46:	da08      	bge.n	8025a5a <__sfputc_r+0x1e>
 8025a48:	6994      	ldr	r4, [r2, #24]
 8025a4a:	42a3      	cmp	r3, r4
 8025a4c:	db01      	blt.n	8025a52 <__sfputc_r+0x16>
 8025a4e:	290a      	cmp	r1, #10
 8025a50:	d103      	bne.n	8025a5a <__sfputc_r+0x1e>
 8025a52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025a56:	f7ff bdc6 	b.w	80255e6 <__swbuf_r>
 8025a5a:	6813      	ldr	r3, [r2, #0]
 8025a5c:	1c58      	adds	r0, r3, #1
 8025a5e:	6010      	str	r0, [r2, #0]
 8025a60:	7019      	strb	r1, [r3, #0]
 8025a62:	4608      	mov	r0, r1
 8025a64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025a68:	4770      	bx	lr

08025a6a <__sfputs_r>:
 8025a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025a6c:	4606      	mov	r6, r0
 8025a6e:	460f      	mov	r7, r1
 8025a70:	4614      	mov	r4, r2
 8025a72:	18d5      	adds	r5, r2, r3
 8025a74:	42ac      	cmp	r4, r5
 8025a76:	d101      	bne.n	8025a7c <__sfputs_r+0x12>
 8025a78:	2000      	movs	r0, #0
 8025a7a:	e007      	b.n	8025a8c <__sfputs_r+0x22>
 8025a7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025a80:	463a      	mov	r2, r7
 8025a82:	4630      	mov	r0, r6
 8025a84:	f7ff ffda 	bl	8025a3c <__sfputc_r>
 8025a88:	1c43      	adds	r3, r0, #1
 8025a8a:	d1f3      	bne.n	8025a74 <__sfputs_r+0xa>
 8025a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025a90 <_vfiprintf_r>:
 8025a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025a94:	460d      	mov	r5, r1
 8025a96:	b09d      	sub	sp, #116	@ 0x74
 8025a98:	4614      	mov	r4, r2
 8025a9a:	4698      	mov	r8, r3
 8025a9c:	4606      	mov	r6, r0
 8025a9e:	b118      	cbz	r0, 8025aa8 <_vfiprintf_r+0x18>
 8025aa0:	6a03      	ldr	r3, [r0, #32]
 8025aa2:	b90b      	cbnz	r3, 8025aa8 <_vfiprintf_r+0x18>
 8025aa4:	f7ff fd14 	bl	80254d0 <__sinit>
 8025aa8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8025aaa:	07d9      	lsls	r1, r3, #31
 8025aac:	d405      	bmi.n	8025aba <_vfiprintf_r+0x2a>
 8025aae:	89ab      	ldrh	r3, [r5, #12]
 8025ab0:	059a      	lsls	r2, r3, #22
 8025ab2:	d402      	bmi.n	8025aba <_vfiprintf_r+0x2a>
 8025ab4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8025ab6:	f7ff ff0a 	bl	80258ce <__retarget_lock_acquire_recursive>
 8025aba:	89ab      	ldrh	r3, [r5, #12]
 8025abc:	071b      	lsls	r3, r3, #28
 8025abe:	d501      	bpl.n	8025ac4 <_vfiprintf_r+0x34>
 8025ac0:	692b      	ldr	r3, [r5, #16]
 8025ac2:	b99b      	cbnz	r3, 8025aec <_vfiprintf_r+0x5c>
 8025ac4:	4629      	mov	r1, r5
 8025ac6:	4630      	mov	r0, r6
 8025ac8:	f7ff fdcc 	bl	8025664 <__swsetup_r>
 8025acc:	b170      	cbz	r0, 8025aec <_vfiprintf_r+0x5c>
 8025ace:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8025ad0:	07dc      	lsls	r4, r3, #31
 8025ad2:	d504      	bpl.n	8025ade <_vfiprintf_r+0x4e>
 8025ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8025ad8:	b01d      	add	sp, #116	@ 0x74
 8025ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025ade:	89ab      	ldrh	r3, [r5, #12]
 8025ae0:	0598      	lsls	r0, r3, #22
 8025ae2:	d4f7      	bmi.n	8025ad4 <_vfiprintf_r+0x44>
 8025ae4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8025ae6:	f7ff fef3 	bl	80258d0 <__retarget_lock_release_recursive>
 8025aea:	e7f3      	b.n	8025ad4 <_vfiprintf_r+0x44>
 8025aec:	2300      	movs	r3, #0
 8025aee:	9309      	str	r3, [sp, #36]	@ 0x24
 8025af0:	2320      	movs	r3, #32
 8025af2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8025af6:	f8cd 800c 	str.w	r8, [sp, #12]
 8025afa:	2330      	movs	r3, #48	@ 0x30
 8025afc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8025cac <_vfiprintf_r+0x21c>
 8025b00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8025b04:	f04f 0901 	mov.w	r9, #1
 8025b08:	4623      	mov	r3, r4
 8025b0a:	469a      	mov	sl, r3
 8025b0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025b10:	b10a      	cbz	r2, 8025b16 <_vfiprintf_r+0x86>
 8025b12:	2a25      	cmp	r2, #37	@ 0x25
 8025b14:	d1f9      	bne.n	8025b0a <_vfiprintf_r+0x7a>
 8025b16:	ebba 0b04 	subs.w	fp, sl, r4
 8025b1a:	d00b      	beq.n	8025b34 <_vfiprintf_r+0xa4>
 8025b1c:	465b      	mov	r3, fp
 8025b1e:	4622      	mov	r2, r4
 8025b20:	4629      	mov	r1, r5
 8025b22:	4630      	mov	r0, r6
 8025b24:	f7ff ffa1 	bl	8025a6a <__sfputs_r>
 8025b28:	3001      	adds	r0, #1
 8025b2a:	f000 80a7 	beq.w	8025c7c <_vfiprintf_r+0x1ec>
 8025b2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025b30:	445a      	add	r2, fp
 8025b32:	9209      	str	r2, [sp, #36]	@ 0x24
 8025b34:	f89a 3000 	ldrb.w	r3, [sl]
 8025b38:	2b00      	cmp	r3, #0
 8025b3a:	f000 809f 	beq.w	8025c7c <_vfiprintf_r+0x1ec>
 8025b3e:	2300      	movs	r3, #0
 8025b40:	f04f 32ff 	mov.w	r2, #4294967295
 8025b44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025b48:	f10a 0a01 	add.w	sl, sl, #1
 8025b4c:	9304      	str	r3, [sp, #16]
 8025b4e:	9307      	str	r3, [sp, #28]
 8025b50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8025b54:	931a      	str	r3, [sp, #104]	@ 0x68
 8025b56:	4654      	mov	r4, sl
 8025b58:	2205      	movs	r2, #5
 8025b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025b5e:	4853      	ldr	r0, [pc, #332]	@ (8025cac <_vfiprintf_r+0x21c>)
 8025b60:	f7da fbbe 	bl	80002e0 <memchr>
 8025b64:	9a04      	ldr	r2, [sp, #16]
 8025b66:	b9d8      	cbnz	r0, 8025ba0 <_vfiprintf_r+0x110>
 8025b68:	06d1      	lsls	r1, r2, #27
 8025b6a:	bf44      	itt	mi
 8025b6c:	2320      	movmi	r3, #32
 8025b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8025b72:	0713      	lsls	r3, r2, #28
 8025b74:	bf44      	itt	mi
 8025b76:	232b      	movmi	r3, #43	@ 0x2b
 8025b78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8025b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8025b80:	2b2a      	cmp	r3, #42	@ 0x2a
 8025b82:	d015      	beq.n	8025bb0 <_vfiprintf_r+0x120>
 8025b84:	9a07      	ldr	r2, [sp, #28]
 8025b86:	4654      	mov	r4, sl
 8025b88:	2000      	movs	r0, #0
 8025b8a:	f04f 0c0a 	mov.w	ip, #10
 8025b8e:	4621      	mov	r1, r4
 8025b90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025b94:	3b30      	subs	r3, #48	@ 0x30
 8025b96:	2b09      	cmp	r3, #9
 8025b98:	d94b      	bls.n	8025c32 <_vfiprintf_r+0x1a2>
 8025b9a:	b1b0      	cbz	r0, 8025bca <_vfiprintf_r+0x13a>
 8025b9c:	9207      	str	r2, [sp, #28]
 8025b9e:	e014      	b.n	8025bca <_vfiprintf_r+0x13a>
 8025ba0:	eba0 0308 	sub.w	r3, r0, r8
 8025ba4:	fa09 f303 	lsl.w	r3, r9, r3
 8025ba8:	4313      	orrs	r3, r2
 8025baa:	9304      	str	r3, [sp, #16]
 8025bac:	46a2      	mov	sl, r4
 8025bae:	e7d2      	b.n	8025b56 <_vfiprintf_r+0xc6>
 8025bb0:	9b03      	ldr	r3, [sp, #12]
 8025bb2:	1d19      	adds	r1, r3, #4
 8025bb4:	681b      	ldr	r3, [r3, #0]
 8025bb6:	9103      	str	r1, [sp, #12]
 8025bb8:	2b00      	cmp	r3, #0
 8025bba:	bfbb      	ittet	lt
 8025bbc:	425b      	neglt	r3, r3
 8025bbe:	f042 0202 	orrlt.w	r2, r2, #2
 8025bc2:	9307      	strge	r3, [sp, #28]
 8025bc4:	9307      	strlt	r3, [sp, #28]
 8025bc6:	bfb8      	it	lt
 8025bc8:	9204      	strlt	r2, [sp, #16]
 8025bca:	7823      	ldrb	r3, [r4, #0]
 8025bcc:	2b2e      	cmp	r3, #46	@ 0x2e
 8025bce:	d10a      	bne.n	8025be6 <_vfiprintf_r+0x156>
 8025bd0:	7863      	ldrb	r3, [r4, #1]
 8025bd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8025bd4:	d132      	bne.n	8025c3c <_vfiprintf_r+0x1ac>
 8025bd6:	9b03      	ldr	r3, [sp, #12]
 8025bd8:	1d1a      	adds	r2, r3, #4
 8025bda:	681b      	ldr	r3, [r3, #0]
 8025bdc:	9203      	str	r2, [sp, #12]
 8025bde:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8025be2:	3402      	adds	r4, #2
 8025be4:	9305      	str	r3, [sp, #20]
 8025be6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8025cbc <_vfiprintf_r+0x22c>
 8025bea:	7821      	ldrb	r1, [r4, #0]
 8025bec:	2203      	movs	r2, #3
 8025bee:	4650      	mov	r0, sl
 8025bf0:	f7da fb76 	bl	80002e0 <memchr>
 8025bf4:	b138      	cbz	r0, 8025c06 <_vfiprintf_r+0x176>
 8025bf6:	9b04      	ldr	r3, [sp, #16]
 8025bf8:	eba0 000a 	sub.w	r0, r0, sl
 8025bfc:	2240      	movs	r2, #64	@ 0x40
 8025bfe:	4082      	lsls	r2, r0
 8025c00:	4313      	orrs	r3, r2
 8025c02:	3401      	adds	r4, #1
 8025c04:	9304      	str	r3, [sp, #16]
 8025c06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025c0a:	4829      	ldr	r0, [pc, #164]	@ (8025cb0 <_vfiprintf_r+0x220>)
 8025c0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8025c10:	2206      	movs	r2, #6
 8025c12:	f7da fb65 	bl	80002e0 <memchr>
 8025c16:	2800      	cmp	r0, #0
 8025c18:	d03f      	beq.n	8025c9a <_vfiprintf_r+0x20a>
 8025c1a:	4b26      	ldr	r3, [pc, #152]	@ (8025cb4 <_vfiprintf_r+0x224>)
 8025c1c:	bb1b      	cbnz	r3, 8025c66 <_vfiprintf_r+0x1d6>
 8025c1e:	9b03      	ldr	r3, [sp, #12]
 8025c20:	3307      	adds	r3, #7
 8025c22:	f023 0307 	bic.w	r3, r3, #7
 8025c26:	3308      	adds	r3, #8
 8025c28:	9303      	str	r3, [sp, #12]
 8025c2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025c2c:	443b      	add	r3, r7
 8025c2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8025c30:	e76a      	b.n	8025b08 <_vfiprintf_r+0x78>
 8025c32:	fb0c 3202 	mla	r2, ip, r2, r3
 8025c36:	460c      	mov	r4, r1
 8025c38:	2001      	movs	r0, #1
 8025c3a:	e7a8      	b.n	8025b8e <_vfiprintf_r+0xfe>
 8025c3c:	2300      	movs	r3, #0
 8025c3e:	3401      	adds	r4, #1
 8025c40:	9305      	str	r3, [sp, #20]
 8025c42:	4619      	mov	r1, r3
 8025c44:	f04f 0c0a 	mov.w	ip, #10
 8025c48:	4620      	mov	r0, r4
 8025c4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025c4e:	3a30      	subs	r2, #48	@ 0x30
 8025c50:	2a09      	cmp	r2, #9
 8025c52:	d903      	bls.n	8025c5c <_vfiprintf_r+0x1cc>
 8025c54:	2b00      	cmp	r3, #0
 8025c56:	d0c6      	beq.n	8025be6 <_vfiprintf_r+0x156>
 8025c58:	9105      	str	r1, [sp, #20]
 8025c5a:	e7c4      	b.n	8025be6 <_vfiprintf_r+0x156>
 8025c5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8025c60:	4604      	mov	r4, r0
 8025c62:	2301      	movs	r3, #1
 8025c64:	e7f0      	b.n	8025c48 <_vfiprintf_r+0x1b8>
 8025c66:	ab03      	add	r3, sp, #12
 8025c68:	9300      	str	r3, [sp, #0]
 8025c6a:	462a      	mov	r2, r5
 8025c6c:	4b12      	ldr	r3, [pc, #72]	@ (8025cb8 <_vfiprintf_r+0x228>)
 8025c6e:	a904      	add	r1, sp, #16
 8025c70:	4630      	mov	r0, r6
 8025c72:	f3af 8000 	nop.w
 8025c76:	4607      	mov	r7, r0
 8025c78:	1c78      	adds	r0, r7, #1
 8025c7a:	d1d6      	bne.n	8025c2a <_vfiprintf_r+0x19a>
 8025c7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8025c7e:	07d9      	lsls	r1, r3, #31
 8025c80:	d405      	bmi.n	8025c8e <_vfiprintf_r+0x1fe>
 8025c82:	89ab      	ldrh	r3, [r5, #12]
 8025c84:	059a      	lsls	r2, r3, #22
 8025c86:	d402      	bmi.n	8025c8e <_vfiprintf_r+0x1fe>
 8025c88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8025c8a:	f7ff fe21 	bl	80258d0 <__retarget_lock_release_recursive>
 8025c8e:	89ab      	ldrh	r3, [r5, #12]
 8025c90:	065b      	lsls	r3, r3, #25
 8025c92:	f53f af1f 	bmi.w	8025ad4 <_vfiprintf_r+0x44>
 8025c96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025c98:	e71e      	b.n	8025ad8 <_vfiprintf_r+0x48>
 8025c9a:	ab03      	add	r3, sp, #12
 8025c9c:	9300      	str	r3, [sp, #0]
 8025c9e:	462a      	mov	r2, r5
 8025ca0:	4b05      	ldr	r3, [pc, #20]	@ (8025cb8 <_vfiprintf_r+0x228>)
 8025ca2:	a904      	add	r1, sp, #16
 8025ca4:	4630      	mov	r0, r6
 8025ca6:	f000 f879 	bl	8025d9c <_printf_i>
 8025caa:	e7e4      	b.n	8025c76 <_vfiprintf_r+0x1e6>
 8025cac:	08029e10 	.word	0x08029e10
 8025cb0:	08029e1a 	.word	0x08029e1a
 8025cb4:	00000000 	.word	0x00000000
 8025cb8:	08025a6b 	.word	0x08025a6b
 8025cbc:	08029e16 	.word	0x08029e16

08025cc0 <_printf_common>:
 8025cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025cc4:	4616      	mov	r6, r2
 8025cc6:	4698      	mov	r8, r3
 8025cc8:	688a      	ldr	r2, [r1, #8]
 8025cca:	690b      	ldr	r3, [r1, #16]
 8025ccc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8025cd0:	4293      	cmp	r3, r2
 8025cd2:	bfb8      	it	lt
 8025cd4:	4613      	movlt	r3, r2
 8025cd6:	6033      	str	r3, [r6, #0]
 8025cd8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8025cdc:	4607      	mov	r7, r0
 8025cde:	460c      	mov	r4, r1
 8025ce0:	b10a      	cbz	r2, 8025ce6 <_printf_common+0x26>
 8025ce2:	3301      	adds	r3, #1
 8025ce4:	6033      	str	r3, [r6, #0]
 8025ce6:	6823      	ldr	r3, [r4, #0]
 8025ce8:	0699      	lsls	r1, r3, #26
 8025cea:	bf42      	ittt	mi
 8025cec:	6833      	ldrmi	r3, [r6, #0]
 8025cee:	3302      	addmi	r3, #2
 8025cf0:	6033      	strmi	r3, [r6, #0]
 8025cf2:	6825      	ldr	r5, [r4, #0]
 8025cf4:	f015 0506 	ands.w	r5, r5, #6
 8025cf8:	d106      	bne.n	8025d08 <_printf_common+0x48>
 8025cfa:	f104 0a19 	add.w	sl, r4, #25
 8025cfe:	68e3      	ldr	r3, [r4, #12]
 8025d00:	6832      	ldr	r2, [r6, #0]
 8025d02:	1a9b      	subs	r3, r3, r2
 8025d04:	42ab      	cmp	r3, r5
 8025d06:	dc26      	bgt.n	8025d56 <_printf_common+0x96>
 8025d08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8025d0c:	6822      	ldr	r2, [r4, #0]
 8025d0e:	3b00      	subs	r3, #0
 8025d10:	bf18      	it	ne
 8025d12:	2301      	movne	r3, #1
 8025d14:	0692      	lsls	r2, r2, #26
 8025d16:	d42b      	bmi.n	8025d70 <_printf_common+0xb0>
 8025d18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8025d1c:	4641      	mov	r1, r8
 8025d1e:	4638      	mov	r0, r7
 8025d20:	47c8      	blx	r9
 8025d22:	3001      	adds	r0, #1
 8025d24:	d01e      	beq.n	8025d64 <_printf_common+0xa4>
 8025d26:	6823      	ldr	r3, [r4, #0]
 8025d28:	6922      	ldr	r2, [r4, #16]
 8025d2a:	f003 0306 	and.w	r3, r3, #6
 8025d2e:	2b04      	cmp	r3, #4
 8025d30:	bf02      	ittt	eq
 8025d32:	68e5      	ldreq	r5, [r4, #12]
 8025d34:	6833      	ldreq	r3, [r6, #0]
 8025d36:	1aed      	subeq	r5, r5, r3
 8025d38:	68a3      	ldr	r3, [r4, #8]
 8025d3a:	bf0c      	ite	eq
 8025d3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025d40:	2500      	movne	r5, #0
 8025d42:	4293      	cmp	r3, r2
 8025d44:	bfc4      	itt	gt
 8025d46:	1a9b      	subgt	r3, r3, r2
 8025d48:	18ed      	addgt	r5, r5, r3
 8025d4a:	2600      	movs	r6, #0
 8025d4c:	341a      	adds	r4, #26
 8025d4e:	42b5      	cmp	r5, r6
 8025d50:	d11a      	bne.n	8025d88 <_printf_common+0xc8>
 8025d52:	2000      	movs	r0, #0
 8025d54:	e008      	b.n	8025d68 <_printf_common+0xa8>
 8025d56:	2301      	movs	r3, #1
 8025d58:	4652      	mov	r2, sl
 8025d5a:	4641      	mov	r1, r8
 8025d5c:	4638      	mov	r0, r7
 8025d5e:	47c8      	blx	r9
 8025d60:	3001      	adds	r0, #1
 8025d62:	d103      	bne.n	8025d6c <_printf_common+0xac>
 8025d64:	f04f 30ff 	mov.w	r0, #4294967295
 8025d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025d6c:	3501      	adds	r5, #1
 8025d6e:	e7c6      	b.n	8025cfe <_printf_common+0x3e>
 8025d70:	18e1      	adds	r1, r4, r3
 8025d72:	1c5a      	adds	r2, r3, #1
 8025d74:	2030      	movs	r0, #48	@ 0x30
 8025d76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8025d7a:	4422      	add	r2, r4
 8025d7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8025d80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8025d84:	3302      	adds	r3, #2
 8025d86:	e7c7      	b.n	8025d18 <_printf_common+0x58>
 8025d88:	2301      	movs	r3, #1
 8025d8a:	4622      	mov	r2, r4
 8025d8c:	4641      	mov	r1, r8
 8025d8e:	4638      	mov	r0, r7
 8025d90:	47c8      	blx	r9
 8025d92:	3001      	adds	r0, #1
 8025d94:	d0e6      	beq.n	8025d64 <_printf_common+0xa4>
 8025d96:	3601      	adds	r6, #1
 8025d98:	e7d9      	b.n	8025d4e <_printf_common+0x8e>
	...

08025d9c <_printf_i>:
 8025d9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8025da0:	7e0f      	ldrb	r7, [r1, #24]
 8025da2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8025da4:	2f78      	cmp	r7, #120	@ 0x78
 8025da6:	4691      	mov	r9, r2
 8025da8:	4680      	mov	r8, r0
 8025daa:	460c      	mov	r4, r1
 8025dac:	469a      	mov	sl, r3
 8025dae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8025db2:	d807      	bhi.n	8025dc4 <_printf_i+0x28>
 8025db4:	2f62      	cmp	r7, #98	@ 0x62
 8025db6:	d80a      	bhi.n	8025dce <_printf_i+0x32>
 8025db8:	2f00      	cmp	r7, #0
 8025dba:	f000 80d2 	beq.w	8025f62 <_printf_i+0x1c6>
 8025dbe:	2f58      	cmp	r7, #88	@ 0x58
 8025dc0:	f000 80b9 	beq.w	8025f36 <_printf_i+0x19a>
 8025dc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8025dc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8025dcc:	e03a      	b.n	8025e44 <_printf_i+0xa8>
 8025dce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8025dd2:	2b15      	cmp	r3, #21
 8025dd4:	d8f6      	bhi.n	8025dc4 <_printf_i+0x28>
 8025dd6:	a101      	add	r1, pc, #4	@ (adr r1, 8025ddc <_printf_i+0x40>)
 8025dd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8025ddc:	08025e35 	.word	0x08025e35
 8025de0:	08025e49 	.word	0x08025e49
 8025de4:	08025dc5 	.word	0x08025dc5
 8025de8:	08025dc5 	.word	0x08025dc5
 8025dec:	08025dc5 	.word	0x08025dc5
 8025df0:	08025dc5 	.word	0x08025dc5
 8025df4:	08025e49 	.word	0x08025e49
 8025df8:	08025dc5 	.word	0x08025dc5
 8025dfc:	08025dc5 	.word	0x08025dc5
 8025e00:	08025dc5 	.word	0x08025dc5
 8025e04:	08025dc5 	.word	0x08025dc5
 8025e08:	08025f49 	.word	0x08025f49
 8025e0c:	08025e73 	.word	0x08025e73
 8025e10:	08025f03 	.word	0x08025f03
 8025e14:	08025dc5 	.word	0x08025dc5
 8025e18:	08025dc5 	.word	0x08025dc5
 8025e1c:	08025f6b 	.word	0x08025f6b
 8025e20:	08025dc5 	.word	0x08025dc5
 8025e24:	08025e73 	.word	0x08025e73
 8025e28:	08025dc5 	.word	0x08025dc5
 8025e2c:	08025dc5 	.word	0x08025dc5
 8025e30:	08025f0b 	.word	0x08025f0b
 8025e34:	6833      	ldr	r3, [r6, #0]
 8025e36:	1d1a      	adds	r2, r3, #4
 8025e38:	681b      	ldr	r3, [r3, #0]
 8025e3a:	6032      	str	r2, [r6, #0]
 8025e3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8025e40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8025e44:	2301      	movs	r3, #1
 8025e46:	e09d      	b.n	8025f84 <_printf_i+0x1e8>
 8025e48:	6833      	ldr	r3, [r6, #0]
 8025e4a:	6820      	ldr	r0, [r4, #0]
 8025e4c:	1d19      	adds	r1, r3, #4
 8025e4e:	6031      	str	r1, [r6, #0]
 8025e50:	0606      	lsls	r6, r0, #24
 8025e52:	d501      	bpl.n	8025e58 <_printf_i+0xbc>
 8025e54:	681d      	ldr	r5, [r3, #0]
 8025e56:	e003      	b.n	8025e60 <_printf_i+0xc4>
 8025e58:	0645      	lsls	r5, r0, #25
 8025e5a:	d5fb      	bpl.n	8025e54 <_printf_i+0xb8>
 8025e5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8025e60:	2d00      	cmp	r5, #0
 8025e62:	da03      	bge.n	8025e6c <_printf_i+0xd0>
 8025e64:	232d      	movs	r3, #45	@ 0x2d
 8025e66:	426d      	negs	r5, r5
 8025e68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8025e6c:	4859      	ldr	r0, [pc, #356]	@ (8025fd4 <_printf_i+0x238>)
 8025e6e:	230a      	movs	r3, #10
 8025e70:	e011      	b.n	8025e96 <_printf_i+0xfa>
 8025e72:	6821      	ldr	r1, [r4, #0]
 8025e74:	6833      	ldr	r3, [r6, #0]
 8025e76:	0608      	lsls	r0, r1, #24
 8025e78:	f853 5b04 	ldr.w	r5, [r3], #4
 8025e7c:	d402      	bmi.n	8025e84 <_printf_i+0xe8>
 8025e7e:	0649      	lsls	r1, r1, #25
 8025e80:	bf48      	it	mi
 8025e82:	b2ad      	uxthmi	r5, r5
 8025e84:	2f6f      	cmp	r7, #111	@ 0x6f
 8025e86:	4853      	ldr	r0, [pc, #332]	@ (8025fd4 <_printf_i+0x238>)
 8025e88:	6033      	str	r3, [r6, #0]
 8025e8a:	bf14      	ite	ne
 8025e8c:	230a      	movne	r3, #10
 8025e8e:	2308      	moveq	r3, #8
 8025e90:	2100      	movs	r1, #0
 8025e92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8025e96:	6866      	ldr	r6, [r4, #4]
 8025e98:	60a6      	str	r6, [r4, #8]
 8025e9a:	2e00      	cmp	r6, #0
 8025e9c:	bfa2      	ittt	ge
 8025e9e:	6821      	ldrge	r1, [r4, #0]
 8025ea0:	f021 0104 	bicge.w	r1, r1, #4
 8025ea4:	6021      	strge	r1, [r4, #0]
 8025ea6:	b90d      	cbnz	r5, 8025eac <_printf_i+0x110>
 8025ea8:	2e00      	cmp	r6, #0
 8025eaa:	d04b      	beq.n	8025f44 <_printf_i+0x1a8>
 8025eac:	4616      	mov	r6, r2
 8025eae:	fbb5 f1f3 	udiv	r1, r5, r3
 8025eb2:	fb03 5711 	mls	r7, r3, r1, r5
 8025eb6:	5dc7      	ldrb	r7, [r0, r7]
 8025eb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8025ebc:	462f      	mov	r7, r5
 8025ebe:	42bb      	cmp	r3, r7
 8025ec0:	460d      	mov	r5, r1
 8025ec2:	d9f4      	bls.n	8025eae <_printf_i+0x112>
 8025ec4:	2b08      	cmp	r3, #8
 8025ec6:	d10b      	bne.n	8025ee0 <_printf_i+0x144>
 8025ec8:	6823      	ldr	r3, [r4, #0]
 8025eca:	07df      	lsls	r7, r3, #31
 8025ecc:	d508      	bpl.n	8025ee0 <_printf_i+0x144>
 8025ece:	6923      	ldr	r3, [r4, #16]
 8025ed0:	6861      	ldr	r1, [r4, #4]
 8025ed2:	4299      	cmp	r1, r3
 8025ed4:	bfde      	ittt	le
 8025ed6:	2330      	movle	r3, #48	@ 0x30
 8025ed8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8025edc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8025ee0:	1b92      	subs	r2, r2, r6
 8025ee2:	6122      	str	r2, [r4, #16]
 8025ee4:	f8cd a000 	str.w	sl, [sp]
 8025ee8:	464b      	mov	r3, r9
 8025eea:	aa03      	add	r2, sp, #12
 8025eec:	4621      	mov	r1, r4
 8025eee:	4640      	mov	r0, r8
 8025ef0:	f7ff fee6 	bl	8025cc0 <_printf_common>
 8025ef4:	3001      	adds	r0, #1
 8025ef6:	d14a      	bne.n	8025f8e <_printf_i+0x1f2>
 8025ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8025efc:	b004      	add	sp, #16
 8025efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025f02:	6823      	ldr	r3, [r4, #0]
 8025f04:	f043 0320 	orr.w	r3, r3, #32
 8025f08:	6023      	str	r3, [r4, #0]
 8025f0a:	4833      	ldr	r0, [pc, #204]	@ (8025fd8 <_printf_i+0x23c>)
 8025f0c:	2778      	movs	r7, #120	@ 0x78
 8025f0e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8025f12:	6823      	ldr	r3, [r4, #0]
 8025f14:	6831      	ldr	r1, [r6, #0]
 8025f16:	061f      	lsls	r7, r3, #24
 8025f18:	f851 5b04 	ldr.w	r5, [r1], #4
 8025f1c:	d402      	bmi.n	8025f24 <_printf_i+0x188>
 8025f1e:	065f      	lsls	r7, r3, #25
 8025f20:	bf48      	it	mi
 8025f22:	b2ad      	uxthmi	r5, r5
 8025f24:	6031      	str	r1, [r6, #0]
 8025f26:	07d9      	lsls	r1, r3, #31
 8025f28:	bf44      	itt	mi
 8025f2a:	f043 0320 	orrmi.w	r3, r3, #32
 8025f2e:	6023      	strmi	r3, [r4, #0]
 8025f30:	b11d      	cbz	r5, 8025f3a <_printf_i+0x19e>
 8025f32:	2310      	movs	r3, #16
 8025f34:	e7ac      	b.n	8025e90 <_printf_i+0xf4>
 8025f36:	4827      	ldr	r0, [pc, #156]	@ (8025fd4 <_printf_i+0x238>)
 8025f38:	e7e9      	b.n	8025f0e <_printf_i+0x172>
 8025f3a:	6823      	ldr	r3, [r4, #0]
 8025f3c:	f023 0320 	bic.w	r3, r3, #32
 8025f40:	6023      	str	r3, [r4, #0]
 8025f42:	e7f6      	b.n	8025f32 <_printf_i+0x196>
 8025f44:	4616      	mov	r6, r2
 8025f46:	e7bd      	b.n	8025ec4 <_printf_i+0x128>
 8025f48:	6833      	ldr	r3, [r6, #0]
 8025f4a:	6825      	ldr	r5, [r4, #0]
 8025f4c:	6961      	ldr	r1, [r4, #20]
 8025f4e:	1d18      	adds	r0, r3, #4
 8025f50:	6030      	str	r0, [r6, #0]
 8025f52:	062e      	lsls	r6, r5, #24
 8025f54:	681b      	ldr	r3, [r3, #0]
 8025f56:	d501      	bpl.n	8025f5c <_printf_i+0x1c0>
 8025f58:	6019      	str	r1, [r3, #0]
 8025f5a:	e002      	b.n	8025f62 <_printf_i+0x1c6>
 8025f5c:	0668      	lsls	r0, r5, #25
 8025f5e:	d5fb      	bpl.n	8025f58 <_printf_i+0x1bc>
 8025f60:	8019      	strh	r1, [r3, #0]
 8025f62:	2300      	movs	r3, #0
 8025f64:	6123      	str	r3, [r4, #16]
 8025f66:	4616      	mov	r6, r2
 8025f68:	e7bc      	b.n	8025ee4 <_printf_i+0x148>
 8025f6a:	6833      	ldr	r3, [r6, #0]
 8025f6c:	1d1a      	adds	r2, r3, #4
 8025f6e:	6032      	str	r2, [r6, #0]
 8025f70:	681e      	ldr	r6, [r3, #0]
 8025f72:	6862      	ldr	r2, [r4, #4]
 8025f74:	2100      	movs	r1, #0
 8025f76:	4630      	mov	r0, r6
 8025f78:	f7da f9b2 	bl	80002e0 <memchr>
 8025f7c:	b108      	cbz	r0, 8025f82 <_printf_i+0x1e6>
 8025f7e:	1b80      	subs	r0, r0, r6
 8025f80:	6060      	str	r0, [r4, #4]
 8025f82:	6863      	ldr	r3, [r4, #4]
 8025f84:	6123      	str	r3, [r4, #16]
 8025f86:	2300      	movs	r3, #0
 8025f88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8025f8c:	e7aa      	b.n	8025ee4 <_printf_i+0x148>
 8025f8e:	6923      	ldr	r3, [r4, #16]
 8025f90:	4632      	mov	r2, r6
 8025f92:	4649      	mov	r1, r9
 8025f94:	4640      	mov	r0, r8
 8025f96:	47d0      	blx	sl
 8025f98:	3001      	adds	r0, #1
 8025f9a:	d0ad      	beq.n	8025ef8 <_printf_i+0x15c>
 8025f9c:	6823      	ldr	r3, [r4, #0]
 8025f9e:	079b      	lsls	r3, r3, #30
 8025fa0:	d413      	bmi.n	8025fca <_printf_i+0x22e>
 8025fa2:	68e0      	ldr	r0, [r4, #12]
 8025fa4:	9b03      	ldr	r3, [sp, #12]
 8025fa6:	4298      	cmp	r0, r3
 8025fa8:	bfb8      	it	lt
 8025faa:	4618      	movlt	r0, r3
 8025fac:	e7a6      	b.n	8025efc <_printf_i+0x160>
 8025fae:	2301      	movs	r3, #1
 8025fb0:	4632      	mov	r2, r6
 8025fb2:	4649      	mov	r1, r9
 8025fb4:	4640      	mov	r0, r8
 8025fb6:	47d0      	blx	sl
 8025fb8:	3001      	adds	r0, #1
 8025fba:	d09d      	beq.n	8025ef8 <_printf_i+0x15c>
 8025fbc:	3501      	adds	r5, #1
 8025fbe:	68e3      	ldr	r3, [r4, #12]
 8025fc0:	9903      	ldr	r1, [sp, #12]
 8025fc2:	1a5b      	subs	r3, r3, r1
 8025fc4:	42ab      	cmp	r3, r5
 8025fc6:	dcf2      	bgt.n	8025fae <_printf_i+0x212>
 8025fc8:	e7eb      	b.n	8025fa2 <_printf_i+0x206>
 8025fca:	2500      	movs	r5, #0
 8025fcc:	f104 0619 	add.w	r6, r4, #25
 8025fd0:	e7f5      	b.n	8025fbe <_printf_i+0x222>
 8025fd2:	bf00      	nop
 8025fd4:	08029e21 	.word	0x08029e21
 8025fd8:	08029e32 	.word	0x08029e32

08025fdc <__sflush_r>:
 8025fdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8025fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025fe4:	0716      	lsls	r6, r2, #28
 8025fe6:	4605      	mov	r5, r0
 8025fe8:	460c      	mov	r4, r1
 8025fea:	d454      	bmi.n	8026096 <__sflush_r+0xba>
 8025fec:	684b      	ldr	r3, [r1, #4]
 8025fee:	2b00      	cmp	r3, #0
 8025ff0:	dc02      	bgt.n	8025ff8 <__sflush_r+0x1c>
 8025ff2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8025ff4:	2b00      	cmp	r3, #0
 8025ff6:	dd48      	ble.n	802608a <__sflush_r+0xae>
 8025ff8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8025ffa:	2e00      	cmp	r6, #0
 8025ffc:	d045      	beq.n	802608a <__sflush_r+0xae>
 8025ffe:	2300      	movs	r3, #0
 8026000:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8026004:	682f      	ldr	r7, [r5, #0]
 8026006:	6a21      	ldr	r1, [r4, #32]
 8026008:	602b      	str	r3, [r5, #0]
 802600a:	d030      	beq.n	802606e <__sflush_r+0x92>
 802600c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802600e:	89a3      	ldrh	r3, [r4, #12]
 8026010:	0759      	lsls	r1, r3, #29
 8026012:	d505      	bpl.n	8026020 <__sflush_r+0x44>
 8026014:	6863      	ldr	r3, [r4, #4]
 8026016:	1ad2      	subs	r2, r2, r3
 8026018:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802601a:	b10b      	cbz	r3, 8026020 <__sflush_r+0x44>
 802601c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802601e:	1ad2      	subs	r2, r2, r3
 8026020:	2300      	movs	r3, #0
 8026022:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8026024:	6a21      	ldr	r1, [r4, #32]
 8026026:	4628      	mov	r0, r5
 8026028:	47b0      	blx	r6
 802602a:	1c43      	adds	r3, r0, #1
 802602c:	89a3      	ldrh	r3, [r4, #12]
 802602e:	d106      	bne.n	802603e <__sflush_r+0x62>
 8026030:	6829      	ldr	r1, [r5, #0]
 8026032:	291d      	cmp	r1, #29
 8026034:	d82b      	bhi.n	802608e <__sflush_r+0xb2>
 8026036:	4a2a      	ldr	r2, [pc, #168]	@ (80260e0 <__sflush_r+0x104>)
 8026038:	410a      	asrs	r2, r1
 802603a:	07d6      	lsls	r6, r2, #31
 802603c:	d427      	bmi.n	802608e <__sflush_r+0xb2>
 802603e:	2200      	movs	r2, #0
 8026040:	6062      	str	r2, [r4, #4]
 8026042:	04d9      	lsls	r1, r3, #19
 8026044:	6922      	ldr	r2, [r4, #16]
 8026046:	6022      	str	r2, [r4, #0]
 8026048:	d504      	bpl.n	8026054 <__sflush_r+0x78>
 802604a:	1c42      	adds	r2, r0, #1
 802604c:	d101      	bne.n	8026052 <__sflush_r+0x76>
 802604e:	682b      	ldr	r3, [r5, #0]
 8026050:	b903      	cbnz	r3, 8026054 <__sflush_r+0x78>
 8026052:	6560      	str	r0, [r4, #84]	@ 0x54
 8026054:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026056:	602f      	str	r7, [r5, #0]
 8026058:	b1b9      	cbz	r1, 802608a <__sflush_r+0xae>
 802605a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802605e:	4299      	cmp	r1, r3
 8026060:	d002      	beq.n	8026068 <__sflush_r+0x8c>
 8026062:	4628      	mov	r0, r5
 8026064:	f7ff fca0 	bl	80259a8 <_free_r>
 8026068:	2300      	movs	r3, #0
 802606a:	6363      	str	r3, [r4, #52]	@ 0x34
 802606c:	e00d      	b.n	802608a <__sflush_r+0xae>
 802606e:	2301      	movs	r3, #1
 8026070:	4628      	mov	r0, r5
 8026072:	47b0      	blx	r6
 8026074:	4602      	mov	r2, r0
 8026076:	1c50      	adds	r0, r2, #1
 8026078:	d1c9      	bne.n	802600e <__sflush_r+0x32>
 802607a:	682b      	ldr	r3, [r5, #0]
 802607c:	2b00      	cmp	r3, #0
 802607e:	d0c6      	beq.n	802600e <__sflush_r+0x32>
 8026080:	2b1d      	cmp	r3, #29
 8026082:	d001      	beq.n	8026088 <__sflush_r+0xac>
 8026084:	2b16      	cmp	r3, #22
 8026086:	d11e      	bne.n	80260c6 <__sflush_r+0xea>
 8026088:	602f      	str	r7, [r5, #0]
 802608a:	2000      	movs	r0, #0
 802608c:	e022      	b.n	80260d4 <__sflush_r+0xf8>
 802608e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8026092:	b21b      	sxth	r3, r3
 8026094:	e01b      	b.n	80260ce <__sflush_r+0xf2>
 8026096:	690f      	ldr	r7, [r1, #16]
 8026098:	2f00      	cmp	r7, #0
 802609a:	d0f6      	beq.n	802608a <__sflush_r+0xae>
 802609c:	0793      	lsls	r3, r2, #30
 802609e:	680e      	ldr	r6, [r1, #0]
 80260a0:	bf08      	it	eq
 80260a2:	694b      	ldreq	r3, [r1, #20]
 80260a4:	600f      	str	r7, [r1, #0]
 80260a6:	bf18      	it	ne
 80260a8:	2300      	movne	r3, #0
 80260aa:	eba6 0807 	sub.w	r8, r6, r7
 80260ae:	608b      	str	r3, [r1, #8]
 80260b0:	f1b8 0f00 	cmp.w	r8, #0
 80260b4:	dde9      	ble.n	802608a <__sflush_r+0xae>
 80260b6:	6a21      	ldr	r1, [r4, #32]
 80260b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80260ba:	4643      	mov	r3, r8
 80260bc:	463a      	mov	r2, r7
 80260be:	4628      	mov	r0, r5
 80260c0:	47b0      	blx	r6
 80260c2:	2800      	cmp	r0, #0
 80260c4:	dc08      	bgt.n	80260d8 <__sflush_r+0xfc>
 80260c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80260ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80260ce:	81a3      	strh	r3, [r4, #12]
 80260d0:	f04f 30ff 	mov.w	r0, #4294967295
 80260d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80260d8:	4407      	add	r7, r0
 80260da:	eba8 0800 	sub.w	r8, r8, r0
 80260de:	e7e7      	b.n	80260b0 <__sflush_r+0xd4>
 80260e0:	dfbffffe 	.word	0xdfbffffe

080260e4 <_fflush_r>:
 80260e4:	b538      	push	{r3, r4, r5, lr}
 80260e6:	690b      	ldr	r3, [r1, #16]
 80260e8:	4605      	mov	r5, r0
 80260ea:	460c      	mov	r4, r1
 80260ec:	b913      	cbnz	r3, 80260f4 <_fflush_r+0x10>
 80260ee:	2500      	movs	r5, #0
 80260f0:	4628      	mov	r0, r5
 80260f2:	bd38      	pop	{r3, r4, r5, pc}
 80260f4:	b118      	cbz	r0, 80260fe <_fflush_r+0x1a>
 80260f6:	6a03      	ldr	r3, [r0, #32]
 80260f8:	b90b      	cbnz	r3, 80260fe <_fflush_r+0x1a>
 80260fa:	f7ff f9e9 	bl	80254d0 <__sinit>
 80260fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026102:	2b00      	cmp	r3, #0
 8026104:	d0f3      	beq.n	80260ee <_fflush_r+0xa>
 8026106:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8026108:	07d0      	lsls	r0, r2, #31
 802610a:	d404      	bmi.n	8026116 <_fflush_r+0x32>
 802610c:	0599      	lsls	r1, r3, #22
 802610e:	d402      	bmi.n	8026116 <_fflush_r+0x32>
 8026110:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8026112:	f7ff fbdc 	bl	80258ce <__retarget_lock_acquire_recursive>
 8026116:	4628      	mov	r0, r5
 8026118:	4621      	mov	r1, r4
 802611a:	f7ff ff5f 	bl	8025fdc <__sflush_r>
 802611e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8026120:	07da      	lsls	r2, r3, #31
 8026122:	4605      	mov	r5, r0
 8026124:	d4e4      	bmi.n	80260f0 <_fflush_r+0xc>
 8026126:	89a3      	ldrh	r3, [r4, #12]
 8026128:	059b      	lsls	r3, r3, #22
 802612a:	d4e1      	bmi.n	80260f0 <_fflush_r+0xc>
 802612c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802612e:	f7ff fbcf 	bl	80258d0 <__retarget_lock_release_recursive>
 8026132:	e7dd      	b.n	80260f0 <_fflush_r+0xc>

08026134 <__swhatbuf_r>:
 8026134:	b570      	push	{r4, r5, r6, lr}
 8026136:	460c      	mov	r4, r1
 8026138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802613c:	2900      	cmp	r1, #0
 802613e:	b096      	sub	sp, #88	@ 0x58
 8026140:	4615      	mov	r5, r2
 8026142:	461e      	mov	r6, r3
 8026144:	da0d      	bge.n	8026162 <__swhatbuf_r+0x2e>
 8026146:	89a3      	ldrh	r3, [r4, #12]
 8026148:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802614c:	f04f 0100 	mov.w	r1, #0
 8026150:	bf14      	ite	ne
 8026152:	2340      	movne	r3, #64	@ 0x40
 8026154:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8026158:	2000      	movs	r0, #0
 802615a:	6031      	str	r1, [r6, #0]
 802615c:	602b      	str	r3, [r5, #0]
 802615e:	b016      	add	sp, #88	@ 0x58
 8026160:	bd70      	pop	{r4, r5, r6, pc}
 8026162:	466a      	mov	r2, sp
 8026164:	f000 f848 	bl	80261f8 <_fstat_r>
 8026168:	2800      	cmp	r0, #0
 802616a:	dbec      	blt.n	8026146 <__swhatbuf_r+0x12>
 802616c:	9901      	ldr	r1, [sp, #4]
 802616e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8026172:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8026176:	4259      	negs	r1, r3
 8026178:	4159      	adcs	r1, r3
 802617a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802617e:	e7eb      	b.n	8026158 <__swhatbuf_r+0x24>

08026180 <__smakebuf_r>:
 8026180:	898b      	ldrh	r3, [r1, #12]
 8026182:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026184:	079d      	lsls	r5, r3, #30
 8026186:	4606      	mov	r6, r0
 8026188:	460c      	mov	r4, r1
 802618a:	d507      	bpl.n	802619c <__smakebuf_r+0x1c>
 802618c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8026190:	6023      	str	r3, [r4, #0]
 8026192:	6123      	str	r3, [r4, #16]
 8026194:	2301      	movs	r3, #1
 8026196:	6163      	str	r3, [r4, #20]
 8026198:	b003      	add	sp, #12
 802619a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802619c:	ab01      	add	r3, sp, #4
 802619e:	466a      	mov	r2, sp
 80261a0:	f7ff ffc8 	bl	8026134 <__swhatbuf_r>
 80261a4:	9f00      	ldr	r7, [sp, #0]
 80261a6:	4605      	mov	r5, r0
 80261a8:	4639      	mov	r1, r7
 80261aa:	4630      	mov	r0, r6
 80261ac:	f7ff f86a 	bl	8025284 <_malloc_r>
 80261b0:	b948      	cbnz	r0, 80261c6 <__smakebuf_r+0x46>
 80261b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80261b6:	059a      	lsls	r2, r3, #22
 80261b8:	d4ee      	bmi.n	8026198 <__smakebuf_r+0x18>
 80261ba:	f023 0303 	bic.w	r3, r3, #3
 80261be:	f043 0302 	orr.w	r3, r3, #2
 80261c2:	81a3      	strh	r3, [r4, #12]
 80261c4:	e7e2      	b.n	802618c <__smakebuf_r+0xc>
 80261c6:	89a3      	ldrh	r3, [r4, #12]
 80261c8:	6020      	str	r0, [r4, #0]
 80261ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80261ce:	81a3      	strh	r3, [r4, #12]
 80261d0:	9b01      	ldr	r3, [sp, #4]
 80261d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80261d6:	b15b      	cbz	r3, 80261f0 <__smakebuf_r+0x70>
 80261d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80261dc:	4630      	mov	r0, r6
 80261de:	f000 f81d 	bl	802621c <_isatty_r>
 80261e2:	b128      	cbz	r0, 80261f0 <__smakebuf_r+0x70>
 80261e4:	89a3      	ldrh	r3, [r4, #12]
 80261e6:	f023 0303 	bic.w	r3, r3, #3
 80261ea:	f043 0301 	orr.w	r3, r3, #1
 80261ee:	81a3      	strh	r3, [r4, #12]
 80261f0:	89a3      	ldrh	r3, [r4, #12]
 80261f2:	431d      	orrs	r5, r3
 80261f4:	81a5      	strh	r5, [r4, #12]
 80261f6:	e7cf      	b.n	8026198 <__smakebuf_r+0x18>

080261f8 <_fstat_r>:
 80261f8:	b538      	push	{r3, r4, r5, lr}
 80261fa:	4d07      	ldr	r5, [pc, #28]	@ (8026218 <_fstat_r+0x20>)
 80261fc:	2300      	movs	r3, #0
 80261fe:	4604      	mov	r4, r0
 8026200:	4608      	mov	r0, r1
 8026202:	4611      	mov	r1, r2
 8026204:	602b      	str	r3, [r5, #0]
 8026206:	f7db fc0e 	bl	8001a26 <_fstat>
 802620a:	1c43      	adds	r3, r0, #1
 802620c:	d102      	bne.n	8026214 <_fstat_r+0x1c>
 802620e:	682b      	ldr	r3, [r5, #0]
 8026210:	b103      	cbz	r3, 8026214 <_fstat_r+0x1c>
 8026212:	6023      	str	r3, [r4, #0]
 8026214:	bd38      	pop	{r3, r4, r5, pc}
 8026216:	bf00      	nop
 8026218:	24026f98 	.word	0x24026f98

0802621c <_isatty_r>:
 802621c:	b538      	push	{r3, r4, r5, lr}
 802621e:	4d06      	ldr	r5, [pc, #24]	@ (8026238 <_isatty_r+0x1c>)
 8026220:	2300      	movs	r3, #0
 8026222:	4604      	mov	r4, r0
 8026224:	4608      	mov	r0, r1
 8026226:	602b      	str	r3, [r5, #0]
 8026228:	f7db fc02 	bl	8001a30 <_isatty>
 802622c:	1c43      	adds	r3, r0, #1
 802622e:	d102      	bne.n	8026236 <_isatty_r+0x1a>
 8026230:	682b      	ldr	r3, [r5, #0]
 8026232:	b103      	cbz	r3, 8026236 <_isatty_r+0x1a>
 8026234:	6023      	str	r3, [r4, #0]
 8026236:	bd38      	pop	{r3, r4, r5, pc}
 8026238:	24026f98 	.word	0x24026f98

0802623c <_init>:
 802623c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802623e:	bf00      	nop
 8026240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026242:	bc08      	pop	{r3}
 8026244:	469e      	mov	lr, r3
 8026246:	4770      	bx	lr

08026248 <_fini>:
 8026248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802624a:	bf00      	nop
 802624c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802624e:	bc08      	pop	{r3}
 8026250:	469e      	mov	lr, r3
 8026252:	4770      	bx	lr
